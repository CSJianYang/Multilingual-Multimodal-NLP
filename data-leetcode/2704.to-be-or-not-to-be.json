[
    {
        "title": "Design Graph With Shortest Path Calculator",
        "question_content": "There is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. The edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, edgeCosti] meaning that there is an edge from fromi to toi with the cost edgeCosti.\nImplement the Graph class:\n\n\tGraph(int n, int[][] edges) initializes the object with n nodes and the given edges.\n\taddEdge(int[] edge) adds an edge to the list of edges where edge = [from, to, edgeCost]. It is guaranteed that there is no edge between the two nodes before adding this one.\n\tint shortestPath(int node1, int node2) returns the minimum cost of a path from node1 to node2. If no path exists, return -1. The cost of a path is the sum of the costs of the edges in the path.\n\n&nbsp;\nExample 1:\n\nInput\n[\"Graph\", \"shortestPath\", \"shortestPath\", \"addEdge\", \"shortestPath\"]\n[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]\nOutput\n[null, 6, -1, null, 6]\nExplanation\nGraph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);\ng.shortestPath(3, 2); // return 6. The shortest path from 3 to 2 in the first diagram above is 3 -> 0 -> 1 -> 2 with a total cost of 3 + 2 + 1 = 6.\ng.shortestPath(0, 3); // return -1. There is no path from 0 to 3.\ng.addEdge([1, 3, 4]); // We add an edge from node 1 to node 3, and we get the second diagram above.\ng.shortestPath(0, 3); // return 6. The shortest path from 0 to 3 now is 0 -> 1 -> 3 with a total cost of 2 + 4 = 6.\n\n&nbsp;\nConstraints:\n\n\t1 <= n <= 100\n\t0 <= edges.length <= n * (n - 1)\n\tedges[i].length == edge.length == 3\n\t0 <= fromi, toi, from, to, node1, node2 <= n - 1\n\t1 <= edgeCosti, edgeCost <= 106\n\tThere are no repeated edges and no self-loops in the graph at any point.\n\tAt most 100 calls will be made for addEdge.\n\tAt most 100 calls will be made for shortestPath.",
        "solutions": [
            {
                "id": 3419976,
                "title": "c-java-python3-simple-dijkstra",
                "content": "\\n# Intuition\\nDijkstra can be used to find the minimum distance between nodes\\n\\n# Approach\\nStore edges in an adjacency matrix and perform diskstra each time shortestPath method is called\\n\\n# Complexity\\n- Time complexity: O(Elog(V)) (Dijkstra)\\n\\n- Space complexity: O(E + V)\\n\\n# Code\\n**Python3**:\\n```\\ndef __init__(self, n: int, edges: List[List[int]]):\\n    self.adj_list = [[] for _ in range(n)]\\n    for a, b, cost in edges:\\n        self.adj_list[a].append((b, cost))\\n\\ndef addEdge(self, edge: List[int]) -> None:\\n    a, b, cost = edge\\n    self.adj_list[a].append((b, cost))\\n\\ndef shortestPath(self, node1: int, node2: int) -> int:\\n    n, pq = len(self.adj_list), [(0, node1)]\\n    dist = [inf] * (n)\\n    dist[node1] = 0\\n\\n    while pq:\\n        d, node = heappop(pq)\\n        if node == node2: return d\\n        if d > dist[node]: continue\\n        for neighbor, cost in self.adj_list[node]:\\n            new_dist = d + cost\\n            if new_dist < dist[neighbor]:\\n                dist[neighbor] = new_dist\\n                heappush(pq, (new_dist, neighbor))\\n    return -1\\n```\\n\\n**C++**:\\n```\\nvector<vector<pair<int, int>>> adj_list;\\nGraph(int n, vector<vector<int>>& edges) {\\n    adj_list.resize(n);\\n    for (auto& e: edges)\\n        adj_list[e[0]].push_back(make_pair(e[1], e[2]));\\n}\\n\\nvoid addEdge(vector<int> e) {\\n    adj_list[e[0]].push_back(make_pair(e[1], e[2]));\\n}\\n\\nint shortestPath(int node1, int node2) {\\n    int n = adj_list.size();\\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n    vector<int> dist(n, INT_MAX);\\n    dist[node1] = 0;\\n    pq.push(make_pair(0, node1));\\n    \\n    while (!pq.empty()) {\\n        int d = pq.top().first, node = pq.top().second; pq.pop();\\n        if (node == node2) return d;\\n        if (d > dist[node]) continue;\\n        for (auto& neighbor : adj_list[node]) {\\n            int new_dist = d + neighbor.second;\\n            if (new_dist < dist[neighbor.first]) {\\n                dist[neighbor.first] = new_dist;\\n                pq.push(make_pair(new_dist, neighbor.first));\\n            }\\n        }\\n    }\\n    return -1;\\n}\\n```\\n\\n**Java**:\\n```\\nList<List<Pair<Integer, Integer>>> adj_list;\\npublic Graph(int n, int[][] edges) {\\n    adj_list = new ArrayList<>();\\n    for (int i = 0; i < n; i++)\\n        adj_list.add(new ArrayList<>());\\n    for (int[] e : edges)\\n        adj_list.get(e[0]).add(new Pair<>(e[1], e[2]));\\n}\\n\\npublic void addEdge(int[] e) {\\n    adj_list.get(e[0]).add(new Pair<>(e[1], e[2]));\\n}\\n\\npublic int shortestPath(int node1, int node2) {\\n    int n = adj_list.size();\\n    PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.getKey()));\\n    int[] dist = new int[n];\\n    Arrays.fill(dist, Integer.MAX_VALUE);\\n    dist[node1] = 0;\\n    pq.offer(new Pair<>(0, node1));\\n\\n    while (!pq.isEmpty()) {\\n        var pair = pq.poll();\\n        int d = pair.getKey(), node = pair.getValue();\\n        if (node == node2) return d;\\n        if (d > dist[node]) continue;\\n        for (Pair<Integer, Integer> neighbor : adj_list.get(node)) {\\n            int new_dist = d + neighbor.getValue();\\n            if (new_dist < dist[neighbor.getKey()]) {\\n                dist[neighbor.getKey()] = new_dist;\\n                pq.offer(new Pair<>(new_dist, neighbor.getKey()));\\n            }\\n        }\\n    }\\n    return -1;\\n}\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef __init__(self, n: int, edges: List[List[int]]):\\n    self.adj_list = [[] for _ in range(n)]\\n    for a, b, cost in edges:\\n        self.adj_list[a].append((b, cost))\\n\\ndef addEdge(self, edge: List[int]) -> None:\\n    a, b, cost = edge\\n    self.adj_list[a].append((b, cost))\\n\\ndef shortestPath(self, node1: int, node2: int) -> int:\\n    n, pq = len(self.adj_list), [(0, node1)]\\n    dist = [inf] * (n)\\n    dist[node1] = 0\\n\\n    while pq:\\n        d, node = heappop(pq)\\n        if node == node2: return d\\n        if d > dist[node]: continue\\n        for neighbor, cost in self.adj_list[node]:\\n            new_dist = d + cost\\n            if new_dist < dist[neighbor]:\\n                dist[neighbor] = new_dist\\n                heappush(pq, (new_dist, neighbor))\\n    return -1\\n```\n```\\nvector<vector<pair<int, int>>> adj_list;\\nGraph(int n, vector<vector<int>>& edges) {\\n    adj_list.resize(n);\\n    for (auto& e: edges)\\n        adj_list[e[0]].push_back(make_pair(e[1], e[2]));\\n}\\n\\nvoid addEdge(vector<int> e) {\\n    adj_list[e[0]].push_back(make_pair(e[1], e[2]));\\n}\\n\\nint shortestPath(int node1, int node2) {\\n    int n = adj_list.size();\\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n    vector<int> dist(n, INT_MAX);\\n    dist[node1] = 0;\\n    pq.push(make_pair(0, node1));\\n    \\n    while (!pq.empty()) {\\n        int d = pq.top().first, node = pq.top().second; pq.pop();\\n        if (node == node2) return d;\\n        if (d > dist[node]) continue;\\n        for (auto& neighbor : adj_list[node]) {\\n            int new_dist = d + neighbor.second;\\n            if (new_dist < dist[neighbor.first]) {\\n                dist[neighbor.first] = new_dist;\\n                pq.push(make_pair(new_dist, neighbor.first));\\n            }\\n        }\\n    }\\n    return -1;\\n}\\n```\n```\\nList<List<Pair<Integer, Integer>>> adj_list;\\npublic Graph(int n, int[][] edges) {\\n    adj_list = new ArrayList<>();\\n    for (int i = 0; i < n; i++)\\n        adj_list.add(new ArrayList<>());\\n    for (int[] e : edges)\\n        adj_list.get(e[0]).add(new Pair<>(e[1], e[2]));\\n}\\n\\npublic void addEdge(int[] e) {\\n    adj_list.get(e[0]).add(new Pair<>(e[1], e[2]));\\n}\\n\\npublic int shortestPath(int node1, int node2) {\\n    int n = adj_list.size();\\n    PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(Comparator.comparingInt(p -> p.getKey()));\\n    int[] dist = new int[n];\\n    Arrays.fill(dist, Integer.MAX_VALUE);\\n    dist[node1] = 0;\\n    pq.offer(new Pair<>(0, node1));\\n\\n    while (!pq.isEmpty()) {\\n        var pair = pq.poll();\\n        int d = pair.getKey(), node = pair.getValue();\\n        if (node == node2) return d;\\n        if (d > dist[node]) continue;\\n        for (Pair<Integer, Integer> neighbor : adj_list.get(node)) {\\n            int new_dist = d + neighbor.getValue();\\n            if (new_dist < dist[neighbor.getKey()]) {\\n                dist[neighbor.getKey()] = new_dist;\\n                pq.offer(new Pair<>(new_dist, neighbor.getKey()));\\n            }\\n        }\\n    }\\n    return -1;\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3420159,
                "title": "dijkstra-vs-floyd-warshall",
                "content": "> My account (votrubac) was banned due to the contest rules violation... Not sure if LeetCode got hacked or someting.\\n\\nWe could pre-compute all-pairs shortest paths in O(n ^ 3) using the Floyd\\u2013Warshall algorithm. There are algorithms that are a bit faster (but more complex).\\n\\nI am not aware, however, of a fast incremental version of the all-pairs shortest paths algorithm. For Floyd\\u2013Warshall it would take O(n ^ 2) to recompute, and we need to do for each `addEdge` call.\\n\\nSince we are limited to 100 `addEdge` and 100 `shortestPath` calls, we can just do Dijkstra instead - O(n ^ 2) for every `shortestPath` call. If the number of updates is much smaller than the number of queries - then Floyd\\u2013Warshall would be a better choice.\\n\\n## Dijkstra\\n**C++**\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<array<int, 2>>> al;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        al.resize(n);\\n        for (auto &e : edges)\\n            al[e[0]].push_back({e[1], e[2]});\\n    }\\n    void addEdge(const vector<int> &e) {\\n        al[e[0]].push_back({e[1], e[2]});\\n    }\\n    int shortestPath(int node1, int node2) {\\n        priority_queue<array<int, 2>, vector<array<int, 2>>, greater<>> pq;\\n        vector<int> cost(al.size(), INT_MAX);\\n        cost[node1] = 0;\\n        pq.push({0, node1});\\n        while (!pq.empty() && pq.top()[1] != node2) {\\n            auto [cost_i, i] = pq.top(); pq.pop();\\n            if (cost_i != cost[i])\\n                continue;\\n            for(auto [j, cost_j] : al[i])\\n                if (cost_i + cost_j < cost[j]) {\\n                    cost[j] = cost_i + cost_j;\\n                    pq.push({cost[j], j});\\n                }\\n        }\\n        return cost[node2] == INT_MAX ? -1 : cost[node2];\\n    }\\n};\\n```\\n\\n## Floyd\\u2013Warshall\\n**C++**\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> am;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        am = vector<vector<int>>(n, vector<int>(n, 1e9));\\n        for (auto &e : edges)\\n            am[e[0]][e[1]] = e[2];\\n        for (int i = 0; i < n; ++i)\\n            am[i][i] = 0;\\n        for (int k = 0; k < n; ++k)\\n            for (int i = 0; i < n; ++i)\\n                for (int j = 0; j < n; ++j)\\n                    am[i][j] = min(am[i][j], am[i][k] + am[k][j]);\\n    }\\n    void addEdge(const vector<int> &e) {\\n        for (int i = 0; i < am.size(); ++i)\\n            for (int j = 0; j < am.size(); ++j)\\n                am[i][j] = min(am[i][j], am[i][e[0]] + am[e[1]][j] + e[2]);\\n    }\\n    int shortestPath(int n1, int n2) {\\n        return am[n1][n2] == 1e9 ? -1 : am[n1][n2];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Graph {\\npublic:\\n    vector<vector<array<int, 2>>> al;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        al.resize(n);\\n        for (auto &e : edges)\\n            al[e[0]].push_back({e[1], e[2]});\\n    }\\n    void addEdge(const vector<int> &e) {\\n        al[e[0]].push_back({e[1], e[2]});\\n    }\\n    int shortestPath(int node1, int node2) {\\n        priority_queue<array<int, 2>, vector<array<int, 2>>, greater<>> pq;\\n        vector<int> cost(al.size(), INT_MAX);\\n        cost[node1] = 0;\\n        pq.push({0, node1});\\n        while (!pq.empty() && pq.top()[1] != node2) {\\n            auto [cost_i, i] = pq.top(); pq.pop();\\n            if (cost_i != cost[i])\\n                continue;\\n            for(auto [j, cost_j] : al[i])\\n                if (cost_i + cost_j < cost[j]) {\\n                    cost[j] = cost_i + cost_j;\\n                    pq.push({cost[j], j});\\n                }\\n        }\\n        return cost[node2] == INT_MAX ? -1 : cost[node2];\\n    }\\n};\\n```\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> am;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        am = vector<vector<int>>(n, vector<int>(n, 1e9));\\n        for (auto &e : edges)\\n            am[e[0]][e[1]] = e[2];\\n        for (int i = 0; i < n; ++i)\\n            am[i][i] = 0;\\n        for (int k = 0; k < n; ++k)\\n            for (int i = 0; i < n; ++i)\\n                for (int j = 0; j < n; ++j)\\n                    am[i][j] = min(am[i][j], am[i][k] + am[k][j]);\\n    }\\n    void addEdge(const vector<int> &e) {\\n        for (int i = 0; i < am.size(); ++i)\\n            for (int j = 0; j < am.size(); ++j)\\n                am[i][j] = min(am[i][j], am[i][e[0]] + am[e[1]][j] + e[2]);\\n    }\\n    int shortestPath(int n1, int n2) {\\n        return am[n1][n2] == 1e9 ? -1 : am[n1][n2];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420035,
                "title": "simple-bfs-with-cost-very-simple-easy-to-understand-solution",
                "content": "<b> Please Up Vote if you like the solution\\n```\\n/*\\n1. Calculating the shortest path using bfs.\\n2. While doing so just need to keep tracking of the cost of the node from the source in vis array.\\n3. Traverse to the node, only if moving to this will reduce the cost.\\n*/\\n\\n\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> g;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        g.resize(n);\\n        for(auto e: edges)  g[e[0]].push_back({e[1], e[2]});\\n    }\\n    \\n    void addEdge(vector<int> e) { g[e[0]].push_back({e[1], e[2]}); }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if(node1 == node2) return 0;\\n        int ans = INT_MAX;\\n        vector<int> vis(g.size(), INT_MAX);\\n        queue<pair<int,int>> q; q.push({node1, 0});\\n        while(!q.empty()){\\n            auto p = q.front(); q.pop();\\n            for(auto node: g[p.first]){\\n                int newCost = node.second + p.second;\\n                if(node.first == node2 ) ans = min(ans, newCost );\\n                if(vis[node.first] >= newCost){ \\n                    vis[node.first] = newCost; \\n                    q.push({node.first, newCost}); \\n                }\\n            }\\n        }\\n        return (ans == INT_MAX)?-1:ans;\\n    }\\n};\\n\\n```\\nHere is an article of my recent interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/*\\n1. Calculating the shortest path using bfs.\\n2. While doing so just need to keep tracking of the cost of the node from the source in vis array.\\n3. Traverse to the node, only if moving to this will reduce the cost.\\n*/\\n\\n\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> g;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        g.resize(n);\\n        for(auto e: edges)  g[e[0]].push_back({e[1], e[2]});\\n    }\\n    \\n    void addEdge(vector<int> e) { g[e[0]].push_back({e[1], e[2]}); }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if(node1 == node2) return 0;\\n        int ans = INT_MAX;\\n        vector<int> vis(g.size(), INT_MAX);\\n        queue<pair<int,int>> q; q.push({node1, 0});\\n        while(!q.empty()){\\n            auto p = q.front(); q.pop();\\n            for(auto node: g[p.first]){\\n                int newCost = node.second + p.second;\\n                if(node.first == node2 ) ans = min(ans, newCost );\\n                if(vis[node.first] >= newCost){ \\n                    vis[node.first] = newCost; \\n                    q.push({node.first, newCost}); \\n                }\\n            }\\n        }\\n        return (ans == INT_MAX)?-1:ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420250,
                "title": "legendary-floyd-warshall-algorithm",
                "content": "# Complexity\\n- Time complexity: n^3 -> init || n^2 -> add_edge\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: n^2\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<long>> dist;\\n    int N=0;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        N=n;\\n        dist = vector<vector<long>>(n,vector<long>(n,1e14));\\n        \\n        \\n        for(auto &edge:edges){\\n            dist[edge[0]][edge[1]] = edge[2];\\n        }\\n        \\n        \\n        for(int i=0;i<n;++i){\\n            dist[i][i]=0;\\n        }\\n        \\n        for(int k=0;k<n;++k){\\n            for(int i=0;i<n;++i){\\n                for(int j=0;j<n;++j){\\n                        dist[i][j] = min(dist[i][j],dist[i][k] + dist[k][j]);\\n                    }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        for(int i=0;i<N;++i){\\n            for(int j=0;j<N;++j){\\n                dist[i][j] = min(dist[i][j],dist[i][edge[0]]+dist[edge[1]][j]+edge[2]);\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return ((dist[node1][node2]>=1e14) ? -1 : dist[node1][node2]);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<long>> dist;\\n    int N=0;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        N=n;\\n        dist = vector<vector<long>>(n,vector<long>(n,1e14));\\n        \\n        \\n        for(auto &edge:edges){\\n            dist[edge[0]][edge[1]] = edge[2];\\n        }\\n        \\n        \\n        for(int i=0;i<n;++i){\\n            dist[i][i]=0;\\n        }\\n        \\n        for(int k=0;k<n;++k){\\n            for(int i=0;i<n;++i){\\n                for(int j=0;j<n;++j){\\n                        dist[i][j] = min(dist[i][j],dist[i][k] + dist[k][j]);\\n                    }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        for(int i=0;i<N;++i){\\n            for(int j=0;j<N;++j){\\n                dist[i][j] = min(dist[i][j],dist[i][edge[0]]+dist[edge[1]][j]+edge[2]);\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return ((dist[node1][node2]>=1e14) ? -1 : dist[node1][node2]);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420014,
                "title": "java-python-3-dijkstra-algorithm",
                "content": "\\n\\n```java\\n    private Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();\\n\\n    public Graph(int n, int[][] edges) {\\n        for (int[] e : edges) {\\n            graph.computeIfAbsent(e[0], m -> new HashMap<>()).put(e[1], e[2]);\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        graph.computeIfAbsent(edge[0], m -> new HashMap<>()).put(edge[1], edge[2]);\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\\n        pq.offer(new int[]{0, node1});\\n        Set<Integer> seen = new HashSet<>();\\n        while (!pq.isEmpty()) {\\n            int cost = pq.peek()[0], node = pq.poll()[1];\\n            if (node == node2) {\\n                return cost;\\n            }\\n            if (graph.containsKey(node) && seen.add(node)) {\\n                for (var entry : graph.get(node).entrySet()) {\\n                    int kid = entry.getKey(), w = entry.getValue();\\n                    pq.offer(new int[]{w + cost, kid});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n```\\n```python\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.graph = defaultdict(dict)\\n        for a, b, cost in edges:\\n            self.graph[a][b] = cost\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        a, b, cost = edge\\n        self.graph[a][b] = cost\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        g, seen = self.graph, set()\\n        heap = [(0, node1)]\\n        while heap:\\n            cost, node = heappop(heap)\\n            if node == node2:\\n                return cost\\n            if node not in seen and node in g:\\n                seen.add(node)\\n                for kid, cost1 in g[node].items():\\n                    heappush(heap, (cost + cost1, kid))\\n        return -1\\n```",
                "solutionTags": [],
                "code": "```java\\n    private Map<Integer, Map<Integer, Integer>> graph = new HashMap<>();\\n\\n    public Graph(int n, int[][] edges) {\\n        for (int[] e : edges) {\\n            graph.computeIfAbsent(e[0], m -> new HashMap<>()).put(e[1], e[2]);\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        graph.computeIfAbsent(edge[0], m -> new HashMap<>()).put(edge[1], edge[2]);\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));\\n        pq.offer(new int[]{0, node1});\\n        Set<Integer> seen = new HashSet<>();\\n        while (!pq.isEmpty()) {\\n            int cost = pq.peek()[0], node = pq.poll()[1];\\n            if (node == node2) {\\n                return cost;\\n            }\\n            if (graph.containsKey(node) && seen.add(node)) {\\n                for (var entry : graph.get(node).entrySet()) {\\n                    int kid = entry.getKey(), w = entry.getValue();\\n                    pq.offer(new int[]{w + cost, kid});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n```\n```python\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.graph = defaultdict(dict)\\n        for a, b, cost in edges:\\n            self.graph[a][b] = cost\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        a, b, cost = edge\\n        self.graph[a][b] = cost\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        g, seen = self.graph, set()\\n        heap = [(0, node1)]\\n        while heap:\\n            cost, node = heappop(heap)\\n            if node == node2:\\n                return cost\\n            if node not in seen and node in g:\\n                seen.add(node)\\n                for kid, cost1 in g[node].items():\\n                    heappush(heap, (cost + cost1, kid))\\n        return -1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3420087,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n    List<List<int[]>> res;\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        res = new ArrayList<>();\\n        for (int i = 0; i < n; i++) {\\n            res.add(new ArrayList<>());\\n        }\\n        for (int[] edge : edges) {\\n            int u = edge[0], v = edge[1], w = edge[2];\\n            res.get(u).add(new int[]{v, w});\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        int u = edge[0], v = edge[1], w = edge[2];\\n        res.get(u).add(new int[]{v, w});\\n    }\\n\\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> nm = new PriorityQueue<>((a, b) -> a[1] - b[1]);\\n        nm.offer(new int[]{node1, 0});\\n        boolean[] visited = new boolean[n];\\n        while (!nm.isEmpty())\\n        {\\n            int[] curr = nm.poll();\\n            int u = curr[0], d = curr[1];\\n            if (visited[u])\\n            {\\n                continue;\\n            }\\n            visited[u] = true;\\n            if (u == node2) return d;\\n            for (int[] e : res.get(u))\\n            {\\n                int v = e[0], w = e[1];\\n                if (!visited[v])\\n                {\\n                    nm.offer(new int[]{v, d + w});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n    List<List<int[]>> res;\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        res = new ArrayList<>();\\n        for (int i = 0; i < n; i++) {\\n            res.add(new ArrayList<>());\\n        }\\n        for (int[] edge : edges) {\\n            int u = edge[0], v = edge[1], w = edge[2];\\n            res.get(u).add(new int[]{v, w});\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        int u = edge[0], v = edge[1], w = edge[2];\\n        res.get(u).add(new int[]{v, w});\\n    }\\n\\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> nm = new PriorityQueue<>((a, b) -> a[1] - b[1]);\\n        nm.offer(new int[]{node1, 0});\\n        boolean[] visited = new boolean[n];\\n        while (!nm.isEmpty())\\n        {\\n            int[] curr = nm.poll();\\n            int u = curr[0], d = curr[1];\\n            if (visited[u])\\n            {\\n                continue;\\n            }\\n            visited[u] = true;\\n            if (u == node2) return d;\\n            for (int[] e : res.get(u))\\n            {\\n                int v = e[0], w = e[1];\\n                if (!visited[v])\\n                {\\n                    nm.offer(new int[]{v, d + w});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420070,
                "title": "simple-java-dijkstra",
                "content": "```\\nclass pair{\\n    int node;\\n    int dist;\\n    pair(int node1,int dist1){\\n        node=node1;\\n        dist=dist1;\\n    }\\n}\\nclass Graph {\\n    List<List<pair>> adj;\\n    int n1;\\n    public Graph(int n, int[][] edges) {\\n        adj=new ArrayList<>();\\n        for(int i=0;i<n;i++){\\n            adj.add(new ArrayList<>());\\n        }\\n        for(int p[]:edges){\\n            adj.get(p[0]).add(new pair(p[1],p[2]));\\n        }\\n        n1=n;\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int src, int dest) {\\n        int distn[]=new int[n1];\\n        Arrays.fill(distn,(int)1e9);\\n        distn[src]=0;\\n        Queue<pair> q=new LinkedList<>();\\n        q.add(new pair(src,0));\\n        while(!q.isEmpty()){\\n            pair it=q.poll();\\n            int node=it.node;\\n            int dis=it.dist;\\n            for(pair x:adj.get(node)){\\n                if(x.dist+dis<distn[x.node]){\\n                    distn[x.node]=x.dist+dis;\\n                    q.add(new pair(x.node,distn[x.node]));\\n                }\\n            }\\n        }\\n        return distn[dest]==(int)1e9?-1:distn[dest];\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass pair{\\n    int node;\\n    int dist;\\n    pair(int node1,int dist1){\\n        node=node1;\\n        dist=dist1;\\n    }\\n}\\nclass Graph {\\n    List<List<pair>> adj;\\n    int n1;\\n    public Graph(int n, int[][] edges) {\\n        adj=new ArrayList<>();\\n        for(int i=0;i<n;i++){\\n            adj.add(new ArrayList<>());\\n        }\\n        for(int p[]:edges){\\n            adj.get(p[0]).add(new pair(p[1],p[2]));\\n        }\\n        n1=n;\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int src, int dest) {\\n        int distn[]=new int[n1];\\n        Arrays.fill(distn,(int)1e9);\\n        distn[src]=0;\\n        Queue<pair> q=new LinkedList<>();\\n        q.add(new pair(src,0));\\n        while(!q.isEmpty()){\\n            pair it=q.poll();\\n            int node=it.node;\\n            int dis=it.dist;\\n            for(pair x:adj.get(node)){\\n                if(x.dist+dis<distn[x.node]){\\n                    distn[x.node]=x.dist+dis;\\n                    q.add(new pair(x.node,distn[x.node]));\\n                }\\n            }\\n        }\\n        return distn[dest]==(int)1e9?-1:distn[dest];\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420247,
                "title": "explained-simple-and-clear-python-code",
                "content": "# Intuition\\nThe problem is asking to find the shortest path between two given nodes in a directed weighted graph. This can be solved by using Dijkstra\\'s algorithm, which is a well-known algorithm used to find the shortest path in a weighted graph.\\n\\n\\n# Approach\\nWe can implement the Graph class with an adjacency list data structure to store the graph. The constructor takes two inputs, the number of nodes in the graph and the edges of the graph. We can create the adjacency list by iterating through the edges and adding them to the appropriate nodes.\\n\\nThe addEdge() function can add a new edge to the graph by simply appending the edge to the adjacency list of the \"from\" node.\\n\\nThe shortestPath() function is where we will implement Dijkstra\\'s algorithm. We start by initializing a heap with a tuple of (0, node1), where node1 is the starting node. We also initialize a dictionary to keep track of the minimum distance from the starting node to each node. We set the distance to the starting node as 0, and all other distances as infinity.\\n\\nWe then pop the smallest element from the heap, and check if we have reached the target node (node2). If so, we return the current distance. If not, we check if we have already found a shorter path to the current node. If we have, we skip to the next node. Otherwise, we update the minimum distance to the current node and add its neighbors to the heap.\\n\\nFinally, if we have gone through all the nodes and have not found a path to the target node, we return -1.\\n# Complexity\\n- Time complexity:\\nThe time complexity of Dijkstra\\'s algorithm is O(E + V log V), where E is the number of edges and V is the number of vertices. In our implementation, we use a heap to keep track of the next node to visit, which takes O(log V) time for each insertion and deletion. Therefore, the time complexity of our implementation is also O(E + V log V).\\n- Space complexity:\\nWe use an adjacency list to store the graph, which takes O(E + V) space. We also use a heap and a dictionary to keep track of the minimum distances, which takes O(V) space. Therefore, the overall space complexity is O(E + V).\\n# Code\\n```\\nimport heapq\\n\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.adj_list = {i: [] for i in range(n)}\\n        for edge in edges:\\n            self.adj_list[edge[0]].append((edge[1], edge[2]))\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        self.adj_list[edge[0]].append((edge[1], edge[2]))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        heap = [(0, node1)]\\n        dist = {i: float(\\'inf\\') for i in range(len(self.adj_list))}\\n        dist[node1] = 0\\n        \\n        while heap:\\n            (d, node) = heapq.heappop(heap)\\n            if node == node2:\\n                return d\\n            if d > dist[node]:\\n                continue\\n            for neighbor, weight in self.adj_list[node]:\\n                new_dist = d + weight\\n                if new_dist < dist[neighbor]:\\n                    dist[neighbor] = new_dist\\n                    heapq.heappush(heap, (new_dist, neighbor))\\n                    \\n        return -1\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport heapq\\n\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.adj_list = {i: [] for i in range(n)}\\n        for edge in edges:\\n            self.adj_list[edge[0]].append((edge[1], edge[2]))\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        self.adj_list[edge[0]].append((edge[1], edge[2]))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        heap = [(0, node1)]\\n        dist = {i: float(\\'inf\\') for i in range(len(self.adj_list))}\\n        dist[node1] = 0\\n        \\n        while heap:\\n            (d, node) = heapq.heappop(heap)\\n            if node == node2:\\n                return d\\n            if d > dist[node]:\\n                continue\\n            for neighbor, weight in self.adj_list[node]:\\n                new_dist = d + weight\\n                if new_dist < dist[neighbor]:\\n                    dist[neighbor] = new_dist\\n                    heapq.heappush(heap, (new_dist, neighbor))\\n                    \\n        return -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421164,
                "title": "c-graph-dijkstra-algo",
                "content": "# Code\\n```\\nclass Graph\\n{\\npublic:\\n    unordered_map<int, vector<pair<int, int>>> graph;\\n    int k;\\n    Graph(int n, vector<vector<int>> &e)\\n    {\\n        for (auto x : e)\\n        {\\n            vector<int> l;\\n            graph[x[0]].push_back({x[1], x[2]});\\n        }\\n        k = n;\\n    }\\n    void addEdge(vector<int> e)\\n    {\\n        graph[e[0]].push_back({e[1], e[2]});\\n    }\\n    int shortestPath(int n1, int n2)\\n    {\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> p;\\n        p.push({0, n1});\\n        vector<int> dis(k + 1, 1e9);\\n        dis[n1] = 0;\\n        while (!p.empty())\\n        {\\n            int dist = p.top().first;\\n            int node = p.top().second;\\n            p.pop();\\n            for (auto i : graph[node])\\n            {\\n                if (dist + i.second < dis[i.first])\\n                {\\n                    dis[i.first] = dist + i.second;\\n                    p.push({dis[i.first], i.first});\\n                }\\n            }\\n        }\\n        if (dis[n2] == 1e9)\\n            return -1;\\n        else\\n            return dis[n2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```\\n![upvote (2).jpg](https://assets.leetcode.com/users/images/5689674d-29b2-49b8-ab6a-5d2a317d5e0b_1681590486.9208362.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Graph",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph\\n{\\npublic:\\n    unordered_map<int, vector<pair<int, int>>> graph;\\n    int k;\\n    Graph(int n, vector<vector<int>> &e)\\n    {\\n        for (auto x : e)\\n        {\\n            vector<int> l;\\n            graph[x[0]].push_back({x[1], x[2]});\\n        }\\n        k = n;\\n    }\\n    void addEdge(vector<int> e)\\n    {\\n        graph[e[0]].push_back({e[1], e[2]});\\n    }\\n    int shortestPath(int n1, int n2)\\n    {\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> p;\\n        p.push({0, n1});\\n        vector<int> dis(k + 1, 1e9);\\n        dis[n1] = 0;\\n        while (!p.empty())\\n        {\\n            int dist = p.top().first;\\n            int node = p.top().second;\\n            p.pop();\\n            for (auto i : graph[node])\\n            {\\n                if (dist + i.second < dis[i.first])\\n                {\\n                    dis[i.first] = dist + i.second;\\n                    p.push({dis[i.first], i.first});\\n                }\\n            }\\n        }\\n        if (dis[n2] == 1e9)\\n            return -1;\\n        else\\n            return dis[n2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422331,
                "title": "easy-dijkstra",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>>adj_graph;\\n    Graph(int n, vector<vector<int>>& edges) {        \\n        adj_graph.resize(n);\\n        for(auto edge:edges){\\n            adj_graph[edge[0]].push_back({edge[1],edge[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj_graph[edge[0]].push_back({edge[1],edge[2]});\\n        \\n    }\\n    int shortestPath(int node1, int node2) {   \\n        int n= adj_graph.size();\\n        vector<int>dist(n,1e9);\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        pq.push({0,node1});\\n        dist[node1]=0;\\n        while(!pq.empty()){\\n            int node=pq.top().second;\\n            int pdist=pq.top().first;\\n            pq.pop();\\n            if(node==node2)return pdist;\\n            for(auto ngh:adj_graph[node]){\\n                int curdist=ngh.second;\\n                int adjnode=ngh.first;\\n                if(curdist+pdist<dist[adjnode]){\\n                    dist[adjnode]=curdist+pdist;\\n                    pq.push({dist[adjnode],adjnode});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>>adj_graph;\\n    Graph(int n, vector<vector<int>>& edges) {        \\n        adj_graph.resize(n);\\n        for(auto edge:edges){\\n            adj_graph[edge[0]].push_back({edge[1],edge[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj_graph[edge[0]].push_back({edge[1],edge[2]});\\n        \\n    }\\n    int shortestPath(int node1, int node2) {   \\n        int n= adj_graph.size();\\n        vector<int>dist(n,1e9);\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        pq.push({0,node1});\\n        dist[node1]=0;\\n        while(!pq.empty()){\\n            int node=pq.top().second;\\n            int pdist=pq.top().first;\\n            pq.pop();\\n            if(node==node2)return pdist;\\n            for(auto ngh:adj_graph[node]){\\n                int curdist=ngh.second;\\n                int adjnode=ngh.first;\\n                if(curdist+pdist<dist[adjnode]){\\n                    dist[adjnode]=curdist+pdist;\\n                    pq.push({dist[adjnode],adjnode});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421193,
                "title": "python-3-dicts-heap-t-m-1126-ms-17-3-mb",
                "content": "```\\nclass Graph:\\n    def __init__(self, n: int, edges: list[list[int]]):\\n\\n        self.graph = defaultdict(list)\\n        for edge in edges: self.addEdge(edge)\\n\\n\\n    def addEdge(self, edge: list[int]) -> None:\\n\\n        frm, to, edgeCost = edge\\n        self.graph[frm].append((to, edgeCost))\\n\\n\\n    def shortestPath(self, s: int, t: int) -> int:\\n        \\n        d, queue = defaultdict(lambda:-1, {s:0}), [(0,s)]\\n \\n        while queue:\\n            a,b = heappop(queue)\\n            if d[b] == a:\\n                for to, edgeCost in self.graph[b]:\\n                    if d[to] > a + edgeCost or d[to] < 0:\\n                        d[to] = a + edgeCost\\n                        heappush(queue, (d[to], to))\\n        return d[t]\\n\\n```\\n[https://leetcode.com/problems/design-graph-with-shortest-path-calculator/submissions/934352860/](http://)\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n    def __init__(self, n: int, edges: list[list[int]]):\\n\\n        self.graph = defaultdict(list)\\n        for edge in edges: self.addEdge(edge)\\n\\n\\n    def addEdge(self, edge: list[int]) -> None:\\n\\n        frm, to, edgeCost = edge\\n        self.graph[frm].append((to, edgeCost))\\n\\n\\n    def shortestPath(self, s: int, t: int) -> int:\\n        \\n        d, queue = defaultdict(lambda:-1, {s:0}), [(0,s)]\\n \\n        while queue:\\n            a,b = heappop(queue)\\n            if d[b] == a:\\n                for to, edgeCost in self.graph[b]:\\n                    if d[to] > a + edgeCost or d[to] < 0:\\n                        d[to] = a + edgeCost\\n                        heappush(queue, (d[to], to))\\n        return d[t]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421023,
                "title": "simple-c-solution-dijkstra-100-time-and-100-memory-efficient",
                "content": "```\\nconst int N=105;\\nclass Graph{\\n    vector<pair<int,int>>g[N];\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        // g.resize(n);\\n        for(auto it:edges){\\n            g[it[0]].push_back({it[1],it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        //minheap: min at top\\n        vector<int> dist(100,INT_MAX);\\n        pq.push({0,node1});\\n        //{dist,node}\\n        dist[node1]=0;\\n        while(!pq.empty()){\\n            int curr=pq.top().second;\\n            int curr_d=pq.top().first;\\n            pq.pop();\\n\\n            for(auto it:g[curr]){\\n                if(curr_d+it.second<dist[it.first]){\\n                    dist[it.first]=curr_d+it.second;\\n                    pq.push({dist[it.first],it.first});\\n                }\\n            }\\n        }\\n        if(dist[node2]==INT_MAX)return -1;\\n        return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n\\n```",
                "solutionTags": [
                    "C",
                    "Graph",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nconst int N=105;\\nclass Graph{\\n    vector<pair<int,int>>g[N];\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        // g.resize(n);\\n        for(auto it:edges){\\n            g[it[0]].push_back({it[1],it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        //minheap: min at top\\n        vector<int> dist(100,INT_MAX);\\n        pq.push({0,node1});\\n        //{dist,node}\\n        dist[node1]=0;\\n        while(!pq.empty()){\\n            int curr=pq.top().second;\\n            int curr_d=pq.top().first;\\n            pq.pop();\\n\\n            for(auto it:g[curr]){\\n                if(curr_d+it.second<dist[it.first]){\\n                    dist[it.first]=curr_d+it.second;\\n                    pq.push({dist[it.first],it.first});\\n                }\\n            }\\n        }\\n        if(dist[node2]==INT_MAX)return -1;\\n        return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3419970,
                "title": "cpp-python3-dijktra-s-algorithm",
                "content": "\\n\\n#### If you helped, Please upvote.\\n\\n### Solution\\n```cpp []\\nclass Graph {\\npublic:\\n    typedef long long ll;\\n    vector<vector<pair<int, int>>> G;\\n    int n;\\n    \\n    Graph(int _n, vector<vector<int>>& edges) {\\n        this -> n = _n;\\n        G.resize(n);\\n        for(auto& e : edges) G[e[0]].push_back({e[1], e[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        G[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        // Dijktra\\'s algo\\n        priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;\\n        pq.push({0, node1});\\n        \\n        vector<int> dist(n, INT_MAX);\\n        dist[node1] = 0;\\n        \\n        while(!pq.empty()) {\\n            auto [d, u] = pq.top(); pq.pop();\\n            if(u == node2) return d;\\n            if(dist[u] < d) continue;\\n            for(auto [v, wt] : G[u]) {\\n               if(dist[v] > dist[u] + wt) {\\n                    pq.push({d + wt, v});\\n                    dist[v] = d + wt;\\n               }\\n            } \\n        }\\n        \\n        return -1;\\n    }\\n};\\n```\\n```python []\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.N = n\\n        self.INF = 10**19\\n        adj_list = collections.defaultdict(list)\\n        for u, v, wt in edges:\\n            adj_list[u].append((v, wt))\\n        self.adj_list = adj_list\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.adj_list[edge[0]].append((edge[1], edge[2]))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        h = []\\n        heapq.heappush(h, (0, node1))\\n        dist = [self.INF] * self.N\\n        dist[node1] = 0\\n        \\n        while len(h) :\\n            d, u = heapq.heappop(h)\\n            if(u == node2) : return d\\n            if dist[u] < d : continue\\n            for v, wt in self.adj_list[u]:\\n                if dist[v] > dist[u] + wt:\\n                    dist[v] = dist[u] + wt\\n                    heapq.heappush(h, (dist[v], v))\\n        return -1\\n\\n```\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp []\\nclass Graph {\\npublic:\\n    typedef long long ll;\\n    vector<vector<pair<int, int>>> G;\\n    int n;\\n    \\n    Graph(int _n, vector<vector<int>>& edges) {\\n        this -> n = _n;\\n        G.resize(n);\\n        for(auto& e : edges) G[e[0]].push_back({e[1], e[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        G[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        // Dijktra\\'s algo\\n        priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;\\n        pq.push({0, node1});\\n        \\n        vector<int> dist(n, INT_MAX);\\n        dist[node1] = 0;\\n        \\n        while(!pq.empty()) {\\n            auto [d, u] = pq.top(); pq.pop();\\n            if(u == node2) return d;\\n            if(dist[u] < d) continue;\\n            for(auto [v, wt] : G[u]) {\\n               if(dist[v] > dist[u] + wt) {\\n                    pq.push({d + wt, v});\\n                    dist[v] = d + wt;\\n               }\\n            } \\n        }\\n        \\n        return -1;\\n    }\\n};\\n```\n```python []\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.N = n\\n        self.INF = 10**19\\n        adj_list = collections.defaultdict(list)\\n        for u, v, wt in edges:\\n            adj_list[u].append((v, wt))\\n        self.adj_list = adj_list\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.adj_list[edge[0]].append((edge[1], edge[2]))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        h = []\\n        heapq.heappush(h, (0, node1))\\n        dist = [self.INF] * self.N\\n        dist[node1] = 0\\n        \\n        while len(h) :\\n            d, u = heapq.heappop(h)\\n            if(u == node2) : return d\\n            if dist[u] < d : continue\\n            for v, wt in self.adj_list[u]:\\n                if dist[v] > dist[u] + wt:\\n                    dist[v] = dist[u] + wt\\n                    heapq.heappush(h, (dist[v], v))\\n        return -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425426,
                "title": "simple-partial-update-floyd-warshall-solution-in-python-with-explanation",
                "content": "# Intuition\\nMost soltuions are based on the Dijkstra algorithm that compute the single-source shortest path when the `shortestPath` function is called. This solution explores an alternative approach where the all-pair shortest paths are precomputed in the initial stage and are getting update everytime a new edge added. \\n\\nDue to the simplicity of the beautiful Floyd-Warshall algorithm, this solution is more concise and easier to implement. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn the initial stage, we build the graph and compute the all-pair shortest path with the classic Floyd-Warshall algorithm in $$O(n^3)$$. \\n\\nWhen an edge added, we update the all-pair shortest-path with the benefit from the new edge. The full Floyd-Warshall is too slow since the `addEdge` function can be called up to $$n$$ times. Thus, the key is not to perform the full Floyd-Warshall algorithm. Instead, a partial $$O(n^2)$$ Floyd-Warshall algorithm is performed two-times to update the involved edges only. \\n\\nWhen `shortestPath` is called, there is nothing to do but to return the precomputed shortest path. The time complexity is $$O(1)$$. \\n\\n# Complexity\\n- __init__: $$O(n^3)$$\\n- addEdge: $$O(n^2)$$\\n- shortestPath: $$O(1)$$\\nWhere $$n$$ is the number of nodes in the graph. \\n\\n\\n# Code\\n```\\nclass Graph:\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.graph = [[inf] * n for _ in range(n)]\\n        for i in range(n):\\n            self.graph[i][i] = 0\\n        for u, v, w in edges:\\n            self.graph[u][v] = w\\n        # Full Floyd-Warshall algorithm\\n        for k in range(n):\\n            for i in range(n):\\n                if self.graph[i][k] < inf:\\n                    for j in range(n):\\n                        self.graph[i][j] = min(self.graph[i][j], self.graph[i][k] + self.graph[k][j])\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        (u, v, w) = edge\\n        if self.graph[u][v] <= w:\\n            return\\n        self.graph[u][v] = w\\n        # Partial Floyd-Warshall for updating involved edges only\\n        for k in [u, v]:\\n            for i in range(self.n):\\n                for j in range(self.n):\\n                    self.graph[i][j] = min(self.graph[i][j], self.graph[i][k] + self.graph[k][j])\\n                \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        return self.graph[node1][node2] if self.graph[node1][node2] < inf else -1",
                "solutionTags": [
                    "Python3"
                ],
                "code": "# Intuition\\nMost soltuions are based on the Dijkstra algorithm that compute the single-source shortest path when the `shortestPath` function is called. This solution explores an alternative approach where the all-pair shortest paths are precomputed in the initial stage and are getting update everytime a new edge added. \\n\\nDue to the simplicity of the beautiful Floyd-Warshall algorithm, this solution is more concise and easier to implement. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn the initial stage, we build the graph and compute the all-pair shortest path with the classic Floyd-Warshall algorithm in $$O(n^3)$$. \\n\\nWhen an edge added, we update the all-pair shortest-path with the benefit from the new edge. The full Floyd-Warshall is too slow since the `addEdge` function can be called up to $$n$$ times. Thus, the key is not to perform the full Floyd-Warshall algorithm. Instead, a partial $$O(n^2)$$ Floyd-Warshall algorithm is performed two-times to update the involved edges only. \\n\\nWhen `shortestPath` is called, there is nothing to do but to return the precomputed shortest path. The time complexity is $$O(1)$$. \\n\\n# Complexity\\n- __init__: $$O(n^3)$$\\n- addEdge: $$O(n^2)$$\\n- shortestPath: $$O(1)$$\\nWhere $$n$$ is the number of nodes in the graph. \\n\\n\\n# Code\\n```\\nclass Graph:\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.graph = [[inf] * n for _ in range(n)]\\n        for i in range(n):\\n            self.graph[i][i] = 0\\n        for u, v, w in edges:\\n            self.graph[u][v] = w\\n        # Full Floyd-Warshall algorithm\\n        for k in range(n):\\n            for i in range(n):\\n                if self.graph[i][k] < inf:\\n                    for j in range(n):\\n                        self.graph[i][j] = min(self.graph[i][j], self.graph[i][k] + self.graph[k][j])\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        (u, v, w) = edge\\n        if self.graph[u][v] <= w:\\n            return\\n        self.graph[u][v] = w\\n        # Partial Floyd-Warshall for updating involved edges only\\n        for k in [u, v]:\\n            for i in range(self.n):\\n                for j in range(self.n):\\n                    self.graph[i][j] = min(self.graph[i][j], self.graph[i][k] + self.graph[k][j])\\n                \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        return self.graph[node1][node2] if self.graph[node1][node2] < inf else -1",
                "codeTag": "Java"
            },
            {
                "id": 3420111,
                "title": "javascript-dijkstra",
                "content": "# Intuition\\nSimple emulation\\n\\n# Approach\\nStore all the edges in hash map.\\n\\naddEdge - add one more node to edge.\\nshortestPath - implement optimal path finding using Heap. On each step go to next node with min total path. For this node add all reachable nodes from this node to the MinHeap. Priority will be cost to get to particular node.\\n\\n# Complexity\\n- Time complexity:\\naddEdge O(1)\\nshortestPath O(K*Nlog(N))\\n\\n- Space complexity:\\nO(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @param {number[][]} edges\\n */\\nvar Graph = function(n, edges) {\\n    this.map = new Map()\\n    let map = this.map;\\n    for(let i = 0; i < edges.length; i++){\\n        let edge = edges[i]\\n        let from = edge[0]\\n        let to = edge[1]\\n        let cost = edge[2]\\n        if(!map.has(from)){\\n            map.set(from, new Set())\\n        }\\n        \\n        map.get(from).add({to, cost})\\n    }\\n};\\n\\n/** \\n * @param {number[]} edge\\n * @return {void}\\n */\\nGraph.prototype.addEdge = function(edge) {\\n    let map = this.map;\\n     let from = edge[0]\\n     let to = edge[1]\\n     let cost = edge[2]\\n     if(!map.has(from)){\\n        map.set(from, new Set())\\n     }\\n        \\n     map.get(from).add({to, cost})\\n};\\n\\n/** \\n * @param {number} node1 \\n * @param {number} node2\\n * @return {number}\\n */\\nGraph.prototype.shortestPath = function(node1, node2) {\\n    \\n    const heap = new MinPriorityQueue()\\n    heap.enqueue({node: node1, cost: 0}, 0)\\n    let visited = new Set()\\n    \\n    while(heap.size() > 0){\\n        const top = heap.dequeue().element;\\n        \\n        if(visited.has(top.node)){\\n            continue;\\n        }\\n        visited.add(top.node)\\n        if(top.node === node2){\\n            return top.cost;\\n        }\\n        let next = this.map.get(top.node)\\n        if(next){\\n            for (let n of next){\\n                heap.enqueue({node: n.to, cost: top.cost + n.cost}, top.cost + n.cost)\\n            }\\n        }\\n    }\\n    \\n    return -1\\n    \\n    \\n};\\n\\n/** \\n * Your Graph object will be instantiated and called as such:\\n * var obj = new Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number[][]} edges\\n */\\nvar Graph = function(n, edges) {\\n    this.map = new Map()\\n    let map = this.map;\\n    for(let i = 0; i < edges.length; i++){\\n        let edge = edges[i]\\n        let from = edge[0]\\n        let to = edge[1]\\n        let cost = edge[2]\\n        if(!map.has(from)){\\n            map.set(from, new Set())\\n        }\\n        \\n        map.get(from).add({to, cost})\\n    }\\n};\\n\\n/** \\n * @param {number[]} edge\\n * @return {void}\\n */\\nGraph.prototype.addEdge = function(edge) {\\n    let map = this.map;\\n     let from = edge[0]\\n     let to = edge[1]\\n     let cost = edge[2]\\n     if(!map.has(from)){\\n        map.set(from, new Set())\\n     }\\n        \\n     map.get(from).add({to, cost})\\n};\\n\\n/** \\n * @param {number} node1 \\n * @param {number} node2\\n * @return {number}\\n */\\nGraph.prototype.shortestPath = function(node1, node2) {\\n    \\n    const heap = new MinPriorityQueue()\\n    heap.enqueue({node: node1, cost: 0}, 0)\\n    let visited = new Set()\\n    \\n    while(heap.size() > 0){\\n        const top = heap.dequeue().element;\\n        \\n        if(visited.has(top.node)){\\n            continue;\\n        }\\n        visited.add(top.node)\\n        if(top.node === node2){\\n            return top.cost;\\n        }\\n        let next = this.map.get(top.node)\\n        if(next){\\n            for (let n of next){\\n                heap.enqueue({node: n.to, cost: top.cost + n.cost}, top.cost + n.cost)\\n            }\\n        }\\n    }\\n    \\n    return -1\\n    \\n    \\n};\\n\\n/** \\n * Your Graph object will be instantiated and called as such:\\n * var obj = new Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3449101,
                "title": "dijkstra",
                "content": "# Code\\n```\\nclass Graph {\\nprivate:\\n    vector<pair<int,int>> g[101];\\n    int n;\\npublic:\\n    Graph(int num, vector<vector<int>>& edges) {\\n        n = num;\\n        for(auto&edge: edges) \\n            g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    int dijkstra(int src,int dest){\\n        set<pair<int,int>> st;\\n        vector<int> dist(n,1e9);\\n        dist[src] = 0;\\n        st.insert({0,src});\\n        while(!st.empty()){\\n            auto top = *st.begin();\\n            st.erase(st.begin());\\n            int wt = top.first, u = top.second;\\n            for(auto&[v,weight]: g[u]){\\n                if(wt+weight < dist[v]){\\n                    dist[v] = wt + weight;\\n                    st.insert({dist[v],v});\\n                }\\n            }\\n        }\\n        return dist[dest] == 1e9 ? -1 : dist[dest];\\n    }\\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Graph",
                    "Design",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\nprivate:\\n    vector<pair<int,int>> g[101];\\n    int n;\\npublic:\\n    Graph(int num, vector<vector<int>>& edges) {\\n        n = num;\\n        for(auto&edge: edges) \\n            g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    int dijkstra(int src,int dest){\\n        set<pair<int,int>> st;\\n        vector<int> dist(n,1e9);\\n        dist[src] = 0;\\n        st.insert({0,src});\\n        while(!st.empty()){\\n            auto top = *st.begin();\\n            st.erase(st.begin());\\n            int wt = top.first, u = top.second;\\n            for(auto&[v,weight]: g[u]){\\n                if(wt+weight < dist[v]){\\n                    dist[v] = wt + weight;\\n                    st.insert({dist[v],v});\\n                }\\n            }\\n        }\\n        return dist[dest] == 1e9 ? -1 : dist[dest];\\n    }\\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422271,
                "title": "c-two-solutions-dijkstra-floyd-warshall-simple-direct-implementation",
                "content": "Here constraints are very small (n <= 100, call <= 100)\\nSo we can easily answer any query in ```n*n``` (n = no of nodes)\\n\\n# **1. Dijkstra**\\n\\n(Prerequisite: Dijkstra Algorithm)\\n\\na. Maintain a adj list\\nb. Add edge directly to the adj list\\nc. For queries call Dijkstra Algorithm \\n\\n**Code:**\\n\\nNote: Here I have also maintained an ```updated``` array \\nSay we called ```Dijkstra``` on 1, 100 times and no edges are added so our code will still call for ```Dijkstra``` 100 times. \\n```updated``` array solves this problem as it is set to true whenever we have a result and it is set false whenever a new edge is added.\\n\\n```\\nclass Graph {\\npublic:\\n    \\n    vector<vector<int>> dist;\\n    vector<vector<pair<int, int>>> adj;\\n    vector<int> updated;\\n    \\n    void dijkstra(vector<vector<pair<int, int>>> adj, int src, vector<int>& dist) {\\n        int v = adj.size();\\n        dist = vector<int>(v, INT_MAX);\\n        dist[src] = 0;\\n        priority_queue < pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push(make_pair(0, src));\\n\\n        while (pq.empty() == false) {\\n            pair<int, int> curr = pq.top();\\n            pq.pop();\\n\\n            int parent = curr.second;\\n            int parentDist = curr.first;\\n            for (pair<int, int> it : adj[parent]) {\\n                int child = it.first;\\n                int prentChidDist = it.second;\\n                if (dist[child] > parentDist + prentChidDist) {\\n                    dist[child] = parentDist + prentChidDist;\\n                    pq.push(make_pair(dist[child], child));\\n                }\\n            }\\n        }\\n        for(auto &it: dist) \\n            if(it == INT_MAX)\\n                it = -1;\\n    }\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj = vector<vector<pair<int, int>>>(n);\\n        for(auto &edge: edges) {\\n            int u = edge[0], v = edge[1], dist = edge[2];\\n            adj[u].push_back({v, dist});\\n        }\\n        dist = vector<vector<int>>(n);\\n        updated = vector<int>(n, false);\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int u = edge[0], v = edge[1], dist = edge[2];\\n        adj[u].push_back({v, dist});\\n        int n = adj.size();\\n        updated = vector<int>(n, false);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if(updated[node1] == false) {\\n            dijkstra(adj, node1, dist[node1]);\\n            updated[node1] = true;\\n        }\\n        return dist[node1][node2];\\n    }\\n};\\n```\\n\\nTime Complexity:\\nInitialisation: O(E) for creating Adj List\\nAddEdge: O(1) for adding edge, O(V) for update array initiallisation\\nshortestPath: O(Elog(V)) for Dijkstra\\n\\n\\n# 2. Floyd Warshall \\n\\n(Prerequisite: Floyd Warshall  Algorithm)\\n\\na. Compute the ```matrix``` where ```matrix[u][v]``` stores the dist from ```u->v```.\\nb. Call for Floyd Warshall algorithm which will convert ```matrix[u][v]``` to shortest dist between ```u``` and ```v```\\nc. Whenever a edge is added check if this is better than prev, and then update the matrix for this new edge added between ```u``` and ```v``` by calculating the newDist for every pair of node making it pass through ```u->v```\\nd. For queries directly return ```matrix[u][v]```\\n\\n**Code:**\\n```\\nclass Graph {\\npublic:\\n    \\n    vector<vector<int>> matrix;\\n    bool updated;\\n    \\n    void shortest_distance() {\\n\\t    int n = matrix.size();\\n\\t    for(int via = 0; via < n; via++) {\\n\\t        for(int i = 0; i < n; i++) {\\n\\t            for(int j = 0; j < n; j++) {\\n\\t                int newDist = -1;\\n\\t                if(matrix[i][via] != -1 && matrix[via][j] != -1)\\n\\t                   newDist = matrix[i][via] + matrix[via][j];\\n\\t                   \\n\\t                if(newDist != -1) {\\n\\t                    if(matrix[i][j] == -1) matrix[i][j] = newDist;\\n\\t                    else matrix[i][j] = min(matrix[i][j], newDist);\\n\\t                }\\n\\t            }\\n\\t        }\\n\\t    }\\n\\t}\\n    \\n    void shortest_distance(int u, int v) {\\n        int n = matrix.size();\\n        for(int i = 0; i < n; i++) {\\n            for(int j = 0; j < n; j++) {\\n                int newDist = -1;\\n                if(matrix[i][u] != -1 && matrix[v][j] != -1)\\n                   newDist = matrix[i][u] + matrix[u][v] + matrix[v][j];\\n\\n                if(newDist != -1) {\\n                    if(matrix[i][j] == -1) matrix[i][j] = newDist;\\n                    else matrix[i][j] = min(matrix[i][j], newDist);\\n                }\\n            }\\n        }\\n    }\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        matrix = vector<vector<int>>(n, vector<int>(n, -1));\\n        for(auto &edge: edges) {\\n            int u = edge[0], v = edge[1], dist = edge[2];\\n            matrix[u][v] = dist;\\n        }\\n        for(int i = 0; i < n; i++) matrix[i][i] = 0;\\n        shortest_distance();\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int u = edge[0], v = edge[1], dist = edge[2];\\n        if(matrix[u][v] != -1 && matrix[u][v] < dist) return;\\n        matrix[u][v] = dist;\\n        shortest_distance(u, v);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return matrix[node1][node2];\\n    }\\n};\\n\\n```\\n\\nTime Complexity:\\nInitialisation: O(V^3) for Floyd Warshall\\nAddEdge: O(V^2) for updating matrix\\nshortestPath: O(1) \\n\\nI am not good with writing so please bear with that ;)\\nIf it helped please upvote :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```n*n```\n```updated```\n```Dijkstra```\n```Dijkstra```\n```updated```\n```\\nclass Graph {\\npublic:\\n    \\n    vector<vector<int>> dist;\\n    vector<vector<pair<int, int>>> adj;\\n    vector<int> updated;\\n    \\n    void dijkstra(vector<vector<pair<int, int>>> adj, int src, vector<int>& dist) {\\n        int v = adj.size();\\n        dist = vector<int>(v, INT_MAX);\\n        dist[src] = 0;\\n        priority_queue < pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push(make_pair(0, src));\\n\\n        while (pq.empty() == false) {\\n            pair<int, int> curr = pq.top();\\n            pq.pop();\\n\\n            int parent = curr.second;\\n            int parentDist = curr.first;\\n            for (pair<int, int> it : adj[parent]) {\\n                int child = it.first;\\n                int prentChidDist = it.second;\\n                if (dist[child] > parentDist + prentChidDist) {\\n                    dist[child] = parentDist + prentChidDist;\\n                    pq.push(make_pair(dist[child], child));\\n                }\\n            }\\n        }\\n        for(auto &it: dist) \\n            if(it == INT_MAX)\\n                it = -1;\\n    }\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj = vector<vector<pair<int, int>>>(n);\\n        for(auto &edge: edges) {\\n            int u = edge[0], v = edge[1], dist = edge[2];\\n            adj[u].push_back({v, dist});\\n        }\\n        dist = vector<vector<int>>(n);\\n        updated = vector<int>(n, false);\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int u = edge[0], v = edge[1], dist = edge[2];\\n        adj[u].push_back({v, dist});\\n        int n = adj.size();\\n        updated = vector<int>(n, false);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if(updated[node1] == false) {\\n            dijkstra(adj, node1, dist[node1]);\\n            updated[node1] = true;\\n        }\\n        return dist[node1][node2];\\n    }\\n};\\n```\n```matrix```\n```matrix[u][v]```\n```u->v```\n```matrix[u][v]```\n```u```\n```v```\n```u```\n```v```\n```u->v```\n```matrix[u][v]```\n```\\nclass Graph {\\npublic:\\n    \\n    vector<vector<int>> matrix;\\n    bool updated;\\n    \\n    void shortest_distance() {\\n\\t    int n = matrix.size();\\n\\t    for(int via = 0; via < n; via++) {\\n\\t        for(int i = 0; i < n; i++) {\\n\\t            for(int j = 0; j < n; j++) {\\n\\t                int newDist = -1;\\n\\t                if(matrix[i][via] != -1 && matrix[via][j] != -1)\\n\\t                   newDist = matrix[i][via] + matrix[via][j];\\n\\t                   \\n\\t                if(newDist != -1) {\\n\\t                    if(matrix[i][j] == -1) matrix[i][j] = newDist;\\n\\t                    else matrix[i][j] = min(matrix[i][j], newDist);\\n\\t                }\\n\\t            }\\n\\t        }\\n\\t    }\\n\\t}\\n    \\n    void shortest_distance(int u, int v) {\\n        int n = matrix.size();\\n        for(int i = 0; i < n; i++) {\\n            for(int j = 0; j < n; j++) {\\n                int newDist = -1;\\n                if(matrix[i][u] != -1 && matrix[v][j] != -1)\\n                   newDist = matrix[i][u] + matrix[u][v] + matrix[v][j];\\n\\n                if(newDist != -1) {\\n                    if(matrix[i][j] == -1) matrix[i][j] = newDist;\\n                    else matrix[i][j] = min(matrix[i][j], newDist);\\n                }\\n            }\\n        }\\n    }\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        matrix = vector<vector<int>>(n, vector<int>(n, -1));\\n        for(auto &edge: edges) {\\n            int u = edge[0], v = edge[1], dist = edge[2];\\n            matrix[u][v] = dist;\\n        }\\n        for(int i = 0; i < n; i++) matrix[i][i] = 0;\\n        shortest_distance();\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int u = edge[0], v = edge[1], dist = edge[2];\\n        if(matrix[u][v] != -1 && matrix[u][v] < dist) return;\\n        matrix[u][v] = dist;\\n        shortest_distance(u, v);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return matrix[node1][node2];\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422099,
                "title": "c-very-easy-djkastra-algorithm",
                "content": "```\\nclass Graph {\\npublic:\\n    vector<pair<int,int>> v[101];\\n    typedef pair<int,int> pi;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(auto it:edges)\\n        {\\n            v[it[0]].push_back({it[1],it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n         v[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(101,INT_MAX);\\n        dist[node1]=0;\\n        priority_queue<pi,vector<pi>,greater<pi>> pq;\\n        pq.push({dist[node1],node1});\\n        while(!pq.empty())\\n        {\\n            int val=pq.top().first;\\n            int node=pq.top().second;\\n            pq.pop();\\n            for(auto it:v[node])\\n            {\\n                int x=it.first;\\n                int wt=it.second;\\n                if(dist[x]>dist[node]+wt)\\n                {\\n                    dist[x]=dist[node]+wt;\\n                    pq.push({dist[x],x});\\n                }\\n            }\\n        }\\n        return (dist[node2]==INT_MAX)?-1:dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<pair<int,int>> v[101];\\n    typedef pair<int,int> pi;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(auto it:edges)\\n        {\\n            v[it[0]].push_back({it[1],it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n         v[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(101,INT_MAX);\\n        dist[node1]=0;\\n        priority_queue<pi,vector<pi>,greater<pi>> pq;\\n        pq.push({dist[node1],node1});\\n        while(!pq.empty())\\n        {\\n            int val=pq.top().first;\\n            int node=pq.top().second;\\n            pq.pop();\\n            for(auto it:v[node])\\n            {\\n                int x=it.first;\\n                int wt=it.second;\\n                if(dist[x]>dist[node]+wt)\\n                {\\n                    dist[x]=dist[node]+wt;\\n                    pq.push({dist[x],x});\\n                }\\n            }\\n        }\\n        return (dist[node2]==INT_MAX)?-1:dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420671,
                "title": "very-easy-floyd-warshall-c",
                "content": "\\n# Code\\n```\\nclass Graph {\\npublic:\\n    \\n    int n;\\n    int temp[100][100]; // Since maximum size is 100 x 100\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n\\n        this->n = n;    // Set number of nodes\\n\\n        // Initialize cost matrix\\n        memset(temp,0x3f3f3f3f,sizeof temp); \\n \\n        for(int i = 0; i < edges.size(); i++) \\n        // Update cost from provided edges matrix\\n        // edges[i][0] is fromNode edges[i][1] is toNode\\n        // edges[i][2] is Cost\\n        {\\n            temp[edges[i][0]][edges[i][1]] = edges[i][2];\\n        }\\n        for(int i = 0; i < n; i++)\\n        {\\n            // Cost from self is 0\\n            temp[i][i] = 0;\\n        }\\n        for(int k = 0; k < n; k++)\\n        {\\n            for(int i = 0; i < n; i++)\\n            {\\n                for(int j = 0; j < n; j++)\\n                { \\n                    // Basic Floyd Warshall \\n                    temp[i][j] = min(temp[i][j], temp[i][k] + temp[k][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        // When new edge is added update cost matrix\\n        for(int i = 0; i < n; i++)\\n        {\\n            for(int j = 0; j < n; j++)\\n            {\\n                temp[i][j] = min(temp[i][j], temp[i][edge[0]] + edge[2] + temp[edge[1]][j]);\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        // If node1 to node2 does not exist then return -1\\n        if(temp[node1][node2] == 0x3f3f3f3f)\\n        {\\n            return -1;\\n        }\\n        else\\n        {\\n            return temp[node1][node2];\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    \\n    int n;\\n    int temp[100][100]; // Since maximum size is 100 x 100\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n\\n        this->n = n;    // Set number of nodes\\n\\n        // Initialize cost matrix\\n        memset(temp,0x3f3f3f3f,sizeof temp); \\n \\n        for(int i = 0; i < edges.size(); i++) \\n        // Update cost from provided edges matrix\\n        // edges[i][0] is fromNode edges[i][1] is toNode\\n        // edges[i][2] is Cost\\n        {\\n            temp[edges[i][0]][edges[i][1]] = edges[i][2];\\n        }\\n        for(int i = 0; i < n; i++)\\n        {\\n            // Cost from self is 0\\n            temp[i][i] = 0;\\n        }\\n        for(int k = 0; k < n; k++)\\n        {\\n            for(int i = 0; i < n; i++)\\n            {\\n                for(int j = 0; j < n; j++)\\n                { \\n                    // Basic Floyd Warshall \\n                    temp[i][j] = min(temp[i][j], temp[i][k] + temp[k][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        // When new edge is added update cost matrix\\n        for(int i = 0; i < n; i++)\\n        {\\n            for(int j = 0; j < n; j++)\\n            {\\n                temp[i][j] = min(temp[i][j], temp[i][edge[0]] + edge[2] + temp[edge[1]][j]);\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        // If node1 to node2 does not exist then return -1\\n        if(temp[node1][node2] == 0x3f3f3f3f)\\n        {\\n            return -1;\\n        }\\n        else\\n        {\\n            return temp[node1][node2];\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420598,
                "title": "dijkstra-s-algorithm",
                "content": "# Intuition\\nMy first thought was to apply Floyd-Warshall\\'s algorithm but adding a edge to graph and doing relaxation for newly inserted edge will take $$O(n^2)$$. If we look at contraints they are not that strict we can easily apply dijstra\\'s algorithm for each query to get distance between nodes and adding a edge to graph also won\\'t effect much for individual distance calculation.\\n\\n# Approach\\nWe can build an adjacency list, building adjacency list will take $$O(E)$$ and adding a edge to adjacency list will take $O(1)$ time complexity.\\n\\nFrom here we can apply dijkstra algorithm for each query (node1, node2) for the complexity of $O(V \\\\cdot log(E + V))$.\\n\\n## Dijstras\\nFollowing is the steps for dijstra\\'s algorithm that finds distance of all the nodes from node `from`.\\n\\n- We keep distance array to keep track of minimum distance from `from` node to every other node (initially all to `INT_MAX`). We also need visited boolean array which has the nodes marked `true` if minimum distance to that node is already found.\\n- Min Priority queue is used to find the next node that is closest to `from` node and has not been visited.\\n- Distance of `from` to `from` is initialised to 0 and pushed to priority queue to start the algorithm.\\n- Now we pick the top most `node` at priority queue and go to it\\'s neighbour and check if we can perform any edge relaxation from the neighbour nodes of this `node` if there is edge relaxation performed we add that relaxation to priority queue as contender for next better pick.\\n- At the end distance array will have minimum distance from node `from` to all the other nodes.\\n\\n\\n# Complexity\\n- Time complexity:\\n    - Build: $O(E)$\\n    - Add Edge: $O(1)$\\n    - Shortest Path: $O(V \\\\cdot log(E + V))$\\n- Space complexity:\\n    - Graph will take $O(E + V)$\\n    - Dijstra algorithm takes $OD(E + V)$\\n\\n\\n# Code\\n```cpp\\nclass Graph {\\npublic:\\n  vector<vector<vector<int>>> graph;\\n  int n;\\n  Graph(int n, vector<vector<int>>& edges) {\\n    this->n = n;\\n    graph.resize(n);\\n    for (auto e: edges) {\\n      graph[e[0]].push_back({e[1], e[2]});\\n    }\\n  }\\n  \\n  void addEdge(vector<int> e) {\\n    graph[e[0]].push_back({e[1], e[2]});\\n  }\\n\\n  int shortestPath(int from, int to) {\\n    vector<int> dist(n, INT_MAX);\\n    vector<bool> visited(n, false);\\n    priority_queue<\\n      pair<int, int>,\\n      vector<pair<int, int>>,\\n      greater<pair<int, int>>> pq;\\n\\n    dist[from] = 0;\\n    pq.push({0, from});\\n\\n    while (!pq.empty()) {\\n      auto at = pq.top().second;\\n      auto di = pq.top().first;\\n      pq.pop();\\n\\n      if (at == to) {\\n        break;\\n      }\\n\\n      visited[at] = true;\\n\\n      for (auto e: graph[at]) {\\n        int to = e[0], weight = e[1];\\n\\n        if (visited[to]) continue;\\n\\n        int new_dist = di + weight;\\n\\n        if (dist[to] > new_dist) {\\n          dist[to] = new_dist;\\n          pq.push({new_dist, to});\\n        }\\n      }\\n    }\\n\\n    return dist[to] == INT_MAX ? -1 : dist[to];\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy",
                    "Shortest Path"
                ],
                "code": "```cpp\\nclass Graph {\\npublic:\\n  vector<vector<vector<int>>> graph;\\n  int n;\\n  Graph(int n, vector<vector<int>>& edges) {\\n    this->n = n;\\n    graph.resize(n);\\n    for (auto e: edges) {\\n      graph[e[0]].push_back({e[1], e[2]});\\n    }\\n  }\\n  \\n  void addEdge(vector<int> e) {\\n    graph[e[0]].push_back({e[1], e[2]});\\n  }\\n\\n  int shortestPath(int from, int to) {\\n    vector<int> dist(n, INT_MAX);\\n    vector<bool> visited(n, false);\\n    priority_queue<\\n      pair<int, int>,\\n      vector<pair<int, int>>,\\n      greater<pair<int, int>>> pq;\\n\\n    dist[from] = 0;\\n    pq.push({0, from});\\n\\n    while (!pq.empty()) {\\n      auto at = pq.top().second;\\n      auto di = pq.top().first;\\n      pq.pop();\\n\\n      if (at == to) {\\n        break;\\n      }\\n\\n      visited[at] = true;\\n\\n      for (auto e: graph[at]) {\\n        int to = e[0], weight = e[1];\\n\\n        if (visited[to]) continue;\\n\\n        int new_dist = di + weight;\\n\\n        if (dist[to] > new_dist) {\\n          dist[to] = new_dist;\\n          pq.push({new_dist, to});\\n        }\\n      }\\n    }\\n\\n    return dist[to] == INT_MAX ? -1 : dist[to];\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420438,
                "title": "time-space-100-beats-c-dijkstra-easy-to-understand",
                "content": "````\\nclass Graph {\\npublic:\\n    vector<vector<vector<int>>> g;\\n    long long int solve(int s,int e,vector<long long int> &dist,vector<bool>& vis){\\n        if(s==e){\\n            return 0;\\n        }\\n        if(dist[s] < 1e11)return dist[s];\\n        if(vis[s]){\\n            return dist[s];\\n        }\\n        vis[s] = true;\\n        long long int d = 1e11;\\n        for(auto &i: g[s]){\\n            d = min(d,solve(i[0],e,dist,vis)+i[1]*1LL);\\n        }\\n        return dist[s] = d;\\n    }\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        g.resize(n);\\n        for(auto &i: edges){\\n            g[i[0]].push_back({i[1],i[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int s, int e) {\\n        vector<long long int> dist(g.size(),1e11);\\n        dist[s] = 0;\\n        vector<bool> v(g.size());\\n        priority_queue<vector<long long int>,vector<vector<long long int>>,greater<vector<long long int>>> pq;\\n        pq.push({0,s});\\n        while(!pq.empty()){\\n            vector<long long int> v = pq.top();\\n            pq.pop();\\n            for(auto &i: g[v[1]]){\\n                if(dist[i[0]]>dist[v[1]]+i[1]*1LL){\\n                    dist[i[0]]=dist[v[1]]+i[1]*1LL;\\n                    pq.push({dist[i[0]],i[0]});\\n                }\\n            }\\n        }\\n        if(dist[e]==1e11)return -1;\\n        return dist[e];\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Graph"
                ],
                "code": "````\\nclass Graph {\\npublic:\\n    vector<vector<vector<int>>> g;\\n    long long int solve(int s,int e,vector<long long int> &dist,vector<bool>& vis){\\n        if(s==e){\\n            return 0;\\n        }\\n        if(dist[s] < 1e11)return dist[s];\\n        if(vis[s]){\\n            return dist[s];\\n        }\\n        vis[s] = true;\\n        long long int d = 1e11;\\n        for(auto &i: g[s]){\\n            d = min(d,solve(i[0],e,dist,vis)+i[1]*1LL);\\n        }\\n        return dist[s] = d;\\n    }\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        g.resize(n);\\n        for(auto &i: edges){\\n            g[i[0]].push_back({i[1],i[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int s, int e) {\\n        vector<long long int> dist(g.size(),1e11);\\n        dist[s] = 0;\\n        vector<bool> v(g.size());\\n        priority_queue<vector<long long int>,vector<vector<long long int>>,greater<vector<long long int>>> pq;\\n        pq.push({0,s});\\n        while(!pq.empty()){\\n            vector<long long int> v = pq.top();\\n            pq.pop();\\n            for(auto &i: g[v[1]]){\\n                if(dist[i[0]]>dist[v[1]]+i[1]*1LL){\\n                    dist[i[0]]=dist[v[1]]+i[1]*1LL;\\n                    pq.push({dist[i[0]],i[0]});\\n                }\\n            }\\n        }\\n        if(dist[e]==1e11)return -1;\\n        return dist[e];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420319,
                "title": "simple-dijkstra-c-with-video-explanation",
                "content": "```\\nclass Graph {\\npublic:\\n    unordered_map<int,vector<pair<int,int>>> mp;\\n    typedef pair<int,int> pi;\\n    int m = 0;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for (int i=0; i< edges.size();i++){\\n            pi p = {edges[i][1],edges[i][2]};\\n            mp[edges[i][0]].emplace_back(p);\\n        }\\n        m = n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        pi p = {edge[1],edge[2]};\\n        mp[edge[0]].emplace_back(p);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pi,vector<pi>,greater<pi> > pq;\\n        vector<int> dist(m,1000000000);\\n        dist[node1] = 0;\\n        pi p = {0, node1};\\n        pq.push(p);\\n        while (!pq.empty()){\\n            int dis = pq.top().first;\\n            int cur = pq.top().second;\\n            pq.pop();\\n            for (int i=0; i< mp[cur].size();i++){\\n                int next = mp[cur][i].first;\\n                if (dis + mp[cur][i].second < dist[next]){\\n                    dist[next] = dis + mp[cur][i].second;\\n                    pi p ={dist[next],next};\\n                    pq.push(p);\\n                }\\n            }\\n        }\\n        if (dist[node2] == 1000000000){\\n            return -1;\\n        }\\n        return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    unordered_map<int,vector<pair<int,int>>> mp;\\n    typedef pair<int,int> pi;\\n    int m = 0;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for (int i=0; i< edges.size();i++){\\n            pi p = {edges[i][1],edges[i][2]};\\n            mp[edges[i][0]].emplace_back(p);\\n        }\\n        m = n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        pi p = {edge[1],edge[2]};\\n        mp[edge[0]].emplace_back(p);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pi,vector<pi>,greater<pi> > pq;\\n        vector<int> dist(m,1000000000);\\n        dist[node1] = 0;\\n        pi p = {0, node1};\\n        pq.push(p);\\n        while (!pq.empty()){\\n            int dis = pq.top().first;\\n            int cur = pq.top().second;\\n            pq.pop();\\n            for (int i=0; i< mp[cur].size();i++){\\n                int next = mp[cur][i].first;\\n                if (dis + mp[cur][i].second < dist[next]){\\n                    dist[next] = dis + mp[cur][i].second;\\n                    pi p ={dist[next],next};\\n                    pq.push(p);\\n                }\\n            }\\n        }\\n        if (dist[node2] == 1000000000){\\n            return -1;\\n        }\\n        return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420249,
                "title": "c-dijkstra",
                "content": "```\\nclass Graph {\\npublic:\\n    typedef pair<int, int> p;\\n    vector<vector<pair<int,int> > > adj;\\n    int node;\\n    int dijkstra(int V, int S,int des)\\n    {\\n        vector <int> dis(V,INT_MAX);\\n        dis[S]=0;   //source node =S\\n        priority_queue<p, vector<p>,greater<p> > pq;  //min queue\\n        \\n        pq.push({0,S}); //starting from this source node\\n        \\n        while(pq.size()){\\n            auto f =pq.top();\\n            int node = f.second;\\n            int d = f.first;\\n            pq.pop();\\n            \\n            for(auto num: adj[node]){\\n                int w = num.second; //weight\\n                int nextNode = num.first;    \\n                if( dis[node] + w < dis[nextNode] ){\\n                    dis[nextNode]= dis[node] + w;\\n                    pq.push({dis[nextNode], nextNode });    //pushing only if the distance is less\\n                }\\n            }\\n        }\\n        if(dis[des] == INT_MAX)\\n            return -1;\\n        return dis[des];\\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        node = n;\\n        for(auto ele:edges){\\n            adj[ele[0]].push_back({ele[1],ele[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node,node1,node2);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    typedef pair<int, int> p;\\n    vector<vector<pair<int,int> > > adj;\\n    int node;\\n    int dijkstra(int V, int S,int des)\\n    {\\n        vector <int> dis(V,INT_MAX);\\n        dis[S]=0;   //source node =S\\n        priority_queue<p, vector<p>,greater<p> > pq;  //min queue\\n        \\n        pq.push({0,S}); //starting from this source node\\n        \\n        while(pq.size()){\\n            auto f =pq.top();\\n            int node = f.second;\\n            int d = f.first;\\n            pq.pop();\\n            \\n            for(auto num: adj[node]){\\n                int w = num.second; //weight\\n                int nextNode = num.first;    \\n                if( dis[node] + w < dis[nextNode] ){\\n                    dis[nextNode]= dis[node] + w;\\n                    pq.push({dis[nextNode], nextNode });    //pushing only if the distance is less\\n                }\\n            }\\n        }\\n        if(dis[des] == INT_MAX)\\n            return -1;\\n        return dis[des];\\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        node = n;\\n        for(auto ele:edges){\\n            adj[ele[0]].push_back({ele[1],ele[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node,node1,node2);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420154,
                "title": "c-solution-using-dijkstra-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n    int n;\\n    vector<vector<pair<int, int>>> adj;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n=n;\\n        adj.resize(n);\\n        for (auto&i:edges) {\\n            int u=i[0],v=i[1],w=i[2];\\n            adj[u].push_back({v, w});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >pq;\\n    vector<int>distance(n+1,1e9);\\n    distance[node1]=0;\\n    pq.push({0,node1});\\n    while(pq.size())\\n    {\\n        int node=pq.top().second;\\n        int dis=pq.top().first;\\n        pq.pop();\\n        for(auto i:adj[node])\\n        {\\n            int adjnode=i.first;\\n            int edgeW=i.second;\\n            if(distance[node]+edgeW<distance[adjnode])\\n            {\\n                distance[adjnode]=distance[node]+edgeW;\\n                pq.push({distance[adjnode],adjnode});\\n            }\\n        }\\n    }\\n\\n        return (distance[node2]==1e9)?-1:distance[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\n    int n;\\n    vector<vector<pair<int, int>>> adj;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n=n;\\n        adj.resize(n);\\n        for (auto&i:edges) {\\n            int u=i[0],v=i[1],w=i[2];\\n            adj[u].push_back({v, w});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > >pq;\\n    vector<int>distance(n+1,1e9);\\n    distance[node1]=0;\\n    pq.push({0,node1});\\n    while(pq.size())\\n    {\\n        int node=pq.top().second;\\n        int dis=pq.top().first;\\n        pq.pop();\\n        for(auto i:adj[node])\\n        {\\n            int adjnode=i.first;\\n            int edgeW=i.second;\\n            if(distance[node]+edgeW<distance[adjnode])\\n            {\\n                distance[adjnode]=distance[node]+edgeW;\\n                pq.push({distance[adjnode],adjnode});\\n            }\\n        }\\n    }\\n\\n        return (distance[node2]==1e9)?-1:distance[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420101,
                "title": "easy-and-intuitive-approach-code-with-comments-djikstra-c",
                "content": "\\n# Code\\n```\\nclass Graph {\\npublic:\\n    //Initialize graph\\n    vector<vector<pair<int,int>>> g;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        int sz = (int)edges.size();\\n        g.resize(n);\\n       for(int i=0;i<sz;++i){\\n           int f = edges[i][0];\\n           int t = edges[i][1];\\n           int w = edges[i][2];\\n           g[f].push_back({t,w});\\n       } \\n    }\\n    \\n    //Atmost 100 new esges would be introduced, max edges in a graph with total nodes n is n*(n-1).\\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    \\n    //Do a Djikstra with source = node1.\\n    \\n    //This will pass because the max operations would be: \\n    \\n    //100*O(nlogm + mlogn) m is number of edges and n is number of nodes.\\n    \\n    //Since m <= n*(n-1) we take the max which is n*(n-1), and max n could be 100.\\n    \\n    //So max operations = 100*O(100*log(100*99)+100*99*log(100)) which is nearly 2*10^6 which should pass under 1 second.\\n    \\n    //Will be called atmost 100 times.\\n    int shortestPath(int node1, int node2) {\\n        \\n        //Standard djikstra using priority queue. Refer cp-algorithms.\\n        \\n        vector<int> d((int)g.size(),2e9);\\n        using pii = pair<int,int>;\\n        priority_queue<pii,vector<pii>,greater<pii>> q;\\n        q.push({0, node1});\\n        d[node1]=0;\\n        while(!q.empty()){\\n            int v = q.top().second;\\n            int d_v = q.top().first;\\n            q.pop();\\n            if (d_v != d[v])\\n                continue;\\n\\n            for (auto edge : g[v]) {\\n                int to = edge.first;\\n                int len = edge.second;\\n\\n                if (d[v] + len < d[to]) {\\n                    d[to] = d[v] + len;\\n                    q.push({d[to], to});\\n                }\\n            }\\n        }\\n        if(d[node2]==2e9)\\n            return -1;\\n        return d[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    //Initialize graph\\n    vector<vector<pair<int,int>>> g;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        int sz = (int)edges.size();\\n        g.resize(n);\\n       for(int i=0;i<sz;++i){\\n           int f = edges[i][0];\\n           int t = edges[i][1];\\n           int w = edges[i][2];\\n           g[f].push_back({t,w});\\n       } \\n    }\\n    \\n    //Atmost 100 new esges would be introduced, max edges in a graph with total nodes n is n*(n-1).\\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    \\n    //Do a Djikstra with source = node1.\\n    \\n    //This will pass because the max operations would be: \\n    \\n    //100*O(nlogm + mlogn) m is number of edges and n is number of nodes.\\n    \\n    //Since m <= n*(n-1) we take the max which is n*(n-1), and max n could be 100.\\n    \\n    //So max operations = 100*O(100*log(100*99)+100*99*log(100)) which is nearly 2*10^6 which should pass under 1 second.\\n    \\n    //Will be called atmost 100 times.\\n    int shortestPath(int node1, int node2) {\\n        \\n        //Standard djikstra using priority queue. Refer cp-algorithms.\\n        \\n        vector<int> d((int)g.size(),2e9);\\n        using pii = pair<int,int>;\\n        priority_queue<pii,vector<pii>,greater<pii>> q;\\n        q.push({0, node1});\\n        d[node1]=0;\\n        while(!q.empty()){\\n            int v = q.top().second;\\n            int d_v = q.top().first;\\n            q.pop();\\n            if (d_v != d[v])\\n                continue;\\n\\n            for (auto edge : g[v]) {\\n                int to = edge.first;\\n                int len = edge.second;\\n\\n                if (d[v] + len < d[to]) {\\n                    d[to] = d[v] + len;\\n                    q.push({d[to], to});\\n                }\\n            }\\n        }\\n        if(d[node2]==2e9)\\n            return -1;\\n        return d[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420011,
                "title": "bellman-ford",
                "content": "# Intuition\\nJust brute-force.\\n\\n# Approach\\nBell-ford.\\n\\n# Complexity\\n- Time complexity:\\nO(1) for add edge.\\nO(m) for shortest path.\\n\\n- Space complexity:\\nO(m)\\n\\n# Code\\n```\\nclass Graph {\\n    const int n;\\n    vector<vector<int>> edges;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) : n(n), edges(edges) {\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n       edges.push_back(edge);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if (node1 == node2) {\\n            return 0;\\n        }\\n        vector<int> dp(n, INT_MAX);\\n        dp[node1] = 0;\\n        for (bool mark = true; mark;) {\\n            mark = false;\\n            for (const auto& edge : edges) {\\n                if (dp[edge[0]] == INT_MAX) {\\n                    continue;\\n                }\\n                if (dp[edge[1]] > dp[edge[0]] + edge[2]) {\\n                    dp[edge[1]] = dp[edge[0]] + edge[2] ;\\n                    mark = true;\\n                }\\n            }\\n        }\\n        return dp[node2] == INT_MAX ? (-1) : dp[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\n    const int n;\\n    vector<vector<int>> edges;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) : n(n), edges(edges) {\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n       edges.push_back(edge);\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if (node1 == node2) {\\n            return 0;\\n        }\\n        vector<int> dp(n, INT_MAX);\\n        dp[node1] = 0;\\n        for (bool mark = true; mark;) {\\n            mark = false;\\n            for (const auto& edge : edges) {\\n                if (dp[edge[0]] == INT_MAX) {\\n                    continue;\\n                }\\n                if (dp[edge[1]] > dp[edge[0]] + edge[2]) {\\n                    dp[edge[1]] = dp[edge[0]] + edge[2] ;\\n                    mark = true;\\n                }\\n            }\\n        }\\n        return dp[node2] == INT_MAX ? (-1) : dp[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3419982,
                "title": "python3-solution",
                "content": "\\n```\\nimport heapq\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.adj_list=[[] for _ in range(n)]\\n        for u,v,w in edges:\\n            self.adj_list[u].append((v,w))\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u,v,w=edge\\n        self.adj_list[u].append((v,w))\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        n=len(self.adj_list)\\n        pq=[(0,node1)]\\n        dist=[float(\\'inf\\') for _ in range(n)]\\n        dist[node1]=0\\n        while pq:\\n            d,u=heapq.heappop(pq)\\n            if u==node2:\\n                return d\\n            if d>dist[u]:\\n                continue\\n                \\n            for v,w in self.adj_list[u]:\\n                if d+w<dist[v]:\\n                    dist[v]=d+w\\n                    heapq.heappush(pq,(dist[v],v))\\n                    \\n                    \\n                    \\n        return -1            \\n        \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nimport heapq\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.adj_list=[[] for _ in range(n)]\\n        for u,v,w in edges:\\n            self.adj_list[u].append((v,w))\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u,v,w=edge\\n        self.adj_list[u].append((v,w))\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        n=len(self.adj_list)\\n        pq=[(0,node1)]\\n        dist=[float(\\'inf\\') for _ in range(n)]\\n        dist[node1]=0\\n        while pq:\\n            d,u=heapq.heappop(pq)\\n            if u==node2:\\n                return d\\n            if d>dist[u]:\\n                continue\\n                \\n            for v,w in self.adj_list[u]:\\n                if d+w<dist[v]:\\n                    dist[v]=d+w\\n                    heapq.heappush(pq,(dist[v],v))\\n                    \\n                    \\n                    \\n        return -1            \\n        \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3460374,
                "title": "java-graph-dijkstra-algo-for-shortest-path-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nApply dijkstra algo for shortest path\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n\\n    class Node{\\n        int vertex;\\n        int weight;\\n        public Node(int vertex, int weight){\\n            this.vertex = vertex;\\n            this.weight = weight;\\n        }\\n    }\\n\\n    Map<Integer, List<Node>> graph;\\n    int V;\\n    int[] dist;\\n    PriorityQueue<Node> queue;\\n\\n    public Graph(int n, int[][] edges) {\\n        V = n;\\n\\n        dist = new int[V];\\n        queue = new PriorityQueue<>((a, b) -> a.weight - b.weight);\\n\\n        graph = new HashMap<>();\\n        for(int[] edge : edges){\\n            int u = edge[0];\\n            int v = edge[1];\\n            int weight = edge[2];\\n\\n            graph.putIfAbsent(u, new ArrayList<>());\\n            graph.get(u).add(new Node(v, weight));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int u = edge[0];\\n        int v = edge[1];\\n        int weight = edge[2];\\n\\n        graph.putIfAbsent(u, new ArrayList<>());\\n        graph.get(u).add(new Node(v, weight));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        return shortestPathHelper(node1, node2);\\n    }\\n\\n    private int shortestPathHelper(int src, int dest){\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        queue.clear();\\n\\n        dist[src] = 0;\\n        queue.add(new Node(src, 0));\\n\\n        while(!queue.isEmpty()){\\n\\n            Node currNode = queue.poll();\\n\\n            for(Node childNode : graph.getOrDefault(currNode.vertex, new ArrayList<>())){\\n                if(dist[childNode.vertex] > dist[currNode.vertex] + childNode.weight){\\n                    dist[childNode.vertex] = dist[currNode.vertex] + childNode.weight;\\n                    queue.add(new Node(childNode.vertex, dist[childNode.vertex]));\\n                }\\n            }\\n        }\\n        return dist[dest] == Integer.MAX_VALUE ? -1 : dist[dest];\\n    }\\n\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n\\n    class Node{\\n        int vertex;\\n        int weight;\\n        public Node(int vertex, int weight){\\n            this.vertex = vertex;\\n            this.weight = weight;\\n        }\\n    }\\n\\n    Map<Integer, List<Node>> graph;\\n    int V;\\n    int[] dist;\\n    PriorityQueue<Node> queue;\\n\\n    public Graph(int n, int[][] edges) {\\n        V = n;\\n\\n        dist = new int[V];\\n        queue = new PriorityQueue<>((a, b) -> a.weight - b.weight);\\n\\n        graph = new HashMap<>();\\n        for(int[] edge : edges){\\n            int u = edge[0];\\n            int v = edge[1];\\n            int weight = edge[2];\\n\\n            graph.putIfAbsent(u, new ArrayList<>());\\n            graph.get(u).add(new Node(v, weight));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int u = edge[0];\\n        int v = edge[1];\\n        int weight = edge[2];\\n\\n        graph.putIfAbsent(u, new ArrayList<>());\\n        graph.get(u).add(new Node(v, weight));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        return shortestPathHelper(node1, node2);\\n    }\\n\\n    private int shortestPathHelper(int src, int dest){\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        queue.clear();\\n\\n        dist[src] = 0;\\n        queue.add(new Node(src, 0));\\n\\n        while(!queue.isEmpty()){\\n\\n            Node currNode = queue.poll();\\n\\n            for(Node childNode : graph.getOrDefault(currNode.vertex, new ArrayList<>())){\\n                if(dist[childNode.vertex] > dist[currNode.vertex] + childNode.weight){\\n                    dist[childNode.vertex] = dist[currNode.vertex] + childNode.weight;\\n                    queue.add(new Node(childNode.vertex, dist[childNode.vertex]));\\n                }\\n            }\\n        }\\n        return dist[dest] == Integer.MAX_VALUE ? -1 : dist[dest];\\n    }\\n\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3451903,
                "title": "c-encyclopedia-dijkstra-heap-optimized-dijkstra-spfa-floyd-warshall",
                "content": "### 1. Plain Dijkstra\\n\\n#### Intuition\\n\\nPlain Dijkstra.\\n- Instead of using a priority queue, this way of dijkstra uses a simple linear search to find the next unvisited node with the minimum distance.\\n- The reason for using a linear search instead of a heap is that the graph is dense. In this case, the overhead of maintaining a heap may be larger than the benefit of using it. Linear search also simplifies the implementation and can be faster for small graphs.\\n\\n#### Approach\\n\\nThis graph is represented by **adjacency matrix**.\\\\\\nThe implementation starts by initializing the distance of all nodes from the starting node to infinity (represented by `0x3f3f3f3f`), except for the starting node itself which has a distance of 0. Then, it iterates through all nodes, selecting the unvisited node with the smallest distance as the next node to visit. It marks the selected node as visited and updates the distance of its unvisited neighbors if a shorter path is found. Finally, the algorithm returns the distance of the target node if there is a path or -1 if there is no path.\\n\\n#### Complexity\\n\\nn is the number of nodes and m is the number of edges.\\n\\nThe time complexity of adding an edge is $$O(1)$$, and the space complexity is $$O(m)$$.\\\\\\nThe time complexity of computing the shortest path is $$O(n^2 + m)$$. The space complexity is $$O(n)$$ to store the distance array and visited set.\\n    \\n#### Code\\n\\n```cpp\\nclass Graph {\\npublic:\\n    const int INF = 0x3f3f3f3f;\\n    vector<vector<int>> g;\\n\\n    Graph(int n, vector<vector<int>>& edges) {\\n        g = vector<vector<int>>(n, vector<int>(n, INF));\\n        for (auto &e: edges)\\n            g[e[0]][e[1]] = e[2];\\n    }\\n\\n    void addEdge(vector<int> e) {\\n        g[e[0]][e[1]] = e[2];\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        int n = g.size();\\n        vector<int> dist(n, INF);\\n        vector<bool> st(n);\\n        dist[node1] = 0;\\n\\n        for (int i = 0; i < n; ++i)\\n        {\\n            int t = -1;\\n            for (int j = 0; j < n; ++j)\\n                if (!st[j] && (t == -1 || dist[t] > dist[j]))\\n                    t = j;\\n            st[t] = true;\\n\\n            for (int j = 0; j < n; ++j)\\n                dist[j] = min(dist[j], dist[t] + g[t][j]);\\n        }\\n\\n        return dist[node2] == INF ? -1 : dist[node2];\\n    }\\n};\\n```\\n\\n### 2. Heap-Optimized Dijkstra\\n\\n#### Intuition\\n\\nThe approach taken in Solution 2 is also based on Dijkstra\\'s algorithm. However, it uses a priority queue to optimize the search time of finding the next unvisited node with the minimum distance.\\n\\n#### Approach\\n\\nThis graph is represented by **adjacency list**.\\\\\\nThis algorithm works by maintaining a set of visited nodes and a priority queue of nodes to visit. The priority queue is sorted based on the distance from the starting node. The algorithm repeatedly extracts the node with the smallest distance from the priority queue and relaxes all its neighbors, updating their distances if a shorter path is found. This continues until the destination node is visited or the priority queue is empty.\\n\\n#### Complexity\\n\\nn is the number of nodes and m is the number of edges.\\n\\nThe time complexity of adding an edge is $$O(1)$$, and the space complexity is $$O(m)$$.\\\\\\nThe time complexity of computing the shortest path is $$O(m * log n)$$. The space complexity is $$O(n)$$ to store the distance array and visited set.\\n    \\n#### Code\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>> adj;\\n    \\n    Graph(int n, vector<vector<int>>& edge) {\\n        adj.resize(n);\\n        for (auto& e: edge)\\n            adj[e[0]].emplace_back(e[1], e[2]);\\n    }\\n\\n    void addEdge(vector<int> e) {\\n        adj[e[0]].emplace_back(e[1], e[2]);\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n);\\n        memset(&dist[0], 0x3f, n * sizeof(int));\\n        vector<bool> st(n);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> heap;\\n        heap.emplace(0, node1);\\n        dist[node1] = 0;\\n\\n        while (!heap.empty())\\n        {\\n            auto [d, u] = heap.top(); heap.pop();\\n            if (st[u]) continue;\\n            st[u] = true;\\n            for (auto& edge : edges[u])\\n            {\\n                auto [v, w] = edge;\\n                if (dist[v] > dist[u] + w)\\n                {\\n                    dist[v] = dist[u] + w;\\n                    heap.emplace(dist[v], v);\\n                }\\n            }\\n        }\\n\\n        if (dist[node2] == 0x3f3f3f3f) return -1;\\n        return dist[node2];\\n    }\\n};\\n```\\n\\n### 3. SPFA\\n\\n#### Intuition\\n\\nShortest Path Faster Algorithm (SPFA).\\n- SPFA is an improvement over Dijkstra\\'s algorithm that uses a queue to optimize the search time of finding the next unvisited node with the minimum distance.\\n- It is similar to Dijkstra\\'s algorithm, but instead of always selecting the node with the smallest distance, SPFA maintains a queue of nodes to visit, and it only adds a node to the queue if its distance is updated.\\n\\n#### Approach\\n\\nThis graph is represented by **forward star edge list**.\\\\\\nThe implementation starts by initializing the distance of all nodes from the starting node to infinity (represented by `0x3f3f3f3f`), except for the starting node itself which has a distance of 0. Then, it uses a queue to maintain the nodes to visit, initially adding the starting node to the queue. It repeatedly dequeues a node from the queue, relaxes its neighbors by updating their distances if a shorter path is found, and enqueues them if their distances are updated. This process continues until the queue is empty, which means all nodes have been visited. Finally, the algorithm returns the distance of the target node if there is a path or -1 if there is no path.\\n\\n#### Complexity\\n\\nn is the number of nodes and m is the number of edges.\\n\\nThe time complexity of adding an edge is $$O(1)$$, and the space complexity is $$O(m)$$.\\\\\\nThe time complexity of computing the shortest path is $$O(n * m)$$, but it can be optimized to $$O(k * m)$$ on average, where `k` is the average number of edges per node. The space complexity is $$O(n)$$ to store the distance array and visited set, and $$O(n)$$ for the queue.\\n    \\n#### Code\\n```cpp\\nclass Graph {\\npublic:\\n    static const int N = 100, M = 10000;\\n    int head[N], e[M], ne[M], w[M], idx;\\n    int dist[N];\\n    bool st[N];\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        memset(head, -1, sizeof head);\\n        for (auto& e: edges)\\n            addEdge(e);\\n    }\\n\\n    void addEdge(vector<int> edge) {\\n        int a = edge[0], b = edge[1], c = edge[2];\\n        e[idx] = b, w[idx] = c, ne[idx] = head[a], head[a] = idx++;\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        memset(dist, 0x3f, sizeof dist);\\n        memset(st, false, sizeof st);\\n        queue<int> q;\\n        q.push(node1);\\n        dist[node1] = 0;    \\n        st[node1] = true;\\n\\n        while (!q.empty())\\n        {\\n            int t = q.front();\\n            q.pop();\\n\\n            st[t] = false;\\n\\n            for (int i = head[t]; ~i; i = ne[i])\\n            {\\n                int j = e[i];\\n                if (dist[j] > dist[t] + w[i])\\n                {\\n                    dist[j] = dist[t] + w[i];\\n                    if (!st[j]) q.push(j), st[j] = true;\\n                }\\n            }\\n        }\\n\\n        if (dist[node2] == 0x3f3f3f3f) return -1;\\n        return dist[node2];\\n    }\\n};\\n```\\n\\n### 4. Floyd-Warshall\\n\\n#### Intuition\\n\\nFloyd-Warshall algorithm. The algorithm uses dynamic programming to find the shortest path between all pairs of nodes in a weighted graph.\\n\\n#### Approach\\n\\nThis graph is represented by **adjacency matrix**.\\\\\\nThe graph is represented as an adjacency matrix in the form of a two-dimensional vector `d` of size `n x n`. The constructor of the Graph class initializes the distance between each node to `0x3f3f3f3f` (which is a large value used to represent infinity). Then, the edges are added to the d matrix. The addEdge function updates the distance between nodes `a` and `b` with weight `w`. If the current distance is greater than the new distance, the shortest path between all pairs of nodes is recomputed using the Floyd algorithm. The shortestPath function returns the shortest path between node1 and node2.\\n\\n#### Complexity\\n\\nn is the number of nodes and m is the number of edges.\\n\\nThe time complexity of adding an edge is $$O(n^2)$$, and the space complexity is $$O(m)$$.\\\\\\nThe time complexity of computing the shortest path is $$O(n^3)$$. The space complexity is $$O(n^2)$$ to store the distance matrix.\\n    \\n#### Code\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> d;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        d = vector(n, vector<int>(n, 0x3f3f3f3f));\\n        for (int i = 0; i < n; i++)\\n            d[i][i] = 0;\\n        for (auto& e : edges)\\n            d[e[0]][e[1]] = e[2];\\n        floyd(n);\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0], b = edge[1], w = edge[2];\\n        if (d[a][b] > w)\\n            for (int i = 0; i < d.size(); i++)\\n                for (int j = 0; j < d.size(); j++)\\n                    d[i][j] = min(d[i][j], d[i][a] + w + d[b][j]);\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        return d[node1][node2] == 0x3f3f3f3f ? -1 : d[node1][node2];\\n    }\\n    \\nprivate:\\n    void floyd(int n)\\n    {\\n        for (int k = 0; k < n; k++)\\n            for (int i = 0; i < n; i++)\\n                for (int j = 0; j < n; j++)\\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Graph"
                ],
                "code": "```cpp\\nclass Graph {\\npublic:\\n    const int INF = 0x3f3f3f3f;\\n    vector<vector<int>> g;\\n\\n    Graph(int n, vector<vector<int>>& edges) {\\n        g = vector<vector<int>>(n, vector<int>(n, INF));\\n        for (auto &e: edges)\\n            g[e[0]][e[1]] = e[2];\\n    }\\n\\n    void addEdge(vector<int> e) {\\n        g[e[0]][e[1]] = e[2];\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        int n = g.size();\\n        vector<int> dist(n, INF);\\n        vector<bool> st(n);\\n        dist[node1] = 0;\\n\\n        for (int i = 0; i < n; ++i)\\n        {\\n            int t = -1;\\n            for (int j = 0; j < n; ++j)\\n                if (!st[j] && (t == -1 || dist[t] > dist[j]))\\n                    t = j;\\n            st[t] = true;\\n\\n            for (int j = 0; j < n; ++j)\\n                dist[j] = min(dist[j], dist[t] + g[t][j]);\\n        }\\n\\n        return dist[node2] == INF ? -1 : dist[node2];\\n    }\\n};\\n```\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>> adj;\\n    \\n    Graph(int n, vector<vector<int>>& edge) {\\n        adj.resize(n);\\n        for (auto& e: edge)\\n            adj[e[0]].emplace_back(e[1], e[2]);\\n    }\\n\\n    void addEdge(vector<int> e) {\\n        adj[e[0]].emplace_back(e[1], e[2]);\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n);\\n        memset(&dist[0], 0x3f, n * sizeof(int));\\n        vector<bool> st(n);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> heap;\\n        heap.emplace(0, node1);\\n        dist[node1] = 0;\\n\\n        while (!heap.empty())\\n        {\\n            auto [d, u] = heap.top(); heap.pop();\\n            if (st[u]) continue;\\n            st[u] = true;\\n            for (auto& edge : edges[u])\\n            {\\n                auto [v, w] = edge;\\n                if (dist[v] > dist[u] + w)\\n                {\\n                    dist[v] = dist[u] + w;\\n                    heap.emplace(dist[v], v);\\n                }\\n            }\\n        }\\n\\n        if (dist[node2] == 0x3f3f3f3f) return -1;\\n        return dist[node2];\\n    }\\n};\\n```\n```cpp\\nclass Graph {\\npublic:\\n    static const int N = 100, M = 10000;\\n    int head[N], e[M], ne[M], w[M], idx;\\n    int dist[N];\\n    bool st[N];\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        memset(head, -1, sizeof head);\\n        for (auto& e: edges)\\n            addEdge(e);\\n    }\\n\\n    void addEdge(vector<int> edge) {\\n        int a = edge[0], b = edge[1], c = edge[2];\\n        e[idx] = b, w[idx] = c, ne[idx] = head[a], head[a] = idx++;\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        memset(dist, 0x3f, sizeof dist);\\n        memset(st, false, sizeof st);\\n        queue<int> q;\\n        q.push(node1);\\n        dist[node1] = 0;    \\n        st[node1] = true;\\n\\n        while (!q.empty())\\n        {\\n            int t = q.front();\\n            q.pop();\\n\\n            st[t] = false;\\n\\n            for (int i = head[t]; ~i; i = ne[i])\\n            {\\n                int j = e[i];\\n                if (dist[j] > dist[t] + w[i])\\n                {\\n                    dist[j] = dist[t] + w[i];\\n                    if (!st[j]) q.push(j), st[j] = true;\\n                }\\n            }\\n        }\\n\\n        if (dist[node2] == 0x3f3f3f3f) return -1;\\n        return dist[node2];\\n    }\\n};\\n```\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> d;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        d = vector(n, vector<int>(n, 0x3f3f3f3f));\\n        for (int i = 0; i < n; i++)\\n            d[i][i] = 0;\\n        for (auto& e : edges)\\n            d[e[0]][e[1]] = e[2];\\n        floyd(n);\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0], b = edge[1], w = edge[2];\\n        if (d[a][b] > w)\\n            for (int i = 0; i < d.size(); i++)\\n                for (int j = 0; j < d.size(); j++)\\n                    d[i][j] = min(d[i][j], d[i][a] + w + d[b][j]);\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        return d[node1][node2] == 0x3f3f3f3f ? -1 : d[node1][node2];\\n    }\\n    \\nprivate:\\n    void floyd(int n)\\n    {\\n        for (int k = 0; k < n; k++)\\n            for (int i = 0; i < n; i++)\\n                for (int j = 0; j < n; j++)\\n                    d[i][j] = min(d[i][j], d[i][k] + d[k][j]);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423916,
                "title": "dijkstra-s-algorithm-c",
                "content": "```\\nclass Graph {\\n    int n;\\n    unordered_map<int, vector<pair<int, int>>> adj;\\npublic:\\n    Graph(int m, vector<vector<int>>& edges) {\\n        for(auto e : edges) adj[e[0]].push_back({e[1], e[2]});\\n        n = m;\\n    }\\n    \\n    void addEdge(vector<int> e) {\\n        adj[e[0]].push_back({e[1], e[2]});\\n        n++;\\n    }\\n    \\n    int shortestPath(int a, int b) {\\n        vector<int> d(n, 1e9);\\n        d[a] = 0;\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, a});\\n        \\n        while(pq.size()) {\\n            int dis = pq.top().first, node = pq.top().second;\\n            pq.pop();\\n            if(node == b) return dis;\\n            \\n            for(auto ad : adj[node]) {\\n                if(dis + ad.second < d[ad.first]) {\\n                    d[ad.first] = dis + ad.second;\\n                    pq.push({d[ad.first], ad.first});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\n    int n;\\n    unordered_map<int, vector<pair<int, int>>> adj;\\npublic:\\n    Graph(int m, vector<vector<int>>& edges) {\\n        for(auto e : edges) adj[e[0]].push_back({e[1], e[2]});\\n        n = m;\\n    }\\n    \\n    void addEdge(vector<int> e) {\\n        adj[e[0]].push_back({e[1], e[2]});\\n        n++;\\n    }\\n    \\n    int shortestPath(int a, int b) {\\n        vector<int> d(n, 1e9);\\n        d[a] = 0;\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, a});\\n        \\n        while(pq.size()) {\\n            int dis = pq.top().first, node = pq.top().second;\\n            pq.pop();\\n            if(node == b) return dis;\\n            \\n            for(auto ad : adj[node]) {\\n                if(dis + ad.second < d[ad.first]) {\\n                    d[ad.first] = dis + ad.second;\\n                    pq.push({d[ad.first], ad.first});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421303,
                "title": "easy-c-solution-using-dijkstra",
                "content": "# Code\\n```\\nclass Graph {\\npublic:\\n    unordered_map<int, list<pair<int, int>>> adj;\\n    int m = 0;\\n    vector<int> dijkstra(int s) {\\n        vector<int> dist(m, INT_MAX);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;\\n        q.push({s, 0});\\n        dist[s] = 0;\\n        while(!q.empty()) {\\n            auto f = q.top();\\n            q.pop();\\n            \\n            int node = f.first;\\n            int di = f.second;\\n            \\n            for(auto nbr: adj[node]) {\\n                \\n                int n = nbr.first;\\n                int d = nbr.second;\\n                \\n                int total = di + d;\\n                \\n                if(dist[n] > total) {\\n                    dist[n] = total;\\n                    q.push({n, dist[n]});\\n                }\\n            }\\n        }\\n        return dist;\\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        m = n;\\n        for(auto edge: edges) {\\n            adj[edge[0]].push_back({edge[1], edge[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> ans = dijkstra(node1);\\n        if(ans[node2] != INT_MAX) {\\n            return ans[node2];\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    unordered_map<int, list<pair<int, int>>> adj;\\n    int m = 0;\\n    vector<int> dijkstra(int s) {\\n        vector<int> dist(m, INT_MAX);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;\\n        q.push({s, 0});\\n        dist[s] = 0;\\n        while(!q.empty()) {\\n            auto f = q.top();\\n            q.pop();\\n            \\n            int node = f.first;\\n            int di = f.second;\\n            \\n            for(auto nbr: adj[node]) {\\n                \\n                int n = nbr.first;\\n                int d = nbr.second;\\n                \\n                int total = di + d;\\n                \\n                if(dist[n] > total) {\\n                    dist[n] = total;\\n                    q.push({n, dist[n]});\\n                }\\n            }\\n        }\\n        return dist;\\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        m = n;\\n        for(auto edge: edges) {\\n            adj[edge[0]].push_back({edge[1], edge[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> ans = dijkstra(node1);\\n        if(ans[node2] != INT_MAX) {\\n            return ans[node2];\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420672,
                "title": "simple-bfs-solution-very-easy-to-understand",
                "content": "\\tclass Graph {\\n\\tpublic:\\n\\n\\t\\tvector<vector<pair<int, int>>> adj;\\n\\t\\tvector<int> inorder;\\n\\t\\tint num = 0;\\n\\t\\tGraph(int n, vector<vector<int>>& edges) \\n\\t\\t{\\n\\t\\t\\tnum = n;\\n\\t\\t\\tadj.resize(n);\\n\\t\\t\\tinorder.resize(n, 0);\\n\\t\\t\\tfor(int i = 0; i < edges.size(); i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint u = edges[i][0];\\n\\t\\t\\t\\tint v = edges[i][1];\\n\\t\\t\\t\\tint cost = edges[i][2];\\n\\n\\t\\t\\t\\tadj[u].push_back({v, cost});\\n\\t\\t\\t\\tinorder[v]++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid addEdge(vector<int> edge) \\n\\t\\t{\\n\\t\\t\\tint u = edge[0];\\n\\t\\t\\tint v = edge[1];\\n\\t\\t\\tint cost = edge[2];\\n\\n\\t\\t\\tadj[u].push_back({v, cost});\\n\\t\\t}\\n\\n\\n\\n\\t\\tint shortestPath(int node1, int node2) \\n\\t\\t{        \\n\\t\\t\\tvector<int> dis(num, INT_MAX);\\n\\t\\t\\tdis[node1] = 0;\\n\\n\\t\\t\\tqueue<int> q;\\n\\t\\t\\tq.push(node1);\\n\\n\\t\\t\\twhile(!q.empty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp = q.front();\\n\\t\\t\\t\\tq.pop();\\n\\n\\t\\t\\t\\tfor(auto i : adj[temp])\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tint u = i.first;\\n\\t\\t\\t\\t\\tint c = i.second;\\n\\n\\t\\t\\t\\t\\tif(dis[u] > dis[temp] + c)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tdis[u] = dis[temp]+c;\\n\\t\\t\\t\\t\\t\\tq.push(u);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(dis[node2] != INT_MAX)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn dis[node2];\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn -1;\\n\\n\\t\\t}\\n\\t};\\n",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Graph"
                ],
                "code": "\\tclass Graph {\\n\\tpublic:\\n\\n\\t\\tvector<vector<pair<int, int>>> adj;\\n\\t\\tvector<int> inorder;\\n\\t\\tint num = 0;\\n\\t\\tGraph(int n, vector<vector<int>>& edges) \\n\\t\\t{\\n\\t\\t\\tnum = n;\\n\\t\\t\\tadj.resize(n);\\n\\t\\t\\tinorder.resize(n, 0);\\n\\t\\t\\tfor(int i = 0; i < edges.size(); i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint u = edges[i][0];\\n\\t\\t\\t\\tint v = edges[i][1];\\n\\t\\t\\t\\tint cost = edges[i][2];\\n\\n\\t\\t\\t\\tadj[u].push_back({v, cost});\\n\\t\\t\\t\\tinorder[v]++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid addEdge(vector<int> edge) \\n\\t\\t{\\n\\t\\t\\tint u = edge[0];\\n\\t\\t\\tint v = edge[1];\\n\\t\\t\\tint cost = edge[2];\\n\\n\\t\\t\\tadj[u].push_back({v, cost});\\n\\t\\t}\\n\\n\\n\\n\\t\\tint shortestPath(int node1, int node2) \\n\\t\\t{        \\n\\t\\t\\tvector<int> dis(num, INT_MAX);\\n\\t\\t\\tdis[node1] = 0;\\n\\n\\t\\t\\tqueue<int> q;\\n\\t\\t\\tq.push(node1);\\n\\n\\t\\t\\twhile(!q.empty())\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp = q.front();\\n\\t\\t\\t\\tq.pop();\\n\\n\\t\\t\\t\\tfor(auto i : adj[temp])\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tint u = i.first;\\n\\t\\t\\t\\t\\tint c = i.second;\\n\\n\\t\\t\\t\\t\\tif(dis[u] > dis[temp] + c)\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tdis[u] = dis[temp]+c;\\n\\t\\t\\t\\t\\t\\tq.push(u);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(dis[node2] != INT_MAX)\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn dis[node2];\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\treturn -1;\\n\\n\\t\\t}\\n\\t};\\n",
                "codeTag": "Java"
            },
            {
                "id": 3420409,
                "title": "c-dijkstra-definitely-a-medium",
                "content": "## Explanation\\nNot a hard problem tbh !! Use Dijkstra to find the shortest path !!\\n\\n## Code\\n```\\nclass Graph {\\npublic:\\n    \\n    vector<vector<pair<int,int>>>e;\\n    int nodes;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        e.resize(n);\\n        for(auto &it:edges){\\n            e[it[0]].push_back({it[1],it[2]});\\n        }\\n        nodes=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        e[edge[0]].push_back({edge[1],edge[2]});\\n        \\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(nodes, numeric_limits<int>::max());\\n        dist[node1] = 0;\\n\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; \\n        pq.push(make_pair(0, node1)); \\n        while (!pq.empty()) {\\n            int curr_dist = pq.top().first;\\n            int curr_node = pq.top().second;\\n            pq.pop(); \\n\\n            if (curr_node == node2) {\\n                return curr_dist;\\n            }\\n\\n            for (auto neighbor : e[curr_node]) {\\n                int next_node = neighbor.first;\\n                int edge_cost = neighbor.second;\\n                if (curr_dist + edge_cost < dist[next_node]) {\\n                    dist[next_node] = curr_dist + edge_cost; \\n                    pq.push(make_pair(dist[next_node], next_node));\\n                }\\n            }\\n        }\\n\\n        return -1; \\n    }\\n};\\n\\n```\\n\\n## Complexity\\n- Time complexity:\\n    Add Edge - $$O(1)$$\\n    Shortest Path - $$O(V*E)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n    Adjacency List - $$O(V*E)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    \\n    vector<vector<pair<int,int>>>e;\\n    int nodes;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        e.resize(n);\\n        for(auto &it:edges){\\n            e[it[0]].push_back({it[1],it[2]});\\n        }\\n        nodes=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        e[edge[0]].push_back({edge[1],edge[2]});\\n        \\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(nodes, numeric_limits<int>::max());\\n        dist[node1] = 0;\\n\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; \\n        pq.push(make_pair(0, node1)); \\n        while (!pq.empty()) {\\n            int curr_dist = pq.top().first;\\n            int curr_node = pq.top().second;\\n            pq.pop(); \\n\\n            if (curr_node == node2) {\\n                return curr_dist;\\n            }\\n\\n            for (auto neighbor : e[curr_node]) {\\n                int next_node = neighbor.first;\\n                int edge_cost = neighbor.second;\\n                if (curr_dist + edge_cost < dist[next_node]) {\\n                    dist[next_node] = curr_dist + edge_cost; \\n                    pq.push(make_pair(dist[next_node], next_node));\\n                }\\n            }\\n        }\\n\\n        return -1; \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420350,
                "title": "c-dijkstra-algorithm-and-update-distance",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhen add edge from a to b, distance is w,\\nfor all pair`(i, j)`the distance change is `i->a` + `a->b` + `b->j` \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Constructor, using dijkstra algorithm to build all pair`(i, j)` distance, \\n   and stored into `dist[i][j]`\\n2. function: `addEdge(a, b, w)`\\n   case 1: `dist[a][b] <= w`, directly return.\\n   \\n   case 2: `dist[a][b] > w`, update `dist[a][b] = w`\\n   scan all of pairs(i, j) update `dist[i][j]`\\n   ```\\n   for(int i = 0 ;  i < n ; i++)\\n      for(int j = 0 ; j < n ; j++)\\n          dist[i][j] = dist[i][a] + dist[a][b] + dist[b][j]);\\n   ```\\n3. function: `shortestPath(node1, node2)`\\n   directly return `dist[node1][node2]`\\n    \\n# Complexity\\n- Time complexity: O(max(Elog(V), V ^ 2)) (Dijkstra)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(max(E + V, V ^ 2))\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>> adj;\\n    vector<vector<int>> dist;\\n    int node_cnt;\\n    \\n    void get_shortest_len(int src) {\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        vector<int> visited(node_cnt, INT32_MAX);\\n        \\n        pq.push({0, src});\\n        visited[src] = 0;\\n        \\n        while(!pq.empty()) {\\n            int node_weight = pq.top().first;\\n            int node = pq.top().second;\\n            pq.pop();\\n            if(visited[node] < node_weight) {\\n                continue;\\n            }\\n            \\n            for(int i = 0 ; i < adj[node].size() ; i++) {\\n                int next = adj[node][i].first;\\n                int next_weight = adj[node][i].second;\\n                \\n                if(visited[next] <= (node_weight + next_weight)) {\\n                    continue;\\n                }\\n                visited[next] = node_weight + next_weight;\\n                pq.push({node_weight + next_weight, next});\\n            }\\n        }\\n        \\n        for(int i = 0 ; i < node_cnt ; i++) {\\n            dist[src][i] = visited[i];\\n        }\\n        \\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.clear();\\n        adj.resize(n);\\n        dist.resize(n, vector<int>(n, INT32_MAX));\\n        node_cnt = n;\\n        \\n        for(vector<int> &v : edges) {\\n            adj[v[0]].push_back({v[1], v[2]});\\n        }\\n        \\n        for(int i = 0 ; i < n ; i++) {\\n            get_shortest_len(i);\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0];\\n        int b = edge[1];\\n        int w = edge[2];\\n        if(dist[a][b] <= w) {\\n            return;\\n        }\\n        dist[a][b] = w;\\n        \\n        for(int i = 0 ; i < node_cnt ; i++) {\\n            for(int j = 0 ; j < node_cnt ; j++) {\\n                if((i != j) && (dist[i][a] < INT32_MAX) && (dist[b][j] < INT32_MAX))  {\\n                    dist[i][j] = min(dist[i][j], dist[i][a] + dist[a][b] + dist[b][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dist[node1][node2] == INT32_MAX ? -1: dist[node1][node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n   for(int i = 0 ;  i < n ; i++)\\n      for(int j = 0 ; j < n ; j++)\\n          dist[i][j] = dist[i][a] + dist[a][b] + dist[b][j]);\\n   ```\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>> adj;\\n    vector<vector<int>> dist;\\n    int node_cnt;\\n    \\n    void get_shortest_len(int src) {\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        vector<int> visited(node_cnt, INT32_MAX);\\n        \\n        pq.push({0, src});\\n        visited[src] = 0;\\n        \\n        while(!pq.empty()) {\\n            int node_weight = pq.top().first;\\n            int node = pq.top().second;\\n            pq.pop();\\n            if(visited[node] < node_weight) {\\n                continue;\\n            }\\n            \\n            for(int i = 0 ; i < adj[node].size() ; i++) {\\n                int next = adj[node][i].first;\\n                int next_weight = adj[node][i].second;\\n                \\n                if(visited[next] <= (node_weight + next_weight)) {\\n                    continue;\\n                }\\n                visited[next] = node_weight + next_weight;\\n                pq.push({node_weight + next_weight, next});\\n            }\\n        }\\n        \\n        for(int i = 0 ; i < node_cnt ; i++) {\\n            dist[src][i] = visited[i];\\n        }\\n        \\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.clear();\\n        adj.resize(n);\\n        dist.resize(n, vector<int>(n, INT32_MAX));\\n        node_cnt = n;\\n        \\n        for(vector<int> &v : edges) {\\n            adj[v[0]].push_back({v[1], v[2]});\\n        }\\n        \\n        for(int i = 0 ; i < n ; i++) {\\n            get_shortest_len(i);\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0];\\n        int b = edge[1];\\n        int w = edge[2];\\n        if(dist[a][b] <= w) {\\n            return;\\n        }\\n        dist[a][b] = w;\\n        \\n        for(int i = 0 ; i < node_cnt ; i++) {\\n            for(int j = 0 ; j < node_cnt ; j++) {\\n                if((i != j) && (dist[i][a] < INT32_MAX) && (dist[b][j] < INT32_MAX))  {\\n                    dist[i][j] = min(dist[i][j], dist[i][a] + dist[a][b] + dist[b][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dist[node1][node2] == INT32_MAX ? -1: dist[node1][node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420094,
                "title": "c-simple-dijkstra",
                "content": "```\\nclass Graph {\\npublic:\\n    vector<vector<vector<int>>> g;\\n    int N;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        g.resize(n);\\n        N = n;\\n        for(auto &x: edges) {\\n            g[x[0]].push_back({x[1],x[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>, greater<>> pq;\\n        \\n        pq.push({0,node1});\\n        \\n        while(pq.size()) {\\n            int cst = pq.top().first, node = pq.top().second;\\n            pq.pop();\\n            for(auto &x: g[node]) {\\n                if(cost[x[0]] > cst+x[1]) {\\n                    cost[x[0]] = cst+x[1];\\n                    pq.push({cost[x[0]],x[0]});\\n                }\\n            }\\n        }\\n        \\n        return cost[node2] >= 1e9 ? -1 : cost[node2];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<vector<int>>> g;\\n    int N;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        g.resize(n);\\n        N = n;\\n        for(auto &x: edges) {\\n            g[x[0]].push_back({x[1],x[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]].push_back({edge[1],edge[2]});\\n\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>, greater<>> pq;\\n        \\n        pq.push({0,node1});\\n        \\n        while(pq.size()) {\\n            int cst = pq.top().first, node = pq.top().second;\\n            pq.pop();\\n            for(auto &x: g[node]) {\\n                if(cost[x[0]] > cst+x[1]) {\\n                    cost[x[0]] = cst+x[1];\\n                    pq.push({cost[x[0]],x[0]});\\n                }\\n            }\\n        }\\n        \\n        return cost[node2] >= 1e9 ? -1 : cost[node2];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420043,
                "title": "dijkstra-java",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\n    List<List<int[]>> adj=new ArrayList<>();\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        for(int i=0;i<n;i++){\\n            adj.add(new ArrayList<>());\\n        }\\n        this.n=n;\\n        for(int edge[]: edges){\\n            adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int dist[]=new int[n+1];\\n        Arrays.fill(dist,Integer.MAX_VALUE);\\n        dist[node1]=0;\\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[1]-b[1]);\\n        pq.add(new int[]{node1,0});\\n        while(!pq.isEmpty()){\\n            int u=pq.poll()[0];\\n            for(int p[]: adj.get(u)){\\n                int v=p[0];\\n                int w=p[1];\\n                if(dist[v]>dist[u]+w){\\n                    dist[v]=dist[u]+w;\\n                    pq.add(new int[]{v,dist[v]});\\n                }\\n            }\\n        }\\n        if(dist[node2]==Integer.MAX_VALUE){\\n                return -1;\\n        }\\n        return dist[node2];\\n    }\\n    \\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n\\n# Code\\n```\\nclass Graph {\\n    List<List<int[]>> adj=new ArrayList<>();\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        for(int i=0;i<n;i++){\\n            adj.add(new ArrayList<>());\\n        }\\n        this.n=n;\\n        for(int edge[]: edges){\\n            adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new int[]{edge[1],edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int dist[]=new int[n+1];\\n        Arrays.fill(dist,Integer.MAX_VALUE);\\n        dist[node1]=0;\\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[1]-b[1]);\\n        pq.add(new int[]{node1,0});\\n        while(!pq.isEmpty()){\\n            int u=pq.poll()[0];\\n            for(int p[]: adj.get(u)){\\n                int v=p[0];\\n                int w=p[1];\\n                if(dist[v]>dist[u]+w){\\n                    dist[v]=dist[u]+w;\\n                    pq.add(new int[]{v,dist[v]});\\n                }\\n            }\\n        }\\n        if(dist[node2]==Integer.MAX_VALUE){\\n                return -1;\\n        }\\n        return dist[node2];\\n    }\\n    \\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 3419984,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Graph {\\npublic:\\ntypedef long long ll;\\n#define vi(x) vector<x>\\n\\nvector<vector<pair<ll, ll>>>g;\\nll n;\\n\\nll shortestPath(ll s, ll dest) { // dijkstra-dense ; for max edges; O(v^2)\\n        vi(ll)d(n, LLONG_MAX); // dist of the shortest path from src to every node\\n        bitset<100>vis(0);\\n        d[s] = 0;\\n        for (ll i = 0; i < n; i++) {\\n            ll v = -1;\\n            for (ll j = 0; j < n; j++) {\\n                if (!vis[j] && (v == -1 || d[j] < d[v])){\\n                    v = j;\\n                }\\n            }\\n            if (v==-1 || d[v] == LLONG_MAX){\\n                break;\\n            }\\n            vis[v] = true;\\n            for (const auto&[to, w] : g[v]) {\\n                if (d[v] + w < d[to]) {\\n                    d[to] = d[v] + w;\\n                }\\n            }\\n        }\\n        return (d[dest]==LLONG_MAX?-1:d[dest]); // path not found \\n    }\\n\\n    Graph(int N, const vi(vi(int))& edges) {\\n        n=N;\\n        g.resize(n);\\n        for(const auto&edge:edges){\\n            addEdge(edge);\\n        }\\n    }\\n    \\n    void addEdge(const vi(int)&edge) {\\n        g[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Graph {\\npublic:\\ntypedef long long ll;\\n#define vi(x) vector<x>\\n\\nvector<vector<pair<ll, ll>>>g;\\nll n;\\n\\nll shortestPath(ll s, ll dest) { // dijkstra-dense ; for max edges; O(v^2)\\n        vi(ll)d(n, LLONG_MAX); // dist of the shortest path from src to every node\\n        bitset<100>vis(0);\\n        d[s] = 0;\\n        for (ll i = 0; i < n; i++) {\\n            ll v = -1;\\n            for (ll j = 0; j < n; j++) {\\n                if (!vis[j] && (v == -1 || d[j] < d[v])){\\n                    v = j;\\n                }\\n            }\\n            if (v==-1 || d[v] == LLONG_MAX){\\n                break;\\n            }\\n            vis[v] = true;\\n            for (const auto&[to, w] : g[v]) {\\n                if (d[v] + w < d[to]) {\\n                    d[to] = d[v] + w;\\n                }\\n            }\\n        }\\n        return (d[dest]==LLONG_MAX?-1:d[dest]); // path not found \\n    }\\n\\n    Graph(int N, const vi(vi(int))& edges) {\\n        n=N;\\n        g.resize(n);\\n        for(const auto&edge:edges){\\n            addEdge(edge);\\n        }\\n    }\\n    \\n    void addEdge(const vi(int)&edge) {\\n        g[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059471,
                "title": "simple-java-solution",
                "content": "# Code\\n```\\n\\tclass Graph {\\n\\t\\tint n;\\n\\t\\tList<List<int[]>> adjacents;\\n\\n\\t\\tpublic Graph(int n, int[][] edges) {\\n\\t\\t\\tthis.n = n;\\n\\t\\t\\tadjacents = new ArrayList<>();\\n\\t\\t\\tfor (int i = 0; i < n; i++)\\n\\t\\t\\t\\tadjacents.add(new ArrayList<>());\\n\\t\\t\\tfor (int[] edge : edges)\\n\\t\\t\\t\\tadjacents.get(edge[0]).add(new int[] { edge[1], edge[2] });\\n\\t\\t}\\n\\n\\t\\tpublic void addEdge(int[] edge) {\\n\\t\\t\\tadjacents.get(edge[0]).add(new int[] { edge[1], edge[2] });\\n\\t\\t}\\n\\n\\t\\tpublic int shortestPath(int node1, int node2) {\\n\\t\\t\\tPriorityQueue<int[]> q = new PriorityQueue<>((a, b) -> a[1] - b[1]);\\n\\t\\t\\tq.add(new int[] { node1, 0 });\\n\\t\\t\\tboolean[] visited = new boolean[n];\\n\\t\\t\\twhile (!q.isEmpty()) {\\n\\t\\t\\t\\tint[] point = q.poll();\\n\\t\\t\\t\\tint u = point[0];\\n\\t\\t\\t\\tint w = point[1];\\n\\t\\t\\t\\tif (visited[u])\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tvisited[u] = true;\\n\\t\\t\\t\\tif (u == node2)\\n\\t\\t\\t\\t\\treturn w;\\n\\t\\t\\t\\tfor (int[] adj : adjacents.get(u)) {\\n\\t\\t\\t\\t\\tif (!visited[adj[0]]) {\\n\\t\\t\\t\\t\\t\\tq.offer(new int[] { adj[0], adj[1] + w });\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\tclass Graph {\\n\\t\\tint n;\\n\\t\\tList<List<int[]>> adjacents;\\n\\n\\t\\tpublic Graph(int n, int[][] edges) {\\n\\t\\t\\tthis.n = n;\\n\\t\\t\\tadjacents = new ArrayList<>();\\n\\t\\t\\tfor (int i = 0; i < n; i++)\\n\\t\\t\\t\\tadjacents.add(new ArrayList<>());\\n\\t\\t\\tfor (int[] edge : edges)\\n\\t\\t\\t\\tadjacents.get(edge[0]).add(new int[] { edge[1], edge[2] });\\n\\t\\t}\\n\\n\\t\\tpublic void addEdge(int[] edge) {\\n\\t\\t\\tadjacents.get(edge[0]).add(new int[] { edge[1], edge[2] });\\n\\t\\t}\\n\\n\\t\\tpublic int shortestPath(int node1, int node2) {\\n\\t\\t\\tPriorityQueue<int[]> q = new PriorityQueue<>((a, b) -> a[1] - b[1]);\\n\\t\\t\\tq.add(new int[] { node1, 0 });\\n\\t\\t\\tboolean[] visited = new boolean[n];\\n\\t\\t\\twhile (!q.isEmpty()) {\\n\\t\\t\\t\\tint[] point = q.poll();\\n\\t\\t\\t\\tint u = point[0];\\n\\t\\t\\t\\tint w = point[1];\\n\\t\\t\\t\\tif (visited[u])\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\tvisited[u] = true;\\n\\t\\t\\t\\tif (u == node2)\\n\\t\\t\\t\\t\\treturn w;\\n\\t\\t\\t\\tfor (int[] adj : adjacents.get(u)) {\\n\\t\\t\\t\\t\\tif (!visited[adj[0]]) {\\n\\t\\t\\t\\t\\t\\tq.offer(new int[] { adj[0], adj[1] + w });\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3948471,
                "title": "bellman-ford-java-algorithm",
                "content": "Solution using Bellman Ford Algorithm. Add a variable flag, which will make sure to break the loop in case there is no change in table between two iterations.\\n```\\nclass Graph {\\n    int n;\\n    ArrayList<int[]> edges;\\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        this.edges = new ArrayList<>();\\n        for(int[] edge: edges) {\\n            this.edges.add(edge);\\n        } \\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        edges.add(edge);\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] table = new int[n];\\n        Arrays.fill(table, Integer.MAX_VALUE);\\n        table[node1] = 0;\\n        for(int i=0;i<n;i++) {\\n            boolean flag = false;\\n            for(int[] edge: edges) {\\n                if(table[edge[0]] == Integer.MAX_VALUE) continue;\\n                if(table[edge[1]] > edge[2] + table[edge[0]]) {\\n                    flag = true;\\n                    table[edge[1]] = edge[2] + table[edge[0]];\\n                }\\n            }\\n            if(flag==false) break;\\n        }\\n        return table[node2] == Integer.MAX_VALUE ? -1 : table[node2];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n    int n;\\n    ArrayList<int[]> edges;\\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        this.edges = new ArrayList<>();\\n        for(int[] edge: edges) {\\n            this.edges.add(edge);\\n        } \\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        edges.add(edge);\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] table = new int[n];\\n        Arrays.fill(table, Integer.MAX_VALUE);\\n        table[node1] = 0;\\n        for(int i=0;i<n;i++) {\\n            boolean flag = false;\\n            for(int[] edge: edges) {\\n                if(table[edge[0]] == Integer.MAX_VALUE) continue;\\n                if(table[edge[1]] > edge[2] + table[edge[0]]) {\\n                    flag = true;\\n                    table[edge[1]] = edge[2] + table[edge[0]];\\n                }\\n            }\\n            if(flag==false) break;\\n        }\\n        return table[node2] == Integer.MAX_VALUE ? -1 : table[node2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3907276,
                "title": "c-solution",
                "content": "\\n\\n# Code\\n```\\ntypedef pair<int,int> pii;\\nclass Graph {\\npublic:\\nvector<vector<pair<int,int>>>adj;\\nint n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        this->n=n;\\n        for (auto it:edges)\\n        {\\n            adj[it[0]].push_back({it[1],it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    void dfs(int node,vector<int>&vis,stack<int>&st)\\n    {\\n        vis[node]=1;\\n        for (auto it: adj[node])\\n        {\\n          if (vis[it.first]==0)\\n          {\\n              dfs(it.first,vis,st);\\n          }\\n        }\\n        st.push(node);\\n    }\\n    int shortestPath(int node1, int node2) \\n    {\\n        stack<int>st;\\n        vector<int>vis(n,0);\\n        // for (int i=0;i<n;i++)\\n        // {\\n        //     if (vis[i]==0)\\n        //     {\\n        //         dfs(i,vis,st);\\n        //     }\\n        // }\\n        vector<int>dist(n,INT_MAX);\\n        dist[node1]=0;\\n        priority_queue<pii,vector<pii>,greater<pii>>pq;\\n         pq.push({0,node1});\\n        // while(!st.empty())\\n        // {\\n        //     int node=st.top();\\n        //     st.pop();\\n        //     if (dist[node]!=INT_MAX)\\n        //     {\\n        //         for (auto it: adj[node])\\n        //         {\\n        //             if (dist[it.first]>dist[node]+it.second)\\n        //             {\\n        //                 dist[it.first]=dist[node]+it.second;\\n        //             }\\n        //         }\\n        //     }\\n        // }\\n\\n        while(!pq.empty())\\n        {\\n            auto temp=pq.top();\\n            int node=temp.second;\\n            pq.pop();\\n            for (auto it: adj[node])\\n            {\\n                if (dist[it.first]>dist[node]+it.second)\\n                {\\n                  dist[it.first]=dist[node]+it.second;\\n                  pq.push({dist[it.first],it.first});\\n                }\\n            }\\n        }\\n        if (dist[node2]==INT_MAX) return -1;\\n        return dist[node2];\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\ntypedef pair<int,int> pii;\\nclass Graph {\\npublic:\\nvector<vector<pair<int,int>>>adj;\\nint n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        this->n=n;\\n        for (auto it:edges)\\n        {\\n            adj[it[0]].push_back({it[1],it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    void dfs(int node,vector<int>&vis,stack<int>&st)\\n    {\\n        vis[node]=1;\\n        for (auto it: adj[node])\\n        {\\n          if (vis[it.first]==0)\\n          {\\n              dfs(it.first,vis,st);\\n          }\\n        }\\n        st.push(node);\\n    }\\n    int shortestPath(int node1, int node2) \\n    {\\n        stack<int>st;\\n        vector<int>vis(n,0);\\n        // for (int i=0;i<n;i++)\\n        // {\\n        //     if (vis[i]==0)\\n        //     {\\n        //         dfs(i,vis,st);\\n        //     }\\n        // }\\n        vector<int>dist(n,INT_MAX);\\n        dist[node1]=0;\\n        priority_queue<pii,vector<pii>,greater<pii>>pq;\\n         pq.push({0,node1});\\n        // while(!st.empty())\\n        // {\\n        //     int node=st.top();\\n        //     st.pop();\\n        //     if (dist[node]!=INT_MAX)\\n        //     {\\n        //         for (auto it: adj[node])\\n        //         {\\n        //             if (dist[it.first]>dist[node]+it.second)\\n        //             {\\n        //                 dist[it.first]=dist[node]+it.second;\\n        //             }\\n        //         }\\n        //     }\\n        // }\\n\\n        while(!pq.empty())\\n        {\\n            auto temp=pq.top();\\n            int node=temp.second;\\n            pq.pop();\\n            for (auto it: adj[node])\\n            {\\n                if (dist[it.first]>dist[node]+it.second)\\n                {\\n                  dist[it.first]=dist[node]+it.second;\\n                  pq.push({dist[it.first],it.first});\\n                }\\n            }\\n        }\\n        if (dist[node2]==INT_MAX) return -1;\\n        return dist[node2];\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905184,
                "title": "floyd-warshall-take-only-distance-no-new-edge-update-needed",
                "content": "# Floyd Warshall || Take only distance no edge update\\n```\\nclass Graph {\\npublic:\\n    int N=0;\\n    vector<vector<long long>> dis;\\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        this->N=n;\\n        std::vector<std::vector<long long>> Dis(100, std::vector<long long>(100, INT_MAX));\\n        dis=Dis;\\n        for(auto x: edges)\\n            dis[x[0]][x[1]]=x[2];\\n\\n        for(int k=0;k<N;k++)\\n        for(int i=0;i<N;i++)   \\n        for(int j=0;j<N;j++)\\n            {if(i==j) dis[i][j]=0;\\n            dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);}\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        for(int i=0;i<N;i++)   \\n        for(int j=0;j<N;j++)\\n            {if(i==j) dis[i][j]=0;\\n            dis[i][j]=min(dis[i][j],dis[i][edge[0]]+edge[2]+dis[edge[1]][j]);}\\n    }\\n    \\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        if (dis[node1][node2]>=INT_MAX)\\n            return -1;\\n        return dis[node1][node2];\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    int N=0;\\n    vector<vector<long long>> dis;\\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        this->N=n;\\n        std::vector<std::vector<long long>> Dis(100, std::vector<long long>(100, INT_MAX));\\n        dis=Dis;\\n        for(auto x: edges)\\n            dis[x[0]][x[1]]=x[2];\\n\\n        for(int k=0;k<N;k++)\\n        for(int i=0;i<N;i++)   \\n        for(int j=0;j<N;j++)\\n            {if(i==j) dis[i][j]=0;\\n            dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]);}\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        for(int i=0;i<N;i++)   \\n        for(int j=0;j<N;j++)\\n            {if(i==j) dis[i][j]=0;\\n            dis[i][j]=min(dis[i][j],dis[i][edge[0]]+edge[2]+dis[edge[1]][j]);}\\n    }\\n    \\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        if (dis[node1][node2]>=INT_MAX)\\n            return -1;\\n        return dis[node1][node2];\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3899300,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n public:\\n  Graph(int n, vector<vector<int>>& edges) {\\n    graph.resize(n);\\n    for (const vector<int>& edge : edges)\\n      addEdge(edge);\\n  }\\n\\n  void addEdge(vector<int> edge) {\\n    const int u = edge[0];\\n    const int v = edge[1];\\n    const int w = edge[2];\\n    graph[u].emplace_back(v, w);\\n  }\\n\\n  int shortestPath(int node1, int node2) {\\n    vector<int> dist(graph.size(), INT_MAX);\\n    using P = pair<int, int>;  // (d, u)\\n    priority_queue<P, vector<P>, greater<>> minHeap;\\n\\n    dist[node1] = 0;\\n    minHeap.emplace(dist[node1], node1);\\n\\n    while (!minHeap.empty()) {\\n      const auto [d, u] = minHeap.top();\\n      minHeap.pop();\\n      if (u == node2)\\n        return d;\\n      for (const auto& [v, w] : graph[u])\\n        if (d + w < dist[v]) {\\n          dist[v] = d + w;\\n          minHeap.emplace(dist[v], v);\\n        }\\n    }\\n\\n    return -1;\\n  }\\n\\n private:\\n  vector<vector<pair<int, int>>> graph;\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\n public:\\n  Graph(int n, vector<vector<int>>& edges) {\\n    graph.resize(n);\\n    for (const vector<int>& edge : edges)\\n      addEdge(edge);\\n  }\\n\\n  void addEdge(vector<int> edge) {\\n    const int u = edge[0];\\n    const int v = edge[1];\\n    const int w = edge[2];\\n    graph[u].emplace_back(v, w);\\n  }\\n\\n  int shortestPath(int node1, int node2) {\\n    vector<int> dist(graph.size(), INT_MAX);\\n    using P = pair<int, int>;  // (d, u)\\n    priority_queue<P, vector<P>, greater<>> minHeap;\\n\\n    dist[node1] = 0;\\n    minHeap.emplace(dist[node1], node1);\\n\\n    while (!minHeap.empty()) {\\n      const auto [d, u] = minHeap.top();\\n      minHeap.pop();\\n      if (u == node2)\\n        return d;\\n      for (const auto& [v, w] : graph[u])\\n        if (d + w < dist[v]) {\\n          dist[v] = d + w;\\n          minHeap.emplace(dist[v], v);\\n        }\\n    }\\n\\n    return -1;\\n  }\\n\\n private:\\n  vector<vector<pair<int, int>>> graph;\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3871366,
                "title": "dijkstra-algorithm-adjacency-matrix-easy-implementation-fastest-solution",
                "content": "\\n# Complexity\\n- Time complexity:O(n*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n*n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    int **grph;\\n    int v;\\n    int dijkstra(int n1,int n2, int **grph){\\n\\n        vector<int> dist(v,1000000000);\\n        dist[n1]=0;\\n        vector<bool> visit(v,false);\\n        for(int i=0;i<v-1;i++){\\n            int u=-1;\\n            for(int k=0;k<v;k++){\\n                if(!visit[k] && (u==-1 || dist[k]<dist[u]))u=k;\\n            }\\n            visit[u]=true;\\n            for(int j=0;j<v;j++){\\n                if(grph[u][j]!=0 && !visit[j]){\\n                   dist[j]=min(dist[j],dist[u]+grph[u][j]);\\n                }\\n            }\\n        }\\n        if(dist[n2]==1000000000)return -1;\\n        return dist[n2];\\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        grph=new int *[n];\\n        for(int i=0;i<n;i++)grph[i]=new int [n];\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<n;j++){\\n                grph[i][j]=0;\\n            }\\n        }\\n        for(auto r: edges){\\n            grph[r[0]][r[1]]=r[2];\\n        }\\n        v=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        grph[edge[0]][edge[1]]=edge[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2,grph);\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```\\n# ****PLEASE UPVOTE****\\n",
                "solutionTags": [
                    "C++",
                    "Graph",
                    "Matrix",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    int **grph;\\n    int v;\\n    int dijkstra(int n1,int n2, int **grph){\\n\\n        vector<int> dist(v,1000000000);\\n        dist[n1]=0;\\n        vector<bool> visit(v,false);\\n        for(int i=0;i<v-1;i++){\\n            int u=-1;\\n            for(int k=0;k<v;k++){\\n                if(!visit[k] && (u==-1 || dist[k]<dist[u]))u=k;\\n            }\\n            visit[u]=true;\\n            for(int j=0;j<v;j++){\\n                if(grph[u][j]!=0 && !visit[j]){\\n                   dist[j]=min(dist[j],dist[u]+grph[u][j]);\\n                }\\n            }\\n        }\\n        if(dist[n2]==1000000000)return -1;\\n        return dist[n2];\\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        grph=new int *[n];\\n        for(int i=0;i<n;i++)grph[i]=new int [n];\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<n;j++){\\n                grph[i][j]=0;\\n            }\\n        }\\n        for(auto r: edges){\\n            grph[r[0]][r[1]]=r[2];\\n        }\\n        v=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        grph[edge[0]][edge[1]]=edge[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2,grph);\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3832291,
                "title": "beats-98-comments-explanation-of-each-function-clean-code",
                "content": "\\n\\n# Approach\\nNeed of all the funtion is described in comment.\\n\\n\\n\\n# Code\\n```\\nclass Graph {\\n\\n    class Pair{ //custom data type\\n        int  node,wt;\\n        Pair(  int node, int wt){\\n            this.node=node;\\n            this.wt=wt;\\n        }\\n    }\\n\\n\\n    int n;\\n    ArrayList<ArrayList<Pair>> adj;\\n\\n    public Graph(int n, int[][] edges) {    //Need: fill global variables n and adj to use it in another funtion\\n        this.n=n;\\n        adj=new ArrayList();\\n\\n        for(int i=0; i<n; i++)\\n           adj.add(new ArrayList());\\n\\n        for(int i=0; i<edges.length; i++)\\n           adj.get(edges[i][0]).add(new Pair(edges[i][1],edges[i][2]));\\n       \\n    }\\n    \\n    public void addEdge(int[] edge) {   // Need: This funtion is used to add edge between two node\\n          adj.get(edge[0]).add(new Pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) { // use dijkstra\\'s algo to find shortest route b/w src and dest. \\n    // You are given with src , dest, adj, No. of nodes (n) use this vaiables to find shortest path.\\n        int[] dist=new int[n];\\n        Arrays.fill(dist,Integer.MAX_VALUE);\\n        dist[node1]=0;\\n\\n        PriorityQueue<Pair> q=new PriorityQueue<>((a ,b)-> a.wt-b.wt); \\n        q.add(new Pair(node1,0));\\n\\n        while(! q.isEmpty()){\\n            Pair curr=q.poll();\\n            int node=curr.node;\\n            int wt=curr.wt;\\n\\n            if(node==node2)\\n            return wt;\\n\\n            for(Pair t: adj.get(node)){\\n                int adjNode=t.node;\\n                int adjwt=t.wt;\\n\\n                if(dist[adjNode]>wt+adjwt){\\n                    dist[adjNode]=wt+adjwt;\\n                    q.add(new Pair(adjNode,adjwt+wt));\\n                }\\n            }\\n        }\\n    return -1;\\n    }\\n}\\n\\n```\\n\\n# Upvote button is below \\uD83E\\uDD24\\n\\n",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\n\\n    class Pair{ //custom data type\\n        int  node,wt;\\n        Pair(  int node, int wt){\\n            this.node=node;\\n            this.wt=wt;\\n        }\\n    }\\n\\n\\n    int n;\\n    ArrayList<ArrayList<Pair>> adj;\\n\\n    public Graph(int n, int[][] edges) {    //Need: fill global variables n and adj to use it in another funtion\\n        this.n=n;\\n        adj=new ArrayList();\\n\\n        for(int i=0; i<n; i++)\\n           adj.add(new ArrayList());\\n\\n        for(int i=0; i<edges.length; i++)\\n           adj.get(edges[i][0]).add(new Pair(edges[i][1],edges[i][2]));\\n       \\n    }\\n    \\n    public void addEdge(int[] edge) {   // Need: This funtion is used to add edge between two node\\n          adj.get(edge[0]).add(new Pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) { // use dijkstra\\'s algo to find shortest route b/w src and dest. \\n    // You are given with src , dest, adj, No. of nodes (n) use this vaiables to find shortest path.\\n        int[] dist=new int[n];\\n        Arrays.fill(dist,Integer.MAX_VALUE);\\n        dist[node1]=0;\\n\\n        PriorityQueue<Pair> q=new PriorityQueue<>((a ,b)-> a.wt-b.wt); \\n        q.add(new Pair(node1,0));\\n\\n        while(! q.isEmpty()){\\n            Pair curr=q.poll();\\n            int node=curr.node;\\n            int wt=curr.wt;\\n\\n            if(node==node2)\\n            return wt;\\n\\n            for(Pair t: adj.get(node)){\\n                int adjNode=t.node;\\n                int adjwt=t.wt;\\n\\n                if(dist[adjNode]>wt+adjwt){\\n                    dist[adjNode]=wt+adjwt;\\n                    q.add(new Pair(adjNode,adjwt+wt));\\n                }\\n            }\\n        }\\n    return -1;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3784882,
                "title": "core-dijkstra-algorithm-implementation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.adj_list = [[] for i in range(n)]\\n        for edge in edges:\\n            self.addEdge(edge)\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        start,end,cost  = edge\\n        self.adj_list[start].append((end,cost))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        dist = [float(\\'inf\\')]*self.n\\n        dist[node1] = 0\\n        heap = [(0,node1)]\\n        while heap:\\n            cost,node = heapq.heappop(heap)\\n            if cost>dist[node]:\\n                continue\\n            if node==node2:\\n                return dist[node2]\\n            for neighbour,weight in self.adj_list[node]:\\n                total_dist = cost+weight\\n                if total_dist<dist[neighbour]:\\n                    dist[neighbour] = total_dist\\n                    heapq.heappush(heap,(total_dist,neighbour))\\n        return dist[node2] if dist[node2]!=float(\\'inf\\') else -1\\n            \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.adj_list = [[] for i in range(n)]\\n        for edge in edges:\\n            self.addEdge(edge)\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        start,end,cost  = edge\\n        self.adj_list[start].append((end,cost))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        dist = [float(\\'inf\\')]*self.n\\n        dist[node1] = 0\\n        heap = [(0,node1)]\\n        while heap:\\n            cost,node = heapq.heappop(heap)\\n            if cost>dist[node]:\\n                continue\\n            if node==node2:\\n                return dist[node2]\\n            for neighbour,weight in self.adj_list[node]:\\n                total_dist = cost+weight\\n                if total_dist<dist[neighbour]:\\n                    dist[neighbour] = total_dist\\n                    heapq.heappush(heap,(total_dist,neighbour))\\n        return dist[node2] if dist[node2]!=float(\\'inf\\') else -1\\n            \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3755682,
                "title": "c-dijkstrak-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity is o(V+E logV)\\n\\n- Space complexity\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\nvector<vector<pair<int,int>>>adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n       adj.resize(n) ;\\n       for(auto &e:edges)\\n       {\\n           adj[e[0]].push_back({e[1],e[2]});\\n       }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        int n=adj.size();\\n        vector<int>dis(n,INT_MAX);\\n        dis[node1]=0;\\n        pq.push({0,node1});\\n        while(!pq.empty()){\\n            auto it=pq.top();\\n            int d=it.first;\\n            int node=it.second;\\n            pq.pop();\\n            if(node==node2) return d;\\n            for(auto j:adj[node])\\n            {\\n                int adjn=j.first;\\n                int e=j.second;\\n                if(dis[adjn]>d+e)\\n                {\\n                    dis[adjn]=d+e;\\n                    pq.push({dis[adjn],adjn});\\n                }\\n            }\\n        }\\n        return -1;\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\nvector<vector<pair<int,int>>>adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n       adj.resize(n) ;\\n       for(auto &e:edges)\\n       {\\n           adj[e[0]].push_back({e[1],e[2]});\\n       }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        int n=adj.size();\\n        vector<int>dis(n,INT_MAX);\\n        dis[node1]=0;\\n        pq.push({0,node1});\\n        while(!pq.empty()){\\n            auto it=pq.top();\\n            int d=it.first;\\n            int node=it.second;\\n            pq.pop();\\n            if(node==node2) return d;\\n            for(auto j:adj[node])\\n            {\\n                int adjn=j.first;\\n                int e=j.second;\\n                if(dis[adjn]>d+e)\\n                {\\n                    dis[adjn]=d+e;\\n                    pq.push({dis[adjn],adjn});\\n                }\\n            }\\n        }\\n        return -1;\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3729220,
                "title": "simple-dijsktra",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for (auto &e : edges)\\n        {\\n            adj[e[0]].push_back({e[1],e[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        \\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\npriority_queue<pair<int,int>, vector<pair<int,int>>, \\ngreater<pair<int,int>> > pq;\\nint n = adj.size();\\nvector<int> dis(n,INT_MAX);\\ndis[node1] = 0;\\npq.push({0,node1});\\n\\nwhile(!pq.empty())\\n{\\n    auto it = pq.top();\\n    int d = it.first;\\n    int node = it.second;\\n    pq.pop();\\n    if(node == node2) return d;\\n    for (auto j : adj[node])\\n    {\\n        int adjn = j.first;\\n        int e = j.second;\\n        if(dis[adjn] > d + e)\\n        {\\n            dis[adjn] =  d + e;\\n            pq.push({dis[adjn],adjn});\\n        }\\n    }\\n}\\n\\n    return -1;\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for (auto &e : edges)\\n        {\\n            adj[e[0]].push_back({e[1],e[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        \\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\npriority_queue<pair<int,int>, vector<pair<int,int>>, \\ngreater<pair<int,int>> > pq;\\nint n = adj.size();\\nvector<int> dis(n,INT_MAX);\\ndis[node1] = 0;\\npq.push({0,node1});\\n\\nwhile(!pq.empty())\\n{\\n    auto it = pq.top();\\n    int d = it.first;\\n    int node = it.second;\\n    pq.pop();\\n    if(node == node2) return d;\\n    for (auto j : adj[node])\\n    {\\n        int adjn = j.first;\\n        int e = j.second;\\n        if(dis[adjn] > d + e)\\n        {\\n            dis[adjn] =  d + e;\\n            pq.push({dis[adjn],adjn});\\n        }\\n    }\\n}\\n\\n    return -1;\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3647943,
                "title": "simple-dijkstra-s-implementation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis Problem is a Straight forward Implementation of a Naive Dijkstra Algorithm.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimply define & build a Graph for calculating the Shortest Path between any 2 Nodes. Keep adding the Edges when necessary.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O((V + E) log V), where V is the number of vertices and E is the number of edges.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(V + E)\\n# Code\\n```\\nclass Graph {\\n\\n    List<int[]>[] graph;\\n    public Graph(int n, int[][] edges) {\\n        graph = new ArrayList[n];\\n\\n        for(int i = 0; i < n; i++)\\n            graph[i] = new ArrayList<int[]>();\\n\\n        for(int[] edge: edges)\\n        {\\n            int src = edge[0], dest = edge[1], weight = edge[2];\\n            graph[src].add(new int[]{dest, weight});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int src = edge[0], dest = edge[1], weight = edge[2];\\n        graph[src].add(new int[]{dest, weight});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[1] - b[1]);\\n        int[] minCost = new int[graph.length];\\n        boolean[] visited = new boolean[graph.length];\\n        Arrays.fill(minCost, Integer.MAX_VALUE);\\n\\n        pq.offer(new int[]{node1, 0});\\n        minCost[node1] = 0;\\n\\n        while(!pq.isEmpty())\\n        {\\n            int[] current = pq.poll();\\n            int src = current[0];\\n            int curCost = current[1];\\n\\n            if(src == node2)\\n                return curCost;\\n            \\n            if(visited[src]) \\n                continue;\\n            \\n            visited[src] = true;\\n            \\n            for(int[] neighbourData: graph[src])\\n            {\\n                int neighbour = neighbourData[0], time = neighbourData[1];\\n\\n                if(curCost + time < minCost[neighbour])\\n                {\\n                    minCost[neighbour] = curCost + time;\\n                    pq.offer(new int[]{neighbour, minCost[neighbour]});\\n                }\\n            }\\n        }\\n\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\n\\n    List<int[]>[] graph;\\n    public Graph(int n, int[][] edges) {\\n        graph = new ArrayList[n];\\n\\n        for(int i = 0; i < n; i++)\\n            graph[i] = new ArrayList<int[]>();\\n\\n        for(int[] edge: edges)\\n        {\\n            int src = edge[0], dest = edge[1], weight = edge[2];\\n            graph[src].add(new int[]{dest, weight});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int src = edge[0], dest = edge[1], weight = edge[2];\\n        graph[src].add(new int[]{dest, weight});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[1] - b[1]);\\n        int[] minCost = new int[graph.length];\\n        boolean[] visited = new boolean[graph.length];\\n        Arrays.fill(minCost, Integer.MAX_VALUE);\\n\\n        pq.offer(new int[]{node1, 0});\\n        minCost[node1] = 0;\\n\\n        while(!pq.isEmpty())\\n        {\\n            int[] current = pq.poll();\\n            int src = current[0];\\n            int curCost = current[1];\\n\\n            if(src == node2)\\n                return curCost;\\n            \\n            if(visited[src]) \\n                continue;\\n            \\n            visited[src] = true;\\n            \\n            for(int[] neighbourData: graph[src])\\n            {\\n                int neighbour = neighbourData[0], time = neighbourData[1];\\n\\n                if(curCost + time < minCost[neighbour])\\n                {\\n                    minCost[neighbour] = curCost + time;\\n                    pq.offer(new int[]{neighbour, minCost[neighbour]});\\n                }\\n            }\\n        }\\n\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3642525,
                "title": "java-dijkstra-s-shortest-path",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\n\\n    int[][] adj;\\n    int[] distance;\\n\\n    public Graph(int n, int[][] edges) {\\n        adj = new int[n][n];\\n        distance = new int[n];\\n        for (int[] arr : adj) {\\n            Arrays.fill(arr, -1);\\n        }\\n        Arrays.fill(distance, Integer.MAX_VALUE);\\n\\n        for (int[] edge : edges) {\\n            int x = edge[0];\\n            int y = edge[1];\\n            int w = edge[2];\\n\\n            adj[x][y] = w;\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int x = edge[0];\\n        int y = edge[1];\\n        int w = edge[2];\\n\\n        adj[x][y] = w;\\n\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        solve(distance, adj, node1, node2);\\n        return distance[node2] == Integer.MAX_VALUE ? -1 : distance[node2];\\n    }\\n\\n    void solve(int[] dist, int[][] adj, int s1, int d) {\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[s1] = 0;\\n        Queue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[1], b[1]));\\n        Set<Integer> set = new HashSet<>();\\n        pq.add(new int[]{s1, 0});\\n\\n        while (!pq.isEmpty()) {\\n            int[] node = pq.poll();\\n            int s = node[0];\\n            if (set.contains(s))\\n                continue;\\n            \\n            set.add(s);\\n            for (int i = 0; i < adj[s].length; i++) {\\n                if (adj[s][i] != -1 && i != s) {\\n                    int w = adj[s][i];\\n                        if (distance[s] + w < distance[i]) {\\n                            distance[i] = distance[s] + w;\\n                            pq.add(new int[]{i, distance[i]});\\n                        }\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n\\n    int[][] adj;\\n    int[] distance;\\n\\n    public Graph(int n, int[][] edges) {\\n        adj = new int[n][n];\\n        distance = new int[n];\\n        for (int[] arr : adj) {\\n            Arrays.fill(arr, -1);\\n        }\\n        Arrays.fill(distance, Integer.MAX_VALUE);\\n\\n        for (int[] edge : edges) {\\n            int x = edge[0];\\n            int y = edge[1];\\n            int w = edge[2];\\n\\n            adj[x][y] = w;\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int x = edge[0];\\n        int y = edge[1];\\n        int w = edge[2];\\n\\n        adj[x][y] = w;\\n\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        solve(distance, adj, node1, node2);\\n        return distance[node2] == Integer.MAX_VALUE ? -1 : distance[node2];\\n    }\\n\\n    void solve(int[] dist, int[][] adj, int s1, int d) {\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[s1] = 0;\\n        Queue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[1], b[1]));\\n        Set<Integer> set = new HashSet<>();\\n        pq.add(new int[]{s1, 0});\\n\\n        while (!pq.isEmpty()) {\\n            int[] node = pq.poll();\\n            int s = node[0];\\n            if (set.contains(s))\\n                continue;\\n            \\n            set.add(s);\\n            for (int i = 0; i < adj[s].length; i++) {\\n                if (adj[s][i] != -1 && i != s) {\\n                    int w = adj[s][i];\\n                        if (distance[s] + w < distance[i]) {\\n                            distance[i] = distance[s] + w;\\n                            pq.add(new int[]{i, distance[i]});\\n                        }\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3620294,
                "title": "dijkastra",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMaintain a weighted graph and carry out dijkastra for each shortest path query.\\n\\n# Complexity\\n- Time complexity: $$O(m\\\\log n)$$, where $n$ and $m$ are the vertex number and edge number respectively.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n+m)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n    int n;\\n    vector<vector<vector<int>>> e;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n=n;\\n        e.resize(n);\\n        for(auto&v:edges)\\n            e[v[0]].push_back({v[1],v[2]});\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        e[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int s, int t) {\\n        vector<int> d(n,INT_MAX);\\n        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;\\n        pq.push({0,s});\\n        d[s]=0;\\n        while(!pq.empty()){\\n            int dis=pq.top()[0],u=pq.top()[1];\\n            pq.pop();\\n            if(u==t) return d[u];\\n            if(dis>d[u]) continue;\\n            for(auto&ev:e[u]){\\n                int nd=dis+ev[1],v=ev[0];\\n                if(nd>=d[v]) continue;\\n                d[v]=nd;\\n                pq.push({nd, v});\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\n    int n;\\n    vector<vector<vector<int>>> e;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n=n;\\n        e.resize(n);\\n        for(auto&v:edges)\\n            e[v[0]].push_back({v[1],v[2]});\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        e[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int s, int t) {\\n        vector<int> d(n,INT_MAX);\\n        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;\\n        pq.push({0,s});\\n        d[s]=0;\\n        while(!pq.empty()){\\n            int dis=pq.top()[0],u=pq.top()[1];\\n            pq.pop();\\n            if(u==t) return d[u];\\n            if(dis>d[u]) continue;\\n            for(auto&ev:e[u]){\\n                int nd=dis+ev[1],v=ev[0];\\n                if(nd>=d[v]) continue;\\n                d[v]=nd;\\n                pq.push({nd, v});\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3545696,
                "title": "dijkstra-java",
                "content": "# Code\\n```\\nclass Graph {\\n    List<int[]>[] l;\\n    public Graph(int n, int[][] edges) {\\n        l = new ArrayList[n];\\n        for (int i = 0; i < n; i++) {\\n            l[i] = new ArrayList<>();\\n        }\\n        for (int[] e: edges) {\\n            l[e[0]].add(new int[]{e[1], e[2]});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        l[edge[0]].add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] res = new int[l.length];\\n        PriorityQueue<int[]> q = new PriorityQueue<>((o1, o2) -> o1[1] - o2[1]);\\n        q.add(new int[]{node1, 0});\\n        while (!q.isEmpty()) {\\n            int[] k = q.poll();\\n            if (k[0] == node2) {\\n                return k[1];\\n            }\\n            if (res[k[0]] != 0) {\\n                continue;\\n            }\\n            res[k[0]] = k[1];\\n            for (int[] z: l[k[0]]) {\\n                if (res[z[0]] != 0) {\\n                    continue;\\n                }\\n                q.offer(new int[]{z[0], k[1] + z[1]});   \\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n    List<int[]>[] l;\\n    public Graph(int n, int[][] edges) {\\n        l = new ArrayList[n];\\n        for (int i = 0; i < n; i++) {\\n            l[i] = new ArrayList<>();\\n        }\\n        for (int[] e: edges) {\\n            l[e[0]].add(new int[]{e[1], e[2]});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        l[edge[0]].add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] res = new int[l.length];\\n        PriorityQueue<int[]> q = new PriorityQueue<>((o1, o2) -> o1[1] - o2[1]);\\n        q.add(new int[]{node1, 0});\\n        while (!q.isEmpty()) {\\n            int[] k = q.poll();\\n            if (k[0] == node2) {\\n                return k[1];\\n            }\\n            if (res[k[0]] != 0) {\\n                continue;\\n            }\\n            res[k[0]] = k[1];\\n            for (int[] z: l[k[0]]) {\\n                if (res[z[0]] != 0) {\\n                    continue;\\n                }\\n                q.offer(new int[]{z[0], k[1] + z[1]});   \\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3542563,
                "title": "dijkstra-algorithm-java-solution",
                "content": "# Code\\n```\\nclass Graph {\\n    class pair{\\n        int vertex;\\n        int weight;\\n        public pair(int vertex,int weight){\\n            this.vertex=vertex;\\n            this.weight=weight;\\n        }\\n    }\\n    int n;\\n    ArrayList<ArrayList<pair>> adj;\\n    public Graph(int n, int[][] edges) {\\n        this.n=n;\\n        this.adj = new ArrayList<>();\\n        for(int i=0;i<=n;i++) adj.add(new ArrayList<>());\\n        for(int i=0;i<edges.length;i++){\\n            adj.get(edges[i][0]).add(new pair(edges[i][1],edges[i][2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] dist = new int[n+1];\\n        Arrays.fill(dist,Integer.MAX_VALUE);\\n        PriorityQueue<pair> pq = new PriorityQueue<>((x,y) -> x.weight - y.weight);\\n        dist[node1] = 0;\\n        pq.offer(new pair(node1,0));\\n        while(!pq.isEmpty()){\\n            int vertex = pq.peek().vertex;\\n            int weight = pq.peek().weight;\\n            pq.poll();\\n            if(vertex==node2) return weight;\\n            for(pair it:adj.get(vertex)){\\n                if(dist[it.vertex]>weight+it.weight){\\n                    dist[it.vertex] = weight+it.weight;\\n                    pq.offer(new pair(it.vertex,dist[it.vertex]));\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Design",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\n    class pair{\\n        int vertex;\\n        int weight;\\n        public pair(int vertex,int weight){\\n            this.vertex=vertex;\\n            this.weight=weight;\\n        }\\n    }\\n    int n;\\n    ArrayList<ArrayList<pair>> adj;\\n    public Graph(int n, int[][] edges) {\\n        this.n=n;\\n        this.adj = new ArrayList<>();\\n        for(int i=0;i<=n;i++) adj.add(new ArrayList<>());\\n        for(int i=0;i<edges.length;i++){\\n            adj.get(edges[i][0]).add(new pair(edges[i][1],edges[i][2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] dist = new int[n+1];\\n        Arrays.fill(dist,Integer.MAX_VALUE);\\n        PriorityQueue<pair> pq = new PriorityQueue<>((x,y) -> x.weight - y.weight);\\n        dist[node1] = 0;\\n        pq.offer(new pair(node1,0));\\n        while(!pq.isEmpty()){\\n            int vertex = pq.peek().vertex;\\n            int weight = pq.peek().weight;\\n            pq.poll();\\n            if(vertex==node2) return weight;\\n            for(pair it:adj.get(vertex)){\\n                if(dist[it.vertex]>weight+it.weight){\\n                    dist[it.vertex] = weight+it.weight;\\n                    pq.offer(new pair(it.vertex,dist[it.vertex]));\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3539369,
                "title": "c-bfs-dijkstra-algorithm-graphs-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    unordered_map<int, vector<pair<int, int>>>adj;\\n    int N;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        N=n;\\n        for(auto it: edges){\\n            adj[it[0]].push_back({it[1], it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int>v(N+1, 1e9);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;\\n        q.push({0, node1});\\n        v[node1]=0;\\n        while(!q.empty()){\\n            int ind=q.top().second, wt=q.top().first;\\n            q.pop();\\n            for(auto it: adj[ind]){\\n                if(v[it.first]>wt+it.second){\\n                    v[it.first]=wt+it.second;\\n                    q.push({v[it.first], it.first});\\n                }\\n            }\\n        }\\n        if(v[node2]==1e9){return -1;}\\n        return v[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Graph",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    unordered_map<int, vector<pair<int, int>>>adj;\\n    int N;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        N=n;\\n        for(auto it: edges){\\n            adj[it[0]].push_back({it[1], it[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int>v(N+1, 1e9);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;\\n        q.push({0, node1});\\n        v[node1]=0;\\n        while(!q.empty()){\\n            int ind=q.top().second, wt=q.top().first;\\n            q.pop();\\n            for(auto it: adj[ind]){\\n                if(v[it.first]>wt+it.second){\\n                    v[it.first]=wt+it.second;\\n                    q.push({v[it.first], it.first});\\n                }\\n            }\\n        }\\n        if(v[node2]==1e9){return -1;}\\n        return v[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3505797,
                "title": "simple-more-efficient-most-optimized-javascript-solution",
                "content": "```\\nPlease Up-Vote , If This Helps You !!!\\n```\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStore all the edges in hash map.\\n\\naddEdge - add one more node to edge.\\nshortestPath - implement optimal path finding using Heap. On each step go to next node with min total path. For this node add all reachable nodes from this node to the MinHeap. Priority will be cost to get to particular node.\\n\\n# Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n# Code\\n```\\nvar Graph = function(n, edges) {\\n    this.map = new Map()\\n    let map = this.map;\\n    for(let i = 0; i < edges.length; i++){\\n        let edge = edges[i]\\n        let from = edge[0]\\n        let to = edge[1]\\n        let cost = edge[2]\\n        if(!map.has(from)){\\n            map.set(from, new Set())\\n        }\\n        \\n        map.get(from).add({to, cost})\\n    }\\n};\\n\\nGraph.prototype.addEdge = function(edge) {\\n    let map = this.map;\\n     let from = edge[0]\\n     let to = edge[1]\\n     let cost = edge[2]\\n     if(!map.has(from)){\\n        map.set(from, new Set())\\n     }\\n        \\n     map.get(from).add({to, cost})\\n};\\n\\nGraph.prototype.shortestPath = function(node1, node2) {\\n    \\n    const heap = new MinPriorityQueue()\\n    heap.enqueue({node: node1, cost: 0}, 0)\\n    let visited = new Set()\\n    \\n    while(heap.size() > 0){\\n        const top = heap.dequeue().element;\\n        \\n        if(visited.has(top.node)){\\n            continue;\\n        }\\n        visited.add(top.node)\\n        if(top.node === node2){\\n            return top.cost;\\n        }\\n        let next = this.map.get(top.node)\\n        if(next){\\n            for (let n of next){\\n                heap.enqueue({node: n.to, cost: top.cost + n.cost}, top.cost + n.cost)\\n            }\\n        }\\n    }\\n    return -1  \\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Graph",
                    "Design",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nPlease Up-Vote , If This Helps You !!!\\n```\n```\\nvar Graph = function(n, edges) {\\n    this.map = new Map()\\n    let map = this.map;\\n    for(let i = 0; i < edges.length; i++){\\n        let edge = edges[i]\\n        let from = edge[0]\\n        let to = edge[1]\\n        let cost = edge[2]\\n        if(!map.has(from)){\\n            map.set(from, new Set())\\n        }\\n        \\n        map.get(from).add({to, cost})\\n    }\\n};\\n\\nGraph.prototype.addEdge = function(edge) {\\n    let map = this.map;\\n     let from = edge[0]\\n     let to = edge[1]\\n     let cost = edge[2]\\n     if(!map.has(from)){\\n        map.set(from, new Set())\\n     }\\n        \\n     map.get(from).add({to, cost})\\n};\\n\\nGraph.prototype.shortestPath = function(node1, node2) {\\n    \\n    const heap = new MinPriorityQueue()\\n    heap.enqueue({node: node1, cost: 0}, 0)\\n    let visited = new Set()\\n    \\n    while(heap.size() > 0){\\n        const top = heap.dequeue().element;\\n        \\n        if(visited.has(top.node)){\\n            continue;\\n        }\\n        visited.add(top.node)\\n        if(top.node === node2){\\n            return top.cost;\\n        }\\n        let next = this.map.get(top.node)\\n        if(next){\\n            for (let n of next){\\n                heap.enqueue({node: n.to, cost: top.cost + n.cost}, top.cost + n.cost)\\n            }\\n        }\\n    }\\n    return -1  \\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3502182,
                "title": "kotlin-dijkstra",
                "content": "# Approach\\n\\nSince we know that:\\n\\n`1 <= n <= 100`\\n`At most 100 calls will be made for addEdge. `\\n`At most 100 calls will be made for shortestPath`\\n\\nI choose to not precompute all the shortest paths from the beginning. I compute each shortest path from `node1` to `node2` on each call of `shortestPath(node1, node2)`. But I build the graph with adjency list on `init` and update it on `addEdge(edge)`\\n\\nThis solution I used Djikstra\\'s algorithm, it\\'s pretty straight forward to use for this problem. The code is self-explanatory\\n\\n\\n - **Time complexity:** building `Graph` class is $$O(E^2) \\\\approx O(n^2)$$ and `shortestPath()` is $$O(n^2)$$\\n\\n - **Space complexity:** $$O(E^2) \\\\approx O(N^2)$$ since we can have n * n edges as per the constraints, and we store that in our adjecency list `adj`\\n# Code\\n```\\nclass Graph(n: Int, edges: Array<IntArray>) {\\n\\n    val adj = HashMap<Int, ArrayList<Pair<Int, Int>>>().apply {\\n        for (i in 0 until n)\\n            this[i] = ArrayList<Pair<Int, Int>>()\\n\\n        for ((u, v, cost) in edges) {\\n            this[u] = getOrDefault(u, ArrayList<Pair<Int, Int>>()).apply { this.add(v to cost) }\\n        }\\n    }\\n\\n    fun addEdge(edge: IntArray) {\\n        val (u, v, cost) = edge\\n        adj[u] = adj.getOrDefault(u, ArrayList<Pair<Int, Int>>()).apply { this.add(v to cost) }\\n    }\\n\\n    fun shortestPath(node1: Int, node2: Int): Int {\\n        val minHeap = PriorityQueue<Pair<Int, Int>> {a, b -> a.second - b.second }\\n        val distance = IntArray(adj.size) { Integer.MAX_VALUE }\\n\\n        minHeap.add(node1 to 0)\\n        distance[node1] = 0\\n\\n        while (minHeap.isNotEmpty()) {\\n            val (node, cost) = minHeap.poll()\\n\\n            if (node == node2) return cost\\n            if (cost > distance[node]) continue\\n\\n            adj[node]?.let {\\n                for ((next, nextCost) in adj[node]!!) {\\n                    if (cost + nextCost < distance[next]) {\\n                        distance[next] = cost + nextCost\\n                        minHeap.add(next to cost + nextCost)\\n                    }\\n                }\\n            }\\n        }\\n\\n        return -1\\n    }\\n\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * var obj = Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph(n: Int, edges: Array<IntArray>) {\\n\\n    val adj = HashMap<Int, ArrayList<Pair<Int, Int>>>().apply {\\n        for (i in 0 until n)\\n            this[i] = ArrayList<Pair<Int, Int>>()\\n\\n        for ((u, v, cost) in edges) {\\n            this[u] = getOrDefault(u, ArrayList<Pair<Int, Int>>()).apply { this.add(v to cost) }\\n        }\\n    }\\n\\n    fun addEdge(edge: IntArray) {\\n        val (u, v, cost) = edge\\n        adj[u] = adj.getOrDefault(u, ArrayList<Pair<Int, Int>>()).apply { this.add(v to cost) }\\n    }\\n\\n    fun shortestPath(node1: Int, node2: Int): Int {\\n        val minHeap = PriorityQueue<Pair<Int, Int>> {a, b -> a.second - b.second }\\n        val distance = IntArray(adj.size) { Integer.MAX_VALUE }\\n\\n        minHeap.add(node1 to 0)\\n        distance[node1] = 0\\n\\n        while (minHeap.isNotEmpty()) {\\n            val (node, cost) = minHeap.poll()\\n\\n            if (node == node2) return cost\\n            if (cost > distance[node]) continue\\n\\n            adj[node]?.let {\\n                for ((next, nextCost) in adj[node]!!) {\\n                    if (cost + nextCost < distance[next]) {\\n                        distance[next] = cost + nextCost\\n                        minHeap.add(next to cost + nextCost)\\n                    }\\n                }\\n            }\\n        }\\n\\n        return -1\\n    }\\n\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * var obj = Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3496247,
                "title": "java-javascript-c-solution",
                "content": "**Java**\\n```\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.PriorityQueue;\\n\\npublic class Graph {\\n\\n    private static final int NO_PATH_EXISTS = -1;\\n\\n    private record Node(int ID, int costOfEdge) {}\\n    private record Step(int ID, int costFromStart) {}\\n\\n    private final List<Node>[] graph;\\n    private final int totalNodes;\\n\\n    public Graph(int totalNodes, int[][] edges) {\\n        this.totalNodes = totalNodes;\\n        graph = new List[totalNodes];\\n        for (int i = 0; i < totalNodes; ++i) {\\n            graph[i] = new ArrayList<>();\\n        }\\n\\n        for (int[] edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            graph[from].add(new Node(to, cost));\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        graph[from].add(new Node(to, cost));\\n    }\\n\\n    public int shortestPath(int start, int goal) {\\n        int[] distanceFromStart = new int[this.totalNodes];\\n        Arrays.fill(distanceFromStart, Integer.MAX_VALUE);\\n        distanceFromStart[start] = 0;\\n\\n        PriorityQueue<Step> minHeap = new PriorityQueue<>((x, y) -> x.costFromStart - y.costFromStart);\\n        minHeap.add(new Step(start, 0));\\n\\n        while (!minHeap.isEmpty()) {\\n\\n            Step current = minHeap.poll();\\n            if (current.ID == goal) {\\n                break;\\n            }\\n\\n            List<Node> neighbours = graph[current.ID];\\n            for (Node next : neighbours) {\\n                if (distanceFromStart[next.ID] > current.costFromStart + next.costOfEdge) {\\n                    distanceFromStart[next.ID] = current.costFromStart + next.costOfEdge;\\n                    minHeap.add(new Step(next.ID, distanceFromStart[next.ID]));\\n                }\\n            }\\n        }\\n\\n        return distanceFromStart[goal] != Integer.MAX_VALUE ? distanceFromStart[goal] : NO_PATH_EXISTS;\\n    }\\n}\\n```\\n**JavaScript**\\n```\\nclass Graph {\\n\\n    static NO_PATH_EXISTS = -1;\\n\\n    /**\\n     * @param {number} totalNodes\\n     * @param {number[][]} edges\\n     */\\n    constructor(totalNodes, edges) {\\n        this.graph = new Array(totalNodes);//Array<Node>\\n        this.totalNodes = totalNodes;\\n        for (let i = 0; i < totalNodes; ++i) {\\n            this.graph[i] = new Array();\\n        }\\n\\n        for (let [from, to, cost] of edges) {\\n            this.graph[from].push(new Node(to, cost));\\n        }\\n    }\\n\\n    /** \\n     * @param {number[]} edge\\n     * @return {void}\\n     */\\n    addEdge(edge) {\\n        let from = edge[0];\\n        let to = edge[1];\\n        let cost = edge[2];\\n        this.graph[from].push(new Node(to, cost));\\n    }\\n\\n    /** \\n     * @param {number} start \\n     * @param {number} goal\\n     * @return {number}\\n     */\\n    shortestPath(start, goal) {\\n        const distanceFromStart = new Array(this.totalNodes).fill(Number.MAX_SAFE_INTEGER);\\n        distanceFromStart[start] = 0;\\n\\n        //const {MinPriorityQueue} = require(\\'@datastructures-js/priority-queue\\');\\n        //MinPriorityQueue<Step>\\n        const minHeap = new MinPriorityQueue({compare: (x, y) => x.costFromStart - y.costFromStart});\\n        minHeap.enqueue(new Step(start, 0));\\n\\n        while (!minHeap.isEmpty()) {\\n\\n            let current = minHeap.dequeue();\\n            if (current.ID === goal) {\\n                break;\\n            }\\n\\n            const neighbours = this.graph[current.ID];\\n            for (let next of neighbours) {\\n                if (distanceFromStart[next.ID] > current.costFromStart + next.costOfEdge) {\\n                    distanceFromStart[next.ID] = current.costFromStart + next.costOfEdge;\\n                    minHeap.enqueue(new Step(next.ID, distanceFromStart[next.ID]));\\n                }\\n            }\\n        }\\n\\n        return distanceFromStart[goal] !== Number.MAX_SAFE_INTEGER ? distanceFromStart[goal] : Graph.NO_PATH_EXISTS;\\n    }\\n}\\n\\n/** \\n * @param {number} ID \\n * @param {number} costOfEdge\\n */\\nfunction Node(ID, costOfEdge) {\\n    this.ID = ID;\\n    this.costOfEdge = costOfEdge;\\n}\\n\\n/** \\n * @param {number} ID \\n * @param {number} costFromStart\\n */\\nfunction Step(ID, costFromStart) {\\n    this.ID = ID;\\n    this.costFromStart = costFromStart;\\n}\\n```\\n**C++**\\n```\\n#include <queue>\\n#include <memory>\\n#include <vector>\\n#include <climits>\\nusing namespace std;\\n\\nstruct Node {\\n    int ID;\\n    int costOfEdge;\\n    Node(int ID, int costOfEdge) : ID {ID}, costOfEdge {costOfEdge} {}\\n};\\n\\nstruct Step {\\n    int ID;\\n    int costFromStart;\\n    Step(int ID, int costFromStart) : ID {ID}, costFromStart {costFromStart} {}\\n};\\n\\nclass Graph {\\n\\n    const static int NO_PATH_EXISTS = -1;\\n    vector<vector<Node>> graph;\\n    int totalNodes;\\n\\npublic:\\n    Graph(int totalNodes, const vector<vector<int>>& edges) : totalNodes {totalNodes} {\\n        graph.resize(totalNodes);\\n        for (const auto& edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            graph[from].emplace_back(to, cost);\\n        }\\n    }\\n\\n    void addEdge(const vector<int>& edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        graph[from].emplace_back(to, cost);\\n    }\\n\\n    int shortestPath(int start, int goal) const {\\n        vector<int>distanceFromStart(totalNodes, INT_MAX);\\n        distanceFromStart[start] = 0;\\n\\n        static auto comparator = [](const Step& first, const Step& second)\\n        {return first.costFromStart > second.costFromStart;};\\n\\n        priority_queue<Step, vector<Step>, decltype(comparator)> minHeap(comparator);\\n        minHeap.emplace(start, 0);\\n\\n        while (!minHeap.empty()) {\\n\\n            Step current = minHeap.top();\\n            minHeap.pop();\\n            if (current.ID == goal) {\\n                break;\\n            }\\n\\n            const vector<Node>& neighbours = graph[current.ID];\\n            for (const auto& next : neighbours) {\\n                if (distanceFromStart[next.ID] > current.costFromStart + next.costOfEdge) {\\n                    distanceFromStart[next.ID] = current.costFromStart + next.costOfEdge;\\n                    minHeap.emplace(next.ID, distanceFromStart[next.ID]);\\n                }\\n            }\\n        }\\n\\n        return distanceFromStart[goal] != INT_MAX ? distanceFromStart[goal] : NO_PATH_EXISTS;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "JavaScript",
                    "Graph"
                ],
                "code": "```\\nimport java.util.ArrayList;\\nimport java.util.Arrays;\\nimport java.util.List;\\nimport java.util.PriorityQueue;\\n\\npublic class Graph {\\n\\n    private static final int NO_PATH_EXISTS = -1;\\n\\n    private record Node(int ID, int costOfEdge) {}\\n    private record Step(int ID, int costFromStart) {}\\n\\n    private final List<Node>[] graph;\\n    private final int totalNodes;\\n\\n    public Graph(int totalNodes, int[][] edges) {\\n        this.totalNodes = totalNodes;\\n        graph = new List[totalNodes];\\n        for (int i = 0; i < totalNodes; ++i) {\\n            graph[i] = new ArrayList<>();\\n        }\\n\\n        for (int[] edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            graph[from].add(new Node(to, cost));\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        graph[from].add(new Node(to, cost));\\n    }\\n\\n    public int shortestPath(int start, int goal) {\\n        int[] distanceFromStart = new int[this.totalNodes];\\n        Arrays.fill(distanceFromStart, Integer.MAX_VALUE);\\n        distanceFromStart[start] = 0;\\n\\n        PriorityQueue<Step> minHeap = new PriorityQueue<>((x, y) -> x.costFromStart - y.costFromStart);\\n        minHeap.add(new Step(start, 0));\\n\\n        while (!minHeap.isEmpty()) {\\n\\n            Step current = minHeap.poll();\\n            if (current.ID == goal) {\\n                break;\\n            }\\n\\n            List<Node> neighbours = graph[current.ID];\\n            for (Node next : neighbours) {\\n                if (distanceFromStart[next.ID] > current.costFromStart + next.costOfEdge) {\\n                    distanceFromStart[next.ID] = current.costFromStart + next.costOfEdge;\\n                    minHeap.add(new Step(next.ID, distanceFromStart[next.ID]));\\n                }\\n            }\\n        }\\n\\n        return distanceFromStart[goal] != Integer.MAX_VALUE ? distanceFromStart[goal] : NO_PATH_EXISTS;\\n    }\\n}\\n```\n```\\nclass Graph {\\n\\n    static NO_PATH_EXISTS = -1;\\n\\n    /**\\n     * @param {number} totalNodes\\n     * @param {number[][]} edges\\n     */\\n    constructor(totalNodes, edges) {\\n        this.graph = new Array(totalNodes);//Array<Node>\\n        this.totalNodes = totalNodes;\\n        for (let i = 0; i < totalNodes; ++i) {\\n            this.graph[i] = new Array();\\n        }\\n\\n        for (let [from, to, cost] of edges) {\\n            this.graph[from].push(new Node(to, cost));\\n        }\\n    }\\n\\n    /** \\n     * @param {number[]} edge\\n     * @return {void}\\n     */\\n    addEdge(edge) {\\n        let from = edge[0];\\n        let to = edge[1];\\n        let cost = edge[2];\\n        this.graph[from].push(new Node(to, cost));\\n    }\\n\\n    /** \\n     * @param {number} start \\n     * @param {number} goal\\n     * @return {number}\\n     */\\n    shortestPath(start, goal) {\\n        const distanceFromStart = new Array(this.totalNodes).fill(Number.MAX_SAFE_INTEGER);\\n        distanceFromStart[start] = 0;\\n\\n        //const {MinPriorityQueue} = require(\\'@datastructures-js/priority-queue\\');\\n        //MinPriorityQueue<Step>\\n        const minHeap = new MinPriorityQueue({compare: (x, y) => x.costFromStart - y.costFromStart});\\n        minHeap.enqueue(new Step(start, 0));\\n\\n        while (!minHeap.isEmpty()) {\\n\\n            let current = minHeap.dequeue();\\n            if (current.ID === goal) {\\n                break;\\n            }\\n\\n            const neighbours = this.graph[current.ID];\\n            for (let next of neighbours) {\\n                if (distanceFromStart[next.ID] > current.costFromStart + next.costOfEdge) {\\n                    distanceFromStart[next.ID] = current.costFromStart + next.costOfEdge;\\n                    minHeap.enqueue(new Step(next.ID, distanceFromStart[next.ID]));\\n                }\\n            }\\n        }\\n\\n        return distanceFromStart[goal] !== Number.MAX_SAFE_INTEGER ? distanceFromStart[goal] : Graph.NO_PATH_EXISTS;\\n    }\\n}\\n\\n/** \\n * @param {number} ID \\n * @param {number} costOfEdge\\n */\\nfunction Node(ID, costOfEdge) {\\n    this.ID = ID;\\n    this.costOfEdge = costOfEdge;\\n}\\n\\n/** \\n * @param {number} ID \\n * @param {number} costFromStart\\n */\\nfunction Step(ID, costFromStart) {\\n    this.ID = ID;\\n    this.costFromStart = costFromStart;\\n}\\n```\n```\\n#include <queue>\\n#include <memory>\\n#include <vector>\\n#include <climits>\\nusing namespace std;\\n\\nstruct Node {\\n    int ID;\\n    int costOfEdge;\\n    Node(int ID, int costOfEdge) : ID {ID}, costOfEdge {costOfEdge} {}\\n};\\n\\nstruct Step {\\n    int ID;\\n    int costFromStart;\\n    Step(int ID, int costFromStart) : ID {ID}, costFromStart {costFromStart} {}\\n};\\n\\nclass Graph {\\n\\n    const static int NO_PATH_EXISTS = -1;\\n    vector<vector<Node>> graph;\\n    int totalNodes;\\n\\npublic:\\n    Graph(int totalNodes, const vector<vector<int>>& edges) : totalNodes {totalNodes} {\\n        graph.resize(totalNodes);\\n        for (const auto& edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            graph[from].emplace_back(to, cost);\\n        }\\n    }\\n\\n    void addEdge(const vector<int>& edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        graph[from].emplace_back(to, cost);\\n    }\\n\\n    int shortestPath(int start, int goal) const {\\n        vector<int>distanceFromStart(totalNodes, INT_MAX);\\n        distanceFromStart[start] = 0;\\n\\n        static auto comparator = [](const Step& first, const Step& second)\\n        {return first.costFromStart > second.costFromStart;};\\n\\n        priority_queue<Step, vector<Step>, decltype(comparator)> minHeap(comparator);\\n        minHeap.emplace(start, 0);\\n\\n        while (!minHeap.empty()) {\\n\\n            Step current = minHeap.top();\\n            minHeap.pop();\\n            if (current.ID == goal) {\\n                break;\\n            }\\n\\n            const vector<Node>& neighbours = graph[current.ID];\\n            for (const auto& next : neighbours) {\\n                if (distanceFromStart[next.ID] > current.costFromStart + next.costOfEdge) {\\n                    distanceFromStart[next.ID] = current.costFromStart + next.costOfEdge;\\n                    minHeap.emplace(next.ID, distanceFromStart[next.ID]);\\n                }\\n            }\\n        }\\n\\n        return distanceFromStart[goal] != INT_MAX ? distanceFromStart[goal] : NO_PATH_EXISTS;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3490636,
                "title": "c-floydd-warshall-algo",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\nvector<vector<int>> cost;\\nint n=-1;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n=n;\\n        cost.resize(n,vector<int>(n,1e8));\\n        for(int i=0;i<n;i++) cost[i][i]=0;\\n        for(auto& ele: edges){\\n            cost[ele[0]][ele[1]]=ele[2];\\n        }\\n        for(int k=0;k<n;k++){\\n            for(int i=0;i<n;i++){\\n                for(int j=0;j<n;j++){\\n                    if(cost[i][j]>cost[i][k]+cost[k][j]){\\n                        cost[i][j]=cost[i][k]+cost[k][j];\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> ele) {\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<n;j++){\\n                if(cost[i][j]>cost[i][ele[0]]+cost[ele[1]][j]+ele[2]){\\n                    cost[i][j]=cost[i][ele[0]]+cost[ele[1]][j]+ele[2];\\n                }\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return (cost[node1][node2]!=1e8)?cost[node1][node2]:(-1);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\nvector<vector<int>> cost;\\nint n=-1;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n=n;\\n        cost.resize(n,vector<int>(n,1e8));\\n        for(int i=0;i<n;i++) cost[i][i]=0;\\n        for(auto& ele: edges){\\n            cost[ele[0]][ele[1]]=ele[2];\\n        }\\n        for(int k=0;k<n;k++){\\n            for(int i=0;i<n;i++){\\n                for(int j=0;j<n;j++){\\n                    if(cost[i][j]>cost[i][k]+cost[k][j]){\\n                        cost[i][j]=cost[i][k]+cost[k][j];\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> ele) {\\n        for(int i=0;i<n;i++){\\n            for(int j=0;j<n;j++){\\n                if(cost[i][j]>cost[i][ele[0]]+cost[ele[1]][j]+ele[2]){\\n                    cost[i][j]=cost[i][ele[0]]+cost[ele[1]][j]+ele[2];\\n                }\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return (cost[node1][node2]!=1e8)?cost[node1][node2]:(-1);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3481905,
                "title": "c-dijkstra-solution-with-explanation",
                "content": "```cpp\\n/*\\nnaive Dijkstra for dense graph.\\nuse adjacent matrix.\\ntc of shortestPath is O(n^2), sc is O(n^2)\\n*/\\nclass Graph {\\npublic:\\n    vector<vector<int>> g;\\n    \\n    Graph(int n, vector<vector<int>>& edges): g (n, vector<int> (n, INT_MAX)) {\\n        for (vector<int> & e: edges) g[e[0]][e[1]] = e[2];\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]][edge[1]] = edge[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        int nodenum = this -> g.size();\\n        vector<bool> visited (nodenum, false);\\n        vector<int> dis (nodenum, INT_MAX);\\n        dis[node1] = 0;\\n        while (true) {\\n            int nearest = -1;\\n            for (int i = 0; i < nodenum; i += 1) {\\n                if (!visited[i] && (nearest == -1 || dis[i] < dis[nearest])) nearest = i;\\n            }\\n            if (dis[nearest] == INT_MAX) return -1; // all nodes reachable from the start are updated\\n            else if (nearest == node2) return dis[node2];\\n            visited[nearest] = true;\\n            for (int i = 0; i < nodenum; i += 1) {\\n                if (g[nearest][i] != INT_MAX) dis[i] = min(dis[i], dis[nearest] + g[nearest][i]);\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\n/*\\nnaive Dijkstra for dense graph.\\nuse adjacent matrix.\\ntc of shortestPath is O(n^2), sc is O(n^2)\\n*/\\nclass Graph {\\npublic:\\n    vector<vector<int>> g;\\n    \\n    Graph(int n, vector<vector<int>>& edges): g (n, vector<int> (n, INT_MAX)) {\\n        for (vector<int> & e: edges) g[e[0]][e[1]] = e[2];\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        g[edge[0]][edge[1]] = edge[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        int nodenum = this -> g.size();\\n        vector<bool> visited (nodenum, false);\\n        vector<int> dis (nodenum, INT_MAX);\\n        dis[node1] = 0;\\n        while (true) {\\n            int nearest = -1;\\n            for (int i = 0; i < nodenum; i += 1) {\\n                if (!visited[i] && (nearest == -1 || dis[i] < dis[nearest])) nearest = i;\\n            }\\n            if (dis[nearest] == INT_MAX) return -1; // all nodes reachable from the start are updated\\n            else if (nearest == node2) return dis[node2];\\n            visited[nearest] = true;\\n            for (int i = 0; i < nodenum; i += 1) {\\n                if (g[nearest][i] != INT_MAX) dis[i] = min(dis[i], dis[nearest] + g[nearest][i]);\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456978,
                "title": "dijkstra-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.size=n\\n        self.edges=edges\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.edges.append(edge)\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        n=self.size\\n        dist=[float(\"inf\")]*n\\n        dist[node1]=0\\n        adj=[([])for i in range(n)]\\n        for i in self.edges:\\n            adj[i[0]].append([i[1],i[2]])\\n        pq=deque()\\n        count=0\\n        pq.append((node1,0))\\n        while len(pq)>0:\\n            node,time=pq.popleft()\\n            for i in adj[node]:\\n                v=i[0]\\n                t=i[1]\\n                if dist[v]>t+time:\\n                    dist[v]=t+time\\n                    pq.append((v,dist[v]))\\n        if dist[node2]!=float(\"inf\"):\\n            return dist[node2]\\n        else:\\n            return -1\\n\\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.size=n\\n        self.edges=edges\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.edges.append(edge)\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        n=self.size\\n        dist=[float(\"inf\")]*n\\n        dist[node1]=0\\n        adj=[([])for i in range(n)]\\n        for i in self.edges:\\n            adj[i[0]].append([i[1],i[2]])\\n        pq=deque()\\n        count=0\\n        pq.append((node1,0))\\n        while len(pq)>0:\\n            node,time=pq.popleft()\\n            for i in adj[node]:\\n                v=i[0]\\n                t=i[1]\\n                if dist[v]>t+time:\\n                    dist[v]=t+time\\n                    pq.append((v,dist[v]))\\n        if dist[node2]!=float(\"inf\"):\\n            return dist[node2]\\n        else:\\n            return -1\\n\\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445451,
                "title": "java-floyd-warshall-algorithm",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\n\\n    int[][] graph;\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        graph = new int[n][n];\\n        this.n = n;\\n        for(int i = 0; i < n; i ++){\\n            for(int j = 0; j < n; j ++){\\n                graph[i][j] = Integer.MAX_VALUE;\\n            }\\n        }\\n        for(int[] edge : edges){\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            graph[from][to] = cost;\\n        }   \\n        for(int k = 0; k < n; k ++){\\n            for(int i = 0; i < n; i ++){\\n                for(int j = 0; j < n; j ++){\\n                    if( graph[i][k] != Integer.MAX_VALUE && graph[k][j] != Integer.MAX_VALUE){\\n                        graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j]);\\n                    }\\n                }\\n            }\\n        }\\n        for(int i = 0; i < n; i ++){\\n            graph[i][i] = 0;\\n        }\\n         \\n        //print();\\n\\n        \\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        if (graph[from][to] > cost){\\n            graph[from][to] = cost;\\n            for(int i = 0; i < n; i ++){\\n                for(int j = 0; j < n; j ++){\\n                    if( graph[i][from] != Integer.MAX_VALUE && graph[to][j] != Integer.MAX_VALUE){\\n                        graph[i][j] = Math.min(graph[i][j], graph[i][from] + graph[to][j] + cost);\\n                    }\\n                }\\n            }\\n        }\\n        //print();\\n        \\n    }\\n    public int shortestPath(int node1, int node2) {\\n         int ans = Integer.MAX_VALUE;\\n        return graph[node1][node2] == Integer.MAX_VALUE ? -1 : graph[node1][node2];\\n    }\\n    public void print(){\\n        for(int i = 0; i < n; i ++){\\n            for(int j = 0; j < n; j ++){\\n                System.out.printf(graph[i][j] + \", \");\\n            }\\n            System.out.println();\\n        }\\n                    System.out.println();\\n\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n\\n    int[][] graph;\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        graph = new int[n][n];\\n        this.n = n;\\n        for(int i = 0; i < n; i ++){\\n            for(int j = 0; j < n; j ++){\\n                graph[i][j] = Integer.MAX_VALUE;\\n            }\\n        }\\n        for(int[] edge : edges){\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            graph[from][to] = cost;\\n        }   \\n        for(int k = 0; k < n; k ++){\\n            for(int i = 0; i < n; i ++){\\n                for(int j = 0; j < n; j ++){\\n                    if( graph[i][k] != Integer.MAX_VALUE && graph[k][j] != Integer.MAX_VALUE){\\n                        graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j]);\\n                    }\\n                }\\n            }\\n        }\\n        for(int i = 0; i < n; i ++){\\n            graph[i][i] = 0;\\n        }\\n         \\n        //print();\\n\\n        \\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        if (graph[from][to] > cost){\\n            graph[from][to] = cost;\\n            for(int i = 0; i < n; i ++){\\n                for(int j = 0; j < n; j ++){\\n                    if( graph[i][from] != Integer.MAX_VALUE && graph[to][j] != Integer.MAX_VALUE){\\n                        graph[i][j] = Math.min(graph[i][j], graph[i][from] + graph[to][j] + cost);\\n                    }\\n                }\\n            }\\n        }\\n        //print();\\n        \\n    }\\n    public int shortestPath(int node1, int node2) {\\n         int ans = Integer.MAX_VALUE;\\n        return graph[node1][node2] == Integer.MAX_VALUE ? -1 : graph[node1][node2];\\n    }\\n    public void print(){\\n        for(int i = 0; i < n; i ++){\\n            for(int j = 0; j < n; j ++){\\n                System.out.printf(graph[i][j] + \", \");\\n            }\\n            System.out.println();\\n        }\\n                    System.out.println();\\n\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3442437,
                "title": "python3-dijkstra-using-heapq",
                "content": "\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.mp={k:[] for k in range(n)}\\n        for e in edges:\\n            self.mp[e[0]].append((e[1],e[2]))\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.mp[edge[0]].append((edge[1],edge[2]))\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        dist=[float(\\'inf\\') for i in range(len(self.mp))]\\n        hp =[(0,node1)]\\n        while len(hp)>0:\\n            d,v =heapq.heappop(hp)\\n            if(v==node2):\\n                return int(d)\\n            if d> dist[v]:\\n                continue\\n            for neighbor,weight in self.mp[v]:\\n                if(dist[neighbor]> d+weight):\\n                    dist[neighbor]=d+weight\\n                    heapq.heappush(hp,(dist[neighbor],neighbor))\\n        return -1\\n            \\n                \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.mp={k:[] for k in range(n)}\\n        for e in edges:\\n            self.mp[e[0]].append((e[1],e[2]))\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.mp[edge[0]].append((edge[1],edge[2]))\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        dist=[float(\\'inf\\') for i in range(len(self.mp))]\\n        hp =[(0,node1)]\\n        while len(hp)>0:\\n            d,v =heapq.heappop(hp)\\n            if(v==node2):\\n                return int(d)\\n            if d> dist[v]:\\n                continue\\n            for neighbor,weight in self.mp[v]:\\n                if(dist[neighbor]> d+weight):\\n                    dist[neighbor]=d+weight\\n                    heapq.heappush(hp,(dist[neighbor],neighbor))\\n        return -1\\n            \\n                \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3441969,
                "title": "floyd-algorithm",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        N = n;\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < n; j++) {\\n                if (i != j) {\\n                    dp[i][j] = 1e8;\\n                } else {\\n                    dp[i][j] = 0;\\n                }\\n            }\\n        }\\n        for (auto e : edges) {\\n            dp[e[0]][e[1]] = e[2];\\n        }\\n        // floyd \\u7B97\\u6CD5\\n        for (int k = 0; k < n; k++) {\\n            for (int i = 0; i < n; i++) {\\n                if (i == k) continue;\\n                for (int j = 0; j < n; j++) {\\n                    if (i == j or j == k) continue;\\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        dp[edge[0]][edge[1]] = min(dp[edge[0]][edge[1]], edge[2]);\\n        // update the min distance from edge[0] to other node\\n        for (int i = 0; i < N; i++) {\\n            if (i == edge[0] or i == edge[1]) continue;\\n            dp[edge[0]][i] = min(dp[edge[0]][i], edge[2] + dp[edge[1]][i]);\\n        }\\n        // update the min distance from any node to other node using edge[0]\\n        for (int i = 0; i < N; i++) {\\n            for (int j = 0; j < N; j++) {\\n                if (i == j or j == edge[0] or i == edge[0]) continue;\\n                dp[i][j] = min(dp[i][j], dp[i][edge[0]] + dp[edge[0]][j]);\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dp[node1][node2] == 1e8 ? -1 : dp[node1][node2];\\n    }\\nprivate:\\n    int N;\\n    int dp[105][105];\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        N = n;\\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < n; j++) {\\n                if (i != j) {\\n                    dp[i][j] = 1e8;\\n                } else {\\n                    dp[i][j] = 0;\\n                }\\n            }\\n        }\\n        for (auto e : edges) {\\n            dp[e[0]][e[1]] = e[2];\\n        }\\n        // floyd \\u7B97\\u6CD5\\n        for (int k = 0; k < n; k++) {\\n            for (int i = 0; i < n; i++) {\\n                if (i == k) continue;\\n                for (int j = 0; j < n; j++) {\\n                    if (i == j or j == k) continue;\\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        dp[edge[0]][edge[1]] = min(dp[edge[0]][edge[1]], edge[2]);\\n        // update the min distance from edge[0] to other node\\n        for (int i = 0; i < N; i++) {\\n            if (i == edge[0] or i == edge[1]) continue;\\n            dp[edge[0]][i] = min(dp[edge[0]][i], edge[2] + dp[edge[1]][i]);\\n        }\\n        // update the min distance from any node to other node using edge[0]\\n        for (int i = 0; i < N; i++) {\\n            for (int j = 0; j < N; j++) {\\n                if (i == j or j == edge[0] or i == edge[0]) continue;\\n                dp[i][j] = min(dp[i][j], dp[i][edge[0]] + dp[edge[0]][j]);\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dp[node1][node2] == 1e8 ? -1 : dp[node1][node2];\\n    }\\nprivate:\\n    int N;\\n    int dp[105][105];\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3438304,
                "title": "simple-dijkstra-s-algorithm-shortest-path-map",
                "content": "# Approach\\nMake adjacency list first while calling constructor.\\nThen on calling addEdge  function we will append edge in our adjacency list.\\nAnd for shortestPath between two nodes we will be applying dijkstra\\'s\\nalgorithm which you can see below how i have applied in this question. \\n\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    int s;\\n    unordered_map<int,vector<pair<int,int>>> mp;\\n    \\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        s = n;\\n        for(auto i:edges)\\n        {\\n            int u = i[0];\\n            int v = i[1];\\n            int wt = i[2];\\n            mp[u].push_back({v,wt});\\n        }\\n\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        int u = edge[0];\\n        int v = edge[1];\\n        int wt = edge[2];\\n        mp[u].push_back({v,wt});       \\n        \\n    }\\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        //Applying dijkstra\\'s\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;\\n        //we will be pushing 0 distance from node1 initially. \\n        q.push({0,node1});\\n        vector<int> dist(s,INT_MAX);\\n        dist[node1]=0;\\n        \\n        while(!q.empty())\\n        {\\n            int dis = q.top().first;\\n            int node = q.top().second;\\n            q.pop();\\n            for(auto i:mp[node])\\n            {\\n                int adjNode = i.first;\\n                int wt = i.second;\\n                if(dis+wt<dist[adjNode])\\n                {\\n                    dist[adjNode]=dis+wt;\\n                    q.push({dist[adjNode],adjNode});\\n                }\\n            }\\n        }\\n        return dist[node2]==INT_MAX?-1:dist[node2];\\n        \\n        \\n        \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    int s;\\n    unordered_map<int,vector<pair<int,int>>> mp;\\n    \\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        s = n;\\n        for(auto i:edges)\\n        {\\n            int u = i[0];\\n            int v = i[1];\\n            int wt = i[2];\\n            mp[u].push_back({v,wt});\\n        }\\n\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        int u = edge[0];\\n        int v = edge[1];\\n        int wt = edge[2];\\n        mp[u].push_back({v,wt});       \\n        \\n    }\\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        //Applying dijkstra\\'s\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;\\n        //we will be pushing 0 distance from node1 initially. \\n        q.push({0,node1});\\n        vector<int> dist(s,INT_MAX);\\n        dist[node1]=0;\\n        \\n        while(!q.empty())\\n        {\\n            int dis = q.top().first;\\n            int node = q.top().second;\\n            q.pop();\\n            for(auto i:mp[node])\\n            {\\n                int adjNode = i.first;\\n                int wt = i.second;\\n                if(dis+wt<dist[adjNode])\\n                {\\n                    dist[adjNode]=dis+wt;\\n                    q.push({dist[adjNode],adjNode});\\n                }\\n            }\\n        }\\n        return dist[node2]==INT_MAX?-1:dist[node2];\\n        \\n        \\n        \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3434829,
                "title": "c-basic-adjacency-list-disjkstra",
                "content": "```\\nint INF = 1e9;\\n#define pi pair<int, int>\\nclass Graph {\\npublic:\\n    vector<int> Adj[100];\\n    int Dist[101][101];\\n    int N;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        N = n;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n                Dist[i][j] = INF;\\n        }\\n        for(auto &x : edges)\\n        {\\n            Adj[x[0]].push_back(x[1]);\\n            Dist[x[0]][x[1]] = x[2];\\n        }\\n    }\\n    \\n    void addEdge(vector<int> x) {\\n        Adj[x[0]].push_back(x[1]);\\n        Dist[x[0]][x[1]] = x[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2){\\n        if(node1 == node2)return 0;\\n        priority_queue<pi, vector<pi>, greater<pi>> pq;\\n        pq.push({0, node1});\\n        vector<int> IsVisited(N, INF);\\n        IsVisited[node1] = 0;\\n        int ans = INF;\\n        while(!pq.empty())\\n        {\\n            pi a = pq.top();\\n            pq.pop();\\n            int idx = a.second, dist = a.first;\\n            for(auto &x : Adj[idx])\\n            {\\n                if(Dist[idx][x] + dist < IsVisited[x]){pq.push({Dist[idx][x] + dist, x});IsVisited[x] = Dist[idx][x] + dist;}\\n                if(x == node2)ans  = min(dist + Dist[idx][x], ans);\\n            }\\n        }\\n        return (ans == INF) ? -1 : ans;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint INF = 1e9;\\n#define pi pair<int, int>\\nclass Graph {\\npublic:\\n    vector<int> Adj[100];\\n    int Dist[101][101];\\n    int N;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        N = n;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n                Dist[i][j] = INF;\\n        }\\n        for(auto &x : edges)\\n        {\\n            Adj[x[0]].push_back(x[1]);\\n            Dist[x[0]][x[1]] = x[2];\\n        }\\n    }\\n    \\n    void addEdge(vector<int> x) {\\n        Adj[x[0]].push_back(x[1]);\\n        Dist[x[0]][x[1]] = x[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2){\\n        if(node1 == node2)return 0;\\n        priority_queue<pi, vector<pi>, greater<pi>> pq;\\n        pq.push({0, node1});\\n        vector<int> IsVisited(N, INF);\\n        IsVisited[node1] = 0;\\n        int ans = INF;\\n        while(!pq.empty())\\n        {\\n            pi a = pq.top();\\n            pq.pop();\\n            int idx = a.second, dist = a.first;\\n            for(auto &x : Adj[idx])\\n            {\\n                if(Dist[idx][x] + dist < IsVisited[x]){pq.push({Dist[idx][x] + dist, x});IsVisited[x] = Dist[idx][x] + dist;}\\n                if(x == node2)ans  = min(dist + Dist[idx][x], ans);\\n            }\\n        }\\n        return (ans == INF) ? -1 : ans;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3433955,
                "title": "java-99-80-no-need-to-re-process-all-of-floyd-warshall-when-adding-the-edge",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nGraph: O(N^3)\\naddEdge: O(N^2)\\nshortestPath: O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n    final int inf = 500_000_000;\\n    int[][] dist;\\n    int n;\\n    \\n    public Graph(int n, int[][] edges) {\\n        dist = new int[n][n];\\n        this.n=n;\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<n; j++){\\n                dist[i][j]=inf;\\n            }\\n            dist[i][i]=0;\\n        }\\n\\n        for(int[] e:edges)dist[e[0]][e[1]]=e[2];\\n\\n        for(int k=0; k<n; k++){\\n            for(int i=0; i<n; i++){\\n                for(int j=0; j<n; j++){\\n                    dist[i][j]=Math.min(dist[i][j], dist[i][k]+dist[k][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    public void addEdge(int[] e) {\\n        if(dist[e[0]][e[1]]<=e[2])return;\\n\\n        dist[e[0]][e[1]]=e[2];\\n        for(int i=0; i<n; i++)\\n        for(int j=0; j<n; j++)\\n        dist[i][j]=Math.min(dist[i][j], dist[i][e[0]]+e[2]+dist[e[1]][j]);\\n    }\\n    \\n    public int shortestPath(int i1, int i2) {\\n        return dist[i1][i2]!=inf? dist[i1][i2]:-1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n    final int inf = 500_000_000;\\n    int[][] dist;\\n    int n;\\n    \\n    public Graph(int n, int[][] edges) {\\n        dist = new int[n][n];\\n        this.n=n;\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<n; j++){\\n                dist[i][j]=inf;\\n            }\\n            dist[i][i]=0;\\n        }\\n\\n        for(int[] e:edges)dist[e[0]][e[1]]=e[2];\\n\\n        for(int k=0; k<n; k++){\\n            for(int i=0; i<n; i++){\\n                for(int j=0; j<n; j++){\\n                    dist[i][j]=Math.min(dist[i][j], dist[i][k]+dist[k][j]);\\n                }\\n            }\\n        }\\n    }\\n    \\n    public void addEdge(int[] e) {\\n        if(dist[e[0]][e[1]]<=e[2])return;\\n\\n        dist[e[0]][e[1]]=e[2];\\n        for(int i=0; i<n; i++)\\n        for(int j=0; j<n; j++)\\n        dist[i][j]=Math.min(dist[i][j], dist[i][e[0]]+e[2]+dist[e[1]][j]);\\n    }\\n    \\n    public int shortestPath(int i1, int i2) {\\n        return dist[i1][i2]!=inf? dist[i1][i2]:-1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3433235,
                "title": "golang-simple-dijkstra",
                "content": "```\\ntype MinHeap [][2]int\\n\\nfunc (h MinHeap) Len() int            { return len(h) }\\nfunc (h MinHeap) Less(i, j int) bool  { return h[i][0] < h[j][0] }\\nfunc (h MinHeap) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\\nfunc (h *MinHeap) Push(x interface{}) { *h = append(*h, x.([2]int)) }\\nfunc (h *MinHeap) Pop() (v interface{}) {\\n\\t*h, v = (*h)[:len(*h)-1], (*h)[len(*h)-1]\\n\\treturn\\n}\\n\\ntype Graph struct {\\n    gr map[int][][2]int\\n    n int\\n}\\n\\n\\nfunc Constructor(n int, edges [][]int) Graph {\\n    gr := make(map[int][][2]int, n)\\n    for _, edge := range edges {\\n\\t\\tu, v, w := edge[0], edge[1], edge[2]\\n        gr[u] = append(gr[u], [2]int{w, v})\\n    }\\n    return Graph{\\n        gr:gr,\\n        n:n,\\n    }\\n}\\n\\n\\nfunc (g *Graph) AddEdge(edge []int)  {\\n    u, v, w := edge[0], edge[1], edge[2]\\n    g.gr[u] = append(g.gr[u], [2]int{w, v})\\n}\\n\\nconst inf = 1 << 31\\nfunc (g *Graph) ShortestPath(st int, ed int) int {\\n\\tdist := make([]int, g.n)\\n\\tfor i := range dist {\\n\\t\\tdist[i] = inf\\n\\t}\\n\\tdist[st] = 0\\n\\th := &MinHeap{}\\n\\theap.Init(h)\\n\\th.Push([2]int{0, st})\\n\\n\\tused := make([]bool, g.n)\\n\\n\\tfor h.Len() > 0 {\\n\\t\\te := heap.Pop(h).([2]int)\\n\\t\\tif used[e[1]] {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n        if e[1]==ed {\\n            return dist[ed]\\n        }\\n\\t\\tused[e[1]] = true\\n\\n\\t\\tconns := g.gr[e[1]]\\n\\t\\tfor i := range conns {\\n\\t\\t\\tne := conns[i]\\n\\t\\t\\tif dist[e[1]]+ne[0] < dist[ne[1]] {\\n\\t\\t\\t\\tdist[ne[1]] = dist[e[1]] + ne[0]\\n\\t\\t\\t\\theap.Push(h, [2]int{dist[ne[1]], ne[1]})\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n    return -1\\n}\\n\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * obj := Constructor(n, edges);\\n * obj.AddEdge(edge);\\n * param_2 := obj.ShortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\ntype MinHeap [][2]int\\n\\nfunc (h MinHeap) Len() int            { return len(h) }\\nfunc (h MinHeap) Less(i, j int) bool  { return h[i][0] < h[j][0] }\\nfunc (h MinHeap) Swap(i, j int)       { h[i], h[j] = h[j], h[i] }\\nfunc (h *MinHeap) Push(x interface{}) { *h = append(*h, x.([2]int)) }\\nfunc (h *MinHeap) Pop() (v interface{}) {\\n\\t*h, v = (*h)[:len(*h)-1], (*h)[len(*h)-1]\\n\\treturn\\n}\\n\\ntype Graph struct {\\n    gr map[int][][2]int\\n    n int\\n}\\n\\n\\nfunc Constructor(n int, edges [][]int) Graph {\\n    gr := make(map[int][][2]int, n)\\n    for _, edge := range edges {\\n\\t\\tu, v, w := edge[0], edge[1], edge[2]\\n        gr[u] = append(gr[u], [2]int{w, v})\\n    }\\n    return Graph{\\n        gr:gr,\\n        n:n,\\n    }\\n}\\n\\n\\nfunc (g *Graph) AddEdge(edge []int)  {\\n    u, v, w := edge[0], edge[1], edge[2]\\n    g.gr[u] = append(g.gr[u], [2]int{w, v})\\n}\\n\\nconst inf = 1 << 31\\nfunc (g *Graph) ShortestPath(st int, ed int) int {\\n\\tdist := make([]int, g.n)\\n\\tfor i := range dist {\\n\\t\\tdist[i] = inf\\n\\t}\\n\\tdist[st] = 0\\n\\th := &MinHeap{}\\n\\theap.Init(h)\\n\\th.Push([2]int{0, st})\\n\\n\\tused := make([]bool, g.n)\\n\\n\\tfor h.Len() > 0 {\\n\\t\\te := heap.Pop(h).([2]int)\\n\\t\\tif used[e[1]] {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n        if e[1]==ed {\\n            return dist[ed]\\n        }\\n\\t\\tused[e[1]] = true\\n\\n\\t\\tconns := g.gr[e[1]]\\n\\t\\tfor i := range conns {\\n\\t\\t\\tne := conns[i]\\n\\t\\t\\tif dist[e[1]]+ne[0] < dist[ne[1]] {\\n\\t\\t\\t\\tdist[ne[1]] = dist[e[1]] + ne[0]\\n\\t\\t\\t\\theap.Push(h, [2]int{dist[ne[1]], ne[1]})\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n    return -1\\n}\\n\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * obj := Constructor(n, edges);\\n * obj.AddEdge(edge);\\n * param_2 := obj.ShortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3432236,
                "title": "dijkstra-s-algorithm-to-find-the-shortest-path",
                "content": "# Intuition\\nWe need to use Dijkstra Algorithm whenever shortestPath function is called. \\n\\n# Approach\\n- Dijkstra Algorithm for Graphs. \\n\\n# Complexity\\n- Time complexity: O(N2)\\n\\n- Space complexity: O(N)\\n\\n# Code\\n```\\nclass Graph {\\n    public int vertices;\\n    public Map<Integer, List<int[]>> adjList;\\n    public Graph(int n, int[][] edges) {\\n        this.vertices = n;\\n        this.adjList = new HashMap<>();\\n        for(int i=0; i<edges.length; i++){\\n            int[] edge = edges[i];\\n            if(!adjList.containsKey(edge[0])){\\n                adjList.put(edge[0], new ArrayList<>());\\n            }\\n            adjList.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        if(!adjList.containsKey(edge[0])){\\n                adjList.put(edge[0], new ArrayList<>());\\n        }\\n        adjList.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        boolean[] sptSet = new boolean[vertices];\\n        for(int i=0; i<vertices; i++){\\n            sptSet[i] = false;\\n        }\\n\\n        int[] shortestPath = new int[this.vertices];\\n        for(int i=0; i<vertices; i++){\\n            shortestPath[i] = Integer.MAX_VALUE;\\n        }\\n        shortestPath[node1] = 0;\\n        util(node1, sptSet, shortestPath);\\n        if(shortestPath[node2] == Integer.MAX_VALUE){\\n            return -1;\\n        }else{\\n            return shortestPath[node2];\\n        }\\n    }\\n\\n    public void util(Integer node, boolean[] sptSet, int[] shortestPath){\\n        \\n        Map<Integer, List<int[]>> temp = this.adjList;\\n\\n        for(int i=0; i<this.vertices; i++){\\n            int currentNode = getNewNode(sptSet, shortestPath);\\n            if(currentNode == -1){\\n                continue;\\n            }\\n            int currentShort = shortestPath[currentNode];\\n            List<int[]> neigs = adjList.getOrDefault(currentNode, new ArrayList<>());\\n            sptSet[currentNode] = true;\\n\\n            for(int j =0; j< neigs.size(); j++){\\n                int[] neig = neigs.get(j);\\n                int dest = neig[0];\\n                int cost = neig[1];\\n                if(currentShort + cost < shortestPath[dest]){\\n                    shortestPath[dest] = currentShort + cost;\\n                }\\n            }\\n        }\\n    }\\n\\n    public int getNewNode(boolean[] sptSet, int[] shortestPath){\\n        int index = -1;\\n        int min = Integer.MAX_VALUE;\\n        for(int i=0; i<this.vertices; i++){\\n            if(sptSet[i] == false && shortestPath[i] < min){\\n                min = shortestPath[i];\\n                index = i;\\n            }\\n        }\\n        return index;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\n    public int vertices;\\n    public Map<Integer, List<int[]>> adjList;\\n    public Graph(int n, int[][] edges) {\\n        this.vertices = n;\\n        this.adjList = new HashMap<>();\\n        for(int i=0; i<edges.length; i++){\\n            int[] edge = edges[i];\\n            if(!adjList.containsKey(edge[0])){\\n                adjList.put(edge[0], new ArrayList<>());\\n            }\\n            adjList.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        if(!adjList.containsKey(edge[0])){\\n                adjList.put(edge[0], new ArrayList<>());\\n        }\\n        adjList.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        boolean[] sptSet = new boolean[vertices];\\n        for(int i=0; i<vertices; i++){\\n            sptSet[i] = false;\\n        }\\n\\n        int[] shortestPath = new int[this.vertices];\\n        for(int i=0; i<vertices; i++){\\n            shortestPath[i] = Integer.MAX_VALUE;\\n        }\\n        shortestPath[node1] = 0;\\n        util(node1, sptSet, shortestPath);\\n        if(shortestPath[node2] == Integer.MAX_VALUE){\\n            return -1;\\n        }else{\\n            return shortestPath[node2];\\n        }\\n    }\\n\\n    public void util(Integer node, boolean[] sptSet, int[] shortestPath){\\n        \\n        Map<Integer, List<int[]>> temp = this.adjList;\\n\\n        for(int i=0; i<this.vertices; i++){\\n            int currentNode = getNewNode(sptSet, shortestPath);\\n            if(currentNode == -1){\\n                continue;\\n            }\\n            int currentShort = shortestPath[currentNode];\\n            List<int[]> neigs = adjList.getOrDefault(currentNode, new ArrayList<>());\\n            sptSet[currentNode] = true;\\n\\n            for(int j =0; j< neigs.size(); j++){\\n                int[] neig = neigs.get(j);\\n                int dest = neig[0];\\n                int cost = neig[1];\\n                if(currentShort + cost < shortestPath[dest]){\\n                    shortestPath[dest] = currentShort + cost;\\n                }\\n            }\\n        }\\n    }\\n\\n    public int getNewNode(boolean[] sptSet, int[] shortestPath){\\n        int index = -1;\\n        int min = Integer.MAX_VALUE;\\n        for(int i=0; i<this.vertices; i++){\\n            if(sptSet[i] == false && shortestPath[i] < min){\\n                min = shortestPath[i];\\n                index = i;\\n            }\\n        }\\n        return index;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3432171,
                "title": "scala-dijkstra",
                "content": "# Code\\n```  \\n\\nclass Graph(_n: Int, _edges: Array[Array[Int]]) {\\n\\n  type Vertex = Int\\n\\n  val edgeMap = scala.collection.mutable.Map.empty[Vertex, List[(Vertex, Int)]].withDefaultValue(List.empty)\\n  _edges.foreach(addEdge)\\n\\n  def addEdge(arr: Array[Int]): Unit =\\n    edgeMap(arr(0)) ::= (arr(1), arr(2))\\n\\n  def shortestPath(node1: Int, node2: Int): Int = {\\n    val visited = scala.collection.mutable.Set.empty[Vertex]\\n    val queue = scala.collection.mutable.PriorityQueue((0, node1)).reverse\\n    def goFind: Int =\\n      if(queue.isEmpty) -1\\n      else {\\n        val (cost, vertex) = queue.dequeue()\\n        if (!visited.add(vertex)) goFind\\n        else if (vertex == node2) cost\\n        else {\\n          edgeMap(vertex).foreach { case (to, edgeCost) => queue.enqueue((cost + edgeCost, to)) }\\n          goFind\\n        }\\n      }\\n\\n    goFind\\n  }\\n}\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * var obj = new Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```  \\n\\nclass Graph(_n: Int, _edges: Array[Array[Int]]) {\\n\\n  type Vertex = Int\\n\\n  val edgeMap = scala.collection.mutable.Map.empty[Vertex, List[(Vertex, Int)]].withDefaultValue(List.empty)\\n  _edges.foreach(addEdge)\\n\\n  def addEdge(arr: Array[Int]): Unit =\\n    edgeMap(arr(0)) ::= (arr(1), arr(2))\\n\\n  def shortestPath(node1: Int, node2: Int): Int = {\\n    val visited = scala.collection.mutable.Set.empty[Vertex]\\n    val queue = scala.collection.mutable.PriorityQueue((0, node1)).reverse\\n    def goFind: Int =\\n      if(queue.isEmpty) -1\\n      else {\\n        val (cost, vertex) = queue.dequeue()\\n        if (!visited.add(vertex)) goFind\\n        else if (vertex == node2) cost\\n        else {\\n          edgeMap(vertex).foreach { case (to, edgeCost) => queue.enqueue((cost + edgeCost, to)) }\\n          goFind\\n        }\\n      }\\n\\n    goFind\\n  }\\n}\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * var obj = new Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3431395,
                "title": "java-easy-to-understand-bfs-with-priorityqueue",
                "content": "```\\nclass Graph {\\n    List<List<int[]>> graph;\\n    int N;\\n    public Graph(int n, int[][] edges) {\\n        graph = new ArrayList<>();\\n        N = n;\\n        for(int i = 0; i < n; i++) graph.add(new ArrayList<>());\\n        for(int[] edge: edges) graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        Queue<int[]> que = new PriorityQueue<>((a, b) -> Integer.compare(a[1], b[1]));\\n        boolean[] visited = new boolean[N];\\n        que.offer(new int[]{node1, 0});\\n        int res = Integer.MAX_VALUE;\\n        while(!que.isEmpty()){\\n            int[] cur = que.poll();\\n            visited[cur[0]] = true;\\n            if(cur[0] == node2){\\n                return cur[1];\\n            }\\n            List<int[]> neighbors = graph.get(cur[0]);\\n            for(int[] neighbor: neighbors){\\n                if(visited[neighbor[0]]) continue;\\n                que.offer(new int[]{neighbor[0], cur[1] + neighbor[1]});\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n    List<List<int[]>> graph;\\n    int N;\\n    public Graph(int n, int[][] edges) {\\n        graph = new ArrayList<>();\\n        N = n;\\n        for(int i = 0; i < n; i++) graph.add(new ArrayList<>());\\n        for(int[] edge: edges) graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        graph.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        Queue<int[]> que = new PriorityQueue<>((a, b) -> Integer.compare(a[1], b[1]));\\n        boolean[] visited = new boolean[N];\\n        que.offer(new int[]{node1, 0});\\n        int res = Integer.MAX_VALUE;\\n        while(!que.isEmpty()){\\n            int[] cur = que.poll();\\n            visited[cur[0]] = true;\\n            if(cur[0] == node2){\\n                return cur[1];\\n            }\\n            List<int[]> neighbors = graph.get(cur[0]);\\n            for(int[] neighbor: neighbors){\\n                if(visited[neighbor[0]]) continue;\\n                que.offer(new int[]{neighbor[0], cur[1] + neighbor[1]});\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3430373,
                "title": "dijkstra-and-relax-weight",
                "content": "```\\nclass Graph {\\npublic:\\n    vector<vector<int> > mPath;\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n = n;\\n        mPath = *(new vector<vector<int> >(n, vector<int>(n, -1)));\\n        vector<vector<pair<int, int> > > adj(n, vector<pair<int, int> >());\\n        for(vector<int> x: edges){\\n            adj[x[0]].push_back({x[2], x[1]});\\n        }\\n        priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int,int> > > pq;\\n        int d;\\n        for(int i = 0; i < n; i++){\\n            mPath[i][i] = 0;\\n            pq.push({0, i});\\n            vector<int> reached(n, 0);\\n            while(!pq.empty()){\\n                d = pq.top().second;\\n                pq.pop();\\n                if(reached[d]) continue;\\n                reached[d] = 1;\\n                for(pair<int, int> x: adj[d]){\\n                    if(mPath[i][x.second] == -1 || mPath[i][x.second] > mPath[i][d] + x.first) {\\n                        mPath[i][x.second] = mPath[i][d] + x.first;\\n                        pq.push({mPath[i][x.second], x.second});\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int x, y;\\n        for(int i = 0; i < n; i++){\\n            x = mPath[i][edge[0]];\\n            if(x != -1){\\n                for(int j = 0; j < n; j++){\\n                    y = mPath[edge[1]][j];\\n                    if(y != -1){\\n                        if(mPath[i][j] == -1 || mPath[i][j] > x + edge[2] + y){\\n                            mPath[i][j] = x + edge[2] + y;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return mPath[node1][node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<int> > mPath;\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n = n;\\n        mPath = *(new vector<vector<int> >(n, vector<int>(n, -1)));\\n        vector<vector<pair<int, int> > > adj(n, vector<pair<int, int> >());\\n        for(vector<int> x: edges){\\n            adj[x[0]].push_back({x[2], x[1]});\\n        }\\n        priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int,int> > > pq;\\n        int d;\\n        for(int i = 0; i < n; i++){\\n            mPath[i][i] = 0;\\n            pq.push({0, i});\\n            vector<int> reached(n, 0);\\n            while(!pq.empty()){\\n                d = pq.top().second;\\n                pq.pop();\\n                if(reached[d]) continue;\\n                reached[d] = 1;\\n                for(pair<int, int> x: adj[d]){\\n                    if(mPath[i][x.second] == -1 || mPath[i][x.second] > mPath[i][d] + x.first) {\\n                        mPath[i][x.second] = mPath[i][d] + x.first;\\n                        pq.push({mPath[i][x.second], x.second});\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int x, y;\\n        for(int i = 0; i < n; i++){\\n            x = mPath[i][edge[0]];\\n            if(x != -1){\\n                for(int j = 0; j < n; j++){\\n                    y = mPath[edge[1]][j];\\n                    if(y != -1){\\n                        if(mPath[i][j] == -1 || mPath[i][j] > x + edge[2] + y){\\n                            mPath[i][j] = x + edge[2] + y;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return mPath[node1][node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3429577,
                "title": "100-acceptance-easy-simple-approach-beginner-friendly-solution",
                "content": "# Code\\n```\\nclass Graph {\\n    List<int[]>[] adjList;\\n    int n;\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);\\n        int[] dist = new int[n];\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[node1] = 0;\\n        pq.offer(new int[]{node1, 0});\\n        while (!pq.isEmpty()) {\\n            int[] curr = pq.poll();\\n            int node = curr[0], distance = curr[1];\\n            if (node == node2) {\\n                return distance;\\n            }\\n            if (distance > dist[node]) {\\n                continue;\\n            }\\n            for (int[] neighbor : adjList[node]) {\\n                int nextNode = neighbor[0], edgeCost = neighbor[1];\\n                int newDist = distance + edgeCost;\\n                if (newDist < dist[nextNode]) {\\n                    dist[nextNode] = newDist;\\n                    pq.offer(new int[]{nextNode, newDist});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n       \\n    public void addEdge(int[] edge) {\\n        int from = edge[0], to = edge[1], cost = edge[2];\\n        adjList[from].add(new int[]{to, cost});\\n    }\\n    \\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        adjList = new List[n];\\n        for (int i = 0; i < n; i++) {\\n            adjList[i] = new ArrayList<>();\\n        }\\n        for (int[] edge : edges) {\\n            int from = edge[0], to = edge[1], cost = edge[2];\\n            adjList[from].add(new int[]{to, cost});\\n        }\\n    }\\n \\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Graph {\\n    List<int[]>[] adjList;\\n    int n;\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);\\n        int[] dist = new int[n];\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[node1] = 0;\\n        pq.offer(new int[]{node1, 0});\\n        while (!pq.isEmpty()) {\\n            int[] curr = pq.poll();\\n            int node = curr[0], distance = curr[1];\\n            if (node == node2) {\\n                return distance;\\n            }\\n            if (distance > dist[node]) {\\n                continue;\\n            }\\n            for (int[] neighbor : adjList[node]) {\\n                int nextNode = neighbor[0], edgeCost = neighbor[1];\\n                int newDist = distance + edgeCost;\\n                if (newDist < dist[nextNode]) {\\n                    dist[nextNode] = newDist;\\n                    pq.offer(new int[]{nextNode, newDist});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n       \\n    public void addEdge(int[] edge) {\\n        int from = edge[0], to = edge[1], cost = edge[2];\\n        adjList[from].add(new int[]{to, cost});\\n    }\\n    \\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        adjList = new List[n];\\n        for (int i = 0; i < n; i++) {\\n            adjList[i] = new ArrayList<>();\\n        }\\n        for (int[] edge : edges) {\\n            int from = edge[0], to = edge[1], cost = edge[2];\\n            adjList[from].add(new int[]{to, cost});\\n        }\\n    }\\n \\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3428004,
                "title": "classic-dijkstra",
                "content": "\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.out = [[] for _ in range(n)]\\n        self.n = n\\n        for a, b, v in edges:\\n            self.out[a].append((b, v))\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        self.out[edge[0]].append((edge[1], edge[2]))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        col = [0] * self.n\\n        heap = [(0, node1)]\\n        while heap:\\n            dist, node = heapq.heappop(heap)\\n            if col[node] == 2:\\n                continue\\n            if node == node2:\\n                return dist\\n            col[node] = 2\\n            for neigh, val in self.out[node]:\\n                if col[neigh] != 2:\\n                    heapq.heappush(heap, (dist+val, neigh))\\n        return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.out = [[] for _ in range(n)]\\n        self.n = n\\n        for a, b, v in edges:\\n            self.out[a].append((b, v))\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        self.out[edge[0]].append((edge[1], edge[2]))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        col = [0] * self.n\\n        heap = [(0, node1)]\\n        while heap:\\n            dist, node = heapq.heappop(heap)\\n            if col[node] == 2:\\n                continue\\n            if node == node2:\\n                return dist\\n            col[node] = 2\\n            for neigh, val in self.out[node]:\\n                if col[neigh] != 2:\\n                    heapq.heappush(heap, (dist+val, neigh))\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3427477,
                "title": "python3-solution",
                "content": "```\\nclass Graph:\\n    \\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.graph = defaultdict(list)\\n        self.len = n\\n        \\n        for edge in edges:\\n            self.addEdge(edge)\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        x, y, cost = edge[0], edge[1], edge[2]\\n        self.graph[x].append([y, cost])\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        \\n        pq = []\\n        \\n        dist = [sys.maxsize] * self.len\\n        \\n        heapq.heappush(pq, (0, node1))\\n        dist[node1] = 0\\n        \\n        while pq:\\n            cost, curr = heapq.heappop(pq)\\n            if curr == node2:\\n                return cost\\n            for neighbour, cost in self.graph[curr]:\\n                if dist[neighbour] > dist[curr] + cost:\\n                    dist[neighbour] = dist[curr] + cost\\n                    heapq.heappush(pq, (dist[neighbour], neighbour))\\n        return -1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Graph:\\n    \\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.graph = defaultdict(list)\\n        self.len = n\\n        \\n        for edge in edges:\\n            self.addEdge(edge)\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        x, y, cost = edge[0], edge[1], edge[2]\\n        self.graph[x].append([y, cost])\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        \\n        pq = []\\n        \\n        dist = [sys.maxsize] * self.len\\n        \\n        heapq.heappush(pq, (0, node1))\\n        dist[node1] = 0\\n        \\n        while pq:\\n            cost, curr = heapq.heappop(pq)\\n            if curr == node2:\\n                return cost\\n            for neighbour, cost in self.graph[curr]:\\n                if dist[neighbour] > dist[curr] + cost:\\n                    dist[neighbour] = dist[curr] + cost\\n                    heapq.heappush(pq, (dist[neighbour], neighbour))\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3427440,
                "title": "dijkstra-c-with-comments",
                "content": "The problem is to create a graph and then use the dijkstra alogrithm to find the shortest distance between the two nodes.\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n// creation of an adjaceny list.\\n    unordered_map<int, vector<pair<int, int> > > adj;\\n    int count;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        //intialization of object\\n        //called intially for the creation of graph\\n        for(auto x : edges){\\n            adj[x[0]].push_back({x[1], x[2]});\\n            // this is simple graph creation, kind of an adjacency list\\n        }\\n        count = n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        // basically we need to add the graph edge with the corresponding weight\\n        // so we\\'ve created a graph and just map (u,v) with the corresponding edge weight\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        // to find the shortest path, we use dijkstra\\'s : striver approach of set\\n\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int> > > pq;\\n        pq.push({0,node1}); // 0,0;\\n        vector<int> dist(count+1, 1e9);\\n        dist[node1] = 0; // dist[S] = 0\\n\\n        while(!pq.empty()){\\n            int dis = pq.top().first;\\n            int node = pq.top().second;\\n            pq.pop();\\n\\n            for(auto it : adj[node]){\\n                if(dis + it.second < dist[it.first]){\\n                    dist[it.first] = dis + it.second;\\n                    pq.push({dist[it.first], it.first});\\n                }\\n            }\\n        }\\n\\n        // now we check that whether the node2 was reachable or not,,\\n        // if not return -1\\n        // else the distance array gives you the distance from node1 to node2\\n        if(dist[node2] == 1e9) return -1;\\n        else return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n// creation of an adjaceny list.\\n    unordered_map<int, vector<pair<int, int> > > adj;\\n    int count;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        //intialization of object\\n        //called intially for the creation of graph\\n        for(auto x : edges){\\n            adj[x[0]].push_back({x[1], x[2]});\\n            // this is simple graph creation, kind of an adjacency list\\n        }\\n        count = n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        // basically we need to add the graph edge with the corresponding weight\\n        // so we\\'ve created a graph and just map (u,v) with the corresponding edge weight\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        // to find the shortest path, we use dijkstra\\'s : striver approach of set\\n\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int> > > pq;\\n        pq.push({0,node1}); // 0,0;\\n        vector<int> dist(count+1, 1e9);\\n        dist[node1] = 0; // dist[S] = 0\\n\\n        while(!pq.empty()){\\n            int dis = pq.top().first;\\n            int node = pq.top().second;\\n            pq.pop();\\n\\n            for(auto it : adj[node]){\\n                if(dis + it.second < dist[it.first]){\\n                    dist[it.first] = dis + it.second;\\n                    pq.push({dist[it.first], it.first});\\n                }\\n            }\\n        }\\n\\n        // now we check that whether the node2 was reachable or not,,\\n        // if not return -1\\n        // else the distance array gives you the distance from node1 to node2\\n        if(dist[node2] == 1e9) return -1;\\n        else return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3427115,
                "title": "tc-sc-dijistra-algo-grapgh-min-priority-queue-adj-list",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n making the adj list globally to access the whole classes\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsteps are:\\n      1. Making the Adj list \\n      2. Making the vis or cost vector for storing the dis.\\n      3. Then dijistra algo (simple)\\n      3. Return the vis[node2] if , it is not INT_MAX or -1.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n     O(E*log(N))\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n   O(N+E) + O(N)  --> for(adj list and vis/cost vector)\\n\\n# Code\\n```\\n\\n\\n \\ntypedef  pair<int,int> pi;\\n#define pq priority_queue<pi,vector<pi>,greater<pi>>\\n\\n    int dijistra( int st, int end , int node,  vector<vector< pair<int,long long>>> &adj)\\n  {\\n \\n     vector<int>vis(node,INT_MAX);\\n      pq minH;\\n     minH.push({0,st});\\n     vis[st]=0;\\n     while(!minH.empty() && minH.top().second!=end)\\n     {\\n          auto [currD,currN]=minH.top();\\n         minH.pop();\\n         if(currD>vis[currN]) \\n         continue;\\n         for(auto &[adjN,adjD]:adj[currN])\\n         {\\n             if(adjD+currD<vis[adjN])\\n             {\\n                 vis[adjN]=adjD+currD;\\n                   minH.push({vis[adjN],adjN});\\n             }\\n             \\n         }\\n     }\\n     return vis[end]!=INT_MAX ? vis[end] :-1; \\n\\n  }\\n\\n\\nclass Graph {\\npublic:\\n    \\n\\n        \\n        vector<vector< pair<int,long long>   >> adj;\\n       \\n       \\n    Graph(int n, vector<vector<int>>& edges) {\\n           adj.resize(n);\\n        for( auto &e:edges)\\n        {\\n            adj[e[0]].push_back({e[1],e[2]});\\n        }\\n     \\n\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijistra(node1,node2, adj.size(),adj);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\n\\n \\ntypedef  pair<int,int> pi;\\n#define pq priority_queue<pi,vector<pi>,greater<pi>>\\n\\n    int dijistra( int st, int end , int node,  vector<vector< pair<int,long long>>> &adj)\\n  {\\n \\n     vector<int>vis(node,INT_MAX);\\n      pq minH;\\n     minH.push({0,st});\\n     vis[st]=0;\\n     while(!minH.empty() && minH.top().second!=end)\\n     {\\n          auto [currD,currN]=minH.top();\\n         minH.pop();\\n         if(currD>vis[currN]) \\n         continue;\\n         for(auto &[adjN,adjD]:adj[currN])\\n         {\\n             if(adjD+currD<vis[adjN])\\n             {\\n                 vis[adjN]=adjD+currD;\\n                   minH.push({vis[adjN],adjN});\\n             }\\n             \\n         }\\n     }\\n     return vis[end]!=INT_MAX ? vis[end] :-1; \\n\\n  }\\n\\n\\nclass Graph {\\npublic:\\n    \\n\\n        \\n        vector<vector< pair<int,long long>   >> adj;\\n       \\n       \\n    Graph(int n, vector<vector<int>>& edges) {\\n           adj.resize(n);\\n        for( auto &e:edges)\\n        {\\n            adj[e[0]].push_back({e[1],e[2]});\\n        }\\n     \\n\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijistra(node1,node2, adj.size(),adj);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426279,
                "title": "dijekstra-s-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust run dijekstra for all pairs of shortest paths.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- 100*(N^3)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(N*N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n       for(auto &i: edges){\\n           adj[i[0]].push_back({i[1], i[2]});\\n       }\\n       \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        set<pair<int,int>> q;\\n        q.insert({0,node1});\\n        vector<int> visited(adj.size(), 0);\\n        vector<int> dist(adj.size(), 1e9);\\n        dist[node1]=0;\\n        \\n        while(!q.empty()){\\n            pair<int,int> node = *q.begin();\\n            visited[node.second]=1;\\n            q.erase(q.begin());\\n            \\n            for(auto &i: adj[node.second]){\\n                if(!visited[i.first]){\\n                    dist[i.first]=min(dist[i.first], i.second+node.first);\\n                    q.insert({dist[i.first], i.first});\\n                }\\n            }\\n        }\\n        \\n        if(dist[node2]==1e9){\\n            return -1;\\n        }\\n        return dist[node2];   \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n       for(auto &i: edges){\\n           adj[i[0]].push_back({i[1], i[2]});\\n       }\\n       \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        set<pair<int,int>> q;\\n        q.insert({0,node1});\\n        vector<int> visited(adj.size(), 0);\\n        vector<int> dist(adj.size(), 1e9);\\n        dist[node1]=0;\\n        \\n        while(!q.empty()){\\n            pair<int,int> node = *q.begin();\\n            visited[node.second]=1;\\n            q.erase(q.begin());\\n            \\n            for(auto &i: adj[node.second]){\\n                if(!visited[i.first]){\\n                    dist[i.first]=min(dist[i.first], i.second+node.first);\\n                    q.insert({dist[i.first], i.first});\\n                }\\n            }\\n        }\\n        \\n        if(dist[node2]==1e9){\\n            return -1;\\n        }\\n        return dist[node2];   \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426209,
                "title": "c-beat-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nDijkstra\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<int>> e;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        e=vector<vector<int>>(n,vector<int>(n,INT_MAX));\\n        for(auto x:edges){\\n            e[x[0]][x[1]]=x[2];\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        e[edge[0]][edge[1]]=edge[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        int n=e.size();\\n        vector<int> dis(n,INT_MAX),vis(n);\\n        dis[node1]=0;\\n        while(1){\\n            int x=-1;\\n            for(int i=0;i<n;i++){\\n                if(!vis[i]&&(x<0||dis[i]<dis[x])) x=i;\\n            }\\n            if(x<0||dis[x]==INT_MAX){\\n                return dis[node2]<INT_MAX ? dis[node2]:-1;\\n            }\\n            vis[x]=true;\\n            for(int y=0;y<n;y++){\\n                if(e[x][y]<INT_MAX&&dis[x]+e[x][y]<dis[y]){\\n                    dis[y]=dis[x]+e[x][y];\\n                }\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<int>> e;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        e=vector<vector<int>>(n,vector<int>(n,INT_MAX));\\n        for(auto x:edges){\\n            e[x[0]][x[1]]=x[2];\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        e[edge[0]][edge[1]]=edge[2];\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        int n=e.size();\\n        vector<int> dis(n,INT_MAX),vis(n);\\n        dis[node1]=0;\\n        while(1){\\n            int x=-1;\\n            for(int i=0;i<n;i++){\\n                if(!vis[i]&&(x<0||dis[i]<dis[x])) x=i;\\n            }\\n            if(x<0||dis[x]==INT_MAX){\\n                return dis[node2]<INT_MAX ? dis[node2]:-1;\\n            }\\n            vis[x]=true;\\n            for(int y=0;y<n;y++){\\n                if(e[x][y]<INT_MAX&&dis[x]+e[x][y]<dis[y]){\\n                    dis[y]=dis[x]+e[x][y];\\n                }\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426152,
                "title": "simple-dijiskstra-neat-code-with-tc-sc",
                "content": "\\n## Time Complexity:\\n$$O((V+E)log(V+E))$$\\n\\n## Space Complexity:\\n$$O(V+E)$$\\n\\n# Code\\n```\\nclass comparator{\\n    public:\\n      bool operator()(const pair<int,int>& p1,const pair<int,int>& p2){\\n          if(p2.second < p1.second){\\n              return true;\\n          }\\n          else{\\n              return false;\\n          }\\n      }  \\n};\\n\\n\\n\\nclass Graph {\\npublic:\\n    vector<vector<vector<int>>> adjL;\\n    int n;\\n    Graph(int _n, vector<vector<int>>& edges) {\\n         n = _n;\\n        \\n        adjL.resize(n);\\n        \\n        for(auto e:edges){\\n            adjL[e[0]].push_back({e[1],e[2]});\\n        }\\n        \\n       \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adjL[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n      \\n        return dijkstra(node1,node2);\\n    }\\n    \\n    \\n    int dijkstra(int src,int dst){\\n        vector<int> dis(n,INT_MAX);\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,comparator> pq;\\n        \\n        dis[src] = 0;\\n        pq.push({src,0});\\n        \\n        while(!pq.empty()){\\n            pair<int,int> frontN = pq.top();\\n            int srcNode = frontN.first;\\n            int srcDis = frontN.second;\\n            pq.pop();\\n\\n            if(srcNode == dst){\\n                break;\\n            }\\n            \\n            for(auto i: adjL[srcNode]){\\n                int adjNode = i[0];\\n                int adjDis = i[1];\\n                int newDis = srcDis + adjDis; \\n                if(newDis < dis[adjNode]){\\n                    dis[adjNode] = newDis;\\n                    pq.push({adjNode,newDis});\\n                }\\n            }\\n        }\\n        \\n        if(dis[dst] == INT_MAX){\\n            return -1;\\n        }\\n        \\n        return dis[dst];\\n    }\\n\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass comparator{\\n    public:\\n      bool operator()(const pair<int,int>& p1,const pair<int,int>& p2){\\n          if(p2.second < p1.second){\\n              return true;\\n          }\\n          else{\\n              return false;\\n          }\\n      }  \\n};\\n\\n\\n\\nclass Graph {\\npublic:\\n    vector<vector<vector<int>>> adjL;\\n    int n;\\n    Graph(int _n, vector<vector<int>>& edges) {\\n         n = _n;\\n        \\n        adjL.resize(n);\\n        \\n        for(auto e:edges){\\n            adjL[e[0]].push_back({e[1],e[2]});\\n        }\\n        \\n       \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adjL[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n      \\n        return dijkstra(node1,node2);\\n    }\\n    \\n    \\n    int dijkstra(int src,int dst){\\n        vector<int> dis(n,INT_MAX);\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,comparator> pq;\\n        \\n        dis[src] = 0;\\n        pq.push({src,0});\\n        \\n        while(!pq.empty()){\\n            pair<int,int> frontN = pq.top();\\n            int srcNode = frontN.first;\\n            int srcDis = frontN.second;\\n            pq.pop();\\n\\n            if(srcNode == dst){\\n                break;\\n            }\\n            \\n            for(auto i: adjL[srcNode]){\\n                int adjNode = i[0];\\n                int adjDis = i[1];\\n                int newDis = srcDis + adjDis; \\n                if(newDis < dis[adjNode]){\\n                    dis[adjNode] = newDis;\\n                    pq.push({adjNode,newDis});\\n                }\\n            }\\n        }\\n        \\n        if(dis[dst] == INT_MAX){\\n            return -1;\\n        }\\n        \\n        return dis[dst];\\n    }\\n\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3425000,
                "title": "clean-java-dijkstra",
                "content": "# Complexity\\n- Time complexity of shortestPath(): O(E*logV) - time complexity of Dijkstra algorithm, we have logV due to minHeap, and E since in worst case we will have to traverse all edges before we reach destination. \\n\\nWhy it\\'s logV instead of logE: O(E*logE) -> O(E*log(V^2)) [we can move exponent outside of logarithm] -> O(E*2*logV) -> O(E*logV) [we can remove constants in Big-O notation]\\n\\n---\\n\\n- Overall Space complexity: O(V + E) V for visited array, V + E for adjList\\n\\n# Code\\n```\\nclass Graph {\\n    private Map<Integer, List<int[]>> adjList = new HashMap<>(); // from - list of pairs<to, wei>\\n    private final int n; // n is immutable since new edges(from, to) within [0, n-1]\\n\\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        for(var edge: edges) addEdge(edge);\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adjList.computeIfAbsent(edge[0], k -> new ArrayList<>())\\n                .add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    // Dijkstra alg(BFS with MinHeap): 1) Add src to queue, \\n    // 2) Pop pair(node, wei) with lowest weight, check if it\\'s dest or visited, otherwise visit node, \\n    // 3) Add all outgoing edges(with weights) from popped node to MinHeap\\n    // NB: if queue.isEmpty & dest not found -> it can\\'t be reached from src, return -1\\n    public int shortestPath(int src, int dest) {\\n        var queue = new PriorityQueue<int[]>((a, b) -> a[1] - b[1]);\\n        var visited = new boolean[n];\\n        queue.add(new int[]{src, 0}); // wei=0 since we start from src\\n\\n        while(!queue.isEmpty()) {\\n            var nodeWei = queue.poll();\\n            int node = nodeWei[0], wei = nodeWei[1];\\n\\n            if(visited[node]) continue;\\n            if(node == dest) return wei;\\n\\n            visited[node] = true;\\n\\n            adjList.getOrDefault(node, Collections.emptyList())\\n                .forEach(e -> queue.add(new int[]{e[0], wei + e[1]}));\\n        }\\n\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n    private Map<Integer, List<int[]>> adjList = new HashMap<>(); // from - list of pairs<to, wei>\\n    private final int n; // n is immutable since new edges(from, to) within [0, n-1]\\n\\n    public Graph(int n, int[][] edges) {\\n        this.n = n;\\n        for(var edge: edges) addEdge(edge);\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adjList.computeIfAbsent(edge[0], k -> new ArrayList<>())\\n                .add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    // Dijkstra alg(BFS with MinHeap): 1) Add src to queue, \\n    // 2) Pop pair(node, wei) with lowest weight, check if it\\'s dest or visited, otherwise visit node, \\n    // 3) Add all outgoing edges(with weights) from popped node to MinHeap\\n    // NB: if queue.isEmpty & dest not found -> it can\\'t be reached from src, return -1\\n    public int shortestPath(int src, int dest) {\\n        var queue = new PriorityQueue<int[]>((a, b) -> a[1] - b[1]);\\n        var visited = new boolean[n];\\n        queue.add(new int[]{src, 0}); // wei=0 since we start from src\\n\\n        while(!queue.isEmpty()) {\\n            var nodeWei = queue.poll();\\n            int node = nodeWei[0], wei = nodeWei[1];\\n\\n            if(visited[node]) continue;\\n            if(node == dest) return wei;\\n\\n            visited[node] = true;\\n\\n            adjList.getOrDefault(node, Collections.emptyList())\\n                .forEach(e -> queue.add(new int[]{e[0], wei + e[1]}));\\n        }\\n\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3424503,
                "title": "c-custom-dijkstra-1691ms-353-7mb",
                "content": "This problem requires a shortest path with an ever changing graph, so, among all the possible options, we might go for a Dijkstra that should work well, given the relatively low constraints we will face.\\n\\nWe will start declaring `maxNodes` with a value of `100` (as per specs), then at instance level:\\n* `connections`, an array of `maxNodes` vectors of pairs we will use later to track the information of each edge;\\n* `costs` is an array of `maxNodes` cells we will use in our traversal.\\n\\nIn the constructor we will take each `edge` in `edges` and:\\n* create a pair with destination (ie: `edge[1]`) and cost (ie: `edge[2]`);\\n* push said pair in the vector matching the origin (`edge[0]`) in `connection`.\\n\\nIn `addEdge` we will do the same for the provided `edge`.\\n\\nThe `shortestPath` function might carry more complexity, by:\\n* declare `res` and assign the result of calling `minPath` with `n1` and `n2`;\\n* `return` `-1` if `res == INT_MAX` or `res` otherwise.\\n\\n`minPath` will take two nodes `start` and `dest` and:\\n* `return` `0` if `start` and `end` match;\\n* declare `pq` as a min heap of vectors;\\n* fill `costs` with `INT_MAX`;\\n* set `costs[start]` to `0` (we start from there, so no cost);\\n* take each `connection` we can get from `start` (ie: `connections[start]`) and:\\n    * extract `to` and `cost` from it;\\n    * push a vector with `{cost, to, start}` in `pq`;\\n* looping with a nice optimised Dijkstra loop that will run `while` `pq` is not empty and will:\\n    * take the top of `pq` and store it in `top`;\\n    * extract `cost`, `currNode` and `prevNode` from it;\\n    * pop the top out of `pq`;\\n    * `continue` if we have already been here (ie: `costs[currNode] != INT_MAX`, since it will never be the case with a node we visited in this run);\\n    * update `costs[currNode]` to the be `cost` (since we know that the first time we reach each node also has to be the cheapest);\\n    * `break` if we reached `dest`;\\n    * if not, for each `connection` we can get from `currNode` (ie: `connections[currNode]`) we will:\\n    * extract `to` and `cost` from it;\\n    * push a vector with `{costs[currNode] + cost, to, currNode}` in `pq`;\\n* finally, `return` `costs[dest]`. \\n\\n# Complexity\\n- Time complexity: $$O(e)$$ (constructor and `shortestPath`), $$O(1)$$ (`addEdge`)\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```cpp\\nconstexpr int maxNodes = 100;\\n\\nclass Graph {\\n    vector<pair<int, int>> connections[maxNodes];\\n    int costs[maxNodes];\\n    int minPath(int start, int dest) {\\n        // edge case\\n        if (start == dest) return 0;\\n        // support variables\\n        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;\\n        // preparing costs and pq;\\n        fill(costs, costs + maxNodes, INT_MAX);\\n        costs[start] = 0;\\n        for (auto &connection: connections[start]) {\\n            auto [to, cost] = connection;\\n            pq.push({cost, to, start});\\n        }\\n        // Dijkstra!\\n        while (pq.size()) {\\n            // popping the top of pq\\n            auto &top = pq.top();\\n            int cost = top[0], currNode = top[1], prevNode = top[2];\\n            pq.pop();\\n            // already been here\\n            if (costs[currNode] != INT_MAX) continue;\\n            costs[currNode] = cost;\\n            if (currNode == dest) break;\\n            for (auto &connection: connections[currNode]) {\\n                auto [to, cost] = connection;\\n                pq.push({costs[currNode] + cost, to, currNode});\\n            }\\n        }\\n        return costs[dest];\\n    }\\npublic:\\n    Graph(int n, vector<vector<int>> &edges) {\\n        for (auto &edge: edges) connections[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        connections[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int n1, int n2) {\\n        int res = minPath(n1, n2);\\n        return res == INT_MAX ? -1 : res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Graph",
                    "Shortest Path"
                ],
                "code": "```cpp\\nconstexpr int maxNodes = 100;\\n\\nclass Graph {\\n    vector<pair<int, int>> connections[maxNodes];\\n    int costs[maxNodes];\\n    int minPath(int start, int dest) {\\n        // edge case\\n        if (start == dest) return 0;\\n        // support variables\\n        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> pq;\\n        // preparing costs and pq;\\n        fill(costs, costs + maxNodes, INT_MAX);\\n        costs[start] = 0;\\n        for (auto &connection: connections[start]) {\\n            auto [to, cost] = connection;\\n            pq.push({cost, to, start});\\n        }\\n        // Dijkstra!\\n        while (pq.size()) {\\n            // popping the top of pq\\n            auto &top = pq.top();\\n            int cost = top[0], currNode = top[1], prevNode = top[2];\\n            pq.pop();\\n            // already been here\\n            if (costs[currNode] != INT_MAX) continue;\\n            costs[currNode] = cost;\\n            if (currNode == dest) break;\\n            for (auto &connection: connections[currNode]) {\\n                auto [to, cost] = connection;\\n                pq.push({costs[currNode] + cost, to, currNode});\\n            }\\n        }\\n        return costs[dest];\\n    }\\npublic:\\n    Graph(int n, vector<vector<int>> &edges) {\\n        for (auto &edge: edges) connections[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        connections[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int n1, int n2) {\\n        int res = minPath(n1, n2);\\n        return res == INT_MAX ? -1 : res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3424187,
                "title": "javascript-2642-design-graph-with-shortest-path-calculator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n1\\n```\\nvar Graph = function (n, edges) {\\n    Graph.prototype.addEdge = function (edge) {\\n        const [f, t, c] = edge;\\n        g[f].push([t, c]);\\n    };\\n\\n    Graph.prototype.shortestPath = function (f, t) {\\n        const q = [];\\n        const c2s = new Array(n).fill(Infinity);\\n        c2s[f] = 0;\\n        q.push([f, 0]);\\n        while (q.length) {\\n            const [f, c] = q.shift();\\n            for (const [t, c] of g[f] || []) {\\n                if (c2s[t] > c2s[f] + c) {\\n                    c2s[t] = c2s[f] + c;\\n                    q.push([t, c2s[t]]);\\n                }\\n            }\\n        }\\n        return c2s[t] === Infinity ? -1 : c2s[t];\\n    };\\n\\n    g = Array.from({ length: n }, () => []);\\n    for (let i = 0; i < edges.length; i++) {\\n        this.addEdge(edges[i]);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar Graph = function (n, edges) {\\n    Graph.prototype.addEdge = function (edge) {\\n        const [f, t, c] = edge;\\n        g[f].push([t, c]);\\n    };\\n\\n    Graph.prototype.shortestPath = function (f, t) {\\n        const q = [];\\n        const c2s = new Array(n).fill(Infinity);\\n        c2s[f] = 0;\\n        q.push([f, 0]);\\n        while (q.length) {\\n            const [f, c] = q.shift();\\n            for (const [t, c] of g[f] || []) {\\n                if (c2s[t] > c2s[f] + c) {\\n                    c2s[t] = c2s[f] + c;\\n                    q.push([t, c2s[t]]);\\n                }\\n            }\\n        }\\n        return c2s[t] === Infinity ? -1 : c2s[t];\\n    };\\n\\n    g = Array.from({ length: n }, () => []);\\n    for (let i = 0; i < edges.length; i++) {\\n        this.addEdge(edges[i]);\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3424089,
                "title": "a-few-solutions",
                "content": "Compute the single-source-shortest-paths upon demand for each query from source `s` to target `t`.\\n\\n* Bellman-Ford results in TLE\\n* SPFA (shortest paths faster algorithm) is AC\\n    * this is a natural progression from Bellman-Ford, ie. we only attempt to relax candidate edges (instead of all edges)\\n\\n---\\n\\n**Bellman-Ford (TLE) Solutions:**\\n\\n*Kotlin*\\n```\\nclass Graph(N: Int, E: Array<IntArray>) {\\n    private var N = N\\n    private var E = E.toMutableList()\\n    private var INF = 1e9.toInt() + 7\\n    fun addEdge(edge: IntArray) {\\n        E.add(edge)\\n    }\\n    fun shortestPath(s: Int, t: Int): Int {\\n        var dist = IntArray(N) { INF }\\n        dist[s] = 0\\n        for (k in 0 until N - 1)\\n            for ((u, v, w) in E)\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w\\n        return if (dist[t] < INF) dist[t] else -1\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nclass Graph {\\n    constructor(N, E) {\\n        this.N = N;\\n        this.E = E;\\n    }\\n    addEdge(edge) {\\n        this.E.push(edge);\\n    }\\n    shortestPath(s, t) {\\n        let dist = Array(this.N).fill(Infinity);\\n        dist[s] = 0;\\n        for (let k = 0; k < this.N - 1; ++k)\\n            for (let [u, v, w] of this.E)\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w;\\n        return dist[t] < Infinity ? dist[t] : -1;\\n    }\\n}\\n```\\n\\n*Python3*\\n```\\nclass Graph:\\n    def __init__(self, N: int, E: List[List[int]]):\\n        self.N = N\\n        self.E = E\\n        self.INF = int(1e9 + 7)\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.E.append(edge)\\n\\n    def shortestPath(self, s: int, t: int) -> int:\\n        N, E, INF = self.N, self.E, self.INF\\n        dist = [INF] * N\\n        dist[s] = 0\\n        for _ in range(len(E) - 1):\\n            for u, v, w in E:\\n                dist[v] = min(dist[v], dist[u] + w)\\n        return dist[t] if dist[t] < INF else -1\\n```\\n\\n*Rust*\\n```\\n// TODO: implement me!\\n```\\n\\n*C++*\\n```\\nclass Graph {\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    int N, INF;\\n    VVI E;\\npublic:\\n    Graph(int N, VVI& E) : N{ N }, INF{ int(1e9 + 7) }, E{ E } {}\\n    void addEdge(VI edge) { E.emplace_back(edge); }\\n    int shortestPath(int s, int t) {\\n        VI dist(N, INF);\\n        dist[s] = 0;\\n        for (auto k{ 0 }; k < N - 1; ++k) {\\n            for (auto& edge: E) {\\n                auto [u, v, w] = tie(edge[0], edge[1], edge[2]);\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w;\\n            }\\n        }\\n        return dist[t] < INF ? dist[t] : -1;\\n    }\\n};\\n```\\n\\n**SPFA (AC) Solutions:**\\n\\n*Kotlin*\\n```\\nclass Graph(N: Int, E: Array<IntArray>) {\\n    private var N = N\\n    private var adj = mutableMapOf<Int, MutableList<Pair<Int, Int>>>();\\n    private var INF = 1e9.toInt() + 7\\n    init {\\n        for (i in 0 until N)\\n            adj[i] = mutableListOf<Pair<Int, Int>>()\\n        for ((u, v, w) in E)\\n            adj[u]!!.add(Pair(v, w))\\n    }\\n    fun addEdge(edge: IntArray) {\\n        var (u, v, w) = edge\\n        adj[u]!!.add(Pair(v, w))\\n    }\\n    fun shortestPath(s: Int, t: Int): Int {\\n        var dist = IntArray(N) { INF }\\n        dist[s] = 0\\n        var q: Queue<Int> = LinkedList<Int>(listOf(s))\\n        while (0 < q.size) {\\n            var k = q.size\\n            while (0 < k--) {\\n                var u = q.poll()\\n                for ((v, w) in adj[u]!!) {\\n                    if (dist[v] > dist[u] + w) {\\n                        dist[v] = dist[u] + w; q.add(v)\\n                    }\\n                }\\n            }\\n        }\\n        return if (dist[t] < INF) dist[t] else -1\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nclass Graph {\\n    constructor(N, E) {\\n        this.N = N;\\n        this.adj = new Map([...Array(N).keys()].map(i => [i, []]));\\n        for (let [u, v, w] of E)\\n            this.adj.get(u).push([v, w]);\\n    }\\n    addEdge(edge) {\\n        let [u, v, w] = edge;\\n        this.adj.get(u).push([v, w]);\\n    }\\n    shortestPath(s, t) {\\n        let dist = Array(this.N).fill(Infinity);\\n        dist[s] = 0;\\n        let q = [s];\\n        while (q.length) {\\n            let k = q.length;\\n            while (k--) {\\n                let u = q.shift();\\n                for (let [v, w] of this.adj.get(u))\\n                    if (dist[v] > dist[u] + w)\\n                        dist[v] = dist[u] + w, q.push(v);\\n            }\\n        }\\n        return dist[t] < Infinity ? dist[t] : -1;\\n    }\\n}\\n```\\n\\n*Python3*\\n```\\nclass Graph:\\n    def __init__(self, N: int, E: List[List[int]]):\\n        self.N = N\\n        self.adj = defaultdict(list)\\n        for u, v, w in E:\\n            self.adj[u].append((v, w))\\n        self.INF = int(1e9 + 7)\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.adj[u].append((v, w))\\n\\n    def shortestPath(self, s: int, t: int) -> int:\\n        N, adj, INF = self.N, self.adj, self.INF\\n        dist = [INF] * N\\n        dist[s] = 0\\n        q = deque([s])\\n        while q:\\n            for _ in range(len(q)):\\n                u = q.popleft()\\n                for v, w in adj[u]:\\n                    if dist[v] > dist[u] + w:\\n                        dist[v] = dist[u] + w; q.append(v)\\n        return dist[t] if dist[t] < INF else -1\\n```\\n\\n*Rust*\\n```\\n// TODO: implement me!\\n```\\n\\n*C++*\\n```\\nclass Graph {\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    using Queue = queue<int>;\\n    using Pair = pair<int, int>;\\n    using Pairs = vector<Pair>;\\n    using Map = unordered_map<int, Pairs>;\\n    int N, INF;\\n    Map adj;\\npublic:\\n    Graph(int N, VVI& E) : N{ N }, INF{ int(1e9 + 7) } {\\n        for (auto& edge: E) {\\n            auto [u, v, w] = tie(edge[0], edge[1], edge[2]);\\n            adj[u].emplace_back(v, w);\\n        }\\n    }\\n    void addEdge(VI edge) {\\n        auto [u, v, w] = tie(edge[0], edge[1], edge[2]);\\n        adj[u].emplace_back(v, w);\\n    }\\n    int shortestPath(int s, int t) {\\n        VI dist(N, INF);\\n        dist[s] = 0;\\n        Queue q{{{ s }}};\\n        while (q.size()) {\\n            auto u = q.front(); q.pop();\\n            for (auto [v, w]: adj[u])\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w, q.push(v);\\n        }\\n        return dist[t] < INF ? dist[t] : -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Graph(N: Int, E: Array<IntArray>) {\\n    private var N = N\\n    private var E = E.toMutableList()\\n    private var INF = 1e9.toInt() + 7\\n    fun addEdge(edge: IntArray) {\\n        E.add(edge)\\n    }\\n    fun shortestPath(s: Int, t: Int): Int {\\n        var dist = IntArray(N) { INF }\\n        dist[s] = 0\\n        for (k in 0 until N - 1)\\n            for ((u, v, w) in E)\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w\\n        return if (dist[t] < INF) dist[t] else -1\\n    }\\n}\\n```\n```\\nclass Graph {\\n    constructor(N, E) {\\n        this.N = N;\\n        this.E = E;\\n    }\\n    addEdge(edge) {\\n        this.E.push(edge);\\n    }\\n    shortestPath(s, t) {\\n        let dist = Array(this.N).fill(Infinity);\\n        dist[s] = 0;\\n        for (let k = 0; k < this.N - 1; ++k)\\n            for (let [u, v, w] of this.E)\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w;\\n        return dist[t] < Infinity ? dist[t] : -1;\\n    }\\n}\\n```\n```\\nclass Graph:\\n    def __init__(self, N: int, E: List[List[int]]):\\n        self.N = N\\n        self.E = E\\n        self.INF = int(1e9 + 7)\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.E.append(edge)\\n\\n    def shortestPath(self, s: int, t: int) -> int:\\n        N, E, INF = self.N, self.E, self.INF\\n        dist = [INF] * N\\n        dist[s] = 0\\n        for _ in range(len(E) - 1):\\n            for u, v, w in E:\\n                dist[v] = min(dist[v], dist[u] + w)\\n        return dist[t] if dist[t] < INF else -1\\n```\n```\\n// TODO: implement me!\\n```\n```\\nclass Graph {\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    int N, INF;\\n    VVI E;\\npublic:\\n    Graph(int N, VVI& E) : N{ N }, INF{ int(1e9 + 7) }, E{ E } {}\\n    void addEdge(VI edge) { E.emplace_back(edge); }\\n    int shortestPath(int s, int t) {\\n        VI dist(N, INF);\\n        dist[s] = 0;\\n        for (auto k{ 0 }; k < N - 1; ++k) {\\n            for (auto& edge: E) {\\n                auto [u, v, w] = tie(edge[0], edge[1], edge[2]);\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w;\\n            }\\n        }\\n        return dist[t] < INF ? dist[t] : -1;\\n    }\\n};\\n```\n```\\nclass Graph(N: Int, E: Array<IntArray>) {\\n    private var N = N\\n    private var adj = mutableMapOf<Int, MutableList<Pair<Int, Int>>>();\\n    private var INF = 1e9.toInt() + 7\\n    init {\\n        for (i in 0 until N)\\n            adj[i] = mutableListOf<Pair<Int, Int>>()\\n        for ((u, v, w) in E)\\n            adj[u]!!.add(Pair(v, w))\\n    }\\n    fun addEdge(edge: IntArray) {\\n        var (u, v, w) = edge\\n        adj[u]!!.add(Pair(v, w))\\n    }\\n    fun shortestPath(s: Int, t: Int): Int {\\n        var dist = IntArray(N) { INF }\\n        dist[s] = 0\\n        var q: Queue<Int> = LinkedList<Int>(listOf(s))\\n        while (0 < q.size) {\\n            var k = q.size\\n            while (0 < k--) {\\n                var u = q.poll()\\n                for ((v, w) in adj[u]!!) {\\n                    if (dist[v] > dist[u] + w) {\\n                        dist[v] = dist[u] + w; q.add(v)\\n                    }\\n                }\\n            }\\n        }\\n        return if (dist[t] < INF) dist[t] else -1\\n    }\\n}\\n```\n```\\nclass Graph {\\n    constructor(N, E) {\\n        this.N = N;\\n        this.adj = new Map([...Array(N).keys()].map(i => [i, []]));\\n        for (let [u, v, w] of E)\\n            this.adj.get(u).push([v, w]);\\n    }\\n    addEdge(edge) {\\n        let [u, v, w] = edge;\\n        this.adj.get(u).push([v, w]);\\n    }\\n    shortestPath(s, t) {\\n        let dist = Array(this.N).fill(Infinity);\\n        dist[s] = 0;\\n        let q = [s];\\n        while (q.length) {\\n            let k = q.length;\\n            while (k--) {\\n                let u = q.shift();\\n                for (let [v, w] of this.adj.get(u))\\n                    if (dist[v] > dist[u] + w)\\n                        dist[v] = dist[u] + w, q.push(v);\\n            }\\n        }\\n        return dist[t] < Infinity ? dist[t] : -1;\\n    }\\n}\\n```\n```\\nclass Graph:\\n    def __init__(self, N: int, E: List[List[int]]):\\n        self.N = N\\n        self.adj = defaultdict(list)\\n        for u, v, w in E:\\n            self.adj[u].append((v, w))\\n        self.INF = int(1e9 + 7)\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.adj[u].append((v, w))\\n\\n    def shortestPath(self, s: int, t: int) -> int:\\n        N, adj, INF = self.N, self.adj, self.INF\\n        dist = [INF] * N\\n        dist[s] = 0\\n        q = deque([s])\\n        while q:\\n            for _ in range(len(q)):\\n                u = q.popleft()\\n                for v, w in adj[u]:\\n                    if dist[v] > dist[u] + w:\\n                        dist[v] = dist[u] + w; q.append(v)\\n        return dist[t] if dist[t] < INF else -1\\n```\n```\\n// TODO: implement me!\\n```\n```\\nclass Graph {\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    using Queue = queue<int>;\\n    using Pair = pair<int, int>;\\n    using Pairs = vector<Pair>;\\n    using Map = unordered_map<int, Pairs>;\\n    int N, INF;\\n    Map adj;\\npublic:\\n    Graph(int N, VVI& E) : N{ N }, INF{ int(1e9 + 7) } {\\n        for (auto& edge: E) {\\n            auto [u, v, w] = tie(edge[0], edge[1], edge[2]);\\n            adj[u].emplace_back(v, w);\\n        }\\n    }\\n    void addEdge(VI edge) {\\n        auto [u, v, w] = tie(edge[0], edge[1], edge[2]);\\n        adj[u].emplace_back(v, w);\\n    }\\n    int shortestPath(int s, int t) {\\n        VI dist(N, INF);\\n        dist[s] = 0;\\n        Queue q{{{ s }}};\\n        while (q.size()) {\\n            auto u = q.front(); q.pop();\\n            for (auto [v, w]: adj[u])\\n                if (dist[v] > dist[u] + w)\\n                    dist[v] = dist[u] + w, q.push(v);\\n        }\\n        return dist[t] < INF ? dist[t] : -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423912,
                "title": "easy-and-simple-bfs-solution-with-dijkstra-c-beats-100-speed-and-memory",
                "content": "**Approach**\\nCreate the adjacency list and perform simple diskstra each time shortestPath function is invoked.\\n\\n**Complexity**\\nTime complexity: O(E x log(V)) \\nSpace complexity: O(E + V)\\n\\n\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for(auto it:edges)\\n            adj[it[0]].push_back({it[1],it[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(100,1e9);\\n        \\n        typedef pair<int,int> pi;\\n        priority_queue<pi,vector<pi>,greater<pi>>pq;\\n        pq.push({0,node1});\\n        dist[node1]=0;\\n        \\n        while(!pq.empty()){\\n            auto [dis,node] = pq.top();\\n            pq.pop();\\n            \\n            for(auto it:adj[node]){\\n                if(dis+it.second<dist[it.first]){\\n                    dist[it.first]=dis+it.second;\\n                    pq.push({dist[it.first],it.first});\\n                }\\n            }   \\n        }\\n        return dist[node2]==1e9?-1:dist[node2];\\n    }\\n};\\n```\\nPls upvote if this solution helps you!",
                "solutionTags": [
                    "C",
                    "Breadth-First Search",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for(auto it:edges)\\n            adj[it[0]].push_back({it[1],it[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(100,1e9);\\n        \\n        typedef pair<int,int> pi;\\n        priority_queue<pi,vector<pi>,greater<pi>>pq;\\n        pq.push({0,node1});\\n        dist[node1]=0;\\n        \\n        while(!pq.empty()){\\n            auto [dis,node] = pq.top();\\n            pq.pop();\\n            \\n            for(auto it:adj[node]){\\n                if(dis+it.second<dist[it.first]){\\n                    dist[it.first]=dis+it.second;\\n                    pq.push({dist[it.first],it.first});\\n                }\\n            }   \\n        }\\n        return dist[node2]==1e9?-1:dist[node2];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423890,
                "title": "java-bfs-dijsktra",
                "content": "```\\nclass Graph {\\n    private List<Pair<Integer, Integer>>[] graph; \\n    private int N;\\n\\n    public Graph(int n, int[][] edges) {\\n        N = n;\\n        graph = new ArrayList[N+1];\\n        for (int i = 0; i <= n; i++) \\n            graph[i] = new ArrayList<>();\\n\\n        for (int[] edge : edges) {\\n            int u = edge[0], v = edge[1], w = edge[2];\\n            graph[u].add(new Pair<>(v, w));\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        int u = edge[0], v = edge[1], w = edge[2];\\n        graph[u].add(new Pair<>(v, w));\\n    }\\n\\n    public int shortestPath(int start, int end) {\\n        \\n        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(\\n            (a, b) -> a.getValue() - b.getValue());\\n        \\n        int[] dist = new int[N+1]; // distance array\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n\\n        dist[start] = 0;\\n        pq.add(new Pair<>(start, 0));\\n\\n        while (!pq.isEmpty()) {\\n            Pair<Integer, Integer> node = pq.poll();\\n            int vtx = node.getKey();\\n\\n            for (Pair<Integer, Integer> nbr : graph[vtx]) {\\n                int nbrNode = nbr.getKey();\\n                int nbrDist = nbr.getValue();\\n\\n                if (dist[vtx] + nbrDist < dist[nbrNode]) { \\n                // (WSF for current vtx + dist to reach this nbr) < (current saved dist)\\n                    dist[nbrNode] = dist[vtx] + nbrDist;\\n                    // update the dist array with current distance added\\n                    pq.add(new Pair<>(nbrNode, dist[nbrNode]));\\n                }\\n            }\\n        }\\n\\n        return dist[end] == Integer.MAX_VALUE ? -1 : dist[end];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\n    private List<Pair<Integer, Integer>>[] graph; \\n    private int N;\\n\\n    public Graph(int n, int[][] edges) {\\n        N = n;\\n        graph = new ArrayList[N+1];\\n        for (int i = 0; i <= n; i++) \\n            graph[i] = new ArrayList<>();\\n\\n        for (int[] edge : edges) {\\n            int u = edge[0], v = edge[1], w = edge[2];\\n            graph[u].add(new Pair<>(v, w));\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        int u = edge[0], v = edge[1], w = edge[2];\\n        graph[u].add(new Pair<>(v, w));\\n    }\\n\\n    public int shortestPath(int start, int end) {\\n        \\n        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(\\n            (a, b) -> a.getValue() - b.getValue());\\n        \\n        int[] dist = new int[N+1]; // distance array\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n\\n        dist[start] = 0;\\n        pq.add(new Pair<>(start, 0));\\n\\n        while (!pq.isEmpty()) {\\n            Pair<Integer, Integer> node = pq.poll();\\n            int vtx = node.getKey();\\n\\n            for (Pair<Integer, Integer> nbr : graph[vtx]) {\\n                int nbrNode = nbr.getKey();\\n                int nbrDist = nbr.getValue();\\n\\n                if (dist[vtx] + nbrDist < dist[nbrNode]) { \\n                // (WSF for current vtx + dist to reach this nbr) < (current saved dist)\\n                    dist[nbrNode] = dist[vtx] + nbrDist;\\n                    // update the dist array with current distance added\\n                    pq.add(new Pair<>(nbrNode, dist[nbrNode]));\\n                }\\n            }\\n        }\\n\\n        return dist[end] == Integer.MAX_VALUE ? -1 : dist[end];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423683,
                "title": "my-simple-c-solution-simple-dijkstra-100-faster",
                "content": "![image](https://assets.leetcode.com/users/images/c8e5aa32-b2e9-4edf-a808-aa353f04f268_1681652504.094857.png)\\n\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>> graph; \\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        graph.resize(n);\\n        this->n = n; \\n        for(auto &edge: edges) {\\n            int a = edge[0];\\n            int b = edge[1];\\n            int cost = edge[2];\\n            \\n            graph[a].push_back({b,cost}); \\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0];\\n        int b = edge[1];\\n        \\n        int cost = edge[2];\\n        \\n        graph[a].push_back({b,cost}); \\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\n        vector<int> dis(n, INT_MAX);\\n        dis[node1] = 0;\\n        vector<bool> vis(n, false);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; \\n        pq.push({0, node1});\\n        \\n        while(!pq.empty()) {\\n            auto front = pq.top();\\n            pq.pop();\\n            \\n            if(front.second == node2) return front.first; \\n            if(vis[front.second]) continue;\\n            vis[front.second] = true; \\n            \\n            for(auto &nb: graph[front.second]) {\\n                if(not vis[nb.first]) {\\n                    dis[nb.first] = min(dis[nb.first], nb.second+front.first);\\n                    pq.push({dis[nb.first], nb.first}); \\n                }\\n            }\\n        }\\n        \\n        \\n        return -1; \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n ```",
                "solutionTags": [],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>> graph; \\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        graph.resize(n);\\n        this->n = n; \\n        for(auto &edge: edges) {\\n            int a = edge[0];\\n            int b = edge[1];\\n            int cost = edge[2];\\n            \\n            graph[a].push_back({b,cost}); \\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0];\\n        int b = edge[1];\\n        \\n        int cost = edge[2];\\n        \\n        graph[a].push_back({b,cost}); \\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\n        vector<int> dis(n, INT_MAX);\\n        dis[node1] = 0;\\n        vector<bool> vis(n, false);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq; \\n        pq.push({0, node1});\\n        \\n        while(!pq.empty()) {\\n            auto front = pq.top();\\n            pq.pop();\\n            \\n            if(front.second == node2) return front.first; \\n            if(vis[front.second]) continue;\\n            vis[front.second] = true; \\n            \\n            for(auto &nb: graph[front.second]) {\\n                if(not vis[nb.first]) {\\n                    dis[nb.first] = min(dis[nb.first], nb.second+front.first);\\n                    pq.push({dis[nb.first], nb.first}); \\n                }\\n            }\\n        }\\n        \\n        \\n        return -1; \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 3423648,
                "title": "super-easy-brute-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    int n;\\n    \\n    vector<pair<int, int>> adj[100];\\n    \\n    void shortest(int node, vector<int> &dist){\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, node});\\n        dist[node] = 0;\\n        while(!pq.empty()){\\n            auto nde = pq.top();\\n            pq.pop();\\n            int wtt = nde.first;\\n            int nd = nde.second;\\n            for(auto &i : adj[nd]){\\n                int wt = i.first;\\n                int nbr = i.second;\\n                if(dist[nd] + wt < dist[nbr]){\\n                    dist[nbr] = dist[nd] + wt;\\n                    pq.push({dist[nbr], nbr});\\n                }\\n            }\\n        }\\n    }\\n\\n    Graph(int N, vector<vector<int>>& edges) {\\n        n = N;\\n        for(auto &e : edges){\\n            adj[e[0]].push_back({e[2], e[1]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[2], edge[1]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n, INT_MAX);\\n        shortest(node1, dist);\\n        return dist[node2] == INT_MAX ? -1 : dist[node2];\\n    } \\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    int n;\\n    \\n    vector<pair<int, int>> adj[100];\\n    \\n    void shortest(int node, vector<int> &dist){\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, node});\\n        dist[node] = 0;\\n        while(!pq.empty()){\\n            auto nde = pq.top();\\n            pq.pop();\\n            int wtt = nde.first;\\n            int nd = nde.second;\\n            for(auto &i : adj[nd]){\\n                int wt = i.first;\\n                int nbr = i.second;\\n                if(dist[nd] + wt < dist[nbr]){\\n                    dist[nbr] = dist[nd] + wt;\\n                    pq.push({dist[nbr], nbr});\\n                }\\n            }\\n        }\\n    }\\n\\n    Graph(int N, vector<vector<int>>& edges) {\\n        n = N;\\n        for(auto &e : edges){\\n            adj[e[0]].push_back({e[2], e[1]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[2], edge[1]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n, INT_MAX);\\n        shortest(node1, dist);\\n        return dist[node2] == INT_MAX ? -1 : dist[node2];\\n    } \\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423620,
                "title": "dijkstra-java-simple-and-easy",
                "content": "\\n# Code\\n```\\nclass Graph {\\n    public HashMap<Integer,HashMap<Integer,Integer>> map=new HashMap<>();\\n    public Graph(int n, int[][] edges) {\\n        for(int i=0;i<n;i++){\\n            map.put(i,new HashMap<>());\\n        }\\n        for(int i=0;i<edges.length;i++){\\n            map.get(edges[i][0]).put(edges[i][1],edges[i][2]);\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        map.get(edge[0]).put(edge[1],edge[2]);\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<pairs> pq=new PriorityQueue<>(new Comparator<pairs>() {\\n            @Override\\n            public int compare(pairs o1,pairs o2){\\n                return o1.cost-o2.cost;\\n            }\\n        });\\n        HashSet<Integer> visited=new HashSet<>();\\n        pq.add(new pairs(node1,0));\\n        while(!pq.isEmpty()){\\n            pairs rv=pq.remove();\\n            if(visited.contains(rv.vtx)){\\n                continue;\\n            }\\n            if(rv.vtx==node2){\\n                return rv.cost;\\n            } \\n            visited.add(rv.vtx);\\n            for(int nbrs:map.get(rv.vtx).keySet()){\\n                if(!visited.contains(nbrs)){\\n                    pq.add(new pairs(nbrs,rv.cost+map.get(rv.vtx).get(nbrs)));\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\nclass pairs{\\n        int vtx;\\n        int cost;\\n        pairs(int e1,int cost){\\n            this.vtx=e1;\\n            this.cost=cost;\\n        }\\n    }\\n\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n    public HashMap<Integer,HashMap<Integer,Integer>> map=new HashMap<>();\\n    public Graph(int n, int[][] edges) {\\n        for(int i=0;i<n;i++){\\n            map.put(i,new HashMap<>());\\n        }\\n        for(int i=0;i<edges.length;i++){\\n            map.get(edges[i][0]).put(edges[i][1],edges[i][2]);\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        map.get(edge[0]).put(edge[1],edge[2]);\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<pairs> pq=new PriorityQueue<>(new Comparator<pairs>() {\\n            @Override\\n            public int compare(pairs o1,pairs o2){\\n                return o1.cost-o2.cost;\\n            }\\n        });\\n        HashSet<Integer> visited=new HashSet<>();\\n        pq.add(new pairs(node1,0));\\n        while(!pq.isEmpty()){\\n            pairs rv=pq.remove();\\n            if(visited.contains(rv.vtx)){\\n                continue;\\n            }\\n            if(rv.vtx==node2){\\n                return rv.cost;\\n            } \\n            visited.add(rv.vtx);\\n            for(int nbrs:map.get(rv.vtx).keySet()){\\n                if(!visited.contains(nbrs)){\\n                    pq.add(new pairs(nbrs,rv.cost+map.get(rv.vtx).get(nbrs)));\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\nclass pairs{\\n        int vtx;\\n        int cost;\\n        pairs(int e1,int cost){\\n            this.vtx=e1;\\n            this.cost=cost;\\n        }\\n    }\\n\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423578,
                "title": "using-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach: **Dijkstra algorithm** \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<pair<int,int>>adj[101];\\n    int size;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        size=n;\\n         for(auto i:edges){\\n            adj[i[0]].push_back({i[1],i[2]});\\n         } \\n    }\\n\\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n       // priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        set<pair<int,int>>st;\\n        vector<int>dist(size+1,INT_MAX);\\n        dist[node1]=0;\\n        //pq.push({0,node1});\\n        st.insert({0,node1});\\n        while(!st.empty()){\\n            auto it = *(st.begin());\\n            int Nodedist=it.first;\\n            int node=it.second;\\n            st.erase(it);\\n            for(auto it:adj[node]){\\n                int edwt = it.second;\\n                int adjNode= it.first;\\n                if(Nodedist+edwt<dist[adjNode]){\\n                    if(dist[adjNode]!= INT_MAX)\\n                        st.erase({dist[adjNode],adjNode});\\n                    \\n                    dist[adjNode]=Nodedist+edwt;\\n                    st.insert({dist[adjNode],adjNode});\\n                    //pq.push({dist[adjNode],adjNode});\\n                }\\n            }\\n        }\\n        if(dist[node2]==INT_MAX) return -1;\\n        return dist[node2];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<pair<int,int>>adj[101];\\n    int size;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        size=n;\\n         for(auto i:edges){\\n            adj[i[0]].push_back({i[1],i[2]});\\n         } \\n    }\\n\\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n       // priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        set<pair<int,int>>st;\\n        vector<int>dist(size+1,INT_MAX);\\n        dist[node1]=0;\\n        //pq.push({0,node1});\\n        st.insert({0,node1});\\n        while(!st.empty()){\\n            auto it = *(st.begin());\\n            int Nodedist=it.first;\\n            int node=it.second;\\n            st.erase(it);\\n            for(auto it:adj[node]){\\n                int edwt = it.second;\\n                int adjNode= it.first;\\n                if(Nodedist+edwt<dist[adjNode]){\\n                    if(dist[adjNode]!= INT_MAX)\\n                        st.erase({dist[adjNode],adjNode});\\n                    \\n                    dist[adjNode]=Nodedist+edwt;\\n                    st.insert({dist[adjNode],adjNode});\\n                    //pq.push({dist[adjNode],adjNode});\\n                }\\n            }\\n        }\\n        if(dist[node2]==INT_MAX) return -1;\\n        return dist[node2];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423025,
                "title": "c-dijkstra",
                "content": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n = n;\\n        adj.clear();\\n        adj.resize(n);\\n        for(auto &e : edges){\\n            addEdge(e);\\n        }\\n    }\\n    \\n    void addEdge(vector<int> e) {\\n        adj[e[0]].push_back({e[2], e[1]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;\\n        pq.push({0, node1});\\n        \\n        vector<int> dist(n, INT_MAX);\\n        dist[node1] = 0;\\n        \\n        while(!pq.empty()){\\n            int wt = pq.top().first, u=pq.top().second;\\n            pq.pop();\\n            for(auto &child : adj[u]){\\n                int wt2 = child.first, v = child.second;\\n                if(dist[v] > dist[u]+wt2){\\n                    dist[v] = dist[u]+wt2;\\n                    pq.push({dist[v], v});\\n                }\\n            }\\n        }\\n        \\n        return dist[node2]==INT_MAX ? -1 : dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```\\nplease **UPVOTE**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Breadth-First Search",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this->n = n;\\n        adj.clear();\\n        adj.resize(n);\\n        for(auto &e : edges){\\n            addEdge(e);\\n        }\\n    }\\n    \\n    void addEdge(vector<int> e) {\\n        adj[e[0]].push_back({e[2], e[1]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;\\n        pq.push({0, node1});\\n        \\n        vector<int> dist(n, INT_MAX);\\n        dist[node1] = 0;\\n        \\n        while(!pq.empty()){\\n            int wt = pq.top().first, u=pq.top().second;\\n            pq.pop();\\n            for(auto &child : adj[u]){\\n                int wt2 = child.first, v = child.second;\\n                if(dist[v] > dist[u]+wt2){\\n                    dist[v] = dist[u]+wt2;\\n                    pq.push({dist[v], v});\\n                }\\n            }\\n        }\\n        \\n        return dist[node2]==INT_MAX ? -1 : dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3422725,
                "title": "dijkstra-s-shortest-path-algo-clean-code-java",
                "content": "# Intuition\\nThe graph is clearly Directed + Weighted, and problem demands shortest paths between 2 nodes. Hence, Dijkstra\\'s is the simplest approach to run each time ```int shortestPath(int node1, int node2)``` is executed.\\n\\n# Approach\\n1. To traverse any graph (BFS or DFS or DIJKSTRA), we need an aadjacency list. This lets you look up a node\\'s neighbors in ```O(1)``` Time while using ```(V * E)``` Space. From there we add each edge to this data structure.\\n\\n2. Dijsktra\\'s Shortest path requires you to maintain the shortest distance found for all N nodes. We also need a PriorityQueue i.e Min Heap to organize the nodes being traversed. This PriorityQueue holds nodes represented by a. nodeID and b. distance traveled to reach this node so far. The Heap will prioritize the nodes with the LEAST distance traveled.\\n3. For each node popped from the heap, explore the neighbors pulled from the adjacency list. Each neighbor/child node will have its cost added to the popped node\\'s distance traveled. If the total is an improvement on the child\\'s min distance, update it and enqueue it into the Heap.\\n4. Eventually all reachable nodes will have their min distance optimized to the abosulte best, and the heap has nothing to be enqueued (i.e. empty). Remember that the starting node may not be able to reach the target node.\\n\\n# Complexity\\n- Time complexity:\\n```O(E * log|V|) ``` since the Heap takes ```log(v)``` to pop the next node each time. This is multiplied by ```(E + V)``` because we are traversing all neighboring nodes (i.e. number of edges). This does not TLE only because the number of times ```int shortestPath(int node1, int node2)``` is executed is at most 100x.\\n\\n- Space complexity:\\n```(V * E)``` to store adjacency list.\\n\\nIf something in this seems incorrect, feel free to comment.\\n\\n# Code\\n```\\nclass Graph {\\n    \\n    List<Pair<Integer, Integer>>[] adjList;\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        produceAdjList(n, edges);\\n    }\\n    \\n    private void produceAdjList(int n, int[][] edges) {\\n        // Initialize adjacency list with empty neighbors per node.\\n        this.n = n;\\n        this.adjList = new ArrayList[n];\\n\\n        for (int i = 0; i < n; i++)\\n            adjList[i] = new ArrayList();\\n        \\n        // Populate adjacency list with each edge.\\n        for (int[] edge : edges)\\n            addEdge(edge);\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        // For FROM, add connection with TO + COST.\\n        int from = edge[0], to = edge[1], cost = edge[2];\\n        adjList[from].add(new Pair(to, cost));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        // Maintain shortest path found per node.\\n        int[] minDist = new int[n];\\n        Arrays.fill(minDist, Integer.MAX_VALUE);\\n        \\n        // Begin with starting node having min distance 0.\\n        minDist[node1] = 0;\\n\\n        // PriorityQueue sorts nodes by those traveling smallest distance.\\n        // Each Pair is represented as [nodeId, distanceTraveled].\\n        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());\\n\\n        // Enque first node with 0 distance.\\n        pq.add(new Pair(node1, 0));\\n\\n        // Execute Dijkstra\\'s Shortest path.\\n        while (!pq.isEmpty()) {\\n            // Get next node.\\n            Pair<Integer, Integer> entry = pq.poll();\\n            int node = entry.getKey();\\n            int dist = entry.getValue();\\n            \\n            // Go thru neighbors to continue search.\\n            for (var child : adjList[node]) {\\n                // Check if distance is improved.\\n                int childDist = child.getValue() + dist;\\n                int childNode = child.getKey();\\n                if (childDist < minDist[childNode]) {\\n                    // Mark new shortest distance and enqeue node.\\n                    minDist[childNode] = childDist;\\n                    pq.add(new Pair(childNode, childDist));\\n                }\\n            }\\n        }\\n        \\n        // Send result if we ever found the target.\\n        return minDist[node2] == Integer.MAX_VALUE ? -1 : minDist[node2];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Graph"
                ],
                "code": "```int shortestPath(int node1, int node2)```\n```O(1)```\n```(V * E)```\n```O(E * log|V|) ```\n```log(v)```\n```(E + V)```\n```int shortestPath(int node1, int node2)```\n```(V * E)```\n```\\nclass Graph {\\n    \\n    List<Pair<Integer, Integer>>[] adjList;\\n    int n;\\n    public Graph(int n, int[][] edges) {\\n        produceAdjList(n, edges);\\n    }\\n    \\n    private void produceAdjList(int n, int[][] edges) {\\n        // Initialize adjacency list with empty neighbors per node.\\n        this.n = n;\\n        this.adjList = new ArrayList[n];\\n\\n        for (int i = 0; i < n; i++)\\n            adjList[i] = new ArrayList();\\n        \\n        // Populate adjacency list with each edge.\\n        for (int[] edge : edges)\\n            addEdge(edge);\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        // For FROM, add connection with TO + COST.\\n        int from = edge[0], to = edge[1], cost = edge[2];\\n        adjList[from].add(new Pair(to, cost));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        // Maintain shortest path found per node.\\n        int[] minDist = new int[n];\\n        Arrays.fill(minDist, Integer.MAX_VALUE);\\n        \\n        // Begin with starting node having min distance 0.\\n        minDist[node1] = 0;\\n\\n        // PriorityQueue sorts nodes by those traveling smallest distance.\\n        // Each Pair is represented as [nodeId, distanceTraveled].\\n        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());\\n\\n        // Enque first node with 0 distance.\\n        pq.add(new Pair(node1, 0));\\n\\n        // Execute Dijkstra\\'s Shortest path.\\n        while (!pq.isEmpty()) {\\n            // Get next node.\\n            Pair<Integer, Integer> entry = pq.poll();\\n            int node = entry.getKey();\\n            int dist = entry.getValue();\\n            \\n            // Go thru neighbors to continue search.\\n            for (var child : adjList[node]) {\\n                // Check if distance is improved.\\n                int childDist = child.getValue() + dist;\\n                int childNode = child.getKey();\\n                if (childDist < minDist[childNode]) {\\n                    // Mark new shortest distance and enqeue node.\\n                    minDist[childNode] = childDist;\\n                    pq.add(new Pair(childNode, childDist));\\n                }\\n            }\\n        }\\n        \\n        // Send result if we ever found the target.\\n        return minDist[node2] == Integer.MAX_VALUE ? -1 : minDist[node2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421986,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\n#[derive(Debug, Clone, PartialEq, Eq, Hash)]\\nstruct Graph {\\n    al: Vec<Vec<(usize, i32)>>,\\n}\\n\\nimpl Graph {\\n    fn new(n: i32, edges: Vec<Vec<i32>>) -> Self {\\n        let mut al = vec![vec![]; n as usize];\\n        for e in edges {\\n            al[e[0] as usize].push((e[1] as usize, e[2]));\\n        }\\n        Self { al }\\n    }\\n\\n    fn add_edge(&mut self, edge: Vec<i32>) {\\n        self.al[edge[0] as usize].push((edge[1] as usize, edge[2]));\\n    }\\n\\n    fn shortest_path(&self, node1: i32, node2: i32) -> i32 {\\n        let mut pq = std::collections::BinaryHeap::new();\\n        let mut cost = vec![std::i32::MAX; self.al.len()];\\n        cost[node1 as usize] = 0;\\n        pq.push(std::cmp::Reverse((0, node1)));\\n        while let Some(std::cmp::Reverse((cost_i, i))) = pq.pop() {\\n            if cost_i != cost[i as usize] {\\n                continue;\\n            }\\n            for (j, cost_j) in &self.al[i as usize] {\\n                if cost_i + *cost_j < cost[*j] {\\n                    cost[*j] = cost_i + *cost_j;\\n                    pq.push(std::cmp::Reverse((cost[*j], *j as i32)));\\n                }\\n            }\\n        }\\n        if cost[node2 as usize] == std::i32::MAX {\\n            -1\\n        } else {\\n            cost[node2 as usize]\\n        }\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\n#[derive(Debug, Clone, PartialEq, Eq, Hash)]\\nstruct Graph {\\n    al: Vec<Vec<(usize, i32)>>,\\n}\\n\\nimpl Graph {\\n    fn new(n: i32, edges: Vec<Vec<i32>>) -> Self {\\n        let mut al = vec![vec![]; n as usize];\\n        for e in edges {\\n            al[e[0] as usize].push((e[1] as usize, e[2]));\\n        }\\n        Self { al }\\n    }\\n\\n    fn add_edge(&mut self, edge: Vec<i32>) {\\n        self.al[edge[0] as usize].push((edge[1] as usize, edge[2]));\\n    }\\n\\n    fn shortest_path(&self, node1: i32, node2: i32) -> i32 {\\n        let mut pq = std::collections::BinaryHeap::new();\\n        let mut cost = vec![std::i32::MAX; self.al.len()];\\n        cost[node1 as usize] = 0;\\n        pq.push(std::cmp::Reverse((0, node1)));\\n        while let Some(std::cmp::Reverse((cost_i, i))) = pq.pop() {\\n            if cost_i != cost[i as usize] {\\n                continue;\\n            }\\n            for (j, cost_j) in &self.al[i as usize] {\\n                if cost_i + *cost_j < cost[*j] {\\n                    cost[*j] = cost_i + *cost_j;\\n                    pq.push(std::cmp::Reverse((cost[*j], *j as i32)));\\n                }\\n            }\\n        }\\n        if cost[node2 as usize] == std::i32::MAX {\\n            -1\\n        } else {\\n            cost[node2 as usize]\\n        }\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3421545,
                "title": "c-simple-dijkstra-algorithm",
                "content": "\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    int n;\\n    Graph(int m, vector<vector<int>>& edges) {\\n        n = m;\\n        adj.resize(n);\\n        for(int i=0;i<edges.size();i++)\\n        {\\n            int a = edges[i][0];\\n            int b = edges[i][1];\\n            int dis = edges[i][2];\\n            adj[a].push_back({b,dis});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0];\\n        int b = edge[1];\\n        int dis = edge[2];\\n        adj[a].push_back({b,dis});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n,INT_MAX);\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;\\n        pq.push({0,node1});\\n        dist[node1] = 0;\\n        while(!pq.empty())\\n        {\\n            int u = pq.top().second;\\n            pq.pop();\\n            for(auto &i:adj[u])\\n            {\\n                int v = i.first;\\n                int dis = i.second;\\n                if(dist[v]>dist[u]+dis)\\n                {\\n                    dist[v] = dist[u]+dis;\\n                    pq.push({dist[v],v});\\n                }\\n            }\\n        }\\n        if(dist[node2]==INT_MAX)\\n            return -1;\\n        return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    int n;\\n    Graph(int m, vector<vector<int>>& edges) {\\n        n = m;\\n        adj.resize(n);\\n        for(int i=0;i<edges.size();i++)\\n        {\\n            int a = edges[i][0];\\n            int b = edges[i][1];\\n            int dis = edges[i][2];\\n            adj[a].push_back({b,dis});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int a = edge[0];\\n        int b = edge[1];\\n        int dis = edge[2];\\n        adj[a].push_back({b,dis});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n,INT_MAX);\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;\\n        pq.push({0,node1});\\n        dist[node1] = 0;\\n        while(!pq.empty())\\n        {\\n            int u = pq.top().second;\\n            pq.pop();\\n            for(auto &i:adj[u])\\n            {\\n                int v = i.first;\\n                int dis = i.second;\\n                if(dist[v]>dist[u]+dis)\\n                {\\n                    dist[v] = dist[u]+dis;\\n                    pq.push({dist[v],v});\\n                }\\n            }\\n        }\\n        if(dist[node2]==INT_MAX)\\n            return -1;\\n        return dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421336,
                "title": "java-graph-dijkstra-s-algorithm",
                "content": "# Intuition\\nDijkstra\\'s Algorithm finds the shortest path between a given node (which is called the \"node1\" in this problem) and all other nodes in a graph. \\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nStore edges in a HashMap and perform Dijkstra\\'s shortest path algorithm.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(V^2) (It can be reduced to O(ElogV))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(E + V)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n\\n    private HashMap<Integer, HashMap<Integer, Integer>> map;\\n\\n    public Graph(int n, int[][] edges) {\\n        map = new HashMap<>();\\n        for (int i = 0; i < n; i++) {\\n            map.put(i, new HashMap<>());\\n        }\\n        for (int[] edge : edges) {\\n            map.get(edge[0]).put(edge[1], edge[2]);\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        map.get(edge[0]).put(edge[1], edge[2]);\\n    }\\n\\n    private int findMinimum(boolean[] visited, int[] costMap) {\\n        int minVal = Integer.MAX_VALUE, min = -1;\\n        for (int i = 0; i < costMap.length; i++) {\\n            if (!visited[i]) {\\n                if (minVal > costMap[i]) {\\n                    minVal = costMap[i];\\n                    min = i;\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n\\n    public int shortestPath(int node1, int node2) {\\n        boolean[] visited = new boolean[this.map.size()];\\n        int[] costMap = new int[this.map.size()];\\n        Arrays.fill(costMap, Integer.MAX_VALUE);\\n        costMap[node1] = 0;\\n        for (int i = 0; i < this.map.size() - 1; i++) {\\n            int key = findMinimum(visited, costMap);\\n            if (key == -1) {\\n                break;\\n            }\\n            visited[key] = true;\\n            if (this.map.containsKey(key)) {\\n                for (int to : this.map.get(key).keySet()) {\\n                    costMap[to] = Math.min(costMap[to], costMap[key] + this.map.get(key).get(to));\\n                }\\n            }\\n        }\\n        if (costMap[node2] == Integer.MAX_VALUE) {\\n            return -1;\\n        }\\n        return costMap[node2];\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\n\\n    private HashMap<Integer, HashMap<Integer, Integer>> map;\\n\\n    public Graph(int n, int[][] edges) {\\n        map = new HashMap<>();\\n        for (int i = 0; i < n; i++) {\\n            map.put(i, new HashMap<>());\\n        }\\n        for (int[] edge : edges) {\\n            map.get(edge[0]).put(edge[1], edge[2]);\\n        }\\n    }\\n\\n    public void addEdge(int[] edge) {\\n        map.get(edge[0]).put(edge[1], edge[2]);\\n    }\\n\\n    private int findMinimum(boolean[] visited, int[] costMap) {\\n        int minVal = Integer.MAX_VALUE, min = -1;\\n        for (int i = 0; i < costMap.length; i++) {\\n            if (!visited[i]) {\\n                if (minVal > costMap[i]) {\\n                    minVal = costMap[i];\\n                    min = i;\\n                }\\n            }\\n        }\\n        return min;\\n    }\\n\\n    public int shortestPath(int node1, int node2) {\\n        boolean[] visited = new boolean[this.map.size()];\\n        int[] costMap = new int[this.map.size()];\\n        Arrays.fill(costMap, Integer.MAX_VALUE);\\n        costMap[node1] = 0;\\n        for (int i = 0; i < this.map.size() - 1; i++) {\\n            int key = findMinimum(visited, costMap);\\n            if (key == -1) {\\n                break;\\n            }\\n            visited[key] = true;\\n            if (this.map.containsKey(key)) {\\n                for (int to : this.map.get(key).keySet()) {\\n                    costMap[to] = Math.min(costMap[to], costMap[key] + this.map.get(key).get(to));\\n                }\\n            }\\n        }\\n        if (costMap[node2] == Integer.MAX_VALUE) {\\n            return -1;\\n        }\\n        return costMap[node2];\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421330,
                "title": "c-bruteforce-dijkstra",
                "content": "```\\nclass Graph {\\npublic:\\n    unordered_map<int,vector<pair<int,int>>> ourmap;\\n    int nodes;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(int i=0;i<edges.size();i++){\\n            int a=edges[i][0];\\n            int b=edges[i][1];\\n            int weight=edges[i][2];\\n            ourmap[a].push_back({b,weight});\\n        }\\n        this->nodes=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        \\n        int a=edge[0];\\n        int b=edge[1];\\n        int weight=edge[2];\\n        ourmap[a].push_back({b,weight});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> minheap;\\n        vector<int> distance(nodes,1e9);\\n        distance[node1]=0;\\n        minheap.push({0,node1});\\n        while(minheap.size()!=0){\\n            \\n            pair<int,int> front=minheap.top();\\n            minheap.pop();\\n            int d=front.first;\\n            int node=front.second;\\n            vector<pair<int,int>> temp=ourmap[node];\\n            for(int i=0;i<temp.size();i++){\\n                \\n                int child=temp[i].first;\\n                int weight=temp[i].second;\\n                if(d+weight<distance[child]){\\n                    distance[child]=d+weight;\\n                    minheap.push({distance[child],child});\\n                }\\n            }\\n            \\n        }\\n        if(distance[node2]!=1e9){\\n            return distance[node2];\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);",
                "solutionTags": [],
                "code": "```\\nclass Graph {\\npublic:\\n    unordered_map<int,vector<pair<int,int>>> ourmap;\\n    int nodes;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(int i=0;i<edges.size();i++){\\n            int a=edges[i][0];\\n            int b=edges[i][1];\\n            int weight=edges[i][2];\\n            ourmap[a].push_back({b,weight});\\n        }\\n        this->nodes=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        \\n        int a=edge[0];\\n        int b=edge[1];\\n        int weight=edge[2];\\n        ourmap[a].push_back({b,weight});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> minheap;\\n        vector<int> distance(nodes,1e9);\\n        distance[node1]=0;\\n        minheap.push({0,node1});\\n        while(minheap.size()!=0){\\n            \\n            pair<int,int> front=minheap.top();\\n            minheap.pop();\\n            int d=front.first;\\n            int node=front.second;\\n            vector<pair<int,int>> temp=ourmap[node];\\n            for(int i=0;i<temp.size();i++){\\n                \\n                int child=temp[i].first;\\n                int weight=temp[i].second;\\n                if(d+weight<distance[child]){\\n                    distance[child]=d+weight;\\n                    minheap.push({distance[child],child});\\n                }\\n            }\\n            \\n        }\\n        if(distance[node2]!=1e9){\\n            return distance[node2];\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);",
                "codeTag": "Java"
            },
            {
                "id": 3421298,
                "title": "go-dijkstra-s-shortest-path-algorithm",
                "content": "This is a fairly standard implementation based on Dijkstra\\'s shortest path algorithm and using a priority queue. With some more patience, it should be possible to develop an incremental solution that better fits this usecase. \\n\\n```\\ntype Edge struct {\\n    head int\\n    cost int\\n}\\n\\ntype Graph struct {\\n    adj [][]Edge\\n}\\n\\nfunc Constructor(n int, edges [][]int) Graph {\\n    adj := make([][]Edge, n)\\n    for _, e := range edges {\\n        adj[e[0]] = append(adj[e[0]], Edge{e[1], e[2]})\\n    }\\n    return Graph{adj}\\n}\\n\\nfunc (this *Graph) AddEdge(edge []int)  {\\n    this.adj[edge[0]] = append(this.adj[edge[0]], Edge{edge[1], edge[2]})\\n}\\n\\nfunc (this *Graph) ShortestPath(node1 int, node2 int) int {\\n    n := len(this.adj)\\n    items := make([]*Item, n)\\n    for i := 0; i < n; i++ {\\n        items[i] = &Item{i, math.MaxInt, i}\\n    }\\n    items[node1].priority = 0\\n    queue := make(PriorityQueue, n)\\n    copy(queue, items)\\n    heap.Init(&queue)\\n    for len(queue) > 0 {\\n        i := heap.Pop(&queue).(*Item)\\n        node, priority := i.value, i.priority\\n        if priority == math.MaxInt || node == node2 {\\n            break\\n        }\\n        for _, e := range this.adj[node] {\\n            j := items[e.head]\\n            if h := priority + e.cost; h < j.priority {\\n                j.priority = h\\n                heap.Fix(&queue, j.index)\\n            }\\n        } \\n    }\\n    if items[node2].priority == math.MaxInt {\\n        return -1\\n    }\\n    return items[node2].priority\\n}\\n\\ntype Item struct {\\n\\tvalue    int\\n\\tpriority int\\n\\tindex    int\\n}\\n\\ntype PriorityQueue []*Item\\n\\nfunc (pq PriorityQueue) Len() int { return len(pq) }\\n\\nfunc (pq PriorityQueue) Less(i, j int) bool {\\n\\treturn pq[i].priority < pq[j].priority\\n}\\n\\nfunc (pq PriorityQueue) Swap(i, j int) {\\n\\tpq[i], pq[j] = pq[j], pq[i]\\n\\tpq[i].index = i\\n\\tpq[j].index = j\\n}\\n\\nfunc (pq *PriorityQueue) Push(x interface{}) {\\n\\tn := len(*pq)\\n\\titem := x.(*Item)\\n\\titem.index = n\\n\\t*pq = append(*pq, item)\\n}\\n\\nfunc (pq *PriorityQueue) Pop() interface{} {\\n\\told := *pq\\n\\tn := len(old)\\n\\titem := old[n-1]\\n\\told[n-1] = nil  // avoid memory leak\\n\\titem.index = -1 // for safety\\n\\t*pq = old[0 : n-1]\\n\\treturn item\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Edge struct {\\n    head int\\n    cost int\\n}\\n\\ntype Graph struct {\\n    adj [][]Edge\\n}\\n\\nfunc Constructor(n int, edges [][]int) Graph {\\n    adj := make([][]Edge, n)\\n    for _, e := range edges {\\n        adj[e[0]] = append(adj[e[0]], Edge{e[1], e[2]})\\n    }\\n    return Graph{adj}\\n}\\n\\nfunc (this *Graph) AddEdge(edge []int)  {\\n    this.adj[edge[0]] = append(this.adj[edge[0]], Edge{edge[1], edge[2]})\\n}\\n\\nfunc (this *Graph) ShortestPath(node1 int, node2 int) int {\\n    n := len(this.adj)\\n    items := make([]*Item, n)\\n    for i := 0; i < n; i++ {\\n        items[i] = &Item{i, math.MaxInt, i}\\n    }\\n    items[node1].priority = 0\\n    queue := make(PriorityQueue, n)\\n    copy(queue, items)\\n    heap.Init(&queue)\\n    for len(queue) > 0 {\\n        i := heap.Pop(&queue).(*Item)\\n        node, priority := i.value, i.priority\\n        if priority == math.MaxInt || node == node2 {\\n            break\\n        }\\n        for _, e := range this.adj[node] {\\n            j := items[e.head]\\n            if h := priority + e.cost; h < j.priority {\\n                j.priority = h\\n                heap.Fix(&queue, j.index)\\n            }\\n        } \\n    }\\n    if items[node2].priority == math.MaxInt {\\n        return -1\\n    }\\n    return items[node2].priority\\n}\\n\\ntype Item struct {\\n\\tvalue    int\\n\\tpriority int\\n\\tindex    int\\n}\\n\\ntype PriorityQueue []*Item\\n\\nfunc (pq PriorityQueue) Len() int { return len(pq) }\\n\\nfunc (pq PriorityQueue) Less(i, j int) bool {\\n\\treturn pq[i].priority < pq[j].priority\\n}\\n\\nfunc (pq PriorityQueue) Swap(i, j int) {\\n\\tpq[i], pq[j] = pq[j], pq[i]\\n\\tpq[i].index = i\\n\\tpq[j].index = j\\n}\\n\\nfunc (pq *PriorityQueue) Push(x interface{}) {\\n\\tn := len(*pq)\\n\\titem := x.(*Item)\\n\\titem.index = n\\n\\t*pq = append(*pq, item)\\n}\\n\\nfunc (pq *PriorityQueue) Pop() interface{} {\\n\\told := *pq\\n\\tn := len(old)\\n\\titem := old[n-1]\\n\\told[n-1] = nil  // avoid memory leak\\n\\titem.index = -1 // for safety\\n\\t*pq = old[0 : n-1]\\n\\treturn item\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3421291,
                "title": "java-dijkstra-s-algorithm",
                "content": "\\n# Code\\n```\\nclass Edge {\\n  int v; // other vertex v\\n  int w; // edge weight\\n\\n  public Edge(int _v, int _w) {\\n    v = _v;\\n    w = _w;\\n  }\\n}\\n\\nclass Graph {\\n  List < Edge > [] graph;\\n  int n;\\n  int inf = Integer.MAX_VALUE;\\n  public Graph(int n, int[][] edges) {\\n    //Intialize graph\\n    this.n = n;\\n    graph = new ArrayList[n];\\n    for (int i = 0; i < n; i++) graph[i] = new ArrayList < > ();\\n\\n    //construct graph\\n    for (int[] edge: edges) \\n      addEdge(edge);\\n  }\\n\\n  public void addEdge(int[] edge) {\\n    int u = edge[0], v = edge[1], weight = edge[2];\\n    graph[u].add(new Edge(v, weight));\\n  }\\n\\n  public int shortestPath(int node1, int node2) {\\n    PriorityQueue < Edge > pq = new PriorityQueue < > ((a, b) -> a.w - b.w);\\n    int[] dist = new int[n];\\n    Arrays.fill(dist, inf);\\n\\n    dist[node1] = 0;\\n    pq.add(new Edge(node1, 0));\\n\\n    while (!pq.isEmpty()) {\\n      Edge cur = pq.poll();\\n      int u = cur.v;\\n\\n      for (Edge e: graph[u]) {\\n        int v = e.v;\\n        int weight = e.w;\\n\\n        if (dist[u] + weight < dist[v]) {\\n          dist[v] = dist[u] + weight;\\n          pq.add(new Edge(v, dist[v]));\\n        }\\n      }\\n    }\\n\\n    return dist[node2] == inf? -1 : dist[node2];\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Edge {\\n  int v; // other vertex v\\n  int w; // edge weight\\n\\n  public Edge(int _v, int _w) {\\n    v = _v;\\n    w = _w;\\n  }\\n}\\n\\nclass Graph {\\n  List < Edge > [] graph;\\n  int n;\\n  int inf = Integer.MAX_VALUE;\\n  public Graph(int n, int[][] edges) {\\n    //Intialize graph\\n    this.n = n;\\n    graph = new ArrayList[n];\\n    for (int i = 0; i < n; i++) graph[i] = new ArrayList < > ();\\n\\n    //construct graph\\n    for (int[] edge: edges) \\n      addEdge(edge);\\n  }\\n\\n  public void addEdge(int[] edge) {\\n    int u = edge[0], v = edge[1], weight = edge[2];\\n    graph[u].add(new Edge(v, weight));\\n  }\\n\\n  public int shortestPath(int node1, int node2) {\\n    PriorityQueue < Edge > pq = new PriorityQueue < > ((a, b) -> a.w - b.w);\\n    int[] dist = new int[n];\\n    Arrays.fill(dist, inf);\\n\\n    dist[node1] = 0;\\n    pq.add(new Edge(node1, 0));\\n\\n    while (!pq.isEmpty()) {\\n      Edge cur = pq.poll();\\n      int u = cur.v;\\n\\n      for (Edge e: graph[u]) {\\n        int v = e.v;\\n        int weight = e.w;\\n\\n        if (dist[u] + weight < dist[v]) {\\n          dist[v] = dist[u] + weight;\\n          pq.add(new Edge(v, dist[v]));\\n        }\\n      }\\n    }\\n\\n    return dist[node2] == inf? -1 : dist[node2];\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421175,
                "title": "breadth-first-search-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(n^2)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#include<ctime>\\n#include<cmath>\\n#include<cstring>\\n#include<list>\\n#include<vector>\\n#include<queue>\\n#include<stack>\\n#include<iostream>\\n\\nclass Graph {\\npublic:\\n    std::vector<std::vector<int>> graph ; \\n    std::vector<std::vector<int>> costs ;\\n    std::vector<int> dists ; \\n    int spread= 0  ;\\n    long long skies = 1000000000000 ;\\n    int search(int begin,int stop){\\n        std::pair<int,int> parse(begin,0) ;\\n        std::queue<std::pair<int,int>> values ; \\n        values.push(parse) ;\\n        long long minned = skies ;\\n        int check = false  ;\\n        while(values.size()>0){\\n         parse =  values.front() ;\\n            values.pop() ;\\n            std::vector<int>& buffer = graph[parse.first] ;\\n            for(int ds=0;ds<buffer.size();ds++){\\n                int temps = buffer[ds] ;\\n                int added = costs[parse.first][temps] ;\\n                if(temps==stop){minned \\n                    = std::min(minned,(long long)(parse.second+added)) ;\\n                check= true ;        continue ; }\\n                if(dists[temps]!=-1&&dists[temps]<=parse.second+added)\\n                {; continue ; }\\n                dists[temps]=  parse.second+added ; \\n                values.push(std::pair<int,int>(temps,parse.second+added)) ;\\n            }\\n        }\\n          if(stop== begin ){return  0;}\\n        if(check==false){return -1 ; }\\n        return (int)minned ; \\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        int breadth = edges.size() ;\\n        std::vector<int> worker ;\\n        graph = std::vector<std::vector<int>>(n,worker) ;\\n        worker = std::vector<int>(n,0) ;\\n        costs = std::vector<std::vector<int>>(n,worker) ;\\n        dists = std::vector<int>(n,-1) ;\\n        spread = n  ;\\n        // std::cout<<44  ;\\n        for(int   fs=0 ;fs <breadth ;fs++){\\n            std::vector<int>& check = edges[fs] ;\\n            costs[check[0]][check[1]] = check[2] ;\\n            graph[check[0]].push_back(check[1]) ;\\n        }\\n       // std::cout<<55 ; \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int lower = edge[1] ;\\n        int upper = edge[0] ;\\n        graph[upper].push_back(lower)   ; \\n        costs[upper][lower] = edge[2] ;\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        dists = std::vector<int>(spread,-1) ;\\n        if(node2==node1){return 0;}\\n        int mines = search(node1,node2) ;\\n        // int mines = 4 ; \\n        return mines ; \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Graph",
                    "Queue",
                    "Shortest Path"
                ],
                "code": "```\\n#include<ctime>\\n#include<cmath>\\n#include<cstring>\\n#include<list>\\n#include<vector>\\n#include<queue>\\n#include<stack>\\n#include<iostream>\\n\\nclass Graph {\\npublic:\\n    std::vector<std::vector<int>> graph ; \\n    std::vector<std::vector<int>> costs ;\\n    std::vector<int> dists ; \\n    int spread= 0  ;\\n    long long skies = 1000000000000 ;\\n    int search(int begin,int stop){\\n        std::pair<int,int> parse(begin,0) ;\\n        std::queue<std::pair<int,int>> values ; \\n        values.push(parse) ;\\n        long long minned = skies ;\\n        int check = false  ;\\n        while(values.size()>0){\\n         parse =  values.front() ;\\n            values.pop() ;\\n            std::vector<int>& buffer = graph[parse.first] ;\\n            for(int ds=0;ds<buffer.size();ds++){\\n                int temps = buffer[ds] ;\\n                int added = costs[parse.first][temps] ;\\n                if(temps==stop){minned \\n                    = std::min(minned,(long long)(parse.second+added)) ;\\n                check= true ;        continue ; }\\n                if(dists[temps]!=-1&&dists[temps]<=parse.second+added)\\n                {; continue ; }\\n                dists[temps]=  parse.second+added ; \\n                values.push(std::pair<int,int>(temps,parse.second+added)) ;\\n            }\\n        }\\n          if(stop== begin ){return  0;}\\n        if(check==false){return -1 ; }\\n        return (int)minned ; \\n    }\\n    Graph(int n, vector<vector<int>>& edges) {\\n        int breadth = edges.size() ;\\n        std::vector<int> worker ;\\n        graph = std::vector<std::vector<int>>(n,worker) ;\\n        worker = std::vector<int>(n,0) ;\\n        costs = std::vector<std::vector<int>>(n,worker) ;\\n        dists = std::vector<int>(n,-1) ;\\n        spread = n  ;\\n        // std::cout<<44  ;\\n        for(int   fs=0 ;fs <breadth ;fs++){\\n            std::vector<int>& check = edges[fs] ;\\n            costs[check[0]][check[1]] = check[2] ;\\n            graph[check[0]].push_back(check[1]) ;\\n        }\\n       // std::cout<<55 ; \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int lower = edge[1] ;\\n        int upper = edge[0] ;\\n        graph[upper].push_back(lower)   ; \\n        costs[upper][lower] = edge[2] ;\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        dists = std::vector<int>(spread,-1) ;\\n        if(node2==node1){return 0;}\\n        int mines = search(node1,node2) ;\\n        // int mines = 4 ; \\n        return mines ; \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3421035,
                "title": "clean-easiest-c-code",
                "content": "# Code\\n### PLease Upvote if u liked my Solution\\uD83E\\uDD17\\n```\\nclass Graph {\\npublic:\\n    int nu;\\n    vector<vector<pair<int,int>>> adj;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        nu=n;\\n        adj.resize(n);\\n        for(auto it:edges)\\n            adj[it[0]].push_back({it[1],it[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> distance(nu,INT_MAX);\\n        distance[node1]=0;\\n        using p=pair<int,int>;\\n        priority_queue<p,vector<p>,greater<p>> pq;\\n        pq.push({0,node1});\\n        while(pq.size()){\\n            auto [cost,node] = pq.top();\\n            pq.pop();\\n            if(node == node2)\\n                return cost;\\n            for(auto it:adj[node]){\\n                auto [adjNode,dis] = it;\\n                if(dis + cost < distance[adjNode]){\\n                    distance[adjNode] = dis + cost;\\n                    pq.push({distance[adjNode],adjNode});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Graph",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    int nu;\\n    vector<vector<pair<int,int>>> adj;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        nu=n;\\n        adj.resize(n);\\n        for(auto it:edges)\\n            adj[it[0]].push_back({it[1],it[2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> distance(nu,INT_MAX);\\n        distance[node1]=0;\\n        using p=pair<int,int>;\\n        priority_queue<p,vector<p>,greater<p>> pq;\\n        pq.push({0,node1});\\n        while(pq.size()){\\n            auto [cost,node] = pq.top();\\n            pq.pop();\\n            if(node == node2)\\n                return cost;\\n            for(auto it:adj[node]){\\n                auto [adjNode,dis] = it;\\n                if(dis + cost < distance[adjNode]){\\n                    distance[adjNode] = dis + cost;\\n                    pq.push({distance[adjNode],adjNode});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421024,
                "title": "simple-dijktras-algorithm-with-explanation-specially-designed-for-beginner-s",
                "content": "```\\nvector<pair<int,int>>adj[101];\\n#define ipair pair<int,int>\\n#define ll long long int\\n\\nint dijkstra(int src,int des){\\n    vector<ll>dist(101);\\n    for(int i=0;i<101;i++) dist[i]=LLONG_MAX;\\n    dist[src]=0;\\n    priority_queue<ipair,vector<ipair>,greater<ipair>>pq;\\n    pq.push({0,src}); // fistValue will store the edgeCost till now the currentNode from the sourceNode , Second value will contains the currentNodeValue;\\n    \\n    while(pq.size()){\\n        int u = pq.top().second; pq.pop();\\n        for(auto x: adj[u]){\\n            int v = x.first;\\n            ll val = dist[u]+ x.second;\\n            if(val< dist[v]){\\n                dist[v]=val;\\n                pq.push({dist[v],v});\\n            }\\n        }\\n    }\\n    \\n    if(dist[des]==INT_MAX)\\n        return -1;\\n    return dist[des];\\n    \\n}\\n\\n\\nclass Graph {\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(int i=0;i<101;i++)\\n            adj[i].clear();\\n        for(auto x: edges){\\n            int src = x[0],des=x[1],cost = x[2];\\n            adj[src].push_back({des,cost});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> x) {\\n        int src = x[0],des=x[1],cost = x[2];\\n        adj[src].push_back({des,cost});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```\\n\\nTime Complexity -> O(n^2)*NumberofQueries;\\nSpace Complexity -> O(n) \\nHere n is the number of vertices in the graph;\\n\\n",
                "solutionTags": [],
                "code": "```\\nvector<pair<int,int>>adj[101];\\n#define ipair pair<int,int>\\n#define ll long long int\\n\\nint dijkstra(int src,int des){\\n    vector<ll>dist(101);\\n    for(int i=0;i<101;i++) dist[i]=LLONG_MAX;\\n    dist[src]=0;\\n    priority_queue<ipair,vector<ipair>,greater<ipair>>pq;\\n    pq.push({0,src}); // fistValue will store the edgeCost till now the currentNode from the sourceNode , Second value will contains the currentNodeValue;\\n    \\n    while(pq.size()){\\n        int u = pq.top().second; pq.pop();\\n        for(auto x: adj[u]){\\n            int v = x.first;\\n            ll val = dist[u]+ x.second;\\n            if(val< dist[v]){\\n                dist[v]=val;\\n                pq.push({dist[v],v});\\n            }\\n        }\\n    }\\n    \\n    if(dist[des]==INT_MAX)\\n        return -1;\\n    return dist[des];\\n    \\n}\\n\\n\\nclass Graph {\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(int i=0;i<101;i++)\\n            adj[i].clear();\\n        for(auto x: edges){\\n            int src = x[0],des=x[1],cost = x[2];\\n            adj[src].push_back({des,cost});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> x) {\\n        int src = x[0],des=x[1],cost = x[2];\\n        adj[src].push_back({des,cost});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421013,
                "title": "dijkastra-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    unordered_map<int,vector<pair<int,int>>>ump;\\n    int n1;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(auto x:edges){\\n            ump[x[0]].push_back({x[1],x[2]});\\n        }\\n        n1=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        ump[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int>dis(n1,1e9);\\n        dis[node1]=0;\\n        queue<pair<int,int>>q;\\n        q.push({node1,0});\\n        while(!q.empty()){\\n            auto temp=q.front();\\n            q.pop();\\n            for(auto x:ump[temp.first]){\\n                if(dis[x.first]>temp.second+x.second){\\n                    dis[x.first]=temp.second+x.second;\\n                    q.push({x.first,dis[x.first]});\\n                }\\n            }\\n        }\\n        if(dis[node2]==1e9)return -1;\\n        return dis[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    unordered_map<int,vector<pair<int,int>>>ump;\\n    int n1;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for(auto x:edges){\\n            ump[x[0]].push_back({x[1],x[2]});\\n        }\\n        n1=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        ump[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int>dis(n1,1e9);\\n        dis[node1]=0;\\n        queue<pair<int,int>>q;\\n        q.push({node1,0});\\n        while(!q.empty()){\\n            auto temp=q.front();\\n            q.pop();\\n            for(auto x:ump[temp.first]){\\n                if(dis[x.first]>temp.second+x.second){\\n                    dis[x.first]=temp.second+x.second;\\n                    q.push({x.first,dis[x.first]});\\n                }\\n            }\\n        }\\n        if(dis[node2]==1e9)return -1;\\n        return dis[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3421010,
                "title": "rust-dijkstra-solution",
                "content": "# Code\\n```rust []\\nstruct Graph {\\n    dict: Vec<Vec<(usize, i32)>>,\\n}\\n\\n#[derive(Eq)]\\nstruct Path(usize, i32);\\n\\nimpl PartialEq for Path {\\n    fn eq(&self, other: &Self) -> bool {\\n        self.1 == other.1\\n    }\\n}\\n\\nimpl PartialOrd for Path {\\n    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\\n        other.1.partial_cmp(&self.1)\\n    }\\n}\\n\\nimpl Ord for Path {\\n    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\\n        self.partial_cmp(other).unwrap()\\n    }\\n}\\n\\n/**\\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Graph {\\n    fn new(n: i32, edges: Vec<Vec<i32>>) -> Self {\\n        let mut dict = vec![Vec::new(); n as usize];\\n        for edge in edges {\\n            dict[edge[0] as usize].push((edge[1] as usize, edge[2]));\\n        }\\n\\n        Self { dict }\\n    }\\n\\n    fn add_edge(&mut self, edge: Vec<i32>) {\\n        self.dict[edge[0] as usize].push((edge[1] as usize, edge[2]));\\n    }\\n\\n    fn shortest_path(&self, node1: i32, node2: i32) -> i32 {\\n        let (node1, node2) = (node1 as usize, node2 as usize);\\n\\n        let mut pq = std::collections::BinaryHeap::new();\\n        let mut dist = vec![i32::MAX; self.dict.len()];\\n\\n        dist[node1] = 0;\\n\\n        pq.push(Path(node1 as usize, 0));\\n\\n        while let Some(v) = pq.pop() {\\n            if v.0 != node2 {\\n                for &(node, cost) in self.dict[v.0].iter() {\\n                    if cost + v.1 < dist[node] {\\n                        dist[node] = cost + v.1;\\n                        pq.push(Path(node, dist[node]));\\n                    }\\n                }\\n            } else {\\n                return v.1;\\n            }\\n        }\\n\\n        -1\\n    }\\n}\\n\\n/*\\n * Your Graph object will be instantiated and called as such:\\n * let obj = Graph::new(n, edges);\\n * obj.add_edge(edge);\\n * let ret_2: i32 = obj.shortest_path(node1, node2);\\n */\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust []\\nstruct Graph {\\n    dict: Vec<Vec<(usize, i32)>>,\\n}\\n\\n#[derive(Eq)]\\nstruct Path(usize, i32);\\n\\nimpl PartialEq for Path {\\n    fn eq(&self, other: &Self) -> bool {\\n        self.1 == other.1\\n    }\\n}\\n\\nimpl PartialOrd for Path {\\n    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\\n        other.1.partial_cmp(&self.1)\\n    }\\n}\\n\\nimpl Ord for Path {\\n    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\\n        self.partial_cmp(other).unwrap()\\n    }\\n}\\n\\n/**\\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Graph {\\n    fn new(n: i32, edges: Vec<Vec<i32>>) -> Self {\\n        let mut dict = vec![Vec::new(); n as usize];\\n        for edge in edges {\\n            dict[edge[0] as usize].push((edge[1] as usize, edge[2]));\\n        }\\n\\n        Self { dict }\\n    }\\n\\n    fn add_edge(&mut self, edge: Vec<i32>) {\\n        self.dict[edge[0] as usize].push((edge[1] as usize, edge[2]));\\n    }\\n\\n    fn shortest_path(&self, node1: i32, node2: i32) -> i32 {\\n        let (node1, node2) = (node1 as usize, node2 as usize);\\n\\n        let mut pq = std::collections::BinaryHeap::new();\\n        let mut dist = vec![i32::MAX; self.dict.len()];\\n\\n        dist[node1] = 0;\\n\\n        pq.push(Path(node1 as usize, 0));\\n\\n        while let Some(v) = pq.pop() {\\n            if v.0 != node2 {\\n                for &(node, cost) in self.dict[v.0].iter() {\\n                    if cost + v.1 < dist[node] {\\n                        dist[node] = cost + v.1;\\n                        pq.push(Path(node, dist[node]));\\n                    }\\n                }\\n            } else {\\n                return v.1;\\n            }\\n        }\\n\\n        -1\\n    }\\n}\\n\\n/*\\n * Your Graph object will be instantiated and called as such:\\n * let obj = Graph::new(n, edges);\\n * obj.add_edge(edge);\\n * let ret_2: i32 = obj.shortest_path(node1, node2);\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3420988,
                "title": "python-simple-dijkstra-s-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n, edges):\\n        self.dict1 = defaultdict(list)\\n        self.n = n\\n\\n        for i,j,c in edges:\\n            self.dict1[i].append((j,c))\\n\\n    def addEdge(self, edge):\\n        self.dict1[edge[0]].append((edge[1],edge[2]))\\n\\n    def shortestPath(self, node1, node2):\\n        stack, dist = [(0,node1)], [float(\"inf\")]*self.n\\n\\n        dist[node1] = 0\\n\\n        while stack:\\n            c, node = heappop(stack)\\n\\n            for neighbor,cost in self.dict1[node]:\\n                if cost + c < dist[neighbor]:\\n                    dist[neighbor] = cost + c\\n                    heapq.heappush(stack,(cost+c,neighbor))\\n\\n        return dist[node2] if dist[node2] != float(\"inf\") else -1\\n\\n\\n\\n\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n, edges):\\n        self.dict1 = defaultdict(list)\\n        self.n = n\\n\\n        for i,j,c in edges:\\n            self.dict1[i].append((j,c))\\n\\n    def addEdge(self, edge):\\n        self.dict1[edge[0]].append((edge[1],edge[2]))\\n\\n    def shortestPath(self, node1, node2):\\n        stack, dist = [(0,node1)], [float(\"inf\")]*self.n\\n\\n        dist[node1] = 0\\n\\n        while stack:\\n            c, node = heappop(stack)\\n\\n            for neighbor,cost in self.dict1[node]:\\n                if cost + c < dist[neighbor]:\\n                    dist[neighbor] = cost + c\\n                    heapq.heappush(stack,(cost+c,neighbor))\\n\\n        return dist[node2] if dist[node2] != float(\"inf\") else -1\\n\\n\\n\\n\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420972,
                "title": "typescript-floyd-warshall-algorithm",
                "content": "# Complexity\\n- Time complexity:\\nconstructor: O(n^3)\\naddEdge: O(n^2)\\nshortestPath: O(1)\\n\\n- Space complexity:\\nO(n^2)\\n\\n# Code\\n```\\nclass Graph {\\n  N: number;\\n  edges: number[][];\\n\\n  constructor(n: number, edges: number[][]) {\\n    this.N = n;\\n    this.edges = [];\\n    for(let i = 0; i < n; i++) {\\n      this.edges[i] = [];\\n      for(let j = 0; j < n; j++) {\\n        if (i === j) {\\n          this.edges[i][j] = 0;\\n        } else {\\n          this.edges[i][j] = Number.MAX_SAFE_INTEGER;\\n        }\\n      }\\n    }\\n\\n    edges.forEach(([x, y, w]) => {\\n      this.edges[x][y] = Math.min(this.edges[x][y], w);\\n    });\\n\\n    for (let k = 0; k < n; k++) {\\n      for (let i = 0; i < n; i++) {\\n        for (let j = 0; j < n; j++) {\\n          if (i != k && j != k && i != j) {\\n            this.edges[i][j] = Math.min(this.edges[i][j], this.edges[i][k] + this.edges[k][j]);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  addEdge(edge: number[]): void {\\n    for (let i = 0; i < this.N; i++) {\\n      for (let j = 0; j < this.N; j++) {\\n        this.edges[i][j] = Math.min(this.edges[i][j], this.edges[i][edge[0]] + edge[2] + this.edges[edge[1]][j]);\\n      }\\n    }\\n  }\\n\\n  shortestPath(node1: number, node2: number): number {\\n    return this.edges[node1][node2] === Number.MAX_SAFE_INTEGER ? -1 : this.edges[node1][node2];\\n  }\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nclass Graph {\\n  N: number;\\n  edges: number[][];\\n\\n  constructor(n: number, edges: number[][]) {\\n    this.N = n;\\n    this.edges = [];\\n    for(let i = 0; i < n; i++) {\\n      this.edges[i] = [];\\n      for(let j = 0; j < n; j++) {\\n        if (i === j) {\\n          this.edges[i][j] = 0;\\n        } else {\\n          this.edges[i][j] = Number.MAX_SAFE_INTEGER;\\n        }\\n      }\\n    }\\n\\n    edges.forEach(([x, y, w]) => {\\n      this.edges[x][y] = Math.min(this.edges[x][y], w);\\n    });\\n\\n    for (let k = 0; k < n; k++) {\\n      for (let i = 0; i < n; i++) {\\n        for (let j = 0; j < n; j++) {\\n          if (i != k && j != k && i != j) {\\n            this.edges[i][j] = Math.min(this.edges[i][j], this.edges[i][k] + this.edges[k][j]);\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  addEdge(edge: number[]): void {\\n    for (let i = 0; i < this.N; i++) {\\n      for (let j = 0; j < this.N; j++) {\\n        this.edges[i][j] = Math.min(this.edges[i][j], this.edges[i][edge[0]] + edge[2] + this.edges[edge[1]][j]);\\n      }\\n    }\\n  }\\n\\n  shortestPath(node1: number, node2: number): number {\\n    return this.edges[node1][node2] === Number.MAX_SAFE_INTEGER ? -1 : this.edges[node1][node2];\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420967,
                "title": "simplest-and-easiest-solution-beginners-friendly",
                "content": "```\\nclass Graph {\\npublic:\\n    \\n    int nn=0;\\n    vector<vector<pair<int,int>>>g;\\n    \\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        nn=n;\\n        for(int i=0;i<n;i++){\\n            vector<pair<int,int>>m;\\n            g.push_back(m);\\n        }\\n        \\n        for(int i=0;i<edges.size();i++){\\n            int src=edges[i][0];\\n            int dst=edges[i][1];\\n            int wt=edges[i][2];\\n            g[src].push_back({dst,wt});\\n        }\\n        \\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int src=edge[0];\\n            int dst=edge[1];\\n            int wt=edge[2];\\n            g[src].push_back({dst,wt});\\n    }\\n    \\n    \\n    \\n    void kamsekam( int sr, vector<int>& ds) {\\n    int n = g.size();\\n\\n\\n    ds[sr] = 0; \\n                priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq; \\n    pq.push({0, sr}); \\n\\n                while (!pq.empty()) {\\n        int u = pq.top().second; \\n        pq.pop();\\n\\n       \\n    for (pair<int,int> ngh : g[u]) {\\n            int v = ngh.first; \\n                     int weight = ngh.second; \\n\\n            if (ds[u] + weight < ds[v]) {\\n                ds[v] = ds[u] + weight;\\n                pq.push({ds[v], v});\\n            }\\n        }\\n    }\\n}\\n\\n\\n    \\n    \\n    int shortestPath(int node1, int node2) {\\n         int sr = node1; \\n     \\n   \\n    vector<int> ds(nn, INT_MAX); \\n\\n    kamsekam( sr, ds);\\n    if(ds[node2]==INT_MAX){\\n        return -1;\\n    }\\n    return ds[node2];\\n    }\\n};\\n\\n",
                "solutionTags": [
                    "C",
                    "Graph",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    \\n    int nn=0;\\n    vector<vector<pair<int,int>>>g;\\n    \\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        nn=n;\\n        for(int i=0;i<n;i++){\\n            vector<pair<int,int>>m;\\n            g.push_back(m);\\n        }\\n        \\n        for(int i=0;i<edges.size();i++){\\n            int src=edges[i][0];\\n            int dst=edges[i][1];\\n            int wt=edges[i][2];\\n            g[src].push_back({dst,wt});\\n        }\\n        \\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int src=edge[0];\\n            int dst=edge[1];\\n            int wt=edge[2];\\n            g[src].push_back({dst,wt});\\n    }\\n    \\n    \\n    \\n    void kamsekam( int sr, vector<int>& ds) {\\n    int n = g.size();\\n\\n\\n    ds[sr] = 0; \\n                priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq; \\n    pq.push({0, sr}); \\n\\n                while (!pq.empty()) {\\n        int u = pq.top().second; \\n        pq.pop();\\n\\n       \\n    for (pair<int,int> ngh : g[u]) {\\n            int v = ngh.first; \\n                     int weight = ngh.second; \\n\\n            if (ds[u] + weight < ds[v]) {\\n                ds[v] = ds[u] + weight;\\n                pq.push({ds[v], v});\\n            }\\n        }\\n    }\\n}\\n\\n\\n    \\n    \\n    int shortestPath(int node1, int node2) {\\n         int sr = node1; \\n     \\n   \\n    vector<int> ds(nn, INT_MAX); \\n\\n    kamsekam( sr, ds);\\n    if(ds[node2]==INT_MAX){\\n        return -1;\\n    }\\n    return ds[node2];\\n    }\\n};\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 3420935,
                "title": "c-dijkstra-with-al",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDijkstra to answer each query would suffice, along with an AL for quick evaluation of the neighbors of each node.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe update the AL each time addEdge is called, and do a dijkstra each time shortestPath is called.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1) for addEdge, O((V+E)logV) for each shortestPath\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) for addEdge, O(V) for each shortestPath\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    int n;\\n    vector<vector<pair<int,int>>> al;\\n    Graph(int _n, vector<vector<int>>& edges) {\\n        n = _n;\\n        al.resize(n);\\n        for(auto&e:edges){\\n            al[e[0]].push_back({e[1],e[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        al[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> d(n,1e9);\\n        d[node1] = 0;\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<>> pq;\\n        pq.push({0,node1});\\n        while(pq.size()){\\n            auto [du,u] = pq.top(); pq.pop();\\n            if(du!=d[u]) continue;\\n            for(auto&[v,w]:al[u]){\\n                if(du+w < d[v]){\\n                    d[v] = du+w;\\n                    pq.push({d[v],v});\\n                }\\n            }\\n        }\\n        if(d[node2]==1e9) return -1;\\n        else return d[node2];\\n        \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    int n;\\n    vector<vector<pair<int,int>>> al;\\n    Graph(int _n, vector<vector<int>>& edges) {\\n        n = _n;\\n        al.resize(n);\\n        for(auto&e:edges){\\n            al[e[0]].push_back({e[1],e[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        al[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> d(n,1e9);\\n        d[node1] = 0;\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<>> pq;\\n        pq.push({0,node1});\\n        while(pq.size()){\\n            auto [du,u] = pq.top(); pq.pop();\\n            if(du!=d[u]) continue;\\n            for(auto&[v,w]:al[u]){\\n                if(du+w < d[v]){\\n                    d[v] = du+w;\\n                    pq.push({d[v],v});\\n                }\\n            }\\n        }\\n        if(d[node2]==1e9) return -1;\\n        else return d[node2];\\n        \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420931,
                "title": "dijkstra-stack-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number} n\\n * @param {number[][]} edges\\n */\\nvar Graph = function(n, edges) {\\n    this.n = n;\\n    this.map = new Map();\\n    let nodes;\\n    for (const [from, to, cost] of edges) {\\n        nodes = this.map.get(from);\\n        if (nodes) nodes.push({ to: to, cost: cost });\\n        else this.map.set(from, [{ to: to, cost: cost }]);\\n    }\\n};\\n\\n/** \\n * @param {number[]} edge\\n * @return {void}\\n */\\nGraph.prototype.addEdge = function(edge) {\\n    const [from, to, cost] = edge;\\n    const nodes = this.map.get(from);\\n    if (nodes) nodes.push({ to: to, cost: cost });\\n    else this.map.set(from, [{ to: to, cost: cost }]);\\n};\\n\\n/** \\n * @param {number} node1 \\n * @param {number} node2\\n * @return {number}\\n */\\nGraph.prototype.shortestPath = function(node1, node2) {\\n    const dist = new Array(this.n).fill(Number.MAX_VALUE);\\n    dist[node1] = 0;\\n\\n    const stack = [{ to: node1, cost: 0 }];\\n\\n    while (stack.length) {\\n        const { to, cost } = stack.shift();\\n        const nodes = this.map.get(to);\\n        if (nodes) {\\n            for (let i = 0; i < nodes.length; ++i) {\\n                if (cost + nodes[i].cost < dist[nodes[i].to]) {\\n                    dist[nodes[i].to] = cost + nodes[i].cost;\\n                    stack.push({ to: nodes[i].to, cost: dist[nodes[i].to] });\\n                }\\n            }\\n        }\\n    }\\n\\n    return dist[node2] === Number.MAX_VALUE ? -1 : dist[node2];\\n};\\n\\n/** \\n * Your Graph object will be instantiated and called as such:\\n * var obj = new Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number[][]} edges\\n */\\nvar Graph = function(n, edges) {\\n    this.n = n;\\n    this.map = new Map();\\n    let nodes;\\n    for (const [from, to, cost] of edges) {\\n        nodes = this.map.get(from);\\n        if (nodes) nodes.push({ to: to, cost: cost });\\n        else this.map.set(from, [{ to: to, cost: cost }]);\\n    }\\n};\\n\\n/** \\n * @param {number[]} edge\\n * @return {void}\\n */\\nGraph.prototype.addEdge = function(edge) {\\n    const [from, to, cost] = edge;\\n    const nodes = this.map.get(from);\\n    if (nodes) nodes.push({ to: to, cost: cost });\\n    else this.map.set(from, [{ to: to, cost: cost }]);\\n};\\n\\n/** \\n * @param {number} node1 \\n * @param {number} node2\\n * @return {number}\\n */\\nGraph.prototype.shortestPath = function(node1, node2) {\\n    const dist = new Array(this.n).fill(Number.MAX_VALUE);\\n    dist[node1] = 0;\\n\\n    const stack = [{ to: node1, cost: 0 }];\\n\\n    while (stack.length) {\\n        const { to, cost } = stack.shift();\\n        const nodes = this.map.get(to);\\n        if (nodes) {\\n            for (let i = 0; i < nodes.length; ++i) {\\n                if (cost + nodes[i].cost < dist[nodes[i].to]) {\\n                    dist[nodes[i].to] = cost + nodes[i].cost;\\n                    stack.push({ to: nodes[i].to, cost: dist[nodes[i].to] });\\n                }\\n            }\\n        }\\n    }\\n\\n    return dist[node2] === Number.MAX_VALUE ? -1 : dist[node2];\\n};\\n\\n/** \\n * Your Graph object will be instantiated and called as such:\\n * var obj = new Graph(n, edges)\\n * obj.addEdge(edge)\\n * var param_2 = obj.shortestPath(node1,node2)\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3420874,
                "title": "c-using-djikstra-algorithm",
                "content": "```\\nclass Graph {\\npublic:\\n    vector< vector<pair<int,int> > > adj;\\n    int x=0;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        x=n;\\n        for(int i=0;i<edges.size();i++){\\n            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n         adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\n        priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int>>> pq;\\n\\tvector<int> distTo(x+1,INT_MAX);//1-indexed array for calculating shortest paths\\n\\tdistTo[node1] = 0;\\n\\tpq.push(make_pair(0,node1));\\t// (dist,source)\\n\\twhile( !pq.empty() ){\\n\\t\\tint dist = pq.top().first;\\n\\t\\tint prev = pq.top().second;\\n\\t\\tpq.pop();\\n\\t\\tvector<pair<int,int> >::iterator it;\\n\\t\\tfor( it = adj[prev].begin() ; it != adj[prev].end() ; it++){\\n\\t\\t\\tint next = it->first;\\n\\t\\t\\tint nextDist = it->second;\\n\\t\\t\\tif( distTo[next] > distTo[prev] + nextDist){\\n\\t\\t\\t\\tdistTo[next] = distTo[prev] + nextDist;\\n\\t\\t\\t\\tpq.push(make_pair(distTo[next], next));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n        if(distTo[node2]==INT_MAX)return -1;\\n        return distTo[node2];\\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector< vector<pair<int,int> > > adj;\\n    int x=0;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        x=n;\\n        for(int i=0;i<edges.size();i++){\\n            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n         adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        \\n        priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int>>> pq;\\n\\tvector<int> distTo(x+1,INT_MAX);//1-indexed array for calculating shortest paths\\n\\tdistTo[node1] = 0;\\n\\tpq.push(make_pair(0,node1));\\t// (dist,source)\\n\\twhile( !pq.empty() ){\\n\\t\\tint dist = pq.top().first;\\n\\t\\tint prev = pq.top().second;\\n\\t\\tpq.pop();\\n\\t\\tvector<pair<int,int> >::iterator it;\\n\\t\\tfor( it = adj[prev].begin() ; it != adj[prev].end() ; it++){\\n\\t\\t\\tint next = it->first;\\n\\t\\t\\tint nextDist = it->second;\\n\\t\\t\\tif( distTo[next] > distTo[prev] + nextDist){\\n\\t\\t\\t\\tdistTo[next] = distTo[prev] + nextDist;\\n\\t\\t\\t\\tpq.push(make_pair(distTo[next], next));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n        if(distTo[node2]==INT_MAX)return -1;\\n        return distTo[node2];\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420843,
                "title": "simple-python-3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.E = defaultdict(list)\\n        for u, v, w in edges:\\n            self.E[u].append((v, w))\\n        self.n = n\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.E[u].append((v, w))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        q = [(0, node1)]\\n        heapq.heapify(q)\\n        visited = set()\\n        \\n        while q:\\n            cost, cur = heapq.heappop(q)\\n            if cur in visited:\\n                continue\\n            visited.add(cur)\\n            \\n            if cur == node2:\\n                return cost\\n            \\n            for v, w in self.E[cur]:\\n                heapq.heappush(q, (cost + w, v))\\n      \\n        return -1\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.E = defaultdict(list)\\n        for u, v, w in edges:\\n            self.E[u].append((v, w))\\n        self.n = n\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.E[u].append((v, w))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        q = [(0, node1)]\\n        heapq.heapify(q)\\n        visited = set()\\n        \\n        while q:\\n            cost, cur = heapq.heappop(q)\\n            if cur in visited:\\n                continue\\n            visited.add(cur)\\n            \\n            if cur == node2:\\n                return cost\\n            \\n            for v, w in self.E[cur]:\\n                heapq.heappush(q, (cost + w, v))\\n      \\n        return -1\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420840,
                "title": "python-solution-using-heap",
                "content": "\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.adj_list = [[] for _ in range(n)]\\n        for u, v, w in edges:\\n            self.adj_list[u].append((v, w))\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.adj_list[u].append((v, w))\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        \\n        n = len(self.adj_list)\\n        dist = [float(\\'inf\\')] * n\\n        dist[node1] = 0\\n        heap = [(0, node1)]\\n        \\n        while heap:\\n            d, u = heapq.heappop(heap)\\n            if u == node2:\\n                return d\\n            if dist[u] < d:\\n                continue\\n            for v, w in self.adj_list[u]:\\n                if dist[u] + w < dist[v]:\\n                    dist[v] = dist[u] + w\\n                    heapq.heappush(heap, (dist[v], v))\\n        \\n        return -1\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python3",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.adj_list = [[] for _ in range(n)]\\n        for u, v, w in edges:\\n            self.adj_list[u].append((v, w))\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.adj_list[u].append((v, w))\\n        \\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        \\n        n = len(self.adj_list)\\n        dist = [float(\\'inf\\')] * n\\n        dist[node1] = 0\\n        heap = [(0, node1)]\\n        \\n        while heap:\\n            d, u = heapq.heappop(heap)\\n            if u == node2:\\n                return d\\n            if dist[u] < d:\\n                continue\\n            for v, w in self.adj_list[u]:\\n                if dist[u] + w < dist[v]:\\n                    dist[v] = dist[u] + w\\n                    heapq.heappush(heap, (dist[v], v))\\n        \\n        return -1\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420813,
                "title": "not-a-hard-problem-simply-implementation-of-djkstra-algorithm",
                "content": "#  class Pair\\n   {\\n    int node,wt;\\n    Pair(int node,int wt)\\n    {\\n        this.node=node;\\n        this.wt=wt;\\n    }\\n    }\\n#     class Graph {\\n    List<List<Pair>> adj=new ArrayList<>();\\n    int dup=0;\\n    public Graph(int n, int[][] edges) {\\n        dup=n;\\n        for(int i=0;i<n;i++)\\n        {\\n            adj.add(new ArrayList<>());\\n        }\\n        for(int[] arr:edges)\\n        {\\n            adj.get(arr[0]).add(new Pair(arr[1],arr[2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new Pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] dis=new int[dup];\\n        Arrays.fill(dis,Integer.MAX_VALUE);\\n        Queue<int[]> q=new PriorityQueue<>((a,b)->a[1]-b[1]);\\n        q.add(new int[]{node1,0});\\n        dis[node1]=0;\\n        while(!q.isEmpty())\\n        {\\n            int[] curr=q.poll();\\n            for(Pair p:adj.get(curr[0]))\\n            {\\n                if(dis[p.node]>(curr[1]+p.wt))\\n                {\\n                    dis[p.node]=curr[1]+p.wt;\\n                    q.add(new int[]{p.node,dis[p.node]});\\n                }\\n            }\\n        }\\n          return dis[node2]==Integer.MAX_VALUE?-1:dis[node2];  \\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */",
                "solutionTags": [
                    "Java",
                    "Graph"
                ],
                "code": "#  class Pair\\n   {\\n    int node,wt;\\n    Pair(int node,int wt)\\n    {\\n        this.node=node;\\n        this.wt=wt;\\n    }\\n    }\\n#     class Graph {\\n    List<List<Pair>> adj=new ArrayList<>();\\n    int dup=0;\\n    public Graph(int n, int[][] edges) {\\n        dup=n;\\n        for(int i=0;i<n;i++)\\n        {\\n            adj.add(new ArrayList<>());\\n        }\\n        for(int[] arr:edges)\\n        {\\n            adj.get(arr[0]).add(new Pair(arr[1],arr[2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        adj.get(edge[0]).add(new Pair(edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] dis=new int[dup];\\n        Arrays.fill(dis,Integer.MAX_VALUE);\\n        Queue<int[]> q=new PriorityQueue<>((a,b)->a[1]-b[1]);\\n        q.add(new int[]{node1,0});\\n        dis[node1]=0;\\n        while(!q.isEmpty())\\n        {\\n            int[] curr=q.poll();\\n            for(Pair p:adj.get(curr[0]))\\n            {\\n                if(dis[p.node]>(curr[1]+p.wt))\\n                {\\n                    dis[p.node]=curr[1]+p.wt;\\n                    q.add(new int[]{p.node,dis[p.node]});\\n                }\\n            }\\n        }\\n          return dis[node2]==Integer.MAX_VALUE?-1:dis[node2];  \\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 3420762,
                "title": "best-easy-c-solution-imp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe need to find the shortest path between two nodes in a graph. To do that, we can use an algorithm called Dijkstra\\'s algorithm.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nWe will create an adjacency list to represent the graph.\\nWe will initialize the distance of all nodes to infinity, except the starting node which is 0.\\n\\nWe will use a priority queue to store the nodes that we need to process next. We will insert the starting node with distance 0 into the priority queue.\\n\\nWe will then process the nodes in the priority queue until we reach the destination node or the priority queue is empty.\\n\\nFor each node we process, we will look at its neighbors and update their distances if the path through the current node is shorter than their current distances.\\n\\nAfter processing all the neighbors of a node, we will insert them into the priority queue.\\n\\nWe will repeat steps 4-6 until we reach the destination node or the priority queue is empty.\\n\\nFinally, we will return the shortest distance to the destination node\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime complexity: O(ElogV) where E is the number of edges and V is the number of vertices in the graph. This is because we process each edge once and insert each node into the priority queue once. The time complexity can be reduced to O(E+VlogV) using a Fibonacci heap.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace complexity: O(V) for the distance array and O(V) for the priority queue. Therefore, the space complexity is O(V).\\n# Code\\n```\\n#include <vector>\\n#include <queue>\\n#include <limits>\\n\\nusing namespace std;\\n\\nclass Graph {\\nprivate:\\n    vector<vector<pair<int, int>>> adj_list;\\n    vector<int> dist;\\n    vector<bool> visited;\\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj_list.resize(n);\\n        dist.resize(n, numeric_limits<int>::max());\\n        visited.resize(n, false);\\n\\n        for (auto& edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            adj_list[from].push_back(make_pair(to, cost));\\n        }\\n    }\\n\\n    void addEdge(vector<int> edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        adj_list[from].push_back(make_pair(to, cost));\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        while (!pq.empty()) {\\n            pq.pop();\\n        }\\n        dist.assign(dist.size(), numeric_limits<int>::max());\\n        visited.assign(visited.size(), false);\\n\\n        dist[node1] = 0;\\n        pq.push(make_pair(0, node1));\\n\\n        while (!pq.empty()) {\\n            int node = pq.top().second;\\n            pq.pop();\\n\\n            if (visited[node]) {\\n                continue;\\n            }\\n\\n            visited[node] = true;\\n\\n            for (auto& neighbor : adj_list[node]) {\\n                int neighbor_node = neighbor.first;\\n                int neighbor_cost = neighbor.second;\\n\\n                if (visited[neighbor_node]) {\\n                    continue;\\n                }\\n\\n                int tentative_dist = dist[node] + neighbor_cost;\\n\\n                if (tentative_dist < dist[neighbor_node]) {\\n                    dist[neighbor_node] = tentative_dist;\\n                    pq.push(make_pair(tentative_dist, neighbor_node));\\n                }\\n            }\\n        }\\n\\n        return (dist[node2] == numeric_limits<int>::max()) ? -1 : dist[node2];\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#include <vector>\\n#include <queue>\\n#include <limits>\\n\\nusing namespace std;\\n\\nclass Graph {\\nprivate:\\n    vector<vector<pair<int, int>>> adj_list;\\n    vector<int> dist;\\n    vector<bool> visited;\\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj_list.resize(n);\\n        dist.resize(n, numeric_limits<int>::max());\\n        visited.resize(n, false);\\n\\n        for (auto& edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            adj_list[from].push_back(make_pair(to, cost));\\n        }\\n    }\\n\\n    void addEdge(vector<int> edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        adj_list[from].push_back(make_pair(to, cost));\\n    }\\n\\n    int shortestPath(int node1, int node2) {\\n        while (!pq.empty()) {\\n            pq.pop();\\n        }\\n        dist.assign(dist.size(), numeric_limits<int>::max());\\n        visited.assign(visited.size(), false);\\n\\n        dist[node1] = 0;\\n        pq.push(make_pair(0, node1));\\n\\n        while (!pq.empty()) {\\n            int node = pq.top().second;\\n            pq.pop();\\n\\n            if (visited[node]) {\\n                continue;\\n            }\\n\\n            visited[node] = true;\\n\\n            for (auto& neighbor : adj_list[node]) {\\n                int neighbor_node = neighbor.first;\\n                int neighbor_cost = neighbor.second;\\n\\n                if (visited[neighbor_node]) {\\n                    continue;\\n                }\\n\\n                int tentative_dist = dist[node] + neighbor_cost;\\n\\n                if (tentative_dist < dist[neighbor_node]) {\\n                    dist[neighbor_node] = tentative_dist;\\n                    pq.push(make_pair(tentative_dist, neighbor_node));\\n                }\\n            }\\n        }\\n\\n        return (dist[node2] == numeric_limits<int>::max()) ? -1 : dist[node2];\\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3420744,
                "title": "typescript-bellman-ford-algorithm",
                "content": "```ts\\nclass Graph {\\n    N: number;\\n    edges: number[][];\\n    constructor(n: number, edges: number[][]) {\\n        this.N = n;\\n        this.edges = edges;\\n    }\\n\\n    addEdge(edge: number[]): void {\\n        this.edges.push(edge);\\n    }\\n\\n    shortestPath(node1: number, node2: number): number {\\n        const N = this.N;\\n        // node: 0 to N-1\\n        const dist: number[] = new Array(N).fill(Infinity);\\n        dist[node1] = 0;\\n        for (let i = 0; i < N; i++) {\\n            for (const [a, b, w] of this.edges) {\\n                dist[b] = Math.min(dist[a] + w, dist[b]);\\n            }\\n        }\\n        if (dist[node2] === Infinity) {\\n            return -1;\\n        }\\n        return dist[node2];\\n    }\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\nclass Graph {\\n    N: number;\\n    edges: number[][];\\n    constructor(n: number, edges: number[][]) {\\n        this.N = n;\\n        this.edges = edges;\\n    }\\n\\n    addEdge(edge: number[]): void {\\n        this.edges.push(edge);\\n    }\\n\\n    shortestPath(node1: number, node2: number): number {\\n        const N = this.N;\\n        // node: 0 to N-1\\n        const dist: number[] = new Array(N).fill(Infinity);\\n        dist[node1] = 0;\\n        for (let i = 0; i < N; i++) {\\n            for (const [a, b, w] of this.edges) {\\n                dist[b] = Math.min(dist[a] + w, dist[b]);\\n            }\\n        }\\n        if (dist[node2] === Infinity) {\\n            return -1;\\n        }\\n        return dist[node2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420739,
                "title": "java-dijkstra-algorithm",
                "content": "\\n# Code\\n```\\nclass Graph {\\n\\n    List<List<int[]>> graph;\\n\\n    public Graph(int n, int[][] edges) {\\n        graph = getEdges( n , edges );\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int u = edge[0];\\n        int v = edge[1];\\n        int w = edge[2];\\n        graph.get(u).add(new int[] {v , w});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        // min heap\\n        PriorityQueue<int[]> q = new PriorityQueue<>(new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] ints, int[] t1) {\\n                return ints[1] - t1[1];\\n            }\\n        });\\n        int[] dist = new int[graph.size()];\\n        Arrays.fill(dist , Integer.MAX_VALUE);\\n        dist[node1] = 0;\\n        q.add(new int[] {node1 , 0});\\n\\n        while(!q.isEmpty()){\\n            int[] cords = q.poll();\\n\\n            int node = cords[0];\\n            int distCoverd = cords[1];\\n\\n            if(node == node2){\\n                return distCoverd;\\n            }\\n            \\n            for(int[] nei : graph.get(node)){\\n\\n                int nextNode = nei[0];\\n                int cost = nei[1];\\n\\n                int nextDist = distCoverd + cost;\\n\\n                if(nextDist < dist[nextNode]){\\n\\n                    dist[nextNode] = nextDist;\\n\\n                    q.add(new int[] {nextNode , dist[nextNode] });\\n\\n                }\\n\\n            }\\n        }\\n        return -1;\\n    }\\n\\n    private List<List<int[]>> getEdges(int n, int[][] edges){\\n        List<List<int[]>> list = new ArrayList<>();\\n        for(int i=0; i<n; i++){\\n            list.add(new ArrayList<>());\\n        }\\n        for(int[]  i : edges){\\n            int u = i[0];\\n            int v = i[1];\\n            int w = i[2];\\n            list.get(u).add(new int[]{v , w});\\n        }\\n        return list;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\n\\n    List<List<int[]>> graph;\\n\\n    public Graph(int n, int[][] edges) {\\n        graph = getEdges( n , edges );\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int u = edge[0];\\n        int v = edge[1];\\n        int w = edge[2];\\n        graph.get(u).add(new int[] {v , w});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        // min heap\\n        PriorityQueue<int[]> q = new PriorityQueue<>(new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] ints, int[] t1) {\\n                return ints[1] - t1[1];\\n            }\\n        });\\n        int[] dist = new int[graph.size()];\\n        Arrays.fill(dist , Integer.MAX_VALUE);\\n        dist[node1] = 0;\\n        q.add(new int[] {node1 , 0});\\n\\n        while(!q.isEmpty()){\\n            int[] cords = q.poll();\\n\\n            int node = cords[0];\\n            int distCoverd = cords[1];\\n\\n            if(node == node2){\\n                return distCoverd;\\n            }\\n            \\n            for(int[] nei : graph.get(node)){\\n\\n                int nextNode = nei[0];\\n                int cost = nei[1];\\n\\n                int nextDist = distCoverd + cost;\\n\\n                if(nextDist < dist[nextNode]){\\n\\n                    dist[nextNode] = nextDist;\\n\\n                    q.add(new int[] {nextNode , dist[nextNode] });\\n\\n                }\\n\\n            }\\n        }\\n        return -1;\\n    }\\n\\n    private List<List<int[]>> getEdges(int n, int[][] edges){\\n        List<List<int[]>> list = new ArrayList<>();\\n        for(int i=0; i<n; i++){\\n            list.add(new ArrayList<>());\\n        }\\n        for(int[]  i : edges){\\n            int u = i[0];\\n            int v = i[1];\\n            int w = i[2];\\n            list.get(u).add(new int[]{v , w});\\n        }\\n        return list;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420728,
                "title": "simple-dijkstra",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    \\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        \\n        adj.resize(n);\\n        for(int i=0;i<edges.size();i++)\\n        {\\n            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n            \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n          \\n         adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n         \\n        \\n       \\n      vector<int> dis= dijkstra(node1);\\n        if(dis[node2]==INT_MAX) return -1;\\n        return dis[node2];        \\n    }\\n    \\n    private :\\n      vector<vector<pair<int,int>>> adj;\\n    \\n    \\n      vector<int> dijkstra(int S) {\\n        int V = adj.size();\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n\\n        vector<int> distTo(V, INT_MAX);\\n\\n        distTo[S] = 0;\\n        pq.push({0, S});\\n\\n        while (!pq.empty()) {\\n            int node = pq.top().second;\\n            int dis = pq.top().first;\\n            pq.pop();\\n\\n            // if (dis > distTo[node]) {\\n            //     continue;\\n            // }\\n\\n            for (auto it : adj[node]) {\\n                int v = it.first;\\n                int w = it.second;\\n                if (dis + w < distTo[v]) {\\n                    distTo[v] = dis + w;\\n                    pq.push({distTo[v], v});\\n                }\\n            }\\n        }\\n        return distTo;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    \\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        \\n        adj.resize(n);\\n        for(int i=0;i<edges.size();i++)\\n        {\\n            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n            \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n          \\n         adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n         \\n        \\n       \\n      vector<int> dis= dijkstra(node1);\\n        if(dis[node2]==INT_MAX) return -1;\\n        return dis[node2];        \\n    }\\n    \\n    private :\\n      vector<vector<pair<int,int>>> adj;\\n    \\n    \\n      vector<int> dijkstra(int S) {\\n        int V = adj.size();\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n\\n        vector<int> distTo(V, INT_MAX);\\n\\n        distTo[S] = 0;\\n        pq.push({0, S});\\n\\n        while (!pq.empty()) {\\n            int node = pq.top().second;\\n            int dis = pq.top().first;\\n            pq.pop();\\n\\n            // if (dis > distTo[node]) {\\n            //     continue;\\n            // }\\n\\n            for (auto it : adj[node]) {\\n                int v = it.first;\\n                int w = it.second;\\n                if (dis + w < distTo[v]) {\\n                    distTo[v] = dis + w;\\n                    pq.push({distTo[v], v});\\n                }\\n            }\\n        }\\n        return distTo;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420723,
                "title": "c-dijkstra-s",
                "content": "# Code\\n```\\nclass Graph {\\n    vector<pair<int, int>> adjList[105];\\n    int n;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this -> n = n;\\n        for(vector<int> edge: edges) {\\n            adjList[edge[0]].push_back({edge[1], edge[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adjList[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n, INT_MAX);\\n        dist[node1] = 0;\\n        set<pair<int, int>> Set;\\n        Set.insert({0, node1});\\n        while(!Set.empty()) {\\n            pair<int, int> temp = *(Set.begin());\\n            int u = temp.second;\\n            Set.erase(*Set.begin());\\n            for(auto iter: adjList[u]) {\\n                int v = iter.first;\\n                int w = iter.second;\\n                if(dist[u] + w < dist[v]) {\\n                    Set.erase({dist[v], v});\\n                    dist[v] = dist[u] + w;\\n                    Set.insert({dist[v], v});\\n                }\\n            }\\n        }\\n        return dist[node2] == INT_MAX? -1: dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Shortest Path"
                ],
                "code": "```\\nclass Graph {\\n    vector<pair<int, int>> adjList[105];\\n    int n;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this -> n = n;\\n        for(vector<int> edge: edges) {\\n            adjList[edge[0]].push_back({edge[1], edge[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adjList[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(n, INT_MAX);\\n        dist[node1] = 0;\\n        set<pair<int, int>> Set;\\n        Set.insert({0, node1});\\n        while(!Set.empty()) {\\n            pair<int, int> temp = *(Set.begin());\\n            int u = temp.second;\\n            Set.erase(*Set.begin());\\n            for(auto iter: adjList[u]) {\\n                int v = iter.first;\\n                int w = iter.second;\\n                if(dist[u] + w < dist[v]) {\\n                    Set.erase({dist[v], v});\\n                    dist[v] = dist[u] + w;\\n                    Set.insert({dist[v], v});\\n                }\\n            }\\n        }\\n        return dist[node2] == INT_MAX? -1: dist[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420667,
                "title": "c-code-using-dijkstra-s-algorithm-explained-approach",
                "content": "# Intuition\\nUsing Dijkstra\\'s Algorithm to find the minimum cost between node1 to node2.\\n\\n# Approach\\n1. Initialize all distances to infinity and the distance of the source node to 0.\\n\\n2. Create a priority queue and add the source node to it with a priority of 0.\\n\\n3. While the priority queue is not empty, remove the node with the smallest priority and mark it as visited.\\n\\n4. For each neighbor of the current node, calculate the tentative distance from the source node to that neighbor by adding the distance from the current node to the neighbor to the distance of the current node from the source node.\\n\\n5. If the tentative distance is less than the current distance of the neighbor, update the distance of the neighbor to the tentative distance and add the neighbor to the priority queue with a priority equal to the new distance.\\n\\n6. Repeat steps 3-5 until all nodes have been visited.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the above implementation of Dijkstra\\'s algorithm using a priority queue is O((E + V) log V), where E is the number of edges and V is the number of vertices in the graph. This is because the algorithm processes each vertex once and each edge once, and the priority queue operations take O(log V) time.\\n\\n- Space complexity:\\nThe space complexity of this implementation is O(V), where V is the number of vertices in the graph. This is because the algorithm requires a distance vector of size V to store the distances of all vertices from the source node, and a priority queue that can contain at most V vertices. Additionally, the adjacency list for the graph may require additional space proportional to the number of edges.\\n\\nNote that the space complexity of the priority queue itself is not considered in this calculation, as it is assumed to be proportional to the number of vertices in the graph, which is already accounted for in the space complexity calculation.\\n\\n# Code\\n```\\nclass Graph {\\nprivate:\\n    vector<vector<pair<int, int>>> adjList;\\n    int numNodes;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        numNodes = n;\\n        adjList.resize(numNodes);\\n\\n        for (auto& edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            adjList[from].push_back({to, cost});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        adjList[from].push_back({to, cost});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(numNodes, numeric_limits<int>::max());\\n        dist[node1] = 0;\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, node1});\\n\\n        while (!pq.empty()) {\\n            int u = pq.top().second;\\n            pq.pop();\\n\\n            for (auto& neighbor : adjList[u]) {\\n                int v = neighbor.first;\\n                int w = neighbor.second;\\n\\n                if (dist[u] != numeric_limits<int>::max() && dist[v] > dist[u] + w) {\\n                    dist[v] = dist[u] + w;\\n                    pq.push({dist[v], v});\\n                }\\n            }\\n        }\\n\\n        return (dist[node2] == numeric_limits<int>::max()) ? -1 : dist[node2];\\n\\xA0\\xA0\\xA0\\xA0}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy",
                    "Graph",
                    "Design",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Graph {\\nprivate:\\n    vector<vector<pair<int, int>>> adjList;\\n    int numNodes;\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        numNodes = n;\\n        adjList.resize(numNodes);\\n\\n        for (auto& edge : edges) {\\n            int from = edge[0];\\n            int to = edge[1];\\n            int cost = edge[2];\\n            adjList[from].push_back({to, cost});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        int from = edge[0];\\n        int to = edge[1];\\n        int cost = edge[2];\\n        adjList[from].push_back({to, cost});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(numNodes, numeric_limits<int>::max());\\n        dist[node1] = 0;\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, node1});\\n\\n        while (!pq.empty()) {\\n            int u = pq.top().second;\\n            pq.pop();\\n\\n            for (auto& neighbor : adjList[u]) {\\n                int v = neighbor.first;\\n                int w = neighbor.second;\\n\\n                if (dist[u] != numeric_limits<int>::max() && dist[v] > dist[u] + w) {\\n                    dist[v] = dist[u] + w;\\n                    pq.push({dist[v], v});\\n                }\\n            }\\n        }\\n\\n        return (dist[node2] == numeric_limits<int>::max()) ? -1 : dist[node2];\\n\\xA0\\xA0\\xA0\\xA0}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420643,
                "title": "python-edsgerish-solution",
                "content": "# Intuition\\nDo Dijkstra per every query, constraints are low enough to be lazy\\n\\n# Complexity\\n- Time complexity:\\n$$O(QN)$$ - Q number of queries, N number of vertices\\n\\n- Space complexity:\\n$$O(N)$$\\n\\n# Code\\n```\\nfrom collections import defaultdict\\nfrom math import inf\\nfrom heapq import heappop, heappush\\n\\nclass Graph:\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.g = defaultdict(set)\\n        for u, v, w in edges: self.g[u].add((v, w))\\n        self.n = n\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.g[u].add((v, w))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        q = [(0, node1)]\\n        dist = [inf] * self.n\\n        dist[node1] = 0\\n        while q:\\n            d, u = heappop(q)\\n            if u == node2:\\n                return d\\n            for v, w in self.g[u]:\\n                if d + w < dist[v]:\\n                    dist[v] = d + w\\n                    heappush(q, (d + w, v))\\n        return -1  \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Graph",
                    "Shortest Path"
                ],
                "code": "```\\nfrom collections import defaultdict\\nfrom math import inf\\nfrom heapq import heappop, heappush\\n\\nclass Graph:\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.g = defaultdict(set)\\n        for u, v, w in edges: self.g[u].add((v, w))\\n        self.n = n\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.g[u].add((v, w))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        q = [(0, node1)]\\n        dist = [inf] * self.n\\n        dist[node1] = 0\\n        while q:\\n            d, u = heappop(q)\\n            if u == node2:\\n                return d\\n            for v, w in self.g[u]:\\n                if d + w < dist[v]:\\n                    dist[v] = d + w\\n                    heappush(q, (d + w, v))\\n        return -1  \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420642,
                "title": "python-solution-implementing-dijkstra-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs soon as I read that we need to calculate the shortest path from a node to another, the famous Dijkstra Algorithm popped in my head and right here is just its implementation in python.\\n\\n# Code\\n```\\nimport heapq\\nclass Graph:\\n    #the graph constructor \\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.edges = edges \\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.edges.append(edge)\\n    \\n    #one extra function to create the directed, weighted graph which gets called only when all the edges have been inserted \\n    def createGraph(self,edges):\\n        graph = {i:dict() for i in range(self.n)}\\n        \\n        for s,e,w in edges:\\n            graph[s][e] = w\\n            \\n        return graph\\n    #implementation of the dijkstra algorithm \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        graph = self.createGraph(self.edges)\\n        dists = {node:math.inf for node in graph}\\n        dists[node1] = 0\\n        q = [(0,node1)]\\n        \\n        while q:\\n            curr_dist, curr_node = heapq.heappop(q)\\n            if curr_dist > dists[curr_node]:\\n                continue\\n            else:\\n                for nbr, wt in graph[curr_node].items():\\n                    dist = curr_dist + wt\\n                    if dist < dists[nbr]:\\n                        dists[nbr] = dist\\n                        heapq.heappush(q,(dist,nbr))\\n        return -1 if dists[node2] == math.inf else dists[node2]\\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python3",
                    "Graph",
                    "Heap (Priority Queue)",
                    "Shortest Path"
                ],
                "code": "```\\nimport heapq\\nclass Graph:\\n    #the graph constructor \\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.edges = edges \\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.edges.append(edge)\\n    \\n    #one extra function to create the directed, weighted graph which gets called only when all the edges have been inserted \\n    def createGraph(self,edges):\\n        graph = {i:dict() for i in range(self.n)}\\n        \\n        for s,e,w in edges:\\n            graph[s][e] = w\\n            \\n        return graph\\n    #implementation of the dijkstra algorithm \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        graph = self.createGraph(self.edges)\\n        dists = {node:math.inf for node in graph}\\n        dists[node1] = 0\\n        q = [(0,node1)]\\n        \\n        while q:\\n            curr_dist, curr_node = heapq.heappop(q)\\n            if curr_dist > dists[curr_node]:\\n                continue\\n            else:\\n                for nbr, wt in graph[curr_node].items():\\n                    dist = curr_dist + wt\\n                    if dist < dists[nbr]:\\n                        dists[nbr] = dist\\n                        heapq.heappush(q,(dist,nbr))\\n        return -1 if dists[node2] == math.inf else dists[node2]\\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420585,
                "title": "java-solution-easy-to-understood-beats-100",
                "content": "# Intuition\\nDIJKSTRA ALGOTIHTM\\n\\n# Approach\\nUSING PRIORITY QUEUE\\n\\n# Complexity\\n- Time complexity:\\nO(V ElogV)\\n# Code\\n```\\nclass Graph {\\n   int n;\\n   ArrayList<ArrayList<int[]>> l;\\n    public Graph(int n, int[][] edges) {\\n        this.n=n;\\n        l=new ArrayList<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            l.add(new ArrayList<>());\\n        }\\n        for(int edge[]:edges)\\n        {\\n          int from=edge[0];\\n          int to=edge[1];\\n          int cost=edge[2];\\n          l.get(from).add(new int[]{to,cost});\\n        }\\n\\n\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n\\n          int from=edge[0];\\n          int to=edge[1];\\n          int cost=edge[2];\\n          l.get(from).add(new int[]{to,cost});\\n        \\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[1]-b[1]);\\n        pq.add(new int[]{node1,0});\\n        int distance[]=new int[n];\\n        Arrays.fill(distance,Integer.MAX_VALUE);\\n        distance[node1]=0;\\n        while(!pq.isEmpty())\\n        {\\n            int currNode=pq.peek()[0];\\n            int currDistance=pq.peek()[1];\\n            pq.poll();\\n            if(node2==currNode)return distance[currNode];\\n            ArrayList<int[]> child=l.get(currNode);\\n            for(int []c:child){\\n                int nextNode=c[0];\\n                int childdist=c[1];\\n                if(childdist+currDistance<distance[nextNode])\\n                {\\n                    distance[nextNode]=childdist+currDistance;\\n                    pq.add(new int[]{nextNode,distance[nextNode]});\\n                }\\n            }\\n            \\n        }\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Graph {\\n   int n;\\n   ArrayList<ArrayList<int[]>> l;\\n    public Graph(int n, int[][] edges) {\\n        this.n=n;\\n        l=new ArrayList<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            l.add(new ArrayList<>());\\n        }\\n        for(int edge[]:edges)\\n        {\\n          int from=edge[0];\\n          int to=edge[1];\\n          int cost=edge[2];\\n          l.get(from).add(new int[]{to,cost});\\n        }\\n\\n\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n\\n          int from=edge[0];\\n          int to=edge[1];\\n          int cost=edge[2];\\n          l.get(from).add(new int[]{to,cost});\\n        \\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[1]-b[1]);\\n        pq.add(new int[]{node1,0});\\n        int distance[]=new int[n];\\n        Arrays.fill(distance,Integer.MAX_VALUE);\\n        distance[node1]=0;\\n        while(!pq.isEmpty())\\n        {\\n            int currNode=pq.peek()[0];\\n            int currDistance=pq.peek()[1];\\n            pq.poll();\\n            if(node2==currNode)return distance[currNode];\\n            ArrayList<int[]> child=l.get(currNode);\\n            for(int []c:child){\\n                int nextNode=c[0];\\n                int childdist=c[1];\\n                if(childdist+currDistance<distance[nextNode])\\n                {\\n                    distance[nextNode]=childdist+currDistance;\\n                    pq.add(new int[]{nextNode,distance[nextNode]});\\n                }\\n            }\\n            \\n        }\\n        return -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420566,
                "title": "python3-dijkstra",
                "content": "\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.graph = [[] for _ in range(n)]\\n        for u, v, w in edges: \\n            self.graph[u].append((v, w))\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.graph[u].append((v, w))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        pq = [(0, node1)]\\n        dist = [inf]*len(self.graph)\\n        dist[node1] = 0 \\n        while pq: \\n            cost, u = heappop(pq)\\n            if u == node2: return cost\\n            for v, w in self.graph[u]: \\n                if cost + w < dist[v]: \\n                    dist[v] = cost + w\\n                    heappush(pq, (cost + w, v))\\n        return -1 \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.graph = [[] for _ in range(n)]\\n        for u, v, w in edges: \\n            self.graph[u].append((v, w))\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, w = edge\\n        self.graph[u].append((v, w))\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        pq = [(0, node1)]\\n        dist = [inf]*len(self.graph)\\n        dist[node1] = 0 \\n        while pq: \\n            cost, u = heappop(pq)\\n            if u == node2: return cost\\n            for v, w in self.graph[u]: \\n                if cost + w < dist[v]: \\n                    dist[v] = cost + w\\n                    heappush(pq, (cost + w, v))\\n        return -1 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420558,
                "title": "easy-explanation-with-comments-and-complexities-mentioned-djikstra",
                "content": "# Intuition\\nFor initializing graph, we first need to add edges from edges[i][0] to edges[i][1] with edge weight as edges[i][2].To find shortest distance between two nodes, we need to use Djikstra\\'s algorithm. \\n**Note**: Here the source node is node1 and not 0, so take care while solving the algorithm.\\n\\n# Approach\\n1. With the given \"n\" and edges array, we create graph using adjacency list and add all the edges with edge-weight to create directed graph. This is done in constructor which is called while creating object of the class.\\n2. For addEdge, we add extra edge from edge[0] to edge[1] with edge-weight as edge[2].\\n3. To find shortest distance, we use Djikstra\\'s algorithm.\\n4. For this,we use PriorityQueue(min-heap) so that we get minimum distance required to reach the destination node.\\n5. We initialize distance array with infinite distance and keep on updating it whenever shorter distance to that path is discovered.\\n6. If we cannot reach destination node, distance will be infinite and we will return -1. \\n\\n# Complexity\\n- Time complexity:\\nO((N+E)*logN). Going through N nodes and E edges and log N for priority queue\\n\\n- Space complexity:\\nO(N). Distance array and priority queue\\n\\n# Code\\n```\\n//it is used to create graph\\n//where adjacent= neighbouring node to the current node\\n//edgecost=cost required to reach that node\\nclass Node{\\n    int adjacent,edgeCost;\\n    Node(int adjacent,int edgeCost){\\n        this.adjacent=adjacent;\\n        this.edgeCost=edgeCost;\\n    }\\n}\\n\\n//it is stored in queue to represent node with it\\'s current distance\\nclass Pair{\\n    int node,distance;\\n    Pair(int node,int distance){\\n        this.node=node;\\n        this.distance=distance;\\n    }\\n}\\n\\nclass Graph {\\n    //adjacency list for graph\\n    ArrayList<ArrayList<Node>> adj=new ArrayList<>();\\n    \\n    public Graph(int n, int[][] edges) {\\n        //adding empty array for all \"n\" nodes\\n        for(int i=0;i<n;i++){\\n            ArrayList<Node> arr=new ArrayList<>();\\n            adj.add(arr);\\n        }\\n        //creating edges between two nodes with given edge weight\\n        for(int i=0;i<edges.length;i++){\\n            adj.get(edges[i][0]).add(new Node(edges[i][1],edges[i][2]));\\n        }\\n    }\\n    \\n    //creating edges between two nodes with given edge weight\\n    public void addEdge(int[] edges) {\\n        adj.get(edges[0]).add(new Node(edges[1],edges[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        //min-heap to store node with minimum path distance\\n        PriorityQueue<Pair> pq=new PriorityQueue<Pair>((x,y)-> x.distance-y.distance);\\n        pq.offer(new Pair(node1,0));\\n        int[] dist=new int[adj.size()];\\n        //declaring distance array with all values intially as infinity\\n        for(int i=0;i<dist.length;i++){\\n            dist[i]=(int)(1e9);\\n        }\\n        //source node distance is assigned to 0\\n        dist[node1]=0;\\n        while(pq.size()!=0){\\n            //removing pair from queue\\n            Pair p=pq.poll();\\n            int distance=p.distance;\\n            int node=p.node;\\n            //traversing neighbouring nodes \\n            for(int i=0;i<adj.get(node).size();i++){\\n                int adjacent=adj.get(node).get(i).adjacent;\\n                int edgeCost=adj.get(node).get(i).edgeCost;\\n                //if computed path distance is smaller,update it\\n                if(distance+edgeCost<dist[adjacent]){\\n                    dist[adjacent]=distance+edgeCost;\\n                    pq.add(new Pair(adjacent,dist[adjacent]));\\n                }\\n            }\\n        }\\n        //if distance of destination node is infinity,it can be reached and return -1\\n        //else return the distance\\n        return dist[node2]==(int)(1e9)?-1:dist[node2];\\n    }\\n}\\n\\n",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Heap (Priority Queue)"
                ],
                "code": "# Intuition\\nFor initializing graph, we first need to add edges from edges[i][0] to edges[i][1] with edge weight as edges[i][2].To find shortest distance between two nodes, we need to use Djikstra\\'s algorithm. \\n**Note**: Here the source node is node1 and not 0, so take care while solving the algorithm.\\n\\n# Approach\\n1. With the given \"n\" and edges array, we create graph using adjacency list and add all the edges with edge-weight to create directed graph. This is done in constructor which is called while creating object of the class.\\n2. For addEdge, we add extra edge from edge[0] to edge[1] with edge-weight as edge[2].\\n3. To find shortest distance, we use Djikstra\\'s algorithm.\\n4. For this,we use PriorityQueue(min-heap) so that we get minimum distance required to reach the destination node.\\n5. We initialize distance array with infinite distance and keep on updating it whenever shorter distance to that path is discovered.\\n6. If we cannot reach destination node, distance will be infinite and we will return -1. \\n\\n# Complexity\\n- Time complexity:\\nO((N+E)*logN). Going through N nodes and E edges and log N for priority queue\\n\\n- Space complexity:\\nO(N). Distance array and priority queue\\n\\n# Code\\n```\\n//it is used to create graph\\n//where adjacent= neighbouring node to the current node\\n//edgecost=cost required to reach that node\\nclass Node{\\n    int adjacent,edgeCost;\\n    Node(int adjacent,int edgeCost){\\n        this.adjacent=adjacent;\\n        this.edgeCost=edgeCost;\\n    }\\n}\\n\\n//it is stored in queue to represent node with it\\'s current distance\\nclass Pair{\\n    int node,distance;\\n    Pair(int node,int distance){\\n        this.node=node;\\n        this.distance=distance;\\n    }\\n}\\n\\nclass Graph {\\n    //adjacency list for graph\\n    ArrayList<ArrayList<Node>> adj=new ArrayList<>();\\n    \\n    public Graph(int n, int[][] edges) {\\n        //adding empty array for all \"n\" nodes\\n        for(int i=0;i<n;i++){\\n            ArrayList<Node> arr=new ArrayList<>();\\n            adj.add(arr);\\n        }\\n        //creating edges between two nodes with given edge weight\\n        for(int i=0;i<edges.length;i++){\\n            adj.get(edges[i][0]).add(new Node(edges[i][1],edges[i][2]));\\n        }\\n    }\\n    \\n    //creating edges between two nodes with given edge weight\\n    public void addEdge(int[] edges) {\\n        adj.get(edges[0]).add(new Node(edges[1],edges[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        //min-heap to store node with minimum path distance\\n        PriorityQueue<Pair> pq=new PriorityQueue<Pair>((x,y)-> x.distance-y.distance);\\n        pq.offer(new Pair(node1,0));\\n        int[] dist=new int[adj.size()];\\n        //declaring distance array with all values intially as infinity\\n        for(int i=0;i<dist.length;i++){\\n            dist[i]=(int)(1e9);\\n        }\\n        //source node distance is assigned to 0\\n        dist[node1]=0;\\n        while(pq.size()!=0){\\n            //removing pair from queue\\n            Pair p=pq.poll();\\n            int distance=p.distance;\\n            int node=p.node;\\n            //traversing neighbouring nodes \\n            for(int i=0;i<adj.get(node).size();i++){\\n                int adjacent=adj.get(node).get(i).adjacent;\\n                int edgeCost=adj.get(node).get(i).edgeCost;\\n                //if computed path distance is smaller,update it\\n                if(distance+edgeCost<dist[adjacent]){\\n                    dist[adjacent]=distance+edgeCost;\\n                    pq.add(new Pair(adjacent,dist[adjacent]));\\n                }\\n            }\\n        }\\n        //if distance of destination node is infinity,it can be reached and return -1\\n        //else return the distance\\n        return dist[node2]==(int)(1e9)?-1:dist[node2];\\n    }\\n}\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 3420516,
                "title": "c-solution-using-dijkstra-algorithm",
                "content": "```\\nclass Graph \\n{\\n    public:\\n    vector<pair<int,int>> total[100];\\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        int t=edges.size();\\n        for(int i=0;i<t;i++) total[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        total[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;\\n        q.push({0,node1});\\n        bool v[101];\\n        memset(v,false,sizeof(v));\\n        while(!q.empty())\\n        {\\n            pair<int,int> p=q.top();\\n            q.pop();\\n            int cost=p.first;\\n            int node=p.second;\\n            if(v[node]) continue;\\n            v[node]=true;\\n            if(node==node2) return cost;\\n            for(int i=0;i<total[node].size();i++) q.push({cost+total[node][i].second,total[node][i].first});\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Graph \\n{\\n    public:\\n    vector<pair<int,int>> total[100];\\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        int t=edges.size();\\n        for(int i=0;i<t;i++) total[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        total[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;\\n        q.push({0,node1});\\n        bool v[101];\\n        memset(v,false,sizeof(v));\\n        while(!q.empty())\\n        {\\n            pair<int,int> p=q.top();\\n            q.pop();\\n            int cost=p.first;\\n            int node=p.second;\\n            if(v[node]) continue;\\n            v[node]=true;\\n            if(node==node2) return cost;\\n            for(int i=0;i<total[node].size();i++) q.push({cost+total[node][i].second,total[node][i].first});\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420499,
                "title": "my-solution",
                "content": "```\\nclass Graph {\\n private:\\n  static constexpr int i_from = 0;\\n  static constexpr int i_to = 1;\\n  static constexpr int i_cost = 2;\\n  using pq_node_t = pair<int, int>;   // {node, minimum cost}\\n  \\n public:\\n  /**\\n   * Time Complexity: O(n_edges)\\n   */\\n  Graph(const int n, const vector<vector<int>> &edges) : graph_(n) {\\n    for (const vector<int> &edge : edges) {\\n      graph_[edge[i_from]].emplace_back(edge[i_to], edge[i_cost]);\\n    }\\n  }\\n\\n  /**\\n   * Time Complexity: O(1)\\n   */\\n  void addEdge(const vector<int> &edge) {\\n    graph_[edge[i_from]].emplace_back(edge[i_to], edge[i_cost]);\\n  }\\n\\n  /**\\n   * Time Complexity: O(n_edges * log(n))\\n   */\\n  int shortestPath(const int node1, const int node2) {\\n    auto compare = [](const pq_node_t &lhs, const pq_node_t &rhs) -> bool {\\n      return !(lhs.second < rhs.second);\\n    };\\n    \\n    priority_queue<pq_node_t, vector<pq_node_t>, decltype(compare)> pq(compare);\\n    pq.emplace(node1, 0);\\n    int costs[graph_.size()];\\n    fill(costs, costs + graph_.size(), numeric_limits<int>::max());\\n    while (!pq.empty()) {\\n      const auto [node, cost] = pq.top();\\n      pq.pop();\\n      if (node == node2) {\\n        return cost;\\n      }\\n      if (cost >= costs[node]) {\\n        continue;\\n      }\\n      costs[node] = cost;\\n      for (const auto [next, cost_delta] : graph_[node]) {\\n        const int next_cost = cost + cost_delta;\\n        if (next_cost >= costs[next]) {\\n          continue;\\n        }\\n        pq.emplace(next, next_cost);\\n      }\\n    }\\n    return -1;\\n  }\\n  \\n private:\\n  vector<vector<pair<int, int>>> graph_;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Graph {\\n private:\\n  static constexpr int i_from = 0;\\n  static constexpr int i_to = 1;\\n  static constexpr int i_cost = 2;\\n  using pq_node_t = pair<int, int>;   // {node, minimum cost}\\n  \\n public:\\n  /**\\n   * Time Complexity: O(n_edges)\\n   */\\n  Graph(const int n, const vector<vector<int>> &edges) : graph_(n) {\\n    for (const vector<int> &edge : edges) {\\n      graph_[edge[i_from]].emplace_back(edge[i_to], edge[i_cost]);\\n    }\\n  }\\n\\n  /**\\n   * Time Complexity: O(1)\\n   */\\n  void addEdge(const vector<int> &edge) {\\n    graph_[edge[i_from]].emplace_back(edge[i_to], edge[i_cost]);\\n  }\\n\\n  /**\\n   * Time Complexity: O(n_edges * log(n))\\n   */\\n  int shortestPath(const int node1, const int node2) {\\n    auto compare = [](const pq_node_t &lhs, const pq_node_t &rhs) -> bool {\\n      return !(lhs.second < rhs.second);\\n    };\\n    \\n    priority_queue<pq_node_t, vector<pq_node_t>, decltype(compare)> pq(compare);\\n    pq.emplace(node1, 0);\\n    int costs[graph_.size()];\\n    fill(costs, costs + graph_.size(), numeric_limits<int>::max());\\n    while (!pq.empty()) {\\n      const auto [node, cost] = pq.top();\\n      pq.pop();\\n      if (node == node2) {\\n        return cost;\\n      }\\n      if (cost >= costs[node]) {\\n        continue;\\n      }\\n      costs[node] = cost;\\n      for (const auto [next, cost_delta] : graph_[node]) {\\n        const int next_cost = cost + cost_delta;\\n        if (next_cost >= costs[next]) {\\n          continue;\\n        }\\n        pq.emplace(next, next_cost);\\n      }\\n    }\\n    return -1;\\n  }\\n  \\n private:\\n  vector<vector<pair<int, int>>> graph_;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420492,
                "title": "python-o-n-2-time-o-n-2-space",
                "content": "# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n^2)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.size = n\\n        self.edges = [[-1 for _ in range(n)] for _ in range(n)]\\n        for edge in edges:\\n            self.addEdge(edge)\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        i = edge[0]\\n        j = edge[1]\\n        k = edge[2]\\n        self.edges[i][j] = k\\n        \\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        heap = []\\n        heappush(heap, (0, node1))\\n        dist = [float(\\'inf\\')] * self.size\\n        dist[node1] = 0\\n  \\n        while heap:\\n            d, u = heapq.heappop(heap)\\n            for v, weight in enumerate(self.edges[u]):\\n                if weight < 0:\\n                    continue\\n                if dist[v] > dist[u] + weight:\\n                    dist[v] = dist[u] + weight\\n                    heappush(heap, (dist[v], v))\\n            \\n        return dist[node2] if dist[node2] < float(\"inf\") else -1 \\n        \\n        \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python3",
                    "Graph",
                    "Heap (Priority Queue)",
                    "Matrix"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.size = n\\n        self.edges = [[-1 for _ in range(n)] for _ in range(n)]\\n        for edge in edges:\\n            self.addEdge(edge)\\n        \\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        i = edge[0]\\n        j = edge[1]\\n        k = edge[2]\\n        self.edges[i][j] = k\\n        \\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        heap = []\\n        heappush(heap, (0, node1))\\n        dist = [float(\\'inf\\')] * self.size\\n        dist[node1] = 0\\n  \\n        while heap:\\n            d, u = heapq.heappop(heap)\\n            for v, weight in enumerate(self.edges[u]):\\n                if weight < 0:\\n                    continue\\n                if dist[v] > dist[u] + weight:\\n                    dist[v] = dist[u] + weight\\n                    heappush(heap, (dist[v], v))\\n            \\n        return dist[node2] if dist[node2] < float(\"inf\") else -1 \\n        \\n        \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420465,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\nvector<pair<int,int>> graph[100];\\nint g;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        g=n;\\n        for(int i=0;i<edges.size();i++){\\n            graph[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n         graph[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        long long int dis[g+1];\\n        for(int i=0;i<=g;i++) dis[i]=1e10+5;\\n        dis[node1]=0;\\n        set<pair<int,int>> st;\\n        st.insert({0,node1});\\n        while(!st.empty()){\\n            int node=st.begin()->second;\\n            st.erase(st.begin());\\n            for( auto child : graph[node]){\\n                if(dis[child.first]>dis[node]+child.second){\\n                    dis[child.first]=dis[node]+child.second;\\n                    st.insert({dis[child.first],child.first});\\n                }\\n            }\\n        }\\n\\n        if(dis[node2]>1e10+1) return -1;\\n        return dis[node2];\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\nvector<pair<int,int>> graph[100];\\nint g;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        g=n;\\n        for(int i=0;i<edges.size();i++){\\n            graph[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n         graph[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        long long int dis[g+1];\\n        for(int i=0;i<=g;i++) dis[i]=1e10+5;\\n        dis[node1]=0;\\n        set<pair<int,int>> st;\\n        st.insert({0,node1});\\n        while(!st.empty()){\\n            int node=st.begin()->second;\\n            st.erase(st.begin());\\n            for( auto child : graph[node]){\\n                if(dis[child.first]>dis[node]+child.second){\\n                    dis[child.first]=dis[node]+child.second;\\n                    st.insert({dis[child.first],child.first});\\n                }\\n            }\\n        }\\n\\n        if(dis[node2]>1e10+1) return -1;\\n        return dis[node2];\\n\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420460,
                "title": "very-easy-and-self-explanatory-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n    class Node{\\n        int node;\\n        int cost;\\n        public Node(int node,int cost){\\n            this.node = node;\\n            this.cost = cost;\\n        }\\n    }\\n    \\n    class Cell implements Comparable<Cell>{\\n        int node;\\n        int minCost;\\n        public Cell(int node,int minCost){\\n            this.node = node;\\n            this.minCost = minCost;\\n        }\\n        public int compareTo(Cell that){\\n            return this.minCost - that.minCost;\\n        }\\n    }\\n    \\n    List<List<Node>> adjList = new ArrayList<>();\\n    int n;\\n    \\n    public Graph(int n, int[][] edges) {\\n\\n        this.n = n;\\n       \\n        for(int i=0;i<n;i++){\\n            adjList.add(new ArrayList<>());\\n        }\\n        for(int[] edge:edges){\\n            adjList.get(edge[0]).add(new Node(edge[1],edge[2]));\\n           \\n        }\\n        \\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        \\n            if(adjList.contains(edge[0])){\\n                adjList.add(new ArrayList<>());\\n            }\\n        \\n            adjList.get(edge[0]).add(new Node(edge[1],edge[2]));  \\n        \\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        \\n        Queue<Cell> q = new PriorityQueue<>();\\n        \\n        q.add(new Cell(node1,0));\\n        \\n        \\n        int[] shortestPath = new int[n];\\n        \\n        Arrays.fill(shortestPath,Integer.MAX_VALUE);\\n        \\n        shortestPath[node1] = 0;\\n        \\n        while(!q.isEmpty()){\\n            \\n            Cell cell = q.poll();\\n            \\n            int node = cell.node;\\n            int minCost = cell.minCost;\\n            \\n            for(int i=0;i<adjList.get(node).size();i++){\\n                int neighbourNode = adjList.get(node).get(i).node;\\n                int neighbourNodeCost = adjList.get(node).get(i).cost;\\n                \\n                if(shortestPath[neighbourNode] > minCost + neighbourNodeCost){\\n                    shortestPath[neighbourNode] = minCost + neighbourNodeCost;\\n                    q.add(new Cell(neighbourNode,shortestPath[neighbourNode]));\\n                }\\n                \\n            }\\n            \\n            \\n        }\\n        \\n        if(shortestPath[node2] == Integer.MAX_VALUE)\\n            return -1;\\n        \\n        return shortestPath[node2];\\n    }\\n}\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Graph {\\n    class Node{\\n        int node;\\n        int cost;\\n        public Node(int node,int cost){\\n            this.node = node;\\n            this.cost = cost;\\n        }\\n    }\\n    \\n    class Cell implements Comparable<Cell>{\\n        int node;\\n        int minCost;\\n        public Cell(int node,int minCost){\\n            this.node = node;\\n            this.minCost = minCost;\\n        }\\n        public int compareTo(Cell that){\\n            return this.minCost - that.minCost;\\n        }\\n    }\\n    \\n    List<List<Node>> adjList = new ArrayList<>();\\n    int n;\\n    \\n    public Graph(int n, int[][] edges) {\\n\\n        this.n = n;\\n       \\n        for(int i=0;i<n;i++){\\n            adjList.add(new ArrayList<>());\\n        }\\n        for(int[] edge:edges){\\n            adjList.get(edge[0]).add(new Node(edge[1],edge[2]));\\n           \\n        }\\n        \\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        \\n            if(adjList.contains(edge[0])){\\n                adjList.add(new ArrayList<>());\\n            }\\n        \\n            adjList.get(edge[0]).add(new Node(edge[1],edge[2]));  \\n        \\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        \\n        Queue<Cell> q = new PriorityQueue<>();\\n        \\n        q.add(new Cell(node1,0));\\n        \\n        \\n        int[] shortestPath = new int[n];\\n        \\n        Arrays.fill(shortestPath,Integer.MAX_VALUE);\\n        \\n        shortestPath[node1] = 0;\\n        \\n        while(!q.isEmpty()){\\n            \\n            Cell cell = q.poll();\\n            \\n            int node = cell.node;\\n            int minCost = cell.minCost;\\n            \\n            for(int i=0;i<adjList.get(node).size();i++){\\n                int neighbourNode = adjList.get(node).get(i).node;\\n                int neighbourNodeCost = adjList.get(node).get(i).cost;\\n                \\n                if(shortestPath[neighbourNode] > minCost + neighbourNodeCost){\\n                    shortestPath[neighbourNode] = minCost + neighbourNodeCost;\\n                    q.add(new Cell(neighbourNode,shortestPath[neighbourNode]));\\n                }\\n                \\n            }\\n            \\n            \\n        }\\n        \\n        if(shortestPath[node2] == Integer.MAX_VALUE)\\n            return -1;\\n        \\n        return shortestPath[node2];\\n    }\\n}\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420457,
                "title": "c-dijkstra",
                "content": "# Intuition\\nShortest paths in a weighted graph => Dijkstra.\\nThere are only 100 calls for shortestPath, so Dijkstra is enought.\\n\\n# Approach\\n- Dijkstra\\n\\n# Complexity\\n- Time complexity: $$O(E * Log(V))$$\\n\\n- Space complexity: $$O(E + V)$$\\n\\n# Code\\n```\\npublic class Graph \\n{\\n    private readonly int n;\\n    private readonly List<int[]>[] adj;\\n    public Graph(int n, int[][] edges)\\n    {\\n        this.n = n;\\n        adj = new List<int[]>[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            adj[i] = new List<int[]>();\\n        }\\n        foreach (int[] edge in edges)\\n        {\\n            AddEdge(edge);\\n        }\\n    }\\n\\n    public void AddEdge(int[] edge)\\n    {\\n        adj[edge[0]].Add(new int[] { edge[1], edge[2] });\\n    }\\n\\n    public int ShortestPath(int node1, int node2)\\n    {\\n        int[] dist = new int[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            dist[i] = int.MaxValue;\\n        }\\n        dist[node1] = 0;\\n        PriorityQueue<int[], int> pq = new PriorityQueue<int[], int>();\\n        pq.Enqueue(new int[] { node1, 0 }, 0);\\n        while (pq.Count > 0)\\n        {\\n            int[] curr = pq.Dequeue();\\n            int u = curr[0];\\n            int d = curr[1];\\n            if (u == node2)\\n            {\\n                return d;\\n            }\\n            foreach (int[] edge in adj[u])\\n            {\\n                int v = edge[0];\\n                int w = edge[1];\\n                if (dist[u] + w < dist[v])\\n                {\\n                    dist[v] = dist[u] + w;\\n                    pq.Enqueue(new int[] { v, dist[v] }, dist[v]);\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Graph \\n{\\n    private readonly int n;\\n    private readonly List<int[]>[] adj;\\n    public Graph(int n, int[][] edges)\\n    {\\n        this.n = n;\\n        adj = new List<int[]>[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            adj[i] = new List<int[]>();\\n        }\\n        foreach (int[] edge in edges)\\n        {\\n            AddEdge(edge);\\n        }\\n    }\\n\\n    public void AddEdge(int[] edge)\\n    {\\n        adj[edge[0]].Add(new int[] { edge[1], edge[2] });\\n    }\\n\\n    public int ShortestPath(int node1, int node2)\\n    {\\n        int[] dist = new int[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            dist[i] = int.MaxValue;\\n        }\\n        dist[node1] = 0;\\n        PriorityQueue<int[], int> pq = new PriorityQueue<int[], int>();\\n        pq.Enqueue(new int[] { node1, 0 }, 0);\\n        while (pq.Count > 0)\\n        {\\n            int[] curr = pq.Dequeue();\\n            int u = curr[0];\\n            int d = curr[1];\\n            if (u == node2)\\n            {\\n                return d;\\n            }\\n            foreach (int[] edge in adj[u])\\n            {\\n                int v = edge[0];\\n                int w = edge[1];\\n                if (dist[u] + w < dist[v])\\n                {\\n                    dist[v] = dist[u] + w;\\n                    pq.Enqueue(new int[] { v, dist[v] }, dist[v]);\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420407,
                "title": "c-python-short-code-by-using-floyd-warshall-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nn is only 100, and the O(n^3) solution is doable.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^3)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code (C++)\\n```\\nconst int INF = 0x3f3f3f3f;\\nint dis[110][110];\\nclass Graph {\\npublic:\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this -> n = n;\\n        memset(dis, 0x3f, sizeof dis);\\n        for (auto e : edges){\\n            int i = e[0], j = e[1], c = e[2];\\n            dis[i][j] = c;\\n        }\\n        for (int i = 0; i< n; ++i)dis[i][i] = 0;   \\n        for (int k = 0; k < n; ++k)\\n             for (int i = 0; i < n; ++i)\\n               for (int j = 0; j < n; ++j)\\n                      dis[i][j] = min(dis[i][j], dis[i][k]+dis[k][j]);\\n    }\\n    void addEdge(vector<int> e) {\\n        int k1 = e[0], k2 = e[1], c = e[2];\\n        for (int i = 0; i < n; ++i)\\n            for (int j = 0; j < n; ++j)\\n                dis[i][j] = min(dis[i][j], dis[i][k1] + c + dis[k2][j]);        \\n    }\\n    \\n    int shortestPath(int i, int j) {\\n        return dis[i][j] == INF? -1: dis[i][j];      \\n    }\\n};\\n```\\n\\n# Code (Python) \\n```python\\nclass Graph:\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.dis = [[float(\\'inf\\')]*n for _ in range(n)]\\n        for a,b, c in edges:\\n            self.dis[a][b]=c\\n        for i in range(n):self.dis[i][i]=0\\n        for k in range(n):\\n            for i in range(n):\\n                for j in range(n):\\n                    self.dis[i][j] = min(self.dis[i][j], self.dis[i][k]+self.dis[k][j])\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        k1, k2, c = edge\\n        for i in range(self.n):\\n            for j in range(self.n):\\n                self.dis[i][j] = min(self.dis[i][j], self.dis[i][k1] + c + self.dis[k2][j])\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        if self.dis[node1][node2] == float(\\'inf\\'):return -1\\n        return self.dis[node1][node2]\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nconst int INF = 0x3f3f3f3f;\\nint dis[110][110];\\nclass Graph {\\npublic:\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        this -> n = n;\\n        memset(dis, 0x3f, sizeof dis);\\n        for (auto e : edges){\\n            int i = e[0], j = e[1], c = e[2];\\n            dis[i][j] = c;\\n        }\\n        for (int i = 0; i< n; ++i)dis[i][i] = 0;   \\n        for (int k = 0; k < n; ++k)\\n             for (int i = 0; i < n; ++i)\\n               for (int j = 0; j < n; ++j)\\n                      dis[i][j] = min(dis[i][j], dis[i][k]+dis[k][j]);\\n    }\\n    void addEdge(vector<int> e) {\\n        int k1 = e[0], k2 = e[1], c = e[2];\\n        for (int i = 0; i < n; ++i)\\n            for (int j = 0; j < n; ++j)\\n                dis[i][j] = min(dis[i][j], dis[i][k1] + c + dis[k2][j]);        \\n    }\\n    \\n    int shortestPath(int i, int j) {\\n        return dis[i][j] == INF? -1: dis[i][j];      \\n    }\\n};\\n```\n```python\\nclass Graph:\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.dis = [[float(\\'inf\\')]*n for _ in range(n)]\\n        for a,b, c in edges:\\n            self.dis[a][b]=c\\n        for i in range(n):self.dis[i][i]=0\\n        for k in range(n):\\n            for i in range(n):\\n                for j in range(n):\\n                    self.dis[i][j] = min(self.dis[i][j], self.dis[i][k]+self.dis[k][j])\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        k1, k2, c = edge\\n        for i in range(self.n):\\n            for j in range(self.n):\\n                self.dis[i][j] = min(self.dis[i][j], self.dis[i][k1] + c + self.dis[k2][j])\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        if self.dis[node1][node2] == float(\\'inf\\'):return -1\\n        return self.dis[node1][node2]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420399,
                "title": "simple-dijkstra-algorithm-java-solution",
                "content": "# Code\\n```\\nclass Pair implements Comparable<Pair> {\\n    int node;\\n    int wt;\\n    public Pair(int node, int wt){\\n        this.node=node;\\n        this.wt=wt;\\n    }\\n    @Override\\n    public int compareTo(Pair p){\\n        return this.wt==p.wt?(this.node-p.node):(this.wt-p.wt);\\n    }\\n}\\n\\nclass Graph {\\n    \\n    List<List<Pair>> adjList=new ArrayList<>();\\n    \\n    public Graph(int n, int[][] edges) {\\n        for(int i=0; i<n; i++) adjList.add(new ArrayList<Pair>());\\n        for(int[] edge: edges){\\n            int u=edge[0];\\n            int v=edge[1];\\n            int c=edge[2];\\n            adjList.get(u).add(new Pair(v, c));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int u=edge[0];\\n        int v=edge[1];\\n        int c=edge[2];\\n        adjList.get(u).add(new Pair(v, c));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        Queue<Pair> q=new PriorityQueue<>();\\n        int [] dist=new int [adjList.size()];\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[node1]=0;\\n        q.add(new Pair(node1,0));\\n        while(!q.isEmpty()){\\n            Pair pair=q.poll();\\n            int curr=pair.node;\\n            for(Pair adj: adjList.get(curr)){\\n                int adjNode=adj.node;\\n                int wt=adj.wt;\\n                if(dist[adjNode]>dist[curr]+wt){\\n                    dist[adjNode]=dist[curr]+wt;\\n                    q.add(new Pair(adjNode, dist[adjNode]));\\n                }\\n            }\\n        }\\n        return dist[node2]==Integer.MAX_VALUE ? -1 : dist[node2];\\n\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Pair implements Comparable<Pair> {\\n    int node;\\n    int wt;\\n    public Pair(int node, int wt){\\n        this.node=node;\\n        this.wt=wt;\\n    }\\n    @Override\\n    public int compareTo(Pair p){\\n        return this.wt==p.wt?(this.node-p.node):(this.wt-p.wt);\\n    }\\n}\\n\\nclass Graph {\\n    \\n    List<List<Pair>> adjList=new ArrayList<>();\\n    \\n    public Graph(int n, int[][] edges) {\\n        for(int i=0; i<n; i++) adjList.add(new ArrayList<Pair>());\\n        for(int[] edge: edges){\\n            int u=edge[0];\\n            int v=edge[1];\\n            int c=edge[2];\\n            adjList.get(u).add(new Pair(v, c));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int u=edge[0];\\n        int v=edge[1];\\n        int c=edge[2];\\n        adjList.get(u).add(new Pair(v, c));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        Queue<Pair> q=new PriorityQueue<>();\\n        int [] dist=new int [adjList.size()];\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[node1]=0;\\n        q.add(new Pair(node1,0));\\n        while(!q.isEmpty()){\\n            Pair pair=q.poll();\\n            int curr=pair.node;\\n            for(Pair adj: adjList.get(curr)){\\n                int adjNode=adj.node;\\n                int wt=adj.wt;\\n                if(dist[adjNode]>dist[curr]+wt){\\n                    dist[adjNode]=dist[curr]+wt;\\n                    q.add(new Pair(adjNode, dist[adjNode]));\\n                }\\n            }\\n        }\\n        return dist[node2]==Integer.MAX_VALUE ? -1 : dist[node2];\\n\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420381,
                "title": "dijkstra-s-shortest-path-algorithm-simple-code",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    typedef long long ll;\\n    vector<pair<int,int>>adj[110];\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        // adj.erase();\\n        for(auto it : edges){\\n            adj[it[0]].push_back(make_pair(it[1],it[2]));\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if(node1 == node2) return 0;\\n        int ans  = -1;\\n        \\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        \\n        vector<ll>vis(110,INT_MAX);\\n        \\n        for(auto it : adj[node1]){\\n            pq.push({it.second,it.first});\\n        }\\n\\n        while(!pq.empty()){\\n            auto temp = pq.top();\\n            ll val = temp.first;\\n            ll num = temp.second;\\n\\n            pq.pop();\\n            \\n            if(num == node2) return val;\\n            \\n            if(vis[num] > val){\\n                vis[num] = val;\\n                for(auto it : adj[num]){\\n                    pq.push({it.second+val,it.first});\\n                }\\n            }\\n            \\n            \\n        }\\n        return -1;\\n    }\\n};\\n\\n\\n```\\n# upvote if it\\'s help you HAPPY CODING :)",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    typedef long long ll;\\n    vector<pair<int,int>>adj[110];\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        // adj.erase();\\n        for(auto it : edges){\\n            adj[it[0]].push_back(make_pair(it[1],it[2]));\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if(node1 == node2) return 0;\\n        int ans  = -1;\\n        \\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        \\n        vector<ll>vis(110,INT_MAX);\\n        \\n        for(auto it : adj[node1]){\\n            pq.push({it.second,it.first});\\n        }\\n\\n        while(!pq.empty()){\\n            auto temp = pq.top();\\n            ll val = temp.first;\\n            ll num = temp.second;\\n\\n            pq.pop();\\n            \\n            if(num == node2) return val;\\n            \\n            if(vis[num] > val){\\n                vis[num] = val;\\n                for(auto it : adj[num]){\\n                    pq.push({it.second+val,it.first});\\n                }\\n            }\\n            \\n            \\n        }\\n        return -1;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420377,
                "title": "c-dijkstra-s-algorithm",
                "content": "\\n\\n\\t\\tclass Graph {\\n\\t\\tpublic:\\n\\t\\t\\tvector<vector<pair<int,int>>>adj;\\n\\t\\t\\tGraph(int n, vector<vector<int>>& edges) {\\n\\t\\t\\t\\tadj.resize(n+1);\\n\\t\\t\\t\\tfor(int i=0;i<edges.size();i++){\\n\\t\\t\\t\\t\\tadj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid addEdge(vector<int> edge) {\\n\\t\\t\\t\\tadj[edge[0]].push_back({edge[1],edge[2]});\\n\\t\\t\\t}\\n\\n\\t\\t\\tint shortestPath(int node1, int node2) {\\n\\t\\t\\t\\tpriority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;\\n\\t\\t\\t\\tpq.push({0,node1});\\n\\t\\t\\t\\tint n=adj.size();\\n\\t\\t\\t\\tvector<int> dist(n+1, 1e9);\\n\\t\\t\\t\\tdist[node1]=0;\\n\\t\\t\\t\\twhile(!pq.empty()){\\n\\t\\t\\t\\t\\tint u=pq.top().second;\\n\\t\\t\\t\\t\\tpq.pop();\\n\\t\\t\\t\\t\\tfor(auto it:adj[u]){\\n\\t\\t\\t\\t\\t\\tint v=it.first;\\n\\t\\t\\t\\t\\t\\tint w=it.second;\\n\\t\\t\\t\\t\\t\\tif (dist[v] > dist[u] + w) {\\n\\t\\t\\t\\t\\t\\t\\tdist[v] = dist[u] + w;\\n\\t\\t\\t\\t\\t\\t\\tpq.push({dist[v], v});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(dist[node2]!=1e9){\\n\\t\\t\\t\\t\\treturn dist[node2];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [],
                "code": "\\n\\n\\t\\tclass Graph {\\n\\t\\tpublic:\\n\\t\\t\\tvector<vector<pair<int,int>>>adj;\\n\\t\\t\\tGraph(int n, vector<vector<int>>& edges) {\\n\\t\\t\\t\\tadj.resize(n+1);\\n\\t\\t\\t\\tfor(int i=0;i<edges.size();i++){\\n\\t\\t\\t\\t\\tadj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid addEdge(vector<int> edge) {\\n\\t\\t\\t\\tadj[edge[0]].push_back({edge[1],edge[2]});\\n\\t\\t\\t}\\n\\n\\t\\t\\tint shortestPath(int node1, int node2) {\\n\\t\\t\\t\\tpriority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;\\n\\t\\t\\t\\tpq.push({0,node1});\\n\\t\\t\\t\\tint n=adj.size();\\n\\t\\t\\t\\tvector<int> dist(n+1, 1e9);\\n\\t\\t\\t\\tdist[node1]=0;\\n\\t\\t\\t\\twhile(!pq.empty()){\\n\\t\\t\\t\\t\\tint u=pq.top().second;\\n\\t\\t\\t\\t\\tpq.pop();\\n\\t\\t\\t\\t\\tfor(auto it:adj[u]){\\n\\t\\t\\t\\t\\t\\tint v=it.first;\\n\\t\\t\\t\\t\\t\\tint w=it.second;\\n\\t\\t\\t\\t\\t\\tif (dist[v] > dist[u] + w) {\\n\\t\\t\\t\\t\\t\\t\\tdist[v] = dist[u] + w;\\n\\t\\t\\t\\t\\t\\t\\tpq.push({dist[v], v});\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(dist[node2]!=1e9){\\n\\t\\t\\t\\t\\treturn dist[node2];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\t}\\n\\t\\t};",
                "codeTag": "Java"
            },
            {
                "id": 3420374,
                "title": "c-solution",
                "content": "# Code\\n```\\npublic class Graph\\n{\\n    private readonly List<List<int[]>> _g;\\n\\n    public Graph(int n, int[][] edges)\\n    {\\n        _g = new List<List<int[]>>();\\n\\n        for (var i = 0; i < n; i++)\\n            _g.Add(new List<int[]>());\\n\\n        foreach (var e in edges)\\n            _g[e[0]].Add(new[] { e[1], e[2] });\\n    }\\n\\n    public void AddEdge(int[] e)\\n    {\\n        _g[e[0]].Add(new[] { e[1], e[2] });\\n    }\\n\\n    public int ShortestPath(int node1, int node2)\\n    {\\n        var pq = new PriorityQueue<int[], int[]>(Comparer<int[]>.Create((a, b) => b[0].CompareTo(a[0])));\\n        var cost = new int[_g.Count];\\n\\n        for (var i = 0; i < _g.Count; i++)\\n            cost[i] = int.MaxValue;\\n\\n        cost[node1] = 0;\\n        pq.Enqueue(new[] { 0, node1 }, new[] { 0, node1 });\\n\\n        while (pq.Count > 0 && pq.Peek()[1] != node2)\\n        {\\n            var cur = pq.Dequeue();\\n            var nc = cur[0];\\n            var i = cur[1];\\n\\n            foreach (var next in _g[i])\\n            {\\n                var j = next[0];\\n                var c = next[1];\\n\\n                if (-nc + c >= cost[j])\\n                    continue;\\n\\n                cost[j] = -nc + c;\\n                pq.Enqueue(new[] { nc - c, j }, new[] { nc - c, j });\\n            }\\n        }\\n\\n        return cost[node2] == int.MaxValue ? -1 : cost[node2];\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Graph\\n{\\n    private readonly List<List<int[]>> _g;\\n\\n    public Graph(int n, int[][] edges)\\n    {\\n        _g = new List<List<int[]>>();\\n\\n        for (var i = 0; i < n; i++)\\n            _g.Add(new List<int[]>());\\n\\n        foreach (var e in edges)\\n            _g[e[0]].Add(new[] { e[1], e[2] });\\n    }\\n\\n    public void AddEdge(int[] e)\\n    {\\n        _g[e[0]].Add(new[] { e[1], e[2] });\\n    }\\n\\n    public int ShortestPath(int node1, int node2)\\n    {\\n        var pq = new PriorityQueue<int[], int[]>(Comparer<int[]>.Create((a, b) => b[0].CompareTo(a[0])));\\n        var cost = new int[_g.Count];\\n\\n        for (var i = 0; i < _g.Count; i++)\\n            cost[i] = int.MaxValue;\\n\\n        cost[node1] = 0;\\n        pq.Enqueue(new[] { 0, node1 }, new[] { 0, node1 });\\n\\n        while (pq.Count > 0 && pq.Peek()[1] != node2)\\n        {\\n            var cur = pq.Dequeue();\\n            var nc = cur[0];\\n            var i = cur[1];\\n\\n            foreach (var next in _g[i])\\n            {\\n                var j = next[0];\\n                var c = next[1];\\n\\n                if (-nc + c >= cost[j])\\n                    continue;\\n\\n                cost[j] = -nc + c;\\n                pq.Enqueue(new[] { nc - c, j }, new[] { nc - c, j });\\n            }\\n        }\\n\\n        return cost[node2] == int.MaxValue ? -1 : cost[node2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420315,
                "title": "dijkstra-s",
                "content": "```\\nclass Graph {\\npublic:\\n    int v;\\n    vector<vector<pair<int,int>>>adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        v = n;\\n        adj.resize(v);\\n        for(auto it:edges)\\n        {\\n            adj[it[0]].push_back({it[1], it[2]});\\n        }\\n    }\\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;\\n        pq.push({0, node1});\\n        vector<int>dist(v, 1e9);\\n        dist[node1] = 0;\\n        while(pq.size())\\n        {\\n            int node = pq.top().second, wt = pq.top().first;\\n            pq.pop();\\n            for(auto it:adj[node])\\n            {\\n                int adjNode = it.first, edgewt = it.second;\\n                if(dist[adjNode] > wt+edgewt) {\\n                    dist[adjNode] = wt+edgewt;\\n                    pq.push({dist[adjNode], adjNode});\\n                }\\n            }\\n        }\\n        return dist[node2] == 1e9?-1:dist[node2];\\n        // return 0;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Graph {\\npublic:\\n    int v;\\n    vector<vector<pair<int,int>>>adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        v = n;\\n        adj.resize(v);\\n        for(auto it:edges)\\n        {\\n            adj[it[0]].push_back({it[1], it[2]});\\n        }\\n    }\\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;\\n        pq.push({0, node1});\\n        vector<int>dist(v, 1e9);\\n        dist[node1] = 0;\\n        while(pq.size())\\n        {\\n            int node = pq.top().second, wt = pq.top().first;\\n            pq.pop();\\n            for(auto it:adj[node])\\n            {\\n                int adjNode = it.first, edgewt = it.second;\\n                if(dist[adjNode] > wt+edgewt) {\\n                    dist[adjNode] = wt+edgewt;\\n                    pq.push({dist[adjNode], adjNode});\\n                }\\n            }\\n        }\\n        return dist[node2] == 1e9?-1:dist[node2];\\n        // return 0;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420295,
                "title": "simple-dijkstra-python",
                "content": "# Approach\\nGiven the constraints (n <= 100), we can just use dijkstra\\'s algorithm to solve it.\\n\\n# Complexity\\n- Time complexity: O(n log n) for each shortestPath(), O(1) for each addEdge()\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.adj = [[] for _ in range(n)]\\n        for u, v, weight in edges:\\n            self.adj[u].append((v, weight))\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, weight = edge\\n        self.adj[u].append((v, weight))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        inf = float(\\'inf\\')\\n        dist = [inf] * self.n\\n        dist[node1] = 0\\n        h = [(0, node1)]\\n        while len(h):\\n            cost, vertex = heapq.heappop(h)\\n            dist[vertex] = cost\\n            if vertex == node2:\\n                return cost\\n            for nei, weight in self.adj[vertex]:\\n                if dist[nei] > dist[vertex] + weight:\\n                    dist[nei] = dist[vertex] + weight\\n                    heapq.heappush(h, (dist[vertex] + weight, nei))\\n        return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.adj = [[] for _ in range(n)]\\n        for u, v, weight in edges:\\n            self.adj[u].append((v, weight))\\n        \\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, weight = edge\\n        self.adj[u].append((v, weight))\\n        \\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        inf = float(\\'inf\\')\\n        dist = [inf] * self.n\\n        dist[node1] = 0\\n        h = [(0, node1)]\\n        while len(h):\\n            cost, vertex = heapq.heappop(h)\\n            dist[vertex] = cost\\n            if vertex == node2:\\n                return cost\\n            for nei, weight in self.adj[vertex]:\\n                if dist[nei] > dist[vertex] + weight:\\n                    dist[nei] = dist[vertex] + weight\\n                    heapq.heappush(h, (dist[vertex] + weight, nei))\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420218,
                "title": "dijkstra-algorithm-straightforward-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor calculating shortest path apply dijkstra algorithm\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1- Create a adjaceny vector of vector to store edges\\n2- Create a distance array to keep the shortest distance of node from source\\n3- resize the adj and dis vector\\n4- in addEdge function store the edge in adj\\n5- in the shortestPath function apply dijkstra from node1 as source node\\n# Code\\n```\\nclass Graph {\\npublic:\\n vector<vector<pair<int,int>>>adj;\\n    vector<int>d;\\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        d.resize(n);\\n        adj.resize(n);\\n        for(auto it:edges)\\n        {\\n            adj[it[0]].push_back({it[1],it[2]});  \\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        for(int i=0;i<d.size();i++)\\n        {\\n            d[i]=INT_MAX;\\n        }\\n        d[node1]=0;\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        pq.push({0,node1});\\n        while(!pq.empty())\\n        {\\n            int node=pq.top().second;\\n            int dis=pq.top().first;\\n            pq.pop();\\n            if(node==node2)\\n                return d[node];\\n            if(dis>d[node])\\n                continue;\\n            for(auto it:adj[node])\\n            {\\n                int e1=it.first;\\n                int w1=it.second;\\n                if(d[node]+w1<d[e1])\\n                {\\n                    d[e1]=d[node]+w1;\\n                    pq.push({d[e1],e1});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n vector<vector<pair<int,int>>>adj;\\n    vector<int>d;\\n    Graph(int n, vector<vector<int>>& edges) \\n    {\\n        d.resize(n);\\n        adj.resize(n);\\n        for(auto it:edges)\\n        {\\n            adj[it[0]].push_back({it[1],it[2]});  \\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) \\n    {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) \\n    {\\n        for(int i=0;i<d.size();i++)\\n        {\\n            d[i]=INT_MAX;\\n        }\\n        d[node1]=0;\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        pq.push({0,node1});\\n        while(!pq.empty())\\n        {\\n            int node=pq.top().second;\\n            int dis=pq.top().first;\\n            pq.pop();\\n            if(node==node2)\\n                return d[node];\\n            if(dis>d[node])\\n                continue;\\n            for(auto it:adj[node])\\n            {\\n                int e1=it.first;\\n                int w1=it.second;\\n                if(d[node]+w1<d[e1])\\n                {\\n                    d[e1]=d[node]+w1;\\n                    pq.push({d[e1],e1});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420215,
                "title": "c-bfs",
                "content": "# Intuition\\nUse BFS algorithm for the 3rd method\\n```\\npublic int ShortestPath(int node1, int node2)\\n```\\n\\n# Approach\\nAdd the the class and initialize in the constructor an extra array with all edges:\\n```\\nprivate List<int[]>[] arr;\\n```\\n```\\nfor (int i = 0; i < edges.Length; i++)\\n{\\n    arr[edges[i][0]].Add(new[] { edges[i][1], edges[i][2] });\\n}\\n```\\nIn the AddEdge just add new edge:\\n```\\narr[edge[0]].Add(new[] { edge[1], edge[2] });\\n```\\nIn the `ShortestPath(int node1, int node2)` method just use BFS algorithm to calculate results for all nodes.\\nRecalculate the result for the certain node if the new result is better (i.e. less), then the previous one:\\n```\\nif (lengths[nextNode] > arr[item][i][1] + lengths[item])\\n{\\n    lengths[nextNode] = arr[item][i][1] + lengths[item];\\n    ...\\n}\\n```\\nAt the end return lengths[node2] or -1, if there is no path.\\n\\n# Complexity\\n- Time complexity:\\n$$O(len(edges))$$ -->\\n\\n- Space complexity:\\n$$O(len(edges))$$\\n\\n# Code\\n```\\npublic class Graph {\\n    private List<int[]>[] arr;\\n    public Graph(int n, int[][] edges) {\\n        arr = new List<int[]>[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            arr[i] = new List<int[]>();\\n        }\\n        for (int i = 0; i < edges.Length; i++)\\n        {\\n            arr[edges[i][0]].Add(new[] { edges[i][1], edges[i][2] });\\n        }\\n    }\\n    \\n    public void AddEdge(int[] edge) {\\n        arr[edge[0]].Add(new[] { edge[1], edge[2] });\\n    }\\n    \\n    public int ShortestPath(int node1, int node2) {\\n        var set = new HashSet<int> { node1 };\\n        var lengths = new int[arr.Length];\\n        for (int i = 0; i < lengths.Length; i++)\\n        {\\n            lengths[i] = int.MaxValue;\\n        }\\n        lengths[node1] = 0;\\n        while (set.Count > 0)\\n        {\\n            var set2 = new HashSet<int> ();\\n            foreach (var item in set)\\n            {\\n                for (int i = 0; i < arr[item].Count; i++)\\n                {\\n                    var nextNode = arr[item][i][0];\\n                    if (lengths[nextNode] > arr[item][i][1] + lengths[item])\\n                    {\\n                        lengths[nextNode] = arr[item][i][1] + lengths[item];\\n                        set2.Add(nextNode);\\n                    }\\n                }\\n            }\\n            set = set2;\\n        }\\n        return lengths[node2] != int.MaxValue ? lengths[node2] : -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.AddEdge(edge);\\n * int param_2 = obj.ShortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C#",
                    "Breadth-First Search"
                ],
                "code": "```\\npublic int ShortestPath(int node1, int node2)\\n```\n```\\nprivate List<int[]>[] arr;\\n```\n```\\nfor (int i = 0; i < edges.Length; i++)\\n{\\n    arr[edges[i][0]].Add(new[] { edges[i][1], edges[i][2] });\\n}\\n```\n```\\narr[edge[0]].Add(new[] { edge[1], edge[2] });\\n```\n```\\nif (lengths[nextNode] > arr[item][i][1] + lengths[item])\\n{\\n    lengths[nextNode] = arr[item][i][1] + lengths[item];\\n    ...\\n}\\n```\n```\\npublic class Graph {\\n    private List<int[]>[] arr;\\n    public Graph(int n, int[][] edges) {\\n        arr = new List<int[]>[n];\\n        for (int i = 0; i < n; i++)\\n        {\\n            arr[i] = new List<int[]>();\\n        }\\n        for (int i = 0; i < edges.Length; i++)\\n        {\\n            arr[edges[i][0]].Add(new[] { edges[i][1], edges[i][2] });\\n        }\\n    }\\n    \\n    public void AddEdge(int[] edge) {\\n        arr[edge[0]].Add(new[] { edge[1], edge[2] });\\n    }\\n    \\n    public int ShortestPath(int node1, int node2) {\\n        var set = new HashSet<int> { node1 };\\n        var lengths = new int[arr.Length];\\n        for (int i = 0; i < lengths.Length; i++)\\n        {\\n            lengths[i] = int.MaxValue;\\n        }\\n        lengths[node1] = 0;\\n        while (set.Count > 0)\\n        {\\n            var set2 = new HashSet<int> ();\\n            foreach (var item in set)\\n            {\\n                for (int i = 0; i < arr[item].Count; i++)\\n                {\\n                    var nextNode = arr[item][i][0];\\n                    if (lengths[nextNode] > arr[item][i][1] + lengths[item])\\n                    {\\n                        lengths[nextNode] = arr[item][i][1] + lengths[item];\\n                        set2.Add(nextNode);\\n                    }\\n                }\\n            }\\n            set = set2;\\n        }\\n        return lengths[node2] != int.MaxValue ? lengths[node2] : -1;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.AddEdge(edge);\\n * int param_2 = obj.ShortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420208,
                "title": "implemented-easily",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>>adj;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for(auto& edge:edges){\\n            adj[edge[0]].push_back({edge[1],edge[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        if(edge.size()==2){\\n            edge.push_back(0);\\n        }\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int src, int dest) {\\n    int n = adj.size(); // Number of nodes in the graph\\n    vector<int> dist(n, INT_MAX); // Initialize distances to all nodes as infinity\\n    dist[src] = 0; // Distance from source to itself is 0\\n\\n    // Priority queue to store nodes to be processed, ordered by distance\\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n    pq.push({0, src});\\n\\n    while (!pq.empty()) {\\n        int u = pq.top().second; // Extract the node with minimum distance\\n        pq.pop();\\n\\n        // Iterate over all adjacent nodes of u\\n        for (auto& edge : adj[u]) {\\n            int v = edge.first; // Adjacent node\\n            int weight = edge.second; // Weight of the edge from u to v\\n\\n            // If a shorter path is found from src to v passing through u\\n            if (dist[u] + weight < dist[v]) {\\n                dist[v] = dist[u] + weight; // Update the distance\\n                pq.push({dist[v], v}); // Push v into the priority queue for further processing\\n            }\\n        }\\n    }\\n\\n    if(dist[dest]==INT_MAX) return -1;\\n        else return dist[dest]; \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>>adj;\\n    \\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for(auto& edge:edges){\\n            adj[edge[0]].push_back({edge[1],edge[2]});\\n        }\\n        \\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        if(edge.size()==2){\\n            edge.push_back(0);\\n        }\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int src, int dest) {\\n    int n = adj.size(); // Number of nodes in the graph\\n    vector<int> dist(n, INT_MAX); // Initialize distances to all nodes as infinity\\n    dist[src] = 0; // Distance from source to itself is 0\\n\\n    // Priority queue to store nodes to be processed, ordered by distance\\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n    pq.push({0, src});\\n\\n    while (!pq.empty()) {\\n        int u = pq.top().second; // Extract the node with minimum distance\\n        pq.pop();\\n\\n        // Iterate over all adjacent nodes of u\\n        for (auto& edge : adj[u]) {\\n            int v = edge.first; // Adjacent node\\n            int weight = edge.second; // Weight of the edge from u to v\\n\\n            // If a shorter path is found from src to v passing through u\\n            if (dist[u] + weight < dist[v]) {\\n                dist[v] = dist[u] + weight; // Update the distance\\n                pq.push({dist[v], v}); // Push v into the priority queue for further processing\\n            }\\n        }\\n    }\\n\\n    if(dist[dest]==INT_MAX) return -1;\\n        else return dist[dest]; \\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420201,
                "title": "java-bfs",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\n    \\n    List<MyPath>[] allPaths;\\n    int level;\\n\\n    public Graph(int n, int[][] edges) {\\n        allPaths = new ArrayList[n];\\n        level = n;\\n        for(int[] edge : edges){\\n            int from = edge[0];\\n            if(allPaths[from] == null)\\n                allPaths[from] = new ArrayList<>();\\n            allPaths[from].add(new MyPath(edge[1], edge[2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int from = edge[0];\\n        if(allPaths[from] == null)\\n            allPaths[from] = new ArrayList<>();\\n        allPaths[from].add(new MyPath(edge[1], edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n\\n        Queue<MyPath> q = new LinkedList<>();\\n        int[] distance = new int[level];\\n        \\n        q.add(new MyPath(node1, 0));\\n        int res = Integer.MAX_VALUE;\\n        \\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            for(int i = 0; i < size; i++){\\n                MyPath node = q.poll();\\n                if(node.getDst() == node2){\\n                    res = Math.min(res, node.getCost());\\n                    continue;\\n                }\\n                int cur = node.getDst();\\n                if(allPaths[cur] != null){\\n                    for(MyPath neighbor : allPaths[cur]){\\n                      if(distance[neighbor.getDst()] != 0 && neighbor.getCost() + node.getCost() > distance[neighbor.getDst()])\\n                            continue;\\n                        distance[neighbor.getDst()] = neighbor.getCost() + node.getCost();\\n                        q.add(new MyPath(neighbor.getDst(), neighbor.getCost() + node.getCost()));\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return res == Integer.MAX_VALUE ? -1 : res;\\n    }\\n}\\n\\nclass MyPath{\\n    int dst;\\n    int cost;\\n    \\n    MyPath(final int dst, final int cost){\\n        this.dst = dst;\\n        this.cost = cost;\\n    }\\n    \\n    public int getDst(){\\n        return this.dst;\\n    }\\n    \\n    public int getCost(){\\n        return this.cost;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Graph {\\n    \\n    List<MyPath>[] allPaths;\\n    int level;\\n\\n    public Graph(int n, int[][] edges) {\\n        allPaths = new ArrayList[n];\\n        level = n;\\n        for(int[] edge : edges){\\n            int from = edge[0];\\n            if(allPaths[from] == null)\\n                allPaths[from] = new ArrayList<>();\\n            allPaths[from].add(new MyPath(edge[1], edge[2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        int from = edge[0];\\n        if(allPaths[from] == null)\\n            allPaths[from] = new ArrayList<>();\\n        allPaths[from].add(new MyPath(edge[1], edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n\\n        Queue<MyPath> q = new LinkedList<>();\\n        int[] distance = new int[level];\\n        \\n        q.add(new MyPath(node1, 0));\\n        int res = Integer.MAX_VALUE;\\n        \\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            for(int i = 0; i < size; i++){\\n                MyPath node = q.poll();\\n                if(node.getDst() == node2){\\n                    res = Math.min(res, node.getCost());\\n                    continue;\\n                }\\n                int cur = node.getDst();\\n                if(allPaths[cur] != null){\\n                    for(MyPath neighbor : allPaths[cur]){\\n                      if(distance[neighbor.getDst()] != 0 && neighbor.getCost() + node.getCost() > distance[neighbor.getDst()])\\n                            continue;\\n                        distance[neighbor.getDst()] = neighbor.getCost() + node.getCost();\\n                        q.add(new MyPath(neighbor.getDst(), neighbor.getCost() + node.getCost()));\\n                    }\\n                }\\n            }\\n        }\\n        \\n        return res == Integer.MAX_VALUE ? -1 : res;\\n    }\\n}\\n\\nclass MyPath{\\n    int dst;\\n    int cost;\\n    \\n    MyPath(final int dst, final int cost){\\n        this.dst = dst;\\n        this.cost = cost;\\n    }\\n    \\n    public int getDst(){\\n        return this.dst;\\n    }\\n    \\n    public int getCost(){\\n        return this.cost;\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420186,
                "title": "can-we-use-floyd-warshall-algorithm-to-solve-this-problem",
                "content": "When adding the edge (u, v), I would find all vertices a and b such that a path between (a,u) exists and one between (v, b) exists. Then I would try to set distance[a][b] = min(distance[a][b], distance[a][u]+edge_cost+distance[v][b]).\\n\\nTo find the shortest path between u and v, I would simply return distancec[u][v] if it is not infinite.\\n\\nThis logic makes sense to me but it looks like some distances may not be updated. My code is currently not running for certain testcases.\\n\\n\\tclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.distances = [[float(\\'inf\\') for j in range(n)] for i in range(n)]\\n                \\n        for i in range(n):\\n            self.distances[i][i] = 0\\n            \\n        for e in edges:\\n            self.distances[e[0]][e[1]] = e[2]\\n            \\n        for i in range(n):\\n            for j in range(n):\\n                self.compute(i, j)\\n                \\n        #print(\\'distances is\\', self.distances)\\n\\n    def compute(self, u, v):\\n        for k in range(self.n):\\n            if self.distances[u][k] != float(\\'inf\\') and self.distances[k][v] != float(\\'inf\\'):\\n                self.distances[u][v] = min(self.distances[u][v], self.distances[u][k]+self.distances[k][v])\\n        return\\n        \\n    def find_connected_to(self, u):\\n        connected = []\\n        for i in range(self.n):\\n            if self.distances[i][u] != float(\\'inf\\'):\\n                connected.append(i)\\n        return connected\\n    \\n    def find_connected_from(self, v):\\n        connected = []\\n        for i in range(self.n):\\n            if self.distances[v][i] != float(\\'inf\\'):\\n                connected.append(i)\\n        return connected\\n            \\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, cost = edge[0], edge[1], edge[2]\\n        #print(\\'adding edge\\', u, v, cost)\\n        \\n        self.distances[u][v] = cost # edge does not exist prior to this\\n\\n        connected_u = self.find_connected_to(u)\\n        connected_v = self.find_connected_from(v)\\n        #print(\\'cu cv\\', connected_u, connected_v, self.distances)\\n    \\n        for a in connected_u:\\n            for b in connected_v:\\n                #print(a, b, self.distances[a][b], self.distances[a][u], self.distances[v][b], cost)\\n                if self.distances[a][b] > self.distances[a][u]+cost+self.distances[v][b]:\\n                    #print(\\'hit\\')\\n                    self.distances[a][b] = self.distances[a][u]+cost+self.distances[v][b]\\n        return\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        #print(\\'shortest path\\', node1, node2, self.distances[node1][node2])\\n        self.compute(node1, node2)\\n        if self.distances[node1][node2] == float(\\'inf\\'):\\n            return -1\\n        return self.distances[node1][node2]",
                "solutionTags": [],
                "code": "When adding the edge (u, v), I would find all vertices a and b such that a path between (a,u) exists and one between (v, b) exists. Then I would try to set distance[a][b] = min(distance[a][b], distance[a][u]+edge_cost+distance[v][b]).\\n\\nTo find the shortest path between u and v, I would simply return distancec[u][v] if it is not infinite.\\n\\nThis logic makes sense to me but it looks like some distances may not be updated. My code is currently not running for certain testcases.\\n\\n\\tclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.n = n\\n        self.distances = [[float(\\'inf\\') for j in range(n)] for i in range(n)]\\n                \\n        for i in range(n):\\n            self.distances[i][i] = 0\\n            \\n        for e in edges:\\n            self.distances[e[0]][e[1]] = e[2]\\n            \\n        for i in range(n):\\n            for j in range(n):\\n                self.compute(i, j)\\n                \\n        #print(\\'distances is\\', self.distances)\\n\\n    def compute(self, u, v):\\n        for k in range(self.n):\\n            if self.distances[u][k] != float(\\'inf\\') and self.distances[k][v] != float(\\'inf\\'):\\n                self.distances[u][v] = min(self.distances[u][v], self.distances[u][k]+self.distances[k][v])\\n        return\\n        \\n    def find_connected_to(self, u):\\n        connected = []\\n        for i in range(self.n):\\n            if self.distances[i][u] != float(\\'inf\\'):\\n                connected.append(i)\\n        return connected\\n    \\n    def find_connected_from(self, v):\\n        connected = []\\n        for i in range(self.n):\\n            if self.distances[v][i] != float(\\'inf\\'):\\n                connected.append(i)\\n        return connected\\n            \\n    def addEdge(self, edge: List[int]) -> None:\\n        u, v, cost = edge[0], edge[1], edge[2]\\n        #print(\\'adding edge\\', u, v, cost)\\n        \\n        self.distances[u][v] = cost # edge does not exist prior to this\\n\\n        connected_u = self.find_connected_to(u)\\n        connected_v = self.find_connected_from(v)\\n        #print(\\'cu cv\\', connected_u, connected_v, self.distances)\\n    \\n        for a in connected_u:\\n            for b in connected_v:\\n                #print(a, b, self.distances[a][b], self.distances[a][u], self.distances[v][b], cost)\\n                if self.distances[a][b] > self.distances[a][u]+cost+self.distances[v][b]:\\n                    #print(\\'hit\\')\\n                    self.distances[a][b] = self.distances[a][u]+cost+self.distances[v][b]\\n        return\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        #print(\\'shortest path\\', node1, node2, self.distances[node1][node2])\\n        self.compute(node1, node2)\\n        if self.distances[node1][node2] == float(\\'inf\\'):\\n            return -1\\n        return self.distances[node1][node2]",
                "codeTag": "Java"
            },
            {
                "id": 3420184,
                "title": "c-easy-understanding-dijkstra-solution",
                "content": "\\n\\n# Approach\\nSimple Dijkstra algorithm \\n\\n\\n\\n\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>>adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        \\n        for( auto i: edges){\\n            adj[i[0]].push_back({i[1],i[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int n1, int n2) {\\n        \\n        int n= adj.size();\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        \\n        \\n        vector<int>dis(n,INT_MAX);\\n        dis[n1]=0;\\n        pq.push({n1,0});\\n        \\n        while(!pq.empty()){\\n            int x= pq.top().first;\\n            int d= pq.top().second;\\n            \\n            pq.pop();\\n            \\n            for(auto i: adj[x]){\\n                int w= i.second;\\n                int j= i.first;\\n                if(dis[x]+w<dis[j]){\\n                    pq.push({j,dis[x]+w});\\n                    dis[j]=dis[x]+w;\\n                }\\n            }\\n        }\\n        \\n        if(dis[n2]!=INT_MAX){\\n            return dis[n2];\\n        }\\n        return -1;\\n        \\n        \\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Breadth-First Search",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>>adj;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        \\n        for( auto i: edges){\\n            adj[i[0]].push_back({i[1],i[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int n1, int n2) {\\n        \\n        int n= adj.size();\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;\\n        \\n        \\n        vector<int>dis(n,INT_MAX);\\n        dis[n1]=0;\\n        pq.push({n1,0});\\n        \\n        while(!pq.empty()){\\n            int x= pq.top().first;\\n            int d= pq.top().second;\\n            \\n            pq.pop();\\n            \\n            for(auto i: adj[x]){\\n                int w= i.second;\\n                int j= i.first;\\n                if(dis[x]+w<dis[j]){\\n                    pq.push({j,dis[x]+w});\\n                    dis[j]=dis[x]+w;\\n                }\\n            }\\n        }\\n        \\n        if(dis[n2]!=INT_MAX){\\n            return dis[n2];\\n        }\\n        return -1;\\n        \\n        \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420164,
                "title": "c-simple-dijkstra",
                "content": "\\nOnly one thing we need to keep in mind:\\n1)After dequeing an element we need to check if after queueing this element we had found a shorter distance;\\notherwise it is just a plain bfs.\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> graph;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        graph.resize(n,vector<pair<int,int>>());\\n        for(int i=0;i<edges.size();i++)\\n        {\\n            graph[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        graph[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> distance(graph.size(),INT_MAX);\\n        distance[node1]=0;\\n        queue<pair<int,int>> q;\\n        q.push({node1,0});\\n        while(q.size()!=0)\\n        {\\n            pair<int,int> temp=q.front();\\n            q.pop();\\n            if(distance[temp.first]<temp.second)continue;\\n            for(int i=0;i<graph[temp.first].size();i++)\\n            {\\n                int new_distance=distance[temp.first]+graph[temp.first][i].second;\\n                if(new_distance>=distance[graph[temp.first][i].first])continue;\\n                distance[graph[temp.first][i].first]=new_distance;\\n                q.push({graph[temp.first][i].first,new_distance});\\n            }\\n        }\\n        return  distance[node2]==INT_MAX?-1:distance[node2];\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> graph;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        graph.resize(n,vector<pair<int,int>>());\\n        for(int i=0;i<edges.size();i++)\\n        {\\n            graph[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        graph[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> distance(graph.size(),INT_MAX);\\n        distance[node1]=0;\\n        queue<pair<int,int>> q;\\n        q.push({node1,0});\\n        while(q.size()!=0)\\n        {\\n            pair<int,int> temp=q.front();\\n            q.pop();\\n            if(distance[temp.first]<temp.second)continue;\\n            for(int i=0;i<graph[temp.first].size();i++)\\n            {\\n                int new_distance=distance[temp.first]+graph[temp.first][i].second;\\n                if(new_distance>=distance[graph[temp.first][i].first])continue;\\n                distance[graph[temp.first][i].first]=new_distance;\\n                q.push({graph[temp.first][i].first,new_distance});\\n            }\\n        }\\n        return  distance[node2]==INT_MAX?-1:distance[node2];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420157,
                "title": "djikstra",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nthis is a shortest path problem, so, djikstra algorithm will work here\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsimple djikstra\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>>adj;\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n, vector<pair<int, int>>());\\n        for(auto &it: edges){\\n            adj[it[0]].push_back({it[1], it[2]}); //node, cost\\n        }\\n        this->n=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int>dis(n, INT_MAX);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q; //dis, node\\n        q.push({0, node1});\\n        dis[node1]=0;\\n        while(!q.empty()){\\n            int dist=q.top().first;\\n            int node=q.top().second;\\n            q.pop();\\n            if(dis[node]!=dist)continue;\\n            for(auto &it: adj[node]){\\n                if(dist+it.second < dis[it.first]){\\n                    dis[it.first]=dist+it.second;\\n                    q.push({dis[it.first], it.first});\\n                }\\n            }\\n        }\\n        if(dis[node2]==INT_MAX)return -1;\\n        return dis[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int, int>>>adj;\\n    int n;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n, vector<pair<int, int>>());\\n        for(auto &it: edges){\\n            adj[it[0]].push_back({it[1], it[2]}); //node, cost\\n        }\\n        this->n=n;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int>dis(n, INT_MAX);\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q; //dis, node\\n        q.push({0, node1});\\n        dis[node1]=0;\\n        while(!q.empty()){\\n            int dist=q.top().first;\\n            int node=q.top().second;\\n            q.pop();\\n            if(dis[node]!=dist)continue;\\n            for(auto &it: adj[node]){\\n                if(dist+it.second < dis[it.first]){\\n                    dis[it.first]=dist+it.second;\\n                    q.push({dis[it.first], it.first});\\n                }\\n            }\\n        }\\n        if(dis[node2]==INT_MAX)return -1;\\n        return dis[node2];\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420150,
                "title": "python-simple-dijkstra-using-heap-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- build graph\\n- using dist array to save min cost of each node to reach it\\n- if i hit target node save cost and contniue as it may be reached from another place with low cost \\n- if dist[target] is flaot(\"inf) return -1 \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfrom collections import defaultdict\\nfrom heapq import heappush , heappop\\nclass Graph(object):\\n\\n    def __init__(self, n, edges):\\n        \"\"\"\\n        :type n: int\\n        :type edges: List[List[int]]\\n        \"\"\"\\n        self.graph = defaultdict(list)\\n        self.n=n\\n        for u,v,c in edges:\\n            self.graph[u].append((v,c))\\n\\n    def addEdge(self, edge):\\n        \"\"\"\\n        :type edge: List[int]\\n        :rtype: None\\n        \"\"\"\\n        self.graph[edge[0]].append((edge[1] , edge[2]))\\n        \\n\\n    def shortestPath(self, node1, node2):\\n        \"\"\"\\n        :type node1: int\\n        :type node2: int\\n        :rtype: int\\n        \"\"\"\\n        dist = [float(\"inf\")]*self.n\\n        dist[node1]=0\\n        heap = [[node1,0]]\\n        res=float(\"inf\")\\n        while heap:\\n            node , cost = heappop(heap)\\n            if node ==node2:\\n                res = min(res , cost)\\n            if cost > dist[node]:\\n                continue\\n            for neigh , edge_cost in self.graph[node]:\\n                new_cost=edge_cost + cost\\n                if new_cost < dist[neigh]:\\n                    heappush(heap , (neigh , new_cost))\\n                    dist[neigh] = new_cost\\n        return res if dist[node2]!=float(\"inf\") else -1\\n                    \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Graph"
                ],
                "code": "```\\nfrom collections import defaultdict\\nfrom heapq import heappush , heappop\\nclass Graph(object):\\n\\n    def __init__(self, n, edges):\\n        \"\"\"\\n        :type n: int\\n        :type edges: List[List[int]]\\n        \"\"\"\\n        self.graph = defaultdict(list)\\n        self.n=n\\n        for u,v,c in edges:\\n            self.graph[u].append((v,c))\\n\\n    def addEdge(self, edge):\\n        \"\"\"\\n        :type edge: List[int]\\n        :rtype: None\\n        \"\"\"\\n        self.graph[edge[0]].append((edge[1] , edge[2]))\\n        \\n\\n    def shortestPath(self, node1, node2):\\n        \"\"\"\\n        :type node1: int\\n        :type node2: int\\n        :rtype: int\\n        \"\"\"\\n        dist = [float(\"inf\")]*self.n\\n        dist[node1]=0\\n        heap = [[node1,0]]\\n        res=float(\"inf\")\\n        while heap:\\n            node , cost = heappop(heap)\\n            if node ==node2:\\n                res = min(res , cost)\\n            if cost > dist[node]:\\n                continue\\n            for neigh , edge_cost in self.graph[node]:\\n                new_cost=edge_cost + cost\\n                if new_cost < dist[neigh]:\\n                    heappush(heap , (neigh , new_cost))\\n                    dist[neigh] = new_cost\\n        return res if dist[node2]!=float(\"inf\") else -1\\n                    \\n        \\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420149,
                "title": "dijkstra-algorithm",
                "content": "\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    int k;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        int m = edges.size();\\n        k=n;\\n        adj.resize(n);\\n        for(int i=0;i<m;i++){\\n            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n\\t// Dijkstra\\'s algorithm begins from here\\n\\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int>>> pq;\\n\\tvector<int> distTo(k,INT_MAX);\\n\\tdistTo[node1] = 0;\\n\\tpq.push(make_pair(0,node1));\\t// (dist,source)\\n\\twhile( !pq.empty() ){\\n\\t\\tint dist = pq.top().first;\\n\\t\\tint prev = pq.top().second;\\n\\t\\tpq.pop();\\n\\t\\tvector<pair<int,int> >::iterator it;\\n\\t\\tfor( it = adj[prev].begin() ; it != adj[prev].end() ; it++){\\n\\t\\t\\tint next = it->first;\\n\\t\\t\\tint nextDist = it->second;\\n\\t\\t\\tif( distTo[next] > distTo[prev] + nextDist){\\n\\t\\t\\t\\tdistTo[next] = distTo[prev] + nextDist;\\n\\t\\t\\t\\tpq.push(make_pair(distTo[next], next));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n    int p = distTo[node2];\\n    if(p==INT_MAX){\\n        return -1;\\n    }\\n\\treturn p;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    vector<vector<pair<int,int>>> adj;\\n    int k;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        int m = edges.size();\\n        k=n;\\n        adj.resize(n);\\n        for(int i=0;i<m;i++){\\n            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n\\t// Dijkstra\\'s algorithm begins from here\\n\\tpriority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int>>> pq;\\n\\tvector<int> distTo(k,INT_MAX);\\n\\tdistTo[node1] = 0;\\n\\tpq.push(make_pair(0,node1));\\t// (dist,source)\\n\\twhile( !pq.empty() ){\\n\\t\\tint dist = pq.top().first;\\n\\t\\tint prev = pq.top().second;\\n\\t\\tpq.pop();\\n\\t\\tvector<pair<int,int> >::iterator it;\\n\\t\\tfor( it = adj[prev].begin() ; it != adj[prev].end() ; it++){\\n\\t\\t\\tint next = it->first;\\n\\t\\t\\tint nextDist = it->second;\\n\\t\\t\\tif( distTo[next] > distTo[prev] + nextDist){\\n\\t\\t\\t\\tdistTo[next] = distTo[prev] + nextDist;\\n\\t\\t\\t\\tpq.push(make_pair(distTo[next], next));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n    int p = distTo[node2];\\n    if(p==INT_MAX){\\n        return -1;\\n    }\\n\\treturn p;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420126,
                "title": "easy-java-solution-djikstra-s-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBasic djikstra\\'s algorithm to find shortest path\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(ElogV)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n\\n    public class Edge{\\n        int src;\\n        int dest;\\n        int weight;\\n        Edge(int src,int dest, int weight){\\n            this.src = src;\\n            this.dest = dest;\\n            this.weight = weight;\\n        }\\n    }\\n    int len;\\n    ArrayList<Edge>[] al;\\n    public Graph(int n, int[][] edges) {\\n        al = new ArrayList[n];\\n        len = n;\\n        for(int i=0;i<n;i++){\\n            al[i] = new ArrayList<Edge>();\\n        }\\n        for(int[] edge : edges){\\n            al[edge[0]].add(new Edge(edge[0],edge[1],edge[2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        al[edge[0]].add(new Edge(edge[0],edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<Edge> pq = new PriorityQueue<>((Edge a,Edge b)->{\\n            return a.weight-b.weight;\\n        });\\n        int[] dist = new int[len];\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[node1] = 0;\\n        pq.offer(new Edge(node1, node1, 0));\\n        while (!pq.isEmpty()) {\\n            Edge node = pq.poll();\\n            int u = node.dest;\\n            if (dist[u] < node.weight) continue;\\n            for (Edge neighbor : al[u]) {\\n                int v = neighbor.dest;\\n                int wei = neighbor.weight;\\n                if (dist[v] > dist[u] + wei) {\\n                    dist[v] = dist[u] + wei;\\n                    pq.offer(new Edge(node1, v, dist[v]));\\n                }\\n            }\\n        }\\n        return dist[node2] == Integer.MAX_VALUE ? -1 : dist[node2];\\n    }\\n\\n}",
                "solutionTags": [
                    "Java",
                    "Graph",
                    "Heap (Priority Queue)"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBasic djikstra\\'s algorithm to find shortest path\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(ElogV)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n\\n    public class Edge{\\n        int src;\\n        int dest;\\n        int weight;\\n        Edge(int src,int dest, int weight){\\n            this.src = src;\\n            this.dest = dest;\\n            this.weight = weight;\\n        }\\n    }\\n    int len;\\n    ArrayList<Edge>[] al;\\n    public Graph(int n, int[][] edges) {\\n        al = new ArrayList[n];\\n        len = n;\\n        for(int i=0;i<n;i++){\\n            al[i] = new ArrayList<Edge>();\\n        }\\n        for(int[] edge : edges){\\n            al[edge[0]].add(new Edge(edge[0],edge[1],edge[2]));\\n        }\\n    }\\n    \\n    public void addEdge(int[] edge) {\\n        al[edge[0]].add(new Edge(edge[0],edge[1],edge[2]));\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        PriorityQueue<Edge> pq = new PriorityQueue<>((Edge a,Edge b)->{\\n            return a.weight-b.weight;\\n        });\\n        int[] dist = new int[len];\\n        Arrays.fill(dist, Integer.MAX_VALUE);\\n        dist[node1] = 0;\\n        pq.offer(new Edge(node1, node1, 0));\\n        while (!pq.isEmpty()) {\\n            Edge node = pq.poll();\\n            int u = node.dest;\\n            if (dist[u] < node.weight) continue;\\n            for (Edge neighbor : al[u]) {\\n                int v = neighbor.dest;\\n                int wei = neighbor.weight;\\n                if (dist[v] > dist[u] + wei) {\\n                    dist[v] = dist[u] + wei;\\n                    pq.offer(new Edge(node1, v, dist[v]));\\n                }\\n            }\\n        }\\n        return dist[node2] == Integer.MAX_VALUE ? -1 : dist[node2];\\n    }\\n\\n}",
                "codeTag": "Java"
            },
            {
                "id": 3420125,
                "title": "c-solution-easy-peasy-lemon-squeezy",
                "content": "```\\n\\nclass Graph {\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for (auto& e : edges) {\\n            adj[e[0]].push_back({e[1], e[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(adj.size(), numeric_limits<int>::max());\\n        dist[node1] = 0;\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, node1});\\n        while (!pq.empty()) {\\n            int u = pq.top().second;\\n            pq.pop();\\n            for (auto& v : adj[u]) {\\n                int alt = dist[u] + v.second;\\n                if (alt < dist[v.first]) {\\n                    dist[v.first] = alt;\\n                    pq.push({alt, v.first});\\n                }\\n            }\\n            if (u == node2) {\\n                break;\\n            }\\n        }\\n        return dist[node2] == numeric_limits<int>::max() ? -1 : dist[node2];\\n    }\\n    \\nprivate:\\n    vector<vector<pair<int, int>>> adj;\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Graph"
                ],
                "code": "```\\n\\nclass Graph {\\npublic:\\n    Graph(int n, vector<vector<int>>& edges) {\\n        adj.resize(n);\\n        for (auto& e : edges) {\\n            adj[e[0]].push_back({e[1], e[2]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1], edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        vector<int> dist(adj.size(), numeric_limits<int>::max());\\n        dist[node1] = 0;\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\\n        pq.push({0, node1});\\n        while (!pq.empty()) {\\n            int u = pq.top().second;\\n            pq.pop();\\n            for (auto& v : adj[u]) {\\n                int alt = dist[u] + v.second;\\n                if (alt < dist[v.first]) {\\n                    dist[v.first] = alt;\\n                    pq.push({alt, v.first});\\n                }\\n            }\\n            if (u == node2) {\\n                break;\\n            }\\n        }\\n        return dist[node2] == numeric_limits<int>::max() ? -1 : dist[node2];\\n    }\\n    \\nprivate:\\n    vector<vector<pair<int, int>>> adj;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420123,
                "title": "python-easy-to-understand-solution-dijsktra-explained",
                "content": "# Approach\\nThe problem is very simple, we only need to calculate the shortest path each time using Dijsktra. I used an Adjacency List to keep track of the edges.\\n\\n\\n# Code\\n```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.__n = n\\n        self.__adjL = [ list() for _ in range(n) ]\\n        \\n        for edge in edges:\\n            self.__adjL[edge[0]].append([edge[1],edge[2]])\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.__adjL[edge[0]].append([edge[1],edge[2]])\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        adjL = self.__adjL\\n        \\n        visited = [ False for _ in range(self.__n) ]\\n        \\n        heap = []\\n        heap.append([0, node1])\\n        \\n        while heap:\\n            dist, cur = heapq.heappop(heap)\\n            \\n            if visited[cur]:\\n                continue\\n            \\n            visited[cur] = True\\n            \\n            if cur == node2:\\n                return dist\\n            \\n            for nextNode, weight in adjL[cur]:\\n                if not visited[nextNode]:\\n                    heapq.heappush(heap, [weight+dist, nextNode])\\n        \\n        return -1\\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Graph:\\n\\n    def __init__(self, n: int, edges: List[List[int]]):\\n        self.__n = n\\n        self.__adjL = [ list() for _ in range(n) ]\\n        \\n        for edge in edges:\\n            self.__adjL[edge[0]].append([edge[1],edge[2]])\\n\\n    def addEdge(self, edge: List[int]) -> None:\\n        self.__adjL[edge[0]].append([edge[1],edge[2]])\\n\\n    def shortestPath(self, node1: int, node2: int) -> int:\\n        adjL = self.__adjL\\n        \\n        visited = [ False for _ in range(self.__n) ]\\n        \\n        heap = []\\n        heap.append([0, node1])\\n        \\n        while heap:\\n            dist, cur = heapq.heappop(heap)\\n            \\n            if visited[cur]:\\n                continue\\n            \\n            visited[cur] = True\\n            \\n            if cur == node2:\\n                return dist\\n            \\n            for nextNode, weight in adjL[cur]:\\n                if not visited[nextNode]:\\n                    heapq.heappush(heap, [weight+dist, nextNode])\\n        \\n        return -1\\n\\n\\n# Your Graph object will be instantiated and called as such:\\n# obj = Graph(n, edges)\\n# obj.addEdge(edge)\\n# param_2 = obj.shortestPath(node1,node2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420084,
                "title": "dijkstra-c-easy-simple",
                "content": "```\\nclass Graph {\\npublic:\\n   \\n    int dijkstra(int start,int dst,vector<pair<int,int>> adj[],int n){\\n        set<pair<int,int>> st;\\n        st.insert({0,start});\\n    vector<int> dis(n,INT_MAX);\\n        dis[start]=0;\\n        while(st.size()>0){\\n            auto temp=*(st.begin());\\n            if(temp.second==dst) return dis[dst];\\n            st.erase(temp);\\n            for(auto it:adj[temp.second]){\\n                if(dis[temp.second]+it.second<dis[it.first]){\\n                    if(dis[it.first]!=INT_MAX){\\n                        st.erase({dis[it.first],it.first});\\n                    }\\n                    dis[it.first]=dis[temp.second]+it.second;\\n                    st.insert({dis[temp.second]+it.second,it.first});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n    int num;\\n    vector<pair<int,int>> adj[101];\\n    Graph(int n, vector<vector<int>>& edges) {\\n        num=n;\\n        vector<pair<int,int>> adj1[101];\\n        for(auto it:edges){\\n            adj1[it[0]].push_back({it[1],it[2]});\\n        }\\n        for(int i=0;i<101;i++){\\n            adj[i]=adj1[i];\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2,adj,num);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n   \\n    int dijkstra(int start,int dst,vector<pair<int,int>> adj[],int n){\\n        set<pair<int,int>> st;\\n        st.insert({0,start});\\n    vector<int> dis(n,INT_MAX);\\n        dis[start]=0;\\n        while(st.size()>0){\\n            auto temp=*(st.begin());\\n            if(temp.second==dst) return dis[dst];\\n            st.erase(temp);\\n            for(auto it:adj[temp.second]){\\n                if(dis[temp.second]+it.second<dis[it.first]){\\n                    if(dis[it.first]!=INT_MAX){\\n                        st.erase({dis[it.first],it.first});\\n                    }\\n                    dis[it.first]=dis[temp.second]+it.second;\\n                    st.insert({dis[temp.second]+it.second,it.first});\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n    int num;\\n    vector<pair<int,int>> adj[101];\\n    Graph(int n, vector<vector<int>>& edges) {\\n        num=n;\\n        vector<pair<int,int>> adj1[101];\\n        for(auto it:edges){\\n            adj1[it[0]].push_back({it[1],it[2]});\\n        }\\n        for(int i=0;i<101;i++){\\n            adj[i]=adj1[i];\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        adj[edge[0]].push_back({edge[1],edge[2]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return dijkstra(node1,node2,adj,num);\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420083,
                "title": "java-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Graph {\\n\\n    //int[] -> child, cost\\n    HashMap<Integer, List<int[]>> g = new HashMap<>();\\n    \\n    public Graph(int n, int[][] edges) {\\n        for(int i=0; i<n; i++){\\n            g.put(i, new ArrayList<int[]>());\\n        }\\n        \\n        for(int[] edge : edges){\\n            addEdge(edge);\\n        }\\n    }\\n    \\n    //from, to, edgecost\\n    public void addEdge(int[] edge) {\\n        //to, edgecost\\n        g.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] dst = new int[g.size()];\\n        boolean[] visited = new boolean[g.size()];\\n        \\n        Arrays.fill(dst, Integer.MAX_VALUE);\\n        \\n        if(node1 == node2) return 0;\\n        \\n        Queue<Integer> q = new ArrayDeque();\\n        q.offer(node1);\\n        dst[node1] = 0;\\n        visited[node1] = true;\\n        \\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            for(int i=0; i<size; i++){\\n                \\n                //parent\\n                int par = q.poll();\\n                \\n                //child: to, edgecost\\n                for(int[] child : g.get(par)){\\n                    int to = child[0];\\n                    int cost = child[1];\\n                    \\n                    int prevdst = dst[to];\\n                    //dst at child\\n                    dst[to] = Math.min(dst[to], dst[par] + cost);\\n                    \\n                    if(prevdst != dst[to]){\\n                        //visited[to] = true;\\n                        q.offer(to);\\n                    }\\n                }\\n                \\n            }\\n        }\\n        \\n        return dst[node2] == Integer.MAX_VALUE ? -1 : dst[node2];\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Topological Sort"
                ],
                "code": "```\\nclass Graph {\\n\\n    //int[] -> child, cost\\n    HashMap<Integer, List<int[]>> g = new HashMap<>();\\n    \\n    public Graph(int n, int[][] edges) {\\n        for(int i=0; i<n; i++){\\n            g.put(i, new ArrayList<int[]>());\\n        }\\n        \\n        for(int[] edge : edges){\\n            addEdge(edge);\\n        }\\n    }\\n    \\n    //from, to, edgecost\\n    public void addEdge(int[] edge) {\\n        //to, edgecost\\n        g.get(edge[0]).add(new int[]{edge[1], edge[2]});\\n    }\\n    \\n    public int shortestPath(int node1, int node2) {\\n        int[] dst = new int[g.size()];\\n        boolean[] visited = new boolean[g.size()];\\n        \\n        Arrays.fill(dst, Integer.MAX_VALUE);\\n        \\n        if(node1 == node2) return 0;\\n        \\n        Queue<Integer> q = new ArrayDeque();\\n        q.offer(node1);\\n        dst[node1] = 0;\\n        visited[node1] = true;\\n        \\n        while(!q.isEmpty()){\\n            int size = q.size();\\n            for(int i=0; i<size; i++){\\n                \\n                //parent\\n                int par = q.poll();\\n                \\n                //child: to, edgecost\\n                for(int[] child : g.get(par)){\\n                    int to = child[0];\\n                    int cost = child[1];\\n                    \\n                    int prevdst = dst[to];\\n                    //dst at child\\n                    dst[to] = Math.min(dst[to], dst[par] + cost);\\n                    \\n                    if(prevdst != dst[to]){\\n                        //visited[to] = true;\\n                        q.offer(to);\\n                    }\\n                }\\n                \\n            }\\n        }\\n        \\n        return dst[node2] == Integer.MAX_VALUE ? -1 : dst[node2];\\n    }\\n}\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph obj = new Graph(n, edges);\\n * obj.addEdge(edge);\\n * int param_2 = obj.shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3420052,
                "title": "c-simple-dijkstra-s-algorithm-o-v-2-queries",
                "content": "## Explanation\\nNotice the Graph and addEdge function is simple and the shortestPath could be simply found by Dijkstra\\'s Algorithm. \\n\\n### Reminder\\nNeed to add the case when Node1 == Node2!!\\n\\n# Code\\n```\\nclass Graph {\\npublic:\\n    unordered_map<int, vector<pair<int, int>>> graph;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for (auto &e: edges){\\n            graph[e[0]].push_back({e[2], e[1]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        graph[edge[0]].push_back({edge[2], edge[1]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if (node1 == node2) return 0;\\n        unordered_map<int, int> searched;\\n        searched.insert({node1, 0});\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;\\n        for (auto &a: graph[node1]) pq.push({a.first, a.second});\\n        while (!pq.empty()){\\n            auto top = pq.top();\\n            if (top.second == node2) return top.first;\\n            pq.pop();\\n            if (searched.find(top.second) == searched.end()){\\n                searched[top.second] = top.first;\\n                for (auto it = graph[top.second].begin(); it != graph[top.second].end(); it++) \\n                    pq.push({top.first + it->first, it->second});\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Greedy",
                    "Graph"
                ],
                "code": "```\\nclass Graph {\\npublic:\\n    unordered_map<int, vector<pair<int, int>>> graph;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        for (auto &e: edges){\\n            graph[e[0]].push_back({e[2], e[1]});\\n        }\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        graph[edge[0]].push_back({edge[2], edge[1]});\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        if (node1 == node2) return 0;\\n        unordered_map<int, int> searched;\\n        searched.insert({node1, 0});\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>> > pq;\\n        for (auto &a: graph[node1]) pq.push({a.first, a.second});\\n        while (!pq.empty()){\\n            auto top = pq.top();\\n            if (top.second == node2) return top.first;\\n            pq.pop();\\n            if (searched.find(top.second) == searched.end()){\\n                searched[top.second] = top.first;\\n                for (auto it = graph[top.second].begin(); it != graph[top.second].end(); it++) \\n                    pq.push({top.first + it->first, it->second});\\n            }\\n        }\\n        return -1;\\n    }\\n};\\n\\n/**\\n * Your Graph object will be instantiated and called as such:\\n * Graph* obj = new Graph(n, edges);\\n * obj->addEdge(edge);\\n * int param_2 = obj->shortestPath(node1,node2);\\n */\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1864287,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Just one word solution for this \"HARD\" question\\n\\n\"Dijkstra\""
                    },
                    {
                        "username": "ranjithreddy-31",
                        "content": "This seems simple if you know Dijkstra\\'s algorithm. Has to be medium."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "Wait so why is it that if the given graph for example doesnt have the node (2) in it then the distance from (2,2) is 0 instead of -1. Like if the node doesnt exist in the graph then shouldn't the ans be -1"
                    },
                    {
                        "username": "Ouskit",
                        "content": "Can this question be done with floyd-warshall ? "
                    },
                    {
                        "username": "Arshy_2807",
                        "content": "I think floyd-warshall will give you a TLE."
                    },
                    {
                        "username": "Ouskit",
                        "content": "I got wrong answer in below code with floyd-warshall, why?\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> distAll;\\n    int edgeNum;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        edgeNum = n;\\n        vector<vector<int>> dist(n,vector<int>(n,INT_MAX));\\n        \\n        // floyd warshall\\n        for(int i=0;i<n;i++)\\n            dist[i][i]=0;\\n        \\n        for(int i=0;i<edges.size();i++){\\n            \\n            int src=edges[i][0];\\n            int dst=edges[i][1];\\n            int wt=edges[i][2];\\n            \\n            dist[src][dst]=wt;\\n        }\\n        \\n        for(int k=0;k<n;k++){\\n            for(int i=0;i<n;i++){\\n                for(int j=0;j<n;j++){\\n                    if(dist[i][k] != INT_MAX && dist[k][j] != INT_MAX)\\n                        dist[i][j]=min(dist[i][j],(dist[i][k]+dist[k][j]));\\n                }\\n            }\\n        }\\n        \\n        distAll = dist;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        if(edge[2] > distAll[edge[0]][edge[1]]) return;\\n        distAll[edge[0]][edge[1]] = edge[2];\\n        \\n        for(int i=0;i< edgeNum;i++){\\n            for(int j=0;j < edgeNum;j++){\\n                    if(distAll[i][edge[0]] != INT_MAX && distAll[edge[0]][j] != INT_MAX){\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[0]]+distAll[edge[0]][j]));    \\n                    }\\n                    \\n                    if(distAll[i][edge[1]] != INT_MAX && distAll[edge[1]][j] != INT_MAX)\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[1]]+distAll[edge[1]][j]));\\n                }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return distAll[node1][node2] == INT_MAX ? -1 : distAll[node1][node2];\\n    }\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2034464,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Just one word solution for this \"HARD\" question\\n\\n\"Dijkstra\""
                    },
                    {
                        "username": "ranjithreddy-31",
                        "content": "This seems simple if you know Dijkstra\\'s algorithm. Has to be medium."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "Wait so why is it that if the given graph for example doesnt have the node (2) in it then the distance from (2,2) is 0 instead of -1. Like if the node doesnt exist in the graph then shouldn't the ans be -1"
                    },
                    {
                        "username": "Ouskit",
                        "content": "Can this question be done with floyd-warshall ? "
                    },
                    {
                        "username": "Arshy_2807",
                        "content": "I think floyd-warshall will give you a TLE."
                    },
                    {
                        "username": "Ouskit",
                        "content": "I got wrong answer in below code with floyd-warshall, why?\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> distAll;\\n    int edgeNum;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        edgeNum = n;\\n        vector<vector<int>> dist(n,vector<int>(n,INT_MAX));\\n        \\n        // floyd warshall\\n        for(int i=0;i<n;i++)\\n            dist[i][i]=0;\\n        \\n        for(int i=0;i<edges.size();i++){\\n            \\n            int src=edges[i][0];\\n            int dst=edges[i][1];\\n            int wt=edges[i][2];\\n            \\n            dist[src][dst]=wt;\\n        }\\n        \\n        for(int k=0;k<n;k++){\\n            for(int i=0;i<n;i++){\\n                for(int j=0;j<n;j++){\\n                    if(dist[i][k] != INT_MAX && dist[k][j] != INT_MAX)\\n                        dist[i][j]=min(dist[i][j],(dist[i][k]+dist[k][j]));\\n                }\\n            }\\n        }\\n        \\n        distAll = dist;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        if(edge[2] > distAll[edge[0]][edge[1]]) return;\\n        distAll[edge[0]][edge[1]] = edge[2];\\n        \\n        for(int i=0;i< edgeNum;i++){\\n            for(int j=0;j < edgeNum;j++){\\n                    if(distAll[i][edge[0]] != INT_MAX && distAll[edge[0]][j] != INT_MAX){\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[0]]+distAll[edge[0]][j]));    \\n                    }\\n                    \\n                    if(distAll[i][edge[1]] != INT_MAX && distAll[edge[1]][j] != INT_MAX)\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[1]]+distAll[edge[1]][j]));\\n                }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return distAll[node1][node2] == INT_MAX ? -1 : distAll[node1][node2];\\n    }\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1926540,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Just one word solution for this \"HARD\" question\\n\\n\"Dijkstra\""
                    },
                    {
                        "username": "ranjithreddy-31",
                        "content": "This seems simple if you know Dijkstra\\'s algorithm. Has to be medium."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "Wait so why is it that if the given graph for example doesnt have the node (2) in it then the distance from (2,2) is 0 instead of -1. Like if the node doesnt exist in the graph then shouldn't the ans be -1"
                    },
                    {
                        "username": "Ouskit",
                        "content": "Can this question be done with floyd-warshall ? "
                    },
                    {
                        "username": "Arshy_2807",
                        "content": "I think floyd-warshall will give you a TLE."
                    },
                    {
                        "username": "Ouskit",
                        "content": "I got wrong answer in below code with floyd-warshall, why?\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> distAll;\\n    int edgeNum;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        edgeNum = n;\\n        vector<vector<int>> dist(n,vector<int>(n,INT_MAX));\\n        \\n        // floyd warshall\\n        for(int i=0;i<n;i++)\\n            dist[i][i]=0;\\n        \\n        for(int i=0;i<edges.size();i++){\\n            \\n            int src=edges[i][0];\\n            int dst=edges[i][1];\\n            int wt=edges[i][2];\\n            \\n            dist[src][dst]=wt;\\n        }\\n        \\n        for(int k=0;k<n;k++){\\n            for(int i=0;i<n;i++){\\n                for(int j=0;j<n;j++){\\n                    if(dist[i][k] != INT_MAX && dist[k][j] != INT_MAX)\\n                        dist[i][j]=min(dist[i][j],(dist[i][k]+dist[k][j]));\\n                }\\n            }\\n        }\\n        \\n        distAll = dist;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        if(edge[2] > distAll[edge[0]][edge[1]]) return;\\n        distAll[edge[0]][edge[1]] = edge[2];\\n        \\n        for(int i=0;i< edgeNum;i++){\\n            for(int j=0;j < edgeNum;j++){\\n                    if(distAll[i][edge[0]] != INT_MAX && distAll[edge[0]][j] != INT_MAX){\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[0]]+distAll[edge[0]][j]));    \\n                    }\\n                    \\n                    if(distAll[i][edge[1]] != INT_MAX && distAll[edge[1]][j] != INT_MAX)\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[1]]+distAll[edge[1]][j]));\\n                }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return distAll[node1][node2] == INT_MAX ? -1 : distAll[node1][node2];\\n    }\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1864218,
                "content": [
                    {
                        "username": "15o1",
                        "content": "Just one word solution for this \"HARD\" question\\n\\n\"Dijkstra\""
                    },
                    {
                        "username": "ranjithreddy-31",
                        "content": "This seems simple if you know Dijkstra\\'s algorithm. Has to be medium."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "Wait so why is it that if the given graph for example doesnt have the node (2) in it then the distance from (2,2) is 0 instead of -1. Like if the node doesnt exist in the graph then shouldn't the ans be -1"
                    },
                    {
                        "username": "Ouskit",
                        "content": "Can this question be done with floyd-warshall ? "
                    },
                    {
                        "username": "Arshy_2807",
                        "content": "I think floyd-warshall will give you a TLE."
                    },
                    {
                        "username": "Ouskit",
                        "content": "I got wrong answer in below code with floyd-warshall, why?\\n```cpp\\nclass Graph {\\npublic:\\n    vector<vector<int>> distAll;\\n    int edgeNum;\\n    Graph(int n, vector<vector<int>>& edges) {\\n        edgeNum = n;\\n        vector<vector<int>> dist(n,vector<int>(n,INT_MAX));\\n        \\n        // floyd warshall\\n        for(int i=0;i<n;i++)\\n            dist[i][i]=0;\\n        \\n        for(int i=0;i<edges.size();i++){\\n            \\n            int src=edges[i][0];\\n            int dst=edges[i][1];\\n            int wt=edges[i][2];\\n            \\n            dist[src][dst]=wt;\\n        }\\n        \\n        for(int k=0;k<n;k++){\\n            for(int i=0;i<n;i++){\\n                for(int j=0;j<n;j++){\\n                    if(dist[i][k] != INT_MAX && dist[k][j] != INT_MAX)\\n                        dist[i][j]=min(dist[i][j],(dist[i][k]+dist[k][j]));\\n                }\\n            }\\n        }\\n        \\n        distAll = dist;\\n    }\\n    \\n    void addEdge(vector<int> edge) {\\n        if(edge[2] > distAll[edge[0]][edge[1]]) return;\\n        distAll[edge[0]][edge[1]] = edge[2];\\n        \\n        for(int i=0;i< edgeNum;i++){\\n            for(int j=0;j < edgeNum;j++){\\n                    if(distAll[i][edge[0]] != INT_MAX && distAll[edge[0]][j] != INT_MAX){\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[0]]+distAll[edge[0]][j]));    \\n                    }\\n                    \\n                    if(distAll[i][edge[1]] != INT_MAX && distAll[edge[1]][j] != INT_MAX)\\n                        distAll[i][j]=min(distAll[i][j],(distAll[i][edge[1]]+distAll[edge[1]][j]));\\n                }\\n        }\\n    }\\n    \\n    int shortestPath(int node1, int node2) {\\n        return distAll[node1][node2] == INT_MAX ? -1 : distAll[node1][node2];\\n    }\\n};\\n```"
                    }
                ]
            }
        ]
    },
    {
        "title": "Sum Multiples",
        "question_content": "<p>Given a positive integer <code>n</code>, find the sum of all integers in the range <code>[1, n]</code> <strong>inclusive</strong> that are divisible by <code>3</code>, <code>5</code>, or <code>7</code>.</p>\n\n<p>Return <em>an integer denoting the sum of all numbers in the given range satisfying&nbsp;the constraint.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 7\n<strong>Output:</strong> 21\n<strong>Explanation:</strong> Numbers in the range <code>[1, 7]</code> that are divisible by <code>3</code>, <code>5,</code> or <code>7 </code>are <code>3, 5, 6, 7</code>. The sum of these numbers is <code>21</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 10\n<strong>Output:</strong> 40\n<strong>Explanation:</strong> Numbers in the range <code>[1, 10] that are</code> divisible by <code>3</code>, <code>5,</code> or <code>7</code> are <code>3, 5, 6, 7, 9, 10</code>. The sum of these numbers is 40.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 9\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> Numbers in the range <code>[1, 9]</code> that are divisible by <code>3</code>, <code>5</code>, or <code>7</code> are <code>3, 5, 6, 7, 9</code>. The sum of these numbers is <code>30</code>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 3445711,
                "title": "kotlin-o-1-with-diagram",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Approach\\nIf we only have `3` and `5` to deal with:\\n\\n![image.png](https://assets.leetcode.com/users/images/3512a254-098d-4464-9ce4-f3d998a64279_1682222461.427102.png)\\n\\nAdding `7` to the picture:\\n\\n![image.png](https://assets.leetcode.com/users/images/42d1bab0-abd1-48fd-b5ba-4b92e5fc8dc6_1682222495.4449778.png)\\n\\n# Code\\n```\\nclass Solution {\\n  fun sumOfMultiples(n: Int): Int {\\n    fun sumOfDivisible(value: Int): Int {\\n      val low = value\\n      val high = n / value * value\\n      val count = (high + value - low) / value\\n      return (low + high) * count / 2\\n    }\\n    return sumOfDivisible(3) + sumOfDivisible(5) + sumOfDivisible(7) -\\n        (sumOfDivisible(15) + sumOfDivisible(35) + sumOfDivisible(21)) +\\n        sumOfDivisible(105)\\n  }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n  fun sumOfMultiples(n: Int): Int {\\n    fun sumOfDivisible(value: Int): Int {\\n      val low = value\\n      val high = n / value * value\\n      val count = (high + value - low) / value\\n      return (low + high) * count / 2\\n    }\\n    return sumOfDivisible(3) + sumOfDivisible(5) + sumOfDivisible(7) -\\n        (sumOfDivisible(15) + sumOfDivisible(35) + sumOfDivisible(21)) +\\n        sumOfDivisible(105)\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446041,
                "title": "greedy-o-n-o-1-solution-very-simple-easy-to-understand",
                "content": "\\n# Solution 1: \\nSimple and strate forward bruteforce. space O(1) & time complexity O(n)\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; ++i){\\n            if(i%3 == 0 || i%5 == 0|| i%7 == 0) sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```\\n\\n# Solution 2: \\nAlternate solution with O(1) space & O(1) time complexity:\\n1. To get sum of all factors on k upto n, we can have this formula (sum of Arithmatic progression): k * (n/k) * (n/k + 1) / 2\\nIf you woder how we get above formula then check this out :\\n   k + 2k + 3k + 4k + ..... xk = k (1 + 2 + 3 + 4 ... x) = k( (x )( x + 1)/2 )\\n   where x is the largest value of (xk <= n) => (x <= n/k)\\n\\n2. Above formula is implemented on cal funtion.\\n3. To get the ans, we can sum :\\n    sum all the factor of 3 + sum of all the factors of 5 + sum of all the factors of 7 - sum of all the factor of 3 * 5 - sum of all the factors of 5 * 7 - sum of all the factors of 3 * 7 + sum of all the factors of 3 * 5 * 7.\\n```\\nclass Solution {\\npublic:\\n    int cal(int n, int k){ return k *(n/k)*(n/k+1)/2; }\\n    int sumOfMultiples(int n) {\\n        return cal(n, 3) + cal(n, 5) + cal(n, 7) - cal(n, 3*5) - cal(n, 5*7) - cal(n, 3*7) + cal(n, 3*5*7);\\n    }\\n};\\n```\\n<b>Here is an article of my recent interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; ++i){\\n            if(i%3 == 0 || i%5 == 0|| i%7 == 0) sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int cal(int n, int k){ return k *(n/k)*(n/k+1)/2; }\\n    int sumOfMultiples(int n) {\\n        return cal(n, 3) + cal(n, 5) + cal(n, 7) - cal(n, 3*5) - cal(n, 5*7) - cal(n, 3*7) + cal(n, 3*5*7);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446052,
                "title": "leetcode-the-hard-way-explained-line-by-line",
                "content": "```py\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        res = 0\\n\\t\\t#  iterate through the range 1 to n and \\n        for i in range(3, n + 1):\\n\\t\\t\\t# count numbers divisible by either 3, 5, or 7\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                res += i\\n        return res\\n```\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans = 0;\\n\\t\\t//  iterate through the range 1 to n and \\n        for (int i = 3; i <= n; i++) {\\n\\t\\t\\t// count numbers divisible by either 3, 5, or 7\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n```java\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n\\t\\t//  iterate through the range 1 to n and \\n        int ans = 0;\\n        for (int i = 3; i <= n; i++) {\\n\\t\\t\\t// count numbers divisible by either 3, 5, or 7\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```py\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        res = 0\\n\\t\\t#  iterate through the range 1 to n and \\n        for i in range(3, n + 1):\\n\\t\\t\\t# count numbers divisible by either 3, 5, or 7\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                res += i\\n        return res\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans = 0;\\n\\t\\t//  iterate through the range 1 to n and \\n        for (int i = 3; i <= n; i++) {\\n\\t\\t\\t// count numbers divisible by either 3, 5, or 7\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\n```java\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n\\t\\t//  iterate through the range 1 to n and \\n        int ans = 0;\\n        for (int i = 3; i <= n; i++) {\\n\\t\\t\\t// count numbers divisible by either 3, 5, or 7\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446231,
                "title": "python-3-2-lines-just-draw-a-venn-diagram-t-m-100-51",
                "content": "You get to draw the Venn Diagram.\\n\\n\"*The secret of being a bore is to tell everything.*\"  --Voltaire\\n```\\ncclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n\\n        a, b, c, d, e, f, g = n//3, n//5, n//7, n//15, n//21, n//35, n//105\\n\\n        return (\\n                  3*a*(a+1)     #\\n                + 5*b*(b+1)     # <-- three venn circles\\n                + 7*c*(c+1)     # \\n\\n                - 15*d*(d+1)    #\\n                - 21*e*(e+1)    # <-- three venn lunes\\n                - 35*f*(f+1)    #\\n            \\n                + 105*g*(g+1)   # <-- one venn circular triangle \\n               )//2\\n```\\n[](http://)\\n\\n\\n\\nI could be wrong, but I think that time complexity is *O*(1) and space complexity is *O*(1).",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ncclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n\\n        a, b, c, d, e, f, g = n//3, n//5, n//7, n//15, n//21, n//35, n//105\\n\\n        return (\\n                  3*a*(a+1)     #\\n                + 5*b*(b+1)     # <-- three venn circles\\n                + 7*c*(c+1)     # \\n\\n                - 15*d*(d+1)    #\\n                - 21*e*(e+1)    # <-- three venn lunes\\n                - 35*f*(f+1)    #\\n            \\n                + 105*g*(g+1)   # <-- one venn circular triangle \\n               )//2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446496,
                "title": "c-constant-time-do-all-the-work-at-compile-time",
                "content": "**TODO(heder): Insert cute cat meme to ask for up-votes. ;)**\\n\\n# Approach 1: do all the work at compile time\\nThe answer for a give $$n$$ never changes, hence we can precompute the answers at compile time.\\n\\n```cpp\\nnamespace {\\nconstexpr array<int, 1024> generate_som() {\\n    array<int, 1024> ans = {};\\n    int sum = 0;\\n    for (int i = 1; i < size(ans); ++i) {\\n        if (!(i % 3) || !(i % 5) || !(i % 7)) sum += i;\\n        ans[i] = sum;\\n    }\\n    return ans;\\n}\\n\\nconstexpr array<int, 1024> som = generate_som();\\n}  // namespace\\n\\nclass Solution {\\npublic:\\n    static int sumOfMultiples(int n) {\\n        return som[n];\\n    }\\n};\\n```\\n\\n**Complexity Analysis**\\n  * Time complexity is $$O(1)$$ as we are just doing a lookup\\n  * Space complexity is $$O(1)$$, this might be controversial though.\\n\\n# Approach 2: inclusion / exclusion principle\\nAnother constant time approach is to using the inclusion / exclusion principles, i.e. count all the number divisible by 3 in a range, which can be done in constant time, some for 5 and 7, and add them up. This this case we are over counting though, i.e. we count all the numbers twice that are divisible by 3 and 5, or 3 and 7, or 5 or 7, hence we need to subtract all the numbers divisible by 3 * 5, 3 * 7, and 5 * 7, but in this case we have subracted the numbers that are divisible by 3 * 5 * 7 to often, hence we need to add them again. This is known as inclusion / exclusion principle. There are a few other nice posts that discribe this solution in more detail.\\n\\n**Pro-Tips**\\n\\nI always have a header like this in my solutions. This speeds-up I/O:\\n\\n```cpp\\n// https://leetcode.com/problems/sum-multiples\\n// problem: 2652\\nstatic int fast_io = []() { std::ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();\\n```\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nnamespace {\\nconstexpr array<int, 1024> generate_som() {\\n    array<int, 1024> ans = {};\\n    int sum = 0;\\n    for (int i = 1; i < size(ans); ++i) {\\n        if (!(i % 3) || !(i % 5) || !(i % 7)) sum += i;\\n        ans[i] = sum;\\n    }\\n    return ans;\\n}\\n\\nconstexpr array<int, 1024> som = generate_som();\\n}  // namespace\\n\\nclass Solution {\\npublic:\\n    static int sumOfMultiples(int n) {\\n        return som[n];\\n    }\\n};\\n```\n```cpp\\n// https://leetcode.com/problems/sum-multiples\\n// problem: 2652\\nstatic int fast_io = []() { std::ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3445710,
                "title": "simple-java-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445807,
                "title": "easy-solution-full-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n-> Plssssss Up Vote! -> \\uD83D\\uDE2D\\n\\n`Just Up Vote! -> get Up vote!`\\uD83D\\uDE42\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 1; i<=n; i++) if(i%3==0 || i%5==0 || i%7==0)  ans+=i;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 1; i<=n; i++) if(i%3==0 || i%5==0 || i%7==0)  ans+=i;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488452,
                "title": "python-go-easy-solution",
                "content": "\\n# Python\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1,n+1):\\n            if i%3 == 0 or i%5 == 0 or i%7 == 0:\\n                sum += i\\n        return sum\\n```\\n\\n# GO\\n```\\nfunc sumOfMultiples(n int) int {\\n    sum := 0\\n    i := 0\\n    for i <= n{\\n        if i%3 == 0 || i%5 == 0 || i%7 == 0 {\\n            sum += i\\n        }\\n        i++\\n    }\\n    return sum\\n}\\n```",
                "solutionTags": [
                    "Python3",
                    "Go"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1,n+1):\\n            if i%3 == 0 or i%5 == 0 or i%7 == 0:\\n                sum += i\\n        return sum\\n```\n```\\nfunc sumOfMultiples(n int) int {\\n    sum := 0\\n    i := 0\\n    for i <= n{\\n        if i%3 == 0 || i%5 == 0 || i%7 == 0 {\\n            sum += i\\n        }\\n        i++\\n    }\\n    return sum\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3536232,
                "title": "easy-java",
                "content": "# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int result = 0;\\n\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                result += i;\\n            }\\n        }\\n\\n        return result;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int result = 0;\\n\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                result += i;\\n            }\\n        }\\n\\n        return result;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3535625,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: const\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0) sum += i;\\n            else if (i % 5 == 0) sum += i;\\n            else if (i % 7 == 0) sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0) sum += i;\\n            else if (i % 5 == 0) sum += i;\\n            else if (i % 7 == 0) sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3469237,
                "title": "easy-code-beginner-friendly-no-formula",
                "content": "\\n\\n# Approach\\nBrute Force approach.\\nCheck of each value till n and add it to our our sum(ans).\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3449980,
                "title": "easiest-solution-in-java-python-c-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe function works by iterating through all the numbers from 1 to n, checking if each number is a multiple of **3, 5, or 7** using the **modulo operator (%)**, and adding the number to a variable mul if it is a multiple. Finally, the function returns the value of mul, which is the sum of all the multiples.\\n\\n**For example:** \\n>If n is 20, the function will iterate through the numbers 1 to 20 and add up all the multiples of 3, 5, or 7, which are:\\n\\n>3 + 5 + 6 + 7 + 9 + 10 + 12 + 14 + 15 + 18 + 20 = 119\\n\\n>So the function will return 119 as the sum of all the multiples of 3, 5, or 7 up to 20.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```Java []\\n    public int sumOfMultiples(int n) {\\n        int mul = 0;\\n        for(int i=1; i<=n; i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                mul+=i;\\n            }\\n        }\\n        return mul;\\n    }\\n```\\n```python []\\ndef sumOfMultiples(n):\\n    mul = 0\\n    for i in range(1, n+1):\\n        if i%3==0 or i%5==0 or i%7==0:\\n            mul+=i\\n    return mul\\n```\\n```C++ []\\nint sumOfMultiples(int n) {\\n    int mul = 0;\\n    for(int i=1; i<=n; i++){\\n        if(i%3==0 || i%5==0 || i%7==0){\\n            mul+=i;\\n        }\\n    }\\n    return mul;\\n}\\n\\n```\\n\\n# Support me by Upvoting me............\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3"
                ],
                "code": "```Java []\\n    public int sumOfMultiples(int n) {\\n        int mul = 0;\\n        for(int i=1; i<=n; i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                mul+=i;\\n            }\\n        }\\n        return mul;\\n    }\\n```\n```python []\\ndef sumOfMultiples(n):\\n    mul = 0\\n    for i in range(1, n+1):\\n        if i%3==0 or i%5==0 or i%7==0:\\n            mul+=i\\n    return mul\\n```\n```C++ []\\nint sumOfMultiples(int n) {\\n    int mul = 0;\\n    for(int i=1; i<=n; i++){\\n        if(i%3==0 || i%5==0 || i%7==0){\\n            mul+=i;\\n        }\\n    }\\n    return mul;\\n}\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3445875,
                "title": "easy-brute-force-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nConstraints are low so we can apply brute force.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Run a loop from i==1 to i==n and if i is divisible by 3 or 5 or 7 then increase ans by i.\\n2. return the ans.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0) ans+=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0) ans+=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3480901,
                "title": "my-sumofmultiples",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function (n) {\\n  let sum = 0;\\n\\n  for (let i = 1; i <= n; i++) {\\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n      sum += i;\\n    }\\n  }\\n\\n  return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function (n) {\\n  let sum = 0;\\n\\n  for (let i = 1; i <= n; i++) {\\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n      sum += i;\\n    }\\n  }\\n\\n  return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3461961,
                "title": "c-constant-time-with-gauss-formula-0ms-5-9mb",
                "content": "Brute forcing our way out of this problem might seem tempting, but it is not very rewarding and I am a firm believe that as an engineer one should always at least *try* to do better.\\n\\nAnd better we can do, if we notice that if we know that the range `[1, n]` has `x == n / 3` multiples of, say, `3`, then we know that they will all be in the range `[3, x]`, creating a summation like `3 + 6 + 9 + ... + (x - 1) * 3 + x * 3`, or, in other words: `(1 + 2 + 3 + ... + (x - 1) + x) * 3`.\\n\\nBut, hey, we know how to compute that, with Gauss\\' formula for summations from `1` to `x`: `(x + 1) * x / 2`.\\n\\nSo, we can initially try to solve our problem `return`ing the sum of:\\n* all the multiples of `3` up to `n`: `gauss(n / 3) * 3`;\\n* all the multiples of `5` up to `n`: `gauss(n / 5) * 5`;\\n* all the multiples of `7` up to `n`: `gauss(n / 7) * 7`.\\n\\nAs easy as that? Not really, because now we are counting twice all the multiples of any two among `3`, `5` or `7`.\\n\\nWe can easily fix that, subtracting the summation of all the numbers matching this criteria, so we will reduce our result by:\\n* all the multiples of `3 * 5` up to `n`: `gauss(n / 15) * 15`;\\n* all the multiples of `3 * 7` up to `n`: `gauss(n / 21) * 21`;\\n* all the multiples of `5 * 7` up to `n`: `gauss(n / 35) * 35`.\\n\\nDone?\\n\\nAlmost, one last little adjustement: now we are removing twice all the multiples of `3`, `5` and `7`, so we will just have to add:\\n* all the multiples of `3 * 5 * 7` up to `n`: `gauss(n / 105) * 105`.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```cpp\\nclass Solution {\\n    int gauss(int x) {\\n        return (x + 1) * x >> 1;\\n    }\\npublic:\\n    int sumOfMultiples(int n) {\\n        return gauss(n / 3) * 3 + gauss(n / 5) * 5 + gauss(n / 7) * 7\\n            - gauss(n / 15) * 15 - gauss(n / 21) * 21 - gauss(n / 35) * 35\\n            + gauss(n / 105) * 105;\\n    }\\n};\\n```\\n\\nMicro-optimisation of the same logic, computing only when necessary:\\n\\n```cpp\\nclass Solution {\\n    int gauss(int x) {\\n        return (x + 1) * x >> 1;\\n    }\\npublic:\\n    int sumOfMultiples(int n) {\\n        // support variables\\n        int res = gauss(n / 3) * 3 + gauss(n / 5) * 5 + gauss(n / 7) * 7;\\n        // discounting multiples of two factors\\n        if (n > 14) res -= gauss(n / 15) * 15 + gauss(n / 21) * 21 + gauss(n / 35) * 35;\\n        // adjusting for multiples of all 3\\n        if (n > 104) res += gauss(n / 105) * 105;\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Number Theory"
                ],
                "code": "```cpp\\nclass Solution {\\n    int gauss(int x) {\\n        return (x + 1) * x >> 1;\\n    }\\npublic:\\n    int sumOfMultiples(int n) {\\n        return gauss(n / 3) * 3 + gauss(n / 5) * 5 + gauss(n / 7) * 7\\n            - gauss(n / 15) * 15 - gauss(n / 21) * 21 - gauss(n / 35) * 35\\n            + gauss(n / 105) * 105;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\n    int gauss(int x) {\\n        return (x + 1) * x >> 1;\\n    }\\npublic:\\n    int sumOfMultiples(int n) {\\n        // support variables\\n        int res = gauss(n / 3) * 3 + gauss(n / 5) * 5 + gauss(n / 7) * 7;\\n        // discounting multiples of two factors\\n        if (n > 14) res -= gauss(n / 15) * 15 + gauss(n / 21) * 21 + gauss(n / 35) * 35;\\n        // adjusting for multiples of all 3\\n        if (n > 104) res += gauss(n / 105) * 105;\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446397,
                "title": "c-python-easy-o-n-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```\\n\\n# Python / Python3\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1, n+1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum += i\\n        return sum\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1, n+1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum += i\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445728,
                "title": "python-simple-python-solution",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 92 ms, faster than 33.33% of Python3 online submissions for Sum Multiples.\\n# Memory Usage: 13.9 MB, less than 22.22% of Python3 online submissions for Sum Multiples.\\n\\n\\tclass Solution:\\n\\t\\tdef sumOfMultiples(self, n: int) -> int:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tfor num in range(1 , n + 1):\\n\\n\\t\\t\\t\\tif num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\\n\\t\\t\\t\\t\\tresult.append(num)\\n\\n\\t\\t\\treturn sum(result)\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 92 ms, faster than 33.33% of Python3 online submissions for Sum Multiples.\\n# Memory Usage: 13.9 MB, less than 22.22% of Python3 online submissions for Sum Multiples.\\n\\n\\tclass Solution:\\n\\t\\tdef sumOfMultiples(self, n: int) -> int:\\n\\n\\t\\t\\tresult = []\\n\\n\\t\\t\\tfor num in range(1 , n + 1):\\n\\n\\t\\t\\t\\tif num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\\n\\t\\t\\t\\t\\tresult.append(num)\\n\\n\\t\\t\\treturn sum(result)\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Java"
            },
            {
                "id": 3445689,
                "title": "java-5-lines",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int sumOfMultiples(int n) {\\n    var sum = 0;\\n    \\n    for (var i=3; i<=n; i++)\\n      if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n        sum += i;\\n    \\n    return sum;\\n  }\\n}\\n```\\nIf you like my solution, pleaes upvote it!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int sumOfMultiples(int n) {\\n    var sum = 0;\\n    \\n    for (var i=3; i<=n; i++)\\n      if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n        sum += i;\\n    \\n    return sum;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3545594,
                "title": "java-seriously-beats-100-3-liner",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0) ans +=i;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0) ans +=i;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3495564,
                "title": "c-math-easy-to-understnad",
                "content": "# Approach\\nIF NUM i IS DIVISIBLE BY 3,5 OR 7 INCREMENT ANS BY i where i in range[1,n]\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 3; i <= n; i++){\\n            if(((i%3)==0)||((i%5)==0)||((i%7)==0))ans += i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 3; i <= n; i++){\\n            if(((i%3)==0)||((i%5)==0)||((i%7)==0))ans += i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3478279,
                "title": "1-liner-c-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i =1 ; i <= n ; i++) if(i%3 == 0 or i %5 == 0 or i %7 == 0) sum += i;\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i =1 ; i <= n ; i++) if(i%3 == 0 or i %5 == 0 or i %7 == 0) sum += i;\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3450363,
                "title": "javascript-100-time-o-1-time-o-1-space-math",
                "content": "# Approach\\n\\n**We can compute the sum of numbers in range $$[0, n]$$ in $$O(1)$$ as $$n * (n + 1) / 2$$**\\n\\nSee a graphic proof below:\\n\\nImagine we are computing the sum of numbers in range $$[0, 4]$$. Each column (or row) in the figure below is one of the numbers. We need to know the total number of `*` in the figure.\\n\\n```\\n      *\\n    * *\\n  * * *\\n* * * *\\n```\\n\\nTo do this, we add one more figure on top of the old one (`0` this time) and end up with a quadrangle that is `n` columns and `n + 1` rows. Number of `*` in this figure is exactly half of the total number of `0` and `*`, which there are $$n * (n + 1)$$ of.\\n\\n```\\n0 0 0 0\\n0 0 0 *\\n0 0 * *\\n0 * * *\\n* * * *\\n```\\n\\n**We can also compute the sum of numbers divisible by any $$x$$ in range $$[0, n]$$ in $$O(1)$$ following a similar approach. It equals $$(n // x) * ((n // x) * x + x) / 2$$**\\n\\nImagine this time we are computing the sum of numbers divisible by $$2$$ in range $$[0, 4]$$. Now we are only interested in every second column in the figure below ($$n // x$$).\\n\\n```\\n      *\\n    0 *\\n  * 0 *\\n0 * 0 *\\n```\\n\\nDrop the columns that we don\\'t need and we have the following figure:\\n\\n```\\n  *\\n  *\\n* *\\n* *\\n```\\n\\nThe number of `*` in it can again be computed by making it into a quadrangle, and dividing it\\'s area by 2.\\n\\n```\\n0 0\\n0 0\\n0 *\\n0 *\\n* *\\n* *\\n```\\n\\nThe width of this quadrangle equals to the total number of columns we count, or `Math.floor(n / x)`.\\nThe height of it equals to the height of it\\'s lowest column (simply `x` given that $$x < n$$) plus the height of it\\'s hightest column, or `x * Math.floor(n / x)`. Therefore, the total number of `0` and `*` in the figure equals `Math.floor(n / x) * (x * Math.floor(n / x) + x)`, and exactly half of these are `*`.\\n\\n---\\n\\nKnowing this, we can compute the sum of numbers divisible by $$3$$, $$5$$, and $$7$$ in range $$[0, n]$$ by:\\n\\n1. Summing together the sums of numbers divisible by $$3$$, $$5$$ or $$7$$ in the range.\\n2. Substracting sum of numbers divisible by both $$3$$ and $$5$$ (since these numbers were counted twice in **step 1**). These would be the numbers divisible by $$3 * 5$$, or $$15$$.\\n3. Substracting sum of numbers divisible by both $$3$$ and $$7$$ (since these numbers were counted twice in **step 1**). These would be the numbers divisible by $$3 * 7$$, or $$21$$.\\n4. Substracting sum of numbers divisible by both $$5$$ and $$7$$ (since these numbers were counted twice in **step 1**). These would be the numbers divisible by $$5 * 7$$, or $$35$$.\\n5. Adding back the sum of numbers divisible by $$3$$, $$5$$ and $$7$$ (since these would have been added 3 times in **step 1**, then removed 3 times in **steps 2, 3 and 4**). These would be the numbers divisible by $$3 * 5 * 7$$, or $$105$$.\\n\\n```\\nfunction sumOfMultiples(n) {\\n    // Sum of numbers divisible by 3 in range [0, n]\\n    const sum3 = mulSum(n, 3);\\n    // Sum of numbers divisible by 5 in range [0, n]\\n    const sum5 = mulSum(n, 5);\\n    // Sum of numbers divisible by 7 in range [0, n]\\n    const sum7 = mulSum(n, 7);\\n\\n    // Sum of numbers divisible by 3 and 5 in range [0, n]\\n    const sum15 = mulSum(n, 3 * 5);\\n    // Sum of numbers divisible by 3 and 7 in range [0, n]\\n    const sum21 = mulSum(n, 3 * 7);\\n    // Sum of numbers divisible by 5 and 7 in range [0, n]\\n    const sum35 = mulSum(n, 5 * 7);\\n\\n    // Sum of numbers divisible by 3, 5 and 7 in range [0, n]\\n    const sum105 = mulSum(n, 3 * 5 * 7);\\n\\n    return sum3 + sum5 + sum7 - sum15 - sum21 - sum35 + sum105;\\n};\\n\\n// Computes sum of numbers divisible by x in range [0, n]\\nfunction mulSum(n, x) {\\n    const cnt = Math.floor(n / x);\\n    return cnt * (cnt * x + x) / 2;\\n}\\n```\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\n      *\\n    * *\\n  * * *\\n* * * *\\n```\n```\\n0 0 0 0\\n0 0 0 *\\n0 0 * *\\n0 * * *\\n* * * *\\n```\n```\\n      *\\n    0 *\\n  * 0 *\\n0 * 0 *\\n```\n```\\n  *\\n  *\\n* *\\n* *\\n```\n```\\n0 0\\n0 0\\n0 *\\n0 *\\n* *\\n* *\\n```\n```\\nfunction sumOfMultiples(n) {\\n    // Sum of numbers divisible by 3 in range [0, n]\\n    const sum3 = mulSum(n, 3);\\n    // Sum of numbers divisible by 5 in range [0, n]\\n    const sum5 = mulSum(n, 5);\\n    // Sum of numbers divisible by 7 in range [0, n]\\n    const sum7 = mulSum(n, 7);\\n\\n    // Sum of numbers divisible by 3 and 5 in range [0, n]\\n    const sum15 = mulSum(n, 3 * 5);\\n    // Sum of numbers divisible by 3 and 7 in range [0, n]\\n    const sum21 = mulSum(n, 3 * 7);\\n    // Sum of numbers divisible by 5 and 7 in range [0, n]\\n    const sum35 = mulSum(n, 5 * 7);\\n\\n    // Sum of numbers divisible by 3, 5 and 7 in range [0, n]\\n    const sum105 = mulSum(n, 3 * 5 * 7);\\n\\n    return sum3 + sum5 + sum7 - sum15 - sum21 - sum35 + sum105;\\n};\\n\\n// Computes sum of numbers divisible by x in range [0, n]\\nfunction mulSum(n, x) {\\n    const cnt = Math.floor(n / x);\\n    return cnt * (cnt * x + x) / 2;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3449064,
                "title": "java-1-liner-explained",
                "content": "**Method 1:** Iteration\\n>**T/S:** O(n)/O(1)\\n```\\npublic int sumOfMultiples(int n) {\\n\\tvar sum = 0;\\n\\n\\tfor (var i = 3; i <= n; i++)\\n\\t\\tif (i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n\\t\\t\\tsum += i;\\n\\n\\treturn sum;\\n}\\n```\\n**Version 2 of method 1:** 1 liner using streams\\n```\\npublic int sumOfMultiples(int n) {\\n\\treturn IntStream.rangeClosed(3, n)\\n\\t\\t\\t\\t\\t.filter(i -> i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n\\t\\t\\t\\t\\t.sum();\\n}\\n```\\n**Method 2:** Arithmetic Progression \\n* Sum of an AP whose first term = a, common difference = a and number of terms = floor(n/a) is `a (n/a) (n/a + 1) / 2`\\n* This can be derived as follows:\\n\\t* S = a + 2a + ... + Ta = a (1 + 2 + ... + T) = aT(T + 1) / 2, where T = n / a\\n\\t* T = n / a because final term can at max be n = aT\\n>**T/S:** O(1)/O(1)\\n```\\npublic int sumOfMultiples(int n) {\\n\\treturn sum(n, 3) + sum(n, 5) + sum(n, 7) - sum(n, 15) - sum(n, 35) - sum(n, 21) + sum(n, 105);\\n}\\n\\nprivate int sum(int max, int firstTerm) {\\n\\treturn firstTerm * (max / firstTerm) * (max / firstTerm + 1) / 2;\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int sumOfMultiples(int n) {\\n\\tvar sum = 0;\\n\\n\\tfor (var i = 3; i <= n; i++)\\n\\t\\tif (i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n\\t\\t\\tsum += i;\\n\\n\\treturn sum;\\n}\\n```\n```\\npublic int sumOfMultiples(int n) {\\n\\treturn IntStream.rangeClosed(3, n)\\n\\t\\t\\t\\t\\t.filter(i -> i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n\\t\\t\\t\\t\\t.sum();\\n}\\n```\n```\\npublic int sumOfMultiples(int n) {\\n\\treturn sum(n, 3) + sum(n, 5) + sum(n, 7) - sum(n, 15) - sum(n, 35) - sum(n, 21) + sum(n, 105);\\n}\\n\\nprivate int sum(int max, int firstTerm) {\\n\\treturn firstTerm * (max / firstTerm) * (max / firstTerm + 1) / 2;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3447846,
                "title": "o-1-inclusion-exclusion-w-arithmetic-series",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1), not the fastest when n <= 1000, but better for higher n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        // Inclusion exclusion \\n        // Use arithmetic series (n(a1+an))/2 to get sum of all    \\n        // numbers divisible by d from d to n, \\n        // where d is the divsor, n is the last term divisible by d.\\n        // Ex: terms divisible by 5 to 24 = 5+10+15+20 \\n        // = (floor(24/5)*(5+24-24%5))/2 = (4*(5+20))/2 = 50\\n        int ans = 0;\\n        int n1 = n/3, n2 = n/5, n3 = n/7;\\n        int n4 = n/15, n5 = n/21, n6 = n/35;\\n        int n7 = n/105;\\n        // Add up all terms div by 3, 5, 7\\n        ans += (n1*(3+(n-n%3)))>>1;\\n        ans += (n2*(5+(n-n%5)))>>1;\\n        ans += (n3*(7+(n-n%7)))>>1;\\n        // lcm \\n        // Subtract up all terms div by 3&5, 3&7, 5&7,\\n        // Since you over-added them\\n        ans -= (n4*(15+(n-n%15)))>>1;\\n        ans -= (n5*(21+(n-n%21)))>>1;\\n        ans -= (n6*(35+(n-n%35)))>>1;\\n        // now, over subtraction!!\\n        // (You subtracted all numbers divisible by 3&5&7, so add them back.)\\n        ans += (n7*(105+(n-n%105)))>>1;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        // Inclusion exclusion \\n        // Use arithmetic series (n(a1+an))/2 to get sum of all    \\n        // numbers divisible by d from d to n, \\n        // where d is the divsor, n is the last term divisible by d.\\n        // Ex: terms divisible by 5 to 24 = 5+10+15+20 \\n        // = (floor(24/5)*(5+24-24%5))/2 = (4*(5+20))/2 = 50\\n        int ans = 0;\\n        int n1 = n/3, n2 = n/5, n3 = n/7;\\n        int n4 = n/15, n5 = n/21, n6 = n/35;\\n        int n7 = n/105;\\n        // Add up all terms div by 3, 5, 7\\n        ans += (n1*(3+(n-n%3)))>>1;\\n        ans += (n2*(5+(n-n%5)))>>1;\\n        ans += (n3*(7+(n-n%7)))>>1;\\n        // lcm \\n        // Subtract up all terms div by 3&5, 3&7, 5&7,\\n        // Since you over-added them\\n        ans -= (n4*(15+(n-n%15)))>>1;\\n        ans -= (n5*(21+(n-n%21)))>>1;\\n        ans -= (n6*(35+(n-n%35)))>>1;\\n        // now, over subtraction!!\\n        // (You subtracted all numbers divisible by 3&5&7, so add them back.)\\n        ans += (n7*(105+(n-n%105)))>>1;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446856,
                "title": "cpp-o-1",
                "content": "\\nWe can use sum of AP to find the sum of the series. However there will be overcouting. To resolve that we Principle of Inclusion and Exclusion.\\n\\n```cpp\\nclass Solution {\\n    int sumOfTermsTillNDivisibleByX(int n,int x)\\n    {\\n        int numberOfTerms=n/x;\\n        return (numberOfTerms*(2*x+(numberOfTerms-1)*x))/2;\\n    }\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=sumOfTermsTillNDivisibleByX(n,3)+sumOfTermsTillNDivisibleByX(n,5)+sumOfTermsTillNDivisibleByX(n,7)\\n                -sumOfTermsTillNDivisibleByX(n,21)-sumOfTermsTillNDivisibleByX(n,15)-sumOfTermsTillNDivisibleByX(n,35)\\n                +sumOfTermsTillNDivisibleByX(n,105);\\n        return ans;\\n    }\\n};`\\n```\\n\\nTime Complexity: **O(1)**\\nSpace Complexity **O(1)**\\n",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\n    int sumOfTermsTillNDivisibleByX(int n,int x)\\n    {\\n        int numberOfTerms=n/x;\\n        return (numberOfTerms*(2*x+(numberOfTerms-1)*x))/2;\\n    }\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=sumOfTermsTillNDivisibleByX(n,3)+sumOfTermsTillNDivisibleByX(n,5)+sumOfTermsTillNDivisibleByX(n,7)\\n                -sumOfTermsTillNDivisibleByX(n,21)-sumOfTermsTillNDivisibleByX(n,15)-sumOfTermsTillNDivisibleByX(n,35)\\n                +sumOfTermsTillNDivisibleByX(n,105);\\n        return ans;\\n    }\\n};`\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445724,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983241,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            s = s+i;\\n        }\\n        return s;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            s = s+i;\\n        }\\n        return s;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3817145,
                "title": "o-1-set-overlapping-principle",
                "content": "# Approach\\n**TODO**\\n\\n# Time Complexity\\n**TODO**\\n\\n# Space complexity\\n**TODO**\\n\\n# Solution\\n``` swift\\nclass Solution {\\n    func sumOfMultiples(_ n: Int) -> Int {\\n        func sum(_ x: Int) -> Int { (n / x) * (n / x + 1) / 2 * x }\\n        return sum(3) + sum(5) + sum(7) - sum(15) - sum(21) - sum(35) + sum(105)\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "``` swift\\nclass Solution {\\n    func sumOfMultiples(_ n: Int) -> Int {\\n        func sum(_ x: Int) -> Int { (n / x) * (n / x + 1) / 2 * x }\\n        return sum(3) + sum(5) + sum(7) - sum(15) - sum(21) - sum(35) + sum(105)\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3699712,
                "title": "simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=2; i<=n; i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            s+=i;\\n        }\\n        return s;\\n    }\\n};\\n\\n    \\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=2; i<=n; i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            s+=i;\\n        }\\n        return s;\\n    }\\n};\\n\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3636913,
                "title": "simple-solution-please-upvote",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=1;i<=n;i++){\\n           if(i%3==0 || i%5==0 || i%7==0){\\n               ans+=i;\\n           }\\n        }\\n    return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=1;i<=n;i++){\\n           if(i%3==0 || i%5==0 || i%7==0){\\n               ans+=i;\\n           }\\n        }\\n    return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3612498,
                "title": "python3-one-line-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([item for item in range(1,n+1) if item % 3 == 0 or item % 5 == 0 or item % 7 == 0])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([item for item in range(1,n+1) if item % 3 == 0 or item % 5 == 0 or item % 7 == 0])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534238,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\nclass Solution \\n{\\n    public int sumOfMultiples(int n)\\n    {\\n        int sum = 0;\\n        for(int currentNum=1; currentNum <= n; currentNum++)\\n        {\\n            if(currentNum % 3 == 0 ||\\n                currentNum % 5 == 0 ||\\n                currentNum % 7 == 0){\\n                    sum += currentNum;\\n                }\\n        }\\n\\n        return sum;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int sumOfMultiples(int n)\\n    {\\n        int sum = 0;\\n        for(int currentNum=1; currentNum <= n; currentNum++)\\n        {\\n            if(currentNum % 3 == 0 ||\\n                currentNum % 5 == 0 ||\\n                currentNum % 7 == 0){\\n                    sum += currentNum;\\n                }\\n        }\\n\\n        return sum;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3516485,
                "title": "beginners-friendly-solution",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    add the only number if its completely divisible by 3,5,7\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum=0;\\n\\n        for(int i=1;i<=n;i++)\\n            if(i%3==0 || i%5==0 || i%7==0) sum+=i;\\n            \\n    \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum=0;\\n\\n        for(int i=1;i<=n;i++)\\n            if(i%3==0 || i%5==0 || i%7==0) sum+=i;\\n            \\n    \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3505979,
                "title": "a-deep-analysis-and-a-quick-approach-to-sieve-of-eratosthenes-c",
                "content": "# Intuition\\nThe code calculates the sum of all multiples of 3, 5, and 7 up to a given limit n.\\n\\nWhile the implementation in the code provided is not strictly a Sieve of Eratosthenes, it does share some similarities with the Sieve. The Sieve of Eratosthenes is an algorithm for finding all prime numbers up to a given limit, by iteratively marking multiples of each prime number. In a similar way, the code provided marks all multiples of 3, 5, and 7, and then calculates the sum of all marked numbers.\\n\\nThe intuition behind using the Sieve of Eratosthenes or a similar approach is that it allows us to quickly identify and mark all the numbers that satisfy a certain property (in this case, being a multiple of 3, 5, or 7). This is much more efficient than iterating over all the numbers up to the given limit and checking each one individually. By marking all multiples of a factor, we can reduce the number of values that need to be checked later on.\\n\\nUsing a Sieve-like approach also lends itself well to optimization. In this code, the shortlist function starts at the given factor and then iteratively adds the factor to each previous value until reaching the limit size. This approach avoids having to iterate over all values up to size and only considers the ones that are multiples of the given factor. Additionally, the sumOfMultiples function iterates over the marked values in the directory and sums them up, avoiding the need to check each value individually.\\n\\nOverall, the Sieve-like approach is a useful technique for efficiently finding and manipulating subsets of values in a given range. By marking values that satisfy a certain property, we can reduce the number of values that need to be checked later on, and optimize our algorithms for faster execution.\\n\\n# Approach\\nThe approach taken by the code is to use a vector of booleans to represent whether each number up to n is a multiple of 3, 5, or 7. The shortlist function is used to mark all multiples of a given factor up to n, and the sumOfMultiples function uses this information to calculate the sum of all marked numbers.\\n\\nSpecifically, shortlist takes a vector directory, a starting factor start, and a size size, and marks all multiples of start up to size in directory by setting their corresponding values to true. sumOfMultiples creates a directory vector of size n+1, marks all multiples of 3, 5, and 7 in the directory using shortlist, and then iterates over the directory to calculate the sum of all marked values.\\n\\n# Complexity\\n- Time complexity: The shortlist function has a time complexity of O(n/factor), where n is the size of the directory and factor is the starting factor. The sumOfMultiples function has a time complexity of O(n), since it iterates over all n values in the directory to calculate the sum. Therefore, the overall time complexity of the code is O(n).\\n\\n- Space complexity: The shortlist function creates a vector of size n, and the sumOfMultiples function creates a vector of size n+1. Therefore, the space complexity of the code is O(n).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void shortlist(vector<bool> &directory, int start, int size)\\n    {\\n        for (int factor = start; factor <= size; factor = start + factor)\\n        {\\n            directory[factor] = true;\\n        }\\n    }\\n    int sumOfMultiples(int n)\\n    {\\n        vector<bool> directory(n + 1, 0);\\n        shortlist(directory, 3, n);\\n        shortlist(directory, 7, n);\\n        shortlist(directory, 5, n);\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++)\\n        {\\n            if (directory[i])\\n                sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void shortlist(vector<bool> &directory, int start, int size)\\n    {\\n        for (int factor = start; factor <= size; factor = start + factor)\\n        {\\n            directory[factor] = true;\\n        }\\n    }\\n    int sumOfMultiples(int n)\\n    {\\n        vector<bool> directory(n + 1, 0);\\n        shortlist(directory, 3, n);\\n        shortlist(directory, 7, n);\\n        shortlist(directory, 5, n);\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++)\\n        {\\n            if (directory[i])\\n                sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3499370,
                "title": "easy-solution-using-java",
                "content": "\\n\\n# Superb Logical Solution \\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n       int count=0;\\n       for(int i=2;i<=n;i++) {\\n           if(i%3==0||i%5==0||i%7==0){\\n            count+=i;\\n           }\\n       }\\n       return count; \\n}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n       int count=0;\\n       for(int i=2;i<=n;i++) {\\n           if(i%3==0||i%5==0||i%7==0){\\n            count+=i;\\n           }\\n       }\\n       return count; \\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3481817,
                "title": "sum-multiples-one-liner",
                "content": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        return ((n/3)*(3+(n/3)*3) + (n/5)*(5+(n/5)*5) + (n/7)*(7+(n/7)*7) - (n/15)*(15+(n/15)*15) - (n/35)*(35+(n/35)*35) -(n/21)*(21+(n/21)*21) + (n/105)*(105+(n/105)*105))/2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        return ((n/3)*(3+(n/3)*3) + (n/5)*(5+(n/5)*5) + (n/7)*(7+(n/7)*7) - (n/15)*(15+(n/15)*15) - (n/35)*(35+(n/35)*35) -(n/21)*(21+(n/21)*21) + (n/105)*(105+(n/105)*105))/2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3467912,
                "title": "easy-to-understand-javascript-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nWe can simply iterate through the numbers from 1 to n and check each one of them to see if it is divisible by 3, 5, or 7. If it is, we add that number to the `sum` variable. In the end, we return `sum`.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n    let sum = 0;\\n\\n    for (let i = 0; i <= n; i++) {\\n        if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\\n            sum = sum + i;\\n        }\\n    }\\n\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n    let sum = 0;\\n\\n    for (let i = 0; i <= n; i++) {\\n        if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\\n            sum = sum + i;\\n        }\\n    }\\n\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3459618,
                "title": "java-easy-solution-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCheck All Contrain \\n\\n# Complexity\\n- Time complexity:   O(n)\\n\\n\\n- Space complexity:  O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum =0 ;\\n\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i % 3 == 0 || i % 7 ==0 || i % 5 == 0)\\n            {\\n                sum += i ;\\n            }\\n        }\\n        return sum;\\n    }\\n} \\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum =0 ;\\n\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i % 3 == 0 || i % 7 ==0 || i % 5 == 0)\\n            {\\n                sum += i ;\\n            }\\n        }\\n        return sum;\\n    }\\n} \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3458490,
                "title": "super-fast-java-solution-returning-the-sum-of-numbers-constraints-obeyed",
                "content": "# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n\\n        for(int i = 1; i <= n; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n            sum += i;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```\\nPlease upvote me it encourages me a lot!!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n\\n        for(int i = 1; i <= n; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n            sum += i;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446086,
                "title": "c-easy-to-understand-one-pass",
                "content": "````\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 3; i <= n; i++){\\n            if(i%3==0||i%5==0||i%7==0){\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n````",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "````\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 3; i <= n; i++){\\n            if(i%3==0||i%5==0||i%7==0){\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446027,
                "title": "javascript-2652-sum-multiples",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n1\\n```\\nvar sumOfMultiples = function (n) {\\n    let s = 0; // sum\\n    for (let i = 1; i <= n; i++) {\\n        if (\\n            i % 3 == 0 || //\\n            i % 5 == 0 ||\\n            i % 7 == 0\\n        ) {\\n            s += i;\\n        }\\n    }\\n    return s;\\n};\\n```\\n\\n---\\n\\n**Contest**\\n- https://leetcode.com/contest/weekly-contest-342/ranking/67/\\n\\n**All Answers**\\n- **Q1** - https://leetcode.com/problems/calculate-delayed-arrival-time/solutions/3446023/javascript-2651-calculate-delayed-arrival-time/?orderBy=most_votes\\n- **Q2** - https://leetcode.com/problems/sum-multiples/solutions/3446027/javascript-2652-sum-multiples/?orderBy=most_votes\\n- **Q3** - https://leetcode.com/problems/sliding-subarray-beauty/solutions/3446035/javascript-2653-sliding-subarray-beauty/?orderBy=most_votes\\n- **Q4** - https://leetcode.com/problems/minimum-number-of-operations-to-make-all-array-elements-equal-to-1/solutions/3446411/javascript-2654-minimum-number-of-operations-to-make-all-array-elements-equal-to-1/?orderBy=most_votes\\n\\n---\\n\\n![image.png](https://assets.leetcode.com/users/images/37970e7b-b559-4aa9-834c-e178df5ddaa7_1682232917.7638698.png)\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sumOfMultiples = function (n) {\\n    let s = 0; // sum\\n    for (let i = 1; i <= n; i++) {\\n        if (\\n            i % 3 == 0 || //\\n            i % 5 == 0 ||\\n            i % 7 == 0\\n        ) {\\n            s += i;\\n        }\\n    }\\n    return s;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3445896,
                "title": "perhaps-we-might-want-to-avoid-the-modulo-operation",
                "content": "We could use sieve-like approach.\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        vector<bool> sieve(n + 1);\\n        \\n        for (int i = 3; i <= n; i += 3)\\n            sieve[i] = true;\\n        \\n        for (int i = 5; i <= n; i += 5)\\n            sieve[i] = true;\\n        \\n        for (int i = 7; i <= n; i += 7)\\n            sieve[i] = true;\\n        \\n        int sum = 0;\\n        \\n        for (int i = 1; i <= n; ++i)\\n            if (sieve[i])\\n                sum += i;\\n        \\n        return sum;\\n    }\\n};\\n```\\n\\nOr we could use Inclusion\\u2013Exclusion Principle\\n\\n```cpp\\nclass Solution {\\n    int sum(int n, int d)\\n    {\\n        int l = 0;\\n        int h = n / d;\\n        int r = h * d;\\n\\n        return (l + r) * (h + 1) / 2;\\n    }\\n\\npublic:\\n    int sumOfMultiples(int n) {\\n        return sum(n, 3) + sum(n, 5) + sum(n, 7)\\n            - sum(n, 3 * 5) - sum(n, 3 * 7) - sum(n, 5 * 7)\\n            + sum(n, 3 * 5 * 7);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        vector<bool> sieve(n + 1);\\n        \\n        for (int i = 3; i <= n; i += 3)\\n            sieve[i] = true;\\n        \\n        for (int i = 5; i <= n; i += 5)\\n            sieve[i] = true;\\n        \\n        for (int i = 7; i <= n; i += 7)\\n            sieve[i] = true;\\n        \\n        int sum = 0;\\n        \\n        for (int i = 1; i <= n; ++i)\\n            if (sieve[i])\\n                sum += i;\\n        \\n        return sum;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\n    int sum(int n, int d)\\n    {\\n        int l = 0;\\n        int h = n / d;\\n        int r = h * d;\\n\\n        return (l + r) * (h + 1) / 2;\\n    }\\n\\npublic:\\n    int sumOfMultiples(int n) {\\n        return sum(n, 3) + sum(n, 5) + sum(n, 7)\\n            - sum(n, 3 * 5) - sum(n, 3 * 7) - sum(n, 5 * 7)\\n            + sum(n, 3 * 5 * 7);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445800,
                "title": "c-well-explained-brute-force-3-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i=1; i<=n; i++)\\n            if(i%3==0 || i%5==0 || i%7==0)  sum += i;\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i=1; i<=n; i++)\\n            if(i%3==0 || i%5==0 || i%7==0)  sum += i;\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445761,
                "title": "python3-inclusion-exclusion-o-1",
                "content": "\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        fn = lambda x : x*(x+1)//2\\n        return 3*fn(n//3) + 5*fn(n//5) + 7*fn(n//7) - 15*fn(n//15) - 21*fn(n//21) - 35*fn(n//35) + 105*fn(n//105)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        fn = lambda x : x*(x+1)//2\\n        return 3*fn(n//3) + 5*fn(n//5) + 7*fn(n//7) - 15*fn(n//15) - 21*fn(n//21) - 35*fn(n//35) + 105*fn(n//105)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445759,
                "title": "c-100-easy-to-understand-beginner-friendly",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        int sum=0;\\n        for(int i=1;i<=n;i++) {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        int sum=0;\\n        for(int i=1;i<=n;i++) {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445718,
                "title": "easy-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0 ){\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0 ){\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057187,
                "title": "solution-of-sum-multiples-problem",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$ - as we are inserting n elements.\\n\\n- Space complexity:\\n$$0(1)$$ - as, no extra space is required.\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        count = 0\\n        for i in range(1, n+1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                count += i\\n        return count\\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        count = 0\\n        for i in range(1, n+1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                count += i\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028377,
                "title": "c-accepted-easy-to-understand",
                "content": "```\\npublic class Solution {\\n    public int SumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=0;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int SumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=0;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3912994,
                "title": "simple-python4-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum1=0\\n       \\n        for i in range(1,n+1):  \\n            if i%3==0 or i%5==0 or i%7==0:\\n                sum1+=i\\n        return sum1\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum1=0\\n       \\n        for i in range(1,n+1):  \\n            if i%3==0 or i%5==0 or i%7==0:\\n                sum1+=i\\n        return sum1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865342,
                "title": "java-3-liner-faster-than-98",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1;i<=n;i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0){\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1;i<=n;i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0){\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3757680,
                "title": "brute-force",
                "content": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        set<int> s;\\n        \\n        vector<int> v = {3,5,7};\\n        \\n        for(int i:v)\\n        {\\n            for(int j=1;j<=n;j++)\\n            {\\n                if(j%i==0)\\n                {\\n                    s.insert(j);\\n                }\\n            }\\n        }\\n        \\n        int res = 0;\\n        for(auto i: s)\\n        {\\n            res+=i;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        set<int> s;\\n        \\n        vector<int> v = {3,5,7};\\n        \\n        for(int i:v)\\n        {\\n            for(int j=1;j<=n;j++)\\n            {\\n                if(j%i==0)\\n                {\\n                    s.insert(j);\\n                }\\n            }\\n        }\\n        \\n        int res = 0;\\n        for(auto i: s)\\n        {\\n            res+=i;\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3662535,
                "title": "subtract-the-product-and-sum-of-digits-of-an-integer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIntuition was that loop from 1 to n and then divide each of the number with\\n3 5 7 and if remainder is zero , then add them.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int i,sum=0;\\n        for(i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int i,sum=0;\\n        for(i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3640248,
                "title": "python-very-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        tot=0\\n        for i in range(3,n+1):\\n            if i%3==0 or i%5==0 or i%6==0 or i%7==0:\\n                tot+=i\\n        return tot\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        tot=0\\n        for i in range(3,n+1):\\n            if i%3==0 or i%5==0 or i%6==0 or i%7==0:\\n                tot+=i\\n        return tot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630268,
                "title": "c-solution-easy-to-understand-and-implement",
                "content": "# Flow of Code\\n1. Declaring the variable C.\\n2. Checking whether the number is divisible by 3 or 5 or 7 inside loop range inclusive 1 to n, if it is divisible add it to C.\\n3. Returning C as result.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int C=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                C+=i;\\n        }\\n        return C;\\n    }\\n};\\n```\\n\\n# Happy Coding...\\uD83E\\uDD1D",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int C=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                C+=i;\\n        }\\n        return C;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3545353,
                "title": "2652-sum-multiples-java",
                "content": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=3;i<=n;i++)\\n        {\\n            if(((i%3)==0)||((i%5)==0)||((i%7)==0))\\n                ans+=i;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=3;i<=n;i++)\\n        {\\n            if(((i%3)==0)||((i%5)==0)||((i%7)==0))\\n                ans+=i;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3508704,
                "title": "sum-of-multiples-java-solution-5ms-runtime-explained",
                "content": "# Intuition\\nWe have to iterate through numbers to calculate the sum while checking the conditions of being them multiple.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsed a simple for loop to iterate starting from 2 to n and inside loop checking for being them multiple and if true then calculate the sum continously.\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 2 ; i <= n ; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0){\\n                sum += i;\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n```\\n---\\n\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int[] arr = new int[n];\\n        int sum = 0;\\n        for(int i = 0 ; i < n ; i++){\\n            arr[i] = i + 1;\\n            if(arr[i] % 3 == 0 || arr[i] % 5 == 0 || arr[i] % 7 == 0){\\n                sum += arr[i];\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 2 ; i <= n ; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0){\\n                sum += i;\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int[] arr = new int[n];\\n        int sum = 0;\\n        for(int i = 0 ; i < n ; i++){\\n            arr[i] = i + 1;\\n            if(arr[i] % 3 == 0 || arr[i] % 5 == 0 || arr[i] % 7 == 0){\\n                sum += arr[i];\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3505234,
                "title": "easy-5-lines-c-solution-o-n",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCheck for the divisibilty of each of the number in range [1, n] and if they are divisible by 3, 5 or 7, keep on adding them till we reach the end of the range. \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++){\\n            if ((i%3 == 0) || (i%5 == 0) || (i%7 == 0)){\\n                sum += i;\\n            }\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++){\\n            if ((i%3 == 0) || (i%5 == 0) || (i%7 == 0)){\\n                sum += i;\\n            }\\n        }\\n\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488977,
                "title": "simple-java-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3478944,
                "title": "c-easy-solution-single-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum=sum+i;\\n            }\\n        }\\n   return sum; }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum=sum+i;\\n            }\\n        }\\n   return sum; }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466044,
                "title": "easy-brute-force-approach-beats-70-13",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n,int count=0) {\\n       \\n       \\n       for (int i=1;i<=n;i++)\\n       {\\n         if (i%3==0 || i%5==0 ||i%7==0)\\n           count+=i;\\n       }\\n    return count;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n,int count=0) {\\n       \\n       \\n       for (int i=1;i<=n;i++)\\n       {\\n         if (i%3==0 || i%5==0 ||i%7==0)\\n           count+=i;\\n       }\\n    return count;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3461892,
                "title": "ruby-one-liner",
                "content": "```\\n# @param {Integer} n\\n# @return {Integer}\\ndef sum_of_multiples(n)\\n  (1..n).sum { |i| i.gcd(105) > 1 ? i : 0 }  \\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {Integer} n\\n# @return {Integer}\\ndef sum_of_multiples(n)\\n  (1..n).sum { |i| i.gcd(105) > 1 ? i : 0 }  \\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3451165,
                "title": "two-line-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n,int ans=0) {\\n       for(int i=1;i<=n;i++)\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) ans += i;\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n,int ans=0) {\\n       for(int i=1;i<=n;i++)\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) ans += i;\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3450711,
                "title": "easy-go-golang-solution-using-recursion",
                "content": "```\\nfunc sumOfMultiples(n int) int {\\n        if n == 1 {\\n                return 0\\n        }\\n\\n        if n%7 == 0 || n%5 == 0 || n%3 == 0 {\\n                return sumOfMultiples(n-1) + n\\n        }\\n\\n        return sumOfMultiples(n - 1)\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Recursion"
                ],
                "code": "```\\nfunc sumOfMultiples(n int) int {\\n        if n == 1 {\\n                return 0\\n        }\\n\\n        if n%7 == 0 || n%5 == 0 || n%3 == 0 {\\n                return sumOfMultiples(n-1) + n\\n        }\\n\\n        return sumOfMultiples(n - 1)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3447659,
                "title": "c-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n\\n- Space complexity:$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int cnt=0;\\n        for(int i=1; i<=n; i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                cnt+=i;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int cnt=0;\\n        for(int i=1; i<=n; i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                cnt+=i;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3447601,
                "title": "simplest-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum =0;\\n        for(int i=3;i<=n;i++){\\n            if(i%3 ==0){\\n                sum += i;\\n            }\\n            else if(i % 5 == 0){\\n                sum += i;\\n            }\\n            else if(i % 7 ==0){\\n                sum +=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum =0;\\n        for(int i=3;i<=n;i++){\\n            if(i%3 ==0){\\n                sum += i;\\n            }\\n            else if(i % 5 == 0){\\n                sum += i;\\n            }\\n            else if(i % 7 ==0){\\n                sum +=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446661,
                "title": "100-fast-c-solution-basic-approach",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=0;\\n        for (int i=1; i<=n; i++){\\n            if (i%3==0 || i%5==0 || i%7==0)ans+=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Greedy",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=0;\\n        for (int i=1; i<=n; i++){\\n            if (i%3==0 || i%5==0 || i%7==0)ans+=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446654,
                "title": "super-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3446534,
                "title": "very-easy-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445958,
                "title": "python3-solution",
                "content": "\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        ans=0\\n        for x in range(1,n+1):\\n            if x%3==0 or x%5==0 or x%7==0:\\n                ans+=x\\n\\n        return ans        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        ans=0\\n        for x in range(1,n+1):\\n            if x%3==0 or x%5==0 or x%7==0:\\n                ans+=x\\n\\n        return ans        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445797,
                "title": "java-solution-easy-with-explanation",
                "content": "Instead of iterating over range, we are iterating over multiples of 3, 5 and 7 until they go out of range. This offers better performance since we are not checking over values which are not multiples of 3, 7 and 5.\\nWe need set to keep track of elements which are repeated. For eg. 35 should not be added twice because it is divisible by both 7 and 5. \\n```\\nclass Solution {\\n    public int sumOfMultiples(int inputNumber) {\\n        int answer = 0;\\n        int multiple = 0;\\n        Set<Integer> set = new HashSet();\\n        while((multiple+1)*3<=inputNumber) {\\n            int value = ++multiple*3;\\n            set.add(value);\\n            answer+=value;\\n        }\\n        multiple = 0;\\n        while((multiple+1)*5<=inputNumber) {\\n            int value = ++multiple*5;\\n            if(!set.contains(value)) {\\n                set.add(value);\\n                answer+=value;\\n            }\\n        }\\n        multiple = 0;\\n        while((multiple+1)*7<=inputNumber) {\\n            int value = ++multiple*7;\\n            if(!set.contains(value)) {\\n                set.add(value);\\n                answer+=value;\\n            }    \\n        }\\n        \\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int inputNumber) {\\n        int answer = 0;\\n        int multiple = 0;\\n        Set<Integer> set = new HashSet();\\n        while((multiple+1)*3<=inputNumber) {\\n            int value = ++multiple*3;\\n            set.add(value);\\n            answer+=value;\\n        }\\n        multiple = 0;\\n        while((multiple+1)*5<=inputNumber) {\\n            int value = ++multiple*5;\\n            if(!set.contains(value)) {\\n                set.add(value);\\n                answer+=value;\\n            }\\n        }\\n        multiple = 0;\\n        while((multiple+1)*7<=inputNumber) {\\n            int value = ++multiple*7;\\n            if(!set.contains(value)) {\\n                set.add(value);\\n                answer+=value;\\n            }    \\n        }\\n        \\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445747,
                "title": "c-soutions-explained-line-by-line-easy-to-understand-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGiven a number n, we need to find the sum of all the multiples of 3, 5 or 7 up to n.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe iterate from 1 to n and check if the current number is a multiple of 3, 5 or 7 using the modulo operator. If it is, we add it to the running sum. Finally, we return the sum.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nWe iterate n times, so the time complexity is O(n).\\n\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nWe use a single integer variable to store the running sum, so the space complexity is O(1).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int number) {\\n        int sum = 0;\\n        \\n        for(int i = 1; i <= number; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0){\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int number) {\\n        int sum = 0;\\n        \\n        for(int i = 1; i <= number; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0){\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445697,
                "title": "python3-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        nums = []\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                nums.append(i)\\n        return sum(nums)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        nums = []\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                nums.append(i)\\n        return sum(nums)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445696,
                "title": "c-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        long long sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0) sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        long long sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0) sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4096758,
                "title": "java-solution-with-streams",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n         return IntStream.range(1, n + 1)\\n                .filter(x -> isDivisibleBy357(x))\\n                .reduce(0, Integer::sum);\\n    }\\n\\n    private static boolean isDivisibleBy357(int x) {\\n        return x % 3 == 0 || x % 5 == 0 || x % 7 == 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n         return IntStream.range(1, n + 1)\\n                .filter(x -> isDivisibleBy357(x))\\n                .reduce(0, Integer::sum);\\n    }\\n\\n    private static boolean isDivisibleBy357(int x) {\\n        return x % 3 == 0 || x % 5 == 0 || x % 7 == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4093332,
                "title": "branchless-prgramming-solution-beats-90",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe solution is the same that the others but without including an IF statement. The condition checking introduces a innecesary branch because we dont need an ELSE clause, when we remove the IF is much faster, beating 90% python submissions.\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        sum = 0\\n        for i in range(n+1):\\n            sum = sum + i * (i % 3 == 0 or i % 5 == 0 or i % 7 == 0)\\n        return sum\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        sum = 0\\n        for i in range(n+1):\\n            sum = sum + i * (i % 3 == 0 or i % 5 == 0 or i % 7 == 0)\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4092048,
                "title": "easy-c-code-for-beginner-s-welcome",
                "content": "\\n**Simple C++ program. **\\n\\n\\n\\n# c++ code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <=n; i++ )\\n        {\\n            if(i%3==0||i%5==0||i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <=n; i++ )\\n        {\\n            if(i%3==0||i%5==0||i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087533,
                "title": "single-line-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse a loop and if statement\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([i for i in range(1,n+1) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([i for i in range(1,n+1) if i % 3 == 0 or i % 5 == 0 or i % 7 == 0])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4086665,
                "title": "easy-c-solution",
                "content": "\\n\\n```\\npublic class Solution {\\n    public int SumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 0; i <= n; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 9 == 0){\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Math"
                ],
                "code": "```\\npublic class Solution {\\n    public int SumOfMultiples(int n) {\\n        int ans = 0;\\n        for(int i = 0; i <= n; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 9 == 0){\\n                ans += i;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084623,
                "title": "java8-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nJava8\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n         return IntStream.rangeClosed(1, n).filter(i -> i % 3 == 0 || i % 5 == 0 || i % 7 == 0).sum();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n         return IntStream.rangeClosed(1, n).filter(i -> i % 3 == 0 || i % 5 == 0 || i % 7 == 0).sum();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084290,
                "title": "simple-and-east-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->Using Simple math    \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        ans=0\\n        for i in range(1,n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                ans+=i\\n        return ans\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        ans=0\\n        for i in range(1,n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                ans+=i\\n        return ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4081601,
                "title": "very-easy-solution",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n- Space complexity:O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4080722,
                "title": "sum-multiply",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nfirstly i am check what is the question saying \\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirstly i am using for loop because question say range is 1 to n\\nand then  if our range is divisble by 3,5,7 then sum it.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nint sumOfMultiples(int n){\\n    int sum=0;\\n    for(int i=3;i<=n;i++){\\n      if(i%3==0){\\n          sum+=i;\\n      }\\n      else if(i%5==0){\\n          sum+=i;\\n      }else if(i%7==0){\\n          sum+=i;\\n      }\\n    }\\n    return sum;\\n\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint sumOfMultiples(int n){\\n    int sum=0;\\n    for(int i=3;i<=n;i++){\\n      if(i%3==0){\\n          sum+=i;\\n      }\\n      else if(i%5==0){\\n          sum+=i;\\n      }else if(i%7==0){\\n          sum+=i;\\n      }\\n    }\\n    return sum;\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4079928,
                "title": "using-while-loop",
                "content": "\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n\\n        int sum=0,i=1;\\n        \\n        while(i<=n){\\n\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n            i++;\\n        }\\n\\n        return sum;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\n\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n\\n        int sum=0,i=1;\\n        \\n        while(i<=n){\\n\\n            if(i%3==0 || i%5==0 || i%7==0)\\n                sum+=i;\\n            i++;\\n        }\\n\\n        return sum;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078611,
                "title": "no-need-to-wander-it-s-python",
                "content": "# No need to wander\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([x for x in range(3, n+1) if x%3==0 or x%5==0 or x%7==0])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([x for x in range(3, n+1) if x%3==0 or x%5==0 or x%7==0])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077322,
                "title": "simple-beginner-s-solution-efficient-and-short",
                "content": "# Intuition\\nAt first glance I could tell that this problem needed a variable to store the sum, a for loop to iterate through the range given, and an if statement to decide wether the number was a multiple or not.\\n\\n# Approach\\nThe problem asks us to find the sum of all the multiples. So, this means we will need to have a variable that constantly gets updated. Then we had to check if each value within the range was divisible by 3, 5, or 7. This meant we needed some sort of loop. I used a \\'for loop\\' since I thought it made most sense. The remaining step was to find a way to check wether the numbers were divisble or not. For that I used the modulo operations \\'%\\' which returns the remainder of a division operation (Ex: 10/3 = 3.33334 | 10%3 = 1). So, as long as the output of the modulo operation was 0, then the dividend is divisible by the divisor. Putting all of these together, I was able to create my code.\\n\\n# Time & Space\\n- Time: 3 ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space: 39.18 mb\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        // ititializing a sum variable to hold the sum of all the multiples\\n        int sum = 0; // starting at 0 so that if no numbers are multiples of 3, 5, and 7\\n\\n        // for loop to iterate through all the numbers within the range\\n        for (int i = 1; i <= n; i++)\\n        {\\n            //  if statement to check and see whether the dividend is a multiple of 3, 5, and 7\\n            if (i%3 == 0 || i%5 == 0 || i%7 == 0) // using \\'%\\' to recieve the remainder of a division operation\\n            {\\n                // adding the multiple to the sum\\n                sum += i;\\n            }\\n        }\\n\\n        // returning the sum of all the multiples\\n        return sum;\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        // ititializing a sum variable to hold the sum of all the multiples\\n        int sum = 0; // starting at 0 so that if no numbers are multiples of 3, 5, and 7\\n\\n        // for loop to iterate through all the numbers within the range\\n        for (int i = 1; i <= n; i++)\\n        {\\n            //  if statement to check and see whether the dividend is a multiple of 3, 5, and 7\\n            if (i%3 == 0 || i%5 == 0 || i%7 == 0) // using \\'%\\' to recieve the remainder of a division operation\\n            {\\n                // adding the multiple to the sum\\n                sum += i;\\n            }\\n        }\\n\\n        // returning the sum of all the multiples\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077145,
                "title": "very-basic-java-soln-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        while(n>0){\\n            if(n%3==0||n%5==0||n%7==0)\\n                s+=n;\\n            n--;\\n        }\\n        return s;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        while(n>0){\\n            if(n%3==0||n%5==0||n%7==0)\\n                s+=n;\\n            n--;\\n        }\\n        return s;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072420,
                "title": "kotlin-solution-beats-86",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nusing fold , instead of sumOf , or filter or anyThing else gives you a better time complexity\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    \\n   fun sumOfMultiples(ni: Int): Int = (1..ni).fold(0) {acc , it ->\\n    if (it % 3 == 0 || it % 5 == 0 || it % 7 == 0) acc + it\\n    else acc \\n}\\n\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    \\n   fun sumOfMultiples(ni: Int): Int = (1..ni).fold(0) {acc , it ->\\n    if (it % 3 == 0 || it % 5 == 0 || it % 7 == 0) acc + it\\n    else acc \\n}\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4071917,
                "title": "c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int answer = 0;\\n        for(int i = 0; i <= n; ++i ) \\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n                answer += i;\\n        return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int answer = 0;\\n        for(int i = 0; i <= n; ++i ) \\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n                answer += i;\\n        return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070262,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n      result = 0\\n      for i in range(n+1):\\n        first = i/3\\n        second = i/5\\n        third = i/7\\n        if float(first).is_integer() or float(second).is_integer() or float(third).is_integer():\\n          result +=i\\n      return result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n      result = 0\\n      for i in range(n+1):\\n        first = i/3\\n        second = i/5\\n        third = i/7\\n        if float(first).is_integer() or float(second).is_integer() or float(third).is_integer():\\n          result +=i\\n      return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069788,
                "title": "easiest-way-99-9",
                "content": "# Intuition\\nIt has 2 way to solved, First is check every Number From [1,,,,n] inclusive. But there is a simple math trick to solve it in O(1)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nMathmatical Approch\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Constant\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        # Sum of numbers divisible by 3\\n        sum_3 = 3 * (n // 3) * (n // 3 + 1) // 2\\n        \\n        # Sum of numbers divisible by 5\\n        sum_5 = 5 * (n // 5) * (n // 5 + 1) // 2\\n\\n        # Sum of numbers divisible by 7\\n        sum_7 = 7 * (n // 7) * (n // 7 + 1) // 2\\n\\n        # Sum of numbers divisible by 3 and 5 \\n        # To avoid overcounting, we need to subtract sums of numbers divisible by 15\\n        sum_15 = 15 * (n // 15) * (n // 15 + 1) // 2\\n        \\n        # Sum of numbers divisible by 3 and 7\\n        sum_21 = 21 * (n // 21) * (n // 21 + 1) // 2\\n\\n        # Sum of numbers divisible by 5 and 7\\n        sum_35 = 35 * (n // 35) * (n // 35 + 1) // 2\\n\\n        # Sum of numbers divisible by 3, 5 and 7\\n        sum_105 = 105 * (n // 105) * (n // 105 + 1) // 2\\n        \\n        return sum_3 + sum_5 + sum_7 - sum_15 - sum_21 - sum_35 + sum_105\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        # Sum of numbers divisible by 3\\n        sum_3 = 3 * (n // 3) * (n // 3 + 1) // 2\\n        \\n        # Sum of numbers divisible by 5\\n        sum_5 = 5 * (n // 5) * (n // 5 + 1) // 2\\n\\n        # Sum of numbers divisible by 7\\n        sum_7 = 7 * (n // 7) * (n // 7 + 1) // 2\\n\\n        # Sum of numbers divisible by 3 and 5 \\n        # To avoid overcounting, we need to subtract sums of numbers divisible by 15\\n        sum_15 = 15 * (n // 15) * (n // 15 + 1) // 2\\n        \\n        # Sum of numbers divisible by 3 and 7\\n        sum_21 = 21 * (n // 21) * (n // 21 + 1) // 2\\n\\n        # Sum of numbers divisible by 5 and 7\\n        sum_35 = 35 * (n // 35) * (n // 35 + 1) // 2\\n\\n        # Sum of numbers divisible by 3, 5 and 7\\n        sum_105 = 105 * (n // 105) * (n // 105 + 1) // 2\\n        \\n        return sum_3 + sum_5 + sum_7 - sum_15 - sum_21 - sum_35 + sum_105\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069576,
                "title": "php-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    /**\\n     * @param Integer $n\\n     * @return Integer\\n     */\\n    function sumOfMultiples($n) {\\n        $range = range(1,$n);\\n        $data = [];\\n        for($i = 0; $i < count($range); $i++){\\n          if($range[$i] % 3 == 0 || $range[$i] % 5 == 0 || $range[$i] % 7 == 0 )\\n          {\\n            $data[] = $range[$i];\\n          }\\n        }\\n        return array_sum($data);\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer $n\\n     * @return Integer\\n     */\\n    function sumOfMultiples($n) {\\n        $range = range(1,$n);\\n        $data = [];\\n        for($i = 0; $i < count($range); $i++){\\n          if($range[$i] % 3 == 0 || $range[$i] % 5 == 0 || $range[$i] % 7 == 0 )\\n          {\\n            $data[] = $range[$i];\\n          }\\n        }\\n        return array_sum($data);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069097,
                "title": "sum-of-multiples",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n         int answer = 0;\\n        for(int i = 1; i<=n; i++)  {\\n            if(i%3==0 || i%5==0 || i%7==0){\\n             answer+=i;\\n             }\\n             }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n         int answer = 0;\\n        for(int i = 1; i<=n; i++)  {\\n            if(i%3==0 || i%5==0 || i%7==0){\\n             answer+=i;\\n             }\\n             }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4067721,
                "title": "sumofmultiples",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                s=s+i;\\n            }\\n        }\\n        return s;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                s=s+i;\\n            }\\n        }\\n        return s;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4059622,
                "title": "easy-to-understand-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3; i<=n; i++){\\n            if((i%3 == 0) || (i%5 == 0) || (i%7 == 0)){\\n                sum = sum + i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3; i<=n; i++){\\n            if((i%3 == 0) || (i%5 == 0) || (i%7 == 0)){\\n                sum = sum + i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051503,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051502,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046940,
                "title": "python3-sum-of-multiplies-by-list-comprehension",
                "content": "# Intuition\\n# We want to find the sum of all integers in the range [1, n] that are divisible by 3, 5, or 7.\\n# To do this, we can iterate through numbers from 1 to n and include those that meet the divisibility criteria.\\n\\n# Approach\\n# 1. Initialize a list comprehension to generate a list of numbers from 1 to n that are divisible by 3, 5, or 7.\\n# 2. Use the sum function to calculate the sum of the numbers in the generated list.\\n# 3. Return the calculated sum as the result.\\n\\n# Complexity\\n# - Time complexity: O(n), where n is the input integer. The list comprehension iterates through numbers from 1 to n.\\n# - Space complexity: O(1), as the list comprehension and the sum do not use additional memory proportional to the input size; they only store the final sum.\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([i for i in range(1,n+1) if i%3==0 or i%5==0 or i%7==0])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum([i for i in range(1,n+1) if i%3==0 or i%5==0 or i%7==0])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4044466,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0||i%5==0||i%7==0)\\n            {\\n                   sum=sum+i;\\n            }\\n        }\\n        return sum;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0||i%5==0||i%7==0)\\n            {\\n                   sum=sum+i;\\n            }\\n        }\\n        return sum;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4043491,
                "title": "without-foreach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int summa = 0;\\n        int uch = n / 3;\\n        int besh = n / 5;\\n        int yetti = n / 7;\\n        int onbesh = n / 15;\\n        int yigirmabir = n / 21;\\n        int ottizbesh = n / 35;\\n        int yuzbesh = n / 105;\\n        summa = (((1 + uch) * uch) / 2) * 3;\\n        summa += (((1 + besh) * besh) / 2) * 5;\\n        summa += (((1 + yetti) * yetti) / 2) * 7;\\n        summa -= (((1 + onbesh) * onbesh) / 2) * 15;\\n        summa -= (((1 + yigirmabir) * yigirmabir) / 2) * 21;\\n        summa -= (((1 + ottizbesh) * ottizbesh) / 2) * 35;\\n        summa += (((1 + yuzbesh) * yuzbesh) / 2) * 105;\\n        return summa;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int summa = 0;\\n        int uch = n / 3;\\n        int besh = n / 5;\\n        int yetti = n / 7;\\n        int onbesh = n / 15;\\n        int yigirmabir = n / 21;\\n        int ottizbesh = n / 35;\\n        int yuzbesh = n / 105;\\n        summa = (((1 + uch) * uch) / 2) * 3;\\n        summa += (((1 + besh) * besh) / 2) * 5;\\n        summa += (((1 + yetti) * yetti) / 2) * 7;\\n        summa -= (((1 + onbesh) * onbesh) / 2) * 15;\\n        summa -= (((1 + yigirmabir) * yigirmabir) / 2) * 21;\\n        summa -= (((1 + ottizbesh) * ottizbesh) / 2) * 35;\\n        summa += (((1 + yuzbesh) * yuzbesh) / 2) * 105;\\n        return summa;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042563,
                "title": "c-python-brute-force-approach-too-easy-fully-explained",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere\\'s how the code works:\\n\\n1. It starts by initializing a variable `sum` to zero. This variable will be used to accumulate the sum of multiples.\\n\\n2. It then enters a `for` loop that iterates through numbers from 1 to `n` (inclusive). In other words, it checks each number from 1 up to and including `n`.\\n\\n3. Within the loop, it uses the modulo operator (`%`) to check if the current number `i` is a multiple of 3, 5, or 7. If `i` is divisible by any of these numbers with a remainder of zero, it means `i` is a multiple of that number.\\n\\n4. If `i` is a multiple of 3, 5, or 7, it adds `i` to the `sum` variable.\\n\\n5. After looping through all numbers from 1 to `n`, it returns the final value of the `sum` variable, which represents the sum of all multiples of 3, 5, or 7 within the specified range.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` C++ []\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n                sum += i;\\n        }\\n    return sum;\\n    }\\n};\\n```\\n``` Python []\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum += i\\n        return sum\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 1; i <= n; i++){\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\\n                sum += i;\\n        }\\n    return sum;\\n    }\\n};\\n```\n``` Python []\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum += i\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4039709,
                "title": "c-solution-easy-to-understand-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=0; i<=n; i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=0; i<=n; i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038035,
                "title": "python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum_of_nums = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum_of_nums += i\\n        return sum_of_nums\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum_of_nums = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum_of_nums += i\\n        return sum_of_nums\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036304,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n       int sum = 0;\\n       for(int i = n ;i >= 3; i--){\\n           if(i%7 == 0)\\n           sum+=i;\\n           else if(i%5 == 0)\\n           sum += i;\\n           else if(i%3 ==0)\\n           sum +=i;\\n       } \\n       return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n       int sum = 0;\\n       for(int i = n ;i >= 3; i--){\\n           if(i%7 == 0)\\n           sum+=i;\\n           else if(i%5 == 0)\\n           sum += i;\\n           else if(i%3 ==0)\\n           sum +=i;\\n       } \\n       return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034811,
                "title": "js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n    let sum=0;\\n    for(let i=1;i<=n;i++){\\n        if(i%3===0 || i%5===0 || i%7===0)\\n        sum=sum+i;\\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n    let sum=0;\\n    for(let i=1;i<=n;i++){\\n        if(i%3===0 || i%5===0 || i%7===0)\\n        sum=sum+i;\\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033669,
                "title": "simple-c-solution-o-n-beats-100",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0) sum+=i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0) sum+=i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031065,
                "title": "simple-solution-in-java-with-time-complexity-1ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int i=n/3;\\n        int j=n/5;\\n        int k=n/7;\\n\\n        int l=n/15;\\n        int m=n/35;\\n        int n21=n/21;\\n\\n        int c=n/105;\\n\\n        \\n        int sum_3 = getSum(3,n);//3*((i*(i+1))/2);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int i=n/3;\\n        int j=n/5;\\n        int k=n/7;\\n\\n        int l=n/15;\\n        int m=n/35;\\n        int n21=n/21;\\n\\n        int c=n/105;\\n\\n        \\n        int sum_3 = getSum(3,n);//3*((i*(i+1))/2);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4030145,
                "title": "swift-simple-solution-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func sumOfMultiples(_ n: Int) -> Int {\\n        var sum = 0\\n        \\n    for num in 1...n {\\n        \\n        if num % 3 == 0 || num % 5 == 0 || num % 7 == 0 {\\n            \\n            sum += num\\n            \\n        }\\n        \\n    }\\n    \\n    return sum\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func sumOfMultiples(_ n: Int) -> Int {\\n        var sum = 0\\n        \\n    for num in 1...n {\\n        \\n        if num % 3 == 0 || num % 5 == 0 || num % 7 == 0 {\\n            \\n            sum += num\\n            \\n        }\\n        \\n    }\\n    \\n    return sum\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022901,
                "title": "beats-98-users-2-ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int count = 0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3 == 0){\\n                count += i;\\n            }\\n            else if(i%5 == 0){\\n                count += i;\\n            }\\n            else if(i%7 == 0){\\n                count += i;\\n            }\\n        }\\n//        System.out.println(count);\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int count = 0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3 == 0){\\n                count += i;\\n            }\\n            else if(i%5 == 0){\\n                count += i;\\n            }\\n            else if(i%7 == 0){\\n                count += i;\\n            }\\n        }\\n//        System.out.println(count);\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014499,
                "title": "easiest-beginner-friendly-solution-beats-100-of-c-users",
                "content": "# Intuition\\nJust find the values divisible by 3,5,7 and add them together \\n# Approach\\nint sumOfMultiples(int n): This function takes an integer n as its input parameter and returns an integer as its result.\\n\\nint sum = 0;: It initializes a variable sum to 0. This variable will be used to accumulate the sum of multiples.\\n\\nThe for loop: It iterates from i = 3 to i <= n. It starts from 3 because the task is to find the sum of multiples from 3 onwards.\\n\\nInside the loop, it checks if i is divisible by 3, 5, or 7 using the modulo operator (%). If i is divisible by any of these numbers, it means i is a multiple of 3, 5, or 7, and it adds i to the sum.\\n\\nFinally, the function returns the accumulated sum, which represents the sum of multiples of 3, 5, and 7 between 3 and n.\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3;i<=n;i++)\\n        {\\n            if(i%3==0||i%5==0||i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=3;i<=n;i++)\\n        {\\n            if(i%3==0||i%5==0||i%7==0)\\n            {\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013161,
                "title": "java-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        return 3*sigma(n/3) + 5*sigma(n/5) + 7*sigma(n/7)\\n        - 15*sigma(n/15) - 35*sigma(n/35) - 21*sigma(n/21)\\n        + 105*sigma(n/105);\\n    }\\n    private int sigma(int x){\\n        return x*(x+1)/2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        return 3*sigma(n/3) + 5*sigma(n/5) + 7*sigma(n/7)\\n        - 15*sigma(n/15) - 35*sigma(n/35) - 21*sigma(n/21)\\n        + 105*sigma(n/105);\\n    }\\n    private int sigma(int x){\\n        return x*(x+1)/2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012620,
                "title": "sumofmultiples",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum=0\\n        for i in range(1,n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                sum+=i\\n        return sum\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum=0\\n        for i in range(1,n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                sum+=i\\n        return sum\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010283,
                "title": "easy-one-line-solution-python3-time-complexity-o-n-space-complexity-o-1",
                "content": "# Intuition\\n\\nThe problem is asking for the sum of all numbers from 1 to n that are multiples of 3, 5, or 7. To solve this, we can iterate through the numbers from 1 to n and check if each number is a multiple of 3, 5, or 7. If it is, we add it to the sum.\\n\\n# Approach\\n\\nThe approach is straightforward. We iterate through the numbers from 1 to n, and for each number, we check if it\\'s divisible by 3, 5, or 7 using the modulo operator (%). If it is divisible by any of these numbers, we add it to the sum.\\n\\n# Complexity\\n\\n- Time complexity: O(n)\\n\\nWe iterate through all numbers from 1 to n once and perform a constant number of operations for each number.\\n\\n- Space complexity:  O(1)\\n\\nWe use a constant amount of extra space to store the sum and the loop variables, regardless of the input n. The space complexity is not dependent on the size of n.\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(x for x in range(1,n+1) if x % 3 == 0 or x % 5 == 0 or x % 7 == 0)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(x for x in range(1,n+1) if x % 3 == 0 or x % 5 == 0 or x % 7 == 0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4008562,
                "title": "java-solution-using-ap",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int calculate(int n, int k) {\\n        return k * (n / k) * (n / k + 1) / 2;\\n    }\\n  /*  The factors of k of 1 to n will be AP i.e for eg: n=12, k=3 then multiples will be from 1 to 12/3 = 4==>3[1+2+3+4] \\n for n=16 k=3 then factors will be from 1 to 16/3=5 => 3[1+2+3+4+5]==> all these multiples of 3 are below 16*/\\n\\n    public int sumOfMultiples(int n) {\\n//A or B or C = A + B + C - A and B - A and c - B and C + A and B and C\\n        return calculate(n, 3) + calculate(n, 5) + calculate(n, 7)\\n                - calculate(n, 3 * 5) - calculate(n, 5 * 7) - calculate(n, 3 * 7)\\n                + calculate(n, 3 * 5 * 7);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int calculate(int n, int k) {\\n        return k * (n / k) * (n / k + 1) / 2;\\n    }\\n  /*  The factors of k of 1 to n will be AP i.e for eg: n=12, k=3 then multiples will be from 1 to 12/3 = 4==>3[1+2+3+4] \\n for n=16 k=3 then factors will be from 1 to 16/3=5 => 3[1+2+3+4+5]==> all these multiples of 3 are below 16*/\\n\\n    public int sumOfMultiples(int n) {\\n//A or B or C = A + B + C - A and B - A and c - B and C + A and B and C\\n        return calculate(n, 3) + calculate(n, 5) + calculate(n, 7)\\n                - calculate(n, 3 * 5) - calculate(n, 5 * 7) - calculate(n, 3 * 7)\\n                + calculate(n, 3 * 5 * 7);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005489,
                "title": "java-3-diff-solutions-from-22ms-to-1ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  //  public int sumOfMultiples(int n) {\\n  //   return IntStream.range(3,n+1).parallel().filter(value -> value%3==0||value%5==0||value%7==0).sum();\\n  // } 22ms\\n \\n  // public int sumOfMultiples(int n) {\\n  //   int sum=0;\\n  //   for (int i = 3; i <=n; i++) {\\n  //       if (i%3==0||i%5==0||i%7==0)sum+=i;\\n  //   }\\n  //   return sum;\\n  // } 3ms\\n\\n    public int sumOfMultiples(int n) {\\n    int sum = 0;\\n    for (int i = 3; i <= n; i += 3) {\\n      sum += i;\\n    }\\n    for (int i = 5; i <= n; i += 5) {\\n      if (i % 3 == 0)continue; \\n        sum += i;\\n      \\n    }\\n    for (int i = 7; i <= n; i += 7) {\\n      if (i % 3 == 0 || i % 5 == 0)continue; \\n        sum += i;\\n      \\n    }\\n    return sum;\\n  }\\n  \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  //  public int sumOfMultiples(int n) {\\n  //   return IntStream.range(3,n+1).parallel().filter(value -> value%3==0||value%5==0||value%7==0).sum();\\n  // } 22ms\\n \\n  // public int sumOfMultiples(int n) {\\n  //   int sum=0;\\n  //   for (int i = 3; i <=n; i++) {\\n  //       if (i%3==0||i%5==0||i%7==0)sum+=i;\\n  //   }\\n  //   return sum;\\n  // } 3ms\\n\\n    public int sumOfMultiples(int n) {\\n    int sum = 0;\\n    for (int i = 3; i <= n; i += 3) {\\n      sum += i;\\n    }\\n    for (int i = 5; i <= n; i += 5) {\\n      if (i % 3 == 0)continue; \\n        sum += i;\\n      \\n    }\\n    for (int i = 7; i <= n; i += 7) {\\n      if (i % 3 == 0 || i % 5 == 0)continue; \\n        sum += i;\\n      \\n    }\\n    return sum;\\n  }\\n  \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4004948,
                "title": "easyy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = n ; i>0 ; i--)\\n        {\\n            if(i%7==0||i%5==0||i%3==0)\\n            {\\n                 sum +=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = n ; i>0 ; i--)\\n        {\\n            if(i%7==0||i%5==0||i%3==0)\\n            {\\n                 sum +=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4004531,
                "title": "one-line-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002894,
                "title": "only-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n         int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 ||i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n         int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 ||i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002883,
                "title": "only-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0)\\n            {\\n                sum=sum+i;\\n            }\\n            else if(i%5==0)\\n            {\\n                sum=sum+i;\\n            }\\n            else if(i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            if(i%3==0)\\n            {\\n                sum=sum+i;\\n            }\\n            else if(i%5==0)\\n            {\\n                sum=sum+i;\\n            }\\n            else if(i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002086,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i =1; i<=n; i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum = sum + i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i =1; i<=n; i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum = sum + i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4000568,
                "title": "python-o-n-sol",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        r=0\\n        for i in range(n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                r+=i\\n        return r\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        r=0\\n        for i in range(n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                r+=i\\n        return r\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3999279,
                "title": "simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum = sum + i \\n        return sum\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                sum = sum + i \\n        return sum\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3998199,
                "title": "python-simple-answer-easy",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum=0\\n        for i in range(1,n+1):\\n            if i%3==0 or i%5==0 or i%7==0 :\\n                sum+=i\\n        return sum\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        sum=0\\n        for i in range(1,n+1):\\n            if i%3==0 or i%5==0 or i%7==0 :\\n                sum+=i\\n        return sum\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3996831,
                "title": "easy-to-understand-simple-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        answer = 0\\n        for i in range(1, n+1):\\n            if(i % 3 == 0 or i % 5 == 0 or i % 7 == 0):\\n                answer = answer + i\\n        return answer\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        answer = 0\\n        for i in range(1, n+1):\\n            if(i % 3 == 0 or i % 5 == 0 or i % 7 == 0):\\n                answer = answer + i\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3996492,
                "title": "c-very-simple-and-easy-to-understand-solution",
                "content": "# Intuition\\nThe intuition behind this solution is to iterate through all positive integers in the range `[1, n]` and check if each integer is divisible by `3`, `5`, or `7`. If an integer satisfies any of these conditions, it is added to the sum of such numbers.\\n\\n# Approach\\nThe approach to solving this problem involves the following steps:\\n1. Initialize a variable `sum` to `0` to keep track of the sum of integers that meet the conditions.\\n2. Iterate through all positive integers from `1` to `n`.\\n3. For each integer `i`, check if it is divisible by `3`, `5`, or `7` using the modulo operator (`%`).\\n4. If `i` is divisible by any of these numbers, add it to the `sum`.\\n5. Continue this process for all integers in the range `[1, n]`.\\n6. After iterating through all integers, return the `sum` as the result, which represents the sum of integers divisible by `3`, `5`, or `7` in the given range.\\n\\n# Complexity\\n- Time complexity: **O(n)**\\n\\n- Space complexity: **O(1)**\\n\\n# Code\\n```cpp\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3994294,
                "title": "c-beats-97-69-of-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int SumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 0; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int SumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 0; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum += i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3993828,
                "title": "very-simple-solution-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        res = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                res += i\\n        return res\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        res = 0\\n        for i in range(1, n + 1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                res += i\\n        return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991828,
                "title": "java-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                    sum+= i;;\\n            }\\n        }\\n\\n        return sum; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int i = 1; i <= n; i++) {\\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                    sum+= i;;\\n            }\\n        }\\n\\n        return sum; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990492,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum=sum+i;\\n            }\\n        }   \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum=sum+i;\\n            }\\n        }   \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987956,
                "title": "typescript-solution",
                "content": "```\\nfunction sumOfMultiples(n: number): number {\\n    let sum: number = 0\\n    for(let i = 1; i <= n; i++){\\n        if(!(i % 3) || !(i % 5) || !(i % 7)) sum += i;\\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction sumOfMultiples(n: number): number {\\n    let sum: number = 0\\n    for(let i = 1; i <= n; i++){\\n        if(!(i % 3) || !(i % 5) || !(i % 7)) sum += i;\\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984925,
                "title": "o-n-js-solution",
                "content": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n\\n    const arr = []\\n\\n    for (let i = 1; i <=n; i++ ) {\\n\\n        if(i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\\n            arr.push(i)\\n        }\\n\\n    }\\n\\n    return arr.reduce((acc, curr) => acc + curr, 0)\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n\\n    const arr = []\\n\\n    for (let i = 1; i <=n; i++ ) {\\n\\n        if(i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\\n            arr.push(i)\\n        }\\n\\n    }\\n\\n    return arr.reduce((acc, curr) => acc + curr, 0)\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984792,
                "title": "python-solution-made-by-a-begginer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        z=0\\n        for i in range(n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                z += i\\n        return z\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        z=0\\n        for i in range(n+1):\\n            if i%3==0 or i%5==0 or i%7==0:\\n                z += i\\n        return z\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984542,
                "title": "c-100-tc",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int idx = 1; idx <= n; idx++) {\\n            if (idx % 3 == 0 || idx % 5 == 0 || idx % 7 == 0) sum += idx;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for (int idx = 1; idx <= n; idx++) {\\n            if (idx % 3 == 0 || idx % 5 == 0 || idx % 7 == 0) sum += idx;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984458,
                "title": "c-beats-100-easiest-code-ever",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n    int i = 1,s = 0;\\n\\tfor (; i <= n; i++)\\n\\t{\\n\\t\\tif (i%3==0 || i%5==0 || i%7==0)\\n\\t\\t\\ts += i;\\n\\t}\\n    return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n    int i = 1,s = 0;\\n\\tfor (; i <= n; i++)\\n\\t{\\n\\t\\tif (i%3==0 || i%5==0 || i%7==0)\\n\\t\\t\\ts += i;\\n\\t}\\n    return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983337,
                "title": "easy-solution-in-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        divisors = [3,5,7]\\n        sums = 0\\n        for i in range(n+1):\\n            if any(i % divisor == 0 for divisor in divisors):\\n                sums += i\\n        return sums\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        divisors = [3,5,7]\\n        sums = 0\\n        for i in range(n+1):\\n            if any(i % divisor == 0 for divisor in divisors):\\n                sums += i\\n        return sums\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982945,
                "title": "elegant-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum =0;\\n        for(int i=0;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0 )\\n            sum =sum+i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum =0;\\n        for(int i=0;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0 )\\n            sum =sum+i;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3980533,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        int i=1;\\n        while(i<=n){\\n            if((i%3 ==0) ||(i%5==0) ||(i%7==0)){\\n                sum+=i;\\n            }\\n            i++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        int i=1;\\n        while(i<=n){\\n            if((i%3 ==0) ||(i%5==0) ||(i%7==0)){\\n                sum+=i;\\n            }\\n            i++;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3971636,
                "title": "very-easy-solution-in-cpp-bro",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0; \\n        for(int i=1;i<=n;i++) \\n         {\\n             if(i%3==0 ||i%5==0 || i%7==0) \\n             { \\n                 sum+=i;\\n             }\\n         } \\n         return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum=0; \\n        for(int i=1;i<=n;i++) \\n         {\\n             if(i%3==0 ||i%5==0 || i%7==0) \\n             { \\n                 sum+=i;\\n             }\\n         } \\n         return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3970342,
                "title": "92-yes-easy-code-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n    sum = 0;\\n    for (i = 0; i <=n; i++){\\n    if((i % 3)==0 || (i % 5) ==0 || (i % 7)==0){\\n    sum +=i;\\n    }\\n}\\nreturn sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function(n) {\\n    sum = 0;\\n    for (i = 0; i <=n; i++){\\n    if((i % 3)==0 || (i % 5) ==0 || (i % 7)==0){\\n    sum +=i;\\n    }\\n}\\nreturn sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968935,
                "title": "fast-and-simple-solution-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        k = 0\\n        for i in range(1,n+1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                k = k + i\\n        return k\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        k = 0\\n        for i in range(1,n+1):\\n            if i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\\n                k = k + i\\n        return k\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3967777,
                "title": "simple-solution-on-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function (n) {\\n    let count = 0;\\n    for (let i = 1; i <= n; i++) {\\n        if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\\n            count += i\\n        }\\n    }\\n    return count;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar sumOfMultiples = function (n) {\\n    let count = 0;\\n    for (let i = 1; i <= n; i++) {\\n        if (i % 3 === 0 || i % 5 === 0 || i % 7 === 0) {\\n            count += i\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3965006,
                "title": "c-beats-100-principle-of-exclusion-inclusion",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse principle of inclusion-exclusion to formulate the sum as follows, $$s = s_3 + s_5 + s_7 - s_{15} - s_{21} - s_{35} + s_{105}$$. \\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int numOfMultiples(int n, int m){\\n        if(n<m){return 0;}\\n        else{\\n            int mults = 0; \\n            for(int i = 1; i<n+1; i++){\\n                if(i%m == 0){mults+=i;}\\n            }\\n            return mults; \\n        }\\n    }\\n    int sumOfMultiples(int n) {\\n        return numOfMultiples(n,3) + numOfMultiples(n,5) + numOfMultiples(n,7) - numOfMultiples(n,15) - numOfMultiples(n,35) - numOfMultiples(n,21) + numOfMultiples(n,105); \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int numOfMultiples(int n, int m){\\n        if(n<m){return 0;}\\n        else{\\n            int mults = 0; \\n            for(int i = 1; i<n+1; i++){\\n                if(i%m == 0){mults+=i;}\\n            }\\n            return mults; \\n        }\\n    }\\n    int sumOfMultiples(int n) {\\n        return numOfMultiples(n,3) + numOfMultiples(n,5) + numOfMultiples(n,7) - numOfMultiples(n,15) - numOfMultiples(n,35) - numOfMultiples(n,21) + numOfMultiples(n,105); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3964491,
                "title": "c-beats-100-in-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=1; i<=n;i++){\\n            if(i%3==0|| i%5==0 || i%7==0){\\n                s+=i;\\n            }\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int s=0;\\n        for(int i=1; i<=n;i++){\\n            if(i%3==0|| i%5==0 || i%7==0){\\n                s+=i;\\n            }\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3963353,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int t=0;t<=n;t++){\\n            if(t%3==0||t%5==0||t%7==0){\\n                sum +=t;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int t=0;t<=n;t++){\\n            if(t%3==0||t%5==0||t%7==0){\\n                sum +=t;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3963042,
                "title": "cpp-short-simple-brute-force",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n\\uD83D\\uDFE2$$O(n)$$\\n\\n- Space complexity:\\n\\uD83D\\uDFE2$$O(1)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 3; i<=n; i++){\\n            if(i%3 == 0 || i%5 == 0 || i%7 == 0)sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int sum = 0;\\n        for(int i = 3; i<=n; i++){\\n            if(i%3 == 0 || i%5 == 0 || i%7 == 0)sum += i;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3961656,
                "title": "c-fastest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=3;i<=n;i++){\\n            if(i%3==0||i%5==0||i%7==0)\\n            ans+=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n) {\\n        int ans=0;\\n        for(int i=3;i<=n;i++){\\n            if(i%3==0||i%5==0||i%7==0)\\n            ans+=i;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3961483,
                "title": "sum-multiples-easy-loop-ifcondi",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=1;i<=n;i++){\\n            if(i%3==0 || i%5==0 || i%7==0){\\n                sum+=i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3961246,
                "title": "plz-don-t-see-without-if-else",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int result=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            result+=(i%3==0||i%5==0||i%7==0)?i:0;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int result=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            result+=(i%3==0||i%5==0||i%7==0)?i:0;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3958707,
                "title": "java-very-easy-solution-recursion-1-line-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        return n==0 ? 0 : (n%3==0 || n%5==0 || n%7==0) ? n+sumOfMultiples(n-1) : sumOfMultiples(n-1);\\n    }\\n}\\n```\\n\\n\\n![PLEASE_UPVOTE.png](https://assets.leetcode.com/users/images/e139ab2d-beb6-4e82-87c9-c09f74ff97c9_1692971432.8296611.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Recursion",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        return n==0 ? 0 : (n%3==0 || n%5==0 || n%7==0) ? n+sumOfMultiples(n-1) : sumOfMultiples(n-1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956173,
                "title": "faster-than-100-00-begineer-friendly-easy-to-understand",
                "content": "```\\n\\tpublic int sumOfMultiples(int n) {\\n        int sum_Of_All_Integers = 0;\\n        for(int i = 1; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum_Of_All_Integers += i;\\n            }\\n        }\\n        return sum_Of_All_Integers;\\n    }",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\n\\tpublic int sumOfMultiples(int n) {\\n        int sum_Of_All_Integers = 0;\\n        for(int i = 1; i <= n; i++) {\\n            if(i % 3 == 0 || i % 5 == 0 || i % 7 == 0) {\\n                sum_Of_All_Integers += i;\\n            }\\n        }\\n        return sum_Of_All_Integers;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3955909,
                "title": "java-solution-beginner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=2;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int sumOfMultiples(int n) {\\n        int sum=0;\\n        for(int i=2;i<=n;i++)\\n        {\\n            if(i%3==0 || i%5==0 || i%7==0)\\n            {\\n                sum=sum+i;\\n            }\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1918052,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1872781,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1871652,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 2044904,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 2031181,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 2026526,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1913039,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1881603,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1872921,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1872120,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1918052,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1872781,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1871652,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 2044904,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 2031181,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 2026526,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1913039,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1881603,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1872921,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            },
            {
                "id": 1872120,
                "content": [
                    {
                        "username": "Harshsharma12",
                        "content": "This is very easy problem \\nfirst initialize result variable\\niterate loop till n \\nand modulo apply"
                    },
                    {
                        "username": "botan",
                        "content": "O(1) solution in JavaScript with graphic explanation:\\n\\nhttps://leetcode.com/problems/sum-multiples/solutions/3450363/javascript-100-time-o-1-time-o-1-space-math"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Do you know there's a better way to do it than brute force?\nYou can actually solve it in O(1)!\n\nIf you're looking for a detailed explanation of the process, from the easy brute force to the step by step proof of the O(1) solution, check out my solution:\n[easy brute force => cool O(1)](https://leetcode.com/problems/sum-multiples/solutions/3446111/easy-brute-force-cool-o-1/)"
                    },
                    {
                        "username": "hamdmrady63",
                        "content": "class Solution:\\n    def sumOfMultiples(self, n: int) -> int:\\n        return sum(list (filter (lambda x: (x % 7 == 0 or x % 5 == 0 or x % 3 == 0),range(1,n+1))))     "
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\nint sumOfMultiples(int n) {\n        int sum = 0;\n        int n3 = n/3;\n        int n5 = n/5;\n        int n7 = n/7;\n        int n15 = n/15;\n        int n21 = n/21;\n        int n35 = n/35;\n        sum += 3*(n3*(n3+1))/2;\n        sum += 5*(n5*(n5+1))/2;\n        sum += 7*(n7*(n7+1))/2;\n        sum -= 15*(n15*(n15+1))/2;\n        sum -= 21*(n21*(n21+1))/2;\n        sum -= 35*(n35*(n35+1))/2;\n        return sum;\n    }\n 🟢only working till n = 104\ncan some one suggest what is the problem here\n"
                    },
                    {
                        "username": "harshvashishta",
                        "content": "class Solution {\\n    public int sumOfMultiples(int n) {\\n        \\n        int sum_3 = getSum(3,n);\\n        int sum_5 = getSum(5,n);\\n        int sum_7 = getSum(7,n);\\n        \\n        int sum_3_5 = getSum(15,n);\\n        int sum_5_7 = getSum(35,n);\\n        int sum_3_7 = getSum(21,n);\\n\\n        int sum_3_5_7 = getSum(105,n);\\n\\n        return sum_3 + sum_5 + sum_7 - sum_3_5 - sum_5_7 - sum_3_7 + (sum_3_5_7);\\n        \\n    }\\n\\n    public int getSum(int val, int n){\\n        int i = n/val;\\n        return val*((i*(i+1))/2);\\n    }\\n}"
                    },
                    {
                        "username": "FerdinaKusumah",
                        "content": "Solution for this quite straight forward\\n\\n* Define variable result\\n* Iterate from 1 to n\\n* if (num mod 3 is 0) or (num mod 5 is 0) or (num mod 7 is 0) then add result with number\\n* return result"
                    },
                    {
                        "username": "iffishells",
                        "content": " `class Solution(object):\\n    def sumOfMultiples(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: int\\n        \"\"\"\\n        divisible = [3,5,7]\\n        count  = []\\n        for number in range(1,n+1):\\n            # print(\\'Number : {} \\'.format(number))\\n            for div in divisible:\\n                if number%div==0:\\n                    print(div,number)\\n                    if number not in count:\\n                        count.append(number)\\n        print(count)\\n        return sum(count)`\\n\\nMy Solution simple and easy to understand"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nBut lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "shevartsoft",
                        "content": "so stupid to put this in a discussion "
                    },
                    {
                        "username": "Mamun429",
                        "content": "easy problem"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Good for you"
                    },
                    {
                        "username": "NoMansGhost",
                        "content": "Holy easy, Batman!"
                    },
                    {
                        "username": "karunakarvarada73",
                        "content": "I think this is not a difficult question.\\nNo interviewer can ask this question in interviews\\uD83D\\uDE02"
                    },
                    {
                        "username": "charonme",
                        "content": "[@cartesPerforees](/cartesPerforees) exactly this, or I would ask it and see which candidates come up with the O(1) solution by themselves"
                    },
                    {
                        "username": "MobiusX",
                        "content": "[@cartesPerforees](/cartesPerforees) correct. everyone starts somewhere. well said."
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "It's marked as an easy question. It's not a very incredible news that you don't think it's difficult, that's kinda the point. You could say that of all easy questions, but beginners have to start somewhere.\nAdditinally, an interviewer could ask you that, but only allowing O(1) time complexity. Would you still laugh? ;)"
                    }
                ]
            }
        ]
    },
    {
        "title": "Create Hello World Function",
        "question_content": "Write a function&nbsp;<code>createHelloWorld</code>.&nbsp;It should return a new function that always returns&nbsp;<code>&quot;Hello World&quot;</code>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> args = []\n<strong>Output:</strong> &quot;Hello World&quot;\n<strong>Explanation:</strong>\nconst f = createHelloWorld();\nf(); // &quot;Hello World&quot;\n\nThe function returned by createHelloWorld should always return &quot;Hello World&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> args = [{},null,42]\n<strong>Output:</strong> &quot;Hello World&quot;\n<strong>Explanation:</strong>\nconst f = createHelloWorld();\nf({}, null, 42); // &quot;Hello World&quot;\n\nAny arguments could be passed to the function but it should still always return &quot;Hello World&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= args.length &lt;= 10</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 3486895,
                "title": "day-o-1-why-you-should-prefer-arrow-function-syntax",
                "content": "# When, Where and How to use the arrow  function syntax!!\\nArrow functions were first introduced in ES6 (ECMAScript 2015). They provide a concise and convenient syntax for defining functions. Let\\'s discuss how,when and where..\\n\\n**The traditional function for adding two numbers can be given as :** \\n```\\nconst add = function(a, b) {\\n  return a + b;\\n}\\n```\\n* When the above code is converted to arrow function we can skip the return part as an arrow functions automatically return the value of the expression after the arrow (=>) symbol, without the need for an explicit return statement.\\n```\\nconst add = (a, b) => a + b;\\n```\\n\\n**Lexical `this` : One of the best thing that arrow function syntax introduced to us**\\n* Arrow function has lexical `this` binding i.e they inherit the `this` value of the enclosing scope. This can be particularly useful when working with `event listeners` or `callback functions`, where the `this` value can be unpredictable.\\n*  For example in the following example the `arrow function` used as the event listener for the click event inherits the `this` value of the enclosing scope (which is the global window object), rather than having its own this value like a traditional function would.\\n```\\nconst button = document.querySelector(\\'button\\');\\nbutton.addEventListener(\\'click\\', () => {\\n  console.log(this); // logs the window object, not the button\\n});\\n```\\n**When not to use the Arrow function syntax:**\\n* `Arrow functions `cannot be used as constructors to create new objects, because they do not have their own `this` value. If you need to create objects using the `new` keyword, you will need to use a traditional function instead.\\n* Arrow functions cannot be used as generator functions that use the `yield` keyword to return multiple values over time. If you need to use the `yield` keyword, you will need to use a traditional function instead.\\n\\t*  **You must be thinking what is this `yield` keyword?** well, The `yield` keyword is used in special functions called` generator functions`, which can return multiple values over time instead of returning just one value like a normal function. When the `yield` keyword is encountered in the `generator function`, it pauses the function and returns a value, and the function can be resumed later to return more values. \\n\\t*  Basically its like a pause and resume functionality.\\n\\nWe will discuss more about `event listeners` and `callback` functions as we go further in 30days of JS challenge.\\n\\n# Answer to todays(#1) JS challenge:\\n```\\nvar createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n```\\n**TIme and Space : O(1)**\\n\\n***\\nHere\\'s my [github link](https://github.com/Jatin-Shihora) where I keep my solutions.\\n***",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst add = function(a, b) {\\n  return a + b;\\n}\\n```\n```\\nconst add = (a, b) => a + b;\\n```\n```\\nconst button = document.querySelector(\\'button\\');\\nbutton.addEventListener(\\'click\\', () => {\\n  console.log(this); // logs the window object, not the button\\n});\\n```\n```\\nvar createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486638,
                "title": "first-understand-what-is-closure-easily-master-the-concept-with-examples",
                "content": "# Definition\\n\\nIn programming, a closure is a combination of a function and its lexical environment. The lexical environment consists of any variables that were in scope at the time the closure was created.\\n\\nTo understand closures, it\\'s important to first understand lexical scoping. In JavaScript, variables declared within a function are only accessible within that function, and any nested functions within it. However, a nested function can \"remember\" the variables from the outer function even after the outer function has returned. This is because the inner function has access to the variables in the outer function\\'s lexical scope.\\n\\n# Example \\n\\n```\\nfunction outer() {\\n  const name = \"Bob\";\\n\\n  function inner() {\\n    console.log(`Hello, ${name}!`);\\n  }\\n\\n  return inner;\\n}\\n\\nconst greeting = outer();\\ngreeting(); // logs \"Hello, Bob!\"\\n\\n```\\n\\n# Explanation\\n\\nIn this example, **outer** defines a variable name and a function **inner** . **inner** is defined within outer, so it has access to name in outer\\'s lexical environment. When outer is called and returns inner, a closure is created that retains access to name. This means that even though outer has finished running and name is technically out of scope, inner can still access it and log a greeting with it.\\n\\n# Another Example\\n```\\nfunction counter() {\\n  let count = 0;\\n\\n  return function() {\\n    count++;\\n    console.log(count);\\n  }\\n}\\n\\nconst increment = counter();\\nincrement(); // logs 1\\nincrement(); // logs 2\\nincrement(); // logs 3\\n\\n```\\n# Explanation\\n\\nIn this example, counter returns a function that increments and logs a variable count each time it\\'s called. count is defined within counter, so it\\'s not accessible outside of it. However, when counter returns the inner function, a closure is created that retains access to count. This means that each time increment is called, it can still access and modify count.\\n\\n\\n# Solution \\n\\nTo create a function that returns another function that always returns \"Hello World\" in JavaScript, you can use a technique called \"function currying\". This involves creating a function that returns another function that has access to the original function\\'s variables.\\n```\\nfunction createHelloWorld() {\\n  const greeting = \"Hello World\";\\n  \\n  return function() {\\n    return greeting;\\n  };\\n}\\n\\n```\\n\\n#  \\u2B06\\uFE0F Please Upvote \\uD83D\\uDE43\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction outer() {\\n  const name = \"Bob\";\\n\\n  function inner() {\\n    console.log(`Hello, ${name}!`);\\n  }\\n\\n  return inner;\\n}\\n\\nconst greeting = outer();\\ngreeting(); // logs \"Hello, Bob!\"\\n\\n```\n```\\nfunction counter() {\\n  let count = 0;\\n\\n  return function() {\\n    count++;\\n    console.log(count);\\n  }\\n}\\n\\nconst increment = counter();\\nincrement(); // logs 1\\nincrement(); // logs 2\\nincrement(); // logs 3\\n\\n```\n```\\nfunction createHelloWorld() {\\n  const greeting = \"Hello World\";\\n  \\n  return function() {\\n    return greeting;\\n  };\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486599,
                "title": "solution-o-1-javascript-typescript",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n<iframe src=\"https://leetcode.com/playground/6JtAKRex/shared\" frameBorder=\"0\" width=\"700\" height=\"300\"></iframe>\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Code\\n<iframe src=\"https://leetcode.com/playground/6JtAKRex/shared\" frameBorder=\"0\" width=\"700\" height=\"300\"></iframe>\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3487523,
                "title": "why-this-problem-is-important",
                "content": "When we go through the problem and found that it\\'s really easy problem,then why leetcode post this question. \\n\\nBecause it\\'s use the one important concept closure which is asked in most interviews.\\n\\nWhat is Closure ?\\n\\nA closure is a function that has access to variables from its outer (enclosing) lexical scope, even after that outer function has returned.\\n\\nLet\\'s breakdown the definition -\\n\\nOne thing is sure from the definition, closure is sometype of function.\\n\\n```javascript\\nfunction someTypeOfFunction(y) {\\n    console.log(y);\\n}\\n```\\n\\nSecond thing it can access variables outside of the lexical scope. In normal terms we can say it can access the variable which is declared outside of the function.\\n\\n```javascript\\nconst variable = \"which declared outside of the function\";\\nfunction someTypeOfFunction(y) {\\n    console.log(y);\\n    console.log(variable);\\n}\\n```\\n\\nThird thing after returning from outer function we can access the variable which is declared outside of the closure.\\n\\n```\\nconst outerFunction = () => {\\n    const variable = \"which declared outside of the function\";\\n    function someTypeOfFunction(y) {\\n        console.log(y);\\n        console.log(variable);\\n    }\\n    return someTypeOfFunction;\\n}\\nconst closure = outerFunction();\\n``` \\n\\nNow the thing is, why it\\'s show important.\\nWith the help of this we can create private variable in javascript.\\n\\n```\\nfunction counter() {\\n  let count = 0;\\n  \\n  return {\\n    increment: function() {\\n      count++;\\n      console.log(count);\\n    },\\n    decrement: function() {\\n      count--;\\n      console.log(count);\\n    }\\n  }\\n}\\n\\nconst c = counter();\\nc.increment(); // Output: 1\\nc.increment(); // Output: 2\\nc.decrement(); // Output: 1\\n```\\n\\nIn this example, counter returns an object with two methods: increment and decrement. These methods both have access to the count variable, which is enclosed within the returned object and acts as a private variable. The methods can modify the count variable, but it cannot be accessed or modified directly from outside the returned object, ensuring data privacy.\\n\\nList of common uses of Closure - \\n\\n1. Private variables and methods in object-oriented programming.\\n2. Function factories that create functions with specific behavior depending on a parameter.\\n3. Memoization, caching the result of an expensive function call to avoid recomputation.\\n4. Event listeners and callbacks that need to access variables in the enclosing scope.\\n5. Partial application and currying, creating a new function by fixing some of its arguments.\\n6. Iteration over an array using forEach, map, filter, or reduce functions, which all take a function as an argument and can make use of closures to access variables in the outer scope.\\n7. Emulating block scope in JavaScript before the introduction of the let and const keywords in ES6.\\n8. Promises and asynchronous programming, using closures to capture variables that need to be accessed in a callback function.\\n9. Managing state in Redux, a popular library for managing application state in React applications.\\n10. Creating reusable utility functions that can be used in different parts of a codebase and require access to variables in the enclosing scope.\\n\\nSolution of this problem -\\n\\nJavascript \\n```javascript\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n```\\n\\nTypescript\\n```typescript\\nfunction createHelloWorld() {\\n\\treturn function(...args): string {\\n        return \"Hello World\";\\n    };\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```javascript\\nfunction someTypeOfFunction(y) {\\n    console.log(y);\\n}\\n```\n```javascript\\nconst variable = \"which declared outside of the function\";\\nfunction someTypeOfFunction(y) {\\n    console.log(y);\\n    console.log(variable);\\n}\\n```\n```\\nconst outerFunction = () => {\\n    const variable = \"which declared outside of the function\";\\n    function someTypeOfFunction(y) {\\n        console.log(y);\\n        console.log(variable);\\n    }\\n    return someTypeOfFunction;\\n}\\nconst closure = outerFunction();\\n```\n```\\nfunction counter() {\\n  let count = 0;\\n  \\n  return {\\n    increment: function() {\\n      count++;\\n      console.log(count);\\n    },\\n    decrement: function() {\\n      count--;\\n      console.log(count);\\n    }\\n  }\\n}\\n\\nconst c = counter();\\nc.increment(); // Output: 1\\nc.increment(); // Output: 2\\nc.decrement(); // Output: 1\\n```\n```javascript\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n```\n```typescript\\nfunction createHelloWorld() {\\n\\treturn function(...args): string {\\n        return \"Hello World\";\\n    };\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487642,
                "title": "createhelloworld-level-up-your-javascript-skills-with-these-intuitive-implementations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n>The problem requires us to create a function that returns another function that always returns \"Hello World\". This can be achieved by simply defining a function that returns another function that has the constant value of \"Hello World\".\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n>We can use a higher order function to create and return a new function that always returns \"Hello World\". This can be done by defining a function that returns another function that has \"Hello World\" as its return value.\\n\\n# Complexity\\n- Time complexity:\\n>The time complexity of this function is O(1) because it simply returns a constant value.\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n>The space complexity of this function is O(1) because it does not use any additional memory besides the returned function.\\n\\n# Code\\n>There are several ways to implement a function that returns a new function that always returns \"Hello World\". Here are three possible solutions in JavaScript:\\n\\n- Using an arrow function with implicit return:\\n\\n```\\nconst createHelloWorld = () => () => \"Hello World\";\\n```\\n>This creates an arrow function that takes no arguments and returns another arrow function that always returns \"Hello World\".\\n\\n- Using a function expression with explicit return:\\n```\\nconst createHelloWorld = function() {\\n  return function() {\\n    return \"Hello World\";\\n  }\\n};\\n```\\n>This is a similar approach as the previous one, but using a regular function expression instead of an arrow function.\\n\\n- Using a function declaration:\\n```\\nfunction createHelloWorld() {\\n  return function() {\\n    return \"Hello World\";\\n  }\\n}\\n```\\n>This is the most verbose option, but it works in the same way as the previous two.\\n\\n>All three solutions return a new function that always returns \"Hello World\", regardless of the arguments passed to it. Here\\'s an example of how to use them:\\n\\n```\\nconst f = createHelloWorld();\\nconsole.log(f()); // \"Hello World\"\\nconsole.log(f(\"foo\", \"bar\")); // \"Hello World\"\\nBoth calls to f will return \"Hello World\", even though different arguments were passed to it.\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n\\n\\n\\n# Important topic to Learn\\n>This problem mainly involves the concept of higher order functions in JavaScript.\\n\\n>Higher order functions are functions that either take other functions as arguments or return functions as their results. In this problem, we use a higher order function to return a new function that always returns the constant string \"Hello World\".\\n\\n>To fully understand higher order functions, it is important to be familiar with the following concepts:\\n\\n\\n```\\n1. Functions as first-class citizens: In JavaScript, functions are treated as first-class citizens,\\nwhich means that they can be assigned to variables, passed as arguments to other\\nfunctions, and returned as values from functions.\\n\\n2. Closures: A closure is a function that has access to variables in its outer scope, even after\\nthe outer function has returned. In this problem, the inner function returned by\\n`createHelloWorld()` has access to the variable `message` defined in its outer\\nfunction, even after `createHelloWorld()` has returned.\\n\\n3. Anonymous functions: An anonymous function is a function without a name. In this\\nproblem, the function returned by `createHelloWorld()` is anonymous.\\n\\n4. Arrow functions: Arrow functions are a shorthand way of writing anonymous functions.\\nThey have a more concise syntax and automatically bind `this` to the enclosing\\ncontext. In this problem, we could use arrow functions to define `createHelloWorld()`\\nand the function it returns:\\n```\\n\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst createHelloWorld = () => () => \"Hello World\";\\n```\n```\\nconst createHelloWorld = function() {\\n  return function() {\\n    return \"Hello World\";\\n  }\\n};\\n```\n```\\nfunction createHelloWorld() {\\n  return function() {\\n    return \"Hello World\";\\n  }\\n}\\n```\n```\\nconst f = createHelloWorld();\\nconsole.log(f()); // \"Hello World\"\\nconsole.log(f(\"foo\", \"bar\")); // \"Hello World\"\\nBoth calls to f will return \"Hello World\", even though different arguments were passed to it.\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```\\n1. Functions as first-class citizens: In JavaScript, functions are treated as first-class citizens,\\nwhich means that they can be assigned to variables, passed as arguments to other\\nfunctions, and returned as values from functions.\\n\\n2. Closures: A closure is a function that has access to variables in its outer scope, even after\\nthe outer function has returned. In this problem, the inner function returned by\\n`createHelloWorld()` has access to the variable `message` defined in its outer\\nfunction, even after `createHelloWorld()` has returned.\\n\\n3. Anonymous functions: An anonymous function is a function without a name. In this\\nproblem, the function returned by `createHelloWorld()` is anonymous.\\n\\n4. Arrow functions: Arrow functions are a shorthand way of writing anonymous functions.\\nThey have a more concise syntax and automatically bind `this` to the enclosing\\ncontext. In this problem, we could use arrow functions to define `createHelloWorld()`\\nand the function it returns:\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486957,
                "title": "easy-solution-o-1-time-and-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nNeed to reture Hello World.  \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAdd return \"Hello World\" in the given function.\\n# Complexity\\n- Time complexity: O(1) \\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n           return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n           return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486568,
                "title": "blazingly-fast-solution-to-this-brutal-challenge-o-1",
                "content": "# Approach\\nUsing my vast knowledge of JavaScript\\'s syntax and principles, as well as common algorithms and data structures, I meticulously engineered a solution to complete this Herculean feat in O(1) time. This remarkable achievement has pushed the boundaries of what was once thought possible in the world of JavaScript programming.\\n\\n# Complexity\\n- Time complexity: O(1)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3484401,
                "title": "js-ggwp",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return `\\nH   H  EEEEE  L      L      OOOOO        W   W  OOOOO  RRRR   L      DDD  \\nH   H  E      L      L      O   O        W   W  O   O  R   R  L      D  D \\nHHHHH  EEEEE  L      L      O   O        W W W  O   O  R R    L      D   D\\nH   H  E      L      L      O   O        WW WW  O   O  R  R   L      D  D \\nH   H  EEEEE  LLLLL  LLLLL  OOOOO        W   W  OOOOO  R   R  LLLLL  DDD\\n`.replaceAll(/^[\\\\W\\\\w\\\\r]*$/g, \\'Hello World\\');\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return `\\nH   H  EEEEE  L      L      OOOOO        W   W  OOOOO  RRRR   L      DDD  \\nH   H  E      L      L      O   O        W   W  O   O  R   R  L      D  D \\nHHHHH  EEEEE  L      L      O   O        W W W  O   O  R R    L      D   D\\nH   H  E      L      L      O   O        WW WW  O   O  R  R   L      D  D \\nH   H  EEEEE  LLLLL  LLLLL  OOOOO        W   W  OOOOO  R   R  LLLLL  DDD\\n`.replaceAll(/^[\\\\W\\\\w\\\\r]*$/g, \\'Hello World\\');\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487285,
                "title": "beginner-friendly-commented",
                "content": "The createHelloWorld function returns a new function that always returns the string \"**Hello World**\", regardless of any arguments passed to it.\\n This is an example of a closure, where the inner function returned by createHelloWorld \"remembers\" the environment in which it was created,\\n including any variables or functions that were in scope at that time.\\n\\nThe use of rest parameter syntax (...args) in the inner function allows for any number of arguments to be passed to the function, but they are ignored and not used in the returned string.\\n\\n```\\n\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n\\n```\\n\\nupvote if u like the solution",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3484239,
                "title": "trivial-o-1",
                "content": "# Intuition\\nReturn string directly.\\n\\n# Approach\\nReturn \"Hello world\"\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"    \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"    \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488723,
                "title": "my-createhelloworld",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495303,
                "title": "easy-to-understand-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return \"Hello World\";  \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return \"Hello World\";  \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487634,
                "title": "easy-solution-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486958,
                "title": "javascript-easy-solution-day-1-beginner-friendly",
                "content": "## **\\u2705\\u2705JavaScript Easy Solution Day 1 || Beginner friendly**\\n# **Please Upvote as it really motivates me**\\n\\n```\\n//In the Problem we are asked to create a function that return a function \\n//and that returning function return the string \"Hello World\"\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n//Please Upvote I will be posting solutions everyday\\n```\\n\\n![image](https://assets.leetcode.com/users/images/7f423b57-81a2-46ce-9ab2-72ad38f668f7_1675480558.466273.png)\\n",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n//In the Problem we are asked to create a function that return a function \\n//and that returning function return the string \"Hello World\"\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n//Please Upvote I will be posting solutions everyday\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3490612,
                "title": "fully-explained-javascript-solution",
                "content": "# Approach\\nUse shorthand way of writing a function expression, introduced in the ECMAScript 6 (ES6) specification, which was finalized in June 2015.\\n\\n- ` const myfun = () => { }; `\\n\\n# Code\\n\\n```\\n\\nvar createHelloWorld = function( ) {\\n   return (...args) => \"Hello World\"\\n};\\n\\n````\\n\\n- In this example we used both type of funtion the outer one is old way of writing the funtion in JavaScript.\\n- And the returned funtion is a arrow funtion.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar createHelloWorld = function( ) {\\n   return (...args) => \"Hello World\"\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489125,
                "title": "day-1-30-days-js-challenge-best-editorial-everything-explained-easy-to-understand",
                "content": "# Intuition\\nThe purpose of this code is to create a higher-order function that generates a specific function, which in this case is a function that always returns $$\"Hello \\\\space World\"$$. The outer function $$createHelloWorld()$$ is a factory function that generates the inner function. The use case of this pattern is to abstract away the details of creating the inner function and provide a simple interface to the user of the factory function.\\n\\n# Approach\\nThe approach here is to use a closure to create a function that has access to the $$ans$$ variable defined in the outer function\\'s scope. The inner function is defined using the $$ES6$$ spread operator to capture any arguments passed to it (even though the function doesn\\'t actually use them). The inner function then returns the string $$\"Hello\\\\space World\"$$ that was defined in the outer function\\'s scope.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this code is constant time, $$O(1)$$, because the inner function always returns the same value, $$\"Hello \\\\space World\"$$, regardless of the input arguments.\\n\\n- Space complexity:\\nThe space complexity of this code is also constant time, $$O(1)$$, because the only variable used is ans which is stored in the outer function\\'s scope, and there are no dynamic data structures used that would grow with input size.\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        //creating answer variable (type : string)\\n        var ans = \"Hello World\";\\n        //return ans\\n        return ans;\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n$$Please \\\\space Upvote \\\\space My \\\\space Solution \\\\space if \\\\space You \\\\space Liked \\\\space it..$$\\n![abc.png](https://assets.leetcode.com/users/images/7ceb9cd5-add2-4dc9-aab9-cc26a88f3984_1683287916.3398764.png)\\n\\n$$Thank \\\\space You \\\\space So \\\\space Much. $$\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        //creating answer variable (type : string)\\n        var ans = \"Hello World\";\\n        //return ans\\n        return ans;\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488481,
                "title": "easy-one-liner-o-1-arrow-function-javascript-solution",
                "content": "**```\\nvar createHelloWorld = function() {\\n    return (... args) => \"Hello World\";\\n};\\n```**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createHelloWorld = function() {\\n    return (... args) => \"Hello World\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487857,
                "title": "beginner-friendly-solution-o-1-time-complexity-and-space-complexity-beats-100",
                "content": "# Intuition\\nThe returned function should always return the string \"Hello World\", regardless of any arguments passed to it.\\n\\nIn other words, no matter what arguments are given to the function that is created by createHelloWorld(), it should always return the string \"Hello World\". Additionally, createHelloWorld() should not take any arguments.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487539,
                "title": "javascript-1-line-solution-day-1-of-30-days-challange",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487183,
                "title": "one-line-and-very-easy-solution-just-watch-it-and-be-amazed",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = () => () => \\'Hello World\\'\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = () => () => \\'Hello World\\'\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3822905,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\n\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3689377,
                "title": "create-hello-world-function-javascript-solution-code",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3591069,
                "title": "comprehensive-walkthrough-how-to-resolve-this-kinda-problems-100-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe probably should return something like a string. I have been thinking about this problem for quite a long time. And finally I came to the conclusion that we need to add a line - return \"Hello World\"\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Type `return \\'Hello World\\'`\\n2. Put semicolon after.\\n3. You should obtain the following string - `return \\'Hello World\\';`\\n4. This is extremely important not to confuse the case! We must not use here extra code. WE don\\'t have to use here `console.log()`. That might seem sophisticated but there is only one possible solution.\\n\\n# Complexity\\n- Time complexity: O(log(n)/log(n)) for each call. \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: It depends strognly on the specific implementation and your requirements. In my case we have something like O(n+1-n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3517576,
                "title": "don-t-just-return-simply-instead-use-closures",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwhen this function will be returned then a closure object will be returned which will have the function wrapped along with its lexical environment.. hence a will always be accessesible in the inner function\\'s return statement.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function(a=\"Hello World\") {\\n    return function(...args) {\\n        return a; // when this function will be returned then a closure object will be returned which will have the function wrapped along with its lexical environment.. hence a will always be accessesible in the inner function\\'s return statement.\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwhen this function will be returned then a closure object will be returned which will have the function wrapped along with its lexical environment.. hence a will always be accessesible in the inner function\\'s return statement.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function(a=\"Hello World\") {\\n    return function(...args) {\\n        return a; // when this function will be returned then a closure object will be returned which will have the function wrapped along with its lexical environment.. hence a will always be accessesible in the inner function\\'s return statement.\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */",
                "codeTag": "Unknown"
            },
            {
                "id": 3488545,
                "title": "best-solution-for-js-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSo by seeing the problem we can understand that we just have to return \"Hello World\" no matter what is in the argument.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIt is a very easy question we will just simply return hard coded \"Hello World\"\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Please Upvote \\uD83D\\uDD25\\uD83D\\uDE4F\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488476,
                "title": "easy-solution-with-full-explanation-and-one-liner-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt\\'s a basic function with return type function which returns a string literal\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWrite a funtion that return a new function which only have a single return statement returning **\"Hello World\"**\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n---\\n\\n\\n# Simple Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    // Returning this function\\n    return function(...args) {\\n        // Returning String Literal\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n# Using Arrow Function\\n```\\nvar createHelloWorld =()=>(...args)=>\"Hello World\";\\n```\\n![petshop_intro.gif](https://assets.leetcode.com/users/images/a668c080-df24-410c-93b8-1518e01d0a7e_1683277326.9789612.gif)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    // Returning this function\\n    return function(...args) {\\n        // Returning String Literal\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\n```\\nvar createHelloWorld =()=>(...args)=>\"Hello World\";\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487217,
                "title": "java-script-solution-for-create-hello-world-function-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe above code is written in JavaScript and it defines a function called createHelloWorld.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis function returns another function that takes any number of arguments (using the spread operator ...args) and returns the string \"Hello World\". The returned function is a closure that has access to the variables and parameters of its outer function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time and space complexity of createHelloWorld is constant, O(1), as it simply creates and returns a function. The time and space complexity of the returned function is also constant, as it performs a simple operation of returning a string, regardless of the number of arguments it receives.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe time and space complexity of createHelloWorld is constant, O(1), as it simply creates and returns a function. The time and space complexity of the returned function is also constant, as it performs a simple operation of returning a string, regardless of the number of arguments it receives.\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return (...args) => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return (...args) => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487090,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    Please Up-Vote\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimple 1 Line Of Code To Reach The Solution\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return(\"Hello World\") \\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return(\"Hello World\") \\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487013,
                "title": "simple-return-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486283,
                "title": "you-ve-gotta-be-kidding-me",
                "content": "```\\nconst createHelloWorld = () => () => \\'Hello World\\';\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst createHelloWorld = () => () => \\'Hello World\\';\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4015698,
                "title": "1-line-simple-javascript",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916266,
                "title": "easiest-way-to-return-a-string-irrespective-of-args-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nvar args = [2,3];\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n    return \"Hello World\";\\n    }\\n};\\n\\nconst f = createHelloWorld();\\nf(); \\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar args = [2,3];\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n    return \"Hello World\";\\n    }\\n};\\n\\nconst f = createHelloWorld();\\nf(); \\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3827178,
                "title": "easy-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3664978,
                "title": "js-bombastic-fantastic-solution-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3613400,
                "title": "1-problem-3-solution-js-explained-topics",
                "content": "# Approach\\nYou can use rest syntax to access all the passed arguments as an array. This isn\\'t necessary for this problem, but it will be a critical concept for many problems. You can read more about ... syntax here.\\n\\nBasic Syntax\\nThe syntax is:\\n```\\nfunction f(...args) {\\n  const sum = args[0] + args[1];\\n  return sum;\\n}\\nconsole.log(f(3, 4)); // 7\\n```\\nIn this example the variable args is [3, 4].\\n\\n##### Why\\nIt may not be immediately obvious why you would use this syntax because you can always just pass an array and get the same result.\\n\\nThe primary use-case is for creating generic factory functions that accept any function as input and return a new version of the function with some specific modification.\\n\\nBy the way, a function that accepts a function and/or returns a function is called a higher-order function, and they are very common in JavaScript.\\n\\nFor example, you can create a logged function factory:\\n```\\nfunction log(inputFunction) {\\n  return function(...args) {\\n     console.log(\"Input\", args);\\n     const result = inputFunction(...args);\\n     console.log(\"Output\", result);\\n     return result;\\n  }\\n}\\nconst f = log((a, b) => a + b);\\nf(1, 2); // Logs: Input [1, 2] Output 3\\n\\n```\\n\\n# Code\\n```\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\";\\n    }\\n};\\n```\\n```\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n```\\n```\\nvar createHelloWorld = function() {\\n    return (...args) => \"Hello World\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction f(...args) {\\n  const sum = args[0] + args[1];\\n  return sum;\\n}\\nconsole.log(f(3, 4)); // 7\\n```\n```\\nfunction log(inputFunction) {\\n  return function(...args) {\\n     console.log(\"Input\", args);\\n     const result = inputFunction(...args);\\n     console.log(\"Output\", result);\\n     return result;\\n  }\\n}\\nconst f = log((a, b) => a + b);\\nf(1, 2); // Logs: Input [1, 2] Output 3\\n\\n```\n```\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\";\\n    }\\n};\\n```\n```\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n```\n```\\nvar createHelloWorld = function() {\\n    return (...args) => \"Hello World\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566949,
                "title": "day-1-of-js-challenge-1-liner-easy-javascript-solution-best-solution-for-this-question",
                "content": "# Intuition\\nWe simply return the string needed to be printed.\\n\\n# Approach\\nreturn the string \"Hello World\".\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n\\nKindly upvote if you found this solution useful! Happy learning!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514400,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n     return \"Hello World\";   \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n     return \"Hello World\";   \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3513016,
                "title": "o-1-js-arrow-function-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAccording to the problem we need to return `\"Hello World\"` irrespective of the type of arguments passed in the function. So we take the simplest approach of returning the String `\"Hello World\"` using an `arrow function`. \\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n\\n\\n// const f = createHelloWorld();\\n// f(); // \"Hello World               \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n\\n\\n// const f = createHelloWorld();\\n// f(); // \"Hello World               \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506555,
                "title": "simple-javascript-code-o-1",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3492239,
                "title": "most-easiest-leetcode-question-ever",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3492150,
                "title": "easy-javascript-solution",
                "content": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n\\nTC: O(1)\\nSC: O(1)",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3490693,
                "title": "just-in-case-someone-needs-help-with-this",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489942,
                "title": "o-1-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n\\n const f = createHelloWorld();\\n f()\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n\\n const f = createHelloWorld();\\n f()\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489803,
                "title": "sweet-1-liner-solution-with-gentle-explaination",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n### Observation: *A function is returning another function*\\n\\n```\\nvar createHelloWorld = function() {\\n    return function(...args) {}\\n};\\n\\nconst f = createHelloWorld();\\nconsole.log(f);\\n```\\n\\n*gives Output*\\n\\n```\\n\\u0192 (...args) {\\n    }\\n\\n```\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n  We want to display \\'Hello World\\' when outer function is called,\\n  and though outer function gives inner function, so inner function \\n  will return \\'Hello World\\'.\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\ninner function donot depend on input size, so constant memory usage\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \\'Hello World\\'\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nvar createHelloWorld = function() {\\n    return function(...args) {}\\n};\\n\\nconst f = createHelloWorld();\\nconsole.log(f);\\n```\n```\\n\\u0192 (...args) {\\n    }\\n\\n```\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \\'Hello World\\'\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489300,
                "title": "2667-create-hello-world-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo create a function that returns another function that always returns \"Hello World\" in JavaScript, you can use a technique called \"function currying\". This involves creating a function that returns another function that has access to the original function\\'s variables.\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n<!-- Describe your approach to solving the problem. -->\\n\\n```javascript []\\n//console.log(\\'Hello world!\\')\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n```TypeScript []\\nfunction createHelloWorld() {\\n\\treturn function(...args): string {\\n        return \"Hello World\";\\n    };\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n\\n\\n# Example for Function Currying \\n<!-- Describe your approach to solving the problem. -->\\nStatement: Currying is a technique used in Functional Programming that involves breaking down a function that takes multiple arguments into a series of functions, each of which takes only one argument. This can make it easier to compose functions and reason about their behavior and can lead to more modular and reusable code.\\n\\nWe simply wrap a function inside a function, which means we are going to return a function from another function to obtain this kind of translation. The parent function takes the first provided argument and returns the function that takes the next argument and this keeps on repeating till the number of arguments ends. Hopefully, the function that receives the last argument returns the expected result.  \\n\\n# Why is currying useful in JavaScript?\\n\\nIt helps us to create a higher-order function\\nIt reduces the chances of error in our function by dividing it into multiple smaller functions that can handle one responsibility.\\nIt is very useful in building modular and reusable code\\nIt helps us to avoid passing the same variable multiple times\\nIt makes the code more readable\\n\\nExample:\\n\\n```JavaScript []\\n<script>\\n\\tfunction calculateVolume(length) {\\n\\t\\treturn function (breadth) {\\n\\t\\t\\treturn function (height) {\\n\\t\\t\\t\\treturn length * breadth * height;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tconsole.log(calculateVolume(4)(5)(6));\\n</script>\\n\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```javascript []\\n//console.log(\\'Hello world!\\')\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\n```TypeScript []\\nfunction createHelloWorld() {\\n\\treturn function(...args): string {\\n        return \"Hello World\";\\n    };\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\n```JavaScript []\\n<script>\\n\\tfunction calculateVolume(length) {\\n\\t\\treturn function (breadth) {\\n\\t\\t\\treturn function (height) {\\n\\t\\t\\t\\treturn length * breadth * height;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tconsole.log(calculateVolume(4)(5)(6));\\n</script>\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488677,
                "title": "simple-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488396,
                "title": "javascript-solution",
                "content": "\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487830,
                "title": "return-string-i-m-the-best",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhere do I put the return for the string\\n\\n# Approach\\nreturn string\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity - over 9000\\n- Time complexity: 0\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 0\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487561,
                "title": "day-1-javascript-code-easy-explanation-as-well",
                "content": "# Intuition\\nSo as we already know this is the basic function of java script. My thoughts about the code are as follows:\\nHere,createHelloWorld is a function that returns another function. The inner function takes no arguments and simply returns the string \"Hello World\".\\n\\nWhen createHelloWorld is called, it creates a new execution context with its own variable environment. When the inner function is returned, it retains a reference to the variable environment of the outer function, creating a closure.\\n\\nThe closure allows the returned function to access variables defined in the outer function, even after the outer function has finished executing. In this case, the inner function does not access any variables from the outer function, but the closure is still created and demonstrates how closures work.\\n\\nTo use the returned function, createHelloWorld is called and the result is assigned to the variable f. f is then called as a function with the syntax f(), which executes the inner function and returns the string \"Hello World\".\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487542,
                "title": "just-return-hello-world-arrow-function",
                "content": "```\\n/**\\n * @return {Function}\\n */\\n\\nvar createHelloWorld = function() {\\n    return () => {return \"Hello World\"}\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n\\nvar createHelloWorld = function() {\\n    return () => {return \"Hello World\"}\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487180,
                "title": "day-1-solution-javascript",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";    \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";    \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486981,
                "title": "one-liner-easy",
                "content": "# Intuition\\nThe function should return \"Hello World\" as string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        // return value\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        // return value\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486914,
                "title": "simple-javascript-solution-o-1-single-line-100",
                "content": "# Intuition\\nA simple return string statement would complete this.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486862,
                "title": "easy-single-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem asks us to create a function that returns another function that always returns the string \"Hello World\", regardless of any arguments that are passed to it. The task is to create a closure that captures the \"Hello World\" string and returns a function that always returns this string, regardless of the input.\\n\\nTo solve this problem, we need to create a function that returns another function that always returns \"Hello World\". \\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is simple everytime you have to return \"Hello World\"\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime complexity is O(1), which is constant time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace complexity is also O(1),  which is constant space complexity.\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486789,
                "title": "return-syntax-in-javascript-brief-explanation",
                "content": "> **Please Upvote!!**\\n# Intuition\\nThe \"Hello World!\" function in JavaScript is a fundamental program that serves as an excellent starting point for beginners learning the language.\\n\\n# Approach\\n These are the most basic types of values in JavaScript and include numbers, strings, booleans, null, and undefined. A function can return a primitive value using the return keyword, followed by the value to be returned. For example:\\n```\\nfunction returnNumber() {\\n  return 42;\\n}\\n\\nfunction returnString() {\\n  return \"Hello, world!\";\\n}\\n\\nfunction returnBoolean() {\\n  return true;\\n}\\n\\nfunction returnObject() {\\n  return { name: \"Alice\", age: 25 };\\n}\\n\\nfunction returnArray() {\\n  return [1, 2, 3, 4, 5];\\n}\\n\\nfunction returnFunction() {\\n  return function() {\\n    console.log(\"Hello, world!\");\\n  };\\n}\\n```\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(1)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction returnNumber() {\\n  return 42;\\n}\\n\\nfunction returnString() {\\n  return \"Hello, world!\";\\n}\\n\\nfunction returnBoolean() {\\n  return true;\\n}\\n\\nfunction returnObject() {\\n  return { name: \"Alice\", age: 25 };\\n}\\n\\nfunction returnArray() {\\n  return [1, 2, 3, 4, 5];\\n}\\n\\nfunction returnFunction() {\\n  return function() {\\n    console.log(\"Hello, world!\");\\n  };\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486759,
                "title": "explanation-code",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLet\\'s break down the code and its components\\n``` \\nvar createHelloWorld = function() {\\n      // ...\\n      };\\n``` \\n- This code declares a variable called createHelloWorld and assigns it to an anonymous function. \\n- This anonymous function will be returned when createHelloWorld is called.\\n``` \\nreturn function(...args) {\\n      return \"Hello World\";\\n      }\\n\\n}\\n```\\n- This is the nested function that will be returned when createHelloWorld is called. \\n- The ...args syntax is used to accept any number of arguments passed to the function, \\n- although in this case, the arguments are not used in the function\\'s logic. \\n- Instead, the function simply returns the string \"Hello World\" when called.\\n\\n\\n```\\n const f = createHelloWorld();\\nf(); // \"Hello World\"\\n \\n```\\n- its create a constant variable f and assigns it the result of calling createHelloWorld(). \\n- The variable f now holds the nested function that was returned by createHelloWorld.\\n\\n- The next line calls f(), which executes the nested function and returns the string \"Hello World\". \\n- The string is then logged to the console as the result of the function call.\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` \\nvar createHelloWorld = function() {\\n      // ...\\n      };\\n```\n``` \\nreturn function(...args) {\\n      return \"Hello World\";\\n      }\\n\\n}\\n```\n```\\n const f = createHelloWorld();\\nf(); // \"Hello World\"\\n \\n```\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486691,
                "title": "easy-solution-constant-complexities-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe Intution Is Simple , whatever the arguments are , we just need to return the mentioned string i.e. \"Hello World\" here.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$1$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n    /**\\n    * @return {Function}\\n    */\\n\\n    var createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n    };\\n\\n    /**\\n    * const f = createHelloWorld();\\n    * f(); // \"Hello World\"\\n    */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe Intution Is Simple , whatever the arguments are , we just need to return the mentioned string i.e. \"Hello World\" here.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$1$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n\\n    /**\\n    * @return {Function}\\n    */\\n\\n    var createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n    };\\n\\n    /**\\n    * const f = createHelloWorld();\\n    * f(); // \"Hello World\"\\n    */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486664,
                "title": "easy-approach",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486418,
                "title": "",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3485430,
                "title": "one-liner",
                "content": "```\\nconst createHelloWorld = () => () => \\'Hello World\\';\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst createHelloWorld = () => () => \\'Hello World\\';\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3485274,
                "title": "easiest-leetcode-solution-ever",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3484349,
                "title": "day-1-beats-100-2667-create-hello-world-function-javascript-accepted-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInside the **createHelloWorld** function, there is another anonymous function defined with the return statement. \\nThis nested function takes in any number of arguments using the rest parameter syntax `...args`. However, in this particular implementation, the function doesn\\'t make use of the passed arguments.\\n\\nThe nested function simply returns the string \"Hello World\". This means that whenever the createHelloWorld function is called, \\nit will return the nested function that, \\nwhen called itself, will always return the string \"Hello World\".\\n\\nit is an example of a currying function.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the code is constant or O(1). This is because the code doesn\\'t have any loops or iterations that depend on the size of the input. Regardless of the number of arguments passed to the nested function, it will always return the same output, \"Hello World\", without any operations that scale with the input size.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the code is also constant or O(1). This is because the code doesn\\'t allocate any additional memory based on the input size or any external factors. The nested function doesn\\'t use any significant amount of memory, and the only memory usage is the constant space required to store the function itself.\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n![BEATS.bmp](https://assets.leetcode.com/users/images/b36ab454-8a9f-4bea-9243-bf8a7efbe943_1683261039.4853222.bmp)\\n\\nif u Like\\uD83E\\uDD70 Please **UPVOTE** !!\\nThank You \\nHappy Coding!",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4102821,
                "title": "2667-create-hello-world-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = () => () => \\'Hello World\\'\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = () => () => \\'Hello World\\'\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4102179,
                "title": "test",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100588,
                "title": "in-one-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nlet createHelloWorld=()=>()=> \"Hello World\" ;\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet createHelloWorld=()=>()=> \"Hello World\" ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100398,
                "title": "hello-world-code-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nconst createHelloWorld = function(){\\n    return function(...args){\\n        return \"Hello World\";\\n    }\\n}\\n\\n\\n\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nconst createHelloWorld = function(){\\n    return function(...args){\\n        return \"Hello World\";\\n    }\\n}\\n\\n\\n\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100195,
                "title": "creating-a-universal-greeting-function-in-javascript-using-closures",
                "content": "# Intuition\\nThe intention behind the code is straightforward \\u2013 we want to provide a factory function that, when invoked, returns another function. This returned function, when called, will always return the string \"Hello World\" regardless of the arguments provided to it.\\n\\n# Approach\\n1. We define a function createHelloWorld that does not take any parameters.\\n2. The function, when called, returns an inner function (another example of a JavaScript closure).\\n3. This inner function is designed to accept any number of arguments (denoted by the spread syntax ...args). However, it doesn\\'t use these arguments in any way.\\n4. Regardless of the arguments passed to this inner function, it always returns the string \"Hello World\".\\n\\n# Complexity\\n- Time complexity:\\nO(1): The inner function only returns a constant string, \"Hello World\", which is a constant-time operation.\\n\\n- Space complexity:\\nO(1): The inner function doesn\\'t utilize any data structures or additional space based on the input size. It simply returns a constant string, which requires constant space.\\n\\n# Code\\nThe provided code gives a clear example of how one can create and then utilize the createHelloWorld function:\\n\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\"\\n    }\\n};\\n```\\nWhile the f function can accept arguments, they have no effect on its behavior or output. For example:\\n```\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\"\\n    }\\n};\\n```\n```\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4099415,
                "title": "my-first-try-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n  const f = createHelloWorld();\\nf();// \"Hello World\"\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n  const f = createHelloWorld();\\nf();// \"Hello World\"\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098676,
                "title": "function-helloworld",
                "content": "# Intuition\\n< First create a function name with createHelloWorld and then create return function in that function type return \"Hello world\">\\n\\n# Approach\\n<First we have to know how to create a function>\\n\\n# Complexity\\n- Time complexity:\\n<56ms>\\n\\n- Space complexity:\\n<41.6mb>\\n\\n# Code\\n```\\nfunction createHelloWorld()\\n{\\n  return function()\\n  {\\n    return \"Hello World\"\\n  }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createHelloWorld()\\n{\\n  return function()\\n  {\\n    return \"Hello World\"\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098673,
                "title": "function-helloworld",
                "content": "# Intuition\\n< First create a function name with createHelloWorld and then create return function in that function type return \"Hello world\">\\n\\n# Approach\\n<First we have to know how to create a function>\\n\\n# Complexity\\n- Time complexity:\\n<56ms>\\n\\n- Space complexity:\\n<41.6mb>\\n\\n# Code\\n```\\nfunction createHelloWorld()\\n{\\n  return function()\\n  {\\n    return \"Hello World\"\\n  }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createHelloWorld()\\n{\\n  return function()\\n  {\\n    return \"Hello World\"\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098562,
                "title": "write-a-function-createhelloworld-it-should-return-a-new-function-that-always-return-hello-world",
                "content": "# Intuition\\nThe goal here is to create a function that returns \"Hello World\" when called. This can be achieved by defining a factory function that generates and returns an inner function with a fixed return value.\\n\\n# Approach\\nI define a factory function called createHelloWorld, which returns an inner function. This inner function, when invoked, simply returns the string \"Hello World.\"\\n\\n# Complexity\\n- Time complexity: The time complexity of this code is constant (O(1)) because calling the inner function always takes the same amount of time, regardless of any input.\\n\\n- Space complexity: The space complexity is also constant (O(1)) because we\\'re not using any data structures that depend on the input size, and the inner function\\'s memory usage is constant.\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n\\n  const f = createHelloWorld();\\n  f(); // \"Hello World\"\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n\\n  const f = createHelloWorld();\\n  f(); // \"Hello World\"\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097325,
                "title": "hopefully-just-the-beginning",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097231,
                "title": "hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\ncreateHelloWorld();\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\ncreateHelloWorld();\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096408,
                "title": "create-hello-world-function-javascript-solution-by-bharadwaj",
                "content": "# Approach\\nAnonymous Function Closure\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\" \\n}\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\" \\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096220,
                "title": "create-hello-world-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\nconst helloWorldFunction = createHelloWorld();\\nconsole.log(helloWorldFunction()); // Output: \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\nconst helloWorldFunction = createHelloWorld();\\nconsole.log(helloWorldFunction()); // Output: \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095350,
                "title": "sd",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095185,
                "title": "create-hello-world-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld() {\\n    \\n\\treturn function(...args): string {\\n        return \"Hello World\"\\n    };\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction createHelloWorld() {\\n    \\n\\treturn function(...args): string {\\n        return \"Hello World\"\\n    };\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094749,
                "title": "learning-more",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst createHelloWorld = () => {\\n    const f = () => \\'Hello World\\'\\n    return f\\n}\\ncreateHelloWorld(45)\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst createHelloWorld = () => {\\n    const f = () => \\'Hello World\\'\\n    return f\\n}\\ncreateHelloWorld(45)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093985,
                "title": "arry-function-solution-with-low-run-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = ()=>{\\n    \\n    return (...args)=> {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = ()=>{\\n    \\n    return (...args)=> {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093968,
                "title": "simple-and-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093851,
                "title": "one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst createHelloWorld = () => (): string => \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst createHelloWorld = () => (): string => \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093341,
                "title": "print-hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n\\nconst f = createHelloWorld();\\nf(); // \"Hello World\"\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n\\nconst f = createHelloWorld();\\nf(); // \"Hello World\"\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092908,
                "title": "java-script-day1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090724,
                "title": "easy-js-solution-100-correct-proper-explanation-javascript-solution",
                "content": "```\\nSource Code:\\n```\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\" // if we pass return than it will only return that\\n    }\\n};\\n```\\n\\nExplanation:\\nHere\\'s a breakdown of how it works:\\n\\n1. createHelloWorld is a function that doesn\\'t take any arguments.\\n2. Inside createHelloWorld, it defines and returns an anonymous function.\\nThis inner function takes any number of arguments \\n(...args is known as a rest parameter and allows you to capture an arbitrary number of arguments as an array). \\n3. Inside the inner function, it always returns the string \"Hello World.\"\\n\\n```\\nPLEASE UPVOTE\\nHave a good day  \\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nSource Code:\\n```\n```\\n\\nExplanation:\\nHere\\'s a breakdown of how it works:\\n\\n1. createHelloWorld is a function that doesn\\'t take any arguments.\\n2. Inside createHelloWorld, it defines and returns an anonymous function.\\nThis inner function takes any number of arguments \\n(...args is known as a rest parameter and allows you to capture an arbitrary number of arguments as an array). \\n3. Inside the inner function, it always returns the string \"Hello World.\"\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090215,
                "title": "solucion-facil-a-esta-cosa",
                "content": "# Intuition\\nNo se, lo escribo en espa\\xF1ol porque alta paja hacerlo en ingles, pues no se, algo tan basico como deducir que se podia facilitar mas de lo que me lo estaban planteando, porque realmente podias meter en un return la funcion en flecha para con la string\\n\\n# Approach\\nPues al principio no se porque me parecio que lo querian hacer tan complejo para un funcion\\n\\n# Complexity\\n- Time complexity:\\n5 min\\n\\n- Space complexity:\\nNo se que colocar aca lo siento (dato no menor: estoy estudiando ingles apenas, es de las pocas cosas aparte de la programacion que estudio con mas dedicacion y no entiendo que quiere decir espacio de complejidad cfff)\\n\\n# Code\\n```\\n\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n}\\nconsole.log(createHelloWorld);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n}\\nconsole.log(createHelloWorld);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089704,
                "title": "my-1st-leetcode-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld()\\n{\\n    return function()\\n    {\\n        return \"Hello World\"\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createHelloWorld()\\n{\\n    return function()\\n    {\\n        return \"Hello World\"\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088464,
                "title": "hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088389,
                "title": "hello-world",
                "content": "# Intuition\\nComplex syntax for such an easy problem.\\n\\n# Approach\\nJust returned \"Hello World\"\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n const f = createHelloWorld();\\n f(); // \"Hello World\"\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n const f = createHelloWorld();\\n f(); // \"Hello World\"\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088112,
                "title": "lesson1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return (...args) => \"Hello World\"\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return (...args) => \"Hello World\"\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087415,
                "title": "neer-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086462,
                "title": "simple-solution",
                "content": "# Intuition\\nI first though I would have to do the function from scratch so I had already planed to create a secondary function which will return the string \"Hello world\" then I would make the createHelloWorld function to return my secondary function\\n\\n# Approach\\nSince the code of the createHelloWorld function and the secondary function was already done, I just added the return Sring needed to sent the message back to the origin.\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086009,
                "title": "hello-world-always",
                "content": "# Intuition\\nWrite a function createHelloWorld. It should return a new function that always returns \"Hello World\".\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nfunction createHelloWorld() {\\n  return () => \"Hello World\";\\n}\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nfunction createHelloWorld() {\\n  return () => \"Hello World\";\\n}\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085868,
                "title": "complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085551,
                "title": "my-1st-javascript-30-days-challenges",
                "content": "# Intuition\\nGood for gaining new knowledge \\n\\n# Approach\\nthe question was \"Write a function createHelloWorld. It should return a new function that always returns \"Hello World\".\"\\nso i write a named function called createHelloWorld and return a new named function called message then inside a function i write const named word and put a string as Hello world. after that write new const as fn and called first named function then console it.\\nthanking you!\\n\\n\\n# Code\\n```\\nfunction createHelloWorld() {\\n    return function message(){\\n        const word = \"Hello World\";\\n        return word\\n    }\\n}\\n\\nconst fn = createHelloWorld()\\nconsole.log(fn())\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createHelloWorld() {\\n    return function message(){\\n        const word = \"Hello World\";\\n        return word\\n    }\\n}\\n\\nconst fn = createHelloWorld()\\nconsole.log(fn())\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084684,
                "title": "with-rrow-function",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return () => \"Hello World\";\\n        \\n    };\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return () => \"Hello World\";\\n        \\n    };\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084583,
                "title": "asking-the-best-practice",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI don\\'t know if it is a best practice or not, but all I know is that this problem can be solved with minimal variable usage.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. --> \\nStart with the template, fill it with a return statement as the program requires. Providing a return statement to display the \\'Hello World\\' text, and then we simply need to print it using console.log().\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function() {\\n        return \"Hello World\"; \\n    }\\n    \\n};\\n\\nconsole.log(createHelloWorld());\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function() {\\n        return \"Hello World\"; \\n    }\\n    \\n};\\n\\nconsole.log(createHelloWorld());\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084380,
                "title": "simple-solution-explained",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\" // if we pass return than it will only return that\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\" // if we pass return than it will only return that\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083819,
                "title": "leetcode-warm-up-say-hello-to-the-world",
                "content": "# Intuition\\nWhen faced with the challenge of saying \\'Hello, World!\\',\\nI pondered deeply and realized that a function could be\\nthe perfect vessel for this grand message.\\n\\n# Approach\\nMy approach was simple yet elegant. I harnessed the power\\n of the \\'return\\' keyword to convey my heartfelt greeting,\\n \\'Hello, World!\\', from within the confines of a function.\\n It\\'s like sending a postcard to the caller of the function.\\n\\n# Complexity\\n- Time complexity:\\n As for time complexity, we\\'re dealing with a greeting\\n that\\'s as swift as a wink, so there\\'s no significant time\\n involved. It\\'s practically instantaneous, like saying \\'Hi!\\'\\n to a friend in the hallway.\\n\\n- Space complexity:\\n When it comes to space, we\\'re not dealing with vast\\n expanses here. The memory required is minimal, just enough\\n to store our cheerful message. No need for a multi-page letter!\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083155,
                "title": "print-hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\n// var createHelloWorld = function()  {\\n    \\n//     return \"Hello World\" ; \\n        \\n\\n// };\\n\\nfunction createHelloWorld() {\\n  return function() {\\n    return \"Hello World\";\\n  };\\n}\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n// var createHelloWorld = function()  {\\n    \\n//     return \"Hello World\" ; \\n        \\n\\n// };\\n\\nfunction createHelloWorld() {\\n  return function() {\\n    return \"Hello World\";\\n  };\\n}\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081008,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077481,
                "title": "always-use-arrow-functions-for-best-time-and-space-complexity",
                "content": "# Intuition\\nI used regular functions first but the space complexity wasn\\'t as good. Then I changed them to using arrow functions, and wow, it beat most of the solutions.\\n# Approach\\nJust use arrow functions wherever possible!\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = () => (...args) => \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = () => (...args) => \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077210,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        const hw = \"Hello World\";\\n        return hw;\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        const hw = \"Hello World\";\\n        return hw;\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076713,
                "title": "easiest-ever",
                "content": "Intuition: This code defines a function createHelloWorld that returns another function. When you call createHelloWorld(), it returns a function that, when called, returns the string \"Hello World\".\\n\\nApproach: The approach here is straightforward. createHelloWorld is a higher-order function that returns a closure, capturing the \"Hello World\" string.\\n\\nComplexity:\\n\\nTime complexity: Creating the closure is an O(1) operation.\\nSpace complexity: The closure captures the \"Hello World\" string, so the space complexity is O(1).\\nThe provided code snippet demonstrates how to use this function to create a function f that, when called, returns \"Hello World\".\\n\\n\\n\\n\\n\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return ()=> \"Hello World\"\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return ()=> \"Hello World\"\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076518,
                "title": "simple",
                "content": "\\t\\n![image.png](https://assets.leetcode.com/users/images/c53d2573-ab0c-4afa-a66a-42aa0d132fb6_1695384656.172705.png)\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return ()=> \\'Hello World\\'; \\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return ()=> \\'Hello World\\'; \\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074649,
                "title": "hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld(): () => string {\\n  return () => \\'Hello World\\';\\n}\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction createHelloWorld(): () => string {\\n  return () => \\'Hello World\\';\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074229,
                "title": "2-lines-code-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n var createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n var createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073750,
                "title": "hello-world-in-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld() {\\n  return function(...args) {\\n    if (args.length > 10) {\\n      throw new Error(\"Too many arguments provided\");\\n    }\\n    return \"Hello World\";\\n  };\\n}\\n\\nconst f = createHelloWorld();\\n\\ntry {\\n  const result = f({}, null, 42, \"extraArg1\", \"extraArg2\"); \\n  console.log(result); \\n} catch (error) {\\n  console.error(error.message);\\n}\\n\\nconst result2 = f({}, null, 42);\\nconsole.log(result2);\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createHelloWorld() {\\n  return function(...args) {\\n    if (args.length > 10) {\\n      throw new Error(\"Too many arguments provided\");\\n    }\\n    return \"Hello World\";\\n  };\\n}\\n\\nconst f = createHelloWorld();\\n\\ntry {\\n  const result = f({}, null, 42, \"extraArg1\", \"extraArg2\"); \\n  console.log(result); \\n} catch (error) {\\n  console.error(error.message);\\n}\\n\\nconst result2 = f({}, null, 42);\\nconsole.log(result2);\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073606,
                "title": "ultra-simple-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \\'Hello World\\'\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \\'Hello World\\'\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073476,
                "title": "first-questioned-solve",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\nconst f = createHelloWorld();\\n  f(\\n    \\'i\\'\\n  ); // \"Hello World\"\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\nconst f = createHelloWorld();\\n  f(\\n    \\'i\\'\\n  ); // \"Hello World\"\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070815,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\n function g()\\n {\\n     return \"Hello World\";\\n }\\nvar createHelloWorld = function() {\\nreturn g;\\n        \\n    }\\n\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n function g()\\n {\\n     return \"Hello World\";\\n }\\nvar createHelloWorld = function() {\\nreturn g;\\n        \\n    }\\n\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070577,
                "title": "challenger-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"; \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"; \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068418,
                "title": "hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068181,
                "title": "javascript-exp-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst args = [{},null,42];\\nvar createHelloWorld = function (getArray) {\\n    return function () {\\n        return \"Hello World\"\\n    }\\n}\\n\\nconst f = createHelloWorld(args);\\nf()\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst args = [{},null,42];\\nvar createHelloWorld = function (getArray) {\\n    return function () {\\n        return \"Hello World\"\\n    }\\n}\\n\\nconst f = createHelloWorld(args);\\nf()\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4068156,
                "title": "javascript-exp-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar createHelloWorld = function () {\\n    return function (...args) {\\n        return \"Hello World\"\\n    }\\n}\\n\\nconst f = createHelloWorld();\\nf()\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createHelloWorld = function () {\\n    return function (...args) {\\n        return \"Hello World\"\\n    }\\n}\\n\\nconst f = createHelloWorld();\\nf()\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067998,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064969,
                "title": "javascript-day-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nconst createHelloWorld = function(){\\n    return ()=> \"Hello World\"\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nconst createHelloWorld = function(){\\n    return ()=> \"Hello World\"\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063610,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061901,
                "title": "create-hello-world-function-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \\'Hello World\\';\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n        return \\'Hello World\\';\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061860,
                "title": "easy-solution-must-check-once",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\"  \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\"  \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055593,
                "title": "create-hello-world-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> I first look at how the function is being called, and what parameters are supplied when called.  I see that the callback function has parameters, and the main function has none.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->. I know I want the main function to provide some output.  Since I cannot supply any arguments, then I must supply the output in the code.  I can do that through my return statement.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->$$O(1)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051856,
                "title": "first",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051526,
                "title": "noob-thinking-as-you-say",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI thought this is nested function . \\nseprating to each other,\\nThen make it single,\\nthen nest it  agian\\nit\\'s like if you can\\'t brake a bundle of stick then take only one stick and break it .\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n As nested function so I approch it like seprating nest to each other  and make single function and then nesting two function to each others and then make it \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\n\\n\\nfunction createHelloWorld (){\\n  return  () => \\'Hello World\\';\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n\\n\\nfunction createHelloWorld (){\\n  return  () => \\'Hello World\\';\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050383,
                "title": "esay-way-to-solve-prbolem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050346,
                "title": "what-is-a-closure-you-can-learn-from-this-question",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nWhat is a closure?\\nIn JavaScript, a closure refers to the combination of a function and its lexical environment. It allows a function to access variables outside its defining lexical scope and maintain references to those variables, even when called outside the function.\\n\\nA closure consists of two main components:\\n\\nFunction: A closure is a function that defines some variables and logic.\\nLexical Environment: The lexical environment is the scope created at the time of function definition, which contains the variables defined within the function and their values.\\nIn general terms, any JavaScript function is a closure, such as in a browser where window is the global object, and in Node.js where each function has a global object.\\n\\nSpecifically, a function in JavaScript is considered a closure if it accesses variables from the outer function\\'s lexical scope.\\n\\nIn simple terms, an ordinary function is considered a closure if it can access variables from the outer function\\'s lexical scope.\\n\\nThe formation process of a closure involves the following code:\\n\\n```\\nfunction makeAdder(base) {\\n  return function (num) {\\n    return base + num;\\n  }\\n}\\nconst add10 = makeAdder(10);\\nconsole.log(add10(5)); // Output: 15\\n```\\n\\n    \\nWhen the makeAdder function executes, the Activation Object (AO) is typically created and stored within it. However, in this case, since there is a reference to the base variable in the returned function, it is not released.\\n\\nWhat is an Activation Object? An Activation Object is created when a function executes and stores variables and arguments within that function.\\n\\nMemory leak caused by closures occurs in the above example. If we no longer use the add10 function, both the function object and the AO referenced by add10 should be destroyed. However, since add10 is assigned to null in the global scope, there is still a reference to the returned function object (AO), causing these memory resources to be unreleased. Therefore, closures often lead to memory leaks due to the chain of references that cannot be released.\\n\\nTo resolve memory leaks caused by closures:\\n\\n```\\nadd10 = null;\\n```\\n    \\nBy assigning add10 to null, this removes the reference to the returned function object (AO), allowing it to be destroyed according to the garbage collector mechanism.\\n\\nDo unused properties from the outer scope get destroyed? Consider the following code:\\n\\n```\\nfunction makeAdder(base) {\\n  const msg = \"hello\";\\n  return function (num) {\\n    return base + num;\\n  }\\n}\\n```\\n\\n    \\nIn this case, base remains unchanged and is accessible outside the returned function, while msg is destroyed since it is only defined within the outer function\\'s scope.\\n\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction makeAdder(base) {\\n  return function (num) {\\n    return base + num;\\n  }\\n}\\nconst add10 = makeAdder(10);\\nconsole.log(add10(5)); // Output: 15\\n```\n```\\nadd10 = null;\\n```\n```\\nfunction makeAdder(base) {\\n  const msg = \"hello\";\\n  return function (num) {\\n    return base + num;\\n  }\\n}\\n```\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050208,
                "title": "simple-effective-solution",
                "content": "# Approach\\njust returning Hello World string\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049621,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return (\"Hello World\");\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return (\"Hello World\");\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049204,
                "title": "hello-world-high-order-function",
                "content": "\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nlet createHelloWorld = () => () => \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nlet createHelloWorld = () => () => \"Hello World\"\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048583,
                "title": "hello-world-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld() {\\n  return function() {\\n    return \"Hello World\";\\n  };\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createHelloWorld() {\\n  return function() {\\n    return \"Hello World\";\\n  };\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048180,
                "title": "1-line-ts-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst createHelloWorld = () => ():string => \"Hello World\";\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst createHelloWorld = () => ():string => \"Hello World\";\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047209,
                "title": "solution-for-2667-create-hello-world-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- We know from the question there 2 functions;\\n- The 1st function is declared as \"createHelloWorld\" and it should return a function.\\n- The 2nd function isn\\'t declared like the 1st but what we do know is that it returns a \"Hello World\" string every time.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Declare and create function 1 as \"createHelloWorld\" and return function 2 \\n- In function 2 return string \"Hello World\"\\n\\n\\n# Code\\n```\\nconst createHelloWorld = () => {\\n    return function() {\\n        return \"Hello World\"\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst createHelloWorld = () => {\\n    return function() {\\n        return \"Hello World\"\\n    }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040525,
                "title": "resposta",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\n\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\";\\n    }\\n};\\n\\nconsole.log(createHelloWorld());\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n\\nvar createHelloWorld = function() {\\n    return function() {\\n        return \"Hello World\";\\n    }\\n};\\n\\nconsole.log(createHelloWorld());\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040510,
                "title": "create-hello-world-function-submission",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBecause the returned value is constant, we use the property of closure to access the arg as an array and then return \"Hello World\" regardless of the arguments passed\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBecause the returned value is constant, we use the property of closure to access the arg as an array and then return \"Hello World\" regardless of the arguments passed\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n0(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function(args) {\\n    return (...args) => \"Hello World\"\\n};\\n\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function(args) {\\n    return (...args) => \"Hello World\"\\n};\\n\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040406,
                "title": "first-problem-hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\n\\nfunction createHelloWorld (){\\n\\nreturn function() {return \"Hello World\"}\\n}\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n\\nfunction createHelloWorld (){\\n\\nreturn function() {return \"Hello World\"}\\n}\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040149,
                "title": "question-1-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\n \\nvar createHelloWorld = function() {\\n    \\n    return function() {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\n \\nvar createHelloWorld = function() {\\n    \\n    return function() {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039589,
                "title": "creating-a-simple-hello-world-function-in-javascript-with-arrow-functions",
                "content": "# Intuition\\n\\nThis code snippet demonstrates the creation of a closure in JavaScript. The main idea here is to define a function createHelloWorld that returns another function. The returned function, when invoked, returns the string \"Hello World.\"\\nApproach\\n\\n    1. Define a function createHelloWorld that doesn\\'t take any arguments.\\n    \\n    2. Inside createHelloWorld, return an arrow function that takes no  \\n       arguments and returns the string \"Hello World.\"\\n\\n# Complexity\\n\\n    - Time complexity: O(1) - Both the createHelloWorld function and the\\n        returned arrow function have constant time complexity.\\n\\n    - Space complexity: O(1) - The arrow function returned by \\n        createHelloWorld doesn\\'t have any significant space usage.\\n\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nlet createHelloWorld = function() {\\n    return () => (\"Hello World\")\\n    };\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nlet createHelloWorld = function() {\\n    return () => (\"Hello World\")\\n    };\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038164,
                "title": "js-solution",
                "content": "# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\"\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\"\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038093,
                "title": "hello-world",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld() {\\n\\treturn function(...args): string {\\n        return \"Hello World\"\\n    };\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction createHelloWorld() {\\n\\treturn function(...args): string {\\n        return \"Hello World\"\\n    };\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037570,
                "title": "challenge01",
                "content": "\\n# Code\\n```\\n\\nfunction createHelloWorld() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n\\ncreateHelloWorld();\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nfunction createHelloWorld() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n\\ncreateHelloWorld();\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037395,
                "title": "javascript-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036927,
                "title": "hello-world-javascript-30-days-challenge",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036306,
                "title": "this-is-the-solution-without-any-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createHelloWorld = function() {\\n        return () => \"Hello World\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036142,
                "title": "one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035004,
                "title": "just-with-one-line-of-updation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\"\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031571,
                "title": "create-a-hello-world-function-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n        \\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031004,
                "title": "runtime-details-50ms-beats-79-42-of-users-with-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld() {\\n\\treturn ()=>\"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction createHelloWorld() {\\n\\treturn ()=>\"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025202,
                "title": "hello-world",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$Big-O = O(1)$$\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function () {\\n    return function (...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function () {\\n    return function (...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4023691,
                "title": "first-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return () => \"Hello World\";\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4023074,
                "title": "create-hello-world-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction createHelloWorld() {\\n  // This inner function is a closure that captures the \"Hello World\" message.\\n  function hi() {\\n    return \"Hello World\";\\n  }\\n\\n  // Return the inner function.\\n  return hi;\\n}\\n\\nconsole.log(createHelloWorld()); // This will print \"Hello World\"\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createHelloWorld() {\\n  // This inner function is a closure that captures the \"Hello World\" message.\\n  function hi() {\\n    return \"Hello World\";\\n  }\\n\\n  // Return the inner function.\\n  return hi;\\n}\\n\\nconsole.log(createHelloWorld()); // This will print \"Hello World\"\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4017683,
                "title": "create-hello-word-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\nvar assign = createHelloWorld();\\nvar result = assign();\\n\\nconsole.log(result);\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n        return \"Hello World\";\\n    }\\n};\\n\\nvar assign = createHelloWorld();\\nvar result = assign();\\n\\nconsole.log(result);\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4015043,
                "title": "hello-world-in-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       let str = \"Hello World\";\\n       return str;\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    return function(...args) {\\n       let str = \"Hello World\";\\n       return str;\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1882143,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883037,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883568,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883113,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1882731,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1884172,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1918839,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1882836,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883131,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1888568,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1882143,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883037,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883568,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883113,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1882731,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1884172,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1918839,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1882836,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883131,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1888568,
                "content": [
                    {
                        "username": "bessadam",
                        "content": "I did this task 15 minutes ago and still haven\\'t received an offer from FAANG company :("
                    },
                    {
                        "username": "devvrat02",
                        "content": "[@aXXo](/aXXo) YOU Enjoying there comments lol"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Lol"
                    },
                    {
                        "username": "mint_",
                        "content": "You do realize that it takes more than this to get into FAANG, right? This has nothing to do with data structures/algorithms, so if you act this entitled from solving such an easy question nothing will come to you.\n\nSending you thoughts and prayers. You'll need it for your attitude.\n\nᵃˡˢᵒ ᵗʰᶦˢ ʷᵃˢ ᵃ ʲᵒᵏᵉ"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "maybe they are busy in laying off some employees to have some space for your position"
                    },
                    {
                        "username": "mauryasachin243601",
                        "content": "me also still haven\\'t received "
                    },
                    {
                        "username": "aXXo",
                        "content": "Really? I just signed my offer letter from Google after submitting. "
                    },
                    {
                        "username": "jerryy147",
                        "content": "ikr, must be the hardest problem on leetcode :("
                    },
                    {
                        "username": "ankitsumitsharma80",
                        "content": "Leetcode be like let them enjoy their 1st day "
                    },
                    {
                        "username": "codeMonarch",
                        "content": "and cry for rest of  the remaining \\n"
                    },
                    {
                        "username": "meow_power",
                        "content": "I would advise everyone to read the editorial even if u solve the problem . You would get to know about:\\n\\nhoisting\\nblock scope\\nlexical scope\\nclosures\\ndifferent ways to define a function\\nrest arguement\\nhigher order functions"
                    },
                    {
                        "username": "Beseresk",
                        "content": "Thank you."
                    },
                    {
                        "username": "arnav09022003",
                        "content": "Your comment deserves a lot more up Votes."
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "Thank you. It helps a lot."
                    },
                    {
                        "username": "kingp",
                        "content": "this is the silence before the storm type question :)"
                    },
                    {
                        "username": "Chinemerem",
                        "content": "Day 1, it can only get harder from here 😭"
                    },
                    {
                        "username": "Anurag__Das",
                        "content": "# Questions you should ask yourself and  get answer to in the editorial section.\\n## Questions\\n* How are functions perceived in JS ?\\n* Can functions be stored in Variables ?\\n* What are Immediately Invoked Function Expressions ? Which OOPs principle can be implemented as an application for the same ?\\n* What is Hoisting ? Is it regarded as a good practice ?\\n* What are Closures/Lexical Environment of functions in JS ?\\n* When do we need/omit a `return` it when using an arrow function ?\\n* Can features like `this`, `super` be used with arrow functions ? Do they give the same result ?\\n* Can Arrow functions be used as a Constructor ?\\n* What do we mean by spread syntax ?\\n* What is Rest Arguments in a function ?\\n* What is a higher-order Function ?\\n\\n## Note:\\nI think not only these are the major takeaways  from the editorial, but can be a part of an interviewers list of questions. These concepts are basic in nature and are important.\\n\\nHope this Helps people to quickly skim through the editorial and have a questions list they can review later. \\n "
                    },
                    {
                        "username": "ImHavven",
                        "content": "My Submission made Zlatan retire...."
                    },
                    {
                        "username": "rvrajaneesh",
                        "content": "bro,,"
                    },
                    {
                        "username": "Narkaa",
                        "content": "Don\\'t think it in Harder way! Your approach is probably works !! "
                    },
                    {
                        "username": "ritesh8828",
                        "content": "leetcode: let them enjoy : )"
                    },
                    {
                        "username": "MenaiAla",
                        "content": "I guess LeetCode should remove \"Did you see this question in interview before?\""
                    }
                ]
            },
            {
                "id": 1883362,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 1884490,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 1883779,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 1883006,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 1882961,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 2075700,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 2071240,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 2067817,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 2067750,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 2067610,
                "content": [
                    {
                        "username": "botan",
                        "content": "I think this should me ranked as `Medium`"
                    },
                    {
                        "username": "user9946L",
                        "content": "Is that a serious question or what ?"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "This is the first coding problem I solved < .5 minutes"
                    },
                    {
                        "username": "amansingh22160811",
                        "content": "Just return \"HELLO WORLD\""
                    },
                    {
                        "username": "vermagaurav8",
                        "content": "Good example for understanding higher order function for beginners."
                    },
                    {
                        "username": "rohitbedwal9",
                        "content": "/**\\n * @return {Function}\\n */\\nvar createHelloWorld = function() {\\n    \\n    return function(...args) {\\n       return \"Hello World\";\\n    }\\n};\\n\\n/**\\n * const f = createHelloWorld();\\n * f(); // \"Hello World\"\\n */"
                    },
                    {
                        "username": "solodjavadev91",
                        "content": "LC is becoming game like Soullike game. Start them slow and easy."
                    },
                    {
                        "username": "rmnaveen21",
                        "content": "Console.log(\" Hello world \\n\")"
                    },
                    {
                        "username": "emporteme",
                        "content": "Hello everyone, today is my first day in leetcode. Hope this journey will be great!"
                    },
                    {
                        "username": "ncn-ends",
                        "content": "Should be a hard question"
                    }
                ]
            },
            {
                "id": 2066805,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 2019294,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 2007841,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 2005776,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 1994093,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 1983939,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 1981326,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 1980290,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 1976191,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 1972670,
                "content": [
                    {
                        "username": "laraakram",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "Ragoo",
                        "content": "SOMEONE EXPLAIN PLEASE!! the correct answer makes no sense, in the correct answer, where does \\'return\\' get logged? How am i supposed to know?\\n\\nI tried the tradition approach but it was wrong \\uD83D\\uDE22Maybe coding isnt for me, and i have spent 3 MONTHS LEARNING JAVASCRIPT and cant get off day 1 \\uD83D\\uDE22 \\n\\nI give up...\\n\\nMy incorrect solution was, \\n\\nfunction createHelloWorld() {\\n    let phrase = \"Hello World\"\\n  return phrase;\\n}\\n\\ncreateHelloWorld();\\n\\n"
                    },
                    {
                        "username": "nakul1710",
                        "content": "method to solve this "
                    },
                    {
                        "username": "kushalmahajan",
                        "content": "I mean, Why? Leetcode has this problem of filling up this space with questions. The questions on arrays alone have surpassed 1100. Maybe you need to clean up the question database a bit so that questions that don\\'t add value don\\'t contribute to the numbers on a topic. In this case, it is Javascript. I am pretty sure that when people make study plans, they make T-shirt estimate by number of questions in a topic/list/card etc. \\nPlease consider this a critical feedback. There are tons of sites doing exactly curation for better experience. You can save your time and resources in the longer run. \\n\\n"
                    },
                    {
                        "username": "abhiHegde28",
                        "content": "How can they pass any values to the function??\\nbecause there is no arguments mentioned in anonyms function."
                    },
                    {
                        "username": "Santosh_25",
                        "content": "I learned JavaScript basics but couldn\\'t solve this question at first but editorial helped me to solve the question and got to learn about HOF"
                    },
                    {
                        "username": "Singh_uday99",
                        "content": "Enjoy your first problem and best of luck "
                    },
                    {
                        "username": "devangkartiksuryavanshi",
                        "content": "Today is i am feel Demotivated because cleared my basic on javascript but did not complete this task  and also no idea how to solved it (meri shkatiya yha par kaam hi nhi kar rhi hai )\n.haha"
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "New Bee\\'s just do what first line of description is saying just implement it in code."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "lol, even this problem had a little secret"
                    }
                ]
            },
            {
                "id": 1957561,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1949448,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1895131,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1890955,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1885086,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1883876,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1883806,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1883615,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1883565,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            },
            {
                "id": 1883477,
                "content": [
                    {
                        "username": "halboangel",
                        "content": "i thought this would teach coding. i was wrong- im so confused rn. this is a whole new language. "
                    },
                    {
                        "username": "sigmamies123",
                        "content": "hmm very good question!"
                    },
                    {
                        "username": "HaltAndCatchFire",
                        "content": "A newbie here. Where do I submit the solution?"
                    },
                    {
                        "username": "Zsix",
                        "content": "These discussion comments make my day lol."
                    },
                    {
                        "username": "devvrat02",
                        "content": "It simple when their is written in description return Hello world then what you need to write\\n "
                    },
                    {
                        "username": "vishaleet",
                        "content": "\"In our normal day to day programming we use c++/java/python/etc.. in that we declare a variable in a function then we use it in for/while loop in itself that function is closure or not.\\nLet\\'s discuss this guys this will help us understand concept more clearly..\""
                    },
                    {
                        "username": "thealonemusk",
                        "content": "I thought there would be a catch , i thought lemme submit the simplest solution and fix what the errors will be , it got accepted . it took me 5 s to solve this \\uD83D\\uDE2D\\uD83D\\uDE2D"
                    },
                    {
                        "username": "thomas-x-69",
                        "content": "next step : applying to google interview"
                    },
                    {
                        "username": "Bhelwulf",
                        "content": "What\\'s the point of this question?"
                    },
                    {
                        "username": "devil-1964",
                        "content": " Want to print in same line:\\nTry  `process.stdout.write()` in Javascript:\\n `process.stdout.write(\"Hello\")`\\n `process.stdout.write(\"World\")`\\n `process.stdout.write(\"!!!\")`\\n//output:- \\n`HelloWorld!!!`\\nCursor remains in same line.\\n\\nunlike when we use `console.log()`\\nwhich moves our cursor to next line while printing on the screen.\\ni.e.\\n`console.log(\"Hello\")`\\n`console.log(\"World\")`\\n`console.log(\"!!!\")`\\n//output:-\\n`Hello`\\n`World`\\n` !!!`"
                    }
                ]
            }
        ]
    },
    {
        "title": "Chunk Array",
        "question_content": "<p>Given an array <code>arr</code> and&nbsp;a chunk size&nbsp;<code>size</code>, return a&nbsp;<strong>chunked</strong> array. A&nbsp;<strong>chunked</strong>&nbsp;array contains the original elements in&nbsp;<code>arr</code>, but&nbsp;consists of subarrays each of length&nbsp;<code>size</code>. The length of the last subarray may be less than&nbsp;<code>size</code>&nbsp;if <code>arr.length</code>&nbsp;is not evenly divisible by <code>size</code>.</p>\n\n<p>You may assume the&nbsp;array&nbsp;is&nbsp;the output of&nbsp;<code>JSON.parse</code>. In other words, it is valid JSON.</p>\n\n<p>Please solve it without using lodash&#39;s&nbsp;<code>_.chunk</code>&nbsp;function.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,2,3,4,5], size = 1\n<strong>Output:</strong> [[1],[2],[3],[4],[5]]\n<strong>Explanation:</strong> The arr has been split into subarrays each with 1 element.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [1,9,6,3,2], size = 3\n<strong>Output:</strong> [[1,9,6],[3,2]]\n<strong>Explanation:</strong> The arr has been split into subarrays with 3 elements. However, only two elements are left for the 2nd subarray.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [8,5,3,2,6], size = 6\n<strong>Output:</strong> [[8,5,3,2,6]]\n<strong>Explanation:</strong> Size is greater than arr.length thus all elements are in the first subarray.\n</pre>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> arr = [], size = 1\n<strong>Output:</strong> []\n<strong>Explanation:</strong> There are no elements to be chunked so an empty array is returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>arr</code> is a valid JSON array</li>\n\t<li><code>2 &lt;= JSON.stringify(arr).length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= size &lt;= arr.length + 1</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 3513957,
                "title": "use-slice",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3519210,
                "title": "multiple-approaches-slice-from-chunked-array-full-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis is a very simple question but it wants us to learn some things from the problem such as:\\n\\nJavaScript array methods: The solution utilizes various array methods such as slice, push, and Array.from(). Understanding and leveraging these built-in array methods can greatly simplify array manipulation tasks.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThere are multiple approaches we can take for solving this problem, starting with the most basic one using just a for loop to using different array methods like slice push and from.\\n\\nHere are some of the approaches below:\\n\\n# Code 0\\n\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) => {\\n  const chunkedArray = [];\\n\\n  for (let i = 0; i < arr.length; i += size) {\\n    chunkedArray.push(arr.slice(i, i + size));\\n  }\\n\\n  return chunkedArray;\\n};\\n\\n\\n```\\n\\n# Code 1\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nlet chunk= (arr, size) =>{\\n  const chunkedArray = [];\\n  let index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n}\\n\\n```\\n\\n# Code 2\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) =>\\n  Array.from({ length: Math.ceil(arr.length / size) }, (_, index) =>\\n    arr.slice(index * size, index * size + size)\\n  );\\n\\n\\n```\\n# Code 3\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) => {\\n  return arr.reduce((chunkedArray, element) => {\\n    const lastChunk = chunkedArray[chunkedArray.length - 1];\\n    if (!lastChunk || lastChunk.length === size) {\\n      chunkedArray.push([element]);\\n    } else {\\n      lastChunk.push(element);\\n    }\\n    return chunkedArray;\\n  }, []);\\n};\\n\\n\\n```\\n## Please upvote if you found it useful!!!\\n![image.png](https://assets.leetcode.com/users/images/11eaff66-828d-4fec-bae6-c1749788682a_1683974045.0953019.png)\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) => {\\n  const chunkedArray = [];\\n\\n  for (let i = 0; i < arr.length; i += size) {\\n    chunkedArray.push(arr.slice(i, i + size));\\n  }\\n\\n  return chunkedArray;\\n};\\n\\n\\n```\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nlet chunk= (arr, size) =>{\\n  const chunkedArray = [];\\n  let index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n}\\n\\n```\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) =>\\n  Array.from({ length: Math.ceil(arr.length / size) }, (_, index) =>\\n    arr.slice(index * size, index * size + size)\\n  );\\n\\n\\n```\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) => {\\n  return arr.reduce((chunkedArray, element) => {\\n    const lastChunk = chunkedArray[chunkedArray.length - 1];\\n    if (!lastChunk || lastChunk.length === size) {\\n      chunkedArray.push([element]);\\n    } else {\\n      lastChunk.push(element);\\n    }\\n    return chunkedArray;\\n  }, []);\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3922308,
                "title": "simple-javascript-solution-beats-99-o-n",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    let result = []\\n    for(i=0; i<arr.length; i+=size) {\\n        result.push(arr.slice(i, i+size))\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    let result = []\\n    for(i=0; i<arr.length; i+=size) {\\n        result.push(arr.slice(i, i+size))\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3560409,
                "title": "using-slice-self-explanatory-chunkedarray",
                "content": "### \\u2705\\u2B06\\uFE0F\\u2705\\u2B06\\uFE0F Please Upvote if you find this helpful. \\u2705\\u2B06\\uFE0F\\u2705\\u2B06\\uFE0F\\n\\n1. The `chunk` function takes two parameters: `arr`, which is the original array, and `size`, which represents the desired size of each subarray in the chunked array. The function uses the slice method to extract subarrays from the original array and create a new array of chunked subarrays.\\n\\n2. The function starts by initializing an empty array `chunkedArray` that will store the resulting chunked subarrays. It also initializes the `index` variable to keep track of the current position while slicing the array.\\n\\n3. Inside the while loop, the function repeatedly extracts subarrays from the original array using the slice method. The slice method takes two arguments: `the starting index (inclusive) and the ending index (exclusive)`. By specifying index as the starting index and index + size as the ending index, we extract a subarray of length size from the original array.\\n\\n4. The extracted subarray is then pushed into the `chunkedArray` using the push method. This process continues until the index reaches the end of the array.\\n\\n5. Finally, the function returns the `chunkedArray`, which contains all the subarrays of the desired size extracted from the original array.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  // Initialize an empty array to store the chunked subarrays\\n  var chunkedArray = [];\\n\\n  // Initialize the starting index for slicing the array\\n  var index = 0;\\n\\n  // Iterate over the array until the index reaches the end\\n  while (index < arr.length) {\\n    // Use the slice method to extract a subarray of length \\'size\\' from the original array\\n    // and push it into the chunkedArray\\n    chunkedArray.push(arr.slice(index, index + size));\\n\\n    // Increment the index by the chunk size to move to the next chunk\\n    index += size;\\n  }\\n\\n  // Return the resulting chunked array\\n  return chunkedArray;\\n};\\n\\n\\n```\\n\\n### \\u2705\\u2B06\\uFE0F\\u2705\\u2B06\\uFE0F Please Upvote if you find this helpful. \\u2705\\u2B06\\uFE0F\\u2705\\u2B06\\uFE0F",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  // Initialize an empty array to store the chunked subarrays\\n  var chunkedArray = [];\\n\\n  // Initialize the starting index for slicing the array\\n  var index = 0;\\n\\n  // Iterate over the array until the index reaches the end\\n  while (index < arr.length) {\\n    // Use the slice method to extract a subarray of length \\'size\\' from the original array\\n    // and push it into the chunkedArray\\n    chunkedArray.push(arr.slice(index, index + size));\\n\\n    // Increment the index by the chunk size to move to the next chunk\\n    index += size;\\n  }\\n\\n  // Return the resulting chunked array\\n  return chunkedArray;\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3562314,
                "title": "simple-js-solution-using-slice-explained-beats-98-o-n",
                "content": "# Approach\\nThe ans variable is initialized as an empty array ([]) to store the resulting chunks.\\n\\nInside the loop, **arr.slice(i, i + size)** is used to extract a portion of the input array starting from index i and ending at index i + size - 1. This portion represents a chunk of the desired size.\\n\\nOnce the loop finishes, the ans array containing all the chunks is returned.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  let length = arr.length;\\n  let ans = [];\\n\\n\\n  for (let i = 0; i < length; i += size) {\\n    ans.push(arr.slice(i, i + size));\\n \\xA0 \\n}\\n\\n  return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  let length = arr.length;\\n  let ans = [];\\n\\n\\n  for (let i = 0; i < length; i += size) {\\n    ans.push(arr.slice(i, i + size));\\n \\xA0 \\n}\\n\\n  return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3560734,
                "title": "day-20-o-1-o-1-commented-examples",
                "content": "This code defines a function called `chunk` that takes an array (`arr`) and a size (`size`) as inputs. The purpose of this function is to divide the given array into smaller subarrays of the specified size and return a new array containing these subarrays.\\n\\nHere\\'s a step-by-step explanation of how the code works:\\n\\n1. The function starts by declaring an empty array called `ans`, which will store the resulting subarrays.\\n2. It also initializes a variable called `index` to keep track of the current position in the input array `arr`.\\n3. The function enters a while loop that continues as long as the `index` is less than the length of the input array `arr`.\\n4. Inside the loop, it slices a portion of the input array starting from the `index` and ending at `index + size` (exclusive). The `slice` method is used to create a new subarray without modifying the original array.\\n5. The resulting subarray is then appended to the `ans` array using the `push` method.\\n6. The `index` is incremented by the specified `size`, moving the loop to the next chunk of the input array.\\n7. Once the loop finishes, the function returns the `ans` array containing all the generated subarrays.\\n\\nLet\\'s see a couple of examples to better understand how the `chunk` function works:\\n\\nExample 1:\\n```javascript\\nvar arr = [1, 2, 3, 4, 5];\\nvar size = 2;\\nconsole.log(chunk(arr, size));\\n```\\n\\nOutput:\\n```\\n[[1, 2], [3, 4], [5]]\\n```\\n\\nIn this example, the input array `[1, 2, 3, 4, 5]` is divided into subarrays of size 2. The resulting array `ans` contains three subarrays: `[1, 2]`, `[3, 4]`, and `[5]`.\\n\\nExample 2:\\n```javascript\\nvar arr = [1, 2, 3, 4, 5];\\nvar size = 3;\\nconsole.log(chunk(arr, size));\\n```\\n\\nOutput:\\n```\\n[[1, 2, 3], [4, 5]]\\n```\\n\\nIn this case, the input array `[1, 2, 3, 4, 5]` is divided into subarrays of size 3. The resulting array `ans` contains two subarrays: `[1, 2, 3]` and `[4, 5]`.\\n\\nThe `chunk` function provides a convenient way to split an array into smaller parts, which can be useful in various programming scenarios such as pagination, data processing, or creating batches for parallel processing.\\n\\n***Here is the solution to the current problem:-***\\n\\n\\n```\\n\\nvar chunk = function(arr, size) {\\n  var ans = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    ans.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return ans;\\n}\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```javascript\\nvar arr = [1, 2, 3, 4, 5];\\nvar size = 2;\\nconsole.log(chunk(arr, size));\\n```\n```\\n[[1, 2], [3, 4], [5]]\\n```\n```javascript\\nvar arr = [1, 2, 3, 4, 5];\\nvar size = 3;\\nconsole.log(chunk(arr, size));\\n```\n```\\n[[1, 2, 3], [4, 5]]\\n```\n```\\n\\nvar chunk = function(arr, size) {\\n  var ans = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    ans.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return ans;\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3560488,
                "title": "java-script-solution-for-chunk-array-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the solution is to divide the given array into subarrays of a specified size. If the size is less than or equal to 0 or if the array is empty, an empty array is returned. Otherwise, the array is iterated, and at each step, a slice of the array with the specified size is extracted and added to the chunked array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The solution first handles some edge cases. If the size is less than or equal to 0 or if the array is empty, an empty array is returned.\\n1. An empty chunkedArr array is initialized to store the resulting subarrays.\\n1. The variable i is initialized to 0, representing the starting index for each chunk.\\n1. The solution uses a while loop that continues until i is less than the length of the array.\\n1. In each iteration, a slice of the array from index i to i + size is extracted using the slice method. The resulting subarray is then pushed into the chunkedArr.\\n1. The variable i is incremented by the size to move to the next starting index.\\n1. Finally, the chunkedArr containing the chunked subarrays is returned.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution is O(n), where n is the length of the input array. This is because we iterate over the array once, and the time taken for slicing the array into subarrays is proportional to the length of the array.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(n), where n is the length of the input array. This is because we create a new array to store the chunked subarrays, and in the worst case, the size of this array could be the same as the input array.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  if (size <= 0 || arr.length === 0) {\\n    return [];\\n  }\\n\\n  var chunkedArr = [];\\n  var i = 0;\\n\\n  while (i < arr.length) {\\n    chunkedArr.push(arr.slice(i, i + size));\\n    i += size;\\n  }\\n\\n  return chunkedArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  if (size <= 0 || arr.length === 0) {\\n    return [];\\n  }\\n\\n  var chunkedArr = [];\\n  var i = 0;\\n\\n  while (i < arr.length) {\\n    chunkedArr.push(arr.slice(i, i + size));\\n    i += size;\\n  }\\n\\n  return chunkedArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3530567,
                "title": "easy-detailed-solution-using-slice-in-javascript-faster-then-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n  Extract the chunk from arr and push to chunkArr\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n  \\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N) \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunkArr=[];\\n    for(let i=0;i<arr.length;i++)  \\n    {\\n        chunkArr.push(arr.slice(i,Math.min(i+size,arr.length)));  \\n        i+=size-1;  \\n    }\\n    return chunkArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunkArr=[];\\n    for(let i=0;i<arr.length;i++)  \\n    {\\n        chunkArr.push(arr.slice(i,Math.min(i+size,arr.length)));  \\n        i+=size-1;  \\n    }\\n    return chunkArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3763572,
                "title": "full-explanation-unlike-any-others",
                "content": "# Intuition:\\nThe \"chunk\" problem involves dividing an array into smaller subarrays of a specified size. This is a significant concept in JavaScript, and understanding it thoroughly will be beneficial. So, let\\'s dig in!\\n# Motive:\\nThe purpose of the \"chunk\" problem is to create a function that can take an array and a size parameter as input. The function\\'s objective is to divide the array into smaller subarrays, where each subarray has a maximum size equal to the specified size. This can be useful in various scenarios, such as processing data in smaller chunks or optimizing resource usage.\\n# Approach:\\nTo tackle the \"chunk\" problem, we can follow a step-by-step approach:\\n\\n1. Start by initializing two variables:\\n   - \"resArr\" as an empty array, which will store the resulting subarrays.\\n   - \"tempArr\" as an empty array, which will temporarily hold elements before pushing them into \"resArr\".\\n\\n2. Next, we need to iterate over each element in the input array \"arr\". We can accomplish this using a for loop.\\n   - Set the loop\\'s initial condition to \"let i = 0\".\\n   - Continue the loop as long as \"i\" is less than the length of \"arr\" (i < arr.length).\\n   - Increment \"i\" by 1 in each iteration (i++).\\n\\n3. Inside the loop, we can push the current element of \"arr\" into \"tempArr\" using the statement \"tempArr.push(arr[i])\".\\n\\n4. After adding an element to \"tempArr\", we need to check if its length has reached the specified size.\\n   - If the length of \"tempArr\" is equal to the specified size, it means we have accumulated enough elements for a subarray.\\n   - In that case, we can push the contents of \"tempArr\" into \"resArr\" using the statement \"resArr.push(tempArr)\".\\n   - After pushing the elements, we reset \"tempArr\" to an empty array using \"tempArr = []\" to prepare it for the next subarray.\\n\\n5. Once we have iterated over all elements in \"arr\" and checked for the last subarray, we need to handle any remaining elements in \"tempArr\".\\n   - If \"tempArr\" still contains elements, it means they have not been pushed into \"resArr\" because they didn\\'t fill a complete subarray.\\n   - In this case, we can push the remaining elements of \"tempArr\" into \"resArr\" using \"resArr.push(tempArr)\".\\n\\n6. Finally, outside the loop, we can return the resulting array \"resArr\" as the output of our function.\\n\\nBy following this step-by-step approach, we can successfully divide the input array into smaller subarrays based on the specified size.\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = function(arr, size) {\\n    let full_size = arr.length ;\\n    let resArr = [], temp = [];\\n    \\n    for(let i=0; i< full_size ; i++){ //iterate over arr\\n        temp.push(arr[i]); //push element into the temporary array\\n\\n        if(temp.length == size){\\n            resArr.push(temp);\\n            temp = []; //reset array into an empty array//\\n        }\\n    }\\n\\n    if(temp.length){ // if any elements are left theyre pushed regardless of the size//\\n        resArr.push(temp);\\n    }\\n\\n    return resArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = function(arr, size) {\\n    let full_size = arr.length ;\\n    let resArr = [], temp = [];\\n    \\n    for(let i=0; i< full_size ; i++){ //iterate over arr\\n        temp.push(arr[i]); //push element into the temporary array\\n\\n        if(temp.length == size){\\n            resArr.push(temp);\\n            temp = []; //reset array into an empty array//\\n        }\\n    }\\n\\n    if(temp.length){ // if any elements are left theyre pushed regardless of the size//\\n        resArr.push(temp);\\n    }\\n\\n    return resArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3587037,
                "title": "short-recursion-solution",
                "content": "Recursion, recursion and more recursion\\n\\n![recursion.jpeg](https://assets.leetcode.com/users/images/5865d277-14cd-4009-8720-dd861b7d392c_1685644531.5174088.jpeg)\\n\\n# Code\\n```\\nchunk=f=(a,n,r=[],i=0)=>\\n    a.length-i? \\n        ((r[i/n|0]=r[i/n|0]??[])[i%n]=a[i++],f(a,n,r,i))\\n    :r\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nchunk=f=(a,n,r=[],i=0)=>\\n    a.length-i? \\n        ((r[i/n|0]=r[i/n|0]??[])[i%n]=a[i++],f(a,n,r,i))\\n    :r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3560295,
                "title": "very-easy-no-reduce-slice-beginner-friendly-full-explanation",
                "content": "# Intuition\\nYou are returning an array of subarrays. So, we should build up a subarray until the subarray is of length ```size```, then push that subarray to the main array. Repeat.\\n\\n# Approach\\n1. Create array ```answer``` (array being returned) and array ```cur``` (subarray variable)\\n2. Iterate through ```arr``` until ```cur``` is of length ```size```\\n3. Push subarray ```cur``` to ```answer```, reset ```cur``` to an empty array so we can create the next subarray\\n4. Repeat steps 2 & 3 until iterated throughout all of ```arr```\\n5. If ```cur``` is not empty, we did not push the subarray we have been building. Since the problem wants us to push the remainding items of ```arr```, we push what we got in ```cur```\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var answer = [];\\n    var cur = [];\\n\\n    // iterate through arr\\n    for (var i = 0; i < arr.length; ++i) {\\n        cur.push(arr[i]);\\n\\n        // if subarray is of length size, push our subarray\\n        if (cur.length === size) {\\n            answer.push(cur);\\n            cur = [];\\n        }\\n    }\\n    // if we haven\\'t pushed everything from arr, push them (aka push cur)\\n    if (cur.length !== 0) answer.push(cur);\\n\\n    return answer;\\n};\\n```\\nUPVOTE if this was helpful \\uD83C\\uDF5E\\uD83C\\uDF5E\\uD83C\\uDF5E",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```size```\n```answer```\n```cur```\n```arr```\n```cur```\n```size```\n```cur```\n```answer```\n```cur```\n```arr```\n```cur```\n```arr```\n```cur```\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var answer = [];\\n    var cur = [];\\n\\n    // iterate through arr\\n    for (var i = 0; i < arr.length; ++i) {\\n        cur.push(arr[i]);\\n\\n        // if subarray is of length size, push our subarray\\n        if (cur.length === size) {\\n            answer.push(cur);\\n            cur = [];\\n        }\\n    }\\n    // if we haven\\'t pushed everything from arr, push them (aka push cur)\\n    if (cur.length !== 0) answer.push(cur);\\n\\n    return answer;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3542715,
                "title": "90-faster-typescript-solution",
                "content": "# Code\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const ans = [];\\n\\n    while (arr.length > 0)\\n        ans.push(arr.splice(0, size));\\n\\n    return ans;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const ans = [];\\n\\n    while (arr.length > 0)\\n        ans.push(arr.splice(0, size));\\n\\n    return ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3520410,
                "title": "easy-solution-without-slice",
                "content": "```js\\nconst chunk = (arr, size) => {\\n  const result = [];\\n  let curr = []; // Current chunk\\n\\n  for (const num of arr) {\\n    if (curr.length === size) {\\n      result.push(curr);\\n      curr = [];\\n    }\\n    curr.push(num)\\n  }\\n\\n  if (curr.length) result.push(curr); // Check for any leftovers in current chunk\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst chunk = (arr, size) => {\\n  const result = [];\\n  let curr = []; // Current chunk\\n\\n  for (const num of arr) {\\n    if (curr.length === size) {\\n      result.push(curr);\\n      curr = [];\\n    }\\n    curr.push(num)\\n  }\\n\\n  if (curr.length) result.push(curr); // Check for any leftovers in current chunk\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3513966,
                "title": "js-with-reduce",
                "content": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    return arr.reduce((acc, cur, index) => {\\n        if (index % size === 0) {\\n            acc.push([cur]);\\n        } else {\\n            acc.at(-1).push(cur);\\n        }\\n        return acc;\\n    }, []);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    return arr.reduce((acc, cur, index) => {\\n        if (index % size === 0) {\\n            acc.push([cur]);\\n        } else {\\n            acc.at(-1).push(cur);\\n        }\\n        return acc;\\n    }, []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3842086,
                "title": "super-easy-solution-only-using-while-loop-array-push-self-explanatory",
                "content": "# **Intuition:**\\nThe \"chunk\" problem involves dividing an array into smaller subarrays of a specified size. This is a significant concept in JavaScript, and understanding it thoroughly will be beneficial. So, let\\'s dig in!\\n\\n# Motive:\\nThe purpose of the \"chunk\" problem is to create a function that can take an array and a size parameter as input. The function\\'s objective is to divide the array into smaller subarrays, where each subarray has a maximum size equal to the specified size. This can be useful in various scenarios, such as processing data in smaller chunks or optimizing resource usage.\\n\\n# Approach:\\nTo tackle the \"chunk\" problem, we can follow a step-by-step approach:\\n\\nStart by initializing two variables:\\n\\n\"chunkedArray\" as an empty array, which will store the resulting subarrays.\\n\"i\" as an pointer, which will iterate over elements before pushing them into \"tempArr\".\\nNext, we need to iterate over each element in the input array \"arr\". We can accomplish this using while loop and i.\\n\\nContinue the loop as long as \"i\" is less than the length of \"arr\" (i < arr.length).\\nIncrement \"i\" by 1 in each iteration (i++).\\nInside the loop, we can push the current element of \"arr\" into \"tempArr\" using the statement \"tempArr.push(arr[i])\".\\n\\nAfter adding an element to \"tempArr\", we need to check if its length has reached the specified size.\\nwe do this using count variable when count will be equal to specified size we wont enter the while loop again . \\n\\nIf the length of \"tempArr\" is equal to the specified size, it means we have accumulated enough elements for a subarray.\\nIn that case, we can push the contents of \"tempArr\" into \"chunkedArr\" using the statement \"chunkedArr.push(tempArr)\".\\nthen the process repeats for the next iteration of the outer while loop.\\nAfter pushing the elements, we reset \"tempArr\" to an empty array using \"tempArr = []\" to prepare it for the next subarray.\\n\\nFinally, outside the loop, we can return the resulting array \"resArr\" as the output of our function.\\n\\nBy following this step-by-step approach, we can successfully divide the input array into smaller subarrays based on the specified size.\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\nconst chunkedArr = [];\\nlet i=0;\\nwhile(i<arr.length){\\ncount =0;\\nlet temparr =[];\\nwhile(count<size&&i<arr.length){\\n    temparr.push(arr[i]);\\n    i++;\\n    count++;\\n}\\nchunkedArr.push(temparr);\\n}\\nreturn chunkedArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\nconst chunkedArr = [];\\nlet i=0;\\nwhile(i<arr.length){\\ncount =0;\\nlet temparr =[];\\nwhile(count<size&&i<arr.length){\\n    temparr.push(arr[i]);\\n    i++;\\n    count++;\\n}\\nchunkedArr.push(temparr);\\n}\\nreturn chunkedArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3647143,
                "title": "javascript-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let resArr = [], tempArr = [];\\n    \\n    for(let i=0; i<arr.length; i++){\\n        tempArr.push(arr[i]);\\n\\n        if(tempArr.length == size){\\n            resArr.push(tempArr);\\n            tempArr = [];\\n        }\\n    }\\n\\n    if(tempArr.length){\\n        resArr.push(tempArr);\\n    }\\n\\n    return resArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let resArr = [], tempArr = [];\\n    \\n    for(let i=0; i<arr.length; i++){\\n        tempArr.push(arr[i]);\\n\\n        if(tempArr.length == size){\\n            resArr.push(tempArr);\\n            tempArr = [];\\n        }\\n    }\\n\\n    if(tempArr.length){\\n        resArr.push(tempArr);\\n    }\\n\\n    return resArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3561797,
                "title": "using-slice-and-push-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    let index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    let index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3560534,
                "title": "easy-solution-using-for-loop",
                "content": "# Code\\n```\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    const length = arr.length;\\n    for(let i=0;i<length;){\\n      const subarray = [];\\n      let j = 0;\\n      for(j=0;j<size && j + i < length;j++){\\n        subarray.push(arr[j+i]);\\n      }\\n      i += j;\\n      result.push(subarray);\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    const length = arr.length;\\n    for(let i=0;i<length;){\\n      const subarray = [];\\n      let j = 0;\\n      for(j=0;j<size && j + i < length;j++){\\n        subarray.push(arr[j+i]);\\n      }\\n      i += j;\\n      result.push(subarray);\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3542762,
                "title": "when-in-doubt-reduce",
                "content": "\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    return arr.reduce((a, c, i) => {\\n        let tempA = [...a]\\n        if(i % size === 0){\\n            tempA.push([c])\\n        } else {\\n            tempA[tempA.length - 1].push(c)\\n        }\\n        return tempA\\n    }, [])\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    return arr.reduce((a, c, i) => {\\n        let tempA = [...a]\\n        if(i % size === 0){\\n            tempA.push([c])\\n        } else {\\n            tempA[tempA.length - 1].push(c)\\n        }\\n        return tempA\\n    }, [])\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3520676,
                "title": "very-simple-and-easy-solution-in-javascript-wow-0-0-you-must-watch-it",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    if(arr.length == 0) return []\\n    if(size > arr.length) return [arr]\\n    let count = 0, subArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        count++\\n        subArr.push(arr[i])\\n        if(count == size || i == arr.length - 1) {\\n            count = 0\\n            result.push(subArr)\\n            subArr = []\\n        }\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    if(arr.length == 0) return []\\n    if(size > arr.length) return [arr]\\n    let count = 0, subArr = []\\n    for(let i = 0; i < arr.length; i++) {\\n        count++\\n        subArr.push(arr[i])\\n        if(count == size || i == arr.length - 1) {\\n            count = 0\\n            result.push(subArr)\\n            subArr = []\\n        }\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3516548,
                "title": "fast-beginner-friendly-code",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514962,
                "title": "2-optimal-clean-code-approach-easy-explanation-meme-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nChunking an array means dividing it into smaller subarrays of a specific size. This problem asks us to create a chunked array from a given array and chunk size. We need to ensure that each subarray contains the original elements from the array, except for the last subarray, which may be smaller if the array\\'s length is not evenly divisible by the chunk size.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo solve this problem, we can use a simple approach that involves iterating over the original array and creating subarrays of the desired size.\\n\\n- Create an empty result array to store the chunked subarrays.\\n- Iterate through the original array.\\n- For each iteration, create a new subarray.\\n- Add elements to the subarray until its length reaches the chunk size or - we run out of elements in the original array.\\n- Push the subarray into the result array.\\n- Repeat steps 3-5 until we have processed all elements in the original array.\\n- Return the result array containing the chunked subarrays.\\n\\n\\n\\n```\\n// Here is the code for the greedy algorithm\\nvar chunk = function(arr, size) {\\n  const chunkArrays = [];\\n  let currentChunkArray = [];\\n  for (const element of arr) {\\n    currentChunkArray.push(element);\\n    if (currentChunkArray.length === size) {\\n      chunkArrays.push(currentChunkArray);\\n      currentChunkArray = [];\\n    }\\n  }\\n  if (currentChunkArray.length) {\\n    chunkArrays.push(currentChunkArray);\\n  }\\n  return chunkArrays;\\n}\\n```\\n\\n# Complexity\\n\\n- Time complexity is $$O(n)$$, where n is the number of elements in the original array. We iterate through each element once to create the chunked subarrays. \\n- Space complexity is also $$O(n)$$ because we create a new array to store the chunked subarrays.\\n\\n# Optimal Clean Code\\n``` Javascript []\\nvar chunk = function(arr, size) {\\n    let chunkArray = [];\\n    for (let i = 0; arr.length > i ; i+=size ){\\n        chunkArray.push(arr.slice(i,i+size))\\n    }\\n    return chunkArray;\\n};\\n```\\n\\n``` Typescript []\\nfunction chunk(arr: any[], size: number): any[][] {\\nlet chunkArray = [];\\n    for (let i = 0; arr.length > i ; i+=size ){\\n        chunkArray.push(arr.slice(i,i+size))\\n    }\\n    return chunkArray;\\n};\\n```\\n\\n# Meme\\n![supermeme_11h33_53.gif](https://assets.leetcode.com/users/images/8bdda3e0-62c3-4820-a80d-f43db9108f8f_1683871472.1904438.gif)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Here is the code for the greedy algorithm\\nvar chunk = function(arr, size) {\\n  const chunkArrays = [];\\n  let currentChunkArray = [];\\n  for (const element of arr) {\\n    currentChunkArray.push(element);\\n    if (currentChunkArray.length === size) {\\n      chunkArrays.push(currentChunkArray);\\n      currentChunkArray = [];\\n    }\\n  }\\n  if (currentChunkArray.length) {\\n    chunkArrays.push(currentChunkArray);\\n  }\\n  return chunkArrays;\\n}\\n```\n``` Javascript []\\nvar chunk = function(arr, size) {\\n    let chunkArray = [];\\n    for (let i = 0; arr.length > i ; i+=size ){\\n        chunkArray.push(arr.slice(i,i+size))\\n    }\\n    return chunkArray;\\n};\\n```\n``` Typescript []\\nfunction chunk(arr: any[], size: number): any[][] {\\nlet chunkArray = [];\\n    for (let i = 0; arr.length > i ; i+=size ){\\n        chunkArray.push(arr.slice(i,i+size))\\n    }\\n    return chunkArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514625,
                "title": "javascript-slice-brute-force",
                "content": "#### using slice() method\\n\\n``` js\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    let i=0;\\n    while(i<arr.length){\\n        chunkedArray.push(arr.slice(i,i+size));\\n        i=i+size;\\n    }\\n    return chunkedArray;\\n};\\n```\\n\\n#### Brute force\\n``` js\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    let i=0;\\n    while(i<arr.length){\\n        let len = size;\\n        const temp = [];\\n        while(len-->0 && i<arr.length){\\n            temp.push(arr[i]);\\n            i++;\\n        }\\n        chunkedArray.push(a);\\n    }\\n    return chunkedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` js\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    let i=0;\\n    while(i<arr.length){\\n        chunkedArray.push(arr.slice(i,i+size));\\n        i=i+size;\\n    }\\n    return chunkedArray;\\n};\\n```\n``` js\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    let i=0;\\n    while(i<arr.length){\\n        let len = size;\\n        const temp = [];\\n        while(len-->0 && i<arr.length){\\n            temp.push(arr[i]);\\n            i++;\\n        }\\n        chunkedArray.push(a);\\n    }\\n    return chunkedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3514169,
                "title": "javascript-solution",
                "content": "\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans=[];\\n    let temp=[];\\n    for (let i=0; i<arr.length;i++ ){\\n        temp.push(arr[i]);\\n        if(temp.length==size){\\n            ans.push(temp);\\n            temp=[];\\n\\n        }\\n    }\\n    if (temp.length>0) ans.push(temp);\\n    return ans;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans=[];\\n    let temp=[];\\n    for (let i=0; i<arr.length;i++ ){\\n        temp.push(arr[i]);\\n        if(temp.length==size){\\n            ans.push(temp);\\n            temp=[];\\n\\n        }\\n    }\\n    if (temp.length>0) ans.push(temp);\\n    return ans;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3650971,
                "title": "very-clean",
                "content": "\\n\\n# Code\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const chunk: any[][] = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        chunk.push(arr.slice(i, i + size));\\n        i += size - 1;\\n    }\\n\\n    return chunk;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const chunk: any[][] = [];\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        chunk.push(arr.slice(i, i + size));\\n        i += size - 1;\\n    }\\n\\n    return chunk;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3565219,
                "title": "easy-approach",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nfunction chunk(inputArray, chunkSize) {\\n  const chunks = [];\\n  for (let i = 0; i < inputArray.length; i += chunkSize) {\\n    const chunk = [];\\n    for (let j = i; j < Math.min(i + chunkSize, inputArray.length); j++) {\\n      chunk.push(inputArray[j]);\\n    }\\n    chunks.push(chunk);\\n  }\\n  return chunks;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nfunction chunk(inputArray, chunkSize) {\\n  const chunks = [];\\n  for (let i = 0; i < inputArray.length; i += chunkSize) {\\n    const chunk = [];\\n    for (let j = i; j < Math.min(i + chunkSize, inputArray.length); j++) {\\n      chunk.push(inputArray[j]);\\n    }\\n    chunks.push(chunk);\\n  }\\n  return chunks;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3564416,
                "title": "javascript-array-reduce-array-from",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nvar chunk = function(arr, size) {\\n    return Array.from({ length: Math.ceil(arr.length / size) },\\n        (_, i) => arr.slice(i * size, (i + 1) * size));\\n};\\n```\\n```\\nvar chunk = function(arr, size) {\\n    return arr.reduce((acc, cur) => {\\n        if (acc.length == 0 || acc.at(-1).length == size) acc.push([]);\\n        acc.at(-1).push(cur);\\n        return acc;\\n    }, []);\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    return Array.from({ length: Math.ceil(arr.length / size) },\\n        (_, i) => arr.slice(i * size, (i + 1) * size));\\n};\\n```\n```\\nvar chunk = function(arr, size) {\\n    return arr.reduce((acc, cur) => {\\n        if (acc.length == 0 || acc.at(-1).length == size) acc.push([]);\\n        acc.at(-1).push(cur);\\n        return acc;\\n    }, []);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3562505,
                "title": "ts-from-loop-to-one-liner-56ms-44-8mb",
                "content": "Rather trivial problem, we will solve it the first time with just a loop.\\n\\nAfter declaring our usual result variable `res` as an empty array, we will loop with `i` from `0` up to the length `len` of `arr` and:\\n* create a new slice of `arr` from `i` to `i + k`;\\n* insert it in `res`;\\n* increase `i` by `k`.\\n\\nOnce done, we can `return` `res`.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```ts\\nconst chunk = (arr: any[], k: number): any[][] => {\\n    // support variables\\n    const res = [];\\n    // parsing arr\\n    for (let i = 0, len = arr.length; i < len;) res.push(arr.slice(i, i += k));\\n    return res;\\n};\\n```\\n\\nSame logic, a bit hackier to keep it as a one-liner:\\n* we will use the trick of adding one extra parameter not to have to declare an extra variable on a separate line, so `i` will be there, defaulted to `0`;\\n* thanks to `Array.from()` we can create a \"fictitious\" object with only a property, `length`, that will be equal to the amount of chunks we need to create (the ceiling of the division of the number of elements in `arr`, divided by `k`), to iterate through it;\\n* `Array.from()` also take a second parameter that is an optional mapping function - we will use it to create chunks similar to the logic used in the above solution and directly `return` that.\\n\\n```ts\\nconst chunk = (arr: any[], k: number, i: number = 0): any[][] => {\\n    return Array.from({length: Math.ceil(arr.length / k)}, () => arr.slice(i, i += k));\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array"
                ],
                "code": "```ts\\nconst chunk = (arr: any[], k: number): any[][] => {\\n    // support variables\\n    const res = [];\\n    // parsing arr\\n    for (let i = 0, len = arr.length; i < len;) res.push(arr.slice(i, i += k));\\n    return res;\\n};\\n```\n```ts\\nconst chunk = (arr: any[], k: number, i: number = 0): any[][] => {\\n    return Array.from({length: Math.ceil(arr.length / k)}, () => arr.slice(i, i += k));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3560375,
                "title": "more-effective-optimized-javascript-solution",
                "content": "# Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n  return chunkedArray;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n  return chunkedArray;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3519741,
                "title": "js-easy-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(size)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const result = []\\n    for(i = 0;i<arr.length;i+=size){\\n        result.push(arr.slice(i, Math.min(arr.length, i+size)))\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const result = []\\n    for(i = 0;i<arr.length;i+=size){\\n        result.push(arr.slice(i, Math.min(arr.length, i+size)))\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3515551,
                "title": "simple-beginner-solution-explained",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nWe can use the native `Array.slice()` method to create chunked arrays out of the original one. Slice takes as parameters a starting index and an ending index to create a subarray.\\n\\nSince we want chunked arrays of size `size`, we iterate through `arr`, and every time we create a chunked array of starting index `i `and end index `i + size`, we increment `i` by `size` and repeat the process. Each time a chunked array is created, we push it to `result`, and in the end, we return `result`.\\n\\n# Complexity\\n- Time complexity: O(n2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n\\n    for (let i = 0; i < arr.length; i += size) {\\n        let subArr = arr.slice(i, i + size);\\n        result.push(subArr);\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n\\n    for (let i = 0; i < arr.length; i += size) {\\n        let subArr = arr.slice(i, i + size);\\n        result.push(subArr);\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3515295,
                "title": "beats-100-easy-solution",
                "content": "# Intuition\\nSplitting an array into chunks of a given size.\\n\\n# Approach\\nIterate over the array, creating a temporary array for each chunk of the desired size. Append the temporary arrays to the result array.\\n\\n# Complexity\\n- Time complexity: O(n), where n is the length of the input array.\\n- Space complexity: O(n), where n is the length of the input array.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans = new Array();\\n    const n = arr.length;\\n\\n    for(let i=0; i<n; i+=size){\\n        let tmp = new Array();\\n        for(let j=i; j<i+size; ++j){\\n            if(j>=n) break;\\n            tmp.push(arr[j]);\\n        }\\n        ans.push(tmp);\\n    }\\n    return ans;\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans = new Array();\\n    const n = arr.length;\\n\\n    for(let i=0; i<n; i+=size){\\n        let tmp = new Array();\\n        for(let j=i; j<i+size; ++j){\\n            if(j>=n) break;\\n            tmp.push(arr[j]);\\n        }\\n        ans.push(tmp);\\n    }\\n    return ans;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4099484,
                "title": "chunk-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThere are two arguments, one is the array and two is the size. When size is fixed, we can solve it with a single loop.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nRun through the array and when the (index + 1) is multiple of \\'size\\', create a new chunk and push it to the main array. Few edge cases are covered with conditionals.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ as only one loop and push is of $$O(1)$$.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$ since we have used two one dimensional array only. Out of that the chunk array is of fixed size. Hence, $$O(n + k) = O(n)$$, where k is constant.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let outputArr = [];\\n    let chunkArr = [];\\n    if(arr.length < 1){\\n        return [];\\n    }\\n    if (size > arr.length){\\n        outputArr = [arr];\\n        return outputArr;\\n    }\\n\\tfor(let i = 0; i < arr.length; i++){\\n        if (size === 1){\\n            outputArr.push([arr[i]]);\\n        } else {\\n            chunkArr.push(arr[i]);\\n            if (((i+1) % size) == 0){\\n                outputArr.push([...chunkArr]);\\n                chunkArr = [];\\n            } else if (arr.length - 1 === i){\\n                outputArr.push(chunkArr);\\n            }\\n        }\\n    }\\n    return outputArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let outputArr = [];\\n    let chunkArr = [];\\n    if(arr.length < 1){\\n        return [];\\n    }\\n    if (size > arr.length){\\n        outputArr = [arr];\\n        return outputArr;\\n    }\\n\\tfor(let i = 0; i < arr.length; i++){\\n        if (size === 1){\\n            outputArr.push([arr[i]]);\\n        } else {\\n            chunkArr.push(arr[i]);\\n            if (((i+1) % size) == 0){\\n                outputArr.push([...chunkArr]);\\n                chunkArr = [];\\n            } else if (arr.length - 1 === i){\\n                outputArr.push(chunkArr);\\n            }\\n        }\\n    }\\n    return outputArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098083,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    let array = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (array.length === size) {\\n            result.push(array);\\n            array = [];\\n            array.push(arr[i]);\\n        } else {\\n        array.push(arr[i])\\n        console.log(i)\\n        if (array.length === size) {\\n            result.push(array);\\n            array = [];\\n        }\\n        else if (i === arr.length - 1) {\\n        result.push(array);\\n        array = [];\\n        }\\n        }\\n    }\\n    return result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    let array = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        if (array.length === size) {\\n            result.push(array);\\n            array = [];\\n            array.push(arr[i]);\\n        } else {\\n        array.push(arr[i])\\n        console.log(i)\\n        if (array.length === size) {\\n            result.push(array);\\n            array = [];\\n        }\\n        else if (i === arr.length - 1) {\\n        result.push(array);\\n        array = [];\\n        }\\n        }\\n    }\\n    return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086090,
                "title": "easy-solution-using-slice-method-of-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n  if (size <= 0) {\\n    return [];\\n  }\\n\\n  var chunkedArr = [];\\n  var i = 0;\\n\\n  while (i < arr.length) {\\n    chunkedArr.push(arr.slice(i, i + size));\\n    i += size;\\n  }\\n\\n  return chunkedArr;\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n  if (size <= 0) {\\n    return [];\\n  }\\n\\n  var chunkedArr = [];\\n  var i = 0;\\n\\n  while (i < arr.length) {\\n    chunkedArr.push(arr.slice(i, i + size));\\n    i += size;\\n  }\\n\\n  return chunkedArr;\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086049,
                "title": "using-array-prototype-slice",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    const resArr=[]\\n    for(let i=0;i<arr.length;i+=size){\\n    \\tresArr.push(arr.slice(i,size+i))\\n    }\\n    return resArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    const resArr=[]\\n    for(let i=0;i<arr.length;i+=size){\\n    \\tresArr.push(arr.slice(i,size+i))\\n    }\\n    return resArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085290,
                "title": "js-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    return arr.reduce((acc,num) =>{\\n        const n = acc.length;\\n        if(n === 0) return [[num]];\\n        if(acc[n-1].length < size){\\n            acc[n-1].push(num);\\n        }\\n        else{\\n            acc.push([num]);\\n        }\\n        return acc;\\n    } ,[])\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    return arr.reduce((acc,num) =>{\\n        const n = acc.length;\\n        if(n === 0) return [[num]];\\n        if(acc[n-1].length < size){\\n            acc[n-1].push(num);\\n        }\\n        else{\\n            acc.push([num]);\\n        }\\n        return acc;\\n    } ,[])\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080883,
                "title": "using-slice-and-for-loop-to-push-into-records-into-new-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nusing slice and for loop to push into records into new array\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nusing slice and for loop to push into records into new array\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n0\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let newarr=[];\\n    for(i=0;i<arr.length;){\\n        newarr.push(arr.slice(i,i+size));\\n        i += size;\\n    }\\n    return newarr;\\n};\\n\\n```\\n\\nanother approach\\n#code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let newarr=[];\\n    for(i=0;i<arr.length;\\xEC+=size){\\n        newarr.push(arr.slice(i,i+size));\\n    }\\n    return newarr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let newarr=[];\\n    for(i=0;i<arr.length;){\\n        newarr.push(arr.slice(i,i+size));\\n        i += size;\\n    }\\n    return newarr;\\n};\\n\\n```\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let newarr=[];\\n    for(i=0;i<arr.length;\\xEC+=size){\\n        newarr.push(arr.slice(i,i+size));\\n    }\\n    return newarr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080238,
                "title": "2677-chunk-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n     let result = [];\\n\\n    if(arr.length === 0 ) return result;\\n\\n    if (arr.length < size) {\\n        result.push(arr);\\n\\n        return result;\\n    }\\n\\n\\n    for (let i = 0; i < arr.length; i = i + size) {\\n        result.push(arr.slice(i, i + size));\\n    }\\n\\n\\n    return result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n     let result = [];\\n\\n    if(arr.length === 0 ) return result;\\n\\n    if (arr.length < size) {\\n        result.push(arr);\\n\\n        return result;\\n    }\\n\\n\\n    for (let i = 0; i < arr.length; i = i + size) {\\n        result.push(arr.slice(i, i + size));\\n    }\\n\\n\\n    return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080235,
                "title": "2677-chunk-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n     let result = [];\\n\\n    if(arr.length === 0 ) return result;\\n\\n    if (arr.length < size) {\\n        result.push(arr);\\n\\n        return result;\\n    }\\n\\n\\n    for (let i = 0; i < arr.length; i = i + size) {\\n        const tmp = arr.slice(i, i + size);\\n        \\n        result.push(tmp);\\n    }\\n\\n\\n    return result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n     let result = [];\\n\\n    if(arr.length === 0 ) return result;\\n\\n    if (arr.length < size) {\\n        result.push(arr);\\n\\n        return result;\\n    }\\n\\n\\n    for (let i = 0; i < arr.length; i = i + size) {\\n        const tmp = arr.slice(i, i + size);\\n        \\n        result.push(tmp);\\n    }\\n\\n\\n    return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072977,
                "title": "solution-using-splice-o-n-with-and-without-using-inbuilt-methods",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nwe have to divide the array based on the size and incrementally we have to split the remaining elements.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Splice in javascript helps to split the elements in the array based on the index\\'s \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\nWay 1:  \\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n \\nlet temp=[];\\n\\nfor(let i=0;i<arr.length;){\\n temp.push(arr.splice(i,size))\\n}\\n\\nreturn temp\\n};\\n\\n```\\n\\n\\n```\\nWay 2:\\n\\n var chunk = function(arr, size) {\\n\\n// let arr = [11,22,53,94,65]; \\n let temp=[],newArr=[];\\n // let size=2;\\n for(let i=0;i<arr.length;i=i+size){  \\n\\n // console.log(\\'i value\\' , i )\\n for(let j=i;j<i+size && arr[j]!=undefined;j=j+1){\\n //   console.log(\\'j value\\',arr[j])\\n temp.push(arr[j])\\n }\\n // size=size+size\\n newArr.push(temp)\\n temp=[]\\n // console.log(\\'====================\\')\\n }\\n // console.log(newArr)\\n return newArr\\n };\\n\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n \\nlet temp=[];\\n\\nfor(let i=0;i<arr.length;){\\n temp.push(arr.splice(i,size))\\n}\\n\\nreturn temp\\n};\\n\\n```\n```\\nWay 2:\\n\\n var chunk = function(arr, size) {\\n\\n// let arr = [11,22,53,94,65]; \\n let temp=[],newArr=[];\\n // let size=2;\\n for(let i=0;i<arr.length;i=i+size){  \\n\\n // console.log(\\'i value\\' , i )\\n for(let j=i;j<i+size && arr[j]!=undefined;j=j+1){\\n //   console.log(\\'j value\\',arr[j])\\n temp.push(arr[j])\\n }\\n // size=size+size\\n newArr.push(temp)\\n temp=[]\\n // console.log(\\'====================\\')\\n }\\n // console.log(newArr)\\n return newArr\\n };\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067252,
                "title": "using-slice",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nInside the loop, using the arr.slice(i, i+size) operation to create a subarray of arr of size size. The slice method creates a new array, and it takes O(size) time to copy the elements.\\n\\nThe loop\\'s time complexity is O(arr.length / size).\\n\\nO(arr.length / size) * O(size) = O(arr.length) i.e O(n)\\n\\n- Space complexity:\\nO(n), where n is the length of the input array arr.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    if(size !== Math.trunc(size) && isNaN(size)) return -1;\\n    let result =  [];\\n    for(let i = 0; i < arr.length; i += size){\\n        result.push(arr.slice(i, i+size)) \\n    }\\n    return result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    if(size !== Math.trunc(size) && isNaN(size)) return -1;\\n    let result =  [];\\n    for(let i = 0; i < arr.length; i += size){\\n        result.push(arr.slice(i, i+size)) \\n    }\\n    return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066761,
                "title": "simple-easy-to-understand-javascript-solution-beats-99-03",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let start = 0, res = [];\\n    for (let j = 0; j < arr.length; j += size) {\\n        let end = j + size;\\n        res.push((end > arr.length) ? arr.slice(start) : arr.slice(start, end));\\n        start = end;\\n    }\\n    return res;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let start = 0, res = [];\\n    for (let j = 0; j < arr.length; j += size) {\\n        let end = j + size;\\n        res.push((end > arr.length) ? arr.slice(start) : arr.slice(start, end));\\n        start = end;\\n    }\\n    return res;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065361,
                "title": "simple-solution-in-js-ts",
                "content": "# Code\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let arrLength = arr.length;\\n    let result = [];\\n    \\n    for (let i = 0; i < arrLength; i++) {\\n        if (arr.length) {\\n            result[i] = arr.slice(0, size);   \\n            arr = arr.slice(size);\\n        }\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let arrLength = arr.length;\\n    let result = [];\\n    \\n    for (let i = 0; i < arrLength; i++) {\\n        if (arr.length) {\\n            result[i] = arr.slice(0, size);   \\n            arr = arr.slice(size);\\n        }\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061900,
                "title": "javascript-easy-solutution-slice-93",
                "content": "# 2677. Chunk Array\\n\\n## Code\\n```\\nvar chunk = function(arr, size) {\\n    \\n    let chunkedArr = [],\\n        i = 0;\\n    \\n    while (i < arr.length) {\\n        chunkedArr.push(arr.slice(i, i+size));\\n        i += size;\\n    }\\n\\n    return chunkedArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    \\n    let chunkedArr = [],\\n        i = 0;\\n    \\n    while (i < arr.length) {\\n        chunkedArr.push(arr.slice(i, i+size));\\n        i += size;\\n    }\\n\\n    return chunkedArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4052990,
                "title": "js-easy-solution",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let res = []\\n    let index = 0\\n\\n    while (index < arr.length) {\\n      res.push(arr.slice(index, index + size))\\n      index += size\\n    }\\n\\n    return res\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let res = []\\n    let index = 0\\n\\n    while (index < arr.length) {\\n      res.push(arr.slice(index, index + size))\\n      index += size\\n    }\\n\\n    return res\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051992,
                "title": "best-of-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    for(i=0; i<arr.length; i+=size) {\\n        result.push(arr.slice(i, i+size))\\n    }\\n    return result\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    for(i=0; i<arr.length; i+=size) {\\n        result.push(arr.slice(i, i+size))\\n    }\\n    return result\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049699,
                "title": "with-array-slice",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let result =[]\\n    if(arr.length > 0){\\n        for(index = 0; index < arr.length ; index=index+size)\\n    {\\n        result.push(arr.slice(index, index+size))\\n    }\\n    return result\\n    }\\n    return arr\\n    \\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let result =[]\\n    if(arr.length > 0){\\n        for(index = 0; index < arr.length ; index=index+size)\\n    {\\n        result.push(arr.slice(index, index+size))\\n    }\\n    return result\\n    }\\n    return arr\\n    \\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049153,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let s = []\\n    let s2 = []\\n    for(let a = 0; a<arr.length; a++){\\ns.push(arr[a])\\nif(s.length == size || a === arr.length -1){\\ns2 = s2.concat([s])\\ns = []\\n}\\n    }\\n    return s2\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array}\\n */\\nvar chunk = function(arr, size) {\\n    let s = []\\n    let s2 = []\\n    for(let a = 0; a<arr.length; a++){\\ns.push(arr[a])\\nif(s.length == size || a === arr.length -1){\\ns2 = s2.concat([s])\\ns = []\\n}\\n    }\\n    return s2\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048170,
                "title": "js-ts-slice-method-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst chunk = (arr: any[], size: number): any[][] => {\\n    let result = [];\\n    let len = size;\\n    for (let i = 0; i < arr.length; i) {\\n        result.push(arr.slice(i, size));\\n        i += len;\\n        size += len;\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst chunk = (arr: any[], size: number): any[][] => {\\n    let result = [];\\n    let len = size;\\n    for (let i = 0; i < arr.length; i) {\\n        result.push(arr.slice(i, size));\\n        i += len;\\n        size += len;\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047314,
                "title": "beginner-friendly-explanation-to-recursion-problem-solving",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDivide and conquer. I want the `array` to decrease in size after after each iteration or call and put a slice or a part of it inside a new one. One could solve it with a loop but solving it recursivly is something I wanted to practisce doing. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is that we want to have a base case and what could that base case be? **Well, when you work with arrays and recursion you always work towards making the array smaller so our base case will be an empty array**. But the question is how do we get to the base case? To reach the base case, we start by returning an array containing a chunk of size `size` from the input array. Then, we recursively call the `chunk` function on a smaller portion of the original array until we reach the base case. And that is how you solve array problems with recursion.  \\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$, why? Well that\\'s \\'cos the size of our returned array is not constant.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if (arr.length === 0) return [];\\n    return [arr.slice(0, size), ...chunk(arr.slice(size), size)];\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if (arr.length === 0) return [];\\n    return [arr.slice(0, size), ...chunk(arr.slice(size), size)];\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043723,
                "title": "simple-o-n-solution-with-explanation",
                "content": "# Explanation\\nCreate a `chunkArr` and `tempArr` array, loop through the provided `arr`, keep adding item to `tempArr`, if the `size` and `tempArr.length` is same or the `current iteration i.e. i + 1` is equal to or greater than `arr.length`, add `tempArr` to `chunkArr` and reset `tempArr` back to `[]`\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  if (!arr.length) return [];\\n  if (arr.length <= size) return [arr];\\n  \\n  const chunkArr = [];\\n  let tempArr = [];\\n\\n  for (let i = 0; i < arr.length; i++) {\\n    if (tempArr.length < size) {\\n      tempArr.push(arr[i]);\\n    }\\n    if (tempArr.length === size || i + 1 >= arr.length) {\\n      chunkArr.push(tempArr);\\n      tempArr = [];\\n    }\\n  }\\n  return chunkArr;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  if (!arr.length) return [];\\n  if (arr.length <= size) return [arr];\\n  \\n  const chunkArr = [];\\n  let tempArr = [];\\n\\n  for (let i = 0; i < arr.length; i++) {\\n    if (tempArr.length < size) {\\n      tempArr.push(arr[i]);\\n    }\\n    if (tempArr.length === size || i + 1 >= arr.length) {\\n      chunkArr.push(tempArr);\\n      tempArr = [];\\n    }\\n  }\\n  return chunkArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041340,
                "title": "javascript-simple-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let container = []\\n    for(let i = 0; i < arr.length; i += size){\\n        container.push(arr.slice(i, i + size))\\n    }\\n\\n    return container\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let container = []\\n    for(let i = 0; i < arr.length; i += size){\\n        container.push(arr.slice(i, i + size))\\n    }\\n\\n    return container\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034361,
                "title": "a-simple-solution-using-array-splice",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nusing array.splice method to create the subArray with size \"size\"\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Initialize an empty array called finalArray.\\n This array will hold the sub-arrays created from the input array arr.\\n\\n    Start a while loop that continues as long as the arr is not empty. \\n\\n\\nInside the loop, arr.splice(0, size) is used to extract the first size elements from the arr array. \\nThe splice method removes those elements from arr and returns them as a new array.\\n\\nPush the items into finalArray and return it.\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  let finalArray = [];\\n  while(arr.length){\\n      finalArray.push(arr.splice(0,size));\\n  }\\n  return finalArray;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  let finalArray = [];\\n  while(arr.length){\\n      finalArray.push(arr.splice(0,size));\\n  }\\n  return finalArray;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034229,
                "title": "split-the-given-array-according-to-size-js-using-slice-method-of-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var arr1=[];\\n    for(var i=0;i<arr.length;i+=size){\\n        const chunk =arr.slice(i,i+size);\\n        arr1.push(chunk);\\n    }\\n    return arr1;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var arr1=[];\\n    for(var i=0;i<arr.length;i+=size){\\n        const chunk =arr.slice(i,i+size);\\n        arr1.push(chunk);\\n    }\\n    return arr1;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032424,
                "title": "typescript-solution-beats-93",
                "content": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n\\n    const chunkArr = [];\\n\\n    for (let i = 0; i < arr.length; i += size) {\\n        const arrSlice = arr.slice(i, i + size);\\n        chunkArr.push(arrSlice);\\n    }\\n\\n    return chunkArr;\\n};\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n\\n    const chunkArr = [];\\n\\n    for (let i = 0; i < arr.length; i += size) {\\n        const arrSlice = arr.slice(i, i + size);\\n        chunkArr.push(arrSlice);\\n    }\\n\\n    return chunkArr;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4028532,
                "title": "farhad-zada-js-simple-solution",
                "content": "# Intuition\\nYou do not need me to explain it. If i do you will be reading some codes in human language, you better read it in JS lang. It is the same. Just change your vision (And if you are someone this seems meaningles, then you are not someone i share this for)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunks = []\\n\\n    for (let i = 0; i < arr.length / size; i++) {\\n        chunks.push([])\\n        for (let j = 0; j < size; j++) {\\n\\n                const cur = arr[i * size + j]\\n                if (!cur & cur !== 0) {\\n                    return chunks\\n                }\\n                chunks[i].push(cur)\\n\\n                // return chunks\\n            // }\\n        }\\n    }\\n    return chunks\\n    \\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunks = []\\n\\n    for (let i = 0; i < arr.length / size; i++) {\\n        chunks.push([])\\n        for (let j = 0; j < size; j++) {\\n\\n                const cur = arr[i * size + j]\\n                if (!cur & cur !== 0) {\\n                    return chunks\\n                }\\n                chunks[i].push(cur)\\n\\n                // return chunks\\n            // }\\n        }\\n    }\\n    return chunks\\n    \\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020960,
                "title": "solve-with-splice-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n      let n = [];\\n  while (arr.length != 0)\\n    n.push(arr.splice(0, size < arr.length ? size : arr.length));\\n  return n;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n      let n = [];\\n  while (arr.length != 0)\\n    n.push(arr.splice(0, size < arr.length ? size : arr.length));\\n  return n;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4017535,
                "title": "simple-solution-using-splice",
                "content": "# Intuition\\nThe code provided aims to solve the problem of chunking an input array into subarrays of a given size. The intuition behind this solution is to iteratively slice the input array into smaller portions, each of the specified size, and collect these portions as subarrays within a larger array. This process continues until all elements of the input array have been grouped into subarrays. The key insight here is to use mathematical operations like integer division and modulo to determine the number of full chunks that can be created and the remaining elements for the last subarray. By using a loop to repeatedly extract and push elements into subarrays, the code successfully chunks the input array, fulfilling the requirements of the problem.\\n\\n# Approach\\nThe code follows a straightforward approach to chunking the input array. It first calculates the number of full chunks that can be formed by dividing the array length by the specified chunk size and computes any remaining elements. It then initializes an empty array to store the chunked subarrays. The code enters a while loop that continues until all elements from the input array have been processed. Inside the loop, it uses the splice method to extract the next batch of elements equal to the chunk size from the input array and appends them as a subarray to the result array. This process continues until all elements have been chunked. Finally, the code returns the result array containing the chunked subarrays, meeting the problem\\'s requirements without relying on external libraries or lodash\\'s _.chunk function.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this code is O(n), where n is the number of elements in the input array arr. This is because the code iterates through the array once in a while loop, where each iteration involves slicing and pushing a chunk of elements into the result array. Since each element is processed exactly once, the time complexity is linear with respect to the number of elements in the input array.\\n\\n- Space complexity:\\nThe space complexity of this code is also O(n), where n is the number of elements in the input array arr. This space is primarily used for storing the result array l, which contains the chunked subarrays. The size of the result array depends on the number of elements in the input array, and in the worst case, if each element is placed in its own subarray, the space complexity remains linear. The additional space used for variables like a, b, and l is constant and does not depend on the input size, so it doesn\\'t affect the overall space complexity.\\n\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const a = Math.trunc((arr.length)/size)\\n    let b = (arr.length)%size\\n    l=[]\\n    while (arr.length!=0){\\n        l.push(arr.splice(0,size))\\n    }   \\n    return l\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const a = Math.trunc((arr.length)/size)\\n    let b = (arr.length)%size\\n    l=[]\\n    while (arr.length!=0){\\n        l.push(arr.splice(0,size))\\n    }   \\n    return l\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013106,
                "title": "chunk-array-in-js",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if (arr.length < 1) {\\n        return [];\\n    }\\n    else if (size > arr.length) {\\n        return [arr];\\n    }\\n    else {\\n        let results = [], tmp = [], cpy = arr;\\n        while (cpy.length >= size) {\\n            tmp = cpy.splice(0, size);\\n            results.push(tmp);\\n        }\\n        if (cpy.length > 0) {\\n            results.push(cpy);\\n        }\\n        return results;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if (arr.length < 1) {\\n        return [];\\n    }\\n    else if (size > arr.length) {\\n        return [arr];\\n    }\\n    else {\\n        let results = [], tmp = [], cpy = arr;\\n        while (cpy.length >= size) {\\n            tmp = cpy.splice(0, size);\\n            results.push(tmp);\\n        }\\n        if (cpy.length > 0) {\\n            results.push(cpy);\\n        }\\n        return results;\\n    }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4010998,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if(arr.length == 0) return []\\n    let res = [];\\n    for(let i=0; i<arr.length; i += size) {\\n        res.push(arr.slice(i, i+size))\\n    }\\n    return res;\\n};\\n\\n// [1, 2, 3, 4, 5, 6]; size=2;\\n// [[1, 2], [3, 4], [5, 6]]\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if(arr.length == 0) return []\\n    let res = [];\\n    for(let i=0; i<arr.length; i += size) {\\n        res.push(arr.slice(i, i+size))\\n    }\\n    return res;\\n};\\n\\n// [1, 2, 3, 4, 5, 6]; size=2;\\n// [[1, 2], [3, 4], [5, 6]]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4009317,
                "title": "the-10x-approach-s-p-lice-ing-it-up",
                "content": "# Intuition\\nGiven an array and a chunk size, we want to break the array into smaller chunks (sub-arrays) of the specified size. The last chunk may be smaller if the array\\'s length isn\\'t a multiple of the chunk size.\\n\\n# Approach\\n1. **Using splice**: The `splice()` method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place. We can use this method to remove `size` elements from the beginning of the array and push them to the result array until the original array is empty.\\n2. **Using slice with a for-loop**: The `slice()` method returns a shallow copy of a portion of an array into a new array object without modifying the original array. We can use this method in a for-loop, where in each iteration, we slice out `size` elements and push them to the result array.\\n\\n# Complexity\\n**Using splice**:\\n- Time complexity: $$O(n^2)$$ because `splice` can be O(n) in the worst case and we\\'re using it in a loop.\\n- Space complexity: $$O(n)$$ for the result array.\\n\\n**Using slice with a for-loop**:\\n- Time complexity: $$O(n)$$ because `slice` is O(k) where k is the size of the slice, and we\\'re using it in a loop that iterates n/size times.\\n- Space complexity: $$O(n)$$ for the result array.\\n\\n# Code\\n\\n**Using splice**:\\n\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const resultArr = []\\n\\n    while(arr.length > 0) \\n        resultArr.push(arr.splice(0, size))\\n\\n    return resultArr\\n};\\n\\n```\\n\\n**Using slice**:\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const resultArr = [];\\n    for(let i = 0; i < arr.length; i += size) {\\n        resultArr.push(arr.slice(i, i + size));\\n    }\\n    return resultArr;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const resultArr = []\\n\\n    while(arr.length > 0) \\n        resultArr.push(arr.splice(0, size))\\n\\n    return resultArr\\n};\\n\\n```\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const resultArr = [];\\n    for(let i = 0; i < arr.length; i += size) {\\n        resultArr.push(arr.slice(i, i + size));\\n    }\\n    return resultArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002205,
                "title": "fast-slicing",
                "content": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    for(let i = 0; i < arr.length; i += size) result.push(arr.slice(i, i + size))\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    for(let i = 0; i < arr.length; i += size) result.push(arr.slice(i, i + size))\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001421,
                "title": "easy-way-to-solve-it-with-step-and-index",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n\\n    if (arr.length === 0) { return [] }\\n    if(size > arr.length) { return [arr] }\\n\\n    let finalArray = [];\\n\\n    const loops = arr.length / size;\\n    let idx = 0;\\n    let step = size;\\n    for (let i = 0; i < loops; i++) {\\n        finalArray.push(arr.slice(idx, step));\\n        idx = step;\\n        step += size;\\n    }\\n    return finalArray;\\n\\n};\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n\\n    if (arr.length === 0) { return [] }\\n    if(size > arr.length) { return [arr] }\\n\\n    let finalArray = [];\\n\\n    const loops = arr.length / size;\\n    let idx = 0;\\n    let step = size;\\n    for (let i = 0; i < loops; i++) {\\n        finalArray.push(arr.slice(idx, step));\\n        idx = step;\\n        step += size;\\n    }\\n    return finalArray;\\n\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996112,
                "title": "array-chunk",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunkedArray = [];\\n\\n    for(i=0 ; i< arr.length ; i+=size){\\n        chunkedArray.push(arr.slice(i, i+size))\\n    }\\n\\n    return chunkedArray;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunkedArray = [];\\n\\n    for(i=0 ; i< arr.length ; i+=size){\\n        chunkedArray.push(arr.slice(i, i+size))\\n    }\\n\\n    return chunkedArray;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994675,
                "title": "chunk-o-n-solution-javascript",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const arrLength = Math.ceil(arr.length / size);\\n  const result = []\\n  if (arr.length == 0) return result;\\n  for (let i = 0; i < arrLength; i++) {\\n    if (arr.length <= size) result.push(arr);\\n    else\\n    result.push(arr.splice(0, size))\\n  }\\n  return result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const arrLength = Math.ceil(arr.length / size);\\n  const result = []\\n  if (arr.length == 0) return result;\\n  for (let i = 0; i < arrLength; i++) {\\n    if (arr.length <= size) result.push(arr);\\n    else\\n    result.push(arr.splice(0, size))\\n  }\\n  return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992394,
                "title": "chunk-arrays",
                "content": "# Intuition\\nI should do array chunks and add them to main chunks array\\n\\n# Approach\\n1. We need array for one chunk of array\\n2. we need subarray to push chunk arrayes\\n3. In the for loop we push each item into the subarray, until the size of chunk array is equal to chunk array lenght.\\n4. If chunk array length is the same as size, I push chunk array into subarray and after that assign chunk array to [] to start again.\\n5. If there is are no enough items in main array to make full chunk, then I push it to sub array anyway.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = function(arr, size) {\\n    let chunckArr = []\\n    let subArrs = []\\n\\n    for (let i = 0; i < arr.length; i ++) {\\n        chunckArr.push(arr[i])\\n        if (chunckArr.length === size) {\\n            subArrs.push(chunckArr)\\n            chunckArr = []\\n        } else if (arr.length - 1 === i) {\\n            subArrs.push(chunckArr)\\n        }\\n    }\\n    return subArrs\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = function(arr, size) {\\n    let chunckArr = []\\n    let subArrs = []\\n\\n    for (let i = 0; i < arr.length; i ++) {\\n        chunckArr.push(arr[i])\\n        if (chunckArr.length === size) {\\n            subArrs.push(chunckArr)\\n            chunckArr = []\\n        } else if (arr.length - 1 === i) {\\n            subArrs.push(chunckArr)\\n        }\\n    }\\n    return subArrs\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3991128,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n+size)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n+k)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    const l = arr.length;\\n    let j = 0, i = 0;\\n    while (i < l) {\\n        const chunk = [];\\n        while (j < size && i < l) {\\n            chunk.push(arr[i]);\\n            j++;\\n            i++;\\n        }\\n        j = 0;\\n        result.push(chunk);\\n    }\\n\\n    return result;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    const l = arr.length;\\n    let j = 0, i = 0;\\n    while (i < l) {\\n        const chunk = [];\\n        while (j < size && i < l) {\\n            chunk.push(arr[i]);\\n            j++;\\n            i++;\\n        }\\n        j = 0;\\n        result.push(chunk);\\n    }\\n\\n    return result;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3988770,
                "title": "solving-without-slice-function-using-basic-js",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) => {\\n    const chunkArray = [];\\n    let subArray = [];\\n    arr.forEach((value)=>{\\n        subArray.push(value);\\n        if(subArray.length == size){\\n            chunkArray.push([...subArray]);\\n            subArray = [];\\n        }\\n    })\\n   if (subArray.length) chunkArray.push([...subArray]);\\n   return chunkArray;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nconst chunk = (arr, size) => {\\n    const chunkArray = [];\\n    let subArray = [];\\n    arr.forEach((value)=>{\\n        subArray.push(value);\\n        if(subArray.length == size){\\n            chunkArray.push([...subArray]);\\n            subArray = [];\\n        }\\n    })\\n   if (subArray.length) chunkArray.push([...subArray]);\\n   return chunkArray;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984671,
                "title": "solution-using-array-from",
                "content": "# Intuition\\nCreate an array of the required length and fill each entry with a shallow copy of the relevant portion of the source array.\\n\\n# Approach\\nUse `Array.from` creating an array of the required size and provide a map function to the second argument to return the correct shallow copy of the portion of the source array.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    return Array.from(\\n        { length: Math.ceil(arr.length / size) },\\n        (_, i) => arr.slice(i * size, (i * size) + size)\\n    )\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    return Array.from(\\n        { length: Math.ceil(arr.length / size) },\\n        (_, i) => arr.slice(i * size, (i * size) + size)\\n    )\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3977511,
                "title": "beginners-solution-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nOur basic cases are following:\\n\\n1.If the size > length of the array return the entire array [[array]]\\n2.If the array is empty return [] (null array) \\n\\nFor that,\\n\\nDivide array length with size and assaign it to count variable. then we can know how many sub arrays can generate based on size.\\n\\nIf the Count is 0, that means may be the array is empty either the size will be grater than the length\\n \\nCheck the array length. if it 0, then return [] either \\nreturn the entire array [[...array]]\\n\\nIf the Count is not 0 that means we can generate. We can loop through the array and splice(0,6) and push each sub array into output variable.\\n\\nThe splice() method adds and/or removes array elements.\\nThe splice() method overwrites the original array\\n\\nIn each itration of for loop the splice methord splices a sub array from array and overwrites it.\\n\\nIn cunclution we spliced the sub arrays, now we need to check is there any element left. if it exist, also push them into output array.\\n \\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    var output = [];\\n    var count = Math.floor(arr.length/size);\\n    if(count === 0){\\n        return arr.length === 0 ? [] : [[...arr]]\\n    }else{\\n        for(let i = 0;i<count;i++){\\n            output.push(arr.splice(0,size))\\n        }\\n\\n        if(arr.length !== 0) output.push([...arr])\\n    }\\n\\n    return output\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    var output = [];\\n    var count = Math.floor(arr.length/size);\\n    if(count === 0){\\n        return arr.length === 0 ? [] : [[...arr]]\\n    }else{\\n        for(let i = 0;i<count;i++){\\n            output.push(arr.splice(0,size))\\n        }\\n\\n        if(arr.length !== 0) output.push([...arr])\\n    }\\n\\n    return output\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976891,
                "title": "easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let rtarr=[],a=[],i=size;\\n    for(let idx=0;idx<arr.length;idx++){\\n        if(i!==0){  \\n            a.push(arr[idx]);\\n            --i;\\n        }\\n        if((i==0)||(idx==(arr.length-1))){\\n            rtarr.push(a);\\n            a=[]\\n            i=size;\\n        }\\n    }\\n\\n    return rtarr\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let rtarr=[],a=[],i=size;\\n    for(let idx=0;idx<arr.length;idx++){\\n        if(i!==0){  \\n            a.push(arr[idx]);\\n            --i;\\n        }\\n        if((i==0)||(idx==(arr.length-1))){\\n            rtarr.push(a);\\n            a=[]\\n            i=size;\\n        }\\n    }\\n\\n    return rtarr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3973644,
                "title": "my-solution",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n\\treturn arr.reduce((acc, i) => {\\n        if (acc.length === 0 || acc[acc.length - 1].length === size)\\n            acc.push([i])\\n        else\\n            acc[acc.length - 1].push(i)\\n        return acc\\n\\t}, [])\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n\\treturn arr.reduce((acc, i) => {\\n        if (acc.length === 0 || acc[acc.length - 1].length === size)\\n            acc.push([i])\\n        else\\n            acc[acc.length - 1].push(i)\\n        return acc\\n\\t}, [])\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972748,
                "title": "very-simple-solution-using-slice",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const newArr = []\\n  i = 0\\n  while(i < arr.length){\\n    newArr.push(arr.slice(i,i+size))\\n    i+=size\\n  }\\n  return newArr\\n}\\n```\\n```\\nvar chunk = function(arr, size) {\\n  const newArr =[]\\n  j = 0\\n  for(let i=0; i<arr.length; i=i+size){\\n    const arr1 = [];\\n    while(j < i+size && j < arr.length){\\n      arr1.push(arr[j])\\n      j+=1\\n    }\\n    newArr.push(arr1)\\n  }\\n  return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const newArr = []\\n  i = 0\\n  while(i < arr.length){\\n    newArr.push(arr.slice(i,i+size))\\n    i+=size\\n  }\\n  return newArr\\n}\\n```\n```\\nvar chunk = function(arr, size) {\\n  const newArr =[]\\n  j = 0\\n  for(let i=0; i<arr.length; i=i+size){\\n    const arr1 = [];\\n    while(j < i+size && j < arr.length){\\n      arr1.push(arr[j])\\n      j+=1\\n    }\\n    newArr.push(arr1)\\n  }\\n  return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972536,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe need to create an array of arrays, which can be completed by putting one array into another.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBy using Math.ceil, and length and size properties, the arrays within the array are set. Splicing modifies the arr and we can get piecies from this.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var len = Math.ceil(arr.length/size);\\n    var array1 = new Array(len);\\n    for (var i = 0;i < len; i++){\\n        var array2 = new Array();\\n        array2 = arr.splice(0,size);\\n        array1[i] = array2;\\n    }\\n    return array1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var len = Math.ceil(arr.length/size);\\n    var array1 = new Array(len);\\n    for (var i = 0;i < len; i++){\\n        var array2 = new Array();\\n        array2 = arr.splice(0,size);\\n        array1[i] = array2;\\n    }\\n    return array1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972329,
                "title": "solution-using-slice-operator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunked=[];\\n    let i=0;\\n    while(i<arr.length){\\n        chunked.push(arr.slice(i,i+size));\\n        i+=size\\n    }\\n    return chunked;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunked=[];\\n    let i=0;\\n    while(i<arr.length){\\n        chunked.push(arr.slice(i,i+size));\\n        i+=size\\n    }\\n    return chunked;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3971024,
                "title": "js-solution-with-for-loop-and-array-slice",
                "content": "\\n# Code\\n```\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    if(arr.length > 0) {\\n        if(arr.length <= size) {\\n        result.push(arr);\\n        }else {\\n            let step = size;\\n            for(let i = 0; i < arr.length; i += step) {\\n                result.push(arr.slice(i, size));\\n                size += step;\\n            }\\n        }\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    if(arr.length > 0) {\\n        if(arr.length <= size) {\\n        result.push(arr);\\n        }else {\\n            let step = size;\\n            for(let i = 0; i < arr.length; i += step) {\\n                result.push(arr.slice(i, size));\\n                size += step;\\n            }\\n        }\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3969593,
                "title": "easiest-solution-beats-96-in-runtime",
                "content": "# Intuition\\nDivide into chunks\\n\\n# Approach\\nUse Slice\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const newx = []\\n    for(let i=0;i<arr.length;i=i+size){\\n        const chunk = arr.slice(i,i+size);\\n        newx.push(chunk)\\n    }\\n    return newx\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const newx = []\\n    for(let i=0;i<arr.length;i=i+size){\\n        const chunk = arr.slice(i,i+size);\\n        newx.push(chunk)\\n    }\\n    return newx\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3966572,
                "title": "fast-and-optimised-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const newArray = [];\\n    for (let i = 0; i < arr.length; i+=size) {\\n        const childArray = []\\n        for (let j = i; (j < (i+size) && j < arr.length); j++) {\\n            childArray.push(arr[j]);\\n        }\\n        newArray.push(childArray);\\n    }\\n    return newArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const newArray = [];\\n    for (let i = 0; i < arr.length; i+=size) {\\n        const childArray = []\\n        for (let j = i; (j < (i+size) && j < arr.length); j++) {\\n            childArray.push(arr[j]);\\n        }\\n        newArray.push(childArray);\\n    }\\n    return newArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3962399,
                "title": "typescript-solution",
                "content": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let nums: number[][] = [];\\n    for(let i = 0; i < arr.length; i+=size){\\n        nums = [...nums, arr.slice(i, i+size)];\\n    }\\n    return nums;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let nums: number[][] = [];\\n    for(let i = 0; i < arr.length; i+=size){\\n        nums = [...nums, arr.slice(i, i+size)];\\n    }\\n    return nums;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3958154,
                "title": "simple-check",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n       let result = []\\n    for(i=0; i<arr.length; i+=size) {\\n        result.push(arr.slice(i, i+size))\\n    }\\n    return result\\n \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n       let result = []\\n    for(i=0; i<arr.length; i+=size) {\\n        result.push(arr.slice(i, i+size))\\n    }\\n    return result\\n \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3946703,
                "title": "simple-3-liner-using-splice",
                "content": "# Intuition\\nSplicing is ideal for this job\\n# Approach\\n1. splice array and remove from arr (can be done in one step using .splice())\\n2. while arr isnt empty, continue splicing, pushing the slices to chunks array\\n3. once arr is empty, return chunks\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunks = []\\n    while(arr.length!==0) chunks.push(arr.splice(0,size));\\n    return chunks;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunks = []\\n    while(arr.length!==0) chunks.push(arr.splice(0,size));\\n    return chunks;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3945933,
                "title": "simple-o-n-solution-using-remainder",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunks = [];\\n\\n    arr.forEach((item, index) => {\\n        if (index % size === 0) {\\n            chunks.push([item]);\\n            return;\\n        }\\n\\n        const chunk = chunks[chunks.length - 1];\\n        chunk.push(item);\\n    });\\n\\n    return chunks;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunks = [];\\n\\n    arr.forEach((item, index) => {\\n        if (index % size === 0) {\\n            chunks.push([item]);\\n            return;\\n        }\\n\\n        const chunk = chunks[chunks.length - 1];\\n        chunk.push(item);\\n    });\\n\\n    return chunks;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3945674,
                "title": "for-loop-using-slice",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let out = [];\\n    for(let i = 0; i < arr.length; i+= size) {\\n        out.push(arr.slice(i, i + size));\\n    }\\n    return out;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let out = [];\\n    for(let i = 0; i < arr.length; i+= size) {\\n        out.push(arr.slice(i, i + size));\\n    }\\n    return out;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944907,
                "title": "while-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n\\n\\n- Space complexity:O(n)\\n\\n# Code\\n```\\nvar chunk = function(arr, size) {\\n    const chunkedArr = []\\n    while ( arr.length > 0){\\n        chunkedArr.push(arr.splice(0, size))\\n    }\\n    return chunkedArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    const chunkedArr = []\\n    while ( arr.length > 0){\\n        chunkedArr.push(arr.splice(0, size))\\n    }\\n    return chunkedArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944491,
                "title": "javascript-simple-solution-slice",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  var chunkedArray = [];\\n  var index = 0;\\n\\n  while (index < arr.length) {\\n    chunkedArray.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunkedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3941501,
                "title": "array-splice",
                "content": "# Code\\n```\\nvar chunk = function(arr, size) {\\n    const res = [];\\n    while (arr.length) {\\n        res.push(arr.splice(0, size));\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    const res = [];\\n    while (arr.length) {\\n        res.push(arr.splice(0, size));\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3940800,
                "title": "solve-using-javascrip-object-methods",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Apply for loop and increment by given size and inside add object with length is given size add it in new object using slice method.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans = []\\n    for(i=0;i<arr.length;i+=size)\\n    {\\n        ans.push(arr.slice(i, i+size))\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans = []\\n    for(i=0;i<arr.length;i+=size)\\n    {\\n        ans.push(arr.slice(i, i+size))\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3933852,
                "title": "simple-solution-using-while-loop",
                "content": "# Approach\\n* While loop runs untill the original arr length becomes null.\\n* arr.splice() will seperate the element of arr according to the size provided and push it to new array. \\n\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let newArr=[];\\n    while(arr.length){\\n        newArr.push(arr.splice(0,size))\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let newArr=[];\\n    while(arr.length){\\n        newArr.push(arr.splice(0,size))\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3929919,
                "title": "easy-solution",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\n// var chunk = function(arr, size) {\\n     \\n// };\\nvar chunk = function(arr, size) {\\n    var count = 0;\\n    var temp = [];\\n    var result = []\\n    arr.forEach(element => {\\n        temp.push(element);\\n        count += 1;\\n        if (count == size) {\\n            count = 0;\\n            result.push(temp);\\n            temp = []\\n        }\\n    });\\n    if (temp.length > 0) {\\n        result.push(temp);\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\n// var chunk = function(arr, size) {\\n     \\n// };\\nvar chunk = function(arr, size) {\\n    var count = 0;\\n    var temp = [];\\n    var result = []\\n    arr.forEach(element => {\\n        temp.push(element);\\n        count += 1;\\n        if (count == size) {\\n            count = 0;\\n            result.push(temp);\\n            temp = []\\n        }\\n    });\\n    if (temp.length > 0) {\\n        result.push(temp);\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3928417,
                "title": "js-runtime-54ms-beats-84-22-memory-43-96mb-beats-90-90-2-approaches",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\nlet array=[]\\nfor(let i=0;i<arr.length;){\\n   array.push(arr.slice(i,i+size))\\n   i=i+size\\n}\\nreturn array\\n   // return _.chunk(arr,size)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\nlet array=[]\\nfor(let i=0;i<arr.length;){\\n   array.push(arr.slice(i,i+size))\\n   i=i+size\\n}\\nreturn array\\n   // return _.chunk(arr,size)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3926892,
                "title": "a-solution-using-array-splice-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can use Splice Array method to solve this as it\\'s one of the many other solutions.\\nAs per the test cases, we can break the cases as you can see in the below code.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can divide the input array length with the given size to get a quotient where it denotes the possible number of chunks. For example, if quotient is 2 then chunks are 2. If quotient is 2.something (a decimal value like 2.3333) then possiblee number of chunks would be 3 (ceil of 2.something) \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\n\\nvar chunk = function(arr, size) {\\n    let outputArray = [];\\n\\n    if (arr.length !== 0) {\\n        if (arr.length < size) {\\n            outputArray = [arr];\\n        } else {\\n            const quotient = arr.length / size;\\n            let splicedArray = [...arr];\\n            for (let i=0; i<quotient; i++) {\\n                let removedArray = splicedArray.splice(0, size);\\n                outputArray = [...outputArray, removedArray];\\n            }\\n        }\\n    }\\n    return outputArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\n\\nvar chunk = function(arr, size) {\\n    let outputArray = [];\\n\\n    if (arr.length !== 0) {\\n        if (arr.length < size) {\\n            outputArray = [arr];\\n        } else {\\n            const quotient = arr.length / size;\\n            let splicedArray = [...arr];\\n            for (let i=0; i<quotient; i++) {\\n                let removedArray = splicedArray.splice(0, size);\\n                outputArray = [...outputArray, removedArray];\\n            }\\n        }\\n    }\\n    return outputArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3924473,
                "title": "typescript-simple-solution",
                "content": "# Code\\n```\\nfunction chunk<T>(arr: T[], size: number): T[][] {\\n    const result: T[][] = [];\\n    for ( let i = 0; i < arr.length; i += size )\\n        result.push( arr.slice( i, i + size ) );\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Array"
                ],
                "code": "```\\nfunction chunk<T>(arr: T[], size: number): T[][] {\\n    const result: T[][] = [];\\n    for ( let i = 0; i < arr.length; i += size )\\n        result.push( arr.slice( i, i + size ) );\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3920030,
                "title": "elegant-and-short-solution-in-js",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    const resultArr = [];\\n\\n    for (let i = 0; i < arr.length; i += size) {\\n        resultArr.push(arr.slice(i, i + size));\\n    }\\n\\n    return resultArr;\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    const resultArr = [];\\n\\n    for (let i = 0; i < arr.length; i += size) {\\n        resultArr.push(arr.slice(i, i + size));\\n    }\\n\\n    return resultArr;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3919945,
                "title": "beats-98-using-splice",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunked = [];\\n    while (arr.length) {\\n        chunked.push(arr.splice(0, size));\\n    }\\n    return chunked;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunked = [];\\n    while (arr.length) {\\n        chunked.push(arr.splice(0, size));\\n    }\\n    return chunked;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916381,
                "title": "easiest-and-shortest-way-javascript-slice-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    \\n    for (let i = 0; i < arr.length; i += size) {\\n        result.push(arr.slice(i, i + size));\\n    }\\n    \\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    \\n    for (let i = 0; i < arr.length; i += size) {\\n        result.push(arr.slice(i, i + size));\\n    }\\n    \\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3908250,
                "title": "very-simple-approach",
                "content": "\\n```\\nvar chunk = function(arr, size) {\\n    var ans = [];\\n    for(let i = 0; i < arr.length;)\\n    {\\n        let subArray = [];\\n        for(let j = 0; j < size && i < arr.length; j++)\\n            subArray.push(arr[i++]);\\n        ans.push(subArray);\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    var ans = [];\\n    for(let i = 0; i < arr.length;)\\n    {\\n        let subArray = [];\\n        for(let j = 0; j < size && i < arr.length; j++)\\n            subArray.push(arr[i++]);\\n        ans.push(subArray);\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3903671,
                "title": "chunk-array-simple-js-solution-easy-to-understand-faster-than-88-of-the-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let newArr = [];\\n\\n    for(let i=0;i<=arr.length-1;i=i+size) {\\n        if(arr.length-i >= size) {\\n            // have room and can take elements\\n\\n            newArr.push(arr.slice(i, i+size));\\n        } else {\\n            // not enough elements as per size, pick all left\\n\\n            newArr.push(arr.slice(i));\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let newArr = [];\\n\\n    for(let i=0;i<=arr.length-1;i=i+size) {\\n        if(arr.length-i >= size) {\\n            // have room and can take elements\\n\\n            newArr.push(arr.slice(i, i+size));\\n        } else {\\n            // not enough elements as per size, pick all left\\n\\n            newArr.push(arr.slice(i));\\n        }\\n    }\\n    return newArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3901509,
                "title": "simple-solution-using-slice",
                "content": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const ans = [];\\n    for (let i = 0; i < arr.length; i+=size) {\\n        ans.push(arr.slice(i, i + size));\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    const ans = [];\\n    for (let i = 0; i < arr.length; i+=size) {\\n        ans.push(arr.slice(i, i + size));\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3901018,
                "title": "very-easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    let count = 0\\n    let arr1 = []\\n    let res = []\\n     if(arr.length===0){\\n        return []\\n    }\\n    for (let j = 0; j < arr.length; j++) {\\n        if (count < size) {\\n            arr1.push(arr[j])\\n            count++\\n        } else {\\n            res.push(arr1)\\n            arr1 = [arr[j]]  \\n            count = 1\\n        }\\n    }\\n    res.push(arr1)\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    let count = 0\\n    let arr1 = []\\n    let res = []\\n     if(arr.length===0){\\n        return []\\n    }\\n    for (let j = 0; j < arr.length; j++) {\\n        if (count < size) {\\n            arr1.push(arr[j])\\n            count++\\n        } else {\\n            res.push(arr1)\\n            arr1 = [arr[j]]  \\n            count = 1\\n        }\\n    }\\n    res.push(arr1)\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3899851,
                "title": "simple-and-clean",
                "content": "\\n\\n# Code\\n```\\nconst chunk = (arr, size) => {\\n  if (arr.length === 0) return [];\\n  let iteration = iterationCount(size, arr.length)\\n  let newArr = []\\n  if (arr.length < size) newArr = [arr]\\n  for (let index = 0; index < iteration; index++) {\\n    let chunk = arr.splice(0, size)\\n    newArr.push(chunk)\\n    if (arr.length === 0) break\\n    if (arr.length < size) newArr.push(arr)\\n  }\\n\\n  return newArr;\\n};\\n\\n\\n\\nfunction iterationCount(size, len) {\\n  let count;\\n\\n  if (len % size === 0) {\\n    count = len / size;\\n  } else {\\n    count = Math.floor(len / size)\\n\\n  }\\n  return count\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst chunk = (arr, size) => {\\n  if (arr.length === 0) return [];\\n  let iteration = iterationCount(size, arr.length)\\n  let newArr = []\\n  if (arr.length < size) newArr = [arr]\\n  for (let index = 0; index < iteration; index++) {\\n    let chunk = arr.splice(0, size)\\n    newArr.push(chunk)\\n    if (arr.length === 0) break\\n    if (arr.length < size) newArr.push(arr)\\n  }\\n\\n  return newArr;\\n};\\n\\n\\n\\nfunction iterationCount(size, len) {\\n  let count;\\n\\n  if (len % size === 0) {\\n    count = len / size;\\n  } else {\\n    count = Math.floor(len / size)\\n\\n  }\\n  return count\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3898825,
                "title": "simple-solution-with-minimal-code",
                "content": "# Intuition\\nThese approach emphasizes achieving **performance with minimal code**.\\n\\nPlease **Upvote** if you find helpful.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = (arr, size) => {\\n    let chunkedArrays = [];\\n    for(let i = 0; i < arr.length; i += size){\\n        chunkedArrays.push(arr.slice(i, i + size));\\n    }\\n    return chunkedArrays;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = (arr, size) => {\\n    let chunkedArrays = [];\\n    for(let i = 0; i < arr.length; i += size){\\n        chunkedArrays.push(arr.slice(i, i + size));\\n    }\\n    return chunkedArrays;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3894769,
                "title": "easiest-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    for(i=0; i< arr.length; i += size){\\n        result.push(arr.slice(i, i+size));\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    for(i=0; i< arr.length; i += size){\\n        result.push(arr.slice(i, i+size));\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3893359,
                "title": "simplest-js-solution-using-slice-no-bs",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans = []\\n    for (i=0; i< arr.length; i+= size){\\n        let tempArr = arr.slice(i, i + size)\\n        ans.push(tempArr)\\n    }\\n    return ans\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let ans = []\\n    for (i=0; i< arr.length; i+= size){\\n        let tempArr = arr.slice(i, i + size)\\n        ans.push(tempArr)\\n    }\\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3891374,
                "title": "while-loop-works-here",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nI used an if condition to check if arr is empty, then returned []\\nThen while arr.length is greater than size, I spliced the initial array and pushed it into a new array defined at the top of the function, or I pushed the spliced arr into the new arry.\\nthen arry is returned as the caller\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n2) - size. The while loop will run as long as the condition is true for the first n minus size elements of the array.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const arry = [];\\n    if(arr.length === 0) return []\\n    while(arr.length > size){\\n      arry.push(arr.splice(0, size))\\n    }\\n    arry.push(arr.splice(0, size));\\n    return arry;\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const arry = [];\\n    if(arr.length === 0) return []\\n    while(arr.length > size){\\n      arry.push(arr.splice(0, size))\\n    }\\n    arry.push(arr.splice(0, size));\\n    return arry;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3889034,
                "title": "simple-javascript-solution-with-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let returningArray = []\\n    let value = []\\n    for (let i = 0; i < arr.length ; i++) {\\n        value.push(arr[i])\\n        if(value.length === size || i == arr.length - 1 ){\\n            returningArray.push(value)\\n            value = []\\n        }\\n    }\\n    return returningArray\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let returningArray = []\\n    let value = []\\n    for (let i = 0; i < arr.length ; i++) {\\n        value.push(arr[i])\\n        if(value.length === size || i == arr.length - 1 ){\\n            returningArray.push(value)\\n            value = []\\n        }\\n    }\\n    return returningArray\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3889004,
                "title": "array-chunking-for-subarrays",
                "content": "# Intuition and Approach:\\nThe intuition behind the solution is to iterate through the input array and create subarrays of the specified chunk size. The approach involves using a loop to extract portions of the input array using Array.prototype.slice, and then pushing these portions (subarrays) into a new array.\\n\\n# Time Complexity:\\nThe time complexity of the solution is O(n), where n is the length of the input array. This is because the loop iterates through the array once to create subarrays.\\n\\n# Space Complexity:\\nThe space complexity is influenced by the storage of the chunked array, which can grow as large as the input array when chunk size is set to 1. Therefore, the space complexity is O(n), where n is the length of the input array.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n     const chunked = [];\\n  let index = 0;\\n\\n  while (index < arr.length) {\\n    chunked.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunked;\\n};\\n```\\nThe chunkArray function provides a way to split an array into smaller subarrays of a specified size. It accomplishes this by iterating through the input array and using slice to create subarrays, resulting in an efficient and flexible solution for array chunking.",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Suffix Array"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n     const chunked = [];\\n  let index = 0;\\n\\n  while (index < arr.length) {\\n    chunked.push(arr.slice(index, index + size));\\n    index += size;\\n  }\\n\\n  return chunked;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3886699,
                "title": "very-simple-js-solution-with-comments",
                "content": "Upvote please if it helps to you)\\nThank you!)\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    //here we keep our result\\n    let result = [];\\n    //temporary variable for keeping arrays until\\n    //temp.length < size\\n    let temp = [];\\n\\n    //iterate our nums\\n    for (let i = 0; i < arr.length; i++) {\\n        //save numbers in temp\\n        temp.push(arr[i]);\\n        //when temp length == size we add this array to result and\\n        //reset temp\\n        if (temp.length == size || i == arr.length - 1) {\\n            result.push(temp);\\n            temp = [];\\n        }\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    //here we keep our result\\n    let result = [];\\n    //temporary variable for keeping arrays until\\n    //temp.length < size\\n    let temp = [];\\n\\n    //iterate our nums\\n    for (let i = 0; i < arr.length; i++) {\\n        //save numbers in temp\\n        temp.push(arr[i]);\\n        //when temp length == size we add this array to result and\\n        //reset temp\\n        if (temp.length == size || i == arr.length - 1) {\\n            result.push(temp);\\n            temp = [];\\n        }\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3879115,
                "title": "brute-force-additional-space-array-slice-fn-o-1-time-simple-to-read",
                "content": "# Complexity\\n- Time complexity: O(1)\\n\\n# Code\\n```javascript []\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    let startIndex = 0;\\n\\n    while (startIndex < arr.length) {\\n        const endIndex = Math.min(startIndex + size, arr.length);\\n        const chunk = arr.slice(startIndex, endIndex);\\n        result.push(chunk);\\n        startIndex += size;\\n    }\\n\\n    return result;\\n};\\n```\\n```javascript []\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    let chunk = [];\\n\\n    for (let i = 0; i < arr.length + 1; i++) {\\n        if (chunk.length == size) {\\n            result.push(chunk);\\n            chunk = [];\\n        }\\n\\n        if (i == arr.length && chunk.length > 0) {\\n            result.push(chunk);\\n        }\\n\\n\\n        arr[i] !== undefined ? chunk.push(arr[i]) : null;\\n    }\\n\\n    return result;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript []\\nvar chunk = function(arr, size) {\\n    const result = [];\\n    let startIndex = 0;\\n\\n    while (startIndex < arr.length) {\\n        const endIndex = Math.min(startIndex + size, arr.length);\\n        const chunk = arr.slice(startIndex, endIndex);\\n        result.push(chunk);\\n        startIndex += size;\\n    }\\n\\n    return result;\\n};\\n```\n```javascript []\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    let chunk = [];\\n\\n    for (let i = 0; i < arr.length + 1; i++) {\\n        if (chunk.length == size) {\\n            result.push(chunk);\\n            chunk = [];\\n        }\\n\\n        if (i == arr.length && chunk.length > 0) {\\n            result.push(chunk);\\n        }\\n\\n\\n        arr[i] !== undefined ? chunk.push(arr[i]) : null;\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3878895,
                "title": "faster-one",
                "content": "# Intuition\\nfaster\\n\\n# Approach\\nwhile is faster than for\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    var test = [];\\n    var some = arr.length - size + 1\\n    let i = 0;\\n    while(i<=some){\\n        if (arr.length) {\\n            test.push(arr.splice(0, size))\\n        }\\n        i++\\n    }\\n    return test\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    var test = [];\\n    var some = arr.length - size + 1\\n    let i = 0;\\n    while(i<=some){\\n        if (arr.length) {\\n            test.push(arr.splice(0, size))\\n        }\\n        i++\\n    }\\n    return test\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3878845,
                "title": "88-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunkedArr = [];\\n    let tempArr = [];\\n\\n    for(let i=0; i<arr.length; i+=size) {\\n      tempArr = [];\\n      let max = i + size;\\n      for(let j=i; j<max; j++) {\\n        if(arr[j] != null) {\\n          tempArr.push(arr[j]);\\n        } \\n      }\\n    chunkedArr.push(tempArr);\\n    }\\n    return chunkedArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chunkedArr = [];\\n    let tempArr = [];\\n\\n    for(let i=0; i<arr.length; i+=size) {\\n      tempArr = [];\\n      let max = i + size;\\n      for(let j=i; j<max; j++) {\\n        if(arr[j] != null) {\\n          tempArr.push(arr[j]);\\n        } \\n      }\\n    chunkedArr.push(tempArr);\\n    }\\n    return chunkedArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3878163,
                "title": "easy-js-solution",
                "content": "# Complexity\\n- Time complexity:\\n **O(n)**\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n   const result = []\\n   for (let i = 0; i < arr.length; i += 1) {\\n       if (i % size === 0) {\\n           result.push([arr[i]])\\n       } else {\\n           result[result.length - 1].push(arr[i])\\n       }\\n   } \\n   return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n   const result = []\\n   for (let i = 0; i < arr.length; i += 1) {\\n       if (i % size === 0) {\\n           result.push([arr[i]])\\n       } else {\\n           result[result.length - 1].push(arr[i])\\n       }\\n   } \\n   return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3876925,
                "title": "2677-chunk-array",
                "content": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let results = [];\\n    arr.forEach((element, i) => {\\n        if (i % size === 0)\\n            results.push([]);\\n        results[parseInt(i / size)].push(element); \\n    });\\n    return results;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let results = [];\\n    arr.forEach((element, i) => {\\n        if (i % size === 0)\\n            results.push([]);\\n        results[parseInt(i / size)].push(element); \\n    });\\n    return results;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3868728,
                "title": "simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    let chunked = [];\\n    let a = 0;\\n    for (let i = 0; i < Math.ceil(arr.length/size); i++) {\\n    let newarr = [];\\n        for (let j = 0; j < size; j++) {\\n            arr[a] !=null && newarr.push(arr[a]);\\n            a++\\n        }\\n        chunked.push(newarr);\\n    }\\n    return chunked;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    let chunked = [];\\n    let a = 0;\\n    for (let i = 0; i < Math.ceil(arr.length/size); i++) {\\n    let newarr = [];\\n        for (let j = 0; j < size; j++) {\\n            arr[a] !=null && newarr.push(arr[a]);\\n            a++\\n        }\\n        chunked.push(newarr);\\n    }\\n    return chunked;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3860761,
                "title": "runtime-beats-96-2-memory-beats-87-49",
                "content": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const result = [];\\n  for (let i = 0; i < arr.length; i+= size) {\\n    result.push(arr.slice(i, i + size));\\n  };\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n  const result = [];\\n  for (let i = 0; i < arr.length; i+= size) {\\n    result.push(arr.slice(i, i + size));\\n  };\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3860704,
                "title": "solution-using-array-foreach-method-runtime-85-75-memory-26-81",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const finalArr = [];\\n    let subArr = [];\\n\\n    // Loop through original array and push all values to new array.\\n    arr.forEach((element, index) => {\\n      subArr.push(element);\\n      //Once sub array is long enough, push it to new arr  \\n      if (subArr.length === size || index === arr.length - 1) {\\n        finalArr.push(subArr);\\n        subArr = [];\\n      }\\n    });\\n\\n    return finalArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const finalArr = [];\\n    let subArr = [];\\n\\n    // Loop through original array and push all values to new array.\\n    arr.forEach((element, index) => {\\n      subArr.push(element);\\n      //Once sub array is long enough, push it to new arr  \\n      if (subArr.length === size || index === arr.length - 1) {\\n        finalArr.push(subArr);\\n        subArr = [];\\n      }\\n    });\\n\\n    return finalArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3860408,
                "title": "fast-solution-no-slice",
                "content": "# Intuition\\nI didn\\'t know `Array.slice()` existed so I took the na\\xEFve approach of pushing values into nested arrays and it worked out to be a little faster.\\n\\n# Approach\\n[Array.push()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) returns the new size of `tmp`, so we can load the next value from `arr` and check if the chunk is ready to push in a one-liner. \\n\\nIncluding `i + 1 === arr.length` in the check also ensures the last chunk gets added when `arr.length` isn\\'t divisible by `size`.\\n\\n# Code\\n```\\nlet chunk = (arr, size) => {\\n    let res = []; \\n    let tmp = []; //chunk\\n    for (let i = 0; i < arr.length; i++) {\\n        if (tmp.push(arr[i]) === size || i + 1 === arr.length) {\\n            res.push(tmp);\\n            tmp = [];\\n        }\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet chunk = (arr, size) => {\\n    let res = []; \\n    let tmp = []; //chunk\\n    for (let i = 0; i < arr.length; i++) {\\n        if (tmp.push(arr[i]) === size || i + 1 === arr.length) {\\n            res.push(tmp);\\n            tmp = [];\\n        }\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3858068,
                "title": "easy-solution-for-beginners-javascript",
                "content": "# Intuition\\nUsing a temporary array, I was able to push it into chunked array.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var chunkArr = [];\\n    var tempArr = [];\\n    var count=0;\\n    if (Array.isArray(arr) && arr.length)\\n    {\\n        for (let i=0;i<arr.length;i++)\\n        {\\n            if (count<size)\\n            {\\n                tempArr.push(arr[i]);\\n                count++;\\n            }\\n            else\\n            {\\n                chunkArr.push(tempArr);\\n                tempArr=[];\\n                count=1;\\n                tempArr.push(arr[i]);\\n            }\\n        }\\n        chunkArr.push(tempArr);\\n        return chunkArr;\\n    }\\n    else\\n    {\\n        return arr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var chunkArr = [];\\n    var tempArr = [];\\n    var count=0;\\n    if (Array.isArray(arr) && arr.length)\\n    {\\n        for (let i=0;i<arr.length;i++)\\n        {\\n            if (count<size)\\n            {\\n                tempArr.push(arr[i]);\\n                count++;\\n            }\\n            else\\n            {\\n                chunkArr.push(tempArr);\\n                tempArr=[];\\n                count=1;\\n                tempArr.push(arr[i]);\\n            }\\n        }\\n        chunkArr.push(tempArr);\\n        return chunkArr;\\n    }\\n    else\\n    {\\n        return arr;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3855440,
                "title": "solution-using-a-while-loop-and-the-splice-method",
                "content": "Hello, this is my first time posting here :)\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI solved a simillar problem on freeCodeCamp so I came here with what I did there.\\n\\n1 - Fistly we create  a new array called \"newArr\", which is going to be returned in the end. \\n2 - Then we create a while loop. Inside of it, we are going to place newArr followed by a push() method, which is going to transfer to newArr (using a splice() method applied to the array arr) the elements of arr from index 0 to index \"size\".\\n3 - This is going to happen until the arr.length is bigger than zero. Once arr is equal to zero, newArr is returned.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let newArr = []\\n\\n    while(arr.length > 0) {\\n        newArr.push(arr.splice(0, size))\\n    }\\n\\n    return newArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let newArr = []\\n\\n    while(arr.length > 0) {\\n        newArr.push(arr.splice(0, size))\\n    }\\n\\n    return newArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3851331,
                "title": "beats-100-00-of-users-with-typescript",
                "content": "\\n# Code\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let res = []\\n\\n    for(let i = 0; i<=arr.length - 1; i+=size) {\\n        const chunk = arr.slice(i, i+size)\\n\\n        res.push(chunk)\\n    }\\n\\n    return res\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n    let res = []\\n\\n    for(let i = 0; i<=arr.length - 1; i+=size) {\\n        const chunk = arr.slice(i, i+size)\\n\\n        res.push(chunk)\\n    }\\n\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3850951,
                "title": "simple-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    \\n    for (let i=0; i<arr.length; i=i+size) {\\n        result.push(arr.slice(i, i+size))\\n    };\\n    \\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = [];\\n    \\n    for (let i=0; i<arr.length; i=i+size) {\\n        result.push(arr.slice(i, i+size))\\n    };\\n    \\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3850916,
                "title": "javascript-slice-splice",
                "content": "# Intuition\\nusing slice() and splice()  method\\n\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    while(arr.length>0){\\n        result.push(arr.slice(0,size))\\n        arr.splice(0, size)\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    while(arr.length>0){\\n        result.push(arr.slice(0,size))\\n        arr.splice(0, size)\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3850409,
                "title": "js-monstrosity-of-a-solution-using-splice-beginner-coder",
                "content": "# Intuition\\nThis problem seemed straight-forward at first and i thought i could just use map to assemble the ansr array for our return value. But, they throw you a few curveballs, such as when Arr.length % size !=== 0. In this case i knew i needed to loop through the orignial array and create sub arrays until the last portion where the original array i have been splicing from has less elements in it that size wants. Then id just slice the remaining portion into my return value (ansr).\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n// My first obvious case in which i see if i can \\n//evenly divide my starting array into nice even sub arrays. \\n//I used splice because this will update the original array\\'s length \\n//each iteration and it will get smaller and smaller. \\n//This will be more helpful in the next couple of cases. \\n    \\n    if(arr.length % size == 0) {\\n        let ansr = []\\n         while(arr.length >= size) {\\n             let i = 0;\\n             ansr.push(arr.splice(i, size))\\n         }\\n                return ansr;\\n    //Here i create another loop to make more sub-arrays; \\n// incrementing by size-1 each time so that they are perfect size until \\n// i run out of elements. \\n    } else {\\n        let ansr = []\\n        for(let i = 0; i < arr.length-1; i+(size-1)) {\\n            if(arr.length >= size) {\\n                ansr.push(arr.splice(i, size))\\n            } \\n\\n//Finally i see that i have run out of elements to evenly add \\n// as sub-arrays, so i just slice the remaining bit at the recent index\\n//and return.\\n            if(size > arr.length) {\\n                ansr.push(arr.slice(i))\\n                    return ansr;\\n            }\\n        }   \\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n// My first obvious case in which i see if i can \\n//evenly divide my starting array into nice even sub arrays. \\n//I used splice because this will update the original array\\'s length \\n//each iteration and it will get smaller and smaller. \\n//This will be more helpful in the next couple of cases. \\n    \\n    if(arr.length % size == 0) {\\n        let ansr = []\\n         while(arr.length >= size) {\\n             let i = 0;\\n             ansr.push(arr.splice(i, size))\\n         }\\n                return ansr;\\n    //Here i create another loop to make more sub-arrays; \\n// incrementing by size-1 each time so that they are perfect size until \\n// i run out of elements. \\n    } else {\\n        let ansr = []\\n        for(let i = 0; i < arr.length-1; i+(size-1)) {\\n            if(arr.length >= size) {\\n                ansr.push(arr.splice(i, size))\\n            } \\n\\n//Finally i see that i have run out of elements to evenly add \\n// as sub-arrays, so i just slice the remaining bit at the recent index\\n//and return.\\n            if(size > arr.length) {\\n                ansr.push(arr.slice(i))\\n                    return ansr;\\n            }\\n        }   \\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3849294,
                "title": "using-reduce-with-easy-to-read-version-93-58",
                "content": "While below solution doesn\\'t score very well on LeetCode in memory category (it\\'s too verbose and takes more space to store), in a work environment, this is the preferred way to write code.\\n```\\nvar chunk = function(array, size) {\\n    return array.reduce((accumulator, element, index) => {\\n        const newChunk = index % size === 0;\\n        const chunkIndex = Math.floor(index / size);\\n\\n        if (newChunk) accumulator.push([]);\\n        accumulator[chunkIndex].push(element);\\n\\n        return accumulator;\\n    }, []);\\n};\\n```\\nCompiler is smart enough to spit out a minified version of the function at least like this (usually it also removes the spaces). \\n\\n```\\nvar chunk = function(arr, size) {\\n    return arr.reduce((a, e, i) => {\\n        if (i % size === 0) a.push([]);\\n        a[Math.floor(i / size)].push(e);\\n        return a;\\n    }, []);\\n};\\n```\\nWe don\\'t write code for machines. For machines, either version works the same, but for humans, first version is way easier to read and understand or to remember what it does when you come back to it after a while.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(array, size) {\\n    return array.reduce((accumulator, element, index) => {\\n        const newChunk = index % size === 0;\\n        const chunkIndex = Math.floor(index / size);\\n\\n        if (newChunk) accumulator.push([]);\\n        accumulator[chunkIndex].push(element);\\n\\n        return accumulator;\\n    }, []);\\n};\\n```\n```\\nvar chunk = function(arr, size) {\\n    return arr.reduce((a, e, i) => {\\n        if (i % size === 0) a.push([]);\\n        a[Math.floor(i / size)].push(e);\\n        return a;\\n    }, []);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3847197,
                "title": "simple-solution-while-loop",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n  if (!arr.length) return arr;\\n\\n  const result = [];\\n\\n  while (arr.length)\\n    result.push(arr.splice(0, size));\\n\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n  if (!arr.length) return arr;\\n\\n  const result = [];\\n\\n  while (arr.length)\\n    result.push(arr.splice(0, size));\\n\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3838331,
                "title": "easy-solution-using-javascript",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n  let subarr = []\\n  for (let i = 0; i < arr.length;) {\\n    let j = 0;\\n    let items = []\\n    while (j++ < size) {\\n      if (i < arr.length) {\\n        items.push(arr[i])\\n      }\\n      i++\\n    }\\n    subarr.push(items)\\n  }\\n  return subarr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n  let subarr = []\\n  for (let i = 0; i < arr.length;) {\\n    let j = 0;\\n    let items = []\\n    while (j++ < size) {\\n      if (i < arr.length) {\\n        items.push(arr[i])\\n      }\\n      i++\\n    }\\n    subarr.push(items)\\n  }\\n  return subarr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3834263,
                "title": "5-lines-of-code-using-arr-slice",
                "content": "# Intuition\\nSplit an array and return a new array with specified length\\n\\n# Approach\\nBuilt in Javscript function slice(start,end) will return a new array from index start=>inclusive UP to index end=>exclusive\\nUse slice() to split array of index **i** and length **size**\\nStart from index **i** = 0, loop until arr.length\\nInitialize ending index multiple **n** = 1, with increment n++\\nIncrement index **i** + **size** for each subsequent loop\\nReturn new array\\n\\n# Complexity\\n- Time complexity:\\nO(n) => depends on number of inputs in an array\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let output = []\\n    for (let i = 0, n = 1; i<arr.length; i=i+size, n++){\\n           output.push((arr.slice(i, size*n)))\\n           }\\n    return output\\n    };\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let output = []\\n    for (let i = 0, n = 1; i<arr.length; i=i+size, n++){\\n           output.push((arr.slice(i, size*n)))\\n           }\\n    return output\\n    };\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3833281,
                "title": "javascript-o-n-solution",
                "content": "# Intuition\\nCalculate the number of chunks, \\'n\\' first. Run a loop n times and extract slices of \\'size\\' elements from the input array on each iteration of the loop.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunks = Math.ceil(arr.length/size), chunkedArray = [];\\n    for(let i = 0; i < chunks; i++) {\\n        let start = i*size, end = start + size;\\n        const slice = arr.slice(start, end);\\n        chunkedArray[i] = slice;\\n    }\\n\\n    return chunkedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunks = Math.ceil(arr.length/size), chunkedArray = [];\\n    for(let i = 0; i < chunks; i++) {\\n        let start = i*size, end = start + size;\\n        const slice = arr.slice(start, end);\\n        chunkedArray[i] = slice;\\n    }\\n\\n    return chunkedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3830086,
                "title": "javascript-95-85-very-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let currentArr = [];\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        currentArr.push(arr[i]);\\n        if (currentArr.length === size) {\\n            result.push(currentArr);\\n            currentArr = []\\n        }\\n    }\\n\\n    if (currentArr.length) result.push(currentArr);\\n    return result; \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let currentArr = [];\\n    const result = [];\\n    for (let i = 0; i < arr.length; i++) {\\n        currentArr.push(arr[i]);\\n        if (currentArr.length === size) {\\n            result.push(currentArr);\\n            currentArr = []\\n        }\\n    }\\n\\n    if (currentArr.length) result.push(currentArr);\\n    return result; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3825646,
                "title": "js-solution-with-57-ms-runtime-44-92-mb-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIterate through entire array, create new mini array once previous mini array has reached the length = size\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nRead the comments in the code. It\\'s pretty clear.\\n\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    \\n    let finalArr = [];\\n    let numMinis = arr.length/size;\\n    // used for mini arrays\\n    let temp = [];\\n\\n    // edge case where the original array is empty \\n    if(arr.length === 0){\\n        return arr;\\n    }\\n    // keeps track of mini array size \\n    let j = 0;\\n    for(let i = 0; i < arr.length; i++){\\n        if(j < size){\\n            // add value to the mini array\\n            temp.push(arr[i]);\\n            j++;\\n            // console.log(`j = ${j} < size = ${size}: temp = ${temp}`)\\n        } else{\\n            // add the mini array to the final array\\n            finalArr.push(temp);\\n            // \"create\"\" new empty array \\n            temp = [];\\n            // set j to 0\\n            j = 0;\\n            // add value to mini array \\n            temp.push(arr[i])\\n            j++;\\n        }\\n        \\n    }\\n    // edge case where the size is greater than the original array\\'s length\\n    // the last mini array is less than or equal to the size\\n    if((arr.length < size) || (temp.length <= size)){\\n        finalArr.push(temp);\\n    }\\n\\n\\n    return finalArr;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    \\n    let finalArr = [];\\n    let numMinis = arr.length/size;\\n    // used for mini arrays\\n    let temp = [];\\n\\n    // edge case where the original array is empty \\n    if(arr.length === 0){\\n        return arr;\\n    }\\n    // keeps track of mini array size \\n    let j = 0;\\n    for(let i = 0; i < arr.length; i++){\\n        if(j < size){\\n            // add value to the mini array\\n            temp.push(arr[i]);\\n            j++;\\n            // console.log(`j = ${j} < size = ${size}: temp = ${temp}`)\\n        } else{\\n            // add the mini array to the final array\\n            finalArr.push(temp);\\n            // \"create\"\" new empty array \\n            temp = [];\\n            // set j to 0\\n            j = 0;\\n            // add value to mini array \\n            temp.push(arr[i])\\n            j++;\\n        }\\n        \\n    }\\n    // edge case where the size is greater than the original array\\'s length\\n    // the last mini array is less than or equal to the size\\n    if((arr.length < size) || (temp.length <= size)){\\n        finalArr.push(temp);\\n    }\\n\\n\\n    return finalArr;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3823414,
                "title": "for-and-arr-slice-solution",
                "content": "\\n\\n# Code\\n```\\nfunction chunk<T>(arr: T[], size: number): T[][] {\\n  const result: T[][] = [];\\n\\n  for (let i = 0; i < arr.length; i += size) {\\n    result.push(arr.slice(i, i + size));\\n  }\\n\\n  return result;\\n}\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk<T>(arr: T[], size: number): T[][] {\\n  const result: T[][] = [];\\n\\n  for (let i = 0; i < arr.length; i += size) {\\n    result.push(arr.slice(i, i + size));\\n  }\\n\\n  return result;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3823381,
                "title": "ts-fori-solution",
                "content": "\\n\\n# Code\\n```\\nfunction chunk(arr: any[], size: number): any[][] {\\n  const result: any[][] = [];\\n  const chunks_number = Math.ceil(arr.length / size);\\n  if (!chunks_number) return [];\\n  for (let i = 0, j = 0; i < arr.length; i++, j++) {\\n    if (j === size) j = 0;\\n    if (!j) result.push([]);\\n    result[result.length - 1].push(arr[i]);\\n  }\\n  return result;\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction chunk(arr: any[], size: number): any[][] {\\n  const result: any[][] = [];\\n  const chunks_number = Math.ceil(arr.length / size);\\n  if (!chunks_number) return [];\\n  for (let i = 0, j = 0; i < arr.length; i++, j++) {\\n    if (j === size) j = 0;\\n    if (!j) result.push([]);\\n    result[result.length - 1].push(arr[i]);\\n  }\\n  return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3820992,
                "title": "single-for-loop-well-explained-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe idea here is to iterate over the array and store the elements in a temp array until the temp array reaches the size limit. Once the limit is reached temp array is pushed into result array.\\n\\nAt the end of for loop , left over elements from temp array can be pushed ( if there is any )\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var res = [];\\n    var temparr = [];\\n    for(let k=0; k<arr.length; k++){\\n        if(temparr.length+ 1 <= size){\\n            temparr.push(arr[k])\\n        }else{\\n            res.push(temparr);\\n            temparr = [arr[k]];\\n        }\\n    }\\n    if(temparr.length>0) res.push(temparr);\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var res = [];\\n    var temparr = [];\\n    for(let k=0; k<arr.length; k++){\\n        if(temparr.length+ 1 <= size){\\n            temparr.push(arr[k])\\n        }else{\\n            res.push(temparr);\\n            temparr = [arr[k]];\\n        }\\n    }\\n    if(temparr.length>0) res.push(temparr);\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3820677,
                "title": "what-do-you-think-of-this",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let len = Math.ceil((arr.length)/size);\\n    let g =[];\\n    let m =0;\\n    for(let i =0; i<len;i++){\\n        let tmp = arr.slice(m,m+size);\\n        m+=size;\\n        g.push(tmp);\\n    }\\n    return g;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let len = Math.ceil((arr.length)/size);\\n    let g =[];\\n    let m =0;\\n    for(let i =0; i<len;i++){\\n        let tmp = arr.slice(m,m+size);\\n        m+=size;\\n        g.push(tmp);\\n    }\\n    return g;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3816975,
                "title": "runtime-58ms-beats-83-58-memory-o-n-beats-68-50",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nRuntime 58ms Beats 83.58%\\n\\n- Space complexity:\\nMemory O(n) Beats 68.50%\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let res=[]\\n    for(let i=0;i<arr.length;i+=size){\\n    res.push(arr.slice(i,size+i))\\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let res=[]\\n    for(let i=0;i<arr.length;i+=size){\\n    res.push(arr.slice(i,size+i))\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3816035,
                "title": "easy-and-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if(!arr.length) return []\\n    const result = [];\\n    let temp = []\\n    arr.forEach((value,i)=>{\\n        temp.push(value);\\n        if(size==1){\\n            result.push(temp)\\n            temp = [];\\n        }\\n        else if(i>0 && (i+1)%size == 0 || arr.length-1 == i) {\\n            result.push(temp)\\n            temp = [];\\n        }\\n\\n    })\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if(!arr.length) return []\\n    const result = [];\\n    let temp = []\\n    arr.forEach((value,i)=>{\\n        temp.push(value);\\n        if(size==1){\\n            result.push(temp)\\n            temp = [];\\n        }\\n        else if(i>0 && (i+1)%size == 0 || arr.length-1 == i) {\\n            result.push(temp)\\n            temp = [];\\n        }\\n\\n    })\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3814120,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result=[]\\n    let index=0\\n    while(index<arr.length){\\n        result.push(arr.slice(index,index+size))\\n        index+=size\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result=[]\\n    let index=0\\n    while(index<arr.length){\\n        result.push(arr.slice(index,index+size))\\n        index+=size\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3814119,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result=[]\\n    let index=0\\n    while(index<arr.length){\\n        result.push(arr.slice(index,index+size))\\n        index+=size\\n    }\\n    return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result=[]\\n    let index=0\\n    while(index<arr.length){\\n        result.push(arr.slice(index,index+size))\\n        index+=size\\n    }\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3810939,
                "title": "chunck-array",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let subArr = [];\\n    let tempArr = [];\\n    arr.map((item,index)=>{\\n        if(tempArr.length == size){\\n            subArr.push(tempArr)\\n            tempArr = []\\n        }\\n        tempArr.push(item)\\n        if(index == arr.length-1){\\n            subArr.push(tempArr)\\n        }\\n    })\\n    return subArr\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let subArr = [];\\n    let tempArr = [];\\n    arr.map((item,index)=>{\\n        if(tempArr.length == size){\\n            subArr.push(tempArr)\\n            tempArr = []\\n        }\\n        tempArr.push(item)\\n        if(index == arr.length-1){\\n            subArr.push(tempArr)\\n        }\\n    })\\n    return subArr\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3809382,
                "title": "chunk-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n\\n  for (let i = 0; i < arr.length; i += size) {\\n    const chunk = arr.slice(i, i + size);\\n    chunkedArray.push(chunk);\\n  }\\n\\n  return chunkedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n\\n  for (let i = 0; i < arr.length; i += size) {\\n    const chunk = arr.slice(i, i + size);\\n    chunkedArray.push(chunk);\\n  }\\n\\n  return chunkedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3807596,
                "title": "cannot-be-simpler",
                "content": "\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    let temp = []\\n    \\n    let i = 0\\n\\n    while( i < arr.length){\\n        if (temp.length === size){\\n            result.push(temp)\\n            temp = []\\n        }\\n        temp.push(arr[i])\\n        i++\\n    }\\n\\n    if (temp.length !== 0){\\n        result.push(temp)\\n    }\\n\\n    return  result\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let result = []\\n    let temp = []\\n    \\n    let i = 0\\n\\n    while( i < arr.length){\\n        if (temp.length === size){\\n            result.push(temp)\\n            temp = []\\n        }\\n        temp.push(arr[i])\\n        i++\\n    }\\n\\n    if (temp.length !== 0){\\n        result.push(temp)\\n    }\\n\\n    return  result\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3806468,
                "title": "javascript-o-n-solution",
                "content": "# Intuition\\nNormal for loop with steps condition modified to match with the provided size\\n\\n# Approach\\n1. initialize output array\\n2. In the array iteration for loop, change the steps condition so that steps increment with the size instead of just i++\\n3. Slice the array into subarray by using Array.slice(from, to)\\n4. Push the sliced subarray to the main outputArray\\n5. Return the outputArray\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let outputArray = [];\\n    for (let i = 0; i < arr.length; i += size) {\\n        outputArray.push(arr.slice(i, i + size));\\n    }\\n    return outputArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let outputArray = [];\\n    for (let i = 0; i < arr.length; i += size) {\\n        outputArray.push(arr.slice(i, i + size));\\n    }\\n    return outputArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3805953,
                "title": "easy-to-understand-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. iterating over the array\\n2. saving elements in chunk till size of chunk is fullfilled\\n3. reseting the chunk array which is small and pushing into our main result array\\n4. in javascript there is not out of bound exception for array if the index is more than the array lenght so we have to stop it once index has gone through arr.length\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var result=[];\\n    for(var j=0;j<arr.length;j=j+size)\\n    {\\n        var small=[];\\n        for(var i=0;i<size;i++)\\n        {\\n            if(j+i>=arr.length)\\n            {break;}\\n            small.push(arr[j+i]); \\n        }\\n        \\n        result.push(small);\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    var result=[];\\n    for(var j=0;j<arr.length;j=j+size)\\n    {\\n        var small=[];\\n        for(var i=0;i<size;i++)\\n        {\\n            if(j+i>=arr.length)\\n            {break;}\\n            small.push(arr[j+i]); \\n        }\\n        \\n        result.push(small);\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3803356,
                "title": "javascript-chunking-an-array-into-smaller-sub-arrays",
                "content": "# Intuition:\\nThe function `chunk` takes an array `arr` and a chunk size `size` as inputs and aims to split the array into smaller sub-arrays of the given chunk size.\\n\\n# Approach:\\nThe function first checks if the input array `arr` is empty. If it is, it returns an empty array immediately, as there are no elements to split.\\n\\nThen, the function initializes three variables:\\n- `accum` is used to keep track of the current index in the input array `arr`.\\n- `ans` is an empty array that will store the resulting chunks of the input array.\\n- `size` is the given chunk size.\\n\\nNext, the function enters a while loop that continues as long as `accum` is less than the length of the input array `arr`. This loop is used to split the array into smaller chunks.\\n\\nIn each iteration of the loop, the function creates a new sub-array `slicedArr` by using the `slice` method on the input array `arr`. The `slice` method is used to extract a portion of the array, starting from the current value of `accum` and spanning `size` elements. This sub-array is then appended to the `ans` array using the `push` method.\\n\\nAfter appending the sub-array to `ans`, the `accum` is updated by adding the length of the `slicedArr`. This step ensures that the next iteration will start from the correct index in the input array to continue splitting it into chunks.\\n\\nOnce the loop finishes, the function has successfully split the input array `arr` into smaller sub-arrays of the specified chunk size. The `ans` array containing these sub-arrays is returned as the final result.\\n\\n# Complexity:\\n- Time complexity: The function iterates through the input array once, and for each iteration, it performs a constant-time operation (using `slice` and `push`). Therefore, the time complexity of the `chunk` function is O(n), where n is the length of the input array `arr`.\\n- Space complexity: The function creates an additional array `ans` to store the chunks of the input array. The size of the `ans` array depends on the number of chunks, which is determined by the chunk size and the length of the input array. Therefore, the space complexity of the `chunk` function is O(n), where n is the length of the input array `arr`.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if (arr.length === 0) return [];\\n    let accum = 0;\\n    let ans = [];\\n    while (accum < arr.length) {\\n        const slicedArr = arr.slice(accum, size + accum);\\n        accum += slicedArr.length;\\n        ans.push(slicedArr);\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    if (arr.length === 0) return [];\\n    let accum = 0;\\n    let ans = [];\\n    while (accum < arr.length) {\\n        const slicedArr = arr.slice(accum, size + accum);\\n        accum += slicedArr.length;\\n        ans.push(slicedArr);\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3798761,
                "title": "simple-easy-js-solution",
                "content": "# Approach\\nLoop through the array and use slice method and gthen push that array to Chunked Array.\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    var index = 0;\\n\\n    while(index<arr.length){\\n        chunkedArray.push(arr.slice(index,index+size));\\n        index +=size;\\n    } \\n\\n    return chunkedArray;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    const chunkedArray = [];\\n    var index = 0;\\n\\n    while(index<arr.length){\\n        chunkedArray.push(arr.slice(index,index+size));\\n        index +=size;\\n    } \\n\\n    return chunkedArray;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3793639,
                "title": "simple-and-easy-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chuncked=[]\\n    for(let i=0; i<arr.length; i+=size){\\n    chuncked.push(arr.slice(i,i+size))\\n    }\\n\\n    return chuncked;\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let chuncked=[]\\n    for(let i=0; i<arr.length; i+=size){\\n    chuncked.push(arr.slice(i,i+size))\\n    }\\n\\n    return chuncked;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3787422,
                "title": "very-basic-easy-solution",
                "content": "# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    const res = [];\\n    const n = arr.length;\\n    let x = 0;\\n    while(x<n){\\n        const ans = [];\\n        for(let i=0; x<n && i<size; x++, i++){\\n            ans.push(arr[x]);\\n        }\\n        res.push(ans);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function (arr, size) {\\n    const res = [];\\n    const n = arr.length;\\n    let x = 0;\\n    while(x<n){\\n        const ans = [];\\n        for(let i=0; x<n && i<size; x++, i++){\\n            ans.push(arr[x]);\\n        }\\n        res.push(ans);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3783204,
                "title": "simple-easy-yet-powerful-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nmutate the original array & decide how many times loop will do\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1st I have calculated how many times have to mutate the array (deleting elements) by dividing the array length to size. Then remaining values I will put into new resultant array after coming out from the loop\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let val = Math.floor( (arr.length - 1) / size);\\n    let res = []\\n    while(val > 0)\\n    {\\n         res = [...res,arr.splice(0,size)]\\n         val = val - 1\\n    }\\n    if(arr.length !== 0)\\n    {\\n         res = [...res,[...arr]]\\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    let val = Math.floor( (arr.length - 1) / size);\\n    let res = []\\n    while(val > 0)\\n    {\\n         res = [...res,arr.splice(0,size)]\\n         val = val - 1\\n    }\\n    if(arr.length !== 0)\\n    {\\n         res = [...res,[...arr]]\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3780992,
                "title": "easy-method-using-slice-and-splice",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    // to capture chunked array\\n    let res=[];\\n    // temporary array\\n    let tempArr=[...arr];\\n\\n    for(let i=0;i< arr.length;i++){\\n        // push subarray\\'s to res only is tempArry is not empty\\n        // console.log(tempArry)\\n        tempArr.length !== 0 && res.push(tempArr.slice(0,size))\\n\\n        // remove the pushed subarray\\'s from res\\n        tempArr.splice(0,size)\\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {Array} arr\\n * @param {number} size\\n * @return {Array[]}\\n */\\nvar chunk = function(arr, size) {\\n    // to capture chunked array\\n    let res=[];\\n    // temporary array\\n    let tempArr=[...arr];\\n\\n    for(let i=0;i< arr.length;i++){\\n        // push subarray\\'s to res only is tempArry is not empty\\n        // console.log(tempArry)\\n        tempArr.length !== 0 && res.push(tempArr.slice(0,size))\\n\\n        // remove the pushed subarray\\'s from res\\n        tempArr.splice(0,size)\\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3770481,
                "title": "easy-js-solution",
                "content": "# Code\\n```\\nvar chunk = function(arr, size) {\\n    const o = [];\\n    const len = arr.length;\\n    for(let i = 0; i < len; i += size) {\\n        o.push(arr.splice(0, size));\\n    }\\n    return o;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar chunk = function(arr, size) {\\n    const o = [];\\n    const len = arr.length;\\n    for(let i = 0; i < len; i += size) {\\n        o.push(arr.splice(0, size));\\n    }\\n    return o;\\n};\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1904877,
                "content": [
                    {
                        "username": "Code_Sagar",
                        "content": "Day 21 :Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n1. You can use Arr.slice Method\\n2. simple create array of size \"size\" push elements to it and then push it into the answer array"
                    },
                    {
                        "username": "heisenberg280",
                        "content": "woaah! finally an easy question in daily challenge !"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i know that feeling bro :D"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "arr.splice : removes the element and returns it too\\ntry while loop here\\nThank me later. XD"
                    }
                ]
            },
            {
                "id": 1904625,
                "content": [
                    {
                        "username": "Code_Sagar",
                        "content": "Day 21 :Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n1. You can use Arr.slice Method\\n2. simple create array of size \"size\" push elements to it and then push it into the answer array"
                    },
                    {
                        "username": "heisenberg280",
                        "content": "woaah! finally an easy question in daily challenge !"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i know that feeling bro :D"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "arr.splice : removes the element and returns it too\\ntry while loop here\\nThank me later. XD"
                    }
                ]
            },
            {
                "id": 2069535,
                "content": [
                    {
                        "username": "Code_Sagar",
                        "content": "Day 21 :Done Solving Today\\'s Question \\uD83D\\uDE01\\n\\n1. You can use Arr.slice Method\\n2. simple create array of size \"size\" push elements to it and then push it into the answer array"
                    },
                    {
                        "username": "heisenberg280",
                        "content": "woaah! finally an easy question in daily challenge !"
                    },
                    {
                        "username": "adrian_romanski",
                        "content": "i know that feeling bro :D"
                    },
                    {
                        "username": "bhavleen_singh_fsd",
                        "content": "arr.splice : removes the element and returns it too\\ntry while loop here\\nThank me later. XD"
                    }
                ]
            }
        ]
    },
    {
        "title": "Bikes Last Time Used ",
        "question_content": null,
        "solutions": [],
        "discussions": []
    },
    {
        "title": "To Be Or Not To Be",
        "question_content": "<p>Write a function&nbsp;<code>expect</code> that helps developers test their code. It should take in any value&nbsp;<code>val</code>&nbsp;and return an object with the following two functions.</p>\n\n<ul>\n\t<li><code>toBe(val)</code>&nbsp;accepts another value and returns&nbsp;<code>true</code>&nbsp;if the two values&nbsp;<code>===</code>&nbsp;each other. If they are not equal, it should throw an error&nbsp;<code>&quot;Not Equal&quot;</code>.</li>\n\t<li><code>notToBe(val)</code>&nbsp;accepts another value and returns&nbsp;<code>true</code>&nbsp;if the two values&nbsp;<code>!==</code>&nbsp;each other. If they are equal, it should throw an error&nbsp;<code>&quot;Equal&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> func = () =&gt; expect(5).toBe(5)\n<strong>Output:</strong> {&quot;value&quot;: true}\n<strong>Explanation:</strong> 5 === 5 so this expression returns true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> func = () =&gt; expect(5).toBe(null)\n<strong>Output:</strong> {&quot;error&quot;: &quot;Not Equal&quot;}\n<strong>Explanation:</strong> 5 !== null so this expression throw the error &quot;Not Equal&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> func = () =&gt; expect(5).notToBe(null)\n<strong>Output:</strong> {&quot;value&quot;: true}\n<strong>Explanation:</strong> 5 !== null so this expression returns true.\n</pre>\n",
        "solutions": [
            {
                "id": 3567095,
                "title": "full-thorough-explanation-simple-beginner-friendly",
                "content": "# Approach\\nThe problem requires the ```expect``` function to support making ```toBe``` and ```notToBe``` calls (e.g., ```expect(5).toBe(5);``` should return ```true```, and ```expect(5).notToBe(5);``` should throw ```\"Equal\"```). To do so, we should define the return of the ```expect``` function based on what kind of call we make. This can be done in the following format:\\n```\\nreturn {\\n    toBe: (parameters) => {\\n        [doing some stuff]\\n    },\\n    notToBe: (parameters) => {\\n        [doing some stuff]\\n    }\\n}\\n```\\nThe below solution follows this format, where ```toBe``` and ```notToBe``` both has an if else statement, such that if the throw condition is true, throw an error. Otherwise, return true.\\n\\n# Code\\n```\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/* For example, when expect(5).toBe(4) is called,\\n   val is the expect parameter (so val equals 5),\\n   val2 is the toBe parameter (so val2 equals 4).\\n   Since val !== val2, aka 5 != 4, we throw error \"Not Equal\". */\\n```\\nUPVOTE if this was helpful \\uD83C\\uDF5E\\uD83C\\uDF5E\\uD83C\\uDF5E",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```expect```\n```toBe```\n```notToBe```\n```expect(5).toBe(5);```\n```true```\n```expect(5).notToBe(5);```\n```\"Equal\"```\n```expect```\n```\\nreturn {\\n    toBe: (parameters) => {\\n        [doing some stuff]\\n    },\\n    notToBe: (parameters) => {\\n        [doing some stuff]\\n    }\\n}\\n```\n```toBe```\n```notToBe```\n```\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/* For example, when expect(5).toBe(4) is called,\\n   val is the expect parameter (so val equals 5),\\n   val2 is the toBe parameter (so val2 equals 4).\\n   Since val !== val2, aka 5 != 4, we throw error \"Not Equal\". */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3691597,
                "title": "very-simple-and-clean-solution",
                "content": "```\\nconst expect = (val) => {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    \\n    return {\\n        toBe:    (val2) => val2 === val || throwError(\\'Not Equal\\'),\\n        notToBe: (val2) => val2 !== val || throwError(\\'Equal\\'),\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nconst expect = (val) => {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    \\n    return {\\n        toBe:    (val2) => val2 === val || throwError(\\'Not Equal\\'),\\n        notToBe: (val2) => val2 !== val || throwError(\\'Equal\\'),\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3648263,
                "title": "everyone-is-missing-the-point-its-method-chaining-that-you-need-to-know-rest-is-child-play",
                "content": "# Explanation:\\nwhat does the input ```expect(5).toBe(15);``` means.\\nit means give 5 as input to function named `expect` but give 15 as input to function named `toBe` which is present inside function expect. now you can understand any solution of this problem.\\n\\nnow look at the code carefully it returning an object.\\ninside that object there is two functions defined.\\nwhich function will be called depends on input.\\n\\nnow you can do it...\\n# Code\\n```\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```expect(5).toBe(15);```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566159,
                "title": "simple-compare",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n return {\\n    toBe: function (otherVal) {\\n      if (val !== otherVal) {\\n        throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n    },\\n    notToBe: function (otherVal) {\\n      if (val === otherVal) {\\n        throw new Error(\"Equal\");\\n      }\\n      return true;\\n    },\\n  };\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n return {\\n    toBe: function (otherVal) {\\n      if (val !== otherVal) {\\n        throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n    },\\n    notToBe: function (otherVal) {\\n      if (val === otherVal) {\\n        throw new Error(\"Equal\");\\n      }\\n      return true;\\n    },\\n  };\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3658758,
                "title": "why-did-nobody-thought-of-this-best-solution",
                "content": "\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const param = val\\n    return {\\n        toBe: (value) => (value===param)? true: (() => { throw new Error(\"Not Equal\"); })(),\\n        notToBe: (value) => (value!==param)? true: (() => { throw new Error(\"Equal\"); })(),\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const param = val\\n    return {\\n        toBe: (value) => (value===param)? true: (() => { throw new Error(\"Not Equal\"); })(),\\n        notToBe: (value) => (value!==param)? true: (() => { throw new Error(\"Equal\"); })(),\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3579864,
                "title": "basic-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(val2){\\n        if(val===val2) return true;\\n        throw new Error(\\'Not Equal\\');\\n    }\\n\\n    function notToBe(val2){\\n        if(val!==val2) return true;\\n        throw new Error(\\'Equal\\');\\n    }\\n    return {\\n        toBe,\\n        notToBe\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(val2){\\n        if(val===val2) return true;\\n        throw new Error(\\'Not Equal\\');\\n    }\\n\\n    function notToBe(val2){\\n        if(val!==val2) return true;\\n        throw new Error(\\'Equal\\');\\n    }\\n    return {\\n        toBe,\\n        notToBe\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3567089,
                "title": "javascript-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n function throwError(message) {\\n    throw new Error(message);\\n  }\\n\\n  return {\\n    toBe: function (otherVal) {\\n      return val === otherVal || throwError(\"Not Equal\");\\n    },\\n    notToBe: function (otherVal) {\\n      return val !== otherVal || throwError(\"Equal\");\\n    },\\n  };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n function throwError(message) {\\n    throw new Error(message);\\n  }\\n\\n  return {\\n    toBe: function (otherVal) {\\n      return val === otherVal || throwError(\"Not Equal\");\\n    },\\n    notToBe: function (otherVal) {\\n      return val !== otherVal || throwError(\"Equal\");\\n    },\\n  };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3834971,
                "title": "easy-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if(val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if(val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if(val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if(val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3823048,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/* For example, when expect(5).toBe(4) is called,\\n   val is the expect parameter (so val equals 5),\\n   val2 is the toBe parameter (so val2 equals 4).\\n   Since val !== val2, aka 5 != 4, we throw error \"Not Equal\". */\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/* For example, when expect(5).toBe(4) is called,\\n   val is the expect parameter (so val equals 5),\\n   val2 is the toBe parameter (so val2 equals 4).\\n   Since val !== val2, aka 5 != 4, we throw error \"Not Equal\". */\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3578583,
                "title": "ts-simple-two-method-object-factory-59ms-42-5mb",
                "content": "This is a rather plain problem where we need to implement a factory function to produce objects based on one value (`val`).\\n\\nEach object will have a method taking another parameter (`otherVal`) as required that will either:\\n* `return` `true` if the specified condition is met;\\n* `throw` the error in the specs otherwise.\\n\\nAnd we can do it all with arrow functions, because why not?\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```ts\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nconst expect = (val: any): ToBeOrNotToBe => ({\\n    toBe: (otherVal) => {\\n        if (otherVal === val) return true;\\n        throw \"Not Equal\";\\n    },\\n    notToBe: (otherVal) => {\\n        if (otherVal !== val) return true;\\n        throw \"Equal\";\\n    }\\n});\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nconst expect = (val: any): ToBeOrNotToBe => ({\\n    toBe: (otherVal) => {\\n        if (otherVal === val) return true;\\n        throw \"Not Equal\";\\n    },\\n    notToBe: (otherVal) => {\\n        if (otherVal !== val) return true;\\n        throw \"Equal\";\\n    }\\n});\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3567770,
                "title": "very-easy-to-understand",
                "content": "\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(compair) {\\n        if(val === compair){\\n            return true\\n        } else {\\n            throw new Error(\\'Not Equal\\')\\n        }\\n    }\\n\\n    function notToBe(compair){\\n        if(val !== compair){\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {\\n        toBe,\\n        notToBe\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(compair) {\\n        if(val === compair){\\n            return true\\n        } else {\\n            throw new Error(\\'Not Equal\\')\\n        }\\n    }\\n\\n    function notToBe(compair){\\n        if(val !== compair){\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {\\n        toBe,\\n        notToBe\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3775400,
                "title": "method-chaining-simple-explaination",
                "content": "Method chaining in JavaScript refers to the practice of calling multiple methods on an object in a single line of code. This technique allows for a more concise and readable code by eliminating the need for intermediate variables or multiple lines of code.\\n\\nTo enable method chaining, each method call should return the object itself (this) or another object on which subsequent methods can be called. This allows the chaining of multiple method calls on the same object.\\n\\n# Example\\n```\\nconst calculator = {\\n  value: 0,\\n\\n  add(num) {\\n    this.value += num;\\n    return this; // Return the object itself to enable method chaining\\n  },\\n\\n  subtract(num) {\\n    this.value -= num;\\n    return this;\\n  },\\n\\n  multiply(num) {\\n    this.value *= num;\\n    return this;\\n  },\\n\\n  divide(num) {\\n    this.value /= num;\\n    return this;\\n  }\\n};\\n\\nconst result = calculator.add(5).multiply(2).subtract(3).divide(2);\\nconsole.log(result.value); // Output: 4\\n\\n\\n```\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n  return { toBe(v){\\n        if(val!==v)throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe(v){\\n         if(val===v)throw new Error(\"Equal\");\\n        else return true;\\n    }}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst calculator = {\\n  value: 0,\\n\\n  add(num) {\\n    this.value += num;\\n    return this; // Return the object itself to enable method chaining\\n  },\\n\\n  subtract(num) {\\n    this.value -= num;\\n    return this;\\n  },\\n\\n  multiply(num) {\\n    this.value *= num;\\n    return this;\\n  },\\n\\n  divide(num) {\\n    this.value /= num;\\n    return this;\\n  }\\n};\\n\\nconst result = calculator.add(5).multiply(2).subtract(3).divide(2);\\nconsole.log(result.value); // Output: 4\\n\\n\\n```\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n  return { toBe(v){\\n        if(val!==v)throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe(v){\\n         if(val===v)throw new Error(\"Equal\");\\n        else return true;\\n    }}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3566933,
                "title": "javascript-solution",
                "content": "\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(otherVal)=>{\\n            if(val!==otherVal){\\n                throw new Error(\"Not Equal\")\\n            }else{\\n                return true\\n            }\\n        },\\n        notToBe:(otherVal)=>{\\n            if(val===otherVal){\\n                throw new Error(\"Equal\")\\n            }\\n            else{\\n                return true\\n            }\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(otherVal)=>{\\n            if(val!==otherVal){\\n                throw new Error(\"Not Equal\")\\n            }else{\\n                return true\\n            }\\n        },\\n        notToBe:(otherVal)=>{\\n            if(val===otherVal){\\n                throw new Error(\"Equal\")\\n            }\\n            else{\\n                return true\\n            }\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3683878,
                "title": "2704-to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSo learning javascript is key to us in my life right now.\\nI come from c++ background so return an object made of functions is fairly new to me but i think that is why js is so popular.\\n\\nHere we make a object and return it. Which has to be functions \\nKey is the name and value is the function itself here. That is where the syntax learning was major for me.\\n\\nAfter that writing the function is fairly simple and googling difference between === and == should be a learning point for you guys.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe: function(val2){\\n            if(val2===val){\\n                return true;\\n            }\\n            else{\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe : function(val2){\\n            if(val2!==val){\\n                return true;\\n            }\\n            else{\\n                throw new Error(\"Equal\");\\n            }\\n\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe: function(val2){\\n            if(val2===val){\\n                return true;\\n            }\\n            else{\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe : function(val2){\\n            if(val2!==val){\\n                return true;\\n            }\\n            else{\\n                throw new Error(\"Equal\");\\n            }\\n\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3600577,
                "title": "typescript-easy-solution",
                "content": "\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe(val2){\\n            if(val === val2){\\n                return true\\n           \\n            } else throw \"Not Equal\"\\n        },\\n        notToBe(val2){\\n            if(val !== val2){\\n                return true\\n           \\n            } else throw \"Equal\"\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe(val2){\\n            if(val === val2){\\n                return true\\n           \\n            } else throw \"Not Equal\"\\n        },\\n        notToBe(val2){\\n            if(val !== val2){\\n                return true\\n           \\n            } else throw \"Equal\"\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4102086,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n return {\\n        toBe:(v)=> (v===val)? true:(()=> {throw new Error (\"Not Equal\")})(),\\n        notToBe:(v)=> (v!==val)? true:(()=> {throw new Error (\"Equal\")})(),\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n return {\\n        toBe:(v)=> (v===val)? true:(()=> {throw new Error (\"Not Equal\")})(),\\n        notToBe:(v)=> (v!==val)? true:(()=> {throw new Error (\"Equal\")})(),\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100252,
                "title": "creating-a-basic-testing-utility-in-javascript-implementing-expect-for-strict-equality-checks",
                "content": "# Intuition\\nAt the onset, we recognize that this problem involves creating a basic testing utility similar to Jest\\'s expect. The goal is to be able to evaluate the equality or inequality of values and return a response or throw an error based on the result. Such utilities are crucial in software development for unit testing and ensuring code behaves as expected.\\n# Approach\\n1. The main function, expect, takes in a value val.\\n2. It then returns an object with two methods: toBe and notToBe.\\n3. The toBe method checks if val is strictly equal (===) to the provided expectedVal. If they are equal, it returns true. If not, it throws an error indicating they\\'re \"Not Equal\".\\n4. The notToBe method checks if val is not equal (!==) to the provided expectedVal. If they\\'re not equal, it returns true. If they are equal, it throws an error indicating they\\'re \"Equal\".\\n\\nBy following this approach, the returned object from the expect function can be used for basic testing to evaluate strict equality or inequality.\\n# Complexity\\n- Time complexity:\\nO(1) for both toBe and notToBe methods: Both methods just perform a direct comparison which is a constant time operation. There\\'s no iteration or recursion involved.\\n\\n- Space complexity:\\nO(1): The methods only check the passed values without utilizing any additional data structures. They return primitive values (either true or they throw an error) which take constant space.\\n\\n# Code\\nThe provided code does the following:\\n1. Defines the expect function that accepts a value.\\n2. Returns an object with two methods: toBe and notToBe.\\n3. The toBe method evaluates strict equality and the notToBe method evaluates inequality. If the expectations aren\\'t met, appropriate errors are thrown.\\n\\nFor example, invoking expect(5).toBe(5) will return true because 5 is strictly equal to 5. On the other hand, invoking expect(5).notToBe(5) will throw an error with the message \"Equal\" because 5 is not different from 5.\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(expectedVal) {\\n            if (val === expectedVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(expectedVal) {\\n            if (val !== expectedVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(expectedVal) {\\n            if (val === expectedVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(expectedVal) {\\n            if (val !== expectedVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098706,
                "title": "easiest-solution-using-ternary-operator",
                "content": "if-else is good but this seems more cleaner...\\n\\n```\\nvar expect = function(val) {\\n    var error = function(message){\\n        throw new Error(message);\\n    }\\n    return {\\n        toBe : (value) => (value === val) ? (true) : error(\"Not Equal\"),\\n        notToBe : (value) => (val !== value) ? true : error(\"Equal\")\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function(val) {\\n    var error = function(message){\\n        throw new Error(message);\\n    }\\n    return {\\n        toBe : (value) => (value === val) ? (true) : error(\"Not Equal\"),\\n        notToBe : (value) => (val !== value) ? true : error(\"Equal\")\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096431,
                "title": "to-be-or-not-to-be-javascript-solution-by-bharadwaj",
                "content": "# Approach\\nHigher-Order Function With Custom Error Handling\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nvar expect = function(val) {\\n    const throwError = (errorStr) => {\\n        throw new Error(errorStr);\\n    }   \\n    return {\\n        toBe: (val2) => val2 === val || throwError(\\'Not Equal\\'),\\n        notToBe: (val2) => val2 !== val || throwError(\\'Equal\\'),\\n    }\\n};\\n\\n\\n\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function(val) {\\n    const throwError = (errorStr) => {\\n        throw new Error(errorStr);\\n    }   \\n    return {\\n        toBe: (val2) => val2 === val || throwError(\\'Not Equal\\'),\\n        notToBe: (val2) => val2 !== val || throwError(\\'Equal\\'),\\n    }\\n};\\n\\n\\n\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093987,
                "title": "simple-solution",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- I had no idea about temp: () => {} functions\\n- i guess you just have to use that for sub functions in a return?\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nconst expect = (val: any) => {\\n\\treturn {\\n        toBe: (valtwo) => {\\n            if (val !== valtwo) throw Error(\"Not Equal\");\\n            return true;\\n        },\\n        notToBe: (valthree) => {\\n            if(val === valthree) throw Error(\"Equal\");\\n            return true;\\n        }\\n    };\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nconst expect = (val: any) => {\\n\\treturn {\\n        toBe: (valtwo) => {\\n            if (val !== valtwo) throw Error(\"Not Equal\");\\n            return true;\\n        },\\n        notToBe: (valthree) => {\\n            if(val === valthree) throw Error(\"Equal\");\\n            return true;\\n        }\\n    };\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4093383,
                "title": "simple-and-clean-code",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: function (expected) {\\n            if (val === expected) {\\n                return true;\\n            } else {\\n                throw (\"Not Equal\");\\n            }\\n        },\\n\\n        notToBe: function (expected) {\\n            if (val !== expected) {\\n                return true;\\n            } else {\\n                throw (\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: function (expected) {\\n            if (val === expected) {\\n                return true;\\n            } else {\\n                throw (\"Not Equal\");\\n            }\\n        },\\n\\n        notToBe: function (expected) {\\n            if (val !== expected) {\\n                return true;\\n            } else {\\n                throw (\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092502,
                "title": "to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe: function(n){\\n\\n            if(n === val){\\n\\n                return true;\\n            }else{\\n\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(n){\\n\\n            if(n !== val){\\n\\n                return true;\\n            }else{\\n\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe: function(n){\\n\\n            if(n === val){\\n\\n                return true;\\n            }else{\\n\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(n){\\n\\n            if(n !== val){\\n\\n                return true;\\n            }else{\\n\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089954,
                "title": "simple-and-very-clean-solution",
                "content": "Just read the problem carefully you will understand the logic...\\nstep 1 : Retun an object : ```return {}```\\nstep 2 : inside the object make two functions whose key-value pair should gol like key must be the function name and the value should be the function.\\nstep 3: Use if-else condition and complete the code.\\n\\n```\\nvar expect = function(val) {\\n    return {\\n        toBe : function(value) {\\n            if(value === val) return true;\\n            else throw new Error(\"Not Equal\"); \\n        },\\n        notToBe : function(value){\\n            if(value !== val) return true;\\n            else throw new Error(\"Equal\");\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```return {}```\n```\\nvar expect = function(val) {\\n    return {\\n        toBe : function(value) {\\n            if(value === val) return true;\\n            else throw new Error(\"Not Equal\"); \\n        },\\n        notToBe : function(value){\\n            if(value !== val) return true;\\n            else throw new Error(\"Equal\");\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4089058,
                "title": "solution-using-anonymous-functions",
                "content": "# Approach\\n###### A simple solution using anonymous function notation:\\n1. Both the `toBe()` and `notToBe()` functions are defined within the scope of the `expect()` function, allowing them to be called as needed.\\n2. For both inner functions, if the specified condition is met, `true` is returned. Otherwise, an appropriate error instance is thrown.\\n3. As the problem requires the `expect()` function to return an object and thus enabling function chaining (e.g., `expect().toBe()`), both inner functions are returned as output for the main `expect()` function using object declaration (`return {tobe, notToBe}`)\\n\\n# Structure\\n```\\nvar expect = function(params) {\\n    var toBe = function(params) {\\n        [logic]\\n    }\\n    var notToBe = function(params) {\\n        [logic]\\n    }\\n    return {toBe, notToBe}\\n```\\n\\n\\n# Code\\n```\\nvar expect = function(val) {\\n    var toBe = function (val2) {\\n      if(val2===val) return true\\n      else throw new Error(\"Not Equal\")\\n    }\\n    var notToBe = function (val2) {\\n      if(val2!==val) return true\\n      else throw new Error(\"Equal\")\\n    }\\n    return {toBe, notToBe}\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function(params) {\\n    var toBe = function(params) {\\n        [logic]\\n    }\\n    var notToBe = function(params) {\\n        [logic]\\n    }\\n    return {toBe, notToBe}\\n```\n```\\nvar expect = function(val) {\\n    var toBe = function (val2) {\\n      if(val2===val) return true\\n      else throw new Error(\"Not Equal\")\\n    }\\n    var notToBe = function (val2) {\\n      if(val2!==val) return true\\n      else throw new Error(\"Equal\")\\n    }\\n    return {toBe, notToBe}\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088684,
                "title": "tobe-or-nottobe-solution-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n      notToBe: (val2)=>{\\n        if (val2===val) throw new Error(\"Equal\");\\n        else return true;\\n      },\\n      toBe: (val2)=>{\\n        if (val2!==val) throw new Error(\"Not Equal\");\\n        else return true;\\n      }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n      notToBe: (val2)=>{\\n        if (val2===val) throw new Error(\"Equal\");\\n        else return true;\\n      },\\n      toBe: (val2)=>{\\n        if (val2!==val) throw new Error(\"Not Equal\");\\n        else return true;\\n      }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088682,
                "title": "to-be-or-not-to-be-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    \\n    return {\\n        toBe:    (val2) => val2 === val || throwError(\\'Not Equal\\'),\\n        notToBe: (val2) => val2 !== val || throwError(\\'Equal\\'),\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    \\n    return {\\n        toBe:    (val2) => val2 === val || throwError(\\'Not Equal\\'),\\n        notToBe: (val2) => val2 !== val || throwError(\\'Equal\\'),\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088617,
                "title": "to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe: (v) => {\\n            if (v === val) return true;\\n            else throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (v) => {\\n            if (v !== val) return true;\\n            else throw new Error(\"Equal\");\\n        }\\n    }\\n    // or\\n    // return {\\n    //     toBe: (v)=> (v === val) ? true : (() => {throw new Error(\"Not Equal\")})(),\\n    //     notToBe: (v)=> (v !== val) ? true : (() => {throw new Error(\"Equal\")})(),\\n    // }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe: (v) => {\\n            if (v === val) return true;\\n            else throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (v) => {\\n            if (v !== val) return true;\\n            else throw new Error(\"Equal\");\\n        }\\n    }\\n    // or\\n    // return {\\n    //     toBe: (v)=> (v === val) ? true : (() => {throw new Error(\"Not Equal\")})(),\\n    //     notToBe: (v)=> (v !== val) ? true : (() => {throw new Error(\"Equal\")})(),\\n    // }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087459,
                "title": "neercode",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     function toBe(val2){\\n        if(val===val2) return true;\\n        throw new Error(\\'Not Equal\\');\\n    }\\n\\n    function notToBe(val2){\\n        if(val!==val2) return true;\\n        throw new Error(\\'Equal\\');\\n    }\\n    return {\\n        toBe,\\n        notToBe\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     function toBe(val2){\\n        if(val===val2) return true;\\n        throw new Error(\\'Not Equal\\');\\n    }\\n\\n    function notToBe(val2){\\n        if(val!==val2) return true;\\n        throw new Error(\\'Equal\\');\\n    }\\n    return {\\n        toBe,\\n        notToBe\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086928,
                "title": "write-a-function-expect-that-helps-developers-test-their-code",
                "content": "Write a function expect that helps developers test their code. It should take in any value val and return an object with the following two functions.\\n\\n\\n\\n# Intuition\\n\\nhere is a JavaScript function called expect that takes in any value val and returns an object with the following two functions: toBe() and notToBe():\\n\\n# Approach\\n- To use the expect function, simply pass in the value to be tested as an argument. The function will return an object with the toBe() and notToBe() functions.\\n\\n- The toBe() function takes in another value as an argument and returns true if the two values are equal to each other, and throws an error otherwise.\\n\\n- The notToBe() function takes in another value as an argument and returns true if the two values are not equal to each other, and throws an error otherwise.\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nfunction expect(val) {\\n  function toBe(otherVal) {\\n    if (val !== otherVal) {\\n      throw new Error(\\'Not Equal\\');\\n    }\\n    return true;\\n  }\\n\\n  function notToBe(otherVal) {\\n    if (val === otherVal) {\\n      throw new Error(\\'Equal\\');\\n    }\\n    return true;\\n  }\\n\\n  return {\\n    toBe,\\n    notToBe,\\n  };\\n}\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```\\nHere is an example of how to use the expect function:\\n```\\nexpect(5).notToBe(null);\\n// expect(5).toBe(5);\\n// expect(5).notToBe(5);\\n\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nfunction expect(val) {\\n  function toBe(otherVal) {\\n    if (val !== otherVal) {\\n      throw new Error(\\'Not Equal\\');\\n    }\\n    return true;\\n  }\\n\\n  function notToBe(otherVal) {\\n    if (val === otherVal) {\\n      throw new Error(\\'Equal\\');\\n    }\\n    return true;\\n  }\\n\\n  return {\\n    toBe,\\n    notToBe,\\n  };\\n}\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```\n```\\nexpect(5).notToBe(null);\\n// expect(5).toBe(5);\\n// expect(5).notToBe(5);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4086103,
                "title": "to-be-or-not-to-be",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n      toBe: (val2) => (val !== val2 ? (() => { throw new Error(\"Not Equal\"); })() : true),\\n      notToBe: (val2) => (val === val2 ? (() => { throw new Error(\"Equal\"); })() : true)\\n    }\\n};\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n      toBe: (val2) => (val !== val2 ? (() => { throw new Error(\"Not Equal\"); })() : true),\\n      notToBe: (val2) => (val === val2 ? (() => { throw new Error(\"Equal\"); })() : true)\\n    }\\n};\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080693,
                "title": "short-simple-and-powerfull-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nsimple if statement with true or false but i use ternary operators\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsimple 2 functions with toBe and notToBe to solve the case\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const error = (err) => {throw new Error(err)};\\n    return{\\n        toBe : (n)=> n === val ? true : error(\"Not Equal\"),\\n        notToBe : (n)=> n !== val ? true : error(\"Equal\")\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const error = (err) => {throw new Error(err)};\\n    return{\\n        toBe : (n)=> n === val ? true : error(\"Not Equal\"),\\n        notToBe : (n)=> n !== val ? true : error(\"Equal\")\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077450,
                "title": "luv-tesrs",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const toBe = (num) => {\\n        if (val === num) {\\n            return true\\n        } else {\\n            throw new Error(\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (num) => {\\n        if (val !== num) {\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const toBe = (num) => {\\n        if (val === num) {\\n            return true\\n        } else {\\n            throw new Error(\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (num) => {\\n        if (val !== num) {\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4075043,
                "title": "to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->Practice JavaScript code practicing JavaScript syntax in returning multiple arg of functions\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLogic is easy to understand if you know how to work with JavaScript logical operators. Challenging part is how to return multiple functions in a function. It can be done by writing the functions in the return keyword already.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n O(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(value){\\n            if (val === value){\\n                return (true);\\n                }\\n            else{\\n                throw \\'Not Equal\\';\\n                };\\n            },\\n        notToBe: function (valueB){\\n            if (valueB !== val){\\n                return (true);\\n                }\\n            else{\\n                throw \\'Equal\\';\\n                };\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(value){\\n            if (val === value){\\n                return (true);\\n                }\\n            else{\\n                throw \\'Not Equal\\';\\n                };\\n            },\\n        notToBe: function (valueB){\\n            if (valueB !== val){\\n                return (true);\\n                }\\n            else{\\n                throw \\'Equal\\';\\n                };\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074240,
                "title": "explain-very-simple-here",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n     return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n     return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069996,
                "title": "good",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: (otherVal) => {\\n            return val === otherVal ? true : (() => { throw new Error(\"Not Equal\"); })();\\n        },\\n        notToBe: (otherVal) => {\\n            return val !== otherVal ? true : (() => { throw new Error(\"Equal\"); })();\\n        },\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: (otherVal) => {\\n            return val === otherVal ? true : (() => { throw new Error(\"Not Equal\"); })();\\n        },\\n        notToBe: (otherVal) => {\\n            return val !== otherVal ? true : (() => { throw new Error(\"Equal\"); })();\\n        },\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069037,
                "title": "to-be-or-not-to-be",
                "content": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(tobeVal){\\n        if(val === tobeVal){\\n            return true\\n        } else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n    function notToBe(notToBeVal){\\n        if(val !== notToBeVal){\\n            return true\\n        } else{\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n    \\n    return { toBe, notToBe }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(tobeVal){\\n        if(val === tobeVal){\\n            return true\\n        } else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n    function notToBe(notToBeVal){\\n        if(val !== notToBeVal){\\n            return true\\n        } else{\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n    \\n    return { toBe, notToBe }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */",
                "codeTag": "Unknown"
            },
            {
                "id": 4068557,
                "title": "just-another-javascript-syntax",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    var toBe = function(value){\\n        if(val === value){\\n            return true;\\n        } else {\\n            throw \"Not Equal\";\\n        }\\n    };\\n    var notToBe = function(value){\\n        if(val !== value) {\\n            return true;\\n        } else {\\n            throw \"Equal\";\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    var toBe = function(value){\\n        if(val === value){\\n            return true;\\n        } else {\\n            throw \"Not Equal\";\\n        }\\n    };\\n    var notToBe = function(value){\\n        if(val !== value) {\\n            return true;\\n        } else {\\n            throw \"Equal\";\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066526,
                "title": "i-m-newbie-thx-for-let-me-learn",
                "content": "# Intuition\\nThe  throw part was kind tricky for me since i didn\\'t that exits lol. Thanks the community for this space to learn Js\\n\\n# Approach\\nComplete the 3 inputs examples\\n\\n# Complexity\\n- Time complexity: \\n51ms\\n\\n- Space complexity:\\n41.64MB\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = function(val) {\\n    \\n    let toBe = function(value){\\n        if(val===value){\\n            return true;\\n        }else{\\n            throw new Error (\"Not Equal\");\\n        }\\n\\n    }\\n    let notToBe = function(value){\\n        if(val!==value){\\n            return true;\\n        }else{\\n            throw new Error (\"Equal\");\\n        }\\n    }\\n    return {toBe, notToBe}\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = function(val) {\\n    \\n    let toBe = function(value){\\n        if(val===value){\\n            return true;\\n        }else{\\n            throw new Error (\"Not Equal\");\\n        }\\n\\n    }\\n    let notToBe = function(value){\\n        if(val!==value){\\n            return true;\\n        }else{\\n            throw new Error (\"Equal\");\\n        }\\n    }\\n    return {toBe, notToBe}\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064968,
                "title": "solved-this-one-using-ternary-operator-and-arrow-function-bad-time-and-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const toBe = (expected) => expected === val ? true : (() => { throw new Error(\"Not Equal\"); })();\\n    const notToBe = (expected) => expected !== val ? true : (() => { throw new Error(\"Equal\"); })();\\n    return {toBe,notToBe};\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const toBe = (expected) => expected === val ? true : (() => { throw new Error(\"Not Equal\"); })();\\n    const notToBe = (expected) => expected !== val ? true : (() => { throw new Error(\"Equal\"); })();\\n    return {toBe,notToBe};\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064640,
                "title": "any-better-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val === val2) return true;\\n            else throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (val2) => {\\n            if (val !== val2) return true;\\n            else throw new Error(\"Equal\");\\n        }\\n    } \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val === val2) return true;\\n            else throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (val2) => {\\n            if (val !== val2) return true;\\n            else throw new Error(\"Equal\");\\n        }\\n    } \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063888,
                "title": "tobe-or-nottobe",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMethod chaining in JavaScript refers to the practice of calling multiple methods on an object in a single line of code. This technique allows for a more concise and readable code by eliminating the need for intermediate variables or multiple lines of code.\\n\\nTo enable method chaining, each method call should return the object itself (this) or another object on which subsequent methods can be called. This allows the chaining of multiple method calls on the same object.\\n\\n# Code\\n```\\n/*\\n * @param {any} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        \\n        toBe: function(compareVal) {\\n            if (val === compareVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(compareVal) {\\n            if (val !== compareVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    }\\n\\n};\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/*\\n * @param {any} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        \\n        toBe: function(compareVal) {\\n            if (val === compareVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(compareVal) {\\n            if (val !== compareVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    }\\n\\n};\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061995,
                "title": "to-be-or-not-to-be-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n    toBe : (value) => {\\n        if(value === val){\\n            return true;\\n        }else{\\n            throw new Error(\\'Not Equal\\')\\n        }\\n    },\\n    \\n    notToBe : (value) => {\\n        if(value !== val){\\n            return true;\\n        }else{\\n            throw new Error(\\'Equal\\')\\n        }\\n    }\\n    \\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n    toBe : (value) => {\\n        if(value === val){\\n            return true;\\n        }else{\\n            throw new Error(\\'Not Equal\\')\\n        }\\n    },\\n    \\n    notToBe : (value) => {\\n        if(value !== val){\\n            return true;\\n        }else{\\n            throw new Error(\\'Equal\\')\\n        }\\n    }\\n    \\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060362,
                "title": "yep",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n  toBe:(expeted)=>{\\n      if(expeted!==val){\\n          throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n  },\\n  notToBe:(expeted)=>{\\n        if(expeted===val){\\n            throw new Error(\"Equal\")\\n        }\\n        return true;\\n  }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n  toBe:(expeted)=>{\\n      if(expeted!==val){\\n          throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n  },\\n  notToBe:(expeted)=>{\\n        if(expeted===val){\\n            throw new Error(\"Equal\")\\n        }\\n        return true;\\n  }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060106,
                "title": "my-solution-for-this-case",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n\\n            if(val !== val2) throw new Error(\\'Not Equal\\')\\n            else return true\\n        },\\n        notToBe: (val2) =>{\\n            if(val === val2) throw new Error(\\'Equal\\')\\n            else return true\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n\\n            if(val !== val2) throw new Error(\\'Not Equal\\')\\n            else return true\\n        },\\n        notToBe: (val2) =>{\\n            if(val === val2) throw new Error(\\'Equal\\')\\n            else return true\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059974,
                "title": "easiest-solution",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const throwError = (e) => { throw new Error(e) };\\n    return { \\n        toBe : function(data) {\\n            return val === data || throwError(\\'Not Equal\\');\\n        },\\n        notToBe : function(data) {\\n            return val !== data || throwError(\\'Equal\\');\\n        }\\n    } \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const throwError = (e) => { throw new Error(e) };\\n    return { \\n        toBe : function(data) {\\n            return val === data || throwError(\\'Not Equal\\');\\n        },\\n        notToBe : function(data) {\\n            return val !== data || throwError(\\'Equal\\');\\n        }\\n    } \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058849,
                "title": "just-a-easy-way-to-solve-the-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n\\nvar expect = function(firstVal) {\\n    return {\\n        toBe: (secondVal) => {\\n            if(firstVal === secondVal) {\\n                return firstVal === secondVal;\\n            }\\n            throw new Error(\\'Not Equal\\');\\n        },\\n        notToBe: (secondVal) => {\\n            if(firstVal !== secondVal) {\\n                return firstVal !== secondVal;\\n            }\\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n\\nvar expect = function(firstVal) {\\n    return {\\n        toBe: (secondVal) => {\\n            if(firstVal === secondVal) {\\n                return firstVal === secondVal;\\n            }\\n            throw new Error(\\'Not Equal\\');\\n        },\\n        notToBe: (secondVal) => {\\n            if(firstVal !== secondVal) {\\n                return firstVal !== secondVal;\\n            }\\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058511,
                "title": "to-be-or-not-to-be",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (x) => {\\n            if (x===val) return true;\\n            throw Error(\"Not Equal\")\\n        },\\n        notToBe: (x) => {\\n            if (x!==val) return true;\\n            throw Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (x) => {\\n            if (x===val) return true;\\n            throw Error(\"Not Equal\")\\n        },\\n        notToBe: (x) => {\\n            if (x!==val) return true;\\n            throw Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058510,
                "title": "to-be-or-not-to-be",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (x) => {\\n            if (x===val) return true;\\n            throw Error(\"Not Equal\")\\n        },\\n        notToBe: (x) => {\\n            if (x!==val) return true;\\n            throw Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (x) => {\\n            if (x===val) return true;\\n            throw Error(\"Not Equal\")\\n        },\\n        notToBe: (x) => {\\n            if (x!==val) return true;\\n            throw Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057615,
                "title": "to-be-or-not-to-be",
                "content": "# Code\\n\\nvar expect = function(val) {\\n    return {\\n    toBe: (val2) => {\\n      // true if the two values are equal\\n      if (val === val2) return true;\\n      // throw an error \"Not Equal\"\\n      throw new Error(\"Not Equal\");\\n    },\\n    notToBe: (val2) => {\\n      // true if the two values are not equal\\n      if (val !== val2) return true;\\n      // throw an error \"Equal\"\\n      throw new Error(\"Equal\");\\n    },\\n  };\\n};\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Code\\n\\nvar expect = function(val) {\\n    return {\\n    toBe: (val2) => {\\n      // true if the two values are equal\\n      if (val === val2) return true;\\n      // throw an error \"Not Equal\"\\n      throw new Error(\"Not Equal\");\\n    },\\n    notToBe: (val2) => {\\n      // true if the two values are not equal\\n      if (val !== val2) return true;\\n      // throw an error \"Equal\"\\n      throw new Error(\"Equal\");\\n    },\\n  };\\n};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4052037,
                "title": "solved-using-clouser",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    this.toBe = function(testVal) {\\n        if(testVal === val) return true;\\n        throw new Error(\"Not Equal\");\\n    }\\n\\n    this.notToBe = function(testVal){\\n        if(testVal !== val) return true;\\n        throw new Error(\"Equal\");\\n    }\\n    return this\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    this.toBe = function(testVal) {\\n        if(testVal === val) return true;\\n        throw new Error(\"Not Equal\");\\n    }\\n\\n    this.notToBe = function(testVal){\\n        if(testVal !== val) return true;\\n        throw new Error(\"Equal\");\\n    }\\n    return this\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050494,
                "title": "simple-solution-strength-basic-concept",
                "content": "\\n# Approach\\nIn JavaScript, a return statement is used to end the function and send a value back to the caller. When a return statement is encountered within a function, the execution of the function stops, and the specified value is returned to the code that called the function.The return statement can be used in several ways:To return a literal value: For example, if you have a function that calculates the area of a circle, you might use a return statement to return the calculated value. To do this, you would specify the literal value you want to return using the keyword \"return\" followed by the value you want to return.To return a reference to an object or variable: If you want to return a reference to an object or variable from a function, you can use the \"return\" keyword followed by the name of the object or variable. This will create a reference to the object or variable that can be used outside of the function.To return a promise: If your function returns a promise (an object that represents the eventual completion or failure of an asynchronous operation), you can use the \"return\" keyword followed by the promise object. This will allow other parts of your code to wait for the promise to resolve or reject before continuing.Overall, the return statement is an important part of writing functions in JavaScript because it allows you to control the flow of execution and return values to the caller.\\n\\n# Code\\n```\\nfunction expect(val) {\\n  return {\\n    toBe: function(expected) {\\n      if (val === expected) {\\n        return true;\\n      } else {\\n        throw new Error(\"Not Equal\");\\n      }\\n    },\\n    notToBe: function(expected) {\\n      if (val !== expected) {\\n        return true;\\n      } else {\\n        throw new Error(\"Equal\");\\n      }\\n    }\\n  }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction expect(val) {\\n  return {\\n    toBe: function(expected) {\\n      if (val === expected) {\\n        return true;\\n      } else {\\n        throw new Error(\"Not Equal\");\\n      }\\n    },\\n    notToBe: function(expected) {\\n      if (val !== expected) {\\n        return true;\\n      } else {\\n        throw new Error(\"Equal\");\\n      }\\n    }\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049815,
                "title": "js-simple-approach",
                "content": "# Intuition\\nThe code seems to be implementing a basic testing utility for making assertions and testing equality between values.\\n\\n# Approach\\nThe expect function takes a single argument val, which is the value you want to make assertions about. It returns an object with two methods: toBe and notToBe.\\n\\ntoBe: This method takes a parameter x and checks if x is equal to the val passed to expect. If they are equal, it returns true. Otherwise, it throws an exception with the message \"Not Equal.\"\\nnotToBe: This method takes a parameter y and checks if y is not equal to the val passed to expect. If they are not equal, it returns true. Otherwise, it throws an exception with the message \"Equal.\"\\nThe code is meant to be used for writing test cases and checking whether certain conditions are met in your JavaScript code.\\n\\n# Complexity\\nTime complexity: The time complexity of the toBe and notToBe methods is O(1) because they perform a simple equality check.\\nSpace complexity: The space complexity is also O(1) because the methods do not use additional data structures that scale with input size.\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:function (x){\\n            if(x===val)\\n            {\\n                return true;\\n            }\\n            throw \"Not Equal\"\\n        },\\n        notToBe:function(y){\\n            if(y!==val)\\n            {\\n                return true\\n            }\\n            throw \"Equal\"\\n        }\\n    };\\n};\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:function (x){\\n            if(x===val)\\n            {\\n                return true;\\n            }\\n            throw \"Not Equal\"\\n        },\\n        notToBe:function(y){\\n            if(y!==val)\\n            {\\n                return true\\n            }\\n            throw \"Equal\"\\n        }\\n    };\\n};\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048337,
                "title": "ts-js-99-4-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nconst expect = (val: any): ToBeOrNotToBe => {\\n    return {\\n        toBe: (value) => {\\n            if (val === value) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: (value) => {\\n            if (val !== value) {\\n                return true\\n            } else {\\n                throw new Error(\"Equal\")\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nconst expect = (val: any): ToBeOrNotToBe => {\\n    return {\\n        toBe: (value) => {\\n            if (val === value) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: (value) => {\\n            if (val !== value) {\\n                return true\\n            } else {\\n                throw new Error(\"Equal\")\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048273,
                "title": "javascript-tobe-or-nottobe-problem-100-accepted-most-easy-solution",
                "content": "# Intuition \\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirstly you have to understand that if the value is equal then we will return true otherwise will return an error. So, if the tobe(val2) is equal to val then we will return true. At the same way the notToBe(val2) should not be equal. \\n# Approach\\nWe divide the problem into two part. tobe and notToBe\\n\\n# Complexity\\nMost easy solution. 100% accepted.\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\nreturn {\\n  toBe: (val2) => {\\n      if (val===val2)  return true\\n      else throw new Error(\\'Not Equal\\')\\n     \\n  },\\n\\n  notToBe: (val2) => {\\n if (val !== val2) return true\\n \\n else  throw new Error (\\'Equal\\')\\n  }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\nreturn {\\n  toBe: (val2) => {\\n      if (val===val2)  return true\\n      else throw new Error(\\'Not Equal\\')\\n     \\n  },\\n\\n  notToBe: (val2) => {\\n if (val !== val2) return true\\n \\n else  throw new Error (\\'Equal\\')\\n  }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047692,
                "title": "to-be-or-not-to-be-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe(val1){\\n            if(val1 === val){\\n                return true;\\n            }else{\\n                throw new Error(\\'Not Equal\\');\\n            }\\n        },\\n        notToBe(val1){\\n            if(val1!==val){\\n                return true;\\n            }else{\\n                throw new Error(\\'Equal\\');\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe(val1){\\n            if(val1 === val){\\n                return true;\\n            }else{\\n                throw new Error(\\'Not Equal\\');\\n            }\\n        },\\n        notToBe(val1){\\n            if(val1!==val){\\n                return true;\\n            }else{\\n                throw new Error(\\'Equal\\');\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044783,
                "title": "basic-solution-by-creating-the-object",
                "content": "# Intuition\\nJust do as asked to do.\\n\\n# Approach\\n- Create the Object and assign it a variable with given value\\n- Create the methods as asked using comparator ===\\n- Finally return the object  \\n\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const obj = {}; //create object\\n    obj.val = val;    //assign it the value\\n    //now, create those two functions\\n    obj.toBe = function(val) {\\n        if (this.val === val){\\n            return true;\\n        } else {\\n            throw new Error(\"Not Equal\"); \\n        }       \\n    }\\n    obj.notToBe = function(val) {\\n        if (this.val !== val) {\\n            return true;\\n        } else {\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n    return obj; //finally return the object\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const obj = {}; //create object\\n    obj.val = val;    //assign it the value\\n    //now, create those two functions\\n    obj.toBe = function(val) {\\n        if (this.val === val){\\n            return true;\\n        } else {\\n            throw new Error(\"Not Equal\"); \\n        }       \\n    }\\n    obj.notToBe = function(val) {\\n        if (this.val !== val) {\\n            return true;\\n        } else {\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n    return obj; //finally return the object\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044609,
                "title": "working-solution-for-to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe take a function expect which returns an object, the object has two functions, these functions find if val is **strictly equal to** val1\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Take an object as return statement\\n2. Take two anonymous functions as its key: value pair\\n3. use if condition for logic \\n4. Throw error if condition is true and ***true*** if false\\n#\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     return {\\n        toBe: (val1) => {\\n            if(val !== val1){\\n                 throw new Error(\"Not Equal\")\\n            }\\n            else{ \\n                return true\\n            }\\n        }, \\n        notToBe: (val1) => {\\n            if(val === val1) throw new Error(\"Equal\")\\n            else{\\n                return true\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     return {\\n        toBe: (val1) => {\\n            if(val !== val1){\\n                 throw new Error(\"Not Equal\")\\n            }\\n            else{ \\n                return true\\n            }\\n        }, \\n        notToBe: (val1) => {\\n            if(val === val1) throw new Error(\"Equal\")\\n            else{\\n                return true\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043390,
                "title": "solution-in-typescript-with-testwrapper",
                "content": "# Intuition\\nI found this question very misleading.\\nI found the solution rather quickly , but the \\'throw new Error\\' part was causing the console to show an error, because type ToBeOrNotToBe is typed to always return a boolean, not an error\\n\\n# Approach\\nIn order to bypass the console error, I had to add an additional testWrapper function to deal with the error throwing.\\n\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe : (val2 : any) =>{\\n            if (val !== val2) throw new Error(\\'Not Equal\\')\\n            else return true\\n        },\\n        notToBe : (val2 : any) =>{\\n            if (val === val2) throw new Error(\\'Equal\\')\\n            else return true\\n        }\\n    }\\n\\n\\n\\n};\\n\\nfunction testWrapper(func: Function): { value?: boolean, error?: string } {\\n    try {\\n        return { value: func() };\\n    } catch (e) {\\n        return { error: e.message };\\n    }\\n}\\n\\ntestWrapper(()=> expect(5).toBe(5))\\ntestWrapper(()=>expect(5).notToBe(5))\\n\\n/*   expect(5).toBe(5); // true\\n  expect(5).notToBe(5); // throws \"Equal\" */\\n\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe : (val2 : any) =>{\\n            if (val !== val2) throw new Error(\\'Not Equal\\')\\n            else return true\\n        },\\n        notToBe : (val2 : any) =>{\\n            if (val === val2) throw new Error(\\'Equal\\')\\n            else return true\\n        }\\n    }\\n\\n\\n\\n};\\n\\nfunction testWrapper(func: Function): { value?: boolean, error?: string } {\\n    try {\\n        return { value: func() };\\n    } catch (e) {\\n        return { error: e.message };\\n    }\\n}\\n\\ntestWrapper(()=> expect(5).toBe(5))\\ntestWrapper(()=>expect(5).notToBe(5))\\n\\n/*   expect(5).toBe(5); // true\\n  expect(5).notToBe(5); // throws \"Equal\" */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042818,
                "title": "simplest-solution-using-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   return {\\n      toBe(val2){\\n         if(val === val2){\\n            return true;\\n         }else{\\n            throw new Error(\"Not Equal\")\\n         } \\n    },\\n    notToBe(val3){\\n         if(val !== val3){\\n            return true;\\n         }else{\\n            throw new Error(\"Equal\")\\n         } \\n    }\\n   }    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   return {\\n      toBe(val2){\\n         if(val === val2){\\n            return true;\\n         }else{\\n            throw new Error(\"Not Equal\")\\n         } \\n    },\\n    notToBe(val3){\\n         if(val !== val3){\\n            return true;\\n         }else{\\n            throw new Error(\"Equal\")\\n         } \\n    }\\n   }    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042688,
                "title": "not-beautiful-solution-but-at-the-moment-is-my-best",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    return {\\n        toBe: (val2) => {\\n            if (val === val2) {\\n                return true;\\n            } else {\\n                return throwError(\"Not Equal\");\\n            }\\n        },\\n        notToBe: (val2) => {\\n            if (val !== val2) {\\n                return true;\\n            } else {\\n                return throwError(\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    return {\\n        toBe: (val2) => {\\n            if (val === val2) {\\n                return true;\\n            } else {\\n                return throwError(\"Not Equal\");\\n            }\\n        },\\n        notToBe: (val2) => {\\n            if (val !== val2) {\\n                return true;\\n            } else {\\n                return throwError(\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041145,
                "title": "tobe-or-nottobe",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMy first thought to this problem is that I know that I must return two functions enclosed in an object with if statements to determine the needed outputs.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI approach it simply by using if statement to compare the arguments between the parent function and the child functions.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n2 mins\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n2 mins space\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe:function(val1){\\n            if(val===val1){\\n                return true\\n            }else{throw new Error(\"Not Equal\")}\\n        },\\n        notToBe:function(val2){\\n            if(val!==val2){\\n                return true\\n            }else if(val===val2){\\n                throw new Error(\"Equal\")\\n                }\\n                else{\\n                    return false\\n                }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe:function(val1){\\n            if(val===val1){\\n                return true\\n            }else{throw new Error(\"Not Equal\")}\\n        },\\n        notToBe:function(val2){\\n            if(val!==val2){\\n                return true\\n            }else if(val===val2){\\n                throw new Error(\"Equal\")\\n                }\\n                else{\\n                    return false\\n                }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039637,
                "title": "tobe-and-nottobe",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(otherVal)=>{\\n            if(val!==otherVal){\\n                throw new Error(\"Not Equal\")\\n            }else{\\n                return true\\n            }\\n        },\\n        notToBe:(otherVal)=>{\\n            if(val===otherVal){\\n                throw new Error(\"Equal\")\\n            }\\n            else{\\n                return true\\n            }\\n        }\\n    }\\n    \\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(otherVal)=>{\\n            if(val!==otherVal){\\n                throw new Error(\"Not Equal\")\\n            }else{\\n                return true\\n            }\\n        },\\n        notToBe:(otherVal)=>{\\n            if(val===otherVal){\\n                throw new Error(\"Equal\")\\n            }\\n            else{\\n                return true\\n            }\\n        }\\n    }\\n    \\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039526,
                "title": "simple",
                "content": "# Intuition\\n<!-- The problem is asking us to create a function, expect, which can be used to compare two values. The returned object should have two methods, toBe and notToBe, for checking equality and inequality respectively. The idea is to encapsulate the equality checks inside these methods and return true or throw an error based on the result. -->\\n\\n# Approach\\n<!-- toBe Method: This method should check if the given value is strictly equal (===) to the expected value. If true, it should return true. Otherwise, it throws an error with the message \"Not Equal\". notToBe Method: This method checks if the given value is not strictly equal (!==) to the expected value. If true, it should return true. Otherwise, it throws an error with the message \"Equal\".  -->\\n\\n# Complexity\\n- Time complexity:\\n<!--(1) for both For both toBe and notToBe methods. This is because the equality and inequality checks are constant time operations. -->\\n\\n- Space complexity:\\n<!-- (1) as no additional space is used relative to the input size. -->\\n\\n# Code\\n```\\nfunction expect(val) {\\n    return {\\n        toBe: function(expectedVal) {\\n            if (val === expectedVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(expectedVal) {\\n            if (val !== expectedVal) {\\n                if (val !== expectedVal) \\n                    return true;\\n                } else {\\n                    throw new Error(\"Equal\");\\n                }\\n            }\\n        };\\n    }\\n\\n    // Usage: \\n    try {\\n        console.log(expect(5). toBe(5)); // true\\n        console.log(expect(5).notToBe(4)); // true\\n        console.log(expect(5).toBe(4)); // throws error: \"Not Equal\"\\n    } catch (error) {\\n        console.error(error.message);\\n    }\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction expect(val) {\\n    return {\\n        toBe: function(expectedVal) {\\n            if (val === expectedVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(expectedVal) {\\n            if (val !== expectedVal) {\\n                if (val !== expectedVal) \\n                    return true;\\n                } else {\\n                    throw new Error(\"Equal\");\\n                }\\n            }\\n        };\\n    }\\n\\n    // Usage: \\n    try {\\n        console.log(expect(5). toBe(5)); // true\\n        console.log(expect(5).notToBe(4)); // true\\n        console.log(expect(5).toBe(4)); // throws error: \"Not Equal\"\\n    } catch (error) {\\n        console.error(error.message);\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038156,
                "title": "simple-and-easy-to-understand-js-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (a)=>{\\n            if(a===val) return true;\\n            throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (b)=>{\\n            if(b!==val) return true;\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (a)=>{\\n            if(a===val) return true;\\n            throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (b)=>{\\n            if(b!==val) return true;\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037414,
                "title": "clean-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if(val2 === val) return true\\n            throw Error(\"Not Equal\")\\n        },\\n        notToBe: (val2) => {\\n            if(val2 !== val) return true\\n            throw Error(\"Equal\")\\n        },\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if(val2 === val) return true\\n            throw Error(\"Not Equal\")\\n        },\\n        notToBe: (val2) => {\\n            if(val2 !== val) return true\\n            throw Error(\"Equal\")\\n        },\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034228,
                "title": "to-be-or-not-to-be-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val1) => {\\n          if (val === val1)\\n            return true \\n          else\\n           throw \"Not Equal\";             \\n        },\\n        notToBe: (val2) => {\\n        if (val !== val2)\\n            return true \\n          else\\n           throw \"Equal\"; \\n        },\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val1) => {\\n          if (val === val1)\\n            return true \\n          else\\n           throw \"Not Equal\";             \\n        },\\n        notToBe: (val2) => {\\n        if (val !== val2)\\n            return true \\n          else\\n           throw \"Equal\"; \\n        },\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033926,
                "title": "most-easy-javascript-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe:(fn)=>{\\n            if(fn===val) return true\\n            else throw \"Not Equal\"\\n        },\\n        notToBe:((fn1)=>{\\n            if(fn1!==val) return true;\\n            else throw \"Equal\"\\n        })\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe:(fn)=>{\\n            if(fn===val) return true\\n            else throw \"Not Equal\"\\n        },\\n        notToBe:((fn1)=>{\\n            if(fn1!==val) return true;\\n            else throw \"Equal\"\\n        })\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033878,
                "title": "to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function throwErrorMsg(error){\\n         throw new Error(error);\\n    }\\n    return {\\n        toBe:(param)=>{\\n           return val===param  ? true : throwErrorMsg(\"Not Equal\")\\n        },\\n        notToBe:(param)=>{\\n            return val!==param? true : throwErrorMsg(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function throwErrorMsg(error){\\n         throw new Error(error);\\n    }\\n    return {\\n        toBe:(param)=>{\\n           return val===param  ? true : throwErrorMsg(\"Not Equal\")\\n        },\\n        notToBe:(param)=>{\\n            return val!==param? true : throwErrorMsg(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4032639,
                "title": "es6-ternary-solution-with-iife",
                "content": "# Intuition\\nreturn object with methods\\n\\n# Approach\\npass params in methods and use operator ? : for false return use **IIFE** ( arrowFunction) ()\\n\\n# Complexity\\n- Time complexity:\\neasy concept low time to exec\\n\\n- Space complexity:\\nspace saving by using es6\\n\\n- to output errors as object \\n{error: \"Not Equal\"}\\nwe need to use throw new Error with IIFE\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = function(initVal) {\\n    return {\\n        toBe(toBeVal) {\\n            return initVal === toBeVal ? true : (() => { throw new Error(\"Not Equal\"); })();\\n        },\\n        notToBe(notToBeVal) {\\n            return initVal !== notToBeVal ? true : (() => { throw new Error(\"Equal\"); })();\\n        },\\n    };\\n};\\n\\n\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = function(initVal) {\\n    return {\\n        toBe(toBeVal) {\\n            return initVal === toBeVal ? true : (() => { throw new Error(\"Not Equal\"); })();\\n        },\\n        notToBe(notToBeVal) {\\n            return initVal !== notToBeVal ? true : (() => { throw new Error(\"Equal\"); })();\\n        },\\n    };\\n};\\n\\n\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031129,
                "title": "runtime-details-55ms-beats-64-41-of-users-with-typescript-memory-details-42-46mb-beats-75-81",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return{\\n        toBe:(v)=>{\\n            if(v!==val){\\n                throw new Error(\"Not Equal\");\\n            }\\n            return true;\\n        },\\n        notToBe:(v)=> {\\n            if(v===val){\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        }\\n    }\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return{\\n        toBe:(v)=>{\\n            if(v!==val){\\n                throw new Error(\"Not Equal\");\\n            }\\n            return true;\\n        },\\n        notToBe:(v)=> {\\n            if(v===val){\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        }\\n    }\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031089,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    const toBe = (va) => {\\n        if (va === val) {\\n            return true\\n        }\\n        else{\\n            return throwError (\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (va) =>{\\n        if(va !== val){\\n            return true;\\n        }\\n        else{\\n            return throwError(\"Equal\")\\n        }\\n    }\\n    return {toBe, notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const throwError = (errorStr) => {throw new Error(errorStr)};\\n    const toBe = (va) => {\\n        if (va === val) {\\n            return true\\n        }\\n        else{\\n            return throwError (\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (va) =>{\\n        if(va !== val){\\n            return true;\\n        }\\n        else{\\n            return throwError(\"Equal\")\\n        }\\n    }\\n    return {toBe, notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4030737,
                "title": "clean-solution-with-explanation",
                "content": "# Approach\\nThe purose of this problem is to simulate testing i.e. compare the `actual` output vs `expected`. Since the problem description says, return an object, simply start by returing the object and add given attributes. So I simply renamed the parameters to be `actual` and `expected` as well.\\n\\n# Explanation\\n- In terms of toBe, compare `expected` vs `actual` and return true if euqal.\\n- In terms of toBe, compare `expected` vs `actual` and return true if both are not equal.\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (actual) {\\n  return {\\n    toBe: (expected) => {\\n      if (actual === expected) return true;\\n      throw new Error(\"Not Equal\")\\n    },\\n    notToBe: (expected) => {\\n      if (actual !== expected) return true;\\n      throw new Error(\"Equal\")\\n    },\\n  };\\n};\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (actual) {\\n  return {\\n    toBe: (expected) => {\\n      if (actual === expected) return true;\\n      throw new Error(\"Not Equal\")\\n    },\\n    notToBe: (expected) => {\\n      if (actual !== expected) return true;\\n      throw new Error(\"Equal\")\\n    },\\n  };\\n};\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4029273,
                "title": "outplay-98-90-runtime",
                "content": "# Approach\\nMade an object to return. `toBe()` and `notToBe()` are the keys that hold a function as values.\\n`toBe` if values !=, throw error or return true. No need for `else`\\nSimilar with `notToBe`.\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    // see syntax carefully\\n    return { // object\\n        toBe:(v)=>{\\n            if(val!==v) throw new Error (`Not Equal`); // bracket for text, `` not enough\\n            return true; // no else needed\\n        },\\n        notToBe:(v)=>{\\n            if(val===v) throw new Error (`Equal`);\\n            return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    // see syntax carefully\\n    return { // object\\n        toBe:(v)=>{\\n            if(val!==v) throw new Error (`Not Equal`); // bracket for text, `` not enough\\n            return true; // no else needed\\n        },\\n        notToBe:(v)=>{\\n            if(val===v) throw new Error (`Equal`);\\n            return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025364,
                "title": "to-be-or-not-to-be",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: (newVal) => {\\n            if (val === newVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\")\\n            }\\n        }\\n        ,\\n        notToBe: (newVal) => {\\n            if (val !== newVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: (newVal) => {\\n            if (val === newVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\")\\n            }\\n        }\\n        ,\\n        notToBe: (newVal) => {\\n            if (val !== newVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025156,
                "title": "ts-function-return-types",
                "content": "# Code\\n```\\ntype beReturn = boolean | Error\\n\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => beReturn;\\n    notToBe: (val: any) => beReturn;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n     const toBe = (x: number): beReturn => {\\n        if (x === val){\\n            return true\\n        }\\n        throw Error(\"Not Equal\")\\n    }\\n    const notToBe = (x: number): beReturn => {\\n        if (x !== val) {\\n            return true\\n        }\\n        throw Error(\"Equal\")\\n    }\\n    return {\"toBe\": toBe,\"notToBe\":notToBe}\\n};",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "# Code\\n```\\ntype beReturn = boolean | Error\\n\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => beReturn;\\n    notToBe: (val: any) => beReturn;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n     const toBe = (x: number): beReturn => {\\n        if (x === val){\\n            return true\\n        }\\n        throw Error(\"Not Equal\")\\n    }\\n    const notToBe = (x: number): beReturn => {\\n        if (x !== val) {\\n            return true\\n        }\\n        throw Error(\"Equal\")\\n    }\\n    return {\"toBe\": toBe,\"notToBe\":notToBe}\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 4021949,
                "title": "solution-using-strict-operator",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n\\n    return {\\n        toBe: (value) => {\\n            if (val !== value) throw new Error(\"Not Equal\");\\n            return true;\\n        },\\n        notToBe: (value) => {\\n            if (val === value) throw new Error(\"Equal\");\\n            return true;\\n        }\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n\\n    return {\\n        toBe: (value) => {\\n            if (val !== value) throw new Error(\"Not Equal\");\\n            return true;\\n        },\\n        notToBe: (value) => {\\n            if (val === value) throw new Error(\"Equal\");\\n            return true;\\n        }\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020589,
                "title": "access-functions-inside-function",
                "content": "\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    var toBe=function(val1){\\n      if(val1===val) return true\\n      else throw new Error(\"Not Equal\")\\n    };\\n    var notToBe = function(val2){\\n      if(val!==val2) return true\\n      else throw new Error(\"Equal\")\\n    }\\n    return {\\n      toBe:toBe,\\n      notToBe: notToBe\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    var toBe=function(val1){\\n      if(val1===val) return true\\n      else throw new Error(\"Not Equal\")\\n    };\\n    var notToBe = function(val2){\\n      if(val!==val2) return true\\n      else throw new Error(\"Equal\")\\n    }\\n    return {\\n      toBe:toBe,\\n      notToBe: notToBe\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020463,
                "title": "simple-and-beginner-friendly-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe problem requires the expect function to support making toBe and notToBe calls (e.g., expect(5).toBe(5); should return true, and expect(5).notToBe(5); should throw \"Equal\"). To do so, we should define the return of the expect function based on what kind of call we make.\\n\\n\\n# Code\\n```\\nvar expect = function (val) {\\n  return {\\n    toBe: (val2) => {\\n      if (val === val2) return true;\\n      else throw new Error(\"Not Equal\");\\n    },\\n    notToBe: (val2) => {\\n      if (val !== val2) return true;\\n      else throw new Error(\"Equal\");\\n    },\\n  };\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function (val) {\\n  return {\\n    toBe: (val2) => {\\n      if (val === val2) return true;\\n      else throw new Error(\"Not Equal\");\\n    },\\n    notToBe: (val2) => {\\n      if (val !== val2) return true;\\n      else throw new Error(\"Equal\");\\n    },\\n  };\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020102,
                "title": "easy-to-understand-each-step-is-clean-and-clear",
                "content": "# Approach\\n1- Ceate two functions toBe() and notToBe()\\n2- Compare their parameters with the parent function\\n3- Thats it\\n\\n# TYPESCRIPT\\n\\n# Code\\n```ts\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(value: any): ToBeOrNotToBe {\\n    function toBe (val : number){\\n        if(value === val){\\n \\n            return true\\n        }\\n        else{\\n \\n            throw new Error (\"Not Equal\")\\n        }\\n     }\\n       function notToBe (val : number){\\n        if(value !== val){\\n \\n            return true\\n        }\\n        else{\\n \\n            throw new Error (\"Equal\")\\n        }\\n     }\\n\\n     return {\\n        toBe,\\n        notToBe\\n     }\\n};\\n\\n/*const val = 5;\\nconst abc = expect(val)\\nabc.toBe(5)\\nabc.notToBe(5)\\n*/\\n```\\n# JAVASCRIPT\\n# CODE\\n```JS\\nfunction expect(val) {\\n  function toBe(value) {\\n    if (value === val) {\\n      return true;\\n    } else {\\n      throw new Error(\"Not Equal\");\\n    }\\n  }\\n  function notToBe(value) {\\n    if(value !== val ){\\n      return true\\n    }else{\\n      throw new Error (\"Equal\")\\n    }\\n  }\\n\\n  return {\\n    toBe,\\n    notToBe,\\n  }\\n}\\n\\n/*const val = 5;\\nconst abc = expect(val)\\nabc.toBe(5)\\nabc.notToBe(5)\\n*/\\n\\n```\\n\\n",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```ts\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(value: any): ToBeOrNotToBe {\\n    function toBe (val : number){\\n        if(value === val){\\n \\n            return true\\n        }\\n        else{\\n \\n            throw new Error (\"Not Equal\")\\n        }\\n     }\\n       function notToBe (val : number){\\n        if(value !== val){\\n \\n            return true\\n        }\\n        else{\\n \\n            throw new Error (\"Equal\")\\n        }\\n     }\\n\\n     return {\\n        toBe,\\n        notToBe\\n     }\\n};\\n\\n/*const val = 5;\\nconst abc = expect(val)\\nabc.toBe(5)\\nabc.notToBe(5)\\n*/\\n```\n```JS\\nfunction expect(val) {\\n  function toBe(value) {\\n    if (value === val) {\\n      return true;\\n    } else {\\n      throw new Error(\"Not Equal\");\\n    }\\n  }\\n  function notToBe(value) {\\n    if(value !== val ){\\n      return true\\n    }else{\\n      throw new Error (\"Equal\")\\n    }\\n  }\\n\\n  return {\\n    toBe,\\n    notToBe,\\n  }\\n}\\n\\n/*const val = 5;\\nconst abc = expect(val)\\nabc.toBe(5)\\nabc.notToBe(5)\\n*/\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4018898,
                "title": "to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013214,
                "title": "javascript-detailed-explaination-easy-to-understand",
                "content": "# Intuition\\nThe `expect` function is designed to help developers test their code by comparing values and throwing errors when the values are not as expected. It provides two methods, `toBe` and `notToBe`, which check for strict equality (`===`) and strict inequality (`!==`) respectively.\\n\\n# Approach\\nWe have implemented the `expect` function that returns an object with two methods:\\n1. `toBe(value)`: This method compares the given `value` with the initial `val` and returns `true` if they are equal. If they are not equal, it throws an error with the message \"Not Equal.\"\\n\\n2. `notToBe(value)`: This method compares the given `value` with the initial `val` and returns `true` if they are not equal. If they are equal, it throws an error with the message \"Equal.\"\\n\\nWe\\'ve used JavaScript\\'s strict equality (`===`) and strict inequality (`!==`) operators to perform the comparisons.\\n\\n# Complexity\\n- Time complexity: Both `toBe` and `notToBe` methods have constant time complexity, i.e., O(1), because they perform a single comparison operation.\\n\\n- Space complexity: The `expect` function returns an object with two methods, but their memory usage is negligible. Therefore, the space complexity is also O(1).\\n\\n# Code\\n```javascript\\nvar expect = function (val) {\\n    return {\\n        toBe(value) {\\n            if (value === val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe(value) {\\n            if (value !== val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n// Example usages:\\ntry {\\n    expect(5).toBe(5); // Returns {\"value\": true}\\n    expect(5).notToBe(5); // Throws an error \"Equal\"\\n    expect(5).toBe(null); // Throws an error \"Not Equal\"\\n    expect(5).notToBe(null); // Returns {\"value\": true}\\n} catch (error) {\\n    console.error(error.message);\\n}\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar expect = function (val) {\\n    return {\\n        toBe(value) {\\n            if (value === val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe(value) {\\n            if (value !== val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n// Example usages:\\ntry {\\n    expect(5).toBe(5); // Returns {\"value\": true}\\n    expect(5).notToBe(5); // Throws an error \"Equal\"\\n    expect(5).toBe(null); // Throws an error \"Not Equal\"\\n    expect(5).notToBe(null); // Returns {\"value\": true}\\n} catch (error) {\\n    console.error(error.message);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012240,
                "title": "beats-90-68-of-users-with-javascript-with-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (num) => {if(val === num){\\n            return  true\\n        }else {\\n            throw new Error(\"Not Equal\")\\n        }\\n          },\\n        notToBe: (num) => {if(val !== num) {\\n            return true\\n            } else {\\n                 throw new Error(\"Equal\")\\n            }\\n            }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (num) => {if(val === num){\\n            return  true\\n        }else {\\n            throw new Error(\"Not Equal\")\\n        }\\n          },\\n        notToBe: (num) => {if(val !== num) {\\n            return true\\n            } else {\\n                 throw new Error(\"Equal\")\\n            }\\n            }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4011240,
                "title": "tobe-or-nottobe",
                "content": "# Intuition\\nknew it should be if\\n\\n# Approach\\ncreating if for both toBe and notToBe\\n\\n# Complexity\\n- Time complexity:\\nAdd your time complexity here, e.g. $$O(n)$$\\n\\n- Space complexity:\\nAdd your space complexity here, e.g. $$O(n)$$\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe(val1) {\\n            if(val1 === val) {\\n                return true;\\n            } else {\\n                throw \"Not Equal\";\\n            }\\n        },\\n        notToBe(val2) {\\n            if(val2 !== val) {\\n                return true;\\n            } else {\\n                throw \"Equal\";\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe(val1) {\\n            if(val1 === val) {\\n                return true;\\n            } else {\\n                throw \"Not Equal\";\\n            }\\n        },\\n        notToBe(val2) {\\n            if(val2 !== val) {\\n                return true;\\n            } else {\\n                throw \"Equal\";\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008698,
                "title": "its-method-chaining",
                "content": "# Intuition\\nThe question itself is asking us to create an object. To get more clarity on that take a look at the example inputs. \\n\\nexpect(5).toBe(5)\\n\\nThat means we are calling expect function with argument 5 and toBe function inside that with argument 5.\\n\\n# Approach\\n1. Simply create two objects toBe and notToBe as said.\\n2. Carefully frame your if else statements so that you only return true once and handle the other condition with new error.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function (val2){\\n            if (val !== val2){\\n                throw new Error(\"Not Equal\")\\n            } else return true\\n        },\\n        notToBe: function(val3){\\n            if(val3 === val){\\n                throw new Error(\"Equal\")\\n            } else return true\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function (val2){\\n            if (val !== val2){\\n                throw new Error(\"Not Equal\")\\n            } else return true\\n        },\\n        notToBe: function(val3){\\n            if(val3 === val){\\n                throw new Error(\"Equal\")\\n            } else return true\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006817,
                "title": "2704-to-be-or-not-to-be-easy-method-explained",
                "content": "# Intuition\\nOur expect function takes a val argument.And we need to create **2 ** object functions within function .` toBe(val) `accepts another value and returns true if the two values` === `each other. If they are not equal, it should throw an error \"Not Equal\".\\n`notToBe(val)` accepts another value and returns true if the two values` !==` each other. If they are equal, it should throw an error \"Equal\".\\n \\n\\n# Approach\\n>We can use the expect function to compare values using toBe and notToBe as shown in the example usage. If the values are not equal when using toBe, it will throw a \"Not Equal\" error. If the values are equal when using notToBe, it will throw an \"Equal\" error.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(otherVal){\\n            if(val !== otherVal){\\n                throw new Error(\"Not Equal\");\\n            }\\n            return true;\\n        },\\n         notToBe: function(otherVal){\\n            if(val === otherVal){\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        },\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```\\n**Upvote **\\n![killlakill-upvote.gif](https://assets.leetcode.com/users/images/73c6efc4-de0c-4de9-855d-ded9cdc93e29_1693937652.3225262.gif)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(otherVal){\\n            if(val !== otherVal){\\n                throw new Error(\"Not Equal\");\\n            }\\n            return true;\\n        },\\n         notToBe: function(otherVal){\\n            if(val === otherVal){\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        },\\n\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4005586,
                "title": "that-s-simple-not-a-rocket-science-guyzzz",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: (num) => {\\n            \\n                if (val === num) {\\n                    return true;\\n                } else {\\n                    throw new Error(\"Not Equal\");\\n                }\\n            \\n        },\\n        notToBe: (num) => {\\n             \\n                if (val !== num) {\\n                    return true;\\n                } else {\\n                    throw Error(\"Equal\");\\n                }\\n            \\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    return {\\n        toBe: (num) => {\\n            \\n                if (val === num) {\\n                    return true;\\n                } else {\\n                    throw new Error(\"Not Equal\");\\n                }\\n            \\n        },\\n        notToBe: (num) => {\\n             \\n                if (val !== num) {\\n                    return true;\\n                } else {\\n                    throw Error(\"Equal\");\\n                }\\n            \\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4005443,
                "title": "to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   const toBe = (valToBe) => {\\n        if (val === valToBe) {\\n            return true\\n        } else {\\n            throw new Error(\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (notVal) => {\\n        if(val !== notVal) {\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n    }\\n\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   const toBe = (valToBe) => {\\n        if (val === valToBe) {\\n            return true\\n        } else {\\n            throw new Error(\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (notVal) => {\\n        if(val !== notVal) {\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n    }\\n\\n\\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002784,
                "title": "good",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe (val2) {\\n        if (val !== val2) {\\n          throw new Error(\"Not Equal\");\\n        } else {\\n          return true;\\n        }\\n      } \\n\\n      function notToBe (val2) {\\n        if (val === val2) {\\n          throw new Error(\"Equal\");\\n        } else {\\n          return true;\\n        }\\n      }\\n      \\n  return {\\n      toBe,\\n      notToBe\\n     }\\n};\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \\u0451\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe (val2) {\\n        if (val !== val2) {\\n          throw new Error(\"Not Equal\");\\n        } else {\\n          return true;\\n        }\\n      } \\n\\n      function notToBe (val2) {\\n        if (val === val2) {\\n          throw new Error(\"Equal\");\\n        } else {\\n          return true;\\n        }\\n      }\\n      \\n  return {\\n      toBe,\\n      notToBe\\n     }\\n};\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \\u0451\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001765,
                "title": "simple-solution-for-the-simple-task",
                "content": "# Code\\n```\\nvar expect = function(val) {\\n    return {\\n        toBe: (otherVal) => {\\n            if (val === otherVal) return true;\\n            throw new Error(\\'Not Equal\\');\\n        },\\n        notToBe: (otherVal) => {\\n            if (val !== otherVal) return true;\\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function(val) {\\n    return {\\n        toBe: (otherVal) => {\\n            if (val === otherVal) return true;\\n            throw new Error(\\'Not Equal\\');\\n        },\\n        notToBe: (otherVal) => {\\n            if (val !== otherVal) return true;\\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001292,
                "title": "to-be-or-not-to-be-that-is-the-question",
                "content": "# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n  return {\\n    toBe: (checkVal) => {\\n      if (val === checkVal)\\n        return true;\\n      throw new Error(\\'Not Equal\\');\\n    },\\n    notToBe: (checkVal) => {\\n      if (val !== checkVal)\\n        return true;\\n      throw new Error(\\'Equal\\');\\n    }\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n  return {\\n    toBe: (checkVal) => {\\n      if (val === checkVal)\\n        return true;\\n      throw new Error(\\'Not Equal\\');\\n    },\\n    notToBe: (checkVal) => {\\n      if (val !== checkVal)\\n        return true;\\n      throw new Error(\\'Equal\\');\\n    }\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996677,
                "title": "simple-short-function-object-notation-used",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nShould know about clojures\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nJust do as the question says - need to know clojures , written in short hand object notation\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe(inp){\\n            if (val === inp){\\n                return true;\\n            }\\n            throw Error(\"Not Equal\");\\n        },\\n        notToBe(inp){\\n            if (inp !== val){\\n                return true;\\n            }\\n            throw Error(\"Equal\");\\n        }\\n    }\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe(inp){\\n            if (val === inp){\\n                return true;\\n            }\\n            throw Error(\"Not Equal\");\\n        },\\n        notToBe(inp){\\n            if (inp !== val){\\n                return true;\\n            }\\n            throw Error(\"Equal\");\\n        }\\n    }\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996183,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (params) => {\\n            if(params === val) {\\n                return  true\\n            } else {\\n                throw  \"Not Equal\"\\n            }\\n        },\\n        notToBe: (params) => {\\n            if(params !== val) {\\n                return true\\n            } else {\\n                throw \"Equal\"\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (params) => {\\n            if(params === val) {\\n                return  true\\n            } else {\\n                throw  \"Not Equal\"\\n            }\\n        },\\n        notToBe: (params) => {\\n            if(params !== val) {\\n                return true\\n            } else {\\n                throw \"Equal\"\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3995819,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect=val=>{\\n    return{\\n        toBe: val2 => {\\n            if(val===val2){\\n                return true\\n            }else{\\n                throw new Error(\"Not Equal\")\\n            }\\n        },\\n        notToBe:val2=>{\\n            if (val!==val2){\\n            return true\\n            }else {\\n                throw new Error (\"Equal\")\\n            }}}}\\n    \\n    \\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect=val=>{\\n    return{\\n        toBe: val2 => {\\n            if(val===val2){\\n                return true\\n            }else{\\n                throw new Error(\"Not Equal\")\\n            }\\n        },\\n        notToBe:val2=>{\\n            if (val!==val2){\\n            return true\\n            }else {\\n                throw new Error (\"Equal\")\\n            }}}}\\n    \\n    \\n\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994277,
                "title": "simple-and-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    const obj= { toBe:   function toBe(val2) {\\n        if((val===val2))\\n        return true;\\n        else\\n        throw \"Not Equal\" ;\\n\\n    }, notToBe:  function notToBe(val2){\\n        if((val!==val2))\\n        return true;\\n        else\\n        throw \"Equal\" ;\\n\\n    }}\\n    return obj;\\n    \\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    const obj= { toBe:   function toBe(val2) {\\n        if((val===val2))\\n        return true;\\n        else\\n        throw \"Not Equal\" ;\\n\\n    }, notToBe:  function notToBe(val2){\\n        if((val!==val2))\\n        return true;\\n        else\\n        throw \"Equal\" ;\\n\\n    }}\\n    return obj;\\n    \\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994137,
                "title": "simple-intuitive-solution-using-object",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition was to return an object from the function. The object would have two keys: `toBe` and `notToBe`, which are lambda functions to work according to the requirement.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- The key `toBe` will have a lambda function that takes parameter `n` and compares the value of `n` with the value of `val`. If `val` is equal to `n`, then it will return `true`. Otherwise, we will throw an error using the `Error()` class constructor with the message `\"Not Equal\"`.\\n- The key `notToBe` will have a lambda function that takes parameter `n` and compares the value of `n` with the value of `val`. If `val` is not equal to `n`, then it will return `true`. Otherwise, we will throw an error using the `Error()` class constructor with the message `\"Equal\"`.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nSince there is no loop of recursive function call, the time complexity of the function will be $$O(1)$$, i.e. constant time.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSince we are using only constant memory, independent of the value of `val` or `n`, the resultant space complexity is also constant, i.e. $$O(1)$$.\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (n) => {\\n            if(n === val)\\n                return true;\\n            throw Error(\"Not Equal\");\\n        },\\n        notToBe: (n) => {\\n            if(n !== val)\\n                return true;\\n            throw Error(\"Equal\");\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (n) => {\\n            if(n === val)\\n                return true;\\n            throw Error(\"Not Equal\");\\n        },\\n        notToBe: (n) => {\\n            if(n !== val)\\n                return true;\\n            throw Error(\"Equal\");\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994053,
                "title": "simple-solution-with-arrow-function",
                "content": "# Approach\\n\\nProblem is solved by returning an object with functions. \\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n\\n    const toBe = (valToBe) => {\\n        if (val === valToBe) {\\n            return true\\n        } else {\\n            throw new Error(\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (notVal) => {\\n        if(val !== notVal) {\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n\\n    const toBe = (valToBe) => {\\n        if (val === valToBe) {\\n            return true\\n        } else {\\n            throw new Error(\"Not Equal\")\\n        }\\n    }\\n\\n    const notToBe = (notVal) => {\\n        if(val !== notVal) {\\n            return true\\n        } else {\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n\\n    return {toBe, notToBe}\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3993636,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n    return {\\n        toBe: (value) => {\\n            if (val === value) {\\n                return true\\n            }\\n            \\n            throw new Error(\\'Not Equal\\');\\n        },\\n        notToBe: (value) => {\\n            if (val !== value) {\\n                return true\\n            }\\n            \\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n    return {\\n        toBe: (value) => {\\n            if (val === value) {\\n                return true\\n            }\\n            \\n            throw new Error(\\'Not Equal\\');\\n        },\\n        notToBe: (value) => {\\n            if (val !== value) {\\n                return true\\n            }\\n            \\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992494,
                "title": "just-simple-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val1) => val === val1 || (() => { throw new Error(\"Not Equal\"); })(),\\n        notToBe: (val1) => val !== val1 || (() => { throw new Error(\"Equal\"); })()\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val1) => val === val1 || (() => { throw new Error(\"Not Equal\"); })(),\\n        notToBe: (val1) => val !== val1 || (() => { throw new Error(\"Equal\"); })()\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3991737,
                "title": "easy-typecript-solution",
                "content": "# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe(val1){\\n            if(val1 === val){\\n                return true;\\n            }else{\\n                throw \"Not Equal\";\\n            }\\n        },\\n        notToBe(val2){\\n            if( val2 !== val){\\n                return true;\\n            }else{\\n                throw \"Equal\";\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe(val1){\\n            if(val1 === val){\\n                return true;\\n            }else{\\n                throw \"Not Equal\";\\n            }\\n        },\\n        notToBe(val2){\\n            if( val2 !== val){\\n                return true;\\n            }else{\\n                throw \"Equal\";\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3991692,
                "title": "composed-solution-to-return-the-precise-js-object",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ngo through the initial step to tackle the question.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     return {\\n         toBe:(val2)=>{\\n             if(val ===val2){\\n                 return true\\n             }\\n                 throw Error(\"Not Equal\")\\n             },\\n             notToBe:(val2)=>{\\n                 if(val === val2){\\n                     throw Error(\"Equal\")\\n                 }\\n                     return true\\n                 \\n             }\\n         }\\n     }\\n        \\n         \\n    \\n\\n\\ntry{\\nexpect(5).toBe(5); // true\\nexpect(5).notToBe(null); // throws \"Equal\"\\n}catch(e){\\n    console.error(e.message);\\n}\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     return {\\n         toBe:(val2)=>{\\n             if(val ===val2){\\n                 return true\\n             }\\n                 throw Error(\"Not Equal\")\\n             },\\n             notToBe:(val2)=>{\\n                 if(val === val2){\\n                     throw Error(\"Equal\")\\n                 }\\n                     return true\\n                 \\n             }\\n         }\\n     }\\n        \\n         \\n    \\n\\n\\ntry{\\nexpect(5).toBe(5); // true\\nexpect(5).notToBe(null); // throws \"Equal\"\\n}catch(e){\\n    console.error(e.message);\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3987543,
                "title": "split-the-problem-in-chunks",
                "content": "# Intuition\\nEasy to solve if you split the problem in chunks.\\n\\n# Approach\\n\\n1. First return an object.\\n2. Then make 2 functions inside it.\\n3. Then add \\'if else\\' statement.\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n\\n- Space complexity: O(1)\\n\\n\\n# Code\\n```\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            return true;\\n        }\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            return true;\\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3987354,
                "title": "javascript-simple-solution",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if (val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if (val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3980827,
                "title": "easy-and-concise-solution",
                "content": "# Approach\\nWe can use ternary operator to return the values of function or error\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = (val)=> {\\n    const throwErr = (str)=> {\\n    throw new Error(str);\\n    }\\n\\n    return {\\n        toBe: (val2)=> val===val2?true:throwErr(\"Not Equal\"),\\n\\n        notToBe: (val2) => val!==val2?true:throwErr(\"Equal\")\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = (val)=> {\\n    const throwErr = (str)=> {\\n    throw new Error(str);\\n    }\\n\\n    return {\\n        toBe: (val2)=> val===val2?true:throwErr(\"Not Equal\"),\\n\\n        notToBe: (val2) => val!==val2?true:throwErr(\"Equal\")\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978160,
                "title": "b",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n    toBe: (val2) =>{\\n    if(val !== val2) throw new Error(\\'Not Equal\\')\\n    else return true\\n    },\\n    notToBe: (val2) =>{\\n    if(val === val2 ) throw new Error(\\'Equal\\') \\n    else return true\\n    }}};\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n    toBe: (val2) =>{\\n    if(val !== val2) throw new Error(\\'Not Equal\\')\\n    else return true\\n    },\\n    notToBe: (val2) =>{\\n    if(val === val2 ) throw new Error(\\'Equal\\') \\n    else return true\\n    }}};\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3977809,
                "title": "beats-99-98-of-users-with-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = (v1) => {\\n    return{\\n        toBe:(v2)=>(v1 === v2)?true:th(\\'Not Equal\\'),\\n        notToBe:(v2)=>(v1 !== v2)?true:th(\\'Equal\\')\\n    }\\n};\\nvar th = (m) =>{throw new Error(m)};\\n\\n\\n\\n//expect(5).toBe(5); // true\\n//expect(5).notToBe(5); // throws \"Equal\"\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = (v1) => {\\n    return{\\n        toBe:(v2)=>(v1 === v2)?true:th(\\'Not Equal\\'),\\n        notToBe:(v2)=>(v1 !== v2)?true:th(\\'Equal\\')\\n    }\\n};\\nvar th = (m) =>{throw new Error(m)};\\n\\n\\n\\n//expect(5).toBe(5); // true\\n//expect(5).notToBe(5); // throws \"Equal\"\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976318,
                "title": "javascript-solution",
                "content": "# Intuition\\nTwo keys to the problem are putting a function in a JSON object and throwing an error.\\n\\n# Approach\\nFirst, I return an object that sets two functions named `toBe` and `notToBe`.\\nSecond, I implement the functions. Depending on the conditions, throw an error or return true.\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe(innerVal) {\\n\\n            if(val !== innerVal){\\n                throw new Error(\\'Not Equal\\');\\n            }\\n\\n            return true;\\n        },\\n        notToBe(innerVal) {\\n\\n            if(val === innerVal){\\n                throw new Error(\\'Equal\\');\\n            }\\n\\n            return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    \\n    return {\\n        toBe(innerVal) {\\n\\n            if(val !== innerVal){\\n                throw new Error(\\'Not Equal\\');\\n            }\\n\\n            return true;\\n        },\\n        notToBe(innerVal) {\\n\\n            if(val === innerVal){\\n                throw new Error(\\'Equal\\');\\n            }\\n\\n            return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976000,
                "title": "js-simplest-solution-by-throwing-simple-errors-and-returning-true",
                "content": "# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n\\n    const throws = (para) => {\\n        throw new Error(para);\\n    }\\n\\n    return {\\n        toBe: (v1) => {\\n            if(val === v1) return true;\\n            else throws(\"Not Equal\");\\n        },\\n        notToBe: (v2) => {\\n            if(val !== v2) return true;\\n            else throws(\"Equal\")\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n\\n    const throws = (para) => {\\n        throw new Error(para);\\n    }\\n\\n    return {\\n        toBe: (v1) => {\\n            if(val === v1) return true;\\n            else throws(\"Not Equal\");\\n        },\\n        notToBe: (v2) => {\\n            if(val !== v2) return true;\\n            else throws(\"Equal\")\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972445,
                "title": "simple-solution-beginner-friendly",
                "content": "# Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo solve this problem we need to:\\n 1. Return an object inside `expect` function\\n 2. Create two functions `toBe(val)` and `notToBe(val)` inside that object\\n\\n```\\nvar expect = function(val) {\\n    return {\\n        toBe: function(fval){},\\n\\n        //function can also be written as\\n        notToBe(fval){}\\n    }\\n};\\n```\\nNow, `toBe(val)` function should return `true` if the two values `===` each other (i.e their value and type are equal), if not equal it should throw an Error `\"Not Equal\"`.\\n```\\ntoBe(fval){\\n            if(val===fval){\\n                return true\\n            }\\n            throw new Error(\"Not Equal\")\\n        },\\n```\\nSimilar approach should be followed for `notToBe(val)` function.\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe(fval){\\n            if(val===fval){\\n                return true\\n            }\\n            throw new Error(\"Not Equal\")\\n        },\\n        notToBe(fval){\\n            if(val!==fval){\\n                return true\\n            }\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```\\nPlease UPVOTE if you find this helpful :)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function(val) {\\n    return {\\n        toBe: function(fval){},\\n\\n        //function can also be written as\\n        notToBe(fval){}\\n    }\\n};\\n```\n```\\ntoBe(fval){\\n            if(val===fval){\\n                return true\\n            }\\n            throw new Error(\"Not Equal\")\\n        },\\n```\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe(fval){\\n            if(val===fval){\\n                return true\\n            }\\n            throw new Error(\"Not Equal\")\\n        },\\n        notToBe(fval){\\n            if(val!==fval){\\n                return true\\n            }\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972133,
                "title": "js-closures-and-objects-in-one-shot",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUndestanding the concept of closures and lexical env along with the objects in javascript is necessary to solve this problem.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n```\\n//As we have two different cases\\n//case 1:\\n        function toBe (val){\\n         //compare val passed to this function with the parent \\n        // function passed val\\n        //if values are equal , return true otherwise create instance //of the error object to through the error with an error message \"not //equal\".\\n}\\n//case 2:\\n        function notToBe (val){\\n         //compare val passed to this function with the parent \\n        // function passed val\\n        //if values are not equal , return true otherwise create //instance of the error object to through the error with an error //message \"Equal\".\\n}\\n```\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe operations are not dependent on the size of input neither any iterative process is involved, so there is contant time period.\\nBig O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nit takes constant size in the memory, so constant \\nO(1).\\n# Code\\n```\\nkeep in mind we are returning an object from the expect function.\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(valToCompare) {\\n            if (val === valToCompare) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(valToCompare) {\\n            if (val !== valToCompare) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n * expect(5).notToBe(null) // true\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n//As we have two different cases\\n//case 1:\\n        function toBe (val){\\n         //compare val passed to this function with the parent \\n        // function passed val\\n        //if values are equal , return true otherwise create instance //of the error object to through the error with an error message \"not //equal\".\\n}\\n//case 2:\\n        function notToBe (val){\\n         //compare val passed to this function with the parent \\n        // function passed val\\n        //if values are not equal , return true otherwise create //instance of the error object to through the error with an error //message \"Equal\".\\n}\\n```\n```\\nkeep in mind we are returning an object from the expect function.\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(valToCompare) {\\n            if (val === valToCompare) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(valToCompare) {\\n            if (val !== valToCompare) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n * expect(5).notToBe(null) // true\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3964294,
                "title": "to-be-or-not-to-be",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {any} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(compareVal) {\\n            if (val !== compareVal) {\\n                throw new Error(\"Not Equal\");\\n            }\\n            return true;\\n        },\\n        notToBe: function(compareVal) {\\n            if (val === compareVal) {\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        }\\n    };\\n};\\n\\n// Example usage\\ntry {\\n    console.log(expect(5).toBe(5));     // true\\n    console.log(expect(5).notToBe(5));  // Throws \"Equal\" error\\n} catch (error) {\\n    console.log(error.message);\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {any} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(compareVal) {\\n            if (val !== compareVal) {\\n                throw new Error(\"Not Equal\");\\n            }\\n            return true;\\n        },\\n        notToBe: function(compareVal) {\\n            if (val === compareVal) {\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        }\\n    };\\n};\\n\\n// Example usage\\ntry {\\n    console.log(expect(5).toBe(5));     // true\\n    console.log(expect(5).notToBe(5));  // Throws \"Equal\" error\\n} catch (error) {\\n    console.log(error.message);\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3963922,
                "title": "simple-ts",
                "content": "# Code\\n```\\nconst throwError = (message: string) => { throw new Error(message) }\\n\\nconst expect = (a: unknown) => ({\\n    toBe: (b: unknown) => a === b || throwError(\\'Not Equal\\'),\\n    notToBe: (b: unknown) => a !== b || throwError(\\'Equal\\')\\n})\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nconst throwError = (message: string) => { throw new Error(message) }\\n\\nconst expect = (a: unknown) => ({\\n    toBe: (b: unknown) => a === b || throwError(\\'Not Equal\\'),\\n    notToBe: (b: unknown) => a !== b || throwError(\\'Equal\\')\\n})\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3963525,
                "title": "best-typesrcipt-solution",
                "content": "# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe: (innerVal) => {\\n            if (innerVal === val) return true\\n            else throw new Error(\"Not Equal\")\\n        },\\n        notToBe: (innerVal) => {\\n            if(val !== innerVal) return true\\n            else throw new Error(\"Equal\")\\n        }\\n    }\\n};",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe: (innerVal) => {\\n            if (innerVal === val) return true\\n            else throw new Error(\"Not Equal\")\\n        },\\n        notToBe: (innerVal) => {\\n            if(val !== innerVal) return true\\n            else throw new Error(\"Equal\")\\n        }\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3962660,
                "title": "constructor-function-with-prototypes",
                "content": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n\\nconst Testable = function(val) {\\n    this.val = val\\n};\\n\\nTestable.prototype.toBe = function(arg) {\\n    if (this.val === arg ) return true\\n    else throw new Error(\\'Not Equal\\')\\n}\\n\\nTestable.prototype.notToBe = function(arg) {\\n    if (this.val !== arg ) return true\\n    else throw new Error(\\'Equal\\')\\n}\\n\\n\\nvar expect = function(val) {\\n    return new Testable(val)\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n\\nconst Testable = function(val) {\\n    this.val = val\\n};\\n\\nTestable.prototype.toBe = function(arg) {\\n    if (this.val === arg ) return true\\n    else throw new Error(\\'Not Equal\\')\\n}\\n\\nTestable.prototype.notToBe = function(arg) {\\n    if (this.val !== arg ) return true\\n    else throw new Error(\\'Equal\\')\\n}\\n\\n\\nvar expect = function(val) {\\n    return new Testable(val)\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3960049,
                "title": "the-easiest-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    const toBe = (eq) => {\\n        if (eq === val) return true\\n        throw new Error(\"Not Equal\")\\n    }\\n    const notToBe = (eq) => {\\n        if (eq !== val) {\\n            return true\\n        }\\n        throw new Error(\"Equal\")\\n    }\\n    const object = {\\n        toBe, notToBe\\n    }\\n    return object;\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n    const toBe = (eq) => {\\n        if (eq === val) return true\\n        throw new Error(\"Not Equal\")\\n    }\\n    const notToBe = (eq) => {\\n        if (eq !== val) {\\n            return true\\n        }\\n        throw new Error(\"Equal\")\\n    }\\n    const object = {\\n        toBe, notToBe\\n    }\\n    return object;\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957971,
                "title": "simple-straightforward-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem is asking for a simple testing utility that can compare values using strict equality (===) and strict inequality (!==). We need to create a function expect that takes a value and returns an object with two methods: toBe and notToBe. These methods will compare the input value with another value, returning true or throwing an error based on the comparison.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCreate the expect Function: Define a function expect that takes a value val.\\nReturn an Object with Methods: Inside expect, return an object with two methods:\\ntoBe(otherVal): Compare otherVal with val using ===. Return true if they are equal, or throw an error with the message \"Not Equal\" if they are not.\\nnotToBe(otherVal): Compare otherVal with val using !==. Return true if they are not equal, or throw an error with the message \"Equal\" if they are.\\nUtilize Closures: The inner functions toBe and notToBe will have access to val from their containing scope, even after expect has finished executing. This is a closure, and it allows the inner functions to \"remember\" the value passed to expect.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nFor both the methods, the complexity is O(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    Same for the space complexity.\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n     toBe: function(otherVal) {\\n            if (otherVal === val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\"); // Throw an error instead of returning false\\n            }\\n        },\\n        notToBe: function(otherVal) {\\n            if (otherVal !== val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\"); // Throw an error instead of returning false\\n            }\\n        }\\n  };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n     toBe: function(otherVal) {\\n            if (otherVal === val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\"); // Throw an error instead of returning false\\n            }\\n        },\\n        notToBe: function(otherVal) {\\n            if (otherVal !== val) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\"); // Throw an error instead of returning false\\n            }\\n        }\\n  };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957196,
                "title": "javascript-solution",
                "content": "```\\nconst expect = function(val) {\\n    return {\\n        toBe: (v) => {\\n            if(v === val) return true\\n            else throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (v) => {\\n            if(v !== val) return true\\n            else throw new Error(\"Equal\");\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst expect = function(val) {\\n    return {\\n        toBe: (v) => {\\n            if(v === val) return true\\n            else throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (v) => {\\n            if(v !== val) return true\\n            else throw new Error(\"Equal\");\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3954950,
                "title": "to-be-or-not-to-be",
                "content": "# Intuition\\nWhat I would suggest is to read the instructions before jumping into discussions or solutions. I made the same mistakes myself, as you can see. The problem itself is of a very easy level if you follow the instructions carefully.\\n\\n# Approach\\nI received some help from the discussion section because I missed the point that an object needed to be returned. Although my approaches usually involve trying to dry run the problem and see how far I can go. What I mean is that when you break down the problem into very small steps and create instructions for yourself, like \"I have to do this, then this, and then this,\" you can start writing the code\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n-Reson: The expect function itself runs in constant time O(1) as it only creates an object and returns it.\\n\\n- The expect function creates an object that contains the toBe and notToBe methods. This object takes up constant space O(1) as it doesn\\'t depend on the input size.\\n\\n- In conclusion, both the time and space complexities of the given code are constant O(1). The code involves fixed and predictable operations and memory usage, which do not change with the input size.\\n\\n\\n# Code\\n```\\nvar expect = function(val) {\\nreturn {\\n    toBe(num){\\n        if(num === val){\\n            return true;\\n        }else if(num !== val){\\n            throw new Error (\"Not Equal\"); \\n        }\\n    },\\n   notToBe(num) {\\n        if (val !== num) {\\n            return true;\\n        } else {\\n            throw new Error(\\'Equal\\')\\n        }\\n    }\\n}\\n       \\n    \\n };\\n    \\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar expect = function(val) {\\nreturn {\\n    toBe(num){\\n        if(num === val){\\n            return true;\\n        }else if(num !== val){\\n            throw new Error (\"Not Equal\"); \\n        }\\n    },\\n   notToBe(num) {\\n        if (val !== num) {\\n            return true;\\n        } else {\\n            throw new Error(\\'Equal\\')\\n        }\\n    }\\n}\\n       \\n    \\n };\\n    \\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3954606,
                "title": "tobe-or-nottobe-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n\\nconst expect = function (val) {\\n  const result = {};\\n  result.toBe = (num) => {\\n    if (val === num) {\\n      return (result.value = true);\\n    }\\n    else {\\n      throw new Error(\\'Not Equal\\');\\n    }\\n  };\\n  result.notToBe = (num) => {\\n    if (num !== val) {\\n      return (result.value = true);\\n    }else{\\n        throw new Error(\\'Equal\\')\\n    }\\n  };\\n  return result;\\n};\\ntry {\\n  console.log(expect(5).toBe(5));\\n  console.log(expect(5).toBe(null));\\n  console.log(expect(5).notToBe(3))\\n} catch (err) {\\n  console.log(err.message);\\n}\\n/** \\n  expect(5).toBe(5); // true\\n  expect(5).toBe(null)\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n\\nconst expect = function (val) {\\n  const result = {};\\n  result.toBe = (num) => {\\n    if (val === num) {\\n      return (result.value = true);\\n    }\\n    else {\\n      throw new Error(\\'Not Equal\\');\\n    }\\n  };\\n  result.notToBe = (num) => {\\n    if (num !== val) {\\n      return (result.value = true);\\n    }else{\\n        throw new Error(\\'Equal\\')\\n    }\\n  };\\n  return result;\\n};\\ntry {\\n  console.log(expect(5).toBe(5));\\n  console.log(expect(5).toBe(null));\\n  console.log(expect(5).notToBe(3))\\n} catch (err) {\\n  console.log(err.message);\\n}\\n/** \\n  expect(5).toBe(5); // true\\n  expect(5).toBe(null)\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3947529,
                "title": "short-answer-using-arrow-function-and-short-conditionals",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const toBe=(data)=>{\\n       if(data===val) return true\\n        else throw new Error(\\'Not Equal\\');\\n    }\\n    const notToBe =(data)=>{\\n        if(data!==val) return true\\n        else throw new Error(\\'Equal\\');\\n    }\\n    return {toBe, notToBe }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const toBe=(data)=>{\\n       if(data===val) return true\\n        else throw new Error(\\'Not Equal\\');\\n    }\\n    const notToBe =(data)=>{\\n        if(data!==val) return true\\n        else throw new Error(\\'Equal\\');\\n    }\\n    return {toBe, notToBe }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944886,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    toBe = (compair) => {\\n        if(val === compair) {\\n            return true;\\n        } else {\\n            throw new Error(\\'Not Equal\\');\\n        }\\n    }\\n    notToBe = (compair) => {\\n        if(val !== compair){\\n            return true;\\n        } else {\\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\nreturn{\\n    toBe,\\n    notToBe\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    toBe = (compair) => {\\n        if(val === compair) {\\n            return true;\\n        } else {\\n            throw new Error(\\'Not Equal\\');\\n        }\\n    }\\n    notToBe = (compair) => {\\n        if(val !== compair){\\n            return true;\\n        } else {\\n            throw new Error(\\'Equal\\');\\n        }\\n    }\\nreturn{\\n    toBe,\\n    notToBe\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943308,
                "title": "beginner-friendly",
                "content": "# Complexity\\n- Time complexity:$$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n  toBe = (val1) => {\\n    if(val1 !== val)\\n      throw new Error(\"Not Equal\");\\n    return true;\\n  }\\n\\n  notToBe = (val1) => {\\n    if(val1 === val)\\n      throw new Error(\"Equal\");\\n    return true;\\n  }\\n\\n  return {toBe,notToBe}\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n  toBe = (val1) => {\\n    if(val1 !== val)\\n      throw new Error(\"Not Equal\");\\n    return true;\\n  }\\n\\n  notToBe = (val1) => {\\n    if(val1 === val)\\n      throw new Error(\"Equal\");\\n    return true;\\n  }\\n\\n  return {toBe,notToBe}\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3939564,
                "title": "add-your-thoughts",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction expect(value) {\\n  return {\\n    toBe: function(expected) {\\n      if (value !== expected) {\\n        throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n    },\\n    notToBe: function(expected) {\\n      if (value === expected) {\\n        throw new Error(\"Equal\");\\n      }\\n      return true;\\n    }\\n  };\\n}\\n\\n// Example usage\\ntry {\\n  expect(5).toBe(5);  // No error\\n  expect(\"Hello\").notToBe(\"World\");  // No error\\n  expect(10).toBe(20);  // Throws \"Not Equal\" error\\n  expect(true).notToBe(true);  // Throws \"Equal\" error\\n} catch (error) {\\n  console.log(error.message);\\n}\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction expect(value) {\\n  return {\\n    toBe: function(expected) {\\n      if (value !== expected) {\\n        throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n    },\\n    notToBe: function(expected) {\\n      if (value === expected) {\\n        throw new Error(\"Equal\");\\n      }\\n      return true;\\n    }\\n  };\\n}\\n\\n// Example usage\\ntry {\\n  expect(5).toBe(5);  // No error\\n  expect(\"Hello\").notToBe(\"World\");  // No error\\n  expect(10).toBe(20);  // Throws \"Not Equal\" error\\n  expect(true).notToBe(true);  // Throws \"Equal\" error\\n} catch (error) {\\n  console.log(error.message);\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3938668,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(val2)=>{\\n            if(val!==val2) throw new Error(\"Not Equal\")\\n            else return true;\\n        },\\n        notToBe:(val2)=>{\\n            if(val===val2) throw new Error(\"Equal\")\\n            else return true;\\n        } \\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(val2)=>{\\n            if(val!==val2) throw new Error(\"Not Equal\")\\n            else return true;\\n        },\\n        notToBe:(val2)=>{\\n            if(val===val2) throw new Error(\"Equal\")\\n            else return true;\\n        } \\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937190,
                "title": "simple-javascript-solution",
                "content": "\\n\\n# Javascript Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n\\n //create the required funtion.\\n\\n const toBe = (val1) => {\\n        if(val === val1)\\n          return true;\\n        else throw new Error (\\'Not Equal\\');\\n       \\n   }\\n  const notToBe =  (val3)=> {\\n       if(val !== val3)\\n           return true;\\n       else throw new Error (\\'Equal\\');\\n       \\n       \\n   }\\n//now returning  the function as an object\\n you can directly write the method name once , as the key \\n,value name is same the function  . \\n   return {toBe:toBe ,notToBe:notToBe}\\n\\n\\n\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function (val) {\\n\\n //create the required funtion.\\n\\n const toBe = (val1) => {\\n        if(val === val1)\\n          return true;\\n        else throw new Error (\\'Not Equal\\');\\n       \\n   }\\n  const notToBe =  (val3)=> {\\n       if(val !== val3)\\n           return true;\\n       else throw new Error (\\'Equal\\');\\n       \\n       \\n   }\\n//now returning  the function as an object\\n you can directly write the method name once , as the key \\n,value name is same the function  . \\n   return {toBe:toBe ,notToBe:notToBe}\\n\\n\\n\\n\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3931670,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if(val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if(val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (val2) => {\\n            if(val !== val2) throw new Error(\"Not Equal\");\\n            else return true;\\n        },\\n        notToBe: (val2) => {\\n            if(val === val2) throw new Error(\"Equal\");\\n            else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3931489,
                "title": "30-days-of-javascript-to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nShould Follow each and every words in Problem Statment and their Expected Output.\\n\\n# Approach\\n1) Return two objects named toBe and notToBe.\\n2) Write if else Condition According To The Requiremnt.\\n3) Return Expected Output.\\n\\n# Code\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\nreturn{\\n        toBe: function(expect){\\n        if(val === expect){\\n            return true;\\n        }\\n        else{\\n            throw Error(\"Not Equal\");\\n        }\\n        },\\n        notToBe: function(expect){\\n            if(val !== expect){\\n                return true;\\n            }\\n            else{\\n                throw Error(\"Equal\");\\n            }\\n        }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nShould Follow each and every words in Problem Statment and their Expected Output.\\n\\n# Approach\\n1) Return two objects named toBe and notToBe.\\n2) Write if else Condition According To The Requiremnt.\\n3) Return Expected Output.\\n\\n# Code\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\nreturn{\\n        toBe: function(expect){\\n        if(val === expect){\\n            return true;\\n        }\\n        else{\\n            throw Error(\"Not Equal\");\\n        }\\n        },\\n        notToBe: function(expect){\\n            if(val !== expect){\\n                return true;\\n            }\\n            else{\\n                throw Error(\"Equal\");\\n            }\\n        }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3931486,
                "title": "30-days-of-javascript-to-be-or-not-to-be",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nShould Follow each and every words in Problem Statment and their Expected Output.\\n\\n# Approach\\n1) Return two objects named toBe and notToBe.\\n2) Write if else Condition According To The Requiremnt.\\n3) Return Expected Output.\\n\\n# Code\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\nreturn{\\n        toBe: function(expect){\\n        if(val === expect){\\n            return true;\\n        }\\n        else{\\n            throw Error(\"Not Equal\");\\n        }\\n        },\\n        notToBe: function(expect){\\n            if(val !== expect){\\n                return true;\\n            }\\n            else{\\n                throw Error(\"Equal\");\\n            }\\n        }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nShould Follow each and every words in Problem Statment and their Expected Output.\\n\\n# Approach\\n1) Return two objects named toBe and notToBe.\\n2) Write if else Condition According To The Requiremnt.\\n3) Return Expected Output.\\n\\n# Code\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\nreturn{\\n        toBe: function(expect){\\n        if(val === expect){\\n            return true;\\n        }\\n        else{\\n            throw Error(\"Not Equal\");\\n        }\\n        },\\n        notToBe: function(expect){\\n            if(val !== expect){\\n                return true;\\n            }\\n            else{\\n                throw Error(\"Equal\");\\n            }\\n        }\\n}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3930884,
                "title": "2704-to-be-or-not-to-be-simple-and-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(val2){\\n        if(val === val2){\\n            return true\\n        }\\n        else{\\n            throw new Error(\\'Not Equal\\')\\n        }\\n    }\\n\\n    function notToBe(val2){\\n        if(val !== val2){\\n            return true\\n        }\\n        else{\\n            throw new Error(\\'Equal\\')\\n        }\\n    }\\n    return {\\n\\n    toBe, notToBe\\n}\\n   \\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(val2){\\n        if(val === val2){\\n            return true\\n        }\\n        else{\\n            throw new Error(\\'Not Equal\\')\\n        }\\n    }\\n\\n    function notToBe(val2){\\n        if(val !== val2){\\n            return true\\n        }\\n        else{\\n            throw new Error(\\'Equal\\')\\n        }\\n    }\\n    return {\\n\\n    toBe, notToBe\\n}\\n   \\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3930690,
                "title": "to-be-or-not-to-be-with-ternary",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n  toBe: (x) => {return  x ===  val ? true : (function(){throw \"Not Equal\"}())},\\n  notToBe: (z) => {return  z !==  val ? true: (function(){throw \"Equal\"}())},\\n  }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n  toBe: (x) => {return  x ===  val ? true : (function(){throw \"Not Equal\"}())},\\n  notToBe: (z) => {return  z !==  val ? true: (function(){throw \"Equal\"}())},\\n  }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3929987,
                "title": "typescript-simple-approach-clean-code",
                "content": "# Complexity\\n- Time complexity: $O(1)$\\n- Space complexity: $O(1)$\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe: ( v: any ) => {\\n            if ( v !== val ) throw new Error( \"Not Equal\" );\\n            return true;\\n        },\\n        notToBe: ( v: any ) => {\\n            if ( v === val ) throw new Error( \"Equal\" );\\n            return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(val: any): ToBeOrNotToBe {\\n    return {\\n        toBe: ( v: any ) => {\\n            if ( v !== val ) throw new Error( \"Not Equal\" );\\n            return true;\\n        },\\n        notToBe: ( v: any ) => {\\n            if ( v === val ) throw new Error( \"Equal\" );\\n            return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3927413,
                "title": "interpretation-of-each-functions-usage",
                "content": "# Intuition\\nIn the case of **toBe(val)** we need to check if the values are equal and if not we should throw an error. Not the opposite which would be: checking if the values are not equal and throwing the error.\\n\\n\\n# Approach\\nBasically, what I mean is:\\n\\nThis:\\n```\\nif(x === val) return true;\\nthrow new Error(\"Not Equal\");\\n```\\n\\nAnd not this:\\n```\\nif (x !== val) throw new Error(\"Not Equal\");\\nelse return true;\\n```\\n\\nThe same goes for the other function **notToBe(val)**, too.\\n\\n\\n# Full solution would be:\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (x) => {\\n           if(x === val) return true;\\n           throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (x) => {\\n            if(x !== val) return true;\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nif(x === val) return true;\\nthrow new Error(\"Not Equal\");\\n```\n```\\nif (x !== val) throw new Error(\"Not Equal\");\\nelse return true;\\n```\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (x) => {\\n           if(x === val) return true;\\n           throw new Error(\"Not Equal\");\\n        },\\n        notToBe: (x) => {\\n            if(x !== val) return true;\\n            throw new Error(\"Equal\");\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916673,
                "title": "beginner-friendly-solution-javascript",
                "content": "> vote up if you like\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(v){\\n        if(val===v){\\n            return true\\n        }\\n        else{\\n            throw \"Not Equal\"\\n        }\\n    }\\n    function notToBe(v){\\n        if(val!==v){\\n            return  true\\n        }\\n        else{\\n            throw \"Equal\"\\n        }\\n    }\\n    return {toBe,notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function toBe(v){\\n        if(val===v){\\n            return true\\n        }\\n        else{\\n            throw \"Not Equal\"\\n        }\\n    }\\n    function notToBe(v){\\n        if(val!==v){\\n            return  true\\n        }\\n        else{\\n            throw \"Equal\"\\n        }\\n    }\\n    return {toBe,notToBe}\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916481,
                "title": "easiest-and-shortest-way-javascript-using-throw-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n var num;\\nvar expect = function(val) {\\n    return {\\n    toBe: (num) => {\\n    if(val === num )  { return true}\\n    else  { throw new Error(\\'Not Equal\\');}\\n},\\nnotToBe: (num) => {\\n    if(val !== num)  { return true}\\n    else  {throw new Error(\\'Equal\\');}\\n}\\n    }\\n\\n};\\n\\n\\n\\n expect(5).toBe(5); // true\\n expect(5).notToBe(6); // throws \"Equal\"\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\n var num;\\nvar expect = function(val) {\\n    return {\\n    toBe: (num) => {\\n    if(val === num )  { return true}\\n    else  { throw new Error(\\'Not Equal\\');}\\n},\\nnotToBe: (num) => {\\n    if(val !== num)  { return true}\\n    else  {throw new Error(\\'Equal\\');}\\n}\\n    }\\n\\n};\\n\\n\\n\\n expect(5).toBe(5); // true\\n expect(5).notToBe(6); // throws \"Equal\"\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916221,
                "title": "es6-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (value) => ({\\n    toBe : (toBeVal) => {\\n        if (value === toBeVal){\\n            return true;\\n        }else{\\n            throw Error(\"Not Equal\")\\n        }\\n    },\\n    notToBe : (toBeVal) => {\\n        if (value !== toBeVal){\\n            return true;\\n        }else{\\n            throw Error(\"Equal\")\\n        }\\n    },\\n})\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (value) => ({\\n    toBe : (toBeVal) => {\\n        if (value === toBeVal){\\n            return true;\\n        }else{\\n            throw Error(\"Not Equal\")\\n        }\\n    },\\n    notToBe : (toBeVal) => {\\n        if (value !== toBeVal){\\n            return true;\\n        }else{\\n            throw Error(\"Equal\")\\n        }\\n    },\\n})\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3912035,
                "title": "easiest-way-to-solve-tobe-or-nottobe",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const param = val;\\n    return {\\n        toBe: (value) => {\\n            if (value !== param) {\\n                throw new Error(\"Not Equal\");\\n            }else{\\n                return true;\\n            }\\n        },\\n        notToBe: (value) => {\\n            if (value === param) {\\n                throw new Error(\"Equal\");\\n            }else{\\n                return true;\\n            }\\n        }\\n    };\\n};\\n\\nexpect(5).toBe(5); // true\\nexpect(5).notToBe(6); // throws \"Equal\"\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    const param = val;\\n    return {\\n        toBe: (value) => {\\n            if (value !== param) {\\n                throw new Error(\"Not Equal\");\\n            }else{\\n                return true;\\n            }\\n        },\\n        notToBe: (value) => {\\n            if (value === param) {\\n                throw new Error(\"Equal\");\\n            }else{\\n                return true;\\n            }\\n        }\\n    };\\n};\\n\\nexpect(5).toBe(5); // true\\nexpect(5).notToBe(6); // throws \"Equal\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3912028,
                "title": "this-is-the-way-how-error-is-thrown-in-single-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n\\n    return {\\n        toBe: (data )=>{\\n            if(data !== val) throw new Error (`Not Equal`);\\n            else return true; \\n        },\\n\\n        notToBe :(data )=> {\\n            if(data === val ) throw new Error (`Equal`);\\n            else return true;\\n        }\\n\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n\\n    return {\\n        toBe: (data )=>{\\n            if(data !== val) throw new Error (`Not Equal`);\\n            else return true; \\n        },\\n\\n        notToBe :(data )=> {\\n            if(data === val ) throw new Error (`Equal`);\\n            else return true;\\n        }\\n\\n    }\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3907801,
                "title": "simple-and-human-readable-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTypescript method chaining can be done both with classes or by using objects. As the current example was using an object and the return type was also an object, there\\'s not much else to think about\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI tried to keep things as simple as possible and concise as possible, I believe a simpler code is always better for both me and anyone else seeing it. Listen, if you said that you\\'ve never written a code and after a year or so you came back and had to remap a bit of it to understand whatever that garbo looking **** was mean\\'t to do, then I don\\'t believe you.\\n\\n# Code\\n```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(initialValue: any): ToBeOrNotToBe {\\n    return {\\n        toBe: (valueToCompare: any) => {\\n            const booleanResult = initialValue === valueToCompare\\n\\n            // Early return\\n            if(booleanResult) \\n                // Returning either the comparison or true yields the same result, you choose\\n                return booleanResult // always true\\n\\n            throw new Error(\"Not Equal\")\\n        },\\n        notToBe: (valueToCompare: any) => {\\n            const booleanResult = initialValue !== valueToCompare\\n\\n            // Early return\\n            if(booleanResult) return booleanResult // always true\\n\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ToBeOrNotToBe = {\\n    toBe: (val: any) => boolean;\\n    notToBe: (val: any) => boolean;\\n};\\n\\nfunction expect(initialValue: any): ToBeOrNotToBe {\\n    return {\\n        toBe: (valueToCompare: any) => {\\n            const booleanResult = initialValue === valueToCompare\\n\\n            // Early return\\n            if(booleanResult) \\n                // Returning either the comparison or true yields the same result, you choose\\n                return booleanResult // always true\\n\\n            throw new Error(\"Not Equal\")\\n        },\\n        notToBe: (valueToCompare: any) => {\\n            const booleanResult = initialValue !== valueToCompare\\n\\n            // Early return\\n            if(booleanResult) return booleanResult // always true\\n\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3905623,
                "title": "to-be-or-not",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(checkVal) {\\n            if (val === checkVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(checkVal) {\\n            if (val !== checkVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(checkVal) {\\n            if (val === checkVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Not Equal\");\\n            }\\n        },\\n        notToBe: function(checkVal) {\\n            if (val !== checkVal) {\\n                return true;\\n            } else {\\n                throw new Error(\"Equal\");\\n            }\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3904100,
                "title": "this-is-the-most-beginner-friendly-solution-ever",
                "content": "# Understand the question, half work is done!\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1. You have a function`expect` that returns an object.\\n2. The object contains 2 functions: `toBe` and `notToBe`.\\n3. Now, these two functions return something on some conditions.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo write a function inside an object, here\\'s how you do it:\\n````\\n//Object\\n{\\n // first function in form of key-value\\n toBe: function(val1) {\\n  //returns someting\\n },\\n // second function in form of key-value\\n notToBe: function(val2) {\\n //returns something\\n }\\n}\\n````\\nNow, write the conditions as shown below!\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n  return {\\n    toBe: function(val1) {\\n      if(val === val1) {\\n        return true\\n      } else {\\n        throw new Error(\"Not Equal\")\\n      }\\n    },\\n    notToBe: function(val2) {\\n      if(val !== val2) {\\n        return true\\n      } else {\\n        throw new Error(\"Equal\")\\n      }\\n    }\\n  }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "````\\n//Object\\n{\\n // first function in form of key-value\\n toBe: function(val1) {\\n  //returns someting\\n },\\n // second function in form of key-value\\n notToBe: function(val2) {\\n //returns something\\n }\\n}\\n```\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n  return {\\n    toBe: function(val1) {\\n      if(val === val1) {\\n        return true\\n      } else {\\n        throw new Error(\"Not Equal\")\\n      }\\n    },\\n    notToBe: function(val2) {\\n      if(val !== val2) {\\n        return true\\n      } else {\\n        throw new Error(\"Equal\")\\n      }\\n    }\\n  }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3902945,
                "title": "clean-js-code-with-comments-for-better-understanding",
                "content": "# Clean code with comments for better understanding\\n\\n## Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = function(val) {\\n    const value = val;\\n    // creating a object that holds 2 functions\\n    // This object gets returned when we call expect() and then we\\n    // can call expect().func() \\n    return {\\n        toBe: (toBeComparedVal) => {\\n            // comparing value\\n            if(value !== toBeComparedVal){\\n                throw new Error(\"Not Equal\");\\n            }\\n            // return condition only runs above condition evaluates to false\\n            return true;\\n        },\\n        notToBe: (toBeComparedVal) => {\\n            if(value === toBeComparedVal){\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = function(val) {\\n    const value = val;\\n    // creating a object that holds 2 functions\\n    // This object gets returned when we call expect() and then we\\n    // can call expect().func() \\n    return {\\n        toBe: (toBeComparedVal) => {\\n            // comparing value\\n            if(value !== toBeComparedVal){\\n                throw new Error(\"Not Equal\");\\n            }\\n            // return condition only runs above condition evaluates to false\\n            return true;\\n        },\\n        notToBe: (toBeComparedVal) => {\\n            if(value === toBeComparedVal){\\n                throw new Error(\"Equal\");\\n            }\\n            return true;\\n        }\\n    };\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3900458,
                "title": "well-this-works",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   return {\\n       toBe: (val1) => {\\n           if (val === val1) return true\\n           throw new Error(\\'Not Equal\\')\\n       },\\n       notToBe: (val2) => {\\n           if (val !== val2) return true\\n           throw new Error(\\'Equal\\')\\n       }\\n   }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   return {\\n       toBe: (val1) => {\\n           if (val === val1) return true\\n           throw new Error(\\'Not Equal\\')\\n       },\\n       notToBe: (val2) => {\\n           if (val !== val2) return true\\n           throw new Error(\\'Equal\\')\\n       }\\n   }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3899748,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (n) => {\\n            if(val === n) {\\n                return true\\n            }\\n            throw new Error(\"Not Equal\")\\n        },\\n        notToBe: (n) => {\\n            if(val !== n) {\\n                return true\\n            }\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: (n) => {\\n            if(val === n) {\\n                return true\\n            }\\n            throw new Error(\"Not Equal\")\\n        },\\n        notToBe: (n) => {\\n            if(val !== n) {\\n                return true\\n            }\\n            throw new Error(\"Equal\")\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897069,
                "title": "wtf",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nfuck\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfuck\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nfuck\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nwhy the fuck doesnt the ternary work here with implicit return ??? is it because there is not a keyword fucking throw??????????????????????????????????????????????????????????????????????????????????????????????????????\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   return {\\n       toBe: (val2) => {\\n        // why the fuck doesnt the line below this work\\n        // return val === val2 ? true : new Error(\"Not Equal\");\\n        if (val === val2) return true;\\n        else throw new Error(\\'Not Equal\\')\\n       },\\n       notToBe: (val2) => {\\n        //    return val !== val2 ? true : new Error(\"Equal\") ;\\n        if (val !== val2) return true;\\n        else throw new Error(\"Equal\")\\n       }\\n   }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n   return {\\n       toBe: (val2) => {\\n        // why the fuck doesnt the line below this work\\n        // return val === val2 ? true : new Error(\"Not Equal\");\\n        if (val === val2) return true;\\n        else throw new Error(\\'Not Equal\\')\\n       },\\n       notToBe: (val2) => {\\n        //    return val !== val2 ? true : new Error(\"Equal\") ;\\n        if (val !== val2) return true;\\n        else throw new Error(\"Equal\")\\n       }\\n   }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897007,
                "title": "javascript-one-line-return-ternary-operator-great-performance",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIm thinking that it might be shorten by using ternary operator and try it. After a couple of errors this is what I got.\\n\\nWhat I noticed based on my end is the *Runtime is 36ms* and with *Memory 41.62mb* by using this approach\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe problem requires the expect function to support making toBe and notToBe calls (e.g., ``expect(5).toBe(5);`` should return ``true``, and ``expect(5).notToBe(5);`` should throw ``\"Equal\"``).\\n\\nI tried to use ternary operator and heres how I got it.\\n\\n*The only downside is it is less readable if you agree with me.*\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(val2) {\\n            return val !== val2 ? (() => { throw new Error(\"Not Equal\"); })() : true;\\n        },\\n        notToBe: function(val3) {\\n            return val === val3 ? (() => { throw new Error(\"Equal\"); })() : true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```\\n\\n# UPVOTE if this was insightful for you \\u2668\\u2668\\u2668",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return {\\n        toBe: function(val2) {\\n            return val !== val2 ? (() => { throw new Error(\"Not Equal\"); })() : true;\\n        },\\n        notToBe: function(val3) {\\n            return val === val3 ? (() => { throw new Error(\"Equal\"); })() : true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3895855,
                "title": "easy-solution",
                "content": "here is the code: \\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n         toBe:(x)=>{\\n        if (val===x){\\n        return true;\\n        }else{\\n        throw \"Not Equal\";\\n        }\\n    },\\n\\n    notToBe : (x)=>{\\n        if (val!==x){\\n        return true;\\n        }else{\\n        throw \"Equal\";\\n        }\\n      }\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "here is the code: \\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n         toBe:(x)=>{\\n        if (val===x){\\n        return true;\\n        }else{\\n        throw \"Not Equal\";\\n        }\\n    },\\n\\n    notToBe : (x)=>{\\n        if (val!==x){\\n        return true;\\n        }else{\\n        throw \"Equal\";\\n        }\\n      }\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3893928,
                "title": "js-simple-solution-with-explanation",
                "content": "# Approach\\nThis function have an object with two keys which are toBe and notTobe whose value are a function. Lets see what happens step by step:\\n1. expect call the key toBe whose value is a function which return if val === val2 else throwsError \"Not Equal\"\\n2. expect call the key notToBe whose value is a function which return if val !== val2 else throwsError \"Equal\"\\n3. ThrowError function throws an error which takes arguement as string to show when error Occurs. \\n\\n# Complexity\\n- Time complexity:\\n  O(1)\\n\\n- Space complexity:\\n  O(1)\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n    const throwError = (ErrorString) => {throw new Error(ErrorString)};\\n    return{\\n    toBe: (val2) => {return val2 === val ? true : throwError(\"Not Equal\")},\\n    notToBe: (val2) => {return val2 !== val ? true: throwError(\"Equal\")}\\n }\\n}\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nconst expect = (val) => {\\n    const throwError = (ErrorString) => {throw new Error(ErrorString)};\\n    return{\\n    toBe: (val2) => {return val2 === val ? true : throwError(\"Not Equal\")},\\n    notToBe: (val2) => {return val2 !== val ? true: throwError(\"Equal\")}\\n }\\n}\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3890115,
                "title": "very-easy-short-solution-javascript",
                "content": "# Code\\n```\\nconst expect = (val) => {\\n    return {\\n        toBe: (newVal) => {\\n            if (val !== newVal) throw Error(\\'Not Equal\\');\\n            return true;\\n        },\\n        notToBe: (newVal) => {\\n            if (val === newVal) throw Error(\\'Equal\\');\\n            return true;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst expect = (val) => {\\n    return {\\n        toBe: (newVal) => {\\n            if (val !== newVal) throw Error(\\'Not Equal\\');\\n            return true;\\n        },\\n        notToBe: (newVal) => {\\n            if (val === newVal) throw Error(\\'Equal\\');\\n            return true;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3888883,
                "title": "expressive-testing-with-custom-assertions",
                "content": "# Intuition and Approach:\\nThe expect function is designed to provide a simple way for developers to test their code by checking equality or inequality of values. The intuition behind the approach is to return an object with two functions, toBe and notToBe, which perform the desired comparison and error throwing.\\n\\nThe function expect(val) takes an input value val and returns an object with the two comparison functions toBe and notToBe.\\n\\nThe toBe function checks if the input val is strictly equal (===) to another value provided as an argument. If they are equal, it returns true; otherwise, it throws an error with the message \"Not Equal\".\\n\\nThe notToBe function checks if the input val is not strictly equal (!==) to another value provided as an argument. If they are not equal, it returns true; otherwise, it throws an error with the message \"Equal\".\\n\\n# Time and Space Complexity:\\nThe time complexity of both the toBe and notToBe functions is O(1), as they perform a simple comparison using the === and !== operators. These operations take constant time regardless of the input size.\\n\\nThe space complexity of the expect function itself is also O(1), as it creates an object containing two functions, which doesn\\'t depend on the size of the input.\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     return {\\n    toBe: function (Value) {\\n      if (val !== Value) {\\n        throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n    },\\n    notToBe: function (Value) {\\n      if (val === Value) {\\n        throw new Error(\"Equal\");\\n      }\\n      return true;\\n    },\\n  };\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```\\n\\nThe expect function provides a user-friendly way for developers to test code by comparing values for equality and inequality. It returns an object with toBe and notToBe methods that directly compare input values and throw errors as needed. The function has a constant time and space complexity, making it efficient for testing purposes.\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n     return {\\n    toBe: function (Value) {\\n      if (val !== Value) {\\n        throw new Error(\"Not Equal\");\\n      }\\n      return true;\\n    },\\n    notToBe: function (Value) {\\n      if (val === Value) {\\n        throw new Error(\"Equal\");\\n      }\\n      return true;\\n    },\\n  };\\n    \\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3888751,
                "title": "easyone",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs the problem is described we have to create a test function inside the `expect` (`toBe ` and `notToB`e) and it is more like object so lets make it like that only.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nNow we have to just check our `val` with the `newVal`-> x(i am using) and define the function according to the problem statement(just check the condition).\\n\\ni am using `throweErro`r function jsut to make more modular code.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function throwError(message){\\n        throw new Error(message);\\n    }\\n    return {\\n        toBe :(x)=>{\\n            return x===val? true:throwError(\"Not Equal\");\\n        },\\n        notToBe :(x)=>{\\n            return x!==val? true:throwError(\"Equal\");\\n        }\\n    }\\n    \\n};\\n\\n\\n```\\nCode block\\n``` \\nfunction throwError(message){\\n        throw new Error(message);\\n    }\\n    // lets solve using functions \\n    function toBe(x){\\n        if(x===val) return true;\\n        return throwError(\"Not Equal\");\\n    }\\n    function notToBe(x){\\n        if(x!==val) return true;\\n        return throwError(\"Equal\");\\n    }\\n    return{\\n        // inside this i have to create my object\\n        toBe,\\n        notToBe\\n    }\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    function throwError(message){\\n        throw new Error(message);\\n    }\\n    return {\\n        toBe :(x)=>{\\n            return x===val? true:throwError(\"Not Equal\");\\n        },\\n        notToBe :(x)=>{\\n            return x!==val? true:throwError(\"Equal\");\\n        }\\n    }\\n    \\n};\\n\\n\\n```\n``` \\nfunction throwError(message){\\n        throw new Error(message);\\n    }\\n    // lets solve using functions \\n    function toBe(x){\\n        if(x===val) return true;\\n        return throwError(\"Not Equal\");\\n    }\\n    function notToBe(x){\\n        if(x!==val) return true;\\n        return throwError(\"Equal\");\\n    }\\n    return{\\n        // inside this i have to create my object\\n        toBe,\\n        notToBe\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3888743,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(val2)=>{\\n            if(val!==val2) throw new Error(\"Not Equal\")\\n            else return true;\\n        },\\n        notToBe:(val2)=>{\\n         if(val2===val) throw new Error(\"Equal\");\\n         else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} val\\n * @return {Object}\\n */\\nvar expect = function(val) {\\n    return{\\n        toBe:(val2)=>{\\n            if(val!==val2) throw new Error(\"Not Equal\")\\n            else return true;\\n        },\\n        notToBe:(val2)=>{\\n         if(val2===val) throw new Error(\"Equal\");\\n         else return true;\\n        }\\n    }\\n};\\n\\n/**\\n * expect(5).toBe(5); // true\\n * expect(5).notToBe(5); // throws \"Equal\"\\n */\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1936926,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 1983484,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2029132,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 1931939,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 1924495,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2071251,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2057116,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2050070,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2044470,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2019743,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 1936926,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 1983484,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2029132,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 1931939,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 1924495,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2071251,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2057116,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2050070,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2044470,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            },
            {
                "id": 2019743,
                "content": [
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 3 \\uD83D\\uDE05"
                    },
                    {
                        "username": "WJR1986",
                        "content": "Too true! I have done a lot of beginner courses in JS and never seen anything like this!"
                    },
                    {
                        "username": "Dexmente",
                        "content": "ikr"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "I can\\'t figure out where the problem is, it throws an error at my face\\n `function toBe(va){\\n        if(val === va){\\n            return true;\\n        }else{\\n            throw new Error(\"Not Equal\");\\n        }\\n    }\\n\\n    function notToBe(va){\\n        if(val !== va){\\n            return true;\\n        }else{\\n            throw new Error(\"Equal\"); // (Runtime Error)\\n        }\\n    }`\\n\\nHere it is the error:\\n\\nRuntime Error\\n\\nLine 19 in solution.js\\n            throw new Error(\"Equal\");\\n            ^\\nError: Equal\\n    Line 19: Char 19 in solution.js (Object.notToBe)\\n    Line 32: Char 13 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\n\\n\\n\\nAny suggestions\\n"
                    },
                    {
                        "username": "JNintheMix",
                        "content": "probably because val is not defined"
                    },
                    {
                        "username": "abdousamy19as",
                        "content": "[@user4119D](/user4119D)  They want us to throw an error in the instructions, not to return anything."
                    },
                    {
                        "username": "byIbrahimAli",
                        "content": "Yeah, weird one. Think it's the way the tests are written, we don't need to catch the errors, we just need to propagate or throw out an error. The caller will catch any errors and handle that. "
                    },
                    {
                        "username": "user4119D",
                        "content": "throw new Error(\"Equal\"); --> does not return anything. "
                    },
                    {
                        "username": "WiensR",
                        "content": "I have the same error. Other solutions give the same error"
                    },
                    {
                        "username": "nisheshacharya",
                        "content": "The solution is not difficult, but it is difficult to understand the question. \\nYou need to return an object with functions. "
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "I have a question and I can't understand why this code doesn't work. Can someone please provide me with explanation, it passes 30/35 test cases\n\n`var expect = function(val) {\n    return {\n        toBe(num) {\n            if (val === num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        },\n\n        notToBe(num) {\n            if (val !== num) {\n                return true\n            } else {\n                throw new Error('Not Equal')\n            }\n        }\n    }\n};`\n\nAnd here is the code that I saw in the solutions sections\n\n`var expect = function(val) {\n    function toBe(compair) {\n        if(val === compair){\n            return true\n        } else {\n            throw new Error('Not Equal')\n        }\n    }\n\n    function notToBe(compair){\n        if(val !== compair){\n            return true\n        } else {\n            throw new Error(\"Equal\")\n        }\n    }\n\n    return {\n        toBe,\n        notToBe\n    }\n};`\n\nI'm struggling with understanding the difference because my code fails on this testcase\n\n`() => { const o = {}; return expect(o).notToBe(o); }`\n\nBut I don't understand how the second code handles this input then"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "so you need to return an object and these functions toBe and notToBe must pair key value in the object\\n"
                    },
                    {
                        "username": "Stepash_ka",
                        "content": "[@Abdeslam_](/Abdeslam_) Yeah, thanks, I\\'m so silly :)"
                    },
                    {
                        "username": "Abdeslam_",
                        "content": "in notToBe you are throwing \"Not Equal\" that\\'s why I think your tests doesn\\'t pass , you should instead throw \"Equal\";"
                    },
                    {
                        "username": "Yuvv",
                        "content": "Why are there so many problems to test javascript skills starting from problem-2600.... Should we major in data  structure and algorithm? This is LeetCode, not a javascript learning site."
                    },
                    {
                        "username": "iamkevinvle",
                        "content": "98% of LC's problems are standard DS&A problems. not sure why you have a gripe with leetcode introducing 30+ JS problems"
                    },
                    {
                        "username": "ccmbike",
                        "content": "This question is very misleading. it expects the key 'value' or 'error' as part of the return object, but when i input the same code in developer console on google it will return just the value, so you have to take that into consideration"
                    },
                    {
                        "username": "anubhav_vks",
                        "content": "what is the name of this concept? a function which returns a object with multiple function?"
                    },
                    {
                        "username": "Archa009",
                        "content": "I have written this solution but i am getting run time error in second function throw.  Can somebody suggest what i have done wrong here ?\nException : \nLine 18 in solution.js\n             throw new Error('Equal')\n             ^\nError: Equal\n    Line 18: Char 20 in solution.js (Object.notToBe)\n    Line 26: Char 12 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\nMy solution :\n\nvar expect = function(val) {\n   const toBe = (val2) => {\n        if(val === val2) {\n            return true\n        } else {\n            throw new Error('Not Equal')\n        } \n    }\n\n    const notToBe = (num) => {\n        if (val !== num) {\n            return true\n        } else {\n             throw new Error('Equal')\n        }\n    }\n\n    return {toBe , notToBe}\n}"
                    },
                    {
                        "username": "Lizandro12",
                        "content": "tries to put functions inside an object in a function and then return that object"
                    },
                    {
                        "username": "juligarc91",
                        "content": "The question is confusing. It's asking you to return booleans or strings in the question but once you run your code the results show the expected output should be an object. The expected input val is a function with 2 parameters it seems (not a string)."
                    },
                    {
                        "username": "EleetSoul",
                        "content": "`var expect = function(val) {     \\n  return {\\n   toBe: (num) => {\\n        if(val !== num) throw new Error(\"Not Equal\");\\n        else return true;\\n    },\\n    notToBe: (num) => {\\n        if (val === num ) throw new Error(\"Equal\");\\n            else return true;\\n    }\\n }\\n};\\n expect(5).toBe(5); // true\\n expect(5).notToBe(5); // throws \"Equal\"`\\n\\n\\nCan any one tell me why i am getting this error => \\nLine 15 in solution.js\\n        if (val === num ) throw new Error(\"Equal\");\\n                          ^\\nError: Equal\\n    Line 15: Char 33 in solution.js (Object.notToBe)\\n    Line 25: Char 12 in solution.js (Object.<anonymous>)\\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\\n    at Module.load (node:internal/modules/cjs/loader:981:32)\\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47"
                    }
                ]
            }
        ]
    }
]