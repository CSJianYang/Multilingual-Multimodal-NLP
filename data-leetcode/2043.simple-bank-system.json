[
    {
        "title": "Simple Bank System",
        "question_content": "You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has n accounts numbered from 1 to n. The initial balance of each account is stored in a 0-indexed integer array balance, with the (i + 1)th account having an initial balance of balance[i].\nExecute all the valid transactions. A transaction is valid if:\n\n\tThe given account number(s) are between 1 and n, and\n\tThe amount of money withdrawn or transferred from is less than or equal to the balance of the account.\n\nImplement the Bank class:\n\n\tBank(long[] balance) Initializes the object with the 0-indexed integer array balance.\n\tboolean transfer(int account1, int account2, long money) Transfers money dollars from the account numbered account1 to the account numbered account2. Return true if the transaction was successful, false otherwise.\n\tboolean deposit(int account, long money) Deposit money dollars into the account numbered account. Return true if the transaction was successful, false otherwise.\n\tboolean withdraw(int account, long money) Withdraw money dollars from the account numbered account. Return true if the transaction was successful, false otherwise.\n\n&nbsp;\nExample 1:\n\nInput\n[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]\nOutput\n[null, true, true, true, false, false]\nExplanation\nBank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n                         // Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n                         // Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20);     // return true, it is valid to deposit $20 to account 5.\n                         // Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n                         // so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50);   // return false, it is invalid because account 10 does not exist.\n\n&nbsp;\nConstraints:\n\n\tn == balance.length\n\t1 <= n, account, account1, account2 <= 105\n\t0 <= balance[i], money <= 1012\n\tAt most 104 calls will be made to each function transfer, deposit, withdraw.",
        "solutions": [
            {
                "id": 1525334,
                "title": "chain-withdraw-and-deposit",
                "content": "Straightforward; just wanted to shorten the `transfer` function by reusing `deposit` and `withdraw`.\\n\\n**C++**\\n```cpp\\nclass Bank {\\npublic:\\n    vector<long long> b;\\n    Bank(vector<long long>& balance) { swap(b, balance); }\\n    bool transfer(int account1, int account2, long long money) {\\n        if (account2 <= b.size() && withdraw(account1, money))\\n            return deposit(account2, money);\\n        return false;\\n    }\\n    bool deposit(int account, long long money) {\\n        if (account <= b.size()) {\\n            b[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool withdraw(int account, long long money, bool check = false) {\\n        if (account <= b.size() && b[account - 1] >= money) {\\n            b[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Bank {\\npublic:\\n    vector<long long> b;\\n    Bank(vector<long long>& balance) { swap(b, balance); }\\n    bool transfer(int account1, int account2, long long money) {\\n        if (account2 <= b.size() && withdraw(account1, money))\\n            return deposit(account2, money);\\n        return false;\\n    }\\n    bool deposit(int account, long long money) {\\n        if (account <= b.size()) {\\n            b[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool withdraw(int account, long long money, bool check = false) {\\n        if (account <= b.size() && b[account - 1] >= money) {\\n            b[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525560,
                "title": "java-simple",
                "content": "```\\nclass Bank {\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.balance = balance;    \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account2 > balance.length || !withdraw(account1, money)) return false;\\n        return deposit(account2,money);\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account > balance.length) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account > balance.length || balance[account-1] < money) return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.balance = balance;    \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account2 > balance.length || !withdraw(account1, money)) return false;\\n        return deposit(account2,money);\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account > balance.length) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account > balance.length || balance[account-1] < money) return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525221,
                "title": "python3-just-do-what-s-told",
                "content": "\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdraw(account1, money): \\n            if self.deposit(account2, money): return True \\n            self.deposit(account1, money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1 <= account <= len(self.balance): \\n            self.balance[account-1] += money\\n            return True \\n        \\n    def withdraw(self, account: int, money: int) -> bool:\\n        if 1 <= account <= len(self.balance) and self.balance[account-1] >= money: \\n            self.balance[account-1] -= money\\n            return True \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdraw(account1, money): \\n            if self.deposit(account2, money): return True \\n            self.deposit(account1, money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1 <= account <= len(self.balance): \\n            self.balance[account-1] += money\\n            return True \\n        \\n    def withdraw(self, account: int, money: int) -> bool:\\n        if 1 <= account <= len(self.balance) and self.balance[account-1] >= money: \\n            self.balance[account-1] -= money\\n            return True \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2326602,
                "title": "c-shouldn-t-be-a-medium-que-straightforward",
                "content": "![image](https://assets.leetcode.com/users/images/8b60a0a4-8250-4b21-beb3-621f0b7e73e6_1658657491.9926457.png)\\n\\n**All the opeartions are in O(1)**\\n\\n\\tclass Bank {\\n\\tpublic:\\n\\t\\tvector<long long> temp;\\n\\t\\tint n;\\n\\t\\tBank(vector<long long>& balance) {\\n\\t\\t\\ttemp=balance;\\n\\t\\t\\tn=balance.size();\\n\\t\\t}\\n\\n\\t\\tbool transfer(int account1, int account2, long long money) {\\n\\t\\t\\tif(account1<=n && account2<=n && account1>0 && account2>0 && temp[account1-1]>=money){\\n\\t\\t\\t\\ttemp[account1-1]-=money;\\n\\t\\t\\t\\ttemp[account2-1]+=money;\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tbool deposit(int account, long long money) {\\n\\t\\t\\tif(account>n || account<0)return false;\\n\\t\\t\\ttemp[account-1]+=money;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tbool withdraw(int account, long long money) {\\n\\t\\t\\tif(account<=n && account>0 && temp[account-1]>=money){\\n\\t\\t\\t\\ttemp[account-1]-=money;\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/8b60a0a4-8250-4b21-beb3-621f0b7e73e6_1658657491.9926457.png)\\n\\n**All the opeartions are in O(1)**\\n\\n\\tclass Bank {\\n\\tpublic:\\n\\t\\tvector<long long> temp;\\n\\t\\tint n;\\n\\t\\tBank(vector<long long>& balance) {\\n\\t\\t\\ttemp=balance;\\n\\t\\t\\tn=balance.size();\\n\\t\\t}\\n\\n\\t\\tbool transfer(int account1, int account2, long long money) {\\n\\t\\t\\tif(account1<=n && account2<=n && account1>0 && account2>0 && temp[account1-1]>=money){\\n\\t\\t\\t\\ttemp[account1-1]-=money;\\n\\t\\t\\t\\ttemp[account2-1]+=money;\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tbool deposit(int account, long long money) {\\n\\t\\t\\tif(account>n || account<0)return false;\\n\\t\\t\\ttemp[account-1]+=money;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tbool withdraw(int account, long long money) {\\n\\t\\t\\tif(account<=n && account>0 && temp[account-1]>=money){\\n\\t\\t\\t\\ttemp[account-1]-=money;\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t};",
                "codeTag": "Java"
            },
            {
                "id": 1525163,
                "title": "c-straightforward-solution",
                "content": "\\n\\n```\\nclass Bank {\\npublic:\\n    vector<long long> balance;\\n    int n;\\n    Bank(vector<long long>& b) {\\n        balance = b;\\n        n = b.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if (account1-- > n || account2-- > n) return false;\\n        if(balance[account1] < money) return false;\\n        balance[account1] -= money;\\n        balance[account2] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account-- > n) return false;\\n        balance[account] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account-- > n) return false;\\n        if(balance[account] < money) return false;\\n        balance[account] -= money;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> balance;\\n    int n;\\n    Bank(vector<long long>& b) {\\n        balance = b;\\n        n = b.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if (account1-- > n || account2-- > n) return false;\\n        if(balance[account1] < money) return false;\\n        balance[account1] -= money;\\n        balance[account2] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account-- > n) return false;\\n        balance[account] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account-- > n) return false;\\n        if(balance[account] < money) return false;\\n        balance[account] -= money;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3145743,
                "title": "java-solution-using-arraylist-easy-to-understand",
                "content": "![upvote.jpeg](https://assets.leetcode.com/users/images/2aa3b8c1-3c3c-4c4f-889c-e2c7c2b04b19_1675593397.3491526.jpeg)\\n\\n\\n# Code\\n```\\nclass Bank {\\n    List<Long>list=new ArrayList<>();\\n    public Bank(long[] balance) {\\n        for(int i=0;i<balance.length;i++){\\n            list.add(balance[i]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1-1<list.size()&&account2-1<list.size()&&list.get(account1-1)>=money){\\n             long val=list.get(account1-1);\\n             long res=val-money;\\n             list.set(account1-1,res);\\n             list.set(account2-1,list.get(account2-1)+money);\\n             return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account-1<list.size()){\\n            list.set(account-1,list.get(account-1)+money);\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account-1<list.size()&&list.get(account-1)>=money){\\n            list.set(account-1,list.get(account-1)-money);\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    List<Long>list=new ArrayList<>();\\n    public Bank(long[] balance) {\\n        for(int i=0;i<balance.length;i++){\\n            list.add(balance[i]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1-1<list.size()&&account2-1<list.size()&&list.get(account1-1)>=money){\\n             long val=list.get(account1-1);\\n             long res=val-money;\\n             list.set(account1-1,res);\\n             list.set(account2-1,list.get(account2-1)+money);\\n             return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account-1<list.size()){\\n            list.set(account-1,list.get(account-1)+money);\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account-1<list.size()&&list.get(account-1)>=money){\\n            list.set(account-1,list.get(account-1)-money);\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525301,
                "title": "c-starightforward-solution",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long>balance;\\n    Bank(vector<long long>& bal) {\\n        for(int i=0;i<bal.size();i++)\\n        {\\n            balance.push_back(bal[i]);\\n        }\\n    }\\n    bool transfer(int account1, int account2, long long money) {\\n        if((account1>=1 and account1<=balance.size()) and (account2>=1 and account2<=balance.size()))\\n        {\\n            if(money <= balance[account1-1])\\n            {   \\n                balance[account1-1] = balance[account1-1]-money;\\n                balance[account2-1] = balance[account2-1]+money;\\n                return true;\\n            }\\n            else\\n                return false;\\n        }\\n        return false;\\n    }\\n    bool deposit(int account, long long money) {\\n        if((account>=1 and account<=balance.size()))\\n        {\\n            balance[account-1] = balance[account-1] + money;\\n            return true;\\n        }\\n        else\\n            return false;\\n    }\\n    bool withdraw(int account, long long money) {\\n        if((account>=1 and account<=balance.size()))\\n        {\\n            if(money <= balance[account-1])\\n            {\\n                balance[account-1]-=money;\\n                return true;\\n            }\\n            else\\n                return false;\\n        }\\n        else\\n            return false;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long>balance;\\n    Bank(vector<long long>& bal) {\\n        for(int i=0;i<bal.size();i++)\\n        {\\n            balance.push_back(bal[i]);\\n        }\\n    }\\n    bool transfer(int account1, int account2, long long money) {\\n        if((account1>=1 and account1<=balance.size()) and (account2>=1 and account2<=balance.size()))\\n        {\\n            if(money <= balance[account1-1])\\n            {   \\n                balance[account1-1] = balance[account1-1]-money;\\n                balance[account2-1] = balance[account2-1]+money;\\n                return true;\\n            }\\n            else\\n                return false;\\n        }\\n        return false;\\n    }\\n    bool deposit(int account, long long money) {\\n        if((account>=1 and account<=balance.size()))\\n        {\\n            balance[account-1] = balance[account-1] + money;\\n            return true;\\n        }\\n        else\\n            return false;\\n    }\\n    bool withdraw(int account, long long money) {\\n        if((account>=1 and account<=balance.size()))\\n        {\\n            if(money <= balance[account-1])\\n            {\\n                balance[account-1]-=money;\\n                return true;\\n            }\\n            else\\n                return false;\\n        }\\n        else\\n            return false;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525287,
                "title": "c-solution",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        account1--;\\n        account2--;\\n        if(account1>n || account1<0 || account2>n || account2<0)return false;\\n        if(bal[account1]-money < 0)return false;\\n        bal[account1] -= money;\\n        bal[account2] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account1, long long money) {\\n        account1--;\\n        if(account1>n || account1<0)return false;\\n        bal[account1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account1, long long money) {\\n        account1--;\\n        if(account1>n || account1<0)return false;\\n        if(bal[account1]-money < 0)return false;\\n        bal[account1] -= money;\\n        return true;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        account1--;\\n        account2--;\\n        if(account1>n || account1<0 || account2>n || account2<0)return false;\\n        if(bal[account1]-money < 0)return false;\\n        bal[account1] -= money;\\n        bal[account2] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account1, long long money) {\\n        account1--;\\n        if(account1>n || account1<0)return false;\\n        bal[account1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account1, long long money) {\\n        account1--;\\n        if(account1>n || account1<0)return false;\\n        if(bal[account1]-money < 0)return false;\\n        bal[account1] -= money;\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525207,
                "title": "c-straightforward",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1.\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-263/problems/simple-bank-system/\\n// Author: github.com/lzl124631x\\n// Time: O(1) for all\\n// Space: O(N)\\nclass Bank {\\n    vector<long long> balance;\\n    bool valid(int account) {\\n        return account > 0 && account <= balance.size();\\n    }\\n    bool enough(int account, long long money) {\\n        return balance[account - 1] >= money;\\n    }\\npublic:\\n    Bank(vector<long long>& balance) : balance(balance) {}\\n    bool transfer(int from, int to, long long money) {\\n        if (valid(from) && valid(to) && enough(from, money)) {\\n            balance[from - 1] -= money;\\n            balance[to - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool deposit(int account, long long money) {\\n        if (valid(account)) {\\n            balance[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool withdraw(int account, long long money) {\\n        if (valid(account) && enough(account, money)) {\\n            balance[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```\\n\\nWe can also implement `transfer` using `withdraw` and `deposit`.\\n\\n```cpp\\nbool transfer(int from, int to, long long money) {\\n    return valid(to) && withdraw(from, money) && deposit(to, money);\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-263/problems/simple-bank-system/\\n// Author: github.com/lzl124631x\\n// Time: O(1) for all\\n// Space: O(N)\\nclass Bank {\\n    vector<long long> balance;\\n    bool valid(int account) {\\n        return account > 0 && account <= balance.size();\\n    }\\n    bool enough(int account, long long money) {\\n        return balance[account - 1] >= money;\\n    }\\npublic:\\n    Bank(vector<long long>& balance) : balance(balance) {}\\n    bool transfer(int from, int to, long long money) {\\n        if (valid(from) && valid(to) && enough(from, money)) {\\n            balance[from - 1] -= money;\\n            balance[to - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool deposit(int account, long long money) {\\n        if (valid(account)) {\\n            balance[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool withdraw(int account, long long money) {\\n        if (valid(account) && enough(account, money)) {\\n            balance[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```\n```cpp\\nbool transfer(int from, int to, long long money) {\\n    return valid(to) && withdraw(from, money) && deposit(to, money);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525176,
                "title": "java-solution-easy-understanding-o-n-space-o-1-time",
                "content": "```\\nclass Bank {\\n\\n    int N;\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.N = balance.length;\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 < 1 || account1 > N || account2 < 1 || account2 > N || balance[account1 - 1] < money)\\n            return false;\\n        balance[account1 - 1] -= money;\\n        balance[account2 - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account < 1 || account > N)\\n            return false;\\n        balance[account - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account < 1 || account > N || balance[account - 1] < money)\\n            return false;\\n        balance[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    int N;\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.N = balance.length;\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 < 1 || account1 > N || account2 < 1 || account2 > N || balance[account1 - 1] < money)\\n            return false;\\n        balance[account1 - 1] -= money;\\n        balance[account2 - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account < 1 || account > N)\\n            return false;\\n        balance[account - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account < 1 || account > N || balance[account - 1] < money)\\n            return false;\\n        balance[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3307235,
                "title": "c-solution",
                "content": "# Code\\n```\\n#include<bits/stdc++.h>\\nusing namespace std;\\n#define LL long long \\nclass Bank {\\npublic:\\n    vector<LL> B;\\n    int N;\\n    Bank(vector<long long>& balance) {\\n        B=balance;\\n        N=(int)B.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>N or account1<1 or account2>N or account2<1){\\n            return false;\\n        }\\n        if(B[account1-1]<money){\\n            return false;\\n        }\\n        B[account1-1]-=money;\\n        B[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>N or account<1){\\n            return false;\\n        }\\n        B[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>N or account<1 or B[account-1]<money){\\n            return false;\\n        }\\n\\n        B[account-1]-=money;\\n        return true;\\n\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#include<bits/stdc++.h>\\nusing namespace std;\\n#define LL long long \\nclass Bank {\\npublic:\\n    vector<LL> B;\\n    int N;\\n    Bank(vector<long long>& balance) {\\n        B=balance;\\n        N=(int)B.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>N or account1<1 or account2>N or account2<1){\\n            return false;\\n        }\\n        if(B[account1-1]<money){\\n            return false;\\n        }\\n        B[account1-1]-=money;\\n        B[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>N or account<1){\\n            return false;\\n        }\\n        B[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>N or account<1 or B[account-1]<money){\\n            return false;\\n        }\\n\\n        B[account-1]-=money;\\n        return true;\\n\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2144796,
                "title": "simple-code-validations-decoupled-straight-forward",
                "content": "# Simple system design problem.\\n\\nWe should decouple our validations elsewhere instead of writing them again (DRY Principle).\\n\\nIf statements should be used otherwise false should be returned straightaway without having the need for else statments. Code should be decoupled and reusable as much as possible. \\n\\n\\n```\\nclass Bank {\\n\\n    private long[] balance;\\n    \\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        \\n        if(isAccountValid(account1) && isAccountValid(account2) && balance[account1-1] >= money)\\n        {\\n            balance[account1-1] = balance[account1-1] - money;\\n            balance[account2-1] = balance[account2-1] + money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n        if(isAccountValid(account))\\n        {\\n            balance[account-1] = balance[account-1] + money;\\n            return true;    \\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        \\n        if(isAccountValid(account) && balance[account-1] >= money )\\n        {\\n            balance[account-1] = balance[account-1] - money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    private boolean isAccountValid(int account)\\n    {\\n        if(account - 1 < balance.length && account  >= 1)\\n            return true;\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */",
                "solutionTags": [
                    "Java"
                ],
                "code": "# Simple system design problem.\\n\\nWe should decouple our validations elsewhere instead of writing them again (DRY Principle).\\n\\nIf statements should be used otherwise false should be returned straightaway without having the need for else statments. Code should be decoupled and reusable as much as possible. \\n\\n\\n```\\nclass Bank {\\n\\n    private long[] balance;\\n    \\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        \\n        if(isAccountValid(account1) && isAccountValid(account2) && balance[account1-1] >= money)\\n        {\\n            balance[account1-1] = balance[account1-1] - money;\\n            balance[account2-1] = balance[account2-1] + money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n        if(isAccountValid(account))\\n        {\\n            balance[account-1] = balance[account-1] + money;\\n            return true;    \\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        \\n        if(isAccountValid(account) && balance[account-1] >= money )\\n        {\\n            balance[account-1] = balance[account-1] - money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    private boolean isAccountValid(int account)\\n    {\\n        if(account - 1 < balance.length && account  >= 1)\\n            return true;\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 2034981,
                "title": "easy-python-solution-faster-than-100-with-comments",
                "content": "# Easy Python Solution | Faster than 100%  | With Comments\\n\\n**Runtime: 673 ms, faster than 100.00% of Python3 online submissions for Simple Bank System.\\nMemory Usage: 43.8 MB.**\\n\\n```\\nclass Bank:\\n\\n    def __init__(self, bal: List[int]):\\n        self.store = bal  # storage list\\n\\n\\n    def transfer(self, a1: int, a2: int, money: int) -> bool:\\n        try:\\n            # checking if both accounts exist. and if the transaction would be valid\\n            if self.store[a1 - 1] >= money and self.store[a2 - 1] >= 0:\\n                # performing the transaction\\n                self.store[a1 - 1] -= money\\n                self.store[a2 - 1] += money\\n                return True\\n            else:\\n                # retrning false on invalid transaction\\n                return False\\n        except:\\n            # returning false when accounts don\\'t exist\\n            return False\\n\\n\\n    def deposit(self, ac: int, mn: int) -> bool:\\n        try:\\n            # if account exists performing transaction\\n            self.store[ac - 1] += mn\\n            return True\\n        except:\\n            # returning false when account doesn\\'t exist\\n            return False\\n\\n\\n    def withdraw(self, ac: int, mn: int) -> bool:\\n        try:\\n            # checking if transaction is valid\\n            if self.store[ac - 1] >= mn:\\n                # performing the transaction\\n                self.store[ac - 1] -= mn\\n                return True\\n            else:\\n                # returning false in case on invalid transaction\\n                return False\\n        except:\\n            # returning false when account doesn\\'t exist\\n            return False\\n```\\n\\n![image](https://assets.leetcode.com/users/images/c56ab906-201b-4651-8b2e-2e6e7cbae642_1652449174.000753.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, bal: List[int]):\\n        self.store = bal  # storage list\\n\\n\\n    def transfer(self, a1: int, a2: int, money: int) -> bool:\\n        try:\\n            # checking if both accounts exist. and if the transaction would be valid\\n            if self.store[a1 - 1] >= money and self.store[a2 - 1] >= 0:\\n                # performing the transaction\\n                self.store[a1 - 1] -= money\\n                self.store[a2 - 1] += money\\n                return True\\n            else:\\n                # retrning false on invalid transaction\\n                return False\\n        except:\\n            # returning false when accounts don\\'t exist\\n            return False\\n\\n\\n    def deposit(self, ac: int, mn: int) -> bool:\\n        try:\\n            # if account exists performing transaction\\n            self.store[ac - 1] += mn\\n            return True\\n        except:\\n            # returning false when account doesn\\'t exist\\n            return False\\n\\n\\n    def withdraw(self, ac: int, mn: int) -> bool:\\n        try:\\n            # checking if transaction is valid\\n            if self.store[ac - 1] >= mn:\\n                # performing the transaction\\n                self.store[ac - 1] -= mn\\n                return True\\n            else:\\n                # returning false in case on invalid transaction\\n                return False\\n        except:\\n            # returning false when account doesn\\'t exist\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1878698,
                "title": "c-simple-and-clean-code",
                "content": "```\\nclass Bank {\\n    \\n    vector<long long> balance;\\n  \\npublic:\\n    Bank(vector<long long>& balance) {\\n        this -> balance = balance;\\n    }\\n    \\n    inline bool isValidAccount(int accountNo){\\n        \\n        return accountNo >= 1 and accountNo <= balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        if(!isValidAccount(account1) or !isValidAccount(account2))\\n            return false;\\n        \\n        if(balance[account1 - 1] < money)\\n            return false;\\n        \\n        balance[account1 - 1] -= money;\\n        \\n        balance[account2 - 1] += money;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        \\n        if(!isValidAccount(account))\\n            return false;\\n        \\n        balance[account - 1] += money;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        \\n         if(!isValidAccount(account))\\n            return false;\\n        \\n        if(balance[account - 1] < money)\\n            return false;\\n        \\n        balance[account - 1] -= money;\\n        \\n        return true;\\n    }\\n    \\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\n    \\n    vector<long long> balance;\\n  \\npublic:\\n    Bank(vector<long long>& balance) {\\n        this -> balance = balance;\\n    }\\n    \\n    inline bool isValidAccount(int accountNo){\\n        \\n        return accountNo >= 1 and accountNo <= balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        if(!isValidAccount(account1) or !isValidAccount(account2))\\n            return false;\\n        \\n        if(balance[account1 - 1] < money)\\n            return false;\\n        \\n        balance[account1 - 1] -= money;\\n        \\n        balance[account2 - 1] += money;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        \\n        if(!isValidAccount(account))\\n            return false;\\n        \\n        balance[account - 1] += money;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        \\n         if(!isValidAccount(account))\\n            return false;\\n        \\n        if(balance[account - 1] < money)\\n            return false;\\n        \\n        balance[account - 1] -= money;\\n        \\n        return true;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525306,
                "title": "c-easy-solution",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> amount;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        n=balance.size();\\n        for(long long b:balance)\\n            amount.push_back(b);\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>n || account1<1)\\n            return false;\\n        if(account2>n || account2<1)\\n            return false;\\n        if(amount[account1-1]<money)\\n            return false;\\n        amount[account1-1]-=money;\\n        amount[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n         if(account>n || account<1)\\n            return false;\\n        amount[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n         if(account>n || account<1)\\n            return false;\\n        if(amount[account-1]<money)\\n            return false;\\n        amount[account-1]-=money;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> amount;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        n=balance.size();\\n        for(long long b:balance)\\n            amount.push_back(b);\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>n || account1<1)\\n            return false;\\n        if(account2>n || account2<1)\\n            return false;\\n        if(amount[account1-1]<money)\\n            return false;\\n        amount[account1-1]-=money;\\n        amount[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n         if(account>n || account<1)\\n            return false;\\n        amount[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n         if(account>n || account<1)\\n            return false;\\n        if(amount[account-1]<money)\\n            return false;\\n        amount[account-1]-=money;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525246,
                "title": "transaction-with-money-zero-is-valid",
                "content": "Please explain why on Earth money = 0 returns true?!\\n\\nNo where in constraint is define but it is logical if you come to bank and ask to transfer zero no one will create transaction.\\n\\nThis is test case:\\n[\"Bank\",\"deposit\",\"transfer\",\"withdraw\",\"deposit\",\"transfer\",\"withdraw\"]\\n[[[0]],[1,1000000000000],[1,1,1000000000000],[1,1000000000000],[1,0],[1,1,0],[1,0]]\\n\\nSo, 3 last will return true as expectation, I do not get why?\\n\\nI guess in real life you got to Bank and say \"Hey can you transfer 0 money\" and they say \"Sure sir why not, here you go, let us make a record of this transaction...\" \\n\\nSo money constraint is define as:\\n```money <= 10^12```\\n\\nLower boundery is not defined that means that negative numbers should also work, for instance if you withdraw -10$ that would mean deposit 10$. And if you deposit -10 that would mean Withdraw ... by the same logic like with zero.\\n\\nAlthough it is not mentioned anywhere, test case will instead fail with:\\n\\'withdraw\\' arguments are invalid: expected \\'money\\' to have value from 0 to 1000000000000 only\\n\\n**Edit: **\\nLesson learned, issue was with misleading constraint notation. \\n```0 <= balance[i], money <= 10^12``` \\nis not =\\n```\\n0 <= balance[i]\\nmoney <= 10^12\\n```\\nbut means\\n```\\n0 <= balance[i] <= 10^12\\n0 <= money <= 10^12\\n```\\n\\n\\n\\n\\n",
                "solutionTags": [],
                "code": "```money <= 10^12```\n```0 <= balance[i], money <= 10^12```\n```\\n0 <= balance[i]\\nmoney <= 10^12\\n```\n```\\n0 <= balance[i] <= 10^12\\n0 <= money <= 10^12\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3672609,
                "title": "very-simple-and-easy-solution-ts-js-using-hashmap-ds",
                "content": "# Request\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nPlease upvote and show some love if you like my explanation.\\nHappy Coding\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nEdge Case - Always Check if the account exists or not in every method you write\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n    private ledger : object\\n    private balance : number[]\\n    constructor(balance: number[]) {\\n        this.balance = balance\\n        this.ledger = {}\\n        for(let i = 0 ; i < this.balance.length ; i++){\\n            this.ledger[i+1] = this.balance[i]\\n        }\\n        console.log(this.ledger,this.balance.length)\\n    }\\n\\n    transfer(account1: number, account2: number, money: number): boolean {\\n        if(this.ledger[account1] >= money && this.ledger[account1] !== undefined &&this.ledger[account2] !== undefined){\\n            this.ledger[account1] = this.ledger[account1] - money\\n            this.ledger[account2] = this.ledger[account2] + money\\n            return true\\n        }\\n        return false\\n    }\\n\\n    deposit(account: number, money: number): boolean {\\n        if(this.ledger[account] !== undefined){\\n            this.ledger[account] = this.ledger[account] + money\\n            return true\\n        }\\n        return false\\n    }\\n\\n    withdraw(account: number, money: number): boolean {\\n        if(this.ledger[account] >= money && this.ledger[account] !== undefined){\\n            this.ledger[account] = this.ledger[account] - money\\n            return true\\n        }\\n        return false\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * var obj = new Bank(balance)\\n * var param_1 = obj.transfer(account1,account2,money)\\n * var param_2 = obj.deposit(account,money)\\n * var param_3 = obj.withdraw(account,money)\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Hash Table"
                ],
                "code": "```\\nclass Bank {\\n    private ledger : object\\n    private balance : number[]\\n    constructor(balance: number[]) {\\n        this.balance = balance\\n        this.ledger = {}\\n        for(let i = 0 ; i < this.balance.length ; i++){\\n            this.ledger[i+1] = this.balance[i]\\n        }\\n        console.log(this.ledger,this.balance.length)\\n    }\\n\\n    transfer(account1: number, account2: number, money: number): boolean {\\n        if(this.ledger[account1] >= money && this.ledger[account1] !== undefined &&this.ledger[account2] !== undefined){\\n            this.ledger[account1] = this.ledger[account1] - money\\n            this.ledger[account2] = this.ledger[account2] + money\\n            return true\\n        }\\n        return false\\n    }\\n\\n    deposit(account: number, money: number): boolean {\\n        if(this.ledger[account] !== undefined){\\n            this.ledger[account] = this.ledger[account] + money\\n            return true\\n        }\\n        return false\\n    }\\n\\n    withdraw(account: number, money: number): boolean {\\n        if(this.ledger[account] >= money && this.ledger[account] !== undefined){\\n            this.ledger[account] = this.ledger[account] - money\\n            return true\\n        }\\n        return false\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * var obj = new Bank(balance)\\n * var param_1 = obj.transfer(account1,account2,money)\\n * var param_2 = obj.deposit(account,money)\\n * var param_3 = obj.withdraw(account,money)\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189412,
                "title": "python-decorator",
                "content": "\\n# Code\\n```\\ndef validator(function):\\n    def wrapper(self, *args, **kwargs):\\n        if len(args) == 3:\\n            account1, account2, money = args\\n            if (account1 not in self.balance_map) or (account2 not in self.balance_map):\\n                return False\\n        elif len(args) == 2:\\n            account, money = args\\n            if account not in self.balance_map:\\n                return False\\n        return function(self, *args, **kwargs)\\n    return wrapper\\n\\n\\nclass Bank:\\n    def __init__(self, balance: List[int]):\\n        self.balance_map = {}\\n        for i in range(1, len(balance) + 1):\\n            self.balance_map[i] = balance[i - 1]        \\n\\n    @validator\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.balance_map[account1] >= money:                \\n            self.balance_map[account1] -= money\\n            self.balance_map[account2] += money\\n            return True\\n        else:\\n            return False\\n\\n    @validator\\n    def deposit(self, account: int, money: int) -> bool:              \\n        self.balance_map[account] += money\\n        return True\\n\\n    @validator\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.balance_map[account] >= money:\\n            self.balance_map[account] -= money\\n            return True\\n        else:\\n            return False\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef validator(function):\\n    def wrapper(self, *args, **kwargs):\\n        if len(args) == 3:\\n            account1, account2, money = args\\n            if (account1 not in self.balance_map) or (account2 not in self.balance_map):\\n                return False\\n        elif len(args) == 2:\\n            account, money = args\\n            if account not in self.balance_map:\\n                return False\\n        return function(self, *args, **kwargs)\\n    return wrapper\\n\\n\\nclass Bank:\\n    def __init__(self, balance: List[int]):\\n        self.balance_map = {}\\n        for i in range(1, len(balance) + 1):\\n            self.balance_map[i] = balance[i - 1]        \\n\\n    @validator\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.balance_map[account1] >= money:                \\n            self.balance_map[account1] -= money\\n            self.balance_map[account2] += money\\n            return True\\n        else:\\n            return False\\n\\n    @validator\\n    def deposit(self, account: int, money: int) -> bool:              \\n        self.balance_map[account] += money\\n        return True\\n\\n    @validator\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.balance_map[account] >= money:\\n            self.balance_map[account] -= money\\n            return True\\n        else:\\n            return False\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114580,
                "title": "easy-c-solution-faster-than-others",
                "content": "\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n    vector<long long>balance;\\n    Bank(vector<long long>& balance) {\\n        this->balance=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1<1 || account1>balance.size()|| account2<1 || account2>balance.size()||(balance[account1-1]<money))return false;\\n        else{\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n        }\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account<1 || account>balance.size())return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<1 || account>balance.size() || balance[account-1]<money)return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long>balance;\\n    Bank(vector<long long>& balance) {\\n        this->balance=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1<1 || account1>balance.size()|| account2<1 || account2>balance.size()||(balance[account1-1]<money))return false;\\n        else{\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n        }\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account<1 || account>balance.size())return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<1 || account>balance.size() || balance[account-1]<money)return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2954481,
                "title": "easy-java-code-using-hashmap",
                "content": "\\n<!-- Describe your first thoughts o\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n    HashMap<Integer,Long> ms = new HashMap<>();\\n    int n;\\n    public Bank(long[] balance) {\\n         n= balance.length;\\n       for(int i=0;i<n;i++){\\n          ms.put(i+1,balance[i]);           \\n       }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 < 1||account1 >n||account2 <1||account2 >n||ms.get(account1)<money) return false;\\n        ms.put(account1,ms.get(account1)-money);\\n        ms.put(account2,ms.get(account2)+money);\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1||account>n)return false;\\n        ms.put(account,ms.get(account)+money);\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1||account>n||ms.get(account)<money)return false;\\n        ms.put(account,ms.get(account)-money);\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    HashMap<Integer,Long> ms = new HashMap<>();\\n    int n;\\n    public Bank(long[] balance) {\\n         n= balance.length;\\n       for(int i=0;i<n;i++){\\n          ms.put(i+1,balance[i]);           \\n       }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 < 1||account1 >n||account2 <1||account2 >n||ms.get(account1)<money) return false;\\n        ms.put(account1,ms.get(account1)-money);\\n        ms.put(account2,ms.get(account2)+money);\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1||account>n)return false;\\n        ms.put(account,ms.get(account)+money);\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1||account>n||ms.get(account)<money)return false;\\n        ms.put(account,ms.get(account)-money);\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2841370,
                "title": "cpp-easy-to-understand-map",
                "content": "# Code\\n```\\nclass Bank \\n{\\n    public:\\n    map<int,long long>mp;\\n    int n;\\n    //this map will going to store all the account and their repective balance\\'s\\n    Bank(vector<long long>& balance) \\n    {\\n        n = balance.size();\\n        for(int i=0;i<(balance.size());i++)\\n        {\\n            mp[i+1] = balance[i];\\n        }\\n    }\\n        \\n    bool transfer(int account1, int account2, long long money) \\n    {\\n        //if either of the account is not valid then just return false\\n        if(account1<1 or account1>n or account2<1 or account2>n)\\n        return false;\\n        //checking if the money can be transferred from account1 or not\\n        //if we need to transfer the money form account1 to account2 then\\n        //acouunt1 must have bal>= money\\n\\n        if(mp[account1] >= money)\\n        {\\n            mp[account1] = mp[account1] - money;\\n            mp[account2] = mp[account2] + money;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n        return false;   //unreachble code\\n    }\\n        \\n    bool deposit(int account, long long money) \\n    {\\n        //if the account is not valid to deposit the money then return false\\n        if(account<1 or account>n)\\n        return false;\\n        \\n        mp[account] = mp[account] + money;\\n        return true;\\n    }\\n        \\n    bool withdraw(int account, long long money) \\n    {\\n        //if the account is not valid to withdraw the money then return false\\n        if(account<1 or account>n)\\n        return false;\\n        \\n        //if the account is valid but does not have sufficient baclance then return false\\n        if(mp[account] < money)\\n        return false;\\n        \\n        mp[account] = mp[account] - money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\nclass Bank \\n{\\n    public:\\n    map<int,long long>mp;\\n    int n;\\n    //this map will going to store all the account and their repective balance\\'s\\n    Bank(vector<long long>& balance) \\n    {\\n        n = balance.size();\\n        for(int i=0;i<(balance.size());i++)\\n        {\\n            mp[i+1] = balance[i];\\n        }\\n    }\\n        \\n    bool transfer(int account1, int account2, long long money) \\n    {\\n        //if either of the account is not valid then just return false\\n        if(account1<1 or account1>n or account2<1 or account2>n)\\n        return false;\\n        //checking if the money can be transferred from account1 or not\\n        //if we need to transfer the money form account1 to account2 then\\n        //acouunt1 must have bal>= money\\n\\n        if(mp[account1] >= money)\\n        {\\n            mp[account1] = mp[account1] - money;\\n            mp[account2] = mp[account2] + money;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n        return false;   //unreachble code\\n    }\\n        \\n    bool deposit(int account, long long money) \\n    {\\n        //if the account is not valid to deposit the money then return false\\n        if(account<1 or account>n)\\n        return false;\\n        \\n        mp[account] = mp[account] + money;\\n        return true;\\n    }\\n        \\n    bool withdraw(int account, long long money) \\n    {\\n        //if the account is not valid to withdraw the money then return false\\n        if(account<1 or account>n)\\n        return false;\\n        \\n        //if the account is valid but does not have sufficient baclance then return false\\n        if(mp[account] < money)\\n        return false;\\n        \\n        mp[account] = mp[account] - money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2622713,
                "title": "c-easy-to-understand-short",
                "content": "```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> bal;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int a1, int a2, long long m) {\\n        \\n        if(a1 > n || a2 > n || bal[a1-1] < m) return false;\\n        \\n        bal[a1-1] -= m;\\n        bal[a2-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int a, long long m) {\\n        \\n        if(a > n) return false;\\n        \\n        bal[a-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int a, long long m) {\\n        \\n        if(a > n || bal[a-1] < m) return false;\\n        \\n        bal[a-1] -= m;\\n        \\n        return true;\\n        \\n    }\\n};\\n",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> bal;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int a1, int a2, long long m) {\\n        \\n        if(a1 > n || a2 > n || bal[a1-1] < m) return false;\\n        \\n        bal[a1-1] -= m;\\n        bal[a2-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int a, long long m) {\\n        \\n        if(a > n) return false;\\n        \\n        bal[a-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int a, long long m) {\\n        \\n        if(a > n || bal[a-1] < m) return false;\\n        \\n        bal[a-1] -= m;\\n        \\n        return true;\\n        \\n    }\\n};\\n",
                "codeTag": "Java"
            },
            {
                "id": 2279633,
                "title": "my-java-solution",
                "content": "class Bank {\\n    HashMap<Integer,Long>map;\\n    int n;\\n    public Bank(long[] balance) {\\n        map=new HashMap<>();\\n        this.n=balance.length;\\n        for(int i=0;i<balance.length;i++){\\n            map.put(i+1,balance[i]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<=0||account1>n){\\n            return false;\\n        }\\n        if(account2<=0||account2>n){\\n            return false;\\n        }\\n        if(map.get(account1)<money){\\n            return false;\\n        }\\n        map.put(account2,map.get(account2)+money);\\n        map.put(account1,map.get(account1)-money);\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account>n){\\n            return false;\\n        }\\n        map.put(account,map.get(account)+money);\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account>n){\\n            return false;\\n        }\\n        if(map.get(account)<money){\\n            return false;\\n        }\\n        map.put(account,map.get(account)-money);\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */",
                "solutionTags": [],
                "code": "class Bank {\\n    HashMap<Integer,Long>map;\\n    int n;\\n    public Bank(long[] balance) {\\n        map=new HashMap<>();\\n        this.n=balance.length;\\n        for(int i=0;i<balance.length;i++){\\n            map.put(i+1,balance[i]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<=0||account1>n){\\n            return false;\\n        }\\n        if(account2<=0||account2>n){\\n            return false;\\n        }\\n        if(map.get(account1)<money){\\n            return false;\\n        }\\n        map.put(account2,map.get(account2)+money);\\n        map.put(account1,map.get(account1)-money);\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account>n){\\n            return false;\\n        }\\n        map.put(account,map.get(account)+money);\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account>n){\\n            return false;\\n        }\\n        if(map.get(account)<money){\\n            return false;\\n        }\\n        map.put(account,map.get(account)-money);\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 2234937,
                "title": "easy-category-c",
                "content": "```\\nclass Bank {\\n    vector<long long> balance;\\npublic:\\n    Bank(vector<long long>& balance) {\\n        this->balance = balance;\\n    }\\n    bool isAccountValid(int acc){\\n        int l = balance.size();\\n        if(acc>0 && acc <l+1) return true;\\n        return false;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(isAccountValid(account1) && isAccountValid(account2) && balance[account1-1] >= money){\\n            balance[account1-1] -= money;\\n            balance[account2-1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(isAccountValid(account)){\\n            balance[account-1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n         if(isAccountValid(account) && balance[account-1] >= money){\\n             balance[account-1] -= money;\\n             return true;\\n         }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Bank {\\n    vector<long long> balance;\\npublic:\\n    Bank(vector<long long>& balance) {\\n        this->balance = balance;\\n    }\\n    bool isAccountValid(int acc){\\n        int l = balance.size();\\n        if(acc>0 && acc <l+1) return true;\\n        return false;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(isAccountValid(account1) && isAccountValid(account2) && balance[account1-1] >= money){\\n            balance[account1-1] -= money;\\n            balance[account2-1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(isAccountValid(account)){\\n            balance[account-1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n         if(isAccountValid(account) && balance[account-1] >= money){\\n             balance[account-1] -= money;\\n             return true;\\n         }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2091441,
                "title": "this-is-supposed-to-be-an-easy-question",
                "content": "class Bank {\\n    public long [] balance;\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(\\n           \\n            account1 > this.balance.length||\\n            account2 > this.balance.length||\\n             this.balance[account1-1]<money\\n          ){\\n            return false;\\n        }\\n        this.balance[account1-1] -= money;\\n        this.balance[account2-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account > this.balance.length){\\n            return false;\\n        }\\n        this.balance[account-1]+=money;    \\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account > this.balance.length || this.balance[account-1]<money){\\n            return false;\\n        }\\n        this.balance[account-1]-=money;    \\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */",
                "solutionTags": [],
                "code": "class Bank {\\n    public long [] balance;\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(\\n           \\n            account1 > this.balance.length||\\n            account2 > this.balance.length||\\n             this.balance[account1-1]<money\\n          ){\\n            return false;\\n        }\\n        this.balance[account1-1] -= money;\\n        this.balance[account2-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account > this.balance.length){\\n            return false;\\n        }\\n        this.balance[account-1]+=money;    \\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account > this.balance.length || this.balance[account-1]<money){\\n            return false;\\n        }\\n        this.balance[account-1]-=money;    \\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */",
                "codeTag": "Java"
            },
            {
                "id": 1864762,
                "title": "easy-c-solution-using-unordered-map",
                "content": "```\\nclass Bank {\\npublic:\\n    // In the unordered map the kye is the serial no. of the bank account and the value is the balance of the corresponding account\\n    unordered_map<int,long long>m;\\n    \\n    Bank(vector<long long>& balance) {\\n        // initialise the unordered map\\n        for(int i=0;i<balance.size();i++) {\\n            m[i+1]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        // check wheather the ids of the accounts lies between [1,n] or not\\n        if(account1<1 || account1>m.size() || account2<1 || account2>m.size()) {\\n            return false;\\n        }\\n        \\n        // if the investor doesn\\'t have sufficient balance then the transaction is unsuccessful\\n        if(m[account1]<money) {\\n            return false;\\n        }\\n        \\n        // otherwise adjust the money between the two accounts\\n        m[account1]-=money;\\n        m[account2]+=money;\\n        \\n        // transaction is successfull\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        // check wheather the id lies in [1,n] or not \\n        if(account<1 || account>m.size()) {\\n            return false;\\n        }\\n        \\n        // add the money to the account\\n        m[account]+=money;\\n        \\n        // transaction is successfull\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        //check the ids as well as the available balance of the investor\\n        if(account<1 || account>m.size() || m[account]<money) {\\n            return false;\\n        }\\n        \\n        // debit the money\\n        m[account]-=money;\\n        \\n        // transaction is successfull\\n        return true;\\n    }\\n};\\n```\\n***Please upvote if you have got any help from my code. Thank you.***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    // In the unordered map the kye is the serial no. of the bank account and the value is the balance of the corresponding account\\n    unordered_map<int,long long>m;\\n    \\n    Bank(vector<long long>& balance) {\\n        // initialise the unordered map\\n        for(int i=0;i<balance.size();i++) {\\n            m[i+1]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        // check wheather the ids of the accounts lies between [1,n] or not\\n        if(account1<1 || account1>m.size() || account2<1 || account2>m.size()) {\\n            return false;\\n        }\\n        \\n        // if the investor doesn\\'t have sufficient balance then the transaction is unsuccessful\\n        if(m[account1]<money) {\\n            return false;\\n        }\\n        \\n        // otherwise adjust the money between the two accounts\\n        m[account1]-=money;\\n        m[account2]+=money;\\n        \\n        // transaction is successfull\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        // check wheather the id lies in [1,n] or not \\n        if(account<1 || account>m.size()) {\\n            return false;\\n        }\\n        \\n        // add the money to the account\\n        m[account]+=money;\\n        \\n        // transaction is successfull\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        //check the ids as well as the available balance of the investor\\n        if(account<1 || account>m.size() || m[account]<money) {\\n            return false;\\n        }\\n        \\n        // debit the money\\n        m[account]-=money;\\n        \\n        // transaction is successfull\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1628383,
                "title": "java-just-do-what-they-have-said-to-do",
                "content": "```\\n    class Bank {\\n        private long[] balance;\\n        public Bank(long[] balance) {\\n            this.balance = balance;\\n        }\\n        \\n        public boolean transfer(int account1, int account2, long money) {\\n            if(!withdraw(account1, money))\\n                return false;\\n            if(deposit(account2, money))\\n                return true;\\n            deposit(account1, money);\\n            return false;\\n        }\\n\\n        public boolean deposit(int account, long money) {\\n            if(account >=1 && account <= balance.length) {\\n                balance[account - 1] += money;\\n                return true;    \\n            }\\n            return false;\\n        }\\n\\n        public boolean withdraw(int account, long money) {\\n            if(account >= 1 && account <= balance.length && balance[account-1] >= money){\\n                balance[account-1] -= money;\\n                return true;\\n            }\\n            return false;    \\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    class Bank {\\n        private long[] balance;\\n        public Bank(long[] balance) {\\n            this.balance = balance;\\n        }\\n        \\n        public boolean transfer(int account1, int account2, long money) {\\n            if(!withdraw(account1, money))\\n                return false;\\n            if(deposit(account2, money))\\n                return true;\\n            deposit(account1, money);\\n            return false;\\n        }\\n\\n        public boolean deposit(int account, long money) {\\n            if(account >=1 && account <= balance.length) {\\n                balance[account - 1] += money;\\n                return true;    \\n            }\\n            return false;\\n        }\\n\\n        public boolean withdraw(int account, long money) {\\n            if(account >= 1 && account <= balance.length && balance[account-1] >= money){\\n                balance[account-1] -= money;\\n                return true;\\n            }\\n            return false;    \\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1625914,
                "title": "simple-and-short-java-solution",
                "content": "```\\nclass Bank {\\n    private long[] balance;\\n    private int numAccounts;\\n\\n    public Bank(long[] balance) {\\n        numAccounts = balance.length;\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (doesNotExist(account1) || doesNotExist(account2))\\n            return false;\\n\\n        return withdraw(account1, money) && deposit(account2, money);\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (doesNotExist(account))\\n            return false;\\n        \\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (doesNotExist(account) || balance[account-1] < money)\\n            return false;\\n        \\n        balance[account-1] -= money;\\n        return true;\\n    }\\n    \\n    private boolean doesNotExist(int account) {\\n        return (account < 1 || account > numAccounts);\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\n    private long[] balance;\\n    private int numAccounts;\\n\\n    public Bank(long[] balance) {\\n        numAccounts = balance.length;\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (doesNotExist(account1) || doesNotExist(account2))\\n            return false;\\n\\n        return withdraw(account1, money) && deposit(account2, money);\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (doesNotExist(account))\\n            return false;\\n        \\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (doesNotExist(account) || balance[account-1] < money)\\n            return false;\\n        \\n        balance[account-1] -= money;\\n        return true;\\n    }\\n    \\n    private boolean doesNotExist(int account) {\\n        return (account < 1 || account > numAccounts);\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1527957,
                "title": "100-00-memory-efficient-program-in-python3",
                "content": "class Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        \\n        self.arr=balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        \\n        if account1 <= len(self.arr) and account2 <= len(self.arr):\\n            if self.arr[account1-1]>=money:\\n                self.arr[account1-1]=self.arr[account1-1]-money\\n                self.arr[account2-1]=self.arr[account2-1]+money\\n                \\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= len(self.arr):\\n            self.arr[account-1]=self.arr[account-1]+money\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account <= len(self.arr):\\n            if self.arr[account-1]>=money:\\n                self.arr[account-1]=self.arr[account-1]-money\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n# Please Upvote",
                "solutionTags": [
                    "Python3"
                ],
                "code": "class Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        \\n        self.arr=balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        \\n        if account1 <= len(self.arr) and account2 <= len(self.arr):\\n            if self.arr[account1-1]>=money:\\n                self.arr[account1-1]=self.arr[account1-1]-money\\n                self.arr[account2-1]=self.arr[account2-1]+money\\n                \\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= len(self.arr):\\n            self.arr[account-1]=self.arr[account-1]+money\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account <= len(self.arr):\\n            if self.arr[account-1]>=money:\\n                self.arr[account-1]=self.arr[account-1]-money\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n# Please Upvote",
                "codeTag": "Java"
            },
            {
                "id": 1526141,
                "title": "go-how-to-test-fill-in-the-blanks-problems-example",
                "content": "# Testing the solution\\n\\nBelow is an example of how \"fill in the blanks\" type of exercises can be tested.\\n\\nIf there are test case failures for very large inputs, then it\\'s necessary to put test data as separate input files and load + transform them into typed cases.\\n\\n```go\\nfunc TestBank(t *testing.T) {\\n\\ttype any interface{}\\n\\ttype actionName string\\n\\tconst (\\n\\t\\tactionWithdraw = \"withdraw\"\\n\\t\\tactionDeposit  = \"deposit\"\\n\\t\\tactionTransfer = \"transfer\"\\n\\t)\\n\\ttype testCaseAction struct {\\n\\t\\tname actionName\\n\\t\\targs []any\\n\\t\\twant bool\\n\\t}\\n\\ttype testCase struct {\\n\\t\\tname    string\\n\\t\\tbalance []int64\\n\\t\\tactions []testCaseAction\\n\\t}\\n\\ttestCases := []testCase{\\n\\t\\t{\\n\\t\\t\\t\"example\",\\n\\t\\t\\t[]int64{10, 100, 20, 50, 30},\\n\\t\\t\\t[]testCaseAction{\\n\\t\\t\\t\\t{actionWithdraw, []any{3, int64(10)}, true},\\n\\t\\t\\t\\t{actionTransfer, []any{5, 1, int64(20)}, true},\\n\\t\\t\\t\\t{actionDeposit, []any{5, int64(20)}, true},\\n\\t\\t\\t\\t{actionTransfer, []any{3, 4, int64(15)}, false},\\n\\t\\t\\t\\t{actionWithdraw, []any{10, int64(50)}, false},\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}\\n\\tfor _, tc := range testCases {\\n\\t\\tt.Run(fmt.Sprintf(tc.name, tc.balance), func(t *testing.T) {\\n\\t\\t\\tb := Constructor(tc.balance)\\n\\t\\t\\tfor _, act := range tc.actions {\\n\\t\\t\\t\\tvar got bool\\n\\t\\t\\t\\tswitch act.name {\\n\\t\\t\\t\\tcase actionWithdraw:\\n\\t\\t\\t\\t\\tgot = b.Withdraw(act.args[0].(int), act.args[1].(int64))\\n\\t\\t\\t\\tcase actionTransfer:\\n\\t\\t\\t\\t\\tgot = b.Transfer(act.args[0].(int), act.args[1].(int), act.args[2].(int64))\\n\\t\\t\\t\\tcase actionDeposit:\\n\\t\\t\\t\\t\\tgot = b.Deposit(act.args[0].(int), act.args[1].(int64))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trequire.Equal(t, act.want, got)\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n}\\n```\\n\\n# Solution\\n\\n```go\\ntype Bank struct {\\n\\tbalance []int64\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n\\tb := Bank{\\n\\t\\tbalance: make([]int64, len(balance)+1),\\n\\t}\\n\\tcopy(b.balance[1:], balance)\\n\\tb.balance[0] = math.MinInt32\\n\\treturn b\\n}\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n\\tif !this.validAccount(account1) ||\\n\\t\\t!this.validAccount(account2) ||\\n\\t\\tthis.balance[account1] < money {\\n\\t\\treturn false\\n\\t}\\n\\tthis.balance[account1] -= money\\n\\tthis.balance[account2] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n\\tif !this.validAccount(account) {\\n\\t\\treturn false\\n\\t}\\n\\tthis.balance[account] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n\\tif !this.validAccount(account) || this.balance[account] < money {\\n\\t\\treturn false\\n\\t}\\n\\tthis.balance[account] -= money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) validAccount(id int) bool {\\n\\treturn id >= 1 && id <= len(this.balance)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc TestBank(t *testing.T) {\\n\\ttype any interface{}\\n\\ttype actionName string\\n\\tconst (\\n\\t\\tactionWithdraw = \"withdraw\"\\n\\t\\tactionDeposit  = \"deposit\"\\n\\t\\tactionTransfer = \"transfer\"\\n\\t)\\n\\ttype testCaseAction struct {\\n\\t\\tname actionName\\n\\t\\targs []any\\n\\t\\twant bool\\n\\t}\\n\\ttype testCase struct {\\n\\t\\tname    string\\n\\t\\tbalance []int64\\n\\t\\tactions []testCaseAction\\n\\t}\\n\\ttestCases := []testCase{\\n\\t\\t{\\n\\t\\t\\t\"example\",\\n\\t\\t\\t[]int64{10, 100, 20, 50, 30},\\n\\t\\t\\t[]testCaseAction{\\n\\t\\t\\t\\t{actionWithdraw, []any{3, int64(10)}, true},\\n\\t\\t\\t\\t{actionTransfer, []any{5, 1, int64(20)}, true},\\n\\t\\t\\t\\t{actionDeposit, []any{5, int64(20)}, true},\\n\\t\\t\\t\\t{actionTransfer, []any{3, 4, int64(15)}, false},\\n\\t\\t\\t\\t{actionWithdraw, []any{10, int64(50)}, false},\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}\\n\\tfor _, tc := range testCases {\\n\\t\\tt.Run(fmt.Sprintf(tc.name, tc.balance), func(t *testing.T) {\\n\\t\\t\\tb := Constructor(tc.balance)\\n\\t\\t\\tfor _, act := range tc.actions {\\n\\t\\t\\t\\tvar got bool\\n\\t\\t\\t\\tswitch act.name {\\n\\t\\t\\t\\tcase actionWithdraw:\\n\\t\\t\\t\\t\\tgot = b.Withdraw(act.args[0].(int), act.args[1].(int64))\\n\\t\\t\\t\\tcase actionTransfer:\\n\\t\\t\\t\\t\\tgot = b.Transfer(act.args[0].(int), act.args[1].(int), act.args[2].(int64))\\n\\t\\t\\t\\tcase actionDeposit:\\n\\t\\t\\t\\t\\tgot = b.Deposit(act.args[0].(int), act.args[1].(int64))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\trequire.Equal(t, act.want, got)\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n}\\n```\n```go\\ntype Bank struct {\\n\\tbalance []int64\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n\\tb := Bank{\\n\\t\\tbalance: make([]int64, len(balance)+1),\\n\\t}\\n\\tcopy(b.balance[1:], balance)\\n\\tb.balance[0] = math.MinInt32\\n\\treturn b\\n}\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n\\tif !this.validAccount(account1) ||\\n\\t\\t!this.validAccount(account2) ||\\n\\t\\tthis.balance[account1] < money {\\n\\t\\treturn false\\n\\t}\\n\\tthis.balance[account1] -= money\\n\\tthis.balance[account2] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n\\tif !this.validAccount(account) {\\n\\t\\treturn false\\n\\t}\\n\\tthis.balance[account] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n\\tif !this.validAccount(account) || this.balance[account] < money {\\n\\t\\treturn false\\n\\t}\\n\\tthis.balance[account] -= money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) validAccount(id int) bool {\\n\\treturn id >= 1 && id <= len(this.balance)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1526101,
                "title": "faster-than-100-of-java-solutions-easy-solution",
                "content": "```\\nclass Bank {\\nprivate long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n         if (account2 < 1 || account2 > balance.length) {\\n            return false;\\n        }\\n        if(withdraw(account1,money))\\n           return deposit(account2,money);\\n        else\\n            return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n      if (account < 1 || account > balance.length) {\\n            return false;\\n        }\\n        balance[account-1]+=money;\\n        return true;\\n        \\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account < 1 || account > balance.length) {\\n            return false;\\n        }\\n        \\n        if (balance[account - 1] < money) {\\n            return false;\\n        }\\n        \\n        balance[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\nprivate long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n         if (account2 < 1 || account2 > balance.length) {\\n            return false;\\n        }\\n        if(withdraw(account1,money))\\n           return deposit(account2,money);\\n        else\\n            return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n      if (account < 1 || account > balance.length) {\\n            return false;\\n        }\\n        balance[account-1]+=money;\\n        return true;\\n        \\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account < 1 || account > balance.length) {\\n            return false;\\n        }\\n        \\n        if (balance[account - 1] < money) {\\n            return false;\\n        }\\n        \\n        balance[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525785,
                "title": "c-easy-simulation-vectors-only",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        bal=balance;\\n        n=bal.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n          if(account1<1 || account1>n || account2<1 || account2>n || money>bal[account1-1]) return false;\\n        else{\\n               bal[account1-1]=bal[account1-1]-(long long)money;\\n               bal[account2-1]=bal[account2-1]+(long long)money;\\n            return true;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account<1 || account>n ) return false;\\n        else {\\n            bal[account-1]=bal[account-1]+(long long)money;\\n            return true;\\n        }\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<1 || account>n || money>bal[account-1]) return false;\\n        else {\\n            bal[account-1]=bal[account-1]-(long long)money;\\n            return true;\\n        }\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        bal=balance;\\n        n=bal.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n          if(account1<1 || account1>n || account2<1 || account2>n || money>bal[account1-1]) return false;\\n        else{\\n               bal[account1-1]=bal[account1-1]-(long long)money;\\n               bal[account2-1]=bal[account2-1]+(long long)money;\\n            return true;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account<1 || account>n ) return false;\\n        else {\\n            bal[account-1]=bal[account-1]+(long long)money;\\n            return true;\\n        }\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<1 || account>n || money>bal[account-1]) return false;\\n        else {\\n            bal[account-1]=bal[account-1]-(long long)money;\\n            return true;\\n        }\\n    }\\n};",
                "codeTag": "Java"
            },
            {
                "id": 1525608,
                "title": "c-straightforward",
                "content": "```\\nclass Bank {\\npublic:\\n    int n; \\n    vector<long long> balance; \\n    Bank(vector<long long>& balance) { \\n        this->balance = balance; \\n        n = balance.size();\\n    }\\n    \\n    bool valid(int acc) {\\n        return (acc>=1 && acc<=n);  \\n    }\\n    \\n    bool enough(long long money ,  int acc) {\\n        return balance[acc-1]>=money; \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(!valid(account1) || !valid(account2) || !enough(money , account1)) \\n            return 0 ; \\n        balance[account1-1] -= money; \\n        balance[account2-1] += money; \\n        return 1; \\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(!valid(account))\\n            return 0; \\n        balance[account-1] += money; \\n        return 1; \\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(!valid(account) || !enough(money , account))\\n            return 0; \\n        balance[account-1] -= money;\\n        return 1; \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    int n; \\n    vector<long long> balance; \\n    Bank(vector<long long>& balance) { \\n        this->balance = balance; \\n        n = balance.size();\\n    }\\n    \\n    bool valid(int acc) {\\n        return (acc>=1 && acc<=n);  \\n    }\\n    \\n    bool enough(long long money ,  int acc) {\\n        return balance[acc-1]>=money; \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(!valid(account1) || !valid(account2) || !enough(money , account1)) \\n            return 0 ; \\n        balance[account1-1] -= money; \\n        balance[account2-1] += money; \\n        return 1; \\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(!valid(account))\\n            return 0; \\n        balance[account-1] += money; \\n        return 1; \\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(!valid(account) || !enough(money , account))\\n            return 0; \\n        balance[account-1] -= money;\\n        return 1; \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525441,
                "title": "simple-java-solution",
                "content": "class Bank {\\n    long n[];\\n    public Bank(long[] b) {\\n        n=b;\\n    }\\n    \\n    public boolean transfer(int a1, int a2, long m) {\\n        if(a1<=n.length && a2<=n.length && n[a1-1]>=m)\\n        {\\n            n[a1-1]-=m;\\n            n[a2-1]+=m;\\n            return true;\\n        }\\n        else\\n            return false;\\n    }\\n    \\n    public boolean deposit(int a, long m) {\\n        if(a<=n.length)\\n        {\\n            n[a-1]+=m;\\n            return true;\\n        }\\n        else\\n            return false;\\n    }\\n    public boolean withdraw(int a, long m) {\\n        if(a<=n.length && n[a-1]>=m)\\n        {\\n            n[a-1]-=m;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n}",
                "solutionTags": [],
                "code": "class Bank {\\n    long n[];\\n    public Bank(long[] b) {\\n        n=b;\\n    }\\n    \\n    public boolean transfer(int a1, int a2, long m) {\\n        if(a1<=n.length && a2<=n.length && n[a1-1]>=m)\\n        {\\n            n[a1-1]-=m;\\n            n[a2-1]+=m;\\n            return true;\\n        }\\n        else\\n            return false;\\n    }\\n    \\n    public boolean deposit(int a, long m) {\\n        if(a<=n.length)\\n        {\\n            n[a-1]+=m;\\n            return true;\\n        }\\n        else\\n            return false;\\n    }\\n    public boolean withdraw(int a, long m) {\\n        if(a<=n.length && n[a-1]>=m)\\n        {\\n            n[a-1]-=m;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 1525394,
                "title": "easy-swift-solution",
                "content": "My Swift solution \\n\\n```\\n\\nclass Bank {\\n\\n    private var bankBalance = [Int]()\\n    private var accSize: Int {\\n        bankBalance.count\\n    }\\n    init(_ balance: [Int]) {\\n        bankBalance = balance\\n    }\\n    \\n    func transfer(_ account1: Int, _ account2: Int, _ money: Int) -> Bool {\\n        guard account1 <= accSize && account2 <= accSize  else {\\n            return false\\n        }\\n        guard bankBalance[account1 - 1] >= money else {\\n                   return false\\n        }\\n        bankBalance[account1 - 1] -= money\\n        bankBalance[account2 - 1] += money\\n        return true\\n    }\\n    \\n    func deposit(_ account: Int, _ money: Int) -> Bool {\\n        guard account <= accSize else {\\n            return false\\n        }\\n        bankBalance[account - 1] += money\\n        return true\\n    }\\n    \\n    func withdraw(_ account: Int, _ money: Int) -> Bool {\\n        guard account <= accSize else {\\n            return false\\n        }\\n        guard bankBalance[account - 1] >= money else {\\n            return false\\n        }\\n        bankBalance[account - 1] -= money\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Bank {\\n\\n    private var bankBalance = [Int]()\\n    private var accSize: Int {\\n        bankBalance.count\\n    }\\n    init(_ balance: [Int]) {\\n        bankBalance = balance\\n    }\\n    \\n    func transfer(_ account1: Int, _ account2: Int, _ money: Int) -> Bool {\\n        guard account1 <= accSize && account2 <= accSize  else {\\n            return false\\n        }\\n        guard bankBalance[account1 - 1] >= money else {\\n                   return false\\n        }\\n        bankBalance[account1 - 1] -= money\\n        bankBalance[account2 - 1] += money\\n        return true\\n    }\\n    \\n    func deposit(_ account: Int, _ money: Int) -> Bool {\\n        guard account <= accSize else {\\n            return false\\n        }\\n        bankBalance[account - 1] += money\\n        return true\\n    }\\n    \\n    func withdraw(_ account: Int, _ money: Int) -> Bool {\\n        guard account <= accSize else {\\n            return false\\n        }\\n        guard bankBalance[account - 1] >= money else {\\n            return false\\n        }\\n        bankBalance[account - 1] -= money\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525366,
                "title": "c-solution-vector",
                "content": "```\\n    vector<long long> balance;\\n    Bank(vector<long long>& b) {\\n        balance=b;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n          if(account1>balance.size())\\n             return false;\\n          if(account2>balance.size())\\n             return false;\\n        if(balance[account1-1]<money)\\n            return false;\\n        else\\n        {\\n           balance[account1-1]-=money;\\n           balance[account2-1]+=money;\\n           return true;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n          if(account>balance.size())\\n             return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n         if(account>balance.size())\\n             return false;\\n         if(balance[account-1]<money)\\n            return false;\\n        else\\n        {\\n            balance[account-1]-=money;\\n            return true;\\n        }\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    vector<long long> balance;\\n    Bank(vector<long long>& b) {\\n        balance=b;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n          if(account1>balance.size())\\n             return false;\\n          if(account2>balance.size())\\n             return false;\\n        if(balance[account1-1]<money)\\n            return false;\\n        else\\n        {\\n           balance[account1-1]-=money;\\n           balance[account2-1]+=money;\\n           return true;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n          if(account>balance.size())\\n             return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n         if(account>balance.size())\\n             return false;\\n         if(balance[account-1]<money)\\n            return false;\\n        else\\n        {\\n            balance[account-1]-=money;\\n            return true;\\n        }\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525266,
                "title": "c-solution-with-clean-code",
                "content": "```\\nclass Bank {\\npublic:\\n    \\n    private:\\n        vector<long long> balance;\\n    \\n    public:\\n    Bank(vector<long long>& balance) {\\n        this->balance=balance;\\n    }\\n    \\n\\t// checks if an account number is valid\\n    bool valid_acc_no(int acc){\\n        if(acc < 0 || acc >= balance.size()){\\n            return false;\\n        }\\n        \\n        return true;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        // converting to 0 based\\n\\t\\taccount1-=1;\\n        account2-=1;\\n        \\n        if(!valid_acc_no(account1) || !valid_acc_no(account2) || balance[account1] < money){\\n            return false;\\n        }\\n        \\n        balance[account1]=balance[account1] - money;\\n        balance[account2]=balance[account2] + money; \\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        account-=1;\\n        if(!valid_acc_no(account)){\\n            return false;\\n        }\\n        \\n        balance[account]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        \\n        account-=1;\\n        \\n        if(!valid_acc_no(account) || balance[account] < money){\\n            return false;\\n        }\\n        \\n        balance[account]-=money;\\n        return true;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\npublic:\\n    \\n    private:\\n        vector<long long> balance;\\n    \\n    public:\\n    Bank(vector<long long>& balance) {\\n        this->balance=balance;\\n    }\\n    \\n\\t// checks if an account number is valid\\n    bool valid_acc_no(int acc){\\n        if(acc < 0 || acc >= balance.size()){\\n            return false;\\n        }\\n        \\n        return true;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        // converting to 0 based\\n\\t\\taccount1-=1;\\n        account2-=1;\\n        \\n        if(!valid_acc_no(account1) || !valid_acc_no(account2) || balance[account1] < money){\\n            return false;\\n        }\\n        \\n        balance[account1]=balance[account1] - money;\\n        balance[account2]=balance[account2] + money; \\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        account-=1;\\n        if(!valid_acc_no(account)){\\n            return false;\\n        }\\n        \\n        balance[account]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        \\n        account-=1;\\n        \\n        if(!valid_acc_no(account) || balance[account] < money){\\n            return false;\\n        }\\n        \\n        balance[account]-=money;\\n        return true;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525240,
                "title": "c-2043-simple-bank-system",
                "content": "\\n```\\nclass Bank {\\n    vector<long long> balance; \\npublic:\\n    Bank(vector<long long>& balance) {\\n        this->balance = balance; \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if (withdraw(account1, money)) {\\n            if (deposit(account2, money)) return true; \\n            deposit(account1, money); \\n            return false; \\n        }\\n        return false; \\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account <= balance.size()) {\\n            balance[account-1] += money; \\n            return true; \\n        }\\n        return false; \\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account <= balance.size() && balance[account-1] >= money) {\\n            balance[account-1] -= money; \\n            return true; \\n        }\\n        return false; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Bank {\\n    vector<long long> balance; \\npublic:\\n    Bank(vector<long long>& balance) {\\n        this->balance = balance; \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if (withdraw(account1, money)) {\\n            if (deposit(account2, money)) return true; \\n            deposit(account1, money); \\n            return false; \\n        }\\n        return false; \\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account <= balance.size()) {\\n            balance[account-1] += money; \\n            return true; \\n        }\\n        return false; \\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account <= balance.size() && balance[account-1] >= money) {\\n            balance[account-1] -= money; \\n            return true; \\n        }\\n        return false; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525218,
                "title": "2043-simple-bank-system",
                "content": "---\\n\\nWeekly Contest 263\\n\\n- Q1 answer\\n  - https://leetcode.com/problems/check-if-numbers-are-ascending-in-a-sentence/discuss/1525180/2042.-Check-if-Numbers-Are-Ascending-in-a-Sentence\\n- Q2 answer\\n  - ( below answer )\\n  - Missed withdraw condition same as transfer (### below) in content.. +5 min penality.. a total of 1000 ranks gone\\n- Q3 answer\\n  - https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets/discuss/1525237/2044.-Count-Number-of-Maximum-Bitwise-OR-Subsets\\n\\n---\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nclass Bank {\\n    balance; // array   0 to n-1\\n    n;\\n    constructor(balance) {\\n        this.balance = balance;\\n        this.n = balance.length;\\n    }\\n    good_acc(account) {\\n        return account >= 1 && account <= this.n;\\n    }\\n    has_balance(account, money) {\\n        return money <= this.balance[account - 1];\\n    }\\n    transfer(account1, account2, money) {\\n        if (!this.good_acc(account1)) return false;\\n        if (!this.good_acc(account2)) return false;\\n        if (!this.has_balance(account1, money)) return false;\\n\\n        this.balance[account1 - 1] -= money;\\n        this.balance[account2 - 1] += money;\\n        return true;\\n    }\\n    deposit(account, money) {\\n        if (!this.good_acc(account)) return false;\\n\\n        this.balance[account - 1] += money;\\n        return true;\\n    }\\n    withdraw(account, money) {\\n        if (!this.good_acc(account)) return false;\\n        if (!this.has_balance(account, money)) return false; // ###\\n\\n        this.balance[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nclass Bank {\\n    balance; // array   0 to n-1\\n    n;\\n    constructor(balance) {\\n        this.balance = balance;\\n        this.n = balance.length;\\n    }\\n    good_acc(account) {\\n        return account >= 1 && account <= this.n;\\n    }\\n    has_balance(account, money) {\\n        return money <= this.balance[account - 1];\\n    }\\n    transfer(account1, account2, money) {\\n        if (!this.good_acc(account1)) return false;\\n        if (!this.good_acc(account2)) return false;\\n        if (!this.has_balance(account1, money)) return false;\\n\\n        this.balance[account1 - 1] -= money;\\n        this.balance[account2 - 1] += money;\\n        return true;\\n    }\\n    deposit(account, money) {\\n        if (!this.good_acc(account)) return false;\\n\\n        this.balance[account - 1] += money;\\n        return true;\\n    }\\n    withdraw(account, money) {\\n        if (!this.good_acc(account)) return false;\\n        if (!this.has_balance(account, money)) return false; // ###\\n\\n        this.balance[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525201,
                "title": "c-simple",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> balance;\\n    Bank(vector<long long>& bal) {\\n        for(int i=0; i<bal.size(); i++)\\n            balance.push_back(bal[i]);\\n    }\\n    \\n    bool transfer(int acc1, int acc2, long long mon) {\\n        \\n        if(acc1 < 1 || acc1 > balance.size())\\n            return false;\\n        if(acc2 < 1 || acc2 > balance.size())\\n            return false;\\n        if(mon > balance[acc1-1])\\n            return false;\\n        balance[acc1-1] -= mon;\\n        balance[acc2-1] += mon;\\n        return true;\\n    }\\n    \\n    bool deposit(int acc, long long mon) {\\n        if(acc < 1 || acc > balance.size())\\n            return false;\\n        balance[acc-1] += mon;\\n        return true;\\n    }\\n    \\n    bool withdraw(int acc, long long mon) {\\n        if(acc < 1 || acc > balance.size())\\n            return false;\\n        if(mon > balance[acc-1])\\n            return false;\\n        balance[acc-1] -= mon;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> balance;\\n    Bank(vector<long long>& bal) {\\n        for(int i=0; i<bal.size(); i++)\\n            balance.push_back(bal[i]);\\n    }\\n    \\n    bool transfer(int acc1, int acc2, long long mon) {\\n        \\n        if(acc1 < 1 || acc1 > balance.size())\\n            return false;\\n        if(acc2 < 1 || acc2 > balance.size())\\n            return false;\\n        if(mon > balance[acc1-1])\\n            return false;\\n        balance[acc1-1] -= mon;\\n        balance[acc2-1] += mon;\\n        return true;\\n    }\\n    \\n    bool deposit(int acc, long long mon) {\\n        if(acc < 1 || acc > balance.size())\\n            return false;\\n        balance[acc-1] += mon;\\n        return true;\\n    }\\n    \\n    bool withdraw(int acc, long long mon) {\\n        if(acc < 1 || acc > balance.size())\\n            return false;\\n        if(mon > balance[acc-1])\\n            return false;\\n        balance[acc-1] -= mon;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4080795,
                "title": "beats-84-34",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    private long[] balance;\\n    \\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        \\n        if(isAccountValid(account1) && isAccountValid(account2) && balance[account1-1] >= money)\\n        {\\n            balance[account1-1] = balance[account1-1] - money;\\n            balance[account2-1] = balance[account2-1] + money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n        if(isAccountValid(account))\\n        {\\n            balance[account-1] = balance[account-1] + money;\\n            return true;    \\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        \\n        if(isAccountValid(account) && balance[account-1] >= money )\\n        {\\n            balance[account-1] = balance[account-1] - money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    private boolean isAccountValid(int account)\\n    {\\n        if(account - 1 < balance.length && account  >= 1)\\n            return true;\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    private long[] balance;\\n    \\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        \\n        if(isAccountValid(account1) && isAccountValid(account2) && balance[account1-1] >= money)\\n        {\\n            balance[account1-1] = balance[account1-1] - money;\\n            balance[account2-1] = balance[account2-1] + money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n        if(isAccountValid(account))\\n        {\\n            balance[account-1] = balance[account-1] + money;\\n            return true;    \\n        }\\n        \\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        \\n        if(isAccountValid(account) && balance[account-1] >= money )\\n        {\\n            balance[account-1] = balance[account-1] - money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    private boolean isAccountValid(int account)\\n    {\\n        if(account - 1 < balance.length && account  >= 1)\\n            return true;\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4075529,
                "title": "a-very-simple-java-solution",
                "content": "\\n```\\nclass Bank {\\n\\n    private long[] balance;;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance; \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n        if(account1 < 1 || account1 > balance.length)  {\\n            return false;\\n        }\\n        if(account2 < 1 || account2 > balance.length)  {\\n            return false;\\n        }\\n\\n        if(balance[account1 - 1] >= money){\\n            balance[account1 - 1] -= money;\\n            balance[account2 - 1] += money;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account < 1 || account > balance.length){\\n            return false;\\n        }\\n        balance [account - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n         if(account < 1 || account > balance.length){\\n            return false;\\n        }\\n        if(balance[account - 1] >= money){\\n            balance [account - 1] -= money;\\n            return true;\\n        } \\n        return false;   \\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    private long[] balance;;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance; \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n        if(account1 < 1 || account1 > balance.length)  {\\n            return false;\\n        }\\n        if(account2 < 1 || account2 > balance.length)  {\\n            return false;\\n        }\\n\\n        if(balance[account1 - 1] >= money){\\n            balance[account1 - 1] -= money;\\n            balance[account2 - 1] += money;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account < 1 || account > balance.length){\\n            return false;\\n        }\\n        balance [account - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n         if(account < 1 || account > balance.length){\\n            return false;\\n        }\\n        if(balance[account - 1] >= money){\\n            balance [account - 1] -= money;\\n            return true;\\n        } \\n        return false;   \\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061646,
                "title": "simple-yet-elegant-rust-solution",
                "content": "# Code\\n```\\nstruct Bank {\\n    balance: Vec<i64>,\\n}\\n\\nimpl Bank {\\n    fn new(balance: Vec<i64>) -> Self {\\n        Self { balance }\\n    }\\n\\n    fn transfer(&mut self, account1: i32, account2: i32, money: i64) -> bool {\\n        let n = self.balance.len() as i32;\\n        if account1 <= n && account2 <= n && money <= self.balance[account1 as usize - 1] {\\n            self.balance[account1 as usize - 1] -= money;\\n            self.balance[account2 as usize - 1] += money;\\n            return true;\\n        }\\n        false\\n    }\\n\\n    fn deposit(&mut self, account: i32, money: i64) -> bool {\\n        if account <= self.balance.len() as i32 {\\n            self.balance[account as usize - 1] += money;\\n            return true;\\n        }\\n        false\\n    }\\n\\n    fn withdraw(&mut self, account: i32, money: i64) -> bool {\\n        if account <= self.balance.len() as i32 && self.balance[account as usize - 1] >= money {\\n            self.balance[account as usize - 1] -= money;\\n            return true;\\n        }\\n        false\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * let obj = Bank::new(balance);\\n * let ret_1: bool = obj.transfer(account1, account2, money);\\n * let ret_2: bool = obj.deposit(account, money);\\n * let ret_3: bool = obj.withdraw(account, money);\\n */\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nstruct Bank {\\n    balance: Vec<i64>,\\n}\\n\\nimpl Bank {\\n    fn new(balance: Vec<i64>) -> Self {\\n        Self { balance }\\n    }\\n\\n    fn transfer(&mut self, account1: i32, account2: i32, money: i64) -> bool {\\n        let n = self.balance.len() as i32;\\n        if account1 <= n && account2 <= n && money <= self.balance[account1 as usize - 1] {\\n            self.balance[account1 as usize - 1] -= money;\\n            self.balance[account2 as usize - 1] += money;\\n            return true;\\n        }\\n        false\\n    }\\n\\n    fn deposit(&mut self, account: i32, money: i64) -> bool {\\n        if account <= self.balance.len() as i32 {\\n            self.balance[account as usize - 1] += money;\\n            return true;\\n        }\\n        false\\n    }\\n\\n    fn withdraw(&mut self, account: i32, money: i64) -> bool {\\n        if account <= self.balance.len() as i32 && self.balance[account as usize - 1] >= money {\\n            self.balance[account as usize - 1] -= money;\\n            return true;\\n        }\\n        false\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * let obj = Bank::new(balance);\\n * let ret_1: bool = obj.transfer(account1, account2, money);\\n * let ret_2: bool = obj.deposit(account, money);\\n * let ret_3: bool = obj.withdraw(account, money);\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042427,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    final List<int> b = [];\\n\\n    Bank(List<int> balance) {\\n        b.addAll(balance);\\n    }\\n    \\n    bool transfer(int account1, int account2, int money) {\\n        if (account1 - 1 > b.length || account2 - 1 > b.length) {\\n            return false;\\n        }\\n        if (b[account1 - 1] < money) {\\n            return false;\\n        }\\n        b[account1 - 1] -= money;\\n        b[account2 - 1] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, int money) {\\n        if (account - 1 > b.length) {\\n            return false;\\n        }\\n        b[account - 1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, int money) {\\n        if (account - 1 > b.length) {\\n            return false;\\n        }\\n        if (b[account - 1] < money) {\\n            return false;\\n        }\\n        b[account - 1] -= money;\\n        return true; \\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = Bank(balance);\\n * bool param1 = obj.transfer(account1,account2,money);\\n * bool param2 = obj.deposit(account,money);\\n * bool param3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Bank {\\n\\n    final List<int> b = [];\\n\\n    Bank(List<int> balance) {\\n        b.addAll(balance);\\n    }\\n    \\n    bool transfer(int account1, int account2, int money) {\\n        if (account1 - 1 > b.length || account2 - 1 > b.length) {\\n            return false;\\n        }\\n        if (b[account1 - 1] < money) {\\n            return false;\\n        }\\n        b[account1 - 1] -= money;\\n        b[account2 - 1] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, int money) {\\n        if (account - 1 > b.length) {\\n            return false;\\n        }\\n        b[account - 1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, int money) {\\n        if (account - 1 > b.length) {\\n            return false;\\n        }\\n        if (b[account - 1] < money) {\\n            return false;\\n        }\\n        b[account - 1] -= money;\\n        return true; \\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = Bank(balance);\\n * bool param1 = obj.transfer(account1,account2,money);\\n * bool param2 = obj.deposit(account,money);\\n * bool param3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012529,
                "title": "simple-array-implementation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.accounts = []\\n        for b in balance:\\n            self.accounts.append(b)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        give = account1-1\\n        recv = account2-1\\n        if \\\\\\n            account1 > len(self.accounts) or \\\\\\n            account2 > len(self.accounts) or \\\\\\n            self.accounts[give] < money:\\n            return False \\n        self.accounts[give] -= money\\n        self.accounts[recv] += money\\n        return True \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account > len(self.accounts):\\n            return False\\n        self.accounts[account-1] += money\\n        return True \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account > len(self.accounts) or \\\\\\n            self.accounts[account-1] < money:\\n            return False \\n        self.accounts[account-1] -= money\\n        return True \\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.accounts = []\\n        for b in balance:\\n            self.accounts.append(b)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        give = account1-1\\n        recv = account2-1\\n        if \\\\\\n            account1 > len(self.accounts) or \\\\\\n            account2 > len(self.accounts) or \\\\\\n            self.accounts[give] < money:\\n            return False \\n        self.accounts[give] -= money\\n        self.accounts[recv] += money\\n        return True \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account > len(self.accounts):\\n            return False\\n        self.accounts[account-1] += money\\n        return True \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account > len(self.accounts) or \\\\\\n            self.accounts[account-1] < money:\\n            return False \\n        self.accounts[account-1] -= money\\n        return True \\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012280,
                "title": "simple-bank-system",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n    HashMap<Integer,Long> hm = new HashMap<Integer,Long>();\\n    public Bank(long[] balance) {\\n        for(int i=1;i<=balance.length;i++)\\n        {\\n            hm.put(i,balance[i-1]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(hm.containsKey(account1)&&hm.containsKey(account2)&&hm.get(account1)>=money)\\n        {\\n            hm.put(account1,hm.get(account1)-money);\\n            hm.put(account2,hm.get(account2)+money);\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(hm.containsKey(account)==false)\\n        return false;\\n        hm.put(account,hm.get(account)+money);\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(hm.containsKey(account)&&hm.get(account)>=money)\\n        {\\n            hm.put(account,hm.get(account)-money);\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    HashMap<Integer,Long> hm = new HashMap<Integer,Long>();\\n    public Bank(long[] balance) {\\n        for(int i=1;i<=balance.length;i++)\\n        {\\n            hm.put(i,balance[i-1]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(hm.containsKey(account1)&&hm.containsKey(account2)&&hm.get(account1)>=money)\\n        {\\n            hm.put(account1,hm.get(account1)-money);\\n            hm.put(account2,hm.get(account2)+money);\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(hm.containsKey(account)==false)\\n        return false;\\n        hm.put(account,hm.get(account)+money);\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(hm.containsKey(account)&&hm.get(account)>=money)\\n        {\\n            hm.put(account,hm.get(account)-money);\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010938,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\nprivate:\\n    int size;\\n    vector<long long> balance;\\n\\npublic:\\n    Bank(vector<long long>& v) {\\n        size = v.size();\\n        balance = v;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if (account1 < 1 || account1 > size || account2 > size || account2 < 1 || balance[account1-1] < money)\\n            return false;\\n        \\n        else{\\n            balance[account1-1] -= money;\\n            balance[account2-1] += money;\\n            return true;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account > size || account < 1)\\n            return false;\\n\\n        balance[account-1] += money;\\n        return true;   \\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account < 1 || account > size || balance[account-1] < money)\\n            return false;\\n\\n        balance[account-1] -= money;\\n        return true;    \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\nprivate:\\n    int size;\\n    vector<long long> balance;\\n\\npublic:\\n    Bank(vector<long long>& v) {\\n        size = v.size();\\n        balance = v;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if (account1 < 1 || account1 > size || account2 > size || account2 < 1 || balance[account1-1] < money)\\n            return false;\\n        \\n        else{\\n            balance[account1-1] -= money;\\n            balance[account2-1] += money;\\n            return true;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account > size || account < 1)\\n            return false;\\n\\n        balance[account-1] += money;\\n        return true;   \\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account < 1 || account > size || balance[account-1] < money)\\n            return false;\\n\\n        balance[account-1] -= money;\\n        return true;    \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006096,
                "title": "python-easy-solution",
                "content": "\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance):\\n        self.balance = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not self._is_valid_account(account1) or not self._is_valid_account(account2):\\n            return False\\n\\n        width_draw = self.withdraw(account1, money)\\n\\n        if not width_draw:\\n            return False\\n\\n        self.deposit(account2, money)\\n\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not self._is_valid_account(account):\\n            return False\\n\\n        self.balance[account-1] = self.balance[account-1] + money\\n\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not self._is_valid_account(account):\\n            return False\\n\\n        current_balance = self.balance[account-1]\\n\\n        if money > current_balance:\\n            return False\\n\\n        self.balance[account - 1] = current_balance - money\\n\\n        return True\\n\\n    def _is_valid_account(self, account_number):\\n        account_number = account_number - 1\\n        return account_number < len(self.balance)\\n\\n\\n\\nbank = Bank([10, 100, 20, 50, 30])\\n\\nprint(bank.withdraw(3, 10))\\nprint(bank.transfer(5, 1, 20))\\nprint(bank.deposit(5, 20))\\nprint(bank.transfer(3, 4, 15))\\nprint(bank.withdraw(10, 50))\\n\\nprint(bank.balance)\\n\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance):\\n        self.balance = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not self._is_valid_account(account1) or not self._is_valid_account(account2):\\n            return False\\n\\n        width_draw = self.withdraw(account1, money)\\n\\n        if not width_draw:\\n            return False\\n\\n        self.deposit(account2, money)\\n\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not self._is_valid_account(account):\\n            return False\\n\\n        self.balance[account-1] = self.balance[account-1] + money\\n\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not self._is_valid_account(account):\\n            return False\\n\\n        current_balance = self.balance[account-1]\\n\\n        if money > current_balance:\\n            return False\\n\\n        self.balance[account - 1] = current_balance - money\\n\\n        return True\\n\\n    def _is_valid_account(self, account_number):\\n        account_number = account_number - 1\\n        return account_number < len(self.balance)\\n\\n\\n\\nbank = Bank([10, 100, 20, 50, 30])\\n\\nprint(bank.withdraw(3, 10))\\nprint(bank.transfer(5, 1, 20))\\nprint(bank.deposit(5, 20))\\nprint(bank.transfer(3, 4, 15))\\nprint(bank.withdraw(10, 50))\\n\\nprint(bank.balance)\\n\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4001824,
                "title": "easy-solution-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n var Bank = function(balance) {\\n    this.balance=balance\\n };\\n\\n Bank.prototype.transfer = function(account1, account2, money) {\\n    if(account1 > this.balance.length ||\\n        account2 > this.balance.length ||\\n        money > this.balance[account1 - 1])\\n        {\\n        return false\\n         }\\n   \\n        this.balance[account2-1] =this.balance[account2-1] +money\\n        this.balance[account1-1] =this.balance[account1-1]-money\\n        return true\\n    \\n };\\n\\n Bank.prototype.deposit = function(account, money) {\\n    if (account > this.balance.length) return false;\\n        this.balance[account - 1] += money;\\n        return true;\\n };\\n\\n Bank.prototype.withdraw = function(account, money) {\\n    if (account > this.balance.length || money > this.balance[account - 1]) {\\n        return false;\\n    }\\n    this.balance[account - 1] -= money;\\n    return true;\\n}\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n var Bank = function(balance) {\\n    this.balance=balance\\n };\\n\\n Bank.prototype.transfer = function(account1, account2, money) {\\n    if(account1 > this.balance.length ||\\n        account2 > this.balance.length ||\\n        money > this.balance[account1 - 1])\\n        {\\n        return false\\n         }\\n   \\n        this.balance[account2-1] =this.balance[account2-1] +money\\n        this.balance[account1-1] =this.balance[account1-1]-money\\n        return true\\n    \\n };\\n\\n Bank.prototype.deposit = function(account, money) {\\n    if (account > this.balance.length) return false;\\n        this.balance[account - 1] += money;\\n        return true;\\n };\\n\\n Bank.prototype.withdraw = function(account, money) {\\n    if (account > this.balance.length || money > this.balance[account - 1]) {\\n        return false;\\n    }\\n    this.balance[account - 1] -= money;\\n    return true;\\n}\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984302,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Bank {\\n    long[] stock;\\n\\n    public Bank(long[] balance) {\\n        stock = balance;\\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 > stock.length || account2 > stock.length || stock[account1 - 1] < money) {\\n            return false;\\n        }\\n        stock[account2 - 1] += money;\\n        stock[account1 - 1] -= money;\\n        return true;\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        if (account <= stock.length) {\\n            stock[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        if (account <= stock.length && stock[account - 1] >= money) {\\n            stock[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Design"
                ],
                "code": "```\\nclass Bank {\\n    long[] stock;\\n\\n    public Bank(long[] balance) {\\n        stock = balance;\\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 > stock.length || account2 > stock.length || stock[account1 - 1] < money) {\\n            return false;\\n        }\\n        stock[account2 - 1] += money;\\n        stock[account1 - 1] -= money;\\n        return true;\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        if (account <= stock.length) {\\n            stock[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        if (account <= stock.length && stock[account - 1] >= money) {\\n            stock[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3960350,
                "title": "elegant-solution",
                "content": "# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.no_of_accounts = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.isValid(account1) and self.isValid(account2) and self.hasBalance(account1, money):\\n            self.withdrawWithoutValidation(account1, money)\\n            self.depositWithoutValidation(account2, money)\\n            return True\\n\\n        return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.isValid(account):\\n            self.depositWithoutValidation(account, money)\\n            return True\\n\\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.isValid(account) and self.hasBalance(account, money):\\n            self.withdrawWithoutValidation(account, money)\\n            return True\\n\\n        return False\\n\\n    def withdrawWithoutValidation(self, account, money):\\n        self.balance[account - 1] -= money\\n\\n    def depositWithoutValidation(self, account, money):\\n        self.balance[account - 1] += money\\n\\n    def isValid(self, account_num):\\n        return 0 < account_num <= self.no_of_accounts\\n\\n    def hasBalance(self, account, money):\\n        return self.balance[account - 1] >= money\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.no_of_accounts = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.isValid(account1) and self.isValid(account2) and self.hasBalance(account1, money):\\n            self.withdrawWithoutValidation(account1, money)\\n            self.depositWithoutValidation(account2, money)\\n            return True\\n\\n        return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.isValid(account):\\n            self.depositWithoutValidation(account, money)\\n            return True\\n\\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.isValid(account) and self.hasBalance(account, money):\\n            self.withdrawWithoutValidation(account, money)\\n            return True\\n\\n        return False\\n\\n    def withdrawWithoutValidation(self, account, money):\\n        self.balance[account - 1] -= money\\n\\n    def depositWithoutValidation(self, account, money):\\n        self.balance[account - 1] += money\\n\\n    def isValid(self, account_num):\\n        return 0 < account_num <= self.no_of_accounts\\n\\n    def hasBalance(self, account, money):\\n        return self.balance[account - 1] >= money\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3940905,
                "title": "javascript-short-solution",
                "content": "```javascript\\nconst Bank = class {\\n  constructor(bal) {\\n    this.bank = bal;\\n  }\\n\\n  transfer(a1, a2, amt) {\\n    if (this.bank[a1 - 1] >= amt && this.bank[a2 - 1] !== undefined) {\\n      this.bank[a1 - 1] -= amt;\\n      this.bank[a2 - 1] += amt;\\n      return true;\\n    } else return false;\\n  }\\n  deposit(a, amt) {\\n    if (this.bank[a - 1] !== undefined) {\\n      this.bank[a - 1] += amt;\\n      return true;\\n    } else return false;\\n  }\\n  withdraw(a, amt) {\\n    if (this.bank[a - 1] >= amt) {\\n      this.bank[a - 1] -= amt;\\n      return true;\\n    } else return false;\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nconst Bank = class {\\n  constructor(bal) {\\n    this.bank = bal;\\n  }\\n\\n  transfer(a1, a2, amt) {\\n    if (this.bank[a1 - 1] >= amt && this.bank[a2 - 1] !== undefined) {\\n      this.bank[a1 - 1] -= amt;\\n      this.bank[a2 - 1] += amt;\\n      return true;\\n    } else return false;\\n  }\\n  deposit(a, amt) {\\n    if (this.bank[a - 1] !== undefined) {\\n      this.bank[a - 1] += amt;\\n      return true;\\n    } else return false;\\n  }\\n  withdraw(a, amt) {\\n    if (this.bank[a - 1] >= amt) {\\n      this.bank[a - 1] -= amt;\\n      return true;\\n    } else return false;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938208,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    private long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 < 1 || account1 > balance.length) return false;\\n        if (account2 < 1 || account2 > balance.length) return false;\\n        if (balance[account1-1] >= money){\\n            balance[account1-1] -= money;\\n            balance[account2-1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account < 1 || account > balance.length) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account < 0 || account > balance.length) return false;\\n        if (balance[account-1] >= money){\\n            balance[account-1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    private long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 < 1 || account1 > balance.length) return false;\\n        if (account2 < 1 || account2 > balance.length) return false;\\n        if (balance[account1-1] >= money){\\n            balance[account1-1] -= money;\\n            balance[account2-1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account < 1 || account > balance.length) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account < 0 || account > balance.length) return false;\\n        if (balance[account-1] >= money){\\n            balance[account-1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925868,
                "title": "simple-c-solution",
                "content": "# Intuition\\nCreate an array to hold accounts and their balances.\\nCreate a method to check if the account exists\\nCreate a method to check if the account has the required funds\\n\\n# Code\\n```\\npublic class Bank {\\n    private long[] _accounts;\\n\\tpublic Bank(long[] balance)\\n\\t{\\n\\t\\t_accounts = balance;\\n\\t}\\n\\n    private bool AccountExists(int account) => _accounts.Length >= account && account > 0;\\n    private bool HasFunds(int account, long money) => _accounts[account - 1] >= money;\\n\\n    public bool Transfer(int account1, int account2, long money)\\n\\t{\\n        if (AccountExists(account1) && AccountExists(account2) && HasFunds(account1, money))\\n        {\\n            _accounts[account1 - 1] -= money;\\n            _accounts[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\tpublic bool Deposit(int account, long money)\\n\\t{\\n\\t    if (AccountExists(account))\\n\\t\\t{\\n\\t\\t    _accounts[account - 1] += money;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n    }\\n\\n\\tpublic bool Withdraw(int account, long money)\\n\\t{\\n\\t\\tif (AccountExists(account) && HasFunds(account, money))\\n\\t\\t{\\n\\t\\t\\t_accounts[account - 1] -= money;\\n            return true;\\n        }\\n\\t    return false;\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Bank {\\n    private long[] _accounts;\\n\\tpublic Bank(long[] balance)\\n\\t{\\n\\t\\t_accounts = balance;\\n\\t}\\n\\n    private bool AccountExists(int account) => _accounts.Length >= account && account > 0;\\n    private bool HasFunds(int account, long money) => _accounts[account - 1] >= money;\\n\\n    public bool Transfer(int account1, int account2, long money)\\n\\t{\\n        if (AccountExists(account1) && AccountExists(account2) && HasFunds(account1, money))\\n        {\\n            _accounts[account1 - 1] -= money;\\n            _accounts[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\tpublic bool Deposit(int account, long money)\\n\\t{\\n\\t    if (AccountExists(account))\\n\\t\\t{\\n\\t\\t    _accounts[account - 1] += money;\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n    }\\n\\n\\tpublic bool Withdraw(int account, long money)\\n\\t{\\n\\t\\tif (AccountExists(account) && HasFunds(account, money))\\n\\t\\t{\\n\\t\\t\\t_accounts[account - 1] -= money;\\n            return true;\\n        }\\n\\t    return false;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894662,
                "title": "c",
                "content": "![image](https://assets.leetcode.com/users/images/9a2773f4-e0bb-49e2-a82a-72a8e9353471_1691753316.0044856.png)\\n```\\n#define ll long long\\n\\ntypedef struct {\\n    ll* arr;\\n    int size;\\n} Bank;\\n\\nBank* bankCreate(ll* balance, int balanceSize) {\\n    Bank* obj = (Bank*) malloc(1 * sizeof(Bank));\\n    obj->arr = balance;\\n    obj->size = balanceSize;\\n    return obj;\\n}\\n\\nbool bankTransfer(Bank* obj, int account1, int account2, ll money) {\\n    if (account1 > obj->size || account2 > obj->size) return false;\\n    if (obj->arr[account1-1] < money) return false;\\n    obj->arr[account1-1] -= money;\\n    obj->arr[account2-1] += money;\\n    return true;\\n}\\n\\nbool bankDeposit(Bank* obj, int account, ll money) {\\n    if (account > obj->size) return false;\\n    obj->arr[account-1] += money;\\n    return true;\\n}\\n\\nbool bankWithdraw(Bank* obj, int account, ll money) {\\n    if (account > obj->size || obj->arr[account-1] < money) return false;\\n    obj->arr[account-1] -= money;\\n    return true;\\n}\\n\\nvoid bankFree(Bank* obj) {\\n    free(obj);\\n}\\n\\n/**\\n * Your Bank struct will be instantiated and called as such:\\n * Bank* obj = bankCreate(balance, balanceSize);\\n * bool param_1 = bankTransfer(obj, account1, account2, money);\\n * bool param_2 = bankDeposit(obj, account, money);\\n * bool param_3 = bankWithdraw(obj, account, money);\\n * bankFree(obj);\\n*/\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n#define ll long long\\n\\ntypedef struct {\\n    ll* arr;\\n    int size;\\n} Bank;\\n\\nBank* bankCreate(ll* balance, int balanceSize) {\\n    Bank* obj = (Bank*) malloc(1 * sizeof(Bank));\\n    obj->arr = balance;\\n    obj->size = balanceSize;\\n    return obj;\\n}\\n\\nbool bankTransfer(Bank* obj, int account1, int account2, ll money) {\\n    if (account1 > obj->size || account2 > obj->size) return false;\\n    if (obj->arr[account1-1] < money) return false;\\n    obj->arr[account1-1] -= money;\\n    obj->arr[account2-1] += money;\\n    return true;\\n}\\n\\nbool bankDeposit(Bank* obj, int account, ll money) {\\n    if (account > obj->size) return false;\\n    obj->arr[account-1] += money;\\n    return true;\\n}\\n\\nbool bankWithdraw(Bank* obj, int account, ll money) {\\n    if (account > obj->size || obj->arr[account-1] < money) return false;\\n    obj->arr[account-1] -= money;\\n    return true;\\n}\\n\\nvoid bankFree(Bank* obj) {\\n    free(obj);\\n}\\n\\n/**\\n * Your Bank struct will be instantiated and called as such:\\n * Bank* obj = bankCreate(balance, balanceSize);\\n * bool param_1 = bankTransfer(obj, account1, account2, money);\\n * bool param_2 = bankDeposit(obj, account, money);\\n * bool param_3 = bankWithdraw(obj, account, money);\\n * bankFree(obj);\\n*/\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3827610,
                "title": "simple-intuative-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance=balance\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1>len(self.balance) or account2>len(self.balance):\\n            return False \\n        if self.balance[account1-1]>=money:\\n            self.balance[account1-1]-=money\\n            self.balance[account2-1]+=money\\n            return True\\n        else:\\n            return False    \\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account>len(self.balance):\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account>len(self.balance):\\n            return False\\n        if self.balance[(account)-1]>=money:\\n            self.balance[(account)-1]-=money\\n            return True\\n        return False    \\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance=balance\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1>len(self.balance) or account2>len(self.balance):\\n            return False \\n        if self.balance[account1-1]>=money:\\n            self.balance[account1-1]-=money\\n            self.balance[account2-1]+=money\\n            return True\\n        else:\\n            return False    \\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account>len(self.balance):\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account>len(self.balance):\\n            return False\\n        if self.balance[(account)-1]>=money:\\n            self.balance[(account)-1]-=money\\n            return True\\n        return False    \\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3823166,
                "title": "easy-to-understand-java-solution-using-hashmap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    HashMap<Integer, Long> map = new HashMap<>();\\n\\n    public Bank(long[] balance) {\\n        for(int i = 0; i < balance.length; i++){\\n            map.put(i+1, balance[i]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(map.containsKey(account1) && map.containsKey(account2)) {\\n            if(map.get(account1) < money) return false;\\n\\t\\t\\telse{\\n                map.put(account1,  map.get(account1)-money);\\n                map.put(account2,  map.get(account2)+money);\\n                return true;\\n            }\\n\\t\\t}else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(map.containsKey(account)) {\\n\\t\\t\\tmap.put(account,  map.get(account)+money);\\n            return true;\\n\\t\\t}else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        //int res = -1;\\n\\t\\t\\n\\t\\tif(map.containsKey(account)) {\\n\\t\\t\\tif(map.get(account) < money) return false;\\n\\t\\t\\telse {\\n\\t\\t\\t\\t//res = amount;\\n\\t\\t\\t\\tmap.put(account, map.get(account)-money);\\n                return true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    HashMap<Integer, Long> map = new HashMap<>();\\n\\n    public Bank(long[] balance) {\\n        for(int i = 0; i < balance.length; i++){\\n            map.put(i+1, balance[i]);\\n        }\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(map.containsKey(account1) && map.containsKey(account2)) {\\n            if(map.get(account1) < money) return false;\\n\\t\\t\\telse{\\n                map.put(account1,  map.get(account1)-money);\\n                map.put(account2,  map.get(account2)+money);\\n                return true;\\n            }\\n\\t\\t}else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(map.containsKey(account)) {\\n\\t\\t\\tmap.put(account,  map.get(account)+money);\\n            return true;\\n\\t\\t}else {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        //int res = -1;\\n\\t\\t\\n\\t\\tif(map.containsKey(account)) {\\n\\t\\t\\tif(map.get(account) < money) return false;\\n\\t\\t\\telse {\\n\\t\\t\\t\\t//res = amount;\\n\\t\\t\\t\\tmap.put(account, map.get(account)-money);\\n                return true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3756084,
                "title": "java-easy-peazy-solution-explained",
                "content": "# Approach\\nFor each method we check for non-accpetable values at the beginning and if everything is fine we proceed with the action.\\n\\n\\n# Code\\n```\\nclass Bank {\\n    long[] balance;\\n    int n;\\n\\n    public Bank(long[] balance) {\\n        this.balance=balance;\\n        n=balance.length;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n        if(account1<1 || account1>n || account2<1 || account2>n || balance[account1-1]<money){\\n            return false;\\n        }\\n\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>n){return false;}\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1 || account>n || balance[account-1]<money){return false;}\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\nclass Bank {\\n    long[] balance;\\n    int n;\\n\\n    public Bank(long[] balance) {\\n        this.balance=balance;\\n        n=balance.length;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n        if(account1<1 || account1>n || account2<1 || account2>n || balance[account1-1]<money){\\n            return false;\\n        }\\n\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>n){return false;}\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1 || account>n || balance[account-1]<money){return false;}\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3707374,
                "title": "fill-in-the-blanks",
                "content": "# \\uD83D\\uDE09Don\\'t just watch & move away, also give an Upvote.\\uD83D\\uDE09\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n=0;\\n    Bank(vector<long long>& balance) {\\n          bal = balance;\\n          n = size(balance);\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1 <= n && account2 <= n && bal[account1-1] >= money)\\n        {\\n            bal[account1-1] -= money;\\n            bal[account2-1] += money;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account <= n)\\n        {\\n            bal[account-1] += money;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<=n && bal[account-1] >= money)\\n        {\\n            bal[account-1] -= money;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```\\n\\n![Leetcode Upvote.gif](https://assets.leetcode.com/users/images/05cf5f66-b368-400e-af11-ff14f6ed46eb_1688283488.7062104.gif)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n=0;\\n    Bank(vector<long long>& balance) {\\n          bal = balance;\\n          n = size(balance);\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1 <= n && account2 <= n && bal[account1-1] >= money)\\n        {\\n            bal[account1-1] -= money;\\n            bal[account2-1] += money;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account <= n)\\n        {\\n            bal[account-1] += money;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<=n && bal[account-1] >= money)\\n        {\\n            bal[account-1] -= money;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3652460,
                "title": "simple-bank-system",
                "content": "# Code\\n```\\nclass Bank:\\n    \\n    def __init__(self, b: List[int]):\\n        self.d = {}\\n        for i in range(1,len(b)+1):\\n            self.d[i] = b[i-1]\\n        \\n    def transfer(self, a1: int, a2: int, m: int) -> bool:\\n        if a1 in self.d and a2 in self.d:\\n            if self.d[a1]>=m:\\n                self.d[a1]-= m \\n                self.d[a2]+= m\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n    def deposit(self, a: int, m: int) -> bool:\\n        if a in self.d:\\n            self.d[a]+= m\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, a: int, m: int) -> bool:\\n        if a in self.d and self.d[a]>= m:\\n            self.d[a]-= m\\n            return True\\n        else:\\n            return False\\n\\n        \\n    \\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n    \\n    def __init__(self, b: List[int]):\\n        self.d = {}\\n        for i in range(1,len(b)+1):\\n            self.d[i] = b[i-1]\\n        \\n    def transfer(self, a1: int, a2: int, m: int) -> bool:\\n        if a1 in self.d and a2 in self.d:\\n            if self.d[a1]>=m:\\n                self.d[a1]-= m \\n                self.d[a2]+= m\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n    def deposit(self, a: int, m: int) -> bool:\\n        if a in self.d:\\n            self.d[a]+= m\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, a: int, m: int) -> bool:\\n        if a in self.d and self.d[a]>= m:\\n            self.d[a]-= m\\n            return True\\n        else:\\n            return False\\n\\n        \\n    \\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3646481,
                "title": "python-medium",
                "content": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.d = defaultdict(int)\\n        self.n = len(balance) + 1\\n\\n        for i, money in enumerate(balance):\\n            self.d[i + 1] = money\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not (1 <= account1 <= self.n) or not (1 <= account2 <= self.n):\\n            return False\\n\\n        if self.d[account1] < money:\\n            return False\\n        \\n        self.d[account1] -= money\\n        self.d[account2] += money\\n\\n        return True\\n        \\n\\n        \\n    def deposit(self, account: int, money: int) -> bool:\\n        if not (1 <= account <= self.n):\\n            return False\\n\\n        self.d[account] += money\\n\\n        return True\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not (1 <= account <= self.n):\\n            return False\\n\\n        if self.d[account] < money:\\n            return False\\n\\n        self.d[account] -= money\\n\\n        return True\\n         \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.d = defaultdict(int)\\n        self.n = len(balance) + 1\\n\\n        for i, money in enumerate(balance):\\n            self.d[i + 1] = money\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not (1 <= account1 <= self.n) or not (1 <= account2 <= self.n):\\n            return False\\n\\n        if self.d[account1] < money:\\n            return False\\n        \\n        self.d[account1] -= money\\n        self.d[account2] += money\\n\\n        return True\\n        \\n\\n        \\n    def deposit(self, account: int, money: int) -> bool:\\n        if not (1 <= account <= self.n):\\n            return False\\n\\n        self.d[account] += money\\n\\n        return True\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not (1 <= account <= self.n):\\n            return False\\n\\n        if self.d[account] < money:\\n            return False\\n\\n        self.d[account] -= money\\n\\n        return True\\n         \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3635088,
                "title": "javascript-solution-easy-to-understand",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$ \\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Bank {\\n    constructor(balance){\\n        this.balance = balance \\n    }\\n\\n    isValidAccount(account){\\n        if(account >= 1 && account <= this.balance.length){\\n            return true\\n        }\\n        return false\\n    }\\n\\n    transfer(account1, account2, money){\\n        if(this.isValidAccount(account1) && this.isValidAccount(account2)){\\n            if(this.balance[account1-1] >= money){\\n                this.balance[account1-1] -= money \\n                this.balance[account2-1] += money \\n                return true\\n            } \\n        }\\n        return false\\n    }\\n\\n    deposit(account, money){\\n        if(this.isValidAccount(account)){\\n            this.balance[account-1] += money\\n            return true\\n        }\\n        return false\\n    }\\n    withdraw(account, money){\\n        if(this.isValidAccount(account)){\\n            if(this.balance[account-1] >= money){\\n                this.balance[account-1] -= money \\n                return true\\n            } \\n        }\\n        return false\\n    }\\n};\\n\\n/** \\n * Your Bank object will be instantiated and called as such:\\n * var obj = new Bank(balance)\\n * var param_1 = obj.transfer(account1,account2,money)\\n * var param_2 = obj.deposit(account,money)\\n * var param_3 = obj.withdraw(account,money)\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Hash Table",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\nclass Bank {\\n    constructor(balance){\\n        this.balance = balance \\n    }\\n\\n    isValidAccount(account){\\n        if(account >= 1 && account <= this.balance.length){\\n            return true\\n        }\\n        return false\\n    }\\n\\n    transfer(account1, account2, money){\\n        if(this.isValidAccount(account1) && this.isValidAccount(account2)){\\n            if(this.balance[account1-1] >= money){\\n                this.balance[account1-1] -= money \\n                this.balance[account2-1] += money \\n                return true\\n            } \\n        }\\n        return false\\n    }\\n\\n    deposit(account, money){\\n        if(this.isValidAccount(account)){\\n            this.balance[account-1] += money\\n            return true\\n        }\\n        return false\\n    }\\n    withdraw(account, money){\\n        if(this.isValidAccount(account)){\\n            if(this.balance[account-1] >= money){\\n                this.balance[account-1] -= money \\n                return true\\n            } \\n        }\\n        return false\\n    }\\n};\\n\\n/** \\n * Your Bank object will be instantiated and called as such:\\n * var obj = new Bank(balance)\\n * var param_1 = obj.transfer(account1,account2,money)\\n * var param_2 = obj.deposit(account,money)\\n * var param_3 = obj.withdraw(account,money)\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3631526,
                "title": "c-vector",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\nvector<long long> bank;\\nint sz;\\n    Bank(vector<long long>& balance) {\\n        bank=balance;\\n        sz=bank.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n     if(sz>=account1 and sz>=account2 and bank[account1-1]>=money)\\n      {\\n          bank[account1-1]-=money;\\n          bank[account2-1]+=money;\\n          return 1;\\n      }  \\n      return 0;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n       if(sz>=account)\\n       {\\n         bank[account-1]+=money;\\n         return 1;   \\n       }  \\n       return 0;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n      if(sz>=account and bank[account-1]>=money)\\n      {\\n          bank[account-1]-=money;\\n          return 1;\\n      }  \\n      return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\nvector<long long> bank;\\nint sz;\\n    Bank(vector<long long>& balance) {\\n        bank=balance;\\n        sz=bank.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n     if(sz>=account1 and sz>=account2 and bank[account1-1]>=money)\\n      {\\n          bank[account1-1]-=money;\\n          bank[account2-1]+=money;\\n          return 1;\\n      }  \\n      return 0;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n       if(sz>=account)\\n       {\\n         bank[account-1]+=money;\\n         return 1;   \\n       }  \\n       return 0;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n      if(sz>=account and bank[account-1]>=money)\\n      {\\n          bank[account-1]-=money;\\n          return 1;\\n      }  \\n      return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3614332,
                "title": "most-easy-solution-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    vector <long long> accounts;\\n    int n;\\n    // map<int , long long> info;\\n\\npublic:\\n    Bank(vector<long long>& balance) {\\n        \\n        n = balance.size();\\n        accounts.resize(n);\\n\\n        for (int i = 0; i < n; i++){\\n            accounts[i] = balance[i];\\n            // mpp[i] = balance[i];\\n        }\\n\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n\\n        if (account1 < 1 || account2 < 1 || account1 > n || account2 > n){\\n            return false;\\n        }\\n\\n        if (accounts[account1-1] < money){\\n            return false;\\n        }\\n\\n        accounts[account1-1] = accounts[account1-1] - money;\\n        accounts[account2-1] = accounts[account2-1] + money;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n\\n        if (account < 1 || account > n){\\n            return false;\\n        }\\n\\n        \\n        accounts[account-1] = accounts[account-1] + money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n\\n        if (account < 1 || account > n){\\n            return false;\\n        }\\n        \\n        if (accounts[account-1] < money){\\n            return false;\\n        }\\n\\n        accounts[account-1] = accounts[account-1] - money;\\n        \\n        \\n        return true;\\n\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Bank {\\n\\n    vector <long long> accounts;\\n    int n;\\n    // map<int , long long> info;\\n\\npublic:\\n    Bank(vector<long long>& balance) {\\n        \\n        n = balance.size();\\n        accounts.resize(n);\\n\\n        for (int i = 0; i < n; i++){\\n            accounts[i] = balance[i];\\n            // mpp[i] = balance[i];\\n        }\\n\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n\\n        if (account1 < 1 || account2 < 1 || account1 > n || account2 > n){\\n            return false;\\n        }\\n\\n        if (accounts[account1-1] < money){\\n            return false;\\n        }\\n\\n        accounts[account1-1] = accounts[account1-1] - money;\\n        accounts[account2-1] = accounts[account2-1] + money;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n\\n        if (account < 1 || account > n){\\n            return false;\\n        }\\n\\n        \\n        accounts[account-1] = accounts[account-1] + money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n\\n        if (account < 1 || account > n){\\n            return false;\\n        }\\n        \\n        if (accounts[account-1] < money){\\n            return false;\\n        }\\n\\n        accounts[account-1] = accounts[account-1] - money;\\n        \\n        \\n        return true;\\n\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3576080,
                "title": "simple-bank-system-python-o-n",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        print(account1-1)\\n        if (1<= account1 <= len(self.balance)) and (1<= account2 <= len(self.balance)) and self.balance[account1-1] >= money:\\n            self.balance[account1-1] -= money\\n            self.balance[account2-1] += money\\n            return True\\n        return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1<= (account) <= len(self.balance):\\n            self.balance[account-1] += money\\n            return True\\n        return False\\n\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if (1<= account <= len(self.balance)) and (self.balance[account-1] >= money):\\n            self.balance[account-1] -= money\\n            return True\\n        return False\\n            \\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        print(account1-1)\\n        if (1<= account1 <= len(self.balance)) and (1<= account2 <= len(self.balance)) and self.balance[account1-1] >= money:\\n            self.balance[account1-1] -= money\\n            self.balance[account2-1] += money\\n            return True\\n        return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1<= (account) <= len(self.balance):\\n            self.balance[account-1] += money\\n            return True\\n        return False\\n\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if (1<= account <= len(self.balance)) and (self.balance[account-1] >= money):\\n            self.balance[account-1] -= money\\n            return True\\n        return False\\n            \\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574935,
                "title": "simple-solution-c-100-efficient",
                "content": "# Intuition & Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst we simply check if the account(s) is/are valid and and check for the money being withdrawn if it is more than balance (in case of withdraw and transfer) and simply add/remove from account balance\\n\\n![Screenshot 2023-05-29 154114.png](https://assets.leetcode.com/users/images/95146074-7850-4f12-adbb-212b8b6fdc6e_1685355130.7755208.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1) - as we only perform simple checks and take the transaction forward\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) - as we do not use any extra memory other than to store the input array.\\n\\n## Please upvote if you like the simplicity of the approach\\n\\n# Code\\n```\\npublic class Bank {\\n\\n    long[] accBalance;\\n    int n;\\n\\n    public Bank(long[] balance) {\\n        accBalance = balance.ToArray();\\n        n = balance.Length;\\n    }\\n    \\n    public bool Transfer(int account1, int account2, long money) {\\n        if (!ValidAccount(account1) || !ValidAccount(account2) \\n            || accBalance[account1 - 1] < money)\\n        {\\n            return false;\\n        }\\n\\n        accBalance[account1 - 1] -= money;\\n        accBalance[account2 - 1] += money;\\n\\n        return true;\\n    }\\n    \\n    public bool Deposit(int account, long money) {\\n        if (!ValidAccount(account))\\n            return false;\\n\\n        accBalance[account - 1] += money;\\n\\n        return true;\\n    }\\n    \\n    public bool Withdraw(int account, long money) {\\n        if (!ValidAccount(account) || accBalance[account - 1] < money)\\n            return false;\\n\\n        accBalance[account - 1] -= money;\\n\\n        return true;\\n    }\\n\\n    private bool ValidAccount(int account)\\n    {\\n        return (account >= 1 && account <= n);\\n    }\\n}\\n```\\n\\n## Please upvote if you like the simplicity of the approach\\n![Upvote please - do this.jpg](https://assets.leetcode.com/users/images/ca4306ec-d0e0-4284-a6d2-7d5d6e403352_1685355236.6439917.jpeg)\\n",
                "solutionTags": [
                    "C#",
                    "Array",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\npublic class Bank {\\n\\n    long[] accBalance;\\n    int n;\\n\\n    public Bank(long[] balance) {\\n        accBalance = balance.ToArray();\\n        n = balance.Length;\\n    }\\n    \\n    public bool Transfer(int account1, int account2, long money) {\\n        if (!ValidAccount(account1) || !ValidAccount(account2) \\n            || accBalance[account1 - 1] < money)\\n        {\\n            return false;\\n        }\\n\\n        accBalance[account1 - 1] -= money;\\n        accBalance[account2 - 1] += money;\\n\\n        return true;\\n    }\\n    \\n    public bool Deposit(int account, long money) {\\n        if (!ValidAccount(account))\\n            return false;\\n\\n        accBalance[account - 1] += money;\\n\\n        return true;\\n    }\\n    \\n    public bool Withdraw(int account, long money) {\\n        if (!ValidAccount(account) || accBalance[account - 1] < money)\\n            return false;\\n\\n        accBalance[account - 1] -= money;\\n\\n        return true;\\n    }\\n\\n    private bool ValidAccount(int account)\\n    {\\n        return (account >= 1 && account <= n);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3562490,
                "title": "python3-good-enough",
                "content": "``` Python3 []\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 <= len(self.balance) and account2 <= len(self.balance):\\n            if self.balance[account1-1] - money >= 0:\\n                self.balance[account1-1] -= money\\n                self.balance[account2-1] += money\\n                return True\\n\\n            return False\\n        \\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= len(self.balance):\\n            self.balance[account-1] += money\\n            return True\\n        \\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account <= len(self.balance):\\n            if self.balance[account-1] - money >= 0:\\n                self.balance[account-1] -= money\\n                return True\\n            \\n            return False\\n        \\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` Python3 []\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 <= len(self.balance) and account2 <= len(self.balance):\\n            if self.balance[account1-1] - money >= 0:\\n                self.balance[account1-1] -= money\\n                self.balance[account2-1] += money\\n                return True\\n\\n            return False\\n        \\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= len(self.balance):\\n            self.balance[account-1] += money\\n            return True\\n        \\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account <= len(self.balance):\\n            if self.balance[account-1] - money >= 0:\\n                self.balance[account-1] -= money\\n                return True\\n            \\n            return False\\n        \\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3552651,
                "title": "c-easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n    int n;\\n    vector<long long> balance;\\n    Bank(vector<long long>& bal) {\\n        balance=bal;\\n        n = balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1<1 || account1>n)return false;\\n        if(account2<1 || account2>n)return false;\\n        if(balance[account1-1]<money)return false;\\n        else{\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n        }\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account<1 || account>n)return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<1 || account>n)return false;\\n        if(balance[account-1]<money)return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    int n;\\n    vector<long long> balance;\\n    Bank(vector<long long>& bal) {\\n        balance=bal;\\n        n = balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1<1 || account1>n)return false;\\n        if(account2<1 || account2>n)return false;\\n        if(balance[account1-1]<money)return false;\\n        else{\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n        }\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account<1 || account>n)return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account<1 || account>n)return false;\\n        if(balance[account-1]<money)return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3536041,
                "title": "java-straightforward-solution",
                "content": "# Complexity\\n- Time complexity: All methods have O(1) time complexity\\n\\n# Code\\n```\\nclass Bank {\\n    long[] bank;\\n    public Bank(long[] balance) {\\n        bank = balance;   \\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if (!isAccountValid(account1) || !isAccountValid(account2) || !isValidTransaction(account1, money)) {\\n            return false;\\n        } else {\\n            bank[account1 - 1] -= money;\\n            bank[account2 - 1] += money;\\n            return true;\\n        }\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        if (!isAccountValid(account)) {\\n            return false;\\n        } else {\\n            bank[account - 1] += money;\\n            return true;\\n        }\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        if (!isAccountValid(account) || !isValidTransaction(account, money)) {\\n            return false;\\n        } else {\\n            bank[account - 1] -= money;\\n            return true;\\n        }\\n    }\\n    \\n    private boolean isAccountValid(int n) {\\n        return n >= 1 && n <= bank.length;\\n    }\\n\\n    private boolean isValidTransaction(int account1, long money) {\\n        return money <= bank[account1 - 1];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    long[] bank;\\n    public Bank(long[] balance) {\\n        bank = balance;   \\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if (!isAccountValid(account1) || !isAccountValid(account2) || !isValidTransaction(account1, money)) {\\n            return false;\\n        } else {\\n            bank[account1 - 1] -= money;\\n            bank[account2 - 1] += money;\\n            return true;\\n        }\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        if (!isAccountValid(account)) {\\n            return false;\\n        } else {\\n            bank[account - 1] += money;\\n            return true;\\n        }\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        if (!isAccountValid(account) || !isValidTransaction(account, money)) {\\n            return false;\\n        } else {\\n            bank[account - 1] -= money;\\n            return true;\\n        }\\n    }\\n    \\n    private boolean isAccountValid(int n) {\\n        return n >= 1 && n <= bank.length;\\n    }\\n\\n    private boolean isValidTransaction(int account1, long money) {\\n        return money <= bank[account1 - 1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3525683,
                "title": "java-easy-soln",
                "content": "```\\nclass Bank {\\n    long[] bank;\\n    int totalAccounts;\\n    public Bank(long[] balance) {\\n        this.bank = balance;\\n        this.totalAccounts = balance.length;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(checkBoundaries(account1) && checkBoundaries(account2) && bank[account1 - 1] >= money) {\\n            bank[account1 - 1] -= money;\\n            bank[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(checkBoundaries(account)) {\\n            bank[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(checkBoundaries(account) && bank[account - 1] >= money) { \\n            bank[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    private boolean checkBoundaries(int account) {\\n        return account - 1 >= 0 && account - 1 < totalAccounts;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\n    long[] bank;\\n    int totalAccounts;\\n    public Bank(long[] balance) {\\n        this.bank = balance;\\n        this.totalAccounts = balance.length;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(checkBoundaries(account1) && checkBoundaries(account2) && bank[account1 - 1] >= money) {\\n            bank[account1 - 1] -= money;\\n            bank[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(checkBoundaries(account)) {\\n            bank[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(checkBoundaries(account) && bank[account - 1] >= money) { \\n            bank[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    private boolean checkBoundaries(int account) {\\n        return account - 1 >= 0 && account - 1 < totalAccounts;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3506544,
                "title": "easy-readable-solution",
                "content": "# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n\\n    def has_balance(self, account: int, money: int) -> bool:\\n        return self.balance[account-1] >= money\\n\\n    def valid_account(self, account: int) -> bool:\\n        return 1 <= account <= len(self.balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        return self.valid_account(account1) and self.valid_account(account2) and self.withdraw(account1, money) and self.deposit(account2, money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.valid_account(account):\\n            self.balance[account-1] += money \\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.valid_account(account) and self.has_balance(account, money):\\n            self.balance[account-1] -= money\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n\\n    def has_balance(self, account: int, money: int) -> bool:\\n        return self.balance[account-1] >= money\\n\\n    def valid_account(self, account: int) -> bool:\\n        return 1 <= account <= len(self.balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        return self.valid_account(account1) and self.valid_account(account2) and self.withdraw(account1, money) and self.deposit(account2, money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.valid_account(account):\\n            self.balance[account-1] += money \\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.valid_account(account) and self.has_balance(account, money):\\n            self.balance[account-1] -= money\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3480999,
                "title": "python3-and",
                "content": "\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.b=[0]+balance\\n        self.n=len(self.b)\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1>=self.n or account2>=self.n:\\n            return False\\n        if self.b[account1]<money:\\n            return False\\n        \\n        self.b[account1]-=money\\n        self.b[account2]+=money\\n        return True\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account>=self.n:\\n            return False\\n        \\n        self.b[account]+=money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account>=self.n:\\n            return False\\n        \\n        if self.b[account]<money:\\n            return False\\n        self.b[account]-=money\\n        return True\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.b=[0]+balance\\n        self.n=len(self.b)\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1>=self.n or account2>=self.n:\\n            return False\\n        if self.b[account1]<money:\\n            return False\\n        \\n        self.b[account1]-=money\\n        self.b[account2]+=money\\n        return True\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account>=self.n:\\n            return False\\n        \\n        self.b[account]+=money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account>=self.n:\\n            return False\\n        \\n        if self.b[account]<money:\\n            return False\\n        self.b[account]-=money\\n        return True\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3474995,
                "title": "python3-easy-solution",
                "content": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.n = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.is_account_number_valid(account1) and self.is_account_number_valid(account2):\\n            if self.balance[account1-1] >= money:\\n                self.balance[account1-1] -= money\\n                self.balance[account2-1] += money\\n                return True\\n        else:\\n            return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.is_account_number_valid(account):\\n            self.balance[account-1] += money\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.is_account_number_valid(account):\\n            if self.balance[account-1] >= money:\\n                self.balance[account-1] -= money\\n                return True\\n        else:\\n            return False\\n    \\n    def is_account_number_valid(self, account: int) -> bool:\\n        if 1 <= account <= self.n:\\n            return True\\n        else:\\n            return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.n = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.is_account_number_valid(account1) and self.is_account_number_valid(account2):\\n            if self.balance[account1-1] >= money:\\n                self.balance[account1-1] -= money\\n                self.balance[account2-1] += money\\n                return True\\n        else:\\n            return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.is_account_number_valid(account):\\n            self.balance[account-1] += money\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.is_account_number_valid(account):\\n            if self.balance[account-1] >= money:\\n                self.balance[account-1] -= money\\n                return True\\n        else:\\n            return False\\n    \\n    def is_account_number_valid(self, account: int) -> bool:\\n        if 1 <= account <= self.n:\\n            return True\\n        else:\\n            return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3466151,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n    private long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 -1 >= balance.length || account2 - 1 >= balance.length)\\n            return false;\\n        if(balance[account1-1] >= money){\\n            balance[account1 - 1] -= money;\\n            balance[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account -1 >= balance.length)\\n            return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account -1 >= balance.length)\\n            return false;\\n        if(balance[account-1] >= money){\\n            balance[account-1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    private long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 -1 >= balance.length || account2 - 1 >= balance.length)\\n            return false;\\n        if(balance[account1-1] >= money){\\n            balance[account1 - 1] -= money;\\n            balance[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account -1 >= balance.length)\\n            return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account -1 >= balance.length)\\n            return false;\\n        if(balance[account-1] >= money){\\n            balance[account-1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3464563,
                "title": "javascript-easy-fun-solution",
                "content": "# Have fun with my Code (^__^)\\n```\\nclass Bank {\\n    constructor(arr) { \\n        this.balance = new Map()\\n        arr.forEach((el, i) => {\\n            this.balance.set(i + 1, el)\\n        });\\n    }\\n};\\nBank.prototype.transfer = function(account1, account2, money) {\\n    if (this.balance.has(account1) && this.balance.has(account2)) { \\n        if (this.balance.get(account1) >= money) { \\n            this.balance.set(account1, this.balance.get(account1) - money)\\n            this.balance.set(account2, this.balance.get(account2) + money)\\n            return true\\n        }\\n    }\\n    return false\\n};\\n\\n\\nBank.prototype.deposit = function(account, money) {\\n    if (this.balance.has(account)) { \\n        this.balance.set(account, this.balance.get(account) + money)\\n        return true\\n    }\\n    return false\\n};\\n\\nBank.prototype.withdraw = function(account, money) {\\n    if (this.balance.has(account) && this.balance.get(account) >= money) { \\n        this.balance.set(account, this.balance.get(account) - money)\\n        return true\\n    }\\n    return false\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nclass Bank {\\n    constructor(arr) { \\n        this.balance = new Map()\\n        arr.forEach((el, i) => {\\n            this.balance.set(i + 1, el)\\n        });\\n    }\\n};\\nBank.prototype.transfer = function(account1, account2, money) {\\n    if (this.balance.has(account1) && this.balance.has(account2)) { \\n        if (this.balance.get(account1) >= money) { \\n            this.balance.set(account1, this.balance.get(account1) - money)\\n            this.balance.set(account2, this.balance.get(account2) + money)\\n            return true\\n        }\\n    }\\n    return false\\n};\\n\\n\\nBank.prototype.deposit = function(account, money) {\\n    if (this.balance.has(account)) { \\n        this.balance.set(account, this.balance.get(account) + money)\\n        return true\\n    }\\n    return false\\n};\\n\\nBank.prototype.withdraw = function(account, money) {\\n    if (this.balance.has(account) && this.balance.get(account) >= money) { \\n        this.balance.set(account, this.balance.get(account) - money)\\n        return true\\n    }\\n    return false\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3459669,
                "title": "scala-readable-solution-with-helper-methods",
                "content": "# Code\\n```scala\\nclass Bank(_balance: Array[Long]) {\\n\\n  def transfer(account1: Int, account2: Int, money: Long): Boolean =\\n    if (!isAccountValid(account1) || !isAccountValid(account2) || getBalance(account1) < money) {\\n      false\\n    } else {\\n      _balance(accountIdx(account1)) -= money\\n      _balance(accountIdx(account2)) += money\\n      true\\n    }\\n\\n  def deposit(account: Int, money: Long): Boolean =\\n    if (!isAccountValid(account)){\\n      false\\n    } else {\\n      _balance(accountIdx(account)) += money\\n      true\\n    }\\n\\n  def withdraw(account: Int, money: Long): Boolean =\\n    if (!isAccountValid(account) || getBalance(account) < money) {\\n      false\\n    } else {\\n      _balance(accountIdx(account)) -= money\\n      true\\n    }\\n\\n  private def getBalance(account: Int): Long =\\n    _balance(accountIdx(account))\\n\\n  private def isAccountValid(account: Int): Boolean =\\n    account >= 1  && account <= _balance.length\\n\\n  private def accountIdx(account: Int): Int =\\n    account - 1\\n\\n}\\n```",
                "solutionTags": [
                    "Scala",
                    "Design"
                ],
                "code": "```scala\\nclass Bank(_balance: Array[Long]) {\\n\\n  def transfer(account1: Int, account2: Int, money: Long): Boolean =\\n    if (!isAccountValid(account1) || !isAccountValid(account2) || getBalance(account1) < money) {\\n      false\\n    } else {\\n      _balance(accountIdx(account1)) -= money\\n      _balance(accountIdx(account2)) += money\\n      true\\n    }\\n\\n  def deposit(account: Int, money: Long): Boolean =\\n    if (!isAccountValid(account)){\\n      false\\n    } else {\\n      _balance(accountIdx(account)) += money\\n      true\\n    }\\n\\n  def withdraw(account: Int, money: Long): Boolean =\\n    if (!isAccountValid(account) || getBalance(account) < money) {\\n      false\\n    } else {\\n      _balance(accountIdx(account)) -= money\\n      true\\n    }\\n\\n  private def getBalance(account: Int): Long =\\n    _balance(accountIdx(account))\\n\\n  private def isAccountValid(account: Int): Boolean =\\n    account >= 1  && account <= _balance.length\\n\\n  private def accountIdx(account: Int): Int =\\n    account - 1\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3459148,
                "title": "using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    long[] arr;\\n    public Bank(long[] balance) {\\n        arr = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1-1<arr.length && account2-1<arr.length){\\n            if(arr[account1-1]>=money){\\n                arr[account1-1] -= money;\\n                arr[account2-1] += money;\\n\\n                return true;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        else{\\n\\n            return false;\\n        }\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account-1<arr.length){\\n            arr[account-1]+=money;\\n\\n            return true;\\n        }\\n\\n        else{\\n            return false;\\n        }\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account-1<arr.length && arr[account-1]>=money){\\n            arr[account-1]-=money;\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    long[] arr;\\n    public Bank(long[] balance) {\\n        arr = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1-1<arr.length && account2-1<arr.length){\\n            if(arr[account1-1]>=money){\\n                arr[account1-1] -= money;\\n                arr[account2-1] += money;\\n\\n                return true;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        else{\\n\\n            return false;\\n        }\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account-1<arr.length){\\n            arr[account-1]+=money;\\n\\n            return true;\\n        }\\n\\n        else{\\n            return false;\\n        }\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account-1<arr.length && arr[account-1]>=money){\\n            arr[account-1]-=money;\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456628,
                "title": "simple-bank-system",
                "content": "------------------ Easy C++ Solution -------------------\\n\\n# Complexity\\n- Time complexity: $$O(balance)$$\\n\\n- Space complexity:$$O(balance)$$\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n  Bank(vector<long long>& balance) {\\n    this->balance=balance;\\n  }\\n\\n  bool transfer(int account1, int account2, long long money) {\\n    if (!isValid(account2))\\n      return false;\\n    return withdraw(account1, money) && deposit(account2, money);\\n  }\\n\\n  bool deposit(int account, long long money) {\\n    if (!isValid(account))\\n      return false;\\n    balance[account - 1] += money;\\n    return true;\\n  }\\n\\n  bool withdraw(int account, long long money) {\\n    if (!isValid(account))\\n      return false;\\n    if (balance[account - 1] < money)\\n      return false;\\n    balance[account - 1] -= money;\\n    return true;\\n  }\\n\\n private:\\n  vector<long long> balance;\\n\\n  bool isValid(int account) {\\n    return 1 <= account && account <= balance.size();\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n  Bank(vector<long long>& balance) {\\n    this->balance=balance;\\n  }\\n\\n  bool transfer(int account1, int account2, long long money) {\\n    if (!isValid(account2))\\n      return false;\\n    return withdraw(account1, money) && deposit(account2, money);\\n  }\\n\\n  bool deposit(int account, long long money) {\\n    if (!isValid(account))\\n      return false;\\n    balance[account - 1] += money;\\n    return true;\\n  }\\n\\n  bool withdraw(int account, long long money) {\\n    if (!isValid(account))\\n      return false;\\n    if (balance[account - 1] < money)\\n      return false;\\n    balance[account - 1] -= money;\\n    return true;\\n  }\\n\\n private:\\n  vector<long long> balance;\\n\\n  bool isValid(int account) {\\n    return 1 <= account && account <= balance.size();\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3455072,
                "title": "beats-100-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\nvector<long long > v; \\n    Bank(vector<long long>& balance) \\n    { \\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n      v = balance;   \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) \\n    {   bool ch = false; \\n        if(account1<1 || account1>v.size())\\n        return false;\\n        if(account2<1 || account2>v.size())\\n        return false;\\n        if(v[account1-1]-money>=0)\\n        {\\n          ch = true; \\n          v[account1-1] -= money ; \\n          v[account2-1] += money ; \\n        }\\n        return ch;\\n\\n    }\\n    \\n    bool deposit(int account, long long money) \\n    {\\n        if(account<1 || account>v.size())\\n        return false;\\n        v[account-1] += money; \\n        return true; \\n    }\\n    \\n    bool withdraw(int account, long long money) \\n    {    \\n        bool ch = false;\\n        if(account<1 || account>v.size())\\n        return false; \\n        if(v[account-1]-money>=0)\\n        {\\n            ch =true; \\n            v[account-1] = v[account-1]-money; \\n        }\\n        return ch; \\n        \\n         \\n        \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\nvector<long long > v; \\n    Bank(vector<long long>& balance) \\n    { \\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);\\n      v = balance;   \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) \\n    {   bool ch = false; \\n        if(account1<1 || account1>v.size())\\n        return false;\\n        if(account2<1 || account2>v.size())\\n        return false;\\n        if(v[account1-1]-money>=0)\\n        {\\n          ch = true; \\n          v[account1-1] -= money ; \\n          v[account2-1] += money ; \\n        }\\n        return ch;\\n\\n    }\\n    \\n    bool deposit(int account, long long money) \\n    {\\n        if(account<1 || account>v.size())\\n        return false;\\n        v[account-1] += money; \\n        return true; \\n    }\\n    \\n    bool withdraw(int account, long long money) \\n    {    \\n        bool ch = false;\\n        if(account<1 || account>v.size())\\n        return false; \\n        if(v[account-1]-money>=0)\\n        {\\n            ch =true; \\n            v[account-1] = v[account-1]-money; \\n        }\\n        return ch; \\n        \\n         \\n        \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426816,
                "title": "c-simple-simulation-kinda-brute-force-solution-o-1-every-for-every-query",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>bal.size() or account2>bal.size())return false;\\n        if(bal[account1-1]>=money){\\n            bal[account2-1]+=money;\\n            bal[account1-1]-=money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>bal.size())return false;\\n        bal[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>bal.size())return false;\\n        if(bal[account-1]<money){\\n            return false;\\n        }\\n        bal[account-1]-=money;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Simulation"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>bal.size() or account2>bal.size())return false;\\n        if(bal[account1-1]>=money){\\n            bal[account2-1]+=money;\\n            bal[account1-1]-=money;\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>bal.size())return false;\\n        bal[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>bal.size())return false;\\n        if(bal[account-1]<money){\\n            return false;\\n        }\\n        bal[account-1]-=money;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3411467,
                "title": "easy-c-code-easily-understandable",
                "content": "\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> bal;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int a1, int a2, long long m) {\\n        \\n        if(a1 > n || a2 > n || bal[a1-1] < m) return false;\\n        \\n        bal[a1-1] -= m;\\n        bal[a2-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int a, long long m) {\\n        \\n        if(a > n) return false;\\n        \\n        bal[a-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int a, long long m) {\\n        \\n        if(a > n || bal[a-1] < m) return false;\\n        \\n        bal[a-1] -= m;\\n        \\n        return true;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> bal;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int a1, int a2, long long m) {\\n        \\n        if(a1 > n || a2 > n || bal[a1-1] < m) return false;\\n        \\n        bal[a1-1] -= m;\\n        bal[a2-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int a, long long m) {\\n        \\n        if(a > n) return false;\\n        \\n        bal[a-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int a, long long m) {\\n        \\n        if(a > n || bal[a-1] < m) return false;\\n        \\n        bal[a-1] -= m;\\n        \\n        return true;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404905,
                "title": "python3-made-simple",
                "content": "# Intuition and Approach\\n- The whole thing is pretty self-explanatory.\\n\\n# Complexity\\n- Time complexity:\\n1. `transfer` $$O(1)$$\\n2. `deposit` $$O(1)$$\\n3. `withdraw` $$O(1)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: list[int]):\\n        self.balance = balance\\n        self.number = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if (account1 > self.number) or (account2 > self.number):\\n            return False\\n        \\n        if money > self.balance[account1 - 1]:\\n            return False\\n        \\n        self.balance[account1 - 1] -= money\\n        self.balance[account2 - 1] += money\\n\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if (account > self.number):\\n            return False\\n\\n        self.balance[account - 1] += money\\n        return True \\n\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if (account > self.number):\\n            return False\\n        \\n        if money > self.balance[account - 1]:\\n            return False\\n\\n        self.balance[account - 1] -= money\\n        return True\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: list[int]):\\n        self.balance = balance\\n        self.number = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if (account1 > self.number) or (account2 > self.number):\\n            return False\\n        \\n        if money > self.balance[account1 - 1]:\\n            return False\\n        \\n        self.balance[account1 - 1] -= money\\n        self.balance[account2 - 1] += money\\n\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if (account > self.number):\\n            return False\\n\\n        self.balance[account - 1] += money\\n        return True \\n\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if (account > self.number):\\n            return False\\n        \\n        if money > self.balance[account - 1]:\\n            return False\\n\\n        self.balance[account - 1] -= money\\n        return True\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3404582,
                "title": "simple-bank-system-python-simple-solution-accepted",
                "content": "\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.n=len(balance)\\n        self.bank=balance\\n    \\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n       \\n\\n        if account1 <= self.n and account2 <= self.n and self.bank[account1-1]>=money:\\n            self.bank[account1-1]-=money\\n            self.bank[account2-1]+=money\\n            return True\\n        return False\\n\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= self.n:\\n            self.bank[account-1]+=money\\n            return True\\n        return False\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        \\n        if account <= self.n and self.bank[account-1] >=money:\\n            self.bank[account-1]-=money\\n            return True\\n        return False\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.n=len(balance)\\n        self.bank=balance\\n    \\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n       \\n\\n        if account1 <= self.n and account2 <= self.n and self.bank[account1-1]>=money:\\n            self.bank[account1-1]-=money\\n            self.bank[account2-1]+=money\\n            return True\\n        return False\\n\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= self.n:\\n            self.bank[account-1]+=money\\n            return True\\n        return False\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        \\n        if account <= self.n and self.bank[account-1] >=money:\\n            self.bank[account-1]-=money\\n            return True\\n        return False\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3387550,
                "title": "solution-following-the-instructions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n       self.balance = balance \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdraw(account1, money):\\n            if self.deposit(account2, money):\\n                return True\\n            self.deposit(account1, money)\\n\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1<= account <= len(self.balance):\\n            self.balance[account-1] += money\\n            return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if 1 <= account <= len(self.balance) and self.balance[account-1] >= money:\\n            self.balance[account-1] -= money\\n            return True\\n\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n       self.balance = balance \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdraw(account1, money):\\n            if self.deposit(account2, money):\\n                return True\\n            self.deposit(account1, money)\\n\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1<= account <= len(self.balance):\\n            self.balance[account-1] += money\\n            return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if 1 <= account <= len(self.balance) and self.balance[account-1] >= money:\\n            self.balance[account-1] -= money\\n            return True\\n\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3365863,
                "title": "c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\nint n;\\nvector<long long>balance;\\n    Bank(vector<long long>& balance) {\\n        n=balance.size();\\n        this->balance=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1<1 || account1>n || account2<1 || account2>n)\\n        return false;\\n        if (balance[account1-1]<money) return false;\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account<1 || account>n) return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account<1 || account>n) return false;\\n         if (balance[account-1]<money) return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\nint n;\\nvector<long long>balance;\\n    Bank(vector<long long>& balance) {\\n        n=balance.size();\\n        this->balance=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1<1 || account1>n || account2<1 || account2>n)\\n        return false;\\n        if (balance[account1-1]<money) return false;\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account<1 || account>n) return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account<1 || account>n) return false;\\n         if (balance[account-1]<money) return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3359269,
                "title": "easy-and-simple-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n    long[] tempAccount;\\n    public Bank(long[] balance) {\\n        tempAccount = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if( account2 <= tempAccount.length && withdraw(account1,money)){\\n            return deposit(account2, money);\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account <= tempAccount.length){\\n            tempAccount[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account <= tempAccount.length && tempAccount[account - 1] >= money){\\n            tempAccount[account -1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    long[] tempAccount;\\n    public Bank(long[] balance) {\\n        tempAccount = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if( account2 <= tempAccount.length && withdraw(account1,money)){\\n            return deposit(account2, money);\\n        }\\n        return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account <= tempAccount.length){\\n            tempAccount[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account <= tempAccount.length && tempAccount[account - 1] >= money){\\n            tempAccount[account -1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3357529,
                "title": "python-solution",
                "content": "\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.acc = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1-1>self.acc or account2-1>self.acc or self.balance[account1-1]<money:\\n            return False\\n        self.balance[account1-1]-=money\\n        self.balance[account2-1]+=money\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account-1>self.acc:\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account-1>self.acc or self.balance[account-1]<money:\\n            return False\\n        self.balance[account-1]-=money\\n        return True\\n\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.acc = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1-1>self.acc or account2-1>self.acc or self.balance[account1-1]<money:\\n            return False\\n        self.balance[account1-1]-=money\\n        self.balance[account2-1]+=money\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account-1>self.acc:\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account-1>self.acc or self.balance[account-1]<money:\\n            return False\\n        self.balance[account-1]-=money\\n        return True\\n\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3352752,
                "title": "simple-hashmap-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n    unordered_map<long long,long long>m;\\n    Bank(vector<long long>& balance) {\\n        for(int i=0;i<balance.size();i++)\\n        {\\n            m[i+1]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(m.find(account1)!=m.end()&&m.find(account2)!=m.end()&&m[account1]>=money)\\n        {\\n            m[account1]-=money;\\n           m[account2]+=money;\\n           return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(m.find(account)!=m.end())\\n        {\\n            m[account]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(m.find(account)!=m.end()&&m[account]>=money)\\n        {\\n            m[account]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    unordered_map<long long,long long>m;\\n    Bank(vector<long long>& balance) {\\n        for(int i=0;i<balance.size();i++)\\n        {\\n            m[i+1]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(m.find(account1)!=m.end()&&m.find(account2)!=m.end()&&m[account1]>=money)\\n        {\\n            m[account1]-=money;\\n           m[account2]+=money;\\n           return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(m.find(account)!=m.end())\\n        {\\n            m[account]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(m.find(account)!=m.end()&&m[account]>=money)\\n        {\\n            m[account]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3288704,
                "title": "accepted-swift",
                "content": "```\\nclass Bank {\\n\\n    private var blnc: [Int]\\n\\n    init(_ b: [Int]) {\\n        blnc = [0] + b\\n    }\\n    \\n    func transfer(_ a: Int, _ b: Int, _ m: Int) -> Bool {\\n        guard a > 0, a < blnc.count, b > 0, b < blnc.count, blnc[a] >= m else { return false }\\n        blnc[a] -= m\\n        blnc[b] += m\\n        return true\\n    }\\n    \\n    func deposit(_ a: Int, _ m: Int) -> Bool {\\n        guard a > 0, a < blnc.count else { return false }\\n        blnc[a] += m\\n        return true\\n    }\\n    \\n    func withdraw(_ a: Int, _ m: Int) -> Bool {\\n        guard a > 0, a < blnc.count, blnc[a] >= m else { return false }\\n        blnc[a] -= m\\n        return true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Bank {\\n\\n    private var blnc: [Int]\\n\\n    init(_ b: [Int]) {\\n        blnc = [0] + b\\n    }\\n    \\n    func transfer(_ a: Int, _ b: Int, _ m: Int) -> Bool {\\n        guard a > 0, a < blnc.count, b > 0, b < blnc.count, blnc[a] >= m else { return false }\\n        blnc[a] -= m\\n        blnc[b] += m\\n        return true\\n    }\\n    \\n    func deposit(_ a: Int, _ m: Int) -> Bool {\\n        guard a > 0, a < blnc.count else { return false }\\n        blnc[a] += m\\n        return true\\n    }\\n    \\n    func withdraw(_ a: Int, _ m: Int) -> Bool {\\n        guard a > 0, a < blnc.count, blnc[a] >= m else { return false }\\n        blnc[a] -= m\\n        return true\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3280813,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n\\n    vector<long long> arr;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        n = balance.size();\\n        for(auto x:balance){\\n\\n            arr.push_back(x);\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        bool flag = false;\\n        if(account1 >= 1 && account1 <= n && account2 >= 1 && account2 <= n){\\n\\n\\n            if(arr[account1-1] >= money){\\n\\n                arr[account1-1] -= money;\\n                arr[account2-1] += money;\\n\\n                flag = true;\\n            }\\n        }\\n\\n        return flag;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        \\n        bool flag = false;\\n        if(account >= 1 && account <= n){\\n\\n            arr[account-1] += money;\\n            flag = true;\\n            \\n        }\\n\\n        return flag;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n\\n        bool flag = false;\\n        if(account >= 1 && account <= n){\\n\\n            if(arr[account-1] >= money){\\n\\n                arr[account-1] -= money;\\n                flag = true;\\n            }\\n        }\\n\\n        return flag;\\n        \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n\\n    vector<long long> arr;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        n = balance.size();\\n        for(auto x:balance){\\n\\n            arr.push_back(x);\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        bool flag = false;\\n        if(account1 >= 1 && account1 <= n && account2 >= 1 && account2 <= n){\\n\\n\\n            if(arr[account1-1] >= money){\\n\\n                arr[account1-1] -= money;\\n                arr[account2-1] += money;\\n\\n                flag = true;\\n            }\\n        }\\n\\n        return flag;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        \\n        bool flag = false;\\n        if(account >= 1 && account <= n){\\n\\n            arr[account-1] += money;\\n            flag = true;\\n            \\n        }\\n\\n        return flag;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n\\n        bool flag = false;\\n        if(account >= 1 && account <= n){\\n\\n            if(arr[account-1] >= money){\\n\\n                arr[account-1] -= money;\\n                flag = true;\\n            }\\n        }\\n\\n        return flag;\\n        \\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3275093,
                "title": "super-simple-c-solution",
                "content": "# Code\\n```\\nclass Bank \\n{\\npublic:\\n    int n;\\n    vector<long long> balance;\\n    Bank(vector<long long>& b) \\n    {\\n        balance=b;\\n        n=balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) \\n    {\\n        if(account1>=1 && account1<=n && account2>=1 && account2<=n && balance[account1-1]>=money)\\n        {\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) \\n    {\\n        if(account>=1 && account<=n)\\n        {\\n            balance[account-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) \\n    {\\n        if(account>=1 && account<=n && balance[account-1]>=money)\\n        {\\n            balance[account-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank \\n{\\npublic:\\n    int n;\\n    vector<long long> balance;\\n    Bank(vector<long long>& b) \\n    {\\n        balance=b;\\n        n=balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) \\n    {\\n        if(account1>=1 && account1<=n && account2>=1 && account2<=n && balance[account1-1]>=money)\\n        {\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) \\n    {\\n        if(account>=1 && account<=n)\\n        {\\n            balance[account-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) \\n    {\\n        if(account>=1 && account<=n && balance[account-1]>=money)\\n        {\\n            balance[account-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3253803,
                "title": "golang-346-ms-33-4-mb",
                "content": "```\\ntype Bank struct {\\n\\tbalance []int64\\n}\\n\\nfunc (b *Bank) accountExist(account int) bool {\\n\\treturn account >= 1 && account <= len(b.balance)\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n\\treturn Bank{balance: balance}\\n}\\n\\nfunc (b *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n\\tif b.accountExist(account1) && b.balance[account1-1] >= money && b.accountExist(account2) {\\n\\t\\tb.balance[account1-1] -= money\\n\\t\\tb.balance[account2-1] += money\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n\\nfunc (b *Bank) Deposit(account int, money int64) bool {\\n\\tif b.accountExist(account) {\\n\\t\\tb.balance[account-1] += money\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n\\nfunc (b *Bank) Withdraw(account int, money int64) bool {\\n\\tif b.accountExist(account) && b.balance[account-1] >= money {\\n\\t\\tb.balance[account-1] -= money\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Bank struct {\\n\\tbalance []int64\\n}\\n\\nfunc (b *Bank) accountExist(account int) bool {\\n\\treturn account >= 1 && account <= len(b.balance)\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n\\treturn Bank{balance: balance}\\n}\\n\\nfunc (b *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n\\tif b.accountExist(account1) && b.balance[account1-1] >= money && b.accountExist(account2) {\\n\\t\\tb.balance[account1-1] -= money\\n\\t\\tb.balance[account2-1] += money\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n\\nfunc (b *Bank) Deposit(account int, money int64) bool {\\n\\tif b.accountExist(account) {\\n\\t\\tb.balance[account-1] += money\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n\\nfunc (b *Bank) Withdraw(account int, money int64) bool {\\n\\tif b.accountExist(account) && b.balance[account-1] >= money {\\n\\t\\tb.balance[account-1] -= money\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3253672,
                "title": "javascript-logic",
                "content": "# Code\\n```\\nvar Bank = function(balance) {\\n    this.arr = balance;\\n    this.n = balance.length;\\n};\\nBank.prototype.transfer = function(account1, account2, money) {\\n    if (this.numCheck(account1) && this.numCheck(account2) && this.arr[account1 - 1] >= money) {\\n        this.arr[account1 - 1] -= money;\\n        this.arr[account2 - 1] += money;\\n        return true;\\n    }\\n    return false;\\n};\\nBank.prototype.numCheck = function(account) {\\n    return account > 0 && account <= this.n;\\n};\\nBank.prototype.deposit = function(account, money) {\\n    if (this.numCheck(account)) {\\n        this.arr[account - 1] += money;\\n        return true;\\n    }\\n    return false;\\n};\\nBank.prototype.withdraw = function(account, money) {\\n    if (this.numCheck(account) && this.arr[account - 1] >= money) {\\n        this.arr[account - 1] -= money;\\n        return true;\\n    }\\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar Bank = function(balance) {\\n    this.arr = balance;\\n    this.n = balance.length;\\n};\\nBank.prototype.transfer = function(account1, account2, money) {\\n    if (this.numCheck(account1) && this.numCheck(account2) && this.arr[account1 - 1] >= money) {\\n        this.arr[account1 - 1] -= money;\\n        this.arr[account2 - 1] += money;\\n        return true;\\n    }\\n    return false;\\n};\\nBank.prototype.numCheck = function(account) {\\n    return account > 0 && account <= this.n;\\n};\\nBank.prototype.deposit = function(account, money) {\\n    if (this.numCheck(account)) {\\n        this.arr[account - 1] += money;\\n        return true;\\n    }\\n    return false;\\n};\\nBank.prototype.withdraw = function(account, money) {\\n    if (this.numCheck(account) && this.arr[account - 1] >= money) {\\n        this.arr[account - 1] -= money;\\n        return true;\\n    }\\n    return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3227859,
                "title": "python-eafp-try-except-dry",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n> EAFP\\nEasier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many `try` and `except` statements. The technique contrasts with the LBYL style common to many other languages such as C.\\n\\nhttps://docs.python.org/dev/glossary.html#term-EAFP\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.B = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdraw(account1, money):\\n            (ok := self.deposit(account2, money)) or self.deposit(account1, money)\\n            return ok\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        try:\\n            self.B[account-1] += money\\n            return True\\n        except:\\n            pass\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        try:\\n            if (b := self.B[account-1] - money) >= 0:\\n                self.B[account-1] = b\\n                return True\\n        except:\\n            pass\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.B = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdraw(account1, money):\\n            (ok := self.deposit(account2, money)) or self.deposit(account1, money)\\n            return ok\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        try:\\n            self.B[account-1] += money\\n            return True\\n        except:\\n            pass\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        try:\\n            if (b := self.B[account-1] - money) >= 0:\\n                self.B[account-1] = b\\n                return True\\n        except:\\n            pass\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3205028,
                "title": "c-faster-than-85-simple-math-calculation-clean-code",
                "content": "\\n\\n# Code\\n# PLEASE DO UPVOTE!!!!\\n```\\nclass Bank {\\npublic:\\n\\nlong long n = 0;\\nvector<long long>bal;\\n    Bank(vector<long long>& balance) {\\n        n = balance.size();\\n        bal.push_back(0);\\n        for(auto it : balance) bal.push_back(it);\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        if(account1>n||account2>n || bal[account1] < money) return false;\\n        bal[account1]-=money;\\n        bal[account2]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>n) return false;\\n        bal[account]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n\\n        if(account>n || bal[account] < money) return false;\\n        bal[account]-=money;\\n        return true; \\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n\\nlong long n = 0;\\nvector<long long>bal;\\n    Bank(vector<long long>& balance) {\\n        n = balance.size();\\n        bal.push_back(0);\\n        for(auto it : balance) bal.push_back(it);\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        if(account1>n||account2>n || bal[account1] < money) return false;\\n        bal[account1]-=money;\\n        bal[account2]+=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>n) return false;\\n        bal[account]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n\\n        if(account>n || bal[account] < money) return false;\\n        bal[account]-=money;\\n        return true; \\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3183972,
                "title": "c-simple-solution",
                "content": "# Code\\n```\\nclass Bank {\\n    vector<long long> balance;\\npublic:\\n    Bank(vector<long long>& _balance) : balance(_balance) {\\n        balance.insert(balance.begin(), 0L);\\n    }\\n\\n    bool check(int account) const {\\n        return account >= 1 && account < balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(!check(account1) || !check(account2) || balance[account1] < money)\\n            return false;\\n        \\n        balance[account1] -= money; balance[account2] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(!check(account))\\n            return false;\\n\\n        balance[account] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(!check(account) || balance[account] < money)\\n            return false;\\n        \\n        balance[account] -= money;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\n    vector<long long> balance;\\npublic:\\n    Bank(vector<long long>& _balance) : balance(_balance) {\\n        balance.insert(balance.begin(), 0L);\\n    }\\n\\n    bool check(int account) const {\\n        return account >= 1 && account < balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(!check(account1) || !check(account2) || balance[account1] < money)\\n            return false;\\n        \\n        balance[account1] -= money; balance[account2] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(!check(account))\\n            return false;\\n\\n        balance[account] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(!check(account) || balance[account] < money)\\n            return false;\\n        \\n        balance[account] -= money;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3164304,
                "title": "easiest-solution-c-only-if-else-conditions-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n    vector<long long> vec;\\n    Bank(){\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n    }\\n    Bank(vector<long long>& balance) {\\n        vec=balance;\\n    }\\n    bool transfer(int a1, int a2, long long money) {\\n        if(a1>=1 && a1<=vec.size() && a2<=vec.size() && a2>=1 && vec[a1-1]>=money){\\n            vec[a1-1]-=money;\\n            vec[a2-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool deposit(int a, long long money) {\\n        if(a>=1 && a<=vec.size()){\\n            vec[a-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool withdraw(int a, long long money) {\\n        if(a>=1 && a<=vec.size() && vec[a-1]>=money){\\n            vec[a-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> vec;\\n    Bank(){\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n    }\\n    Bank(vector<long long>& balance) {\\n        vec=balance;\\n    }\\n    bool transfer(int a1, int a2, long long money) {\\n        if(a1>=1 && a1<=vec.size() && a2<=vec.size() && a2>=1 && vec[a1-1]>=money){\\n            vec[a1-1]-=money;\\n            vec[a2-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool deposit(int a, long long money) {\\n        if(a>=1 && a<=vec.size()){\\n            vec[a-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    bool withdraw(int a, long long money) {\\n        if(a>=1 && a<=vec.size() && vec[a-1]>=money){\\n            vec[a-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3136363,
                "title": "short-and-concise-c-solution-with-vectors",
                "content": "# Code\\n```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> vec;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        vec = balance;\\n        n = vec.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1 > n || account2 > n || vec[account1-1] < money) return false;\\n        vec[account1-1] -= money;\\n        vec[account2-1] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account > n) return false;\\n        vec[account-1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account > n || vec[account-1] < money) return false;\\n        vec[account-1] -= money;\\n        return true;\\n        \\n    }\\n};\\n\\n//        PLEASE UPVOTE IF THE ANSWER WAS HELPFUL...THANK YOU\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> vec;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        vec = balance;\\n        n = vec.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1 > n || account2 > n || vec[account1-1] < money) return false;\\n        vec[account1-1] -= money;\\n        vec[account2-1] += money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account > n) return false;\\n        vec[account-1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account > n || vec[account-1] < money) return false;\\n        vec[account-1] -= money;\\n        return true;\\n        \\n    }\\n};\\n\\n//        PLEASE UPVOTE IF THE ANSWER WAS HELPFUL...THANK YOU\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3106711,
                "title": "limited-premium-kotlin-solution",
                "content": "\\n```\\nclass Bank(val balance: LongArray) {\\n    fun transfer(account1: Int, account2: Int, money: Long): Boolean {\\n        if (account1 < 1 || account1 > balance.size || account2 < 1 || account2 > balance.size) {\\n            return false\\n        }\\n        if (balance[account1-1] < money) {\\n            return false\\n        }\\n        balance[account1-1] -= money\\n        balance[account2-1] += money\\n        return true\\n    }\\n    \\n    fun deposit(account: Int, money: Long): Boolean {\\n        if (account < 1 || account > balance.size) {\\n            return false\\n        }\\n        balance[account-1] += money\\n        return true\\n    }\\n    \\n    fun withdraw(account: Int, money: Long): Boolean {\\n        if (account < 1 || account > balance.size) {\\n            return false\\n        }\\n        if (balance[account-1] < money) {\\n            return false\\n        }\\n        balance[account-1] -= money\\n        return true\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Bank(val balance: LongArray) {\\n    fun transfer(account1: Int, account2: Int, money: Long): Boolean {\\n        if (account1 < 1 || account1 > balance.size || account2 < 1 || account2 > balance.size) {\\n            return false\\n        }\\n        if (balance[account1-1] < money) {\\n            return false\\n        }\\n        balance[account1-1] -= money\\n        balance[account2-1] += money\\n        return true\\n    }\\n    \\n    fun deposit(account: Int, money: Long): Boolean {\\n        if (account < 1 || account > balance.size) {\\n            return false\\n        }\\n        balance[account-1] += money\\n        return true\\n    }\\n    \\n    fun withdraw(account: Int, money: Long): Boolean {\\n        if (account < 1 || account > balance.size) {\\n            return false\\n        }\\n        if (balance[account-1] < money) {\\n            return false\\n        }\\n        balance[account-1] -= money\\n        return true\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3095335,
                "title": "simple-solution-using-java",
                "content": "# Code\\n```\\nclass Bank {\\n    long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 <= balance.length && account2 <= balance.length) {\\n            if (balance[account1 - 1] >= money) {\\n                balance[account1 - 1] = balance[account1 - 1] - money;\\n                balance[account2 - 1] = balance[account2 - 1] + money;\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return false;\\n        }\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account <= balance.length) {\\n            balance[account - 1] = balance[account - 1] + money;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account <= balance.length) {\\n            if (balance[account - 1] >= money) {\\n                balance[account - 1] = balance[account - 1] - money;\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 <= balance.length && account2 <= balance.length) {\\n            if (balance[account1 - 1] >= money) {\\n                balance[account1 - 1] = balance[account1 - 1] - money;\\n                balance[account2 - 1] = balance[account2 - 1] + money;\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return false;\\n        }\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account <= balance.length) {\\n            balance[account - 1] = balance[account - 1] + money;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account <= balance.length) {\\n            if (balance[account - 1] >= money) {\\n                balance[account - 1] = balance[account - 1] - money;\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3073535,
                "title": "python-solution-easy-to-understand",
                "content": "# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance):\\n        self.balances = balance\\n        self.accounts = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not 1<=account1<=self.accounts or not 1<=account2<=self.accounts: return False\\n        if self.withdraw(account1, money) and self.deposit(account2, money):\\n            return True\\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.accounts: return False\\n        self.balances[account-1] += money\\n        return True\\n    \\n        \\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.accounts or self.balances[account-1] < money: return False\\n        self.balances[account-1] -= money\\n        return True\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance):\\n        self.balances = balance\\n        self.accounts = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not 1<=account1<=self.accounts or not 1<=account2<=self.accounts: return False\\n        if self.withdraw(account1, money) and self.deposit(account2, money):\\n            return True\\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.accounts: return False\\n        self.balances[account-1] += money\\n        return True\\n    \\n        \\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.accounts or self.balances[account-1] < money: return False\\n        self.balances[account-1] -= money\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3057616,
                "title": "python-easy-solution-o-1",
                "content": "# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.n = len(balance)\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not(1<=account1<=self.n) or not(1<=account2<=self.n): return False\\n        if self.balance[account1-1] >= money:\\n            self.balance[account1-1] -= money\\n            self.balance[account2-1] += money\\n            return True\\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not(1<=account<=self.n): return False\\n        self.balance[account-1] += money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not(1<=account<=self.n): return False\\n        if self.balance[account-1] < money: return False\\n        self.balance[account-1] -= money\\n        return True\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n        self.n = len(balance)\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not(1<=account1<=self.n) or not(1<=account2<=self.n): return False\\n        if self.balance[account1-1] >= money:\\n            self.balance[account1-1] -= money\\n            self.balance[account2-1] += money\\n            return True\\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not(1<=account<=self.n): return False\\n        self.balance[account-1] += money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not(1<=account<=self.n): return False\\n        if self.balance[account-1] < money: return False\\n        self.balance[account-1] -= money\\n        return True\\n        \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3055373,
                "title": "easies-solution-using-vector-only-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\nvector<long long >bnk;\\nlong long n;\\n    Bank(vector<long long>& balance) {\\n        bnk=balance;\\n        n=balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>n || account2>n) return false;\\n        if(bnk[account1-1]>=money){\\n            bnk[account1-1]-=money;\\n            bnk[account2-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>n) return false;\\n        bnk[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>n) return false;\\n        if(bnk[account-1]>=money){\\n            bnk[account-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\nvector<long long >bnk;\\nlong long n;\\n    Bank(vector<long long>& balance) {\\n        bnk=balance;\\n        n=balance.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(account1>n || account2>n) return false;\\n        if(bnk[account1-1]>=money){\\n            bnk[account1-1]-=money;\\n            bnk[account2-1]+=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>n) return false;\\n        bnk[account-1]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>n) return false;\\n        if(bnk[account-1]>=money){\\n            bnk[account-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3053085,
                "title": "easy-solution",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> b;\\n    Bank(vector<long long>& balance) {\\n        b=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(b.size()<account1 || b.size()<account2)\\n        {\\n            return false;\\n        }\\n        if(b[account1-1]>=money)\\n        {\\n            b[account1-1]=b[account1-1]-money;\\n            b[account2-1]=b[account2-1]+money;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(b.size()>=account)\\n        {\\n             b[account-1]=b[account-1]+money;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(b.size()>=account)\\n        {\\n            if(b[account-1]>=money)\\n            {\\n                b[account-1]=b[account-1]-money;\\n                return true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> b;\\n    Bank(vector<long long>& balance) {\\n        b=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(b.size()<account1 || b.size()<account2)\\n        {\\n            return false;\\n        }\\n        if(b[account1-1]>=money)\\n        {\\n            b[account1-1]=b[account1-1]-money;\\n            b[account2-1]=b[account2-1]+money;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(b.size()>=account)\\n        {\\n             b[account-1]=b[account-1]+money;\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(b.size()>=account)\\n        {\\n            if(b[account-1]>=money)\\n            {\\n                b[account-1]=b[account-1]-money;\\n                return true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046661,
                "title": "python-solution-creating-world-best-bank",
                "content": "# So basicaly just whats told. Before making any trasaction check if the account numbers are legit and also resue the deposit method again in the transfer method. \\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.bank_balance = balance\\n        l1 = len(self.bank_balance)\\n        self.set1 = set(list(range(1,l1+1)))\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 in self.set1 and account2 in self.set1:\\n            if self.bank_balance[account1-1]>=money:\\n                self.bank_balance[account1-1] = self.bank_balance[account1-1] - money\\n                return self.deposit(account2,money)\\n            else:\\n                return False\\n        else:\\n            return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account in self.set1:\\n            self.bank_balance[account-1] = self.bank_balance[account-1]+money\\n            return True\\n        else:\\n            return False\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account in self.set1:\\n            if self.bank_balance[account-1]>=money:\\n                self.bank_balance[account-1] = self.bank_balance[account-1]-money\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.bank_balance = balance\\n        l1 = len(self.bank_balance)\\n        self.set1 = set(list(range(1,l1+1)))\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 in self.set1 and account2 in self.set1:\\n            if self.bank_balance[account1-1]>=money:\\n                self.bank_balance[account1-1] = self.bank_balance[account1-1] - money\\n                return self.deposit(account2,money)\\n            else:\\n                return False\\n        else:\\n            return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account in self.set1:\\n            self.bank_balance[account-1] = self.bank_balance[account-1]+money\\n            return True\\n        else:\\n            return False\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account in self.set1:\\n            if self.bank_balance[account-1]>=money:\\n                self.bank_balance[account-1] = self.bank_balance[account-1]-money\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3035064,
                "title": "golang-solution",
                "content": "\\n# Code\\n```\\ntype Bank struct {\\n    balance []int64\\n    accountLen int\\n}\\n\\n\\nfunc Constructor(balance []int64) Bank {\\n    l := len(balance)\\n    return Bank{balance, l}\\n}\\n\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n    if account1 > this.accountLen || account2 > this.accountLen || this.balance[account1-1] - money < 0 {\\n        return false\\n    }\\n    this.balance[account1-1] -= money\\n    this.balance[account2-1] += money\\n    return true\\n}\\n\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n    if account > this.accountLen {return false}\\n    this.balance[account-1] += money\\n    return true\\n}\\n\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n    if this.accountLen < account || this.balance[account-1] < money {\\n        return false\\n    }\\n    this.balance[account-1] -= money\\n    return true\\n}\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * obj := Constructor(balance);\\n * param_1 := obj.Transfer(account1,account2,money);\\n * param_2 := obj.Deposit(account,money);\\n * param_3 := obj.Withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\ntype Bank struct {\\n    balance []int64\\n    accountLen int\\n}\\n\\n\\nfunc Constructor(balance []int64) Bank {\\n    l := len(balance)\\n    return Bank{balance, l}\\n}\\n\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n    if account1 > this.accountLen || account2 > this.accountLen || this.balance[account1-1] - money < 0 {\\n        return false\\n    }\\n    this.balance[account1-1] -= money\\n    this.balance[account2-1] += money\\n    return true\\n}\\n\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n    if account > this.accountLen {return false}\\n    this.balance[account-1] += money\\n    return true\\n}\\n\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n    if this.accountLen < account || this.balance[account-1] < money {\\n        return false\\n    }\\n    this.balance[account-1] -= money\\n    return true\\n}\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * obj := Constructor(balance);\\n * param_1 := obj.Transfer(account1,account2,money);\\n * param_2 := obj.Deposit(account,money);\\n * param_3 := obj.Withdraw(account,money);\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3033589,
                "title": "simple-python",
                "content": "# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance=balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not self._isValid(account2):\\n             return False\\n        return self.withdraw(account1,money) and self.deposit(account2,money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not self._isValid(account):\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not self._isValid(account):\\n            return False\\n        if self.balance[account-1]<money:\\n            return False\\n        self.balance[account-1]-=money\\n        return True\\n\\n    def _isValid(self, account: int) -> bool:\\n        return 1 <=account<=len(self.balance)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance=balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not self._isValid(account2):\\n             return False\\n        return self.withdraw(account1,money) and self.deposit(account2,money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not self._isValid(account):\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not self._isValid(account):\\n            return False\\n        if self.balance[account-1]<money:\\n            return False\\n        self.balance[account-1]-=money\\n        return True\\n\\n    def _isValid(self, account: int) -> bool:\\n        return 1 <=account<=len(self.balance)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2973569,
                "title": "c",
                "content": "```\\n\\ntypedef struct {\\n    unsigned long long * acMoney;\\n    int size;\\n} Bank;\\n\\nbool valid(Bank* bank, int account) {\\n    return account > 0 && account <= bank->size;\\n}\\nBank* bankCreate(long long* balance, int balanceSize) {\\n    Bank* ret = malloc(sizeof(Bank));\\n    ret->size = balanceSize ;\\n    ret->acMoney = malloc(balanceSize   * sizeof(unsigned long long));\\n    for(int i = 0; i < balanceSize; i++){\\n        ret->acMoney[i] = balance[i];\\n    }\\n    return ret;\\n}\\n\\nbool bankTransfer(Bank* obj, int account1, int account2, long long money) {\\n    if( !valid(obj, account1) ||  !valid(obj, account2) )\\n        return false;\\n    if(obj->acMoney[account1-1] < money)\\n        return false;\\n    obj->acMoney[account1-1] -= money;\\n    obj->acMoney[account2-1] += money;\\n    return true;\\n}\\n\\nbool bankDeposit(Bank* obj, int account, long long money) {\\n    if(!valid(obj, account) )\\n        return false;\\n    obj->acMoney[account-1] += money;\\n    return true;\\n}\\n\\nbool bankWithdraw(Bank* obj, int account, long long money) {\\n    if(!valid(obj, account) )\\n        return false;\\n    if(obj->acMoney[account-1] < money)\\n        return false;  \\n    obj->acMoney[account-1] -= money;\\n    return true;\\n}\\n\\nvoid bankFree(Bank* obj) {\\n    free(obj->acMoney);\\n    free(obj);\\n    \\n}\\n\\n/**\\n * Your Bank struct will be instantiated and called as such:\\n * Bank* obj = bankCreate(balance, balanceSize);\\n * bool param_1 = bankTransfer(obj, account1, account2, money);\\n \\n * bool param_2 = bankDeposit(obj, account, money);\\n \\n * bool param_3 = bankWithdraw(obj, account, money);\\n \\n * bankFree(obj);\\n*/\\n```",
                "solutionTags": [],
                "code": "```\\n\\ntypedef struct {\\n    unsigned long long * acMoney;\\n    int size;\\n} Bank;\\n\\nbool valid(Bank* bank, int account) {\\n    return account > 0 && account <= bank->size;\\n}\\nBank* bankCreate(long long* balance, int balanceSize) {\\n    Bank* ret = malloc(sizeof(Bank));\\n    ret->size = balanceSize ;\\n    ret->acMoney = malloc(balanceSize   * sizeof(unsigned long long));\\n    for(int i = 0; i < balanceSize; i++){\\n        ret->acMoney[i] = balance[i];\\n    }\\n    return ret;\\n}\\n\\nbool bankTransfer(Bank* obj, int account1, int account2, long long money) {\\n    if( !valid(obj, account1) ||  !valid(obj, account2) )\\n        return false;\\n    if(obj->acMoney[account1-1] < money)\\n        return false;\\n    obj->acMoney[account1-1] -= money;\\n    obj->acMoney[account2-1] += money;\\n    return true;\\n}\\n\\nbool bankDeposit(Bank* obj, int account, long long money) {\\n    if(!valid(obj, account) )\\n        return false;\\n    obj->acMoney[account-1] += money;\\n    return true;\\n}\\n\\nbool bankWithdraw(Bank* obj, int account, long long money) {\\n    if(!valid(obj, account) )\\n        return false;\\n    if(obj->acMoney[account-1] < money)\\n        return false;  \\n    obj->acMoney[account-1] -= money;\\n    return true;\\n}\\n\\nvoid bankFree(Bank* obj) {\\n    free(obj->acMoney);\\n    free(obj);\\n    \\n}\\n\\n/**\\n * Your Bank struct will be instantiated and called as such:\\n * Bank* obj = bankCreate(balance, balanceSize);\\n * bool param_1 = bankTransfer(obj, account1, account2, money);\\n \\n * bool param_2 = bankDeposit(obj, account, money);\\n \\n * bool param_3 = bankWithdraw(obj, account, money);\\n \\n * bankFree(obj);\\n*/\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2962498,
                "title": "array-java-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Bank {\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.balance=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1 || account1>balance.length) return false;\\n        if(account2<1 || account2>balance.length) return false;\\n        if(money>balance[account1-1]) return false;\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>balance.length) return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1 || account>balance.length) return false;\\n        if(money>balance[account-1]) return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Math",
                    "Design"
                ],
                "code": "```\\nclass Bank {\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.balance=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1 || account1>balance.length) return false;\\n        if(account2<1 || account2>balance.length) return false;\\n        if(money>balance[account1-1]) return false;\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>balance.length) return false;\\n        balance[account-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1 || account>balance.length) return false;\\n        if(money>balance[account-1]) return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2958928,
                "title": "golang-array",
                "content": "# Code\\n```\\ntype Bank struct {\\n    balance []int64\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n    return Bank {\\n        balance: balance,\\n    }\\n}\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n    var n int = len(this.balance)\\n    if account1 <= n && account2 <= n {\\n        if this.balance[account1 - 1] < money {\\n            return false\\n        } \\n        this.balance[account1 - 1] -= money\\n        this.balance[account2 - 1] += money\\n        return true\\n    }\\n    return false\\n}\\n\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n    var n int = len(this.balance)\\n    if account <= n {\\n        this.balance[account - 1] += money\\n        return true\\n    }\\n    return false\\n}\\n\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n    var n int = len(this.balance)\\n    if account <= n {\\n        if this.balance[account - 1] < money {\\n            return false\\n        } \\n        this.balance[account - 1] -= money\\n        return true\\n    }\\n    return false\\n}\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * obj := Constructor(balance);\\n * param_1 := obj.Transfer(account1,account2,money);\\n * param_2 := obj.Deposit(account,money);\\n * param_3 := obj.Withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Go",
                    "Array",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\ntype Bank struct {\\n    balance []int64\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n    return Bank {\\n        balance: balance,\\n    }\\n}\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n    var n int = len(this.balance)\\n    if account1 <= n && account2 <= n {\\n        if this.balance[account1 - 1] < money {\\n            return false\\n        } \\n        this.balance[account1 - 1] -= money\\n        this.balance[account2 - 1] += money\\n        return true\\n    }\\n    return false\\n}\\n\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n    var n int = len(this.balance)\\n    if account <= n {\\n        this.balance[account - 1] += money\\n        return true\\n    }\\n    return false\\n}\\n\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n    var n int = len(this.balance)\\n    if account <= n {\\n        if this.balance[account - 1] < money {\\n            return false\\n        } \\n        this.balance[account - 1] -= money\\n        return true\\n    }\\n    return false\\n}\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * obj := Constructor(balance);\\n * param_1 := obj.Transfer(account1,account2,money);\\n * param_2 := obj.Deposit(account,money);\\n * param_3 := obj.Withdraw(account,money);\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2958884,
                "title": "c-array",
                "content": "# Code\\n```\\nclass Bank {\\n    vector<long long> balance;\\npublic:\\n    Bank(vector<long long>& balance) {\\n        this -> balance = balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        int n = balance.size();\\n        if(account1 <= n && account2 <= n) {\\n            if(balance[account1 - 1] < money) return false;\\n            balance[account1 - 1] -= money;\\n            balance[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        int n = balance.size();\\n        if(account <= n) {\\n            balance[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        int n = balance.size();\\n        if(account <= n) {\\n            if(balance[account - 1] < money) return false;\\n            balance[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\nclass Bank {\\n    vector<long long> balance;\\npublic:\\n    Bank(vector<long long>& balance) {\\n        this -> balance = balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        int n = balance.size();\\n        if(account1 <= n && account2 <= n) {\\n            if(balance[account1 - 1] < money) return false;\\n            balance[account1 - 1] -= money;\\n            balance[account2 - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        int n = balance.size();\\n        if(account <= n) {\\n            balance[account - 1] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        int n = balance.size();\\n        if(account <= n) {\\n            if(balance[account - 1] < money) return false;\\n            balance[account - 1] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2952526,
                "title": "beats-100-o-1-time-and-space",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Bank{\\n\\n\\n    int n=0;\\n\\n    long[]balance=null;\\n\\n    public Bank(long[] bal) {\\n\\n    n=bal.length;\\n\\n    balance=bal;\\n        \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n\\n\\n    if(account1>n||account2>n||balance[account1-1]<money){\\n        return false;\\n    }\\n    \\n    balance[account1-1]-=money;\\n    balance[account2-1]+=money;\\n    return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n    if(account>n)return false;\\n    balance[account-1]+=money;\\n    return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n    \\n    if(account>n||balance[account-1]<money)return false;\\n\\n    balance[account-1]-=money;\\n\\n    return true;\\n\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\nclass Bank{\\n\\n\\n    int n=0;\\n\\n    long[]balance=null;\\n\\n    public Bank(long[] bal) {\\n\\n    n=bal.length;\\n\\n    balance=bal;\\n        \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n\\n\\n    if(account1>n||account2>n||balance[account1-1]<money){\\n        return false;\\n    }\\n    \\n    balance[account1-1]-=money;\\n    balance[account2-1]+=money;\\n    return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n    if(account>n)return false;\\n    balance[account-1]+=money;\\n    return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n    \\n    if(account>n||balance[account-1]<money)return false;\\n\\n    balance[account-1]-=money;\\n\\n    return true;\\n\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2944393,
                "title": "easy-python-solution-lists",
                "content": "# Code\\n```\\nclass Bank:\\n    def __init__(self, balance: List[int]):\\n        self.myBank = balance\\n        self.totalAcc = len(self.myBank)\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 <= self.totalAcc  and account2 <= self.totalAcc:\\n            if self.myBank[account1-1] >= money:\\n                self.myBank[account1-1] -= money\\n                self.myBank[account2-1] += money\\n                return True\\n        return False\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= self.totalAcc:\\n            self.myBank[account-1] += money\\n            return True\\n        return False\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account <= self.totalAcc:\\n            if self.myBank[account-1] >= money:\\n                self.myBank[account-1] -= money\\n                return True\\n        return False                \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Design",
                    "Simulation"
                ],
                "code": "```\\nclass Bank:\\n    def __init__(self, balance: List[int]):\\n        self.myBank = balance\\n        self.totalAcc = len(self.myBank)\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 <= self.totalAcc  and account2 <= self.totalAcc:\\n            if self.myBank[account1-1] >= money:\\n                self.myBank[account1-1] -= money\\n                self.myBank[account2-1] += money\\n                return True\\n        return False\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account <= self.totalAcc:\\n            self.myBank[account-1] += money\\n            return True\\n        return False\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account <= self.totalAcc:\\n            if self.myBank[account-1] >= money:\\n                self.myBank[account-1] -= money\\n                return True\\n        return False                \\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2935571,
                "title": "java-easy-solution-using-arr",
                "content": "\\n# Code\\n```\\nclass Bank {\\n    long [] acc_bal;\\n    long size;\\n    public Bank(long[] balance) {\\n        acc_bal=balance;\\n        size=acc_bal.length;\\n    }\\n\\n    \\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1>size) return false;\\n        if(account2>size) return false;\\n        if(acc_bal[account1-1] < money) return false;\\n\\n        acc_bal[account2-1]+=money;\\n        acc_bal[account1-1]-=money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account>size) return false;\\n        acc_bal[account-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account>size) return false;\\n        if(acc_bal[account-1] < money) return false;\\n        acc_bal[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    long [] acc_bal;\\n    long size;\\n    public Bank(long[] balance) {\\n        acc_bal=balance;\\n        size=acc_bal.length;\\n    }\\n\\n    \\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1>size) return false;\\n        if(account2>size) return false;\\n        if(acc_bal[account1-1] < money) return false;\\n\\n        acc_bal[account2-1]+=money;\\n        acc_bal[account1-1]-=money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account>size) return false;\\n        acc_bal[account-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account>size) return false;\\n        if(acc_bal[account-1] < money) return false;\\n        acc_bal[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2935480,
                "title": "c-solution-map",
                "content": "\\n\\n# Code\\n```\\nclass Bank {\\npublic:\\n    map<int,long long>mpp;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        n=balance.size();\\n        for(int i=0;i<n;i++){\\n            mpp[i]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int a1, int a2, long long money) {\\n        if(a1>n || a2>n) return false;\\n\\n        if(mpp[a1-1]>=money){\\n            mpp[a2-1]+=money;\\n            mpp[a1-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int a, long long money) {\\n        if(a>0 && a<=n){mpp[a-1]+=money;return true;}\\n        return false;\\n    }\\n    \\n    bool withdraw(int a, long long money) {\\n        if(a>0 && a<=n && mpp[a-1]>=money){mpp[a-1]-=money;return true;}\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    map<int,long long>mpp;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        n=balance.size();\\n        for(int i=0;i<n;i++){\\n            mpp[i]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int a1, int a2, long long money) {\\n        if(a1>n || a2>n) return false;\\n\\n        if(mpp[a1-1]>=money){\\n            mpp[a2-1]+=money;\\n            mpp[a1-1]-=money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int a, long long money) {\\n        if(a>0 && a<=n){mpp[a-1]+=money;return true;}\\n        return false;\\n    }\\n    \\n    bool withdraw(int a, long long money) {\\n        if(a>0 && a<=n && mpp[a-1]>=money){mpp[a-1]-=money;return true;}\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2913886,
                "title": "go",
                "content": "\\n# Code\\n```\\n\\ntype Bank struct {\\n\\taccounts      []int64\\n\\taccountsCount int\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n\\treturn Bank{\\n\\t\\taccounts:      balance,\\n\\t\\taccountsCount: len(balance),\\n\\t}\\n}\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n\\t// check if invalid account \\n\\tif this.accountsCount < account1 || this.accountsCount < account2 {\\n\\t\\treturn false\\n\\t}\\n\\t\\n\\t// if not enough money\\n\\tif this.accounts[account1-1] < money {\\n\\t\\treturn false\\n\\t}\\n\\n\\tthis.accounts[account1-1] -= money\\n\\tthis.accounts[account2-1] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n\\t// check if invalid account\\n\\tif this.accountsCount < account {\\n\\t\\treturn false\\n\\t}\\n\\n\\tthis.accounts[account-1] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n\\t// check if invalid account\\n\\tif this.accountsCount < account {\\n\\t\\treturn false\\n\\t}\\n\\t\\n\\t// if not enough money\\n\\tif this.accounts[account-1] < money {\\n\\t\\treturn false\\n\\t}\\n\\n\\tthis.accounts[account-1] -= money\\n\\treturn true\\n}\\n\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n\\ntype Bank struct {\\n\\taccounts      []int64\\n\\taccountsCount int\\n}\\n\\nfunc Constructor(balance []int64) Bank {\\n\\treturn Bank{\\n\\t\\taccounts:      balance,\\n\\t\\taccountsCount: len(balance),\\n\\t}\\n}\\n\\nfunc (this *Bank) Transfer(account1 int, account2 int, money int64) bool {\\n\\t// check if invalid account \\n\\tif this.accountsCount < account1 || this.accountsCount < account2 {\\n\\t\\treturn false\\n\\t}\\n\\t\\n\\t// if not enough money\\n\\tif this.accounts[account1-1] < money {\\n\\t\\treturn false\\n\\t}\\n\\n\\tthis.accounts[account1-1] -= money\\n\\tthis.accounts[account2-1] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Deposit(account int, money int64) bool {\\n\\t// check if invalid account\\n\\tif this.accountsCount < account {\\n\\t\\treturn false\\n\\t}\\n\\n\\tthis.accounts[account-1] += money\\n\\treturn true\\n}\\n\\nfunc (this *Bank) Withdraw(account int, money int64) bool {\\n\\t// check if invalid account\\n\\tif this.accountsCount < account {\\n\\t\\treturn false\\n\\t}\\n\\t\\n\\t// if not enough money\\n\\tif this.accounts[account-1] < money {\\n\\t\\treturn false\\n\\t}\\n\\n\\tthis.accounts[account-1] -= money\\n\\treturn true\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2906873,
                "title": "python-store-in-array-check-and-update",
                "content": "# Approach: We will store each balance in an array and check the accounts and update them if possible.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balances = balance\\n        self.n = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not(1<=account1<=self.n and 1<=account2<=self.n) or self.balances[account1-1] < money: return False\\n        self.balances[account1-1] -= money\\n        self.balances[account2-1] += money\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.n: return False\\n        self.balances[account-1] += money\\n        return True\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.n or self.balances[account-1] < money: return False\\n        self.balances[account-1] -= money\\n        return True\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balances = balance\\n        self.n = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if not(1<=account1<=self.n and 1<=account2<=self.n) or self.balances[account1-1] < money: return False\\n        self.balances[account1-1] -= money\\n        self.balances[account2-1] += money\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.n: return False\\n        self.balances[account-1] += money\\n        return True\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if not 1<=account<=self.n or self.balances[account-1] < money: return False\\n        self.balances[account-1] -= money\\n        return True\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2884765,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    long[] acc;\\n\\n    public Bank(long[] balance) {\\n        \\n\\n        this.acc=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n            \\n          if(acc.length<account1 || acc.length<account2){\\n\\n           return false;\\n\\n          }else{\\n\\n               if(acc[account1-1]<money){\\n\\n                return false;\\n\\n              }else{\\n\\n                  acc[account1-1]=acc[account1-1]-money;\\n                  acc[account2-1]=acc[account2-1]+money;\\n\\n                 return true;\\n\\n              }\\n\\n\\n          }\\n           \\n           \\n\\n\\n        \\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n           \\n          if(acc.length<account){\\n\\n           return false;\\n\\n          }else{\\n\\n\\n              acc[account-1]=acc[account-1]+money;\\n              return true;\\n\\n\\n          }\\n\\n\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n\\n\\n         if(acc.length<account){\\n\\n           return false;\\n\\n          }else{\\n\\n                 \\n              if(acc[account-1]<money){\\n\\n                return false;\\n\\n              }else{\\n\\n                \\n                acc[account-1]=acc[account-1]-money;\\n              return true;\\n\\n              }\\n\\n\\n          }\\n\\n\\n\\n\\n        \\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    long[] acc;\\n\\n    public Bank(long[] balance) {\\n        \\n\\n        this.acc=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n\\n            \\n          if(acc.length<account1 || acc.length<account2){\\n\\n           return false;\\n\\n          }else{\\n\\n               if(acc[account1-1]<money){\\n\\n                return false;\\n\\n              }else{\\n\\n                  acc[account1-1]=acc[account1-1]-money;\\n                  acc[account2-1]=acc[account2-1]+money;\\n\\n                 return true;\\n\\n              }\\n\\n\\n          }\\n           \\n           \\n\\n\\n        \\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        \\n           \\n          if(acc.length<account){\\n\\n           return false;\\n\\n          }else{\\n\\n\\n              acc[account-1]=acc[account-1]+money;\\n              return true;\\n\\n\\n          }\\n\\n\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n\\n\\n         if(acc.length<account){\\n\\n           return false;\\n\\n          }else{\\n\\n                 \\n              if(acc[account-1]<money){\\n\\n                return false;\\n\\n              }else{\\n\\n                \\n                acc[account-1]=acc[account-1]-money;\\n              return true;\\n\\n              }\\n\\n\\n          }\\n\\n\\n\\n\\n        \\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2860012,
                "title": "python-function-reuse-and-clean-code",
                "content": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n    \\n    def withdrawable(self, account, money):\\n        return account <= len(self.balance) and self.balance[account - 1] - money >= 0\\n    \\n    def depositable(self, account, money):\\n        return account <= len(self.balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdrawable(account1, money) and self.depositable(account2, money):\\n            self.withdraw(account1, money)\\n            self.deposit(account2, money)\\n            return True\\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.depositable(account, money):\\n            self.balance[account - 1] += money\\n            return True\\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.withdrawable(account, money):\\n            self.balance[account - 1] -= money\\n            return True\\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance\\n    \\n    def withdrawable(self, account, money):\\n        return account <= len(self.balance) and self.balance[account - 1] - money >= 0\\n    \\n    def depositable(self, account, money):\\n        return account <= len(self.balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if self.withdrawable(account1, money) and self.depositable(account2, money):\\n            self.withdraw(account1, money)\\n            self.deposit(account2, money)\\n            return True\\n        return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if self.depositable(account, money):\\n            self.balance[account - 1] += money\\n            return True\\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if self.withdrawable(account, money):\\n            self.balance[account - 1] -= money\\n            return True\\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2850807,
                "title": "java-nothing-special",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Use two predicates to verify transactions before doing it.\\n- Update the balance. Subsequent transactions may depend on it.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank {\\n\\n    private final int maxAccount;\\n    private final long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n        this.maxAccount = balance.length;\\n    }\\n\\n    private boolean isAccountValid(int account) {\\n        return 0 <= account && account < maxAccount;\\n    }\\n\\n    private boolean canSatisfyTransaction(int account, long money) {\\n        return balance[account] >= money;\\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        account1 -= 1;\\n        account2 -= 1;\\n        if (isAccountValid(account1) && isAccountValid(account2) && canSatisfyTransaction(account1, money)) {\\n            balance[account1] -= money;\\n            balance[account2] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        account -= 1;\\n        if (isAccountValid(account)) {\\n            balance[account] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        account -= 1;\\n        if (isAccountValid(account) && canSatisfyTransaction(account, money)) {\\n            balance[account] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n    private final int maxAccount;\\n    private final long[] balance;\\n\\n    public Bank(long[] balance) {\\n        this.balance = balance;\\n        this.maxAccount = balance.length;\\n    }\\n\\n    private boolean isAccountValid(int account) {\\n        return 0 <= account && account < maxAccount;\\n    }\\n\\n    private boolean canSatisfyTransaction(int account, long money) {\\n        return balance[account] >= money;\\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        account1 -= 1;\\n        account2 -= 1;\\n        if (isAccountValid(account1) && isAccountValid(account2) && canSatisfyTransaction(account1, money)) {\\n            balance[account1] -= money;\\n            balance[account2] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        account -= 1;\\n        if (isAccountValid(account)) {\\n            balance[account] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        account -= 1;\\n        if (isAccountValid(account) && canSatisfyTransaction(account, money)) {\\n            balance[account] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2844399,
                "title": "cpp-easy-to-understand-map",
                "content": "```\\nclass Bank {\\npublic:\\n    unordered_map<int,long long>mp;\\n    Bank(vector<long long>& balance) {\\n        for(int i=0;i<balance.size();i++)\\n        {\\n            mp[i+1]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(mp.find(account1)==mp.end() or mp.find(account2)==mp.end())\\n        {\\n            return false;\\n        }\\n        if(mp[account1]<money)\\n        {\\n            return false;\\n        }\\n        mp[account2]+=money;\\n        mp[account1]-=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(mp.find(account)==mp.end())\\n        {\\n            return false;\\n        }\\n        mp[account]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(mp.find(account)==mp.end())\\n        {\\n            return false;\\n        }\\n        else if(mp[account]<money)\\n        {\\n            return false;\\n        }\\n        mp[account]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    unordered_map<int,long long>mp;\\n    Bank(vector<long long>& balance) {\\n        for(int i=0;i<balance.size();i++)\\n        {\\n            mp[i+1]=balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(mp.find(account1)==mp.end() or mp.find(account2)==mp.end())\\n        {\\n            return false;\\n        }\\n        if(mp[account1]<money)\\n        {\\n            return false;\\n        }\\n        mp[account2]+=money;\\n        mp[account1]-=money;\\n        return true;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(mp.find(account)==mp.end())\\n        {\\n            return false;\\n        }\\n        mp[account]+=money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(mp.find(account)==mp.end())\\n        {\\n            return false;\\n        }\\n        else if(mp[account]<money)\\n        {\\n            return false;\\n        }\\n        mp[account]-=money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2837450,
                "title": "dictionary-in-python3",
                "content": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.dic1 = {}\\n        for i in range(len(balance)):\\n            self.dic1[i+1] = balance[i]\\n            \\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 not in self.dic1.keys() or account2 not in self.dic1.keys():\\n            return False\\n        if self.dic1[account1] < money : \\n            return False\\n        self.dic1[account1] -= money\\n        self.dic1[account2] += money\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account not in self.dic1.keys():\\n            return False\\n        self.dic1[account] += money        \\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account not in self.dic1.keys():\\n            return False\\n        if self.dic1[account] < money: \\n            return False\\n        self.dic1[account] -= money\\n        return True\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.dic1 = {}\\n        for i in range(len(balance)):\\n            self.dic1[i+1] = balance[i]\\n            \\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 not in self.dic1.keys() or account2 not in self.dic1.keys():\\n            return False\\n        if self.dic1[account1] < money : \\n            return False\\n        self.dic1[account1] -= money\\n        self.dic1[account2] += money\\n        return True\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account not in self.dic1.keys():\\n            return False\\n        self.dic1[account] += money        \\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account not in self.dic1.keys():\\n            return False\\n        if self.dic1[account] < money: \\n            return False\\n        self.dic1[account] -= money\\n        return True\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 2823434,
                "title": "c-easy",
                "content": "\\tclass Bank {\\n\\tpublic:\\n    vector<long long> balance;\\n    long n;\\n    Bank(vector<long long>& balance) {\\n        this -> balance = balance;\\n        n = balance.size();\\n    }\\n    \\n    bool transfer(int accnt1, int accnt2, long long money) {\\n        if(accnt1 < 1 || accnt2 < 1 || accnt1 > n || accnt2 > n || this->balance[accnt1 - 1] < money)\\n            return false;\\n        balance[accnt1 - 1] -= money;\\n        balance[accnt2 - 1] += money;\\n        return true;\\n\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account < 1 || account > n )\\n            return false;\\n        balance[account - 1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account < 1 || account > n || this->balance[account - 1] < money)\\n            return false;\\n        balance[account - 1] -= money;\\n        return true;\\n    }\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "\\tclass Bank {\\n\\tpublic:\\n    vector<long long> balance;\\n    long n;\\n    Bank(vector<long long>& balance) {\\n        this -> balance = balance;\\n        n = balance.size();\\n    }\\n    \\n    bool transfer(int accnt1, int accnt2, long long money) {\\n        if(accnt1 < 1 || accnt2 < 1 || accnt1 > n || accnt2 > n || this->balance[accnt1 - 1] < money)\\n            return false;\\n        balance[accnt1 - 1] -= money;\\n        balance[accnt2 - 1] += money;\\n        return true;\\n\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account < 1 || account > n )\\n            return false;\\n        balance[account - 1] += money;\\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account < 1 || account > n || this->balance[account - 1] < money)\\n            return false;\\n        balance[account - 1] -= money;\\n        return true;\\n    }\\n\\t};",
                "codeTag": "Java"
            },
            {
                "id": 2823382,
                "title": "java-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Bank {\\n\\n        Map<Integer, Long> map;\\n\\n    public Bank(long[] balance) {\\n        map = new HashMap<>();\\n        int len = balance.length;\\n        for (int i = 0; i < len; i++) {\\n            map.put(i+1, balance[i]);\\n        }\\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if(map.containsKey(account1) && map.containsKey(account2)){\\n             \\n            long bal1 = map.get(account1);\\n            long bal2 = map.get(account2);\\n            if(bal1 >= money){\\n                 if(account2 == account1) return true;\\n                map.put(account1, bal1 - money);\\n                map.put(account2, bal2 + money);\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        if(map.containsKey(account)){\\n            map.put(account, map.get(account) + money);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        if(map.containsKey(account)){\\n            long mon = map.get(account);\\n            if(money <= mon){\\n                map.put(account, mon - money);\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n\\n        Map<Integer, Long> map;\\n\\n    public Bank(long[] balance) {\\n        map = new HashMap<>();\\n        int len = balance.length;\\n        for (int i = 0; i < len; i++) {\\n            map.put(i+1, balance[i]);\\n        }\\n    }\\n\\n    public boolean transfer(int account1, int account2, long money) {\\n        if(map.containsKey(account1) && map.containsKey(account2)){\\n             \\n            long bal1 = map.get(account1);\\n            long bal2 = map.get(account2);\\n            if(bal1 >= money){\\n                 if(account2 == account1) return true;\\n                map.put(account1, bal1 - money);\\n                map.put(account2, bal2 + money);\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n\\n    }\\n\\n    public boolean deposit(int account, long money) {\\n        if(map.containsKey(account)){\\n            map.put(account, map.get(account) + money);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    public boolean withdraw(int account, long money) {\\n        if(map.containsKey(account)){\\n            long mon = map.get(account);\\n            if(money <= mon){\\n                map.put(account, mon - money);\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2747158,
                "title": "python3-solution-with-using-hashmap",
                "content": "```\\nclass Bank:\\n    def __init__(self, balance: List[int]):\\n        self.bank = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account2 > len(self.bank) or not self.withdraw(account1, money):\\n            return False\\n        \\n        return self.deposit(account2, money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account > len(self.bank):\\n            return False\\n        \\n        self.bank[account - 1] += money\\n        \\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account > len(self.bank) or self.bank[account - 1] < money:\\n            return False\\n        \\n        self.bank[account - 1] -= money\\n        \\n        return True\\n```",
                "solutionTags": [
                    "Python3",
                    "Design"
                ],
                "code": "```\\nclass Bank:\\n    def __init__(self, balance: List[int]):\\n        self.bank = balance\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account2 > len(self.bank) or not self.withdraw(account1, money):\\n            return False\\n        \\n        return self.deposit(account2, money)\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account > len(self.bank):\\n            return False\\n        \\n        self.bank[account - 1] += money\\n        \\n        return True\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account > len(self.bank) or self.bank[account - 1] < money:\\n            return False\\n        \\n        self.bank[account - 1] -= money\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2742342,
                "title": "simple-and-easy-to-understand-solution-c",
                "content": "```\\nclass Bank {\\npublic:\\n    \\n    unordered_map<int,long long> mp;\\n    int n;\\n    \\n    bool isAccountValid(int acc){\\n        if( acc>=1 && acc<=n) return true;\\n        return false;\\n    }\\n    \\n    bool isBalanceSufficient(int acc,long long money){\\n        if(mp[acc] >= money) return true;\\n        return false;\\n    }\\n    \\n    Bank(vector<long long>& balance) {\\n        n = balance.size();\\n        for(int i=0;i<n;i++){\\n            mp[i+1] = balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(isAccountValid(account1) && isAccountValid(account2) && isBalanceSufficient(account1,money)){\\n            mp[account1] -= money;\\n            mp[account2] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(isAccountValid(account)){\\n            mp[account] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(isAccountValid(account) && isBalanceSufficient(account,money)){\\n            mp[account] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    \\n    unordered_map<int,long long> mp;\\n    int n;\\n    \\n    bool isAccountValid(int acc){\\n        if( acc>=1 && acc<=n) return true;\\n        return false;\\n    }\\n    \\n    bool isBalanceSufficient(int acc,long long money){\\n        if(mp[acc] >= money) return true;\\n        return false;\\n    }\\n    \\n    Bank(vector<long long>& balance) {\\n        n = balance.size();\\n        for(int i=0;i<n;i++){\\n            mp[i+1] = balance[i];\\n        }\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if(isAccountValid(account1) && isAccountValid(account2) && isBalanceSufficient(account1,money)){\\n            mp[account1] -= money;\\n            mp[account2] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(isAccountValid(account)){\\n            mp[account] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(isAccountValid(account) && isBalanceSufficient(account,money)){\\n            mp[account] -= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2731655,
                "title": "c-easy-to-understand-using-hashmap-it-sholud-be-in-easy-section",
                "content": "```\\nIF YOU DON\\'T UNDERSTAND, JUST LEAVE A COMMENT AND I\\'LL  EXPLAIN THE SOLUTION TO YOU \\n```\\n\\n```\\nclass Bank {\\nprivate: \\n    unordered_map<int,long long> acc;\\n    int accounts =0;\\npublic:\\n    Bank(vector<long long>& balance) {\\n        for (int i =0 ;i<balance.size();i++)\\n            acc[i+1] = balance[i];\\n          accounts = balance.size();  \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if ( account1<= accounts && account2<= accounts && acc[account1] >= money)\\n        {\\n            acc[account2]+= money;\\n            acc[account1]-= money;\\n            return true;\\n        }\\n        return false;\\n        \\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account <= accounts )\\n        {\\n            acc[account]+= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account <= accounts && acc[account]>= money  )\\n        {\\n            acc[account]-= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nIF YOU DON\\'T UNDERSTAND, JUST LEAVE A COMMENT AND I\\'LL  EXPLAIN THE SOLUTION TO YOU \\n```\n```\\nclass Bank {\\nprivate: \\n    unordered_map<int,long long> acc;\\n    int accounts =0;\\npublic:\\n    Bank(vector<long long>& balance) {\\n        for (int i =0 ;i<balance.size();i++)\\n            acc[i+1] = balance[i];\\n          accounts = balance.size();  \\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        if ( account1<= accounts && account2<= accounts && acc[account1] >= money)\\n        {\\n            acc[account2]+= money;\\n            acc[account1]-= money;\\n            return true;\\n        }\\n        return false;\\n        \\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if (account <= accounts )\\n        {\\n            acc[account]+= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if (account <= accounts && acc[account]>= money  )\\n        {\\n            acc[account]-= money;\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2728046,
                "title": "rust-solution",
                "content": "```\\nstruct Bank {\\n    balance: Vec<i64>,\\n}\\n\\nimpl Bank {\\n    fn new(balance: Vec<i64>) -> Self {\\n        Self { balance }\\n    }\\n    \\n    fn transfer(&mut self, account1: i32, account2: i32, money: i64) -> bool {\\n        if self.balance.len() < account1 as usize || self.balance.len() < account2 as usize { return false; }\\n        self.withdraw(account1, money) && self.deposit(account2, money)\\n    }\\n    \\n    fn deposit(&mut self, account: i32, money: i64) -> bool {\\n        if self.balance.len() < account as usize { return false; }\\n        self.balance[account as usize - 1] += money;\\n        true\\n    }\\n    \\n    fn withdraw(&mut self, account: i32, money: i64) -> bool {\\n        if self.balance.len() < account as usize || self.balance[account as usize - 1] < money { return false; }\\n        self.balance[account as usize - 1] -= money;\\n        true\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nstruct Bank {\\n    balance: Vec<i64>,\\n}\\n\\nimpl Bank {\\n    fn new(balance: Vec<i64>) -> Self {\\n        Self { balance }\\n    }\\n    \\n    fn transfer(&mut self, account1: i32, account2: i32, money: i64) -> bool {\\n        if self.balance.len() < account1 as usize || self.balance.len() < account2 as usize { return false; }\\n        self.withdraw(account1, money) && self.deposit(account2, money)\\n    }\\n    \\n    fn deposit(&mut self, account: i32, money: i64) -> bool {\\n        if self.balance.len() < account as usize { return false; }\\n        self.balance[account as usize - 1] += money;\\n        true\\n    }\\n    \\n    fn withdraw(&mut self, account: i32, money: i64) -> bool {\\n        if self.balance.len() < account as usize || self.balance[account as usize - 1] < money { return false; }\\n        self.balance[account as usize - 1] -= money;\\n        true\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2722963,
                "title": "java-time-o-1",
                "content": "```\\nclass Bank {\\n    \\n    private long[] balances;\\n\\n    public Bank(long[] balance) {\\n        balances = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 > balances.length || account2 > balances.length || balances[account1 - 1] < money){\\n            return false;\\n        }\\n        balances[account1 - 1] -= money;\\n        balances[account2 - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account > balances.length){\\n            return false;\\n        }\\n        balances[account - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account > balances.length || balances[account - 1] < money){\\n            return false;\\n        }\\n        balances[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    \\n    private long[] balances;\\n\\n    public Bank(long[] balance) {\\n        balances = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1 > balances.length || account2 > balances.length || balances[account1 - 1] < money){\\n            return false;\\n        }\\n        balances[account1 - 1] -= money;\\n        balances[account2 - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account > balances.length){\\n            return false;\\n        }\\n        balances[account - 1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account > balances.length || balances[account - 1] < money){\\n            return false;\\n        }\\n        balances[account - 1] -= money;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2703751,
                "title": "very-simple-solution-using-hashmap",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n  O(N) to create bank accounts\\n  O(1) to withdraw, transfer, and deposit \\n\\n- Space complexity:\\n  O(N) space for dictionary data structure\\n\\n# Code\\n```\\npublic class Bank {\\n    Dictionary<int,long> accountMap;\\n    public Bank(long[] balance) {\\n        accountMap = new Dictionary<int,long>();\\n        for(int i=0;i<balance.Length;i++)\\n        {\\n            accountMap.Add(i+1,balance[i]);\\n        }\\n    }\\n    \\n    public bool Transfer(int account1, int account2, long money) {\\n        if(accountMap.ContainsKey(account1) && accountMap.ContainsKey(account2))\\n        {\\n            long bal = accountMap[account1];\\n            if(bal - money < 0)\\n                return false;\\n            else{\\n                accountMap[account1] -= money;\\n                accountMap[account2] += money;\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    public bool Deposit(int account, long money) {\\n        if(accountMap.ContainsKey(account))\\n        {\\n            accountMap[account] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public bool Withdraw(int account, long money) {\\n        if(accountMap.ContainsKey(account))\\n        {\\n            long currentBal = accountMap[account];\\n            if(currentBal-money < 0)\\n                return false;\\n            else\\n            {\\n                accountMap[account] -= money;\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * bool param_1 = obj.Transfer(account1,account2,money);\\n * bool param_2 = obj.Deposit(account,money);\\n * bool param_3 = obj.Withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C#",
                    "Hash Table"
                ],
                "code": "```\\npublic class Bank {\\n    Dictionary<int,long> accountMap;\\n    public Bank(long[] balance) {\\n        accountMap = new Dictionary<int,long>();\\n        for(int i=0;i<balance.Length;i++)\\n        {\\n            accountMap.Add(i+1,balance[i]);\\n        }\\n    }\\n    \\n    public bool Transfer(int account1, int account2, long money) {\\n        if(accountMap.ContainsKey(account1) && accountMap.ContainsKey(account2))\\n        {\\n            long bal = accountMap[account1];\\n            if(bal - money < 0)\\n                return false;\\n            else{\\n                accountMap[account1] -= money;\\n                accountMap[account2] += money;\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n    \\n    public bool Deposit(int account, long money) {\\n        if(accountMap.ContainsKey(account))\\n        {\\n            accountMap[account] += money;\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    public bool Withdraw(int account, long money) {\\n        if(accountMap.ContainsKey(account))\\n        {\\n            long currentBal = accountMap[account];\\n            if(currentBal-money < 0)\\n                return false;\\n            else\\n            {\\n                accountMap[account] -= money;\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * bool param_1 = obj.Transfer(account1,account2,money);\\n * bool param_2 = obj.Deposit(account,money);\\n * bool param_3 = obj.Withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2691475,
                "title": "python-simple-maths",
                "content": "\\n    def __init__(self, balance):\\n        self.balance = balance\\n        self.count = len(balance)\\n\\n    def transfer(self, account1, account2, money):\\n        if account1 > self.count or account2 > self.count:\\n            return False\\n        \\n        self.val1, self.val2 = self.balance[account1-1], self.balance[account2-1]\\n        \\n        if money <= self.balance[account1-1]:\\n            self.balance[account1-1] -= money\\n            self.balance[account2-1] += money\\n            return True\\n        else:\\n            return False\\n            \\n    def deposit(self, account, money):\\n        if account > self.count:\\n            return False\\n        else:\\n            self.balance[account-1] += money\\n            return True\\n\\n    def withdraw(self, account, money):\\n        if account > self.count:\\n            return False\\n        \\n        if money <= self.balance[account-1]:\\n            self.balance[account-1] -= money\\n            return True\\n        else:\\n            return False\\n",
                "solutionTags": [],
                "code": "\\n    def __init__(self, balance):\\n        self.balance = balance\\n        self.count = len(balance)\\n\\n    def transfer(self, account1, account2, money):\\n        if account1 > self.count or account2 > self.count:\\n            return False\\n        \\n        self.val1, self.val2 = self.balance[account1-1], self.balance[account2-1]\\n        \\n        if money <= self.balance[account1-1]:\\n            self.balance[account1-1] -= money\\n            self.balance[account2-1] += money\\n            return True\\n        else:\\n            return False\\n            \\n    def deposit(self, account, money):\\n        if account > self.count:\\n            return False\\n        else:\\n            self.balance[account-1] += money\\n            return True\\n\\n    def withdraw(self, account, money):\\n        if account > self.count:\\n            return False\\n        \\n        if money <= self.balance[account-1]:\\n            self.balance[account-1] -= money\\n            return True\\n        else:\\n            return False\\n",
                "codeTag": "Python3"
            },
            {
                "id": 2688915,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n   Time Complexity is O(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n Space Complexiyt is O(N)\\n\\n# Code\\n```\\nclass Bank {\\n    \\n    HashMap<Integer,Long> hm1;\\n    int n=0;\\n    public Bank(long[] balance) {\\n        hm1=new HashMap<Integer,Long>();\\n        n=balance.length;\\n        for(int i=0;i<balance.length;i++)\\n        {\\n           hm1.put((i+1),balance[i]);  \\n        }\\n    }    \\n    public boolean transfer(int account1, int account2, long money) {\\n         if((account1<0||account1>n)||(account2<0||account2>n))\\n         {\\n             return false;\\n         }\\n         long bal1=hm1.get(account1);\\n         if(bal1>=money)\\n         {\\n             hm1.put(account1,(bal1-money)); \\n             long bal2=hm1.get(account2);\\n             hm1.put(account2,(bal2+money));\\n             return true;\\n         }\\n         else\\n         {\\n             return false;\\n         }        \\n    }    \\n    public boolean deposit(int account, long money) {\\n        if(account<0||account>n)\\n        {\\n            return false;\\n        }\\n        long bal1=hm1.get(account);\\n        hm1.put(account,(bal1+money));        \\n        return true;\\n    }    \\n    public boolean withdraw(int account, long money){\\n        if(account<0||account>n)\\n        {\\n            return false;\\n        }\\n        long bal1=hm1.get(account);\\n        if(bal1>=money)\\n        {\\n            hm1.put(account,(bal1-money));            \\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n}\\n\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    \\n    HashMap<Integer,Long> hm1;\\n    int n=0;\\n    public Bank(long[] balance) {\\n        hm1=new HashMap<Integer,Long>();\\n        n=balance.length;\\n        for(int i=0;i<balance.length;i++)\\n        {\\n           hm1.put((i+1),balance[i]);  \\n        }\\n    }    \\n    public boolean transfer(int account1, int account2, long money) {\\n         if((account1<0||account1>n)||(account2<0||account2>n))\\n         {\\n             return false;\\n         }\\n         long bal1=hm1.get(account1);\\n         if(bal1>=money)\\n         {\\n             hm1.put(account1,(bal1-money)); \\n             long bal2=hm1.get(account2);\\n             hm1.put(account2,(bal2+money));\\n             return true;\\n         }\\n         else\\n         {\\n             return false;\\n         }        \\n    }    \\n    public boolean deposit(int account, long money) {\\n        if(account<0||account>n)\\n        {\\n            return false;\\n        }\\n        long bal1=hm1.get(account);\\n        hm1.put(account,(bal1+money));        \\n        return true;\\n    }    \\n    public boolean withdraw(int account, long money){\\n        if(account<0||account>n)\\n        {\\n            return false;\\n        }\\n        long bal1=hm1.get(account);\\n        if(bal1>=money)\\n        {\\n            hm1.put(account,(bal1-money));            \\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n}\\n\\n\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2687032,
                "title": "python3-solution-o-1-time-space-complexity",
                "content": "# Intuition\\nFor Transfer, we first check that account is present or not. If yes then we will check that money we want to transfer is present or If yes then we will remove money from account1 & add that money to account2 & return True else we will return True.\\n\\nFor Deposit, we first check that account is present or not. If yes then we will add money to that account and return True else we will return False.\\n\\nFor withdraw, we first check that account is present and money we want to withdraw is present. If yes, then we will remove money from that account & return True else return False.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance=balance\\n        self.n=len(balance)\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1<=self.n and account2<=self.n and self.balance[account1-1]>=money:\\n            self.balance[account1-1]-=money\\n            self.balance[account2-1]+=money\\n            return True\\n        return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account>self.n:\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account<=self.n and self.balance[account-1]>=money:\\n            self.balance[account-1]-=money\\n            return True\\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "solutionTags": [
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance=balance\\n        self.n=len(balance)\\n        \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1<=self.n and account2<=self.n and self.balance[account1-1]>=money:\\n            self.balance[account1-1]-=money\\n            self.balance[account2-1]+=money\\n            return True\\n        return False\\n        \\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if account>self.n:\\n            return False\\n        self.balance[account-1]+=money\\n        return True\\n        \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if account<=self.n and self.balance[account-1]>=money:\\n            self.balance[account-1]-=money\\n            return True\\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2686244,
                "title": "swift-solution-with-concurrency",
                "content": "I have solution with handling concurrency which is most imporatant in such cases.\\n\\n```\\n\\nclass Bank {\\n\\n    var accounts: [Int]\\n    let allAccounts: Set<Int>\\n    let serialQueue = DispatchQueue(label: \"com.bank\")\\n    \\n    init(_ balance: [Int]) {\\n        self.accounts = balance\\n        self.allAccounts = Set(1...balance.count)\\n    }\\n    \\n    func transfer(_ account1: Int, _ account2: Int, _ money: Int) -> Bool {\\n        guard allAccounts.contains(account1), allAccounts.contains(account2) else { return false}\\n        \\n        var isTransactionSuccessful = false\\n        \\n        serialQueue.sync {\\n            if accounts[account1-1] >= money {\\n                accounts[account1-1] -= money\\n                accounts[account2-1] += money\\n                isTransactionSuccessful = true\\n            }\\n        }\\n        return isTransactionSuccessful\\n    }\\n    \\n    func deposit(_ account: Int, _ money: Int) -> Bool {\\n        guard allAccounts.contains(account) else { return false }\\n        var isTransactionSuccessful = false\\n        \\n         serialQueue.sync { \\n             accounts[account-1] += money\\n             isTransactionSuccessful = true\\n         }\\n        \\n        return isTransactionSuccessful\\n    }\\n    \\n    func withdraw(_ account: Int, _ money: Int) -> Bool {\\n        guard allAccounts.contains(account) else { return false }\\n        \\n        var isTransactionSuccessful = false\\n        \\n        serialQueue.sync { \\n            if accounts[account-1] >= money {\\n                accounts[account-1] -= money\\n                isTransactionSuccessful = true\\n            }\\n        }\\n        \\n        return isTransactionSuccessful\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n\\nclass Bank {\\n\\n    var accounts: [Int]\\n    let allAccounts: Set<Int>\\n    let serialQueue = DispatchQueue(label: \"com.bank\")\\n    \\n    init(_ balance: [Int]) {\\n        self.accounts = balance\\n        self.allAccounts = Set(1...balance.count)\\n    }\\n    \\n    func transfer(_ account1: Int, _ account2: Int, _ money: Int) -> Bool {\\n        guard allAccounts.contains(account1), allAccounts.contains(account2) else { return false}\\n        \\n        var isTransactionSuccessful = false\\n        \\n        serialQueue.sync {\\n            if accounts[account1-1] >= money {\\n                accounts[account1-1] -= money\\n                accounts[account2-1] += money\\n                isTransactionSuccessful = true\\n            }\\n        }\\n        return isTransactionSuccessful\\n    }\\n    \\n    func deposit(_ account: Int, _ money: Int) -> Bool {\\n        guard allAccounts.contains(account) else { return false }\\n        var isTransactionSuccessful = false\\n        \\n         serialQueue.sync { \\n             accounts[account-1] += money\\n             isTransactionSuccessful = true\\n         }\\n        \\n        return isTransactionSuccessful\\n    }\\n    \\n    func withdraw(_ account: Int, _ money: Int) -> Bool {\\n        guard allAccounts.contains(account) else { return false }\\n        \\n        var isTransactionSuccessful = false\\n        \\n        serialQueue.sync { \\n            if accounts[account-1] >= money {\\n                accounts[account-1] -= money\\n                isTransactionSuccessful = true\\n            }\\n        }\\n        \\n        return isTransactionSuccessful\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2684996,
                "title": "simple-c-solution",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> balance;\\n    Bank(vector<long long>& balance) \\n    {\\n        this->balance=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) \\n    {\\n        if(account1>balance.size() or account2>balance.size()) return 0;\\n        if(balance[account1-1]>=money)\\n        {\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n    \\n    bool deposit(int account, long long money) \\n    {\\n        if(account>balance.size()) return 0;\\n        balance[account-1]+=money;\\n        return 1;\\n    }\\n    \\n    bool withdraw(int account, long long money) \\n    { \\n        if(account>balance.size()) return 0;\\n        if(balance[account-1]>=money)\\n        {\\n            balance[account-1]-=money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> balance;\\n    Bank(vector<long long>& balance) \\n    {\\n        this->balance=balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) \\n    {\\n        if(account1>balance.size() or account2>balance.size()) return 0;\\n        if(balance[account1-1]>=money)\\n        {\\n            balance[account1-1]-=money;\\n            balance[account2-1]+=money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n    \\n    bool deposit(int account, long long money) \\n    {\\n        if(account>balance.size()) return 0;\\n        balance[account-1]+=money;\\n        return 1;\\n    }\\n    \\n    bool withdraw(int account, long long money) \\n    { \\n        if(account>balance.size()) return 0;\\n        if(balance[account-1]>=money)\\n        {\\n            balance[account-1]-=money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2678285,
                "title": "python-solution-clean-helper-method",
                "content": "\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.account_balances = balance\\n        \\n    def verify_transaction(self, account: int, amount: int = 0, skip_balance_check: bool = False):\\n        if account >= 0 and account < len(self.account_balances):\\n            if skip_balance_check: \\n                return True\\n            elif self.account_balances[account] >= amount:\\n                return True\\n        return False\\n        \\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        # 0 index account1 and account2\\n        account1 -= 1\\n        account2 -= 1\\n        if self.verify_transaction(account=account1, amount=money) and self.verify_transaction(account=account2, skip_balance_check=True):\\n            self.account_balances[account1] -= money\\n            self.account_balances[account2] += money\\n            return True\\n        return False\\n        \\n    def deposit(self, account: int, money: int) -> bool:\\n        # 0 index account\\n        account -= 1\\n        if self.verify_transaction(account=account, skip_balance_check=True):\\n            self.account_balances[account] += money\\n            return True\\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        # 0 index account\\n        account -= 1\\n        if self.verify_transaction(account=account, amount=money):\\n            self.account_balances[account] -= money\\n            return True\\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)",
                "solutionTags": [
                    "Python",
                    "Design"
                ],
                "code": "\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.account_balances = balance\\n        \\n    def verify_transaction(self, account: int, amount: int = 0, skip_balance_check: bool = False):\\n        if account >= 0 and account < len(self.account_balances):\\n            if skip_balance_check: \\n                return True\\n            elif self.account_balances[account] >= amount:\\n                return True\\n        return False\\n        \\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        # 0 index account1 and account2\\n        account1 -= 1\\n        account2 -= 1\\n        if self.verify_transaction(account=account1, amount=money) and self.verify_transaction(account=account2, skip_balance_check=True):\\n            self.account_balances[account1] -= money\\n            self.account_balances[account2] += money\\n            return True\\n        return False\\n        \\n    def deposit(self, account: int, money: int) -> bool:\\n        # 0 index account\\n        account -= 1\\n        if self.verify_transaction(account=account, skip_balance_check=True):\\n            self.account_balances[account] += money\\n            return True\\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        # 0 index account\\n        account -= 1\\n        if self.verify_transaction(account=account, amount=money):\\n            self.account_balances[account] -= money\\n            return True\\n        return False\\n\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank(balance)\\n# param_1 = obj.transfer(account1,account2,money)\\n# param_2 = obj.deposit(account,money)\\n# param_3 = obj.withdraw(account,money)",
                "codeTag": "Java"
            },
            {
                "id": 2657190,
                "title": "javascript-easy-to-understand",
                "content": "```javascript\\nvar Bank = function(balance) {\\n    this.balance = balance; \\n};\\n\\n\\nBank.prototype.validAccount = function(account){\\n    return account <= this.balance.length;\\n};\\n\\nBank.prototype.sufficientFunds = function(account, money){\\n    return this.balance[account - 1] >= money;\\n};\\n\\nBank.prototype.addFunds = function(account, money){\\n    this.balance[account - 1] += money;\\n};\\n\\nBank.prototype.subtractFunds = function(account, money){\\n    this.balance[account - 1] -= money;\\n};\\n\\n\\nBank.prototype.transfer = function(account1, account2, money) {\\n    if(this.validAccount(account1) && this.validAccount(account2)){\\n        if(this.sufficientFunds(account1, money)){\\n            this.subtractFunds(account1, money);\\n            this.addFunds(account2, money);\\n            return true;\\n        }\\n    }\\n    return false;\\n};\\n\\n\\nBank.prototype.deposit = function(account, money) {\\n    if(this.validAccount(account)){\\n        this.addFunds(account, money);\\n        return true;\\n    }\\n    return false;\\n};\\n\\n\\nBank.prototype.withdraw = function(account, money) {\\n    if(this.validAccount(account)){\\n        if(this.sufficientFunds(account, money)){\\n            this.subtractFunds(account, money);\\n            return true;\\n        }\\n    }\\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nvar Bank = function(balance) {\\n    this.balance = balance; \\n};\\n\\n\\nBank.prototype.validAccount = function(account){\\n    return account <= this.balance.length;\\n};\\n\\nBank.prototype.sufficientFunds = function(account, money){\\n    return this.balance[account - 1] >= money;\\n};\\n\\nBank.prototype.addFunds = function(account, money){\\n    this.balance[account - 1] += money;\\n};\\n\\nBank.prototype.subtractFunds = function(account, money){\\n    this.balance[account - 1] -= money;\\n};\\n\\n\\nBank.prototype.transfer = function(account1, account2, money) {\\n    if(this.validAccount(account1) && this.validAccount(account2)){\\n        if(this.sufficientFunds(account1, money)){\\n            this.subtractFunds(account1, money);\\n            this.addFunds(account2, money);\\n            return true;\\n        }\\n    }\\n    return false;\\n};\\n\\n\\nBank.prototype.deposit = function(account, money) {\\n    if(this.validAccount(account)){\\n        this.addFunds(account, money);\\n        return true;\\n    }\\n    return false;\\n};\\n\\n\\nBank.prototype.withdraw = function(account, money) {\\n    if(this.validAccount(account)){\\n        if(this.sufficientFunds(account, money)){\\n            this.subtractFunds(account, money);\\n            return true;\\n        }\\n    }\\n    return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2638444,
                "title": "easy-to-understand-java-soln",
                "content": "```\\nclass Bank {\\n    int n;\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        n=balance.length;\\n        this.balance=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1\\n           ||account1>n\\n           ||account2<1\\n           ||account2>n\\n           ||balance[account1-1]<money)\\n            return false;\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n         if(account<1\\n           ||account>n)\\n             return false;\\n        balance[account-1]+=money;\\n        return true;\\n        \\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1\\n           ||account>n\\n           ||balance[account-1]<money)\\n            return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Bank {\\n    int n;\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        n=balance.length;\\n        this.balance=balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1\\n           ||account1>n\\n           ||account2<1\\n           ||account2>n\\n           ||balance[account1-1]<money)\\n            return false;\\n        balance[account1-1]-=money;\\n        balance[account2-1]+=money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n         if(account<1\\n           ||account>n)\\n             return false;\\n        balance[account-1]+=money;\\n        return true;\\n        \\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account<1\\n           ||account>n\\n           ||balance[account-1]<money)\\n            return false;\\n        balance[account-1]-=money;\\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2615233,
                "title": "java-chain-withdraw-and-deposit",
                "content": "```\\nclass Bank {\\n    private long[] balance ;\\n    private int n ;\\n    \\n    public Bank(long[] balance) {\\n        this.balance = balance ;\\n        n = balance.length ;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 > n || account2 > n || money > balance[account1-1]) return false ;\\n        balance[account1-1] -= money ;\\n        balance[account2-1] += money ;\\n        return true ;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account > n) return false ;\\n        balance[account-1] += money ;\\n        return true ;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account > n || money > balance[account-1]) return false ;\\n        balance[account-1] -= money ;\\n        return true ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    private long[] balance ;\\n    private int n ;\\n    \\n    public Bank(long[] balance) {\\n        this.balance = balance ;\\n        n = balance.length ;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if (account1 > n || account2 > n || money > balance[account1-1]) return false ;\\n        balance[account1-1] -= money ;\\n        balance[account2-1] += money ;\\n        return true ;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if (account > n) return false ;\\n        balance[account-1] += money ;\\n        return true ;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if (account > n || money > balance[account-1]) return false ;\\n        balance[account-1] -= money ;\\n        return true ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2610278,
                "title": "c",
                "content": "```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> bal;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int a1, int a2, long long m) {\\n        \\n        if(a1 > n || a2 > n || bal[a1-1] < m) return false;\\n        \\n        bal[a1-1] -= m;\\n        bal[a2-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int a, long long m) {\\n        \\n        if(a > n) return false;\\n        \\n        bal[a-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int a, long long m) {\\n        \\n        if(a > n || bal[a-1] < m) return false;\\n        \\n        bal[a-1] -= m;\\n        \\n        return true;\\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Bank {\\npublic:\\n    \\n    vector<long long> bal;\\n    long long n;\\n    \\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int a1, int a2, long long m) {\\n        \\n        if(a1 > n || a2 > n || bal[a1-1] < m) return false;\\n        \\n        bal[a1-1] -= m;\\n        bal[a2-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool deposit(int a, long long m) {\\n        \\n        if(a > n) return false;\\n        \\n        bal[a-1] += m;\\n        \\n        return true;\\n    }\\n    \\n    bool withdraw(int a, long long m) {\\n        \\n        if(a > n || bal[a-1] < m) return false;\\n        \\n        bal[a-1] -= m;\\n        \\n        return true;\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2596591,
                "title": "straight-forward-solution",
                "content": "Visit my Youtube channel for\\n-> videos about developing intuition for difficult coding concepts\\n-> using intuition for solving some good coding questions\\n\\nhttps://www.youtube.com/channel/UC-3Ceh2I6aDerx98d5r2rsQ\\n\\n------------------------------------------------------------------------\\n\\n**Code:**\\n```\\nclass Bank {\\npublic:\\n    vector<long long> accounts;\\n    Bank(vector<long long>& balance) {\\n        accounts = balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        bool status = withdraw(account1, money);\\n        \\n        if(status == false){\\n            return status;\\n        }\\n        \\n        status = deposit(account2, money);\\n        \\n        if(status == false){\\n            deposit(account1, money);\\n        }\\n        return status;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account > accounts.size()){\\n            return false;\\n        }\\n        accounts[account-1] += money;   \\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account > accounts.size()){\\n            return false;\\n        }\\n        if(accounts[account-1] < money){\\n            return false;\\n        }\\n        accounts[account-1] -= money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> accounts;\\n    Bank(vector<long long>& balance) {\\n        accounts = balance;\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        bool status = withdraw(account1, money);\\n        \\n        if(status == false){\\n            return status;\\n        }\\n        \\n        status = deposit(account2, money);\\n        \\n        if(status == false){\\n            deposit(account1, money);\\n        }\\n        return status;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account > accounts.size()){\\n            return false;\\n        }\\n        accounts[account-1] += money;   \\n        return true;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account > accounts.size()){\\n            return false;\\n        }\\n        if(accounts[account-1] < money){\\n            return false;\\n        }\\n        accounts[account-1] -= money;\\n        return true;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2578713,
                "title": "ruby-solution-100-100",
                "content": "```\\nclass Bank\\n\\n=begin\\n    :type balance: Integer[]\\n=end\\n  def initialize(balance)\\n    @balance = balance\\n    @n = @balance.size\\n  end\\n\\n\\n=begin\\n  :type account1: Integer\\n  :type account2: Integer\\n  :type money: Integer\\n  :rtype: Boolean\\n=end\\n  def transfer(account1, account2, money)\\n    return false if account1 < 1 || account1 > @n\\n    return false if account2 < 1 || account2 > @n\\n    account1 -= 1\\n    account2 -= 1\\n    return false if @balance[account1] < money\\n    @balance[account1] -= money\\n    @balance[account2] += money\\n    true\\n  end\\n\\n\\n=begin\\n  :type account: Integer\\n  :type money: Integer\\n  :rtype: Boolean\\n=end\\n  def deposit(account, money)\\n    return false if account < 1 || account > @n\\n    account -= 1\\n    @balance[account] += money\\n    true\\n  end\\n\\n\\n=begin\\n  :type account: Integer\\n  :type money: Integer\\n  :rtype: Boolean\\n=end\\n  def withdraw(account, money)\\n    return false if account < 1 || account > @n\\n    account -= 1\\n    return false if @balance[account] < money\\n    @balance[account] -= money\\n    true\\n  end\\n\\n\\nend\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank.new(balance)\\n# param_1 = obj.transfer(account1, account2, money)\\n# param_2 = obj.deposit(account, money)\\n# param_3 = obj.withdraw(account, money)",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\nclass Bank\\n\\n=begin\\n    :type balance: Integer[]\\n=end\\n  def initialize(balance)\\n    @balance = balance\\n    @n = @balance.size\\n  end\\n\\n\\n=begin\\n  :type account1: Integer\\n  :type account2: Integer\\n  :type money: Integer\\n  :rtype: Boolean\\n=end\\n  def transfer(account1, account2, money)\\n    return false if account1 < 1 || account1 > @n\\n    return false if account2 < 1 || account2 > @n\\n    account1 -= 1\\n    account2 -= 1\\n    return false if @balance[account1] < money\\n    @balance[account1] -= money\\n    @balance[account2] += money\\n    true\\n  end\\n\\n\\n=begin\\n  :type account: Integer\\n  :type money: Integer\\n  :rtype: Boolean\\n=end\\n  def deposit(account, money)\\n    return false if account < 1 || account > @n\\n    account -= 1\\n    @balance[account] += money\\n    true\\n  end\\n\\n\\n=begin\\n  :type account: Integer\\n  :type money: Integer\\n  :rtype: Boolean\\n=end\\n  def withdraw(account, money)\\n    return false if account < 1 || account > @n\\n    account -= 1\\n    return false if @balance[account] < money\\n    @balance[account] -= money\\n    true\\n  end\\n\\n\\nend\\n\\n# Your Bank object will be instantiated and called as such:\\n# obj = Bank.new(balance)\\n# param_1 = obj.transfer(account1, account2, money)\\n# param_2 = obj.deposit(account, money)\\n# param_3 = obj.withdraw(account, money)",
                "codeTag": "Java"
            },
            {
                "id": 2562790,
                "title": "python3-hasmap-beginner-friendly",
                "content": "The Solution utilises the properties of `HashMap` to build the various function signatures.\\n\\n```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.accMap = defaultdict(int)\\n        \\n        for i,b in enumerate(balance):\\n            self.accMap[i+1] = b\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 in self.accMap and account2 in self.accMap:\\n            if self.accMap[account1] >= money:\\n                \\n                self.accMap[account1] -= money\\n                self.accMap[account2] += money\\n                \\n                return True\\n            \\n          return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        \\n        if account in self.accMap:\\n            self.accMap[account] += money\\n            return True\\n        \\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        \\n        if account in self.accMap and self.accMap[account] >= money:\\n            self.accMap[account] -= money\\n            return True\\n        \\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.accMap = defaultdict(int)\\n        \\n        for i,b in enumerate(balance):\\n            self.accMap[i+1] = b\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if account1 in self.accMap and account2 in self.accMap:\\n            if self.accMap[account1] >= money:\\n                \\n                self.accMap[account1] -= money\\n                self.accMap[account2] += money\\n                \\n                return True\\n            \\n          return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        \\n        if account in self.accMap:\\n            self.accMap[account] += money\\n            return True\\n        \\n        return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        \\n        if account in self.accMap and self.accMap[account] >= money:\\n            self.accMap[account] -= money\\n            return True\\n        \\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2517294,
                "title": "straightforward-solution-using-oop-in-python",
                "content": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.accounts = balance\\n        self.noOfAccounts = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if 1 <= account1 <= self.noOfAccounts and 1 <= account2 <= self.noOfAccounts:\\n            if money <= self.accounts[account1 - 1]:\\n                self.accounts[account1 - 1] -= money\\n                self.accounts[account2 - 1] += money\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1 <= account <= self.noOfAccounts:\\n            self.accounts[account - 1] += money\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if 1 <= account <= self.noOfAccounts and self.accounts[account - 1] >= money:\\n            self.accounts[account - 1] -= money\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.accounts = balance\\n        self.noOfAccounts = len(balance)\\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if 1 <= account1 <= self.noOfAccounts and 1 <= account2 <= self.noOfAccounts:\\n            if money <= self.accounts[account1 - 1]:\\n                self.accounts[account1 - 1] -= money\\n                self.accounts[account2 - 1] += money\\n                return True\\n            else:\\n                return False\\n        else:\\n            return False\\n\\n    def deposit(self, account: int, money: int) -> bool:\\n        if 1 <= account <= self.noOfAccounts:\\n            self.accounts[account - 1] += money\\n            return True\\n        else:\\n            return False\\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if 1 <= account <= self.noOfAccounts and self.accounts[account - 1] >= money:\\n            self.accounts[account - 1] -= money\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2506075,
                "title": "why-is-this-a-medium-problem",
                "content": "Title says it all .............",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2500200,
                "title": "efficient-and-faster-solution",
                "content": "```\\nclass Bank {\\n    long arr[];\\n    public Bank(long[] balance) {\\n        arr=balance;\\n         \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(arr.length<account1 || arr.length<account2){\\n            return false;\\n        }\\n        if(arr[account1-1]>=money){\\n            arr[account1-1]-=money;\\n            arr[account2-1]+=money;\\n            return true;\\n        }\\n            return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(arr.length<account){\\n            return false;\\n        }\\n        arr[account-1]=arr[account-1]+money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account>arr.length){\\n            return false;\\n        }\\n        if(arr[account-1]<money){\\n            return false;\\n        }\\n            arr[account-1]=arr[account-1]-money;\\n            return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n ```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Bank {\\n    long arr[];\\n    public Bank(long[] balance) {\\n        arr=balance;\\n         \\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(arr.length<account1 || arr.length<account2){\\n            return false;\\n        }\\n        if(arr[account1-1]>=money){\\n            arr[account1-1]-=money;\\n            arr[account2-1]+=money;\\n            return true;\\n        }\\n            return false;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(arr.length<account){\\n            return false;\\n        }\\n        arr[account-1]=arr[account-1]+money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        if(account>arr.length){\\n            return false;\\n        }\\n        if(arr[account-1]<money){\\n            return false;\\n        }\\n            arr[account-1]=arr[account-1]-money;\\n            return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 2482920,
                "title": "java-easy-understanding-solution-using-object-oriented-programming-concepts",
                "content": "# Solution using JAVA object oriented programming (OOPS) concepts with explaning the possible mistake \\n\\n**Correct Solution**\\n\\n```\\nclass Bank {\\n    \\n    // Declaring Variables Globally \\n    int n;\\n    long[] balance;\\n    \\n    // Instantiating GLobal Variables Using Constructor \\n    public Bank(long[] balance) {\\n        this.n = balance.length; \\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1 || account1>n  || account2<1 || account2>n || balance[account1-1] < money) return false;\\n        balance[account1-1] -= money;\\n        balance[account2-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>n) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        \\n        if(account<1 || account>n || balance[account-1] < money){\\n            return false;\\n        }\\n        balance[account-1] -= money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```\\n\\n**Possible And Very Minute Error In The Solution**\\n\\nThe error is that we wrote the below check of available balance in the given account before checkign weather given account number is in valid range or not.\\n\\n```\\nclass Bank {\\n    \\n    // Declaring Variables Globally \\n    int n;\\n    long[] balance;\\n    \\n    // Instantiating GLobal Variables Using Constructor \\n    public Bank(long[] balance) {\\n        this.n = balance.length; \\n        this.balance = balance;\\n    }\\n    // Error : Writing balance[account1-1] < money before other check \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(balance[account1-1] < money || account1<1 || account1>n  || account2<1 || account2>n) return false;\\n        balance[account1-1] -= money;\\n        balance[account2-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>n) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    // Error : Writing  balance[account-1] < money before other checks \\n    public boolean withdraw(int account, long money) {\\n        \\n        if( balance[account-1] < money || account<1 || account>n ||){\\n            return false;\\n        }\\n        balance[account-1] -= money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Bank {\\n    \\n    // Declaring Variables Globally \\n    int n;\\n    long[] balance;\\n    \\n    // Instantiating GLobal Variables Using Constructor \\n    public Bank(long[] balance) {\\n        this.n = balance.length; \\n        this.balance = balance;\\n    }\\n    \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1 || account1>n  || account2<1 || account2>n || balance[account1-1] < money) return false;\\n        balance[account1-1] -= money;\\n        balance[account2-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>n) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean withdraw(int account, long money) {\\n        \\n        if(account<1 || account>n || balance[account-1] < money){\\n            return false;\\n        }\\n        balance[account-1] -= money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```\n```\\nclass Bank {\\n    \\n    // Declaring Variables Globally \\n    int n;\\n    long[] balance;\\n    \\n    // Instantiating GLobal Variables Using Constructor \\n    public Bank(long[] balance) {\\n        this.n = balance.length; \\n        this.balance = balance;\\n    }\\n    // Error : Writing balance[account1-1] < money before other check \\n    public boolean transfer(int account1, int account2, long money) {\\n        if(balance[account1-1] < money || account1<1 || account1>n  || account2<1 || account2>n) return false;\\n        balance[account1-1] -= money;\\n        balance[account2-1] += money;\\n        return true;\\n    }\\n    \\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>n) return false;\\n        balance[account-1] += money;\\n        return true;\\n    }\\n    // Error : Writing  balance[account-1] < money before other checks \\n    public boolean withdraw(int account, long money) {\\n        \\n        if( balance[account-1] < money || account<1 || account>n ||){\\n            return false;\\n        }\\n        balance[account-1] -= money;\\n        return true;\\n    }\\n}\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank obj = new Bank(balance);\\n * boolean param_1 = obj.transfer(account1,account2,money);\\n * boolean param_2 = obj.deposit(account,money);\\n * boolean param_3 = obj.withdraw(account,money);\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2478935,
                "title": "java-array-straightforward-solution",
                "content": "```\\nclass Bank {\\n    int N;\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.N = balance.length;\\n        this.balance = balance;\\n    }\\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1 || account1>N || account2<1 || account2>N || balance[account1-1]<money)\\n            return false;\\n        balance[account1-1] = balance[account1-1] - money;\\n        balance[account2-1] = balance[account2-1] + money;\\n        return true;\\n    }\\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>N)\\n            return false;\\n        balance[account-1] = balance[account-1] + money;\\n        return true;\\n    }\\n    public boolean withdraw(int account, long money) {\\n        if(account<1 || account>N || balance[account-1]<money)\\n            return false;\\n        balance[account-1] = balance[account-1] - money;\\n        return true;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Bank {\\n    int N;\\n    long[] balance;\\n    public Bank(long[] balance) {\\n        this.N = balance.length;\\n        this.balance = balance;\\n    }\\n    public boolean transfer(int account1, int account2, long money) {\\n        if(account1<1 || account1>N || account2<1 || account2>N || balance[account1-1]<money)\\n            return false;\\n        balance[account1-1] = balance[account1-1] - money;\\n        balance[account2-1] = balance[account2-1] + money;\\n        return true;\\n    }\\n    public boolean deposit(int account, long money) {\\n        if(account<1 || account>N)\\n            return false;\\n        balance[account-1] = balance[account-1] + money;\\n        return true;\\n    }\\n    public boolean withdraw(int account, long money) {\\n        if(account<1 || account>N || balance[account-1]<money)\\n            return false;\\n        balance[account-1] = balance[account-1] - money;\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2453579,
                "title": "simple-c",
                "content": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        if(account1>n or account2>n)return 0;\\n        \\n        if(bal[account1-1]>=money)\\n        {\\n            bal[account1-1] -= money;\\n            bal[account2-1] += money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>n)return 0;\\n        \\n        bal[account-1] += money;\\n        return 1;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>n)return 0;\\n        if(bal[account-1]>=money)\\n        {\\n            bal[account-1] -= money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Bank {\\npublic:\\n    vector<long long> bal;\\n    int n;\\n    Bank(vector<long long>& balance) {\\n        bal = balance;\\n        n = bal.size();\\n    }\\n    \\n    bool transfer(int account1, int account2, long long money) {\\n        \\n        if(account1>n or account2>n)return 0;\\n        \\n        if(bal[account1-1]>=money)\\n        {\\n            bal[account1-1] -= money;\\n            bal[account2-1] += money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n    \\n    bool deposit(int account, long long money) {\\n        if(account>n)return 0;\\n        \\n        bal[account-1] += money;\\n        return 1;\\n    }\\n    \\n    bool withdraw(int account, long long money) {\\n        if(account>n)return 0;\\n        if(bal[account-1]>=money)\\n        {\\n            bal[account-1] -= money;\\n            return 1;\\n        }\\n        return 0;\\n    }\\n};\\n\\n/**\\n * Your Bank object will be instantiated and called as such:\\n * Bank* obj = new Bank(balance);\\n * bool param_1 = obj->transfer(account1,account2,money);\\n * bool param_2 = obj->deposit(account,money);\\n * bool param_3 = obj->withdraw(account,money);\\n */\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2431685,
                "title": "easy-python-solution",
                "content": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if (account1 <= 0) or (account1 > len(self.balance)) : \\n            return False \\n        elif (account2 <= 0) or (account2 > len(self.balance)) : \\n            return False\\n        elif money > self.balance[account1-1] :\\n            return False \\n        else : \\n            self.balance[account1-1] -= money \\n            self.balance[account2-1] += money \\n            return True \\n            \\n            \\n    def deposit(self, account: int, money: int) -> bool:\\n        if (account <= 0) or (account > len(self.balance)) : \\n            return False \\n        else : \\n            self.balance[account-1] += money \\n            return True \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if (account <= 0) or (account > len(self.balance)) : \\n            return False \\n        elif money > self.balance[account-1] :\\n            return False \\n        else : \\n            self.balance[account-1] -= money \\n            return True \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Design"
                ],
                "code": "```\\nclass Bank:\\n\\n    def __init__(self, balance: List[int]):\\n        self.balance = balance \\n\\n    def transfer(self, account1: int, account2: int, money: int) -> bool:\\n        if (account1 <= 0) or (account1 > len(self.balance)) : \\n            return False \\n        elif (account2 <= 0) or (account2 > len(self.balance)) : \\n            return False\\n        elif money > self.balance[account1-1] :\\n            return False \\n        else : \\n            self.balance[account1-1] -= money \\n            self.balance[account2-1] += money \\n            return True \\n            \\n            \\n    def deposit(self, account: int, money: int) -> bool:\\n        if (account <= 0) or (account > len(self.balance)) : \\n            return False \\n        else : \\n            self.balance[account-1] += money \\n            return True \\n\\n    def withdraw(self, account: int, money: int) -> bool:\\n        if (account <= 0) or (account > len(self.balance)) : \\n            return False \\n        elif money > self.balance[account-1] :\\n            return False \\n        else : \\n            self.balance[account-1] -= money \\n            return True \\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564997,
                "content": [
                    {
                        "username": "artifactor",
                        "content": "It doesn\\'t require any algorithmic knowledge and the solution is simply \"fill the blanks\""
                    },
                    {
                        "username": "cswartzell",
                        "content": "For a more advanced version you might consider if its a multithreaded program, and add mutex locks to make the operations thread safe. This is a classic example for teaching locking"
                    },
                    {
                        "username": "nkhaozy",
                        "content": "Well, I think the main point for such program problem is we have to consider mult-threads and concurrency. \\n\\nThere is really no points to only write a single thread solution. \\n\\nSo lets vote to let LeetCode code for such class design problem to support multi-threads test cases."
                    },
                    {
                        "username": "cswartzell",
                        "content": "Indeed, but make this problem and easy, then require a multithread version that is a medium. "
                    },
                    {
                        "username": "DeepRabbit",
                        "content": "Is this really a medium question?"
                    },
                    {
                        "username": "sawang325",
                        "content": "There is no algorithm in this problem. Maybe you should demote this one to easy."
                    },
                    {
                        "username": "dev-null0",
                        "content": "Why is it medium? It\\'s literally an intro to programming homework assignment..."
                    },
                    {
                        "username": "Baymax_",
                        "content": "Why is it medium? :P\\n\\nSince this is a simple straight-forward question of checking validity of account/transactions and perform adding/subtracting of 2 numbers on a single thread, this should be an easy question.\\n\\nIf it involved multi-threading, then yeah, it could have been a medium question."
                    }
                ]
            },
            {
                "id": 1570662,
                "content": [
                    {
                        "username": "artifactor",
                        "content": "It doesn\\'t require any algorithmic knowledge and the solution is simply \"fill the blanks\""
                    },
                    {
                        "username": "cswartzell",
                        "content": "For a more advanced version you might consider if its a multithreaded program, and add mutex locks to make the operations thread safe. This is a classic example for teaching locking"
                    },
                    {
                        "username": "nkhaozy",
                        "content": "Well, I think the main point for such program problem is we have to consider mult-threads and concurrency. \\n\\nThere is really no points to only write a single thread solution. \\n\\nSo lets vote to let LeetCode code for such class design problem to support multi-threads test cases."
                    },
                    {
                        "username": "cswartzell",
                        "content": "Indeed, but make this problem and easy, then require a multithread version that is a medium. "
                    },
                    {
                        "username": "DeepRabbit",
                        "content": "Is this really a medium question?"
                    },
                    {
                        "username": "sawang325",
                        "content": "There is no algorithm in this problem. Maybe you should demote this one to easy."
                    },
                    {
                        "username": "dev-null0",
                        "content": "Why is it medium? It\\'s literally an intro to programming homework assignment..."
                    },
                    {
                        "username": "Baymax_",
                        "content": "Why is it medium? :P\\n\\nSince this is a simple straight-forward question of checking validity of account/transactions and perform adding/subtracting of 2 numbers on a single thread, this should be an easy question.\\n\\nIf it involved multi-threading, then yeah, it could have been a medium question."
                    }
                ]
            },
            {
                "id": 1575938,
                "content": [
                    {
                        "username": "artifactor",
                        "content": "It doesn\\'t require any algorithmic knowledge and the solution is simply \"fill the blanks\""
                    },
                    {
                        "username": "cswartzell",
                        "content": "For a more advanced version you might consider if its a multithreaded program, and add mutex locks to make the operations thread safe. This is a classic example for teaching locking"
                    },
                    {
                        "username": "nkhaozy",
                        "content": "Well, I think the main point for such program problem is we have to consider mult-threads and concurrency. \\n\\nThere is really no points to only write a single thread solution. \\n\\nSo lets vote to let LeetCode code for such class design problem to support multi-threads test cases."
                    },
                    {
                        "username": "cswartzell",
                        "content": "Indeed, but make this problem and easy, then require a multithread version that is a medium. "
                    },
                    {
                        "username": "DeepRabbit",
                        "content": "Is this really a medium question?"
                    },
                    {
                        "username": "sawang325",
                        "content": "There is no algorithm in this problem. Maybe you should demote this one to easy."
                    },
                    {
                        "username": "dev-null0",
                        "content": "Why is it medium? It\\'s literally an intro to programming homework assignment..."
                    },
                    {
                        "username": "Baymax_",
                        "content": "Why is it medium? :P\\n\\nSince this is a simple straight-forward question of checking validity of account/transactions and perform adding/subtracting of 2 numbers on a single thread, this should be an easy question.\\n\\nIf it involved multi-threading, then yeah, it could have been a medium question."
                    }
                ]
            },
            {
                "id": 2040716,
                "content": [
                    {
                        "username": "artifactor",
                        "content": "It doesn\\'t require any algorithmic knowledge and the solution is simply \"fill the blanks\""
                    },
                    {
                        "username": "cswartzell",
                        "content": "For a more advanced version you might consider if its a multithreaded program, and add mutex locks to make the operations thread safe. This is a classic example for teaching locking"
                    },
                    {
                        "username": "nkhaozy",
                        "content": "Well, I think the main point for such program problem is we have to consider mult-threads and concurrency. \\n\\nThere is really no points to only write a single thread solution. \\n\\nSo lets vote to let LeetCode code for such class design problem to support multi-threads test cases."
                    },
                    {
                        "username": "cswartzell",
                        "content": "Indeed, but make this problem and easy, then require a multithread version that is a medium. "
                    },
                    {
                        "username": "DeepRabbit",
                        "content": "Is this really a medium question?"
                    },
                    {
                        "username": "sawang325",
                        "content": "There is no algorithm in this problem. Maybe you should demote this one to easy."
                    },
                    {
                        "username": "dev-null0",
                        "content": "Why is it medium? It\\'s literally an intro to programming homework assignment..."
                    },
                    {
                        "username": "Baymax_",
                        "content": "Why is it medium? :P\\n\\nSince this is a simple straight-forward question of checking validity of account/transactions and perform adding/subtracting of 2 numbers on a single thread, this should be an easy question.\\n\\nIf it involved multi-threading, then yeah, it could have been a medium question."
                    }
                ]
            },
            {
                "id": 1779743,
                "content": [
                    {
                        "username": "artifactor",
                        "content": "It doesn\\'t require any algorithmic knowledge and the solution is simply \"fill the blanks\""
                    },
                    {
                        "username": "cswartzell",
                        "content": "For a more advanced version you might consider if its a multithreaded program, and add mutex locks to make the operations thread safe. This is a classic example for teaching locking"
                    },
                    {
                        "username": "nkhaozy",
                        "content": "Well, I think the main point for such program problem is we have to consider mult-threads and concurrency. \\n\\nThere is really no points to only write a single thread solution. \\n\\nSo lets vote to let LeetCode code for such class design problem to support multi-threads test cases."
                    },
                    {
                        "username": "cswartzell",
                        "content": "Indeed, but make this problem and easy, then require a multithread version that is a medium. "
                    },
                    {
                        "username": "DeepRabbit",
                        "content": "Is this really a medium question?"
                    },
                    {
                        "username": "sawang325",
                        "content": "There is no algorithm in this problem. Maybe you should demote this one to easy."
                    },
                    {
                        "username": "dev-null0",
                        "content": "Why is it medium? It\\'s literally an intro to programming homework assignment..."
                    },
                    {
                        "username": "Baymax_",
                        "content": "Why is it medium? :P\\n\\nSince this is a simple straight-forward question of checking validity of account/transactions and perform adding/subtracting of 2 numbers on a single thread, this should be an easy question.\\n\\nIf it involved multi-threading, then yeah, it could have been a medium question."
                    }
                ]
            },
            {
                "id": 1909859,
                "content": [
                    {
                        "username": "artifactor",
                        "content": "It doesn\\'t require any algorithmic knowledge and the solution is simply \"fill the blanks\""
                    },
                    {
                        "username": "cswartzell",
                        "content": "For a more advanced version you might consider if its a multithreaded program, and add mutex locks to make the operations thread safe. This is a classic example for teaching locking"
                    },
                    {
                        "username": "nkhaozy",
                        "content": "Well, I think the main point for such program problem is we have to consider mult-threads and concurrency. \\n\\nThere is really no points to only write a single thread solution. \\n\\nSo lets vote to let LeetCode code for such class design problem to support multi-threads test cases."
                    },
                    {
                        "username": "cswartzell",
                        "content": "Indeed, but make this problem and easy, then require a multithread version that is a medium. "
                    },
                    {
                        "username": "DeepRabbit",
                        "content": "Is this really a medium question?"
                    },
                    {
                        "username": "sawang325",
                        "content": "There is no algorithm in this problem. Maybe you should demote this one to easy."
                    },
                    {
                        "username": "dev-null0",
                        "content": "Why is it medium? It\\'s literally an intro to programming homework assignment..."
                    },
                    {
                        "username": "Baymax_",
                        "content": "Why is it medium? :P\\n\\nSince this is a simple straight-forward question of checking validity of account/transactions and perform adding/subtracting of 2 numbers on a single thread, this should be an easy question.\\n\\nIf it involved multi-threading, then yeah, it could have been a medium question."
                    }
                ]
            }
        ]
    }
]