[
    {
        "title": "Nth Highest Salary",
        "question_content": "Table: Employee\n\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id          | int  |\n| salary      | int  |\n+-------------+------+\nid is the primary key (column with unique values) for this table.\nEach row of this table contains information about the salary of an employee.\n\n&nbsp;\nWrite a solution to find the nth highest salary from the Employee table. If there is no nth highest salary, return&nbsp;null.\nThe result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n| 2  | 200    |\n| 3  | 300    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200                    |\n+------------------------+\n\nExample 2:\n\nInput: \nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1  | 100    |\n+----+--------+\nn = 2\nOutput: \n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null                   |\n+------------------------+",
        "solutions": [
            {
                "id": 53041,
                "title": "accpted-solution-for-the-nth-highest-salary",
                "content": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n    DECLARE M INT;\\n    SET M=N-1;\\n      RETURN (\\n          # Write your MySQL query statement below.\\n          SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\\n      );\\n    END",
                "solutionTags": [],
                "code": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n    DECLARE M INT;\\n    SET M=N-1;\\n      RETURN (\\n          # Write your MySQL query statement below.\\n          SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\\n      );\\n    END",
                "codeTag": "Unknown"
            },
            {
                "id": 1803647,
                "title": "best-simplest-mysql-solution-177-nth-highest-salary",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n\\n#pls upvote if you find solution easy to undestand....!! Thanks..!!!\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n\\n#pls upvote if you find solution easy to undestand....!! Thanks..!!!\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3858402,
                "title": "very-simple-and-clean-pandas-with-comments",
                "content": "\\n# Approach\\n- Drop any duplicate salary values: Use the drop_duplicates() function on the \\'salary\\' column to remove any duplicate salary values, if present. This step is essential to avoid counting duplicates as separate salary ranks.\\n\\n- Sort the unique salaries: Use the sort_values() function on the unique salary values to sort them in descending order.\\n\\n- Check if N is within the valid range: Verify if the desired Nth highest salary is within the range of unique salary values available in the DataFrame. If N exceeds the number of unique salaries, there is no Nth highest salary, and we return \\'None\\'.\\n\\n- Get the Nth highest salary: Use iloc[N - 1] to access the Nth highest salary from the sorted salaries. Subtract 1 from N because Python uses zero-based indexing\\n# Code\\n```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    # Drop any duplicate salary values to avoid counting duplicates as separate salary ranks\\n    unique_salaries = employee[\\'salary\\'].drop_duplicates()\\n\\n    # Sort the unique salaries in descending order and get the Nth highest salary\\n    sorted_salaries = unique_salaries.sort_values(ascending=False)\\n\\n    # If N exceeds the number of unique salaries, return None\\n    if N > len(sorted_salaries):\\n        return pd.DataFrame({\\'Nth Highest Salary\\': [None]})\\n    \\n    # Get the Nth highest salary from the sorted salaries\\n    nth_highest = sorted_salaries.iloc[N - 1]\\n    \\n    return pd.DataFrame({\\'Nth Highest Salary\\': [nth_highest]})\\n```\\n![upvote img.jpg](https://assets.leetcode.com/users/images/22d7c772-e447-4bec-a23a-69a2c2f5f1e0_1691069745.712749.jpeg)\\n",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    # Drop any duplicate salary values to avoid counting duplicates as separate salary ranks\\n    unique_salaries = employee[\\'salary\\'].drop_duplicates()\\n\\n    # Sort the unique salaries in descending order and get the Nth highest salary\\n    sorted_salaries = unique_salaries.sort_values(ascending=False)\\n\\n    # If N exceeds the number of unique salaries, return None\\n    if N > len(sorted_salaries):\\n        return pd.DataFrame({\\'Nth Highest Salary\\': [None]})\\n    \\n    # Get the Nth highest salary from the sorted salaries\\n    nth_highest = sorted_salaries.iloc[N - 1]\\n    \\n    return pd.DataFrame({\\'Nth Highest Salary\\': [nth_highest]})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 53062,
                "title": "no-variable-no-limit-x-1-just-one-query-808ms",
                "content": "        CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n        \\n      RETURN (\\n          # Write your MySQL query statement below.\\n          \\n        \\n          SELECT e1.Salary\\n          FROM (SELECT DISTINCT Salary FROM Employee) e1\\n          WHERE (SELECT COUNT(*) FROM (SELECT DISTINCT Salary FROM Employee) e2 WHERE e2.Salary > e1.Salary) = N - 1      \\n          \\n          LIMIT 1\\n          \\n          \\n          \\n          \\n      );\\n    END",
                "solutionTags": [],
                "code": "        CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n        \\n      RETURN (\\n          # Write your MySQL query statement below.\\n          \\n        \\n          SELECT e1.Salary\\n          FROM (SELECT DISTINCT Salary FROM Employee) e1\\n          WHERE (SELECT COUNT(*) FROM (SELECT DISTINCT Salary FROM Employee) e2 WHERE e2.Salary > e1.Salary) = N - 1      \\n          \\n          LIMIT 1\\n          \\n          \\n          \\n          \\n      );\\n    END",
                "codeTag": "Unknown"
            },
            {
                "id": 2448941,
                "title": "solution-with-detail-explanation-easy-to-understand",
                "content": "**Please upvote to motivate me ^ Thanks**\\n\\nHERE  if  N=2  THEN Second Highest salary will be Displayed\\n\\nFirst Select Column  by SELECT salary \\nNow SELECT DISTINCT salary because we don\\'t want repeating value.\\nArrange Salary in descending Order So we have Higest salary at TOP\\nNow we Only one row as output SO  LIMIT 1\\nNow  OFFSET it display N+1 row  Example. if n=2  then it will show Third Highest Salary Therefore N=N-1 is used.\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nSET N=N-1;\\n\\n  RETURN (\\n      SELECT DISTINCT salary FROM Employee ORDER BY salary DESC \\n      LIMIT 1 OFFSET N      \\n  );\\nEND\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nSET N=N-1;\\n\\n  RETURN (\\n      SELECT DISTINCT salary FROM Employee ORDER BY salary DESC \\n      LIMIT 1 OFFSET N      \\n  );\\nEND\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53071,
                "title": "my-accepted-simply-solution-any-advising",
                "content": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n        set N=N-1;\\n      RETURN (\\n          select distinct Salary from Employee order by Salary desc limit N,1\\n      );\\n    END",
                "solutionTags": [],
                "code": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n        set N=N-1;\\n      RETURN (\\n          select distinct Salary from Employee order by Salary desc limit N,1\\n      );\\n    END",
                "codeTag": "Unknown"
            },
            {
                "id": 53036,
                "title": "why-using-limit-n-1-1-will-cause-error",
                "content": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n    RETURN (\\n          # Write your MySQL query statement below.\\n          SELECT IFNULL((SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N-1 ,1), NULL)  \\n      );\\n    END\\n\\nThis was my code for the problem, but it seems there's an error near LIMIT N-1,1. Anyone has any idea why?",
                "solutionTags": [],
                "code": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n    RETURN (\\n          # Write your MySQL query statement below.\\n          SELECT IFNULL((SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N-1 ,1), NULL)  \\n      );\\n    END\\n\\nThis was my code for the problem, but it seems there's an error near LIMIT N-1,1. Anyone has any idea why?",
                "codeTag": "Unknown"
            },
            {
                "id": 498281,
                "title": "mysql-offset-by-n-1",
                "content": "The general solution which should be working for all SQL (574ms, 35.61%): \\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    # Write your MySQL query statement below.\\n    SELECT DISTINCT Salary\\n    FROM Employee e1\\n    WHERE N-1 = (SELECT COUNT(DISTINCT Salary) FROM Employee e2 WHERE e1.Salary < e2.Salary)\\n  );\\nEND\\n```\\n\\nUsing `OFFSET` in MySQL (182ms, 99.01%): \\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT; \\nSET M=N-1;\\n  RETURN (\\n    # Write your MySQL query statement below.\\n    SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET M\\n  );\\nEND\\n```\\n\\nComment: Per MySQL documentation, `OFFSET` can only take numeric contants, i.e. not `N-1`.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    # Write your MySQL query statement below.\\n    SELECT DISTINCT Salary\\n    FROM Employee e1\\n    WHERE N-1 = (SELECT COUNT(DISTINCT Salary) FROM Employee e2 WHERE e1.Salary < e2.Salary)\\n  );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT; \\nSET M=N-1;\\n  RETURN (\\n    # Write your MySQL query statement below.\\n    SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET M\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3212934,
                "title": "177-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis creates a function getNthHighestSalary that takes an integer n and returns the nth highest salary in the Employee table.\\n\\nThe function works by first subtracting 1 from the input n to account for the fact that the LIMIT clause in SQL is 0-indexed.\\n\\nIt then uses a subquery to select the DISTINCT Salary values from the Employee table, orders them in descending order using ORDER BY Salary DESC, skips the first n results using OFFSET n, and returns the first result using LIMIT 1.\\n\\nIf there are fewer than n distinct salaries in the table, the function will return NULL.\\n\\nYou can call the function by executing:\\n```\\nSELECT getNthHighestSalary(n);\\n\\n```\\nwhere n is the integer input to the function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT\\nBEGIN\\n    SET n = n-1;\\n    RETURN (\\n        SELECT DISTINCT Salary FROM Employee\\n        ORDER BY Salary DESC\\n        LIMIT 1 OFFSET n\\n    );\\nEND\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT getNthHighestSalary(n);\\n\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT\\nBEGIN\\n    SET n = n-1;\\n    RETURN (\\n        SELECT DISTINCT Salary FROM Employee\\n        ORDER BY Salary DESC\\n        LIMIT 1 OFFSET n\\n    );\\nEND\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 872818,
                "title": "using-rank",
                "content": "Here is my solution using dense_rank\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary\\n      from \\n      (select DENSE_RANK() over (order by Salary desc) as r, Salary\\n        from Employee\\n       ) as t\\n      where r =N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary\\n      from \\n      (select DENSE_RANK() over (order by Salary desc) as r, Salary\\n        from Employee\\n       ) as t\\n      where r =N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 185368,
                "title": "fast-and-easy-to-understand-mysql-solution",
                "content": "```\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  SET N=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT Salary\n      FROM Employee\n      GROUP BY Salary\n      ORDER BY Salary DESC\n      LIMIT 1 OFFSET N\n      \n  );\nEND\n```",
                "solutionTags": [],
                "code": "```\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  SET N=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT Salary\n      FROM Employee\n      GROUP BY Salary\n      ORDER BY Salary DESC\n      LIMIT 1 OFFSET N\n      \n  );\nEND\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3867257,
                "title": "pandas-vs-sql-elegant-short-all-30-days-of-pandas-solutions",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```Python []\\ndef nth_highest_salary(employee: pd.DataFrame, n: int) -> pd.DataFrame:\\n    return employee.sort_values(\\n        by=\\'salary\\',\\n        ascending=False,\\n    ).drop_duplicates(\\n        subset=[\\'salary\\'],\\n    ).iloc[n - 1:n][[\\'salary\\']]\\n```\\n```SQL []\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    SET N = N - 1;\\n    RETURN (\\n        SELECT DISTINCT(salary)\\n          FROM Employee\\n         ORDER BY salary DESC\\n         LIMIT 1\\n        OFFSET N\\n  );\\nEND\\n```\\n\\n# Important!\\n###### If you like the solution or find it useful, feel free to **upvote** for it, it will support me in creating high quality solutions)\\n\\n# 30 Days of Pandas solutions\\n\\n### Data Filtering \\u2705\\n- [Big Countries](https://leetcode.com/problems/big-countries/solutions/3848474/pandas-elegant-short-1-line/)\\n- [Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/solutions/3848500/pandas-elegant-short-1-line/)\\n- [Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/solutions/3848527/pandas-elegant-short-1-line/)\\n- [Article Views I](https://leetcode.com/problems/article-views-i/solutions/3867192/pandas-elegant-short-1-line/)\\n\\n\\n### String Methods \\u2705\\n- [Invalid Tweets](https://leetcode.com/problems/invalid-tweets/solutions/3849121/pandas-elegant-short-1-line/)\\n- [Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/solutions/3867209/pandas-elegant-short-1-line/)\\n- [Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/solutions/3849167/pandas-elegant-short-1-line/)\\n- [Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/solutions/3849177/pandas-elegant-short-1-line/)\\n- [Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/solutions/3849196/pandas-elegant-short-1-line-regex/)\\n\\n\\n### Data Manipulation \\u2705\\n- [Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/solutions/3867257/pandas-elegant-short-1-line/)\\n- [Second Highest Salary](https://leetcode.com/problems/second-highest-salary/solutions/3867278/pandas-elegant-short/)\\n- [Department Highest Salary](https://leetcode.com/problems/department-highest-salary/solutions/3867312/pandas-elegant-short-1-line/)\\n- [Rank Scores](https://leetcode.com/problems/rank-scores/solutions/3872817/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/solutions/3849211/pandas-elegant-short/)\\n- [Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/solutions/3849226/pandas-elegant-short-1-line/)\\n\\n\\n### Statistics \\u2705\\n- [The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/solutions/3849251/pandas-elegant-short-1-line/)\\n- [Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/solutions/3872719/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Count Salary Categories](https://leetcode.com/problems/count-salary-categories/solutions/3872801/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/solutions/3872715/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/solutions/3863223/pandas-elegant-short-1-line/)\\n- [Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/solutions/3863239/pandas-elegant-short-1-line/)\\n- [Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/solutions/3863249/pandas-elegant-short/)\\n- [Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/solutions/3863257/pandas-elegant-short-1-line/)\\n- [Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/solutions/3863267/pandas-elegant-short-1-line/)\\n- [Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/solutions/3863279/pandas-elegant-short-1-line/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/solutions/3863309/pandas-elegant-short/)\\n- [Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/solutions/3872822/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Students and Examinations](https://leetcode.com/problems/students-and-examinations/solutions/3872699/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/solutions/3872861/pandas-elegant-short/)\\n- [Sales Person](https://leetcode.com/problems/sales-person/solutions/3872712/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Pandas"
                ],
                "code": "```Python []\\ndef nth_highest_salary(employee: pd.DataFrame, n: int) -> pd.DataFrame:\\n    return employee.sort_values(\\n        by=\\'salary\\',\\n        ascending=False,\\n    ).drop_duplicates(\\n        subset=[\\'salary\\'],\\n    ).iloc[n - 1:n][[\\'salary\\']]\\n```\n```SQL []\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    SET N = N - 1;\\n    RETURN (\\n        SELECT DISTINCT(salary)\\n          FROM Employee\\n         ORDER BY salary DESC\\n         LIMIT 1\\n        OFFSET N\\n  );\\nEND\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2433787,
                "title": "5-different-ways-detailed-explanation",
                "content": "**Finding the highest salary**\\n```\\nselect MAX(Salary) from Employee;\\nfinding the 2nd highest salary\\n```\\n\\n**Query-1**\\n\\n```\\nSELECT MAX(Salary) FROM Employee\\nWHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee);\\n```\\n\\n**Query-2**\\n```\\nselect MAX(Salary) from Employee\\nWHERE Salary <> (select MAX(Salary) from Employee )\\n```\\n---\\n**Finding the Nth highest salary**\\n\\n**Query-1**\\n```\\nSELECT * /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( /* Subquery starts here */\\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n```\\n\\n**Query-2**\\n```\\nSELECT *\\nFROM Employee Emp1\\nWHERE (1) = (\\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n```\\n---\\n\\n**Nth highest salary in *MySQL***\\n```\\nSELECT Salary FROM Employee \\nORDER BY Salary DESC LIMIT n-1,1\\n```\\n---\\n\\n**Nth highest salary using the *TOP keyword in SQL Server***\\n```\\nSELECT TOP 1 Salary\\nFROM (\\n      SELECT DISTINCT TOP N Salary\\n      FROM Employee\\n      ORDER BY Salary DESC\\n      ) AS Emp\\nORDER BY Salary\\n```\\n\\n**Nth highest salary in *SQL Server***\\n\\n```\\nSELECT Salary FROM Employee \\nORDER BY Salary DESC OFFSET N-1 ROW(S) \\nFETCH FIRST ROW ONLY\\n```\\n---\\n\\n**Nth highest salary in Oracle using *rownum***\\n```\\nselect * from (\\n  select Emp.*, \\nrow_number() over (order by Salary DESC) rownumb \\nfrom Employee Emp\\n)\\nwhere rownumb = n;  /*n is nth highest salary*/\\n```\\n\\n**Nth highest salary in *Oracle using RANK***\\n```\\nselect * FROM (\\nselect EmployeeID, Salary\\n,rank() over (order by Salary DESC) ranking\\nfrom Employee\\n)\\nWHERE ranking = N;\\n```\\n\\n\\n*Note:* **If you like the content please upvote for further such explanation \\uD83D\\uDE4F**",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nselect MAX(Salary) from Employee;\\nfinding the 2nd highest salary\\n```\n```\\nSELECT MAX(Salary) FROM Employee\\nWHERE Salary NOT IN (SELECT MAX(Salary) FROM Employee);\\n```\n```\\nselect MAX(Salary) from Employee\\nWHERE Salary <> (select MAX(Salary) from Employee )\\n```\n```\\nSELECT * /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( /* Subquery starts here */\\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n```\n```\\nSELECT *\\nFROM Employee Emp1\\nWHERE (1) = (\\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n```\n```\\nSELECT Salary FROM Employee \\nORDER BY Salary DESC LIMIT n-1,1\\n```\n```\\nSELECT TOP 1 Salary\\nFROM (\\n      SELECT DISTINCT TOP N Salary\\n      FROM Employee\\n      ORDER BY Salary DESC\\n      ) AS Emp\\nORDER BY Salary\\n```\n```\\nSELECT Salary FROM Employee \\nORDER BY Salary DESC OFFSET N-1 ROW(S) \\nFETCH FIRST ROW ONLY\\n```\n```\\nselect * from (\\n  select Emp.*, \\nrow_number() over (order by Salary DESC) rownumb \\nfrom Employee Emp\\n)\\nwhere rownumb = n;  /*n is nth highest salary*/\\n```\n```\\nselect * FROM (\\nselect EmployeeID, Salary\\n,rank() over (order by Salary DESC) ranking\\nfrom Employee\\n)\\nWHERE ranking = N;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2170019,
                "title": "3-solutions-dense-rank-limit-comparison",
                "content": "**1st Approach**\\n\\n**Limit**\\n\\nSort the salary in descending order apply the limit N-1,1(where N-1 from where to select the salary and 1 represent to select one Salary.\\n\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      SELECT DISTINCT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT N, 1\\n      \\n  );\\nEND\\n```\\n\\n\\n**2nd Approach**\\n\\n**Dense Rank**\\n\\nDense Rank is used for give priority to salary, we will give highest priority to highest salary and select *Nth* highest priority will be our *Nth* highest salary.\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  # SET N = N - 1;\\n  RETURN (\\n      select distinct(salary) from (select salary,dense_rank() over (order by salary desc) as ds from employee) as temp where ds=N\\n      \\n  );\\nEND\\n```\\n\\n**3rd Approach**\\n\\n**Compare table data with its own duplicate**\\n\\nwe will take one salary and compare it with all the salary if there will be N-1 salary which are greater than selected salary then that will be our *Nth* highest salary.\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct(e1.salary) from employee e1 where N-1=(select count(distinct salary) from employee e2 where e2.salary>e1.salary)\\n  );\\nEND\\n```\\n\\n\\n**NOTE :- Salary will be return null itself if there will be no Nth highest Salary.**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      SELECT DISTINCT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT N, 1\\n      \\n  );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  # SET N = N - 1;\\n  RETURN (\\n      select distinct(salary) from (select salary,dense_rank() over (order by salary desc) as ds from employee) as temp where ds=N\\n      \\n  );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct(e1.salary) from employee e1 where N-1=(select count(distinct salary) from employee e2 where e2.salary>e1.salary)\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53072,
                "title": "my-simple-solution-with-order-by-and-limit",
                "content": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n      RETURN (\\n          # Write your MySQL query statement below.\\n          select if(count(*)<N,null,min(s.Salary))\\n          from \\n          (select distinct Salary\\n          from Employee\\n          order by Salary DESC\\n          limit 0,N) s\\n      );\\n    END",
                "solutionTags": [],
                "code": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n      RETURN (\\n          # Write your MySQL query statement below.\\n          select if(count(*)<N,null,min(s.Salary))\\n          from \\n          (select distinct Salary\\n          from Employee\\n          order by Salary DESC\\n          limit 0,N) s\\n      );\\n    END",
                "codeTag": "Unknown"
            },
            {
                "id": 2420827,
                "title": "mysql-easy-understanding-one-line-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n____________________________________________________________________________________________________________________________\\n\\u2705 **MySQL Code :**\\nOne line MySQL code:\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\nRETURN(  # Write your MySQL query statement below.\\n\\t\\tSELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\\n\\t  );\\nEND\\n```\\n____________________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\nRETURN(  # Write your MySQL query statement below.\\n\\t\\tSELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\\n\\t  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53078,
                "title": "accepted-solution-of-nth-highest-salary",
                "content": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n    DECLARE M INT;\\n    SET M=N-1;\\n      RETURN (\\n        # Write your MySQL query statement below.\\n        SELECT IFNULL((SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M ,1), NULL)\\n      );\\n    END",
                "solutionTags": [],
                "code": "    CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n    BEGIN\\n    DECLARE M INT;\\n    SET M=N-1;\\n      RETURN (\\n        # Write your MySQL query statement below.\\n        SELECT IFNULL((SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M ,1), NULL)\\n      );\\n    END",
                "codeTag": "Unknown"
            },
            {
                "id": 1095294,
                "title": "mysql-simple-solution-using-only-limit-offset",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N -1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary AS \\'getNthHighestSalary\\'\\n      FROM Employee\\n      ORDER BY Salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N -1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary AS \\'getNthHighestSalary\\'\\n      FROM Employee\\n      ORDER BY Salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 3848432,
                "title": "pandas-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nSort table by salary in descending order. Drop duplicated salaries.\\n\\n`.iloc[N - 1:N]` returns Nth salary if `len(table) < N`, else `null`\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    employee = employee.sort_values(\\'salary\\', ascending=False).drop_duplicates(subset=[\\'salary\\'])\\n    employee = employee.iloc[N - 1:N]\\n    return employee[[\\'salary\\']]\\n    \\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    employee = employee.sort_values(\\'salary\\', ascending=False).drop_duplicates(subset=[\\'salary\\'])\\n    employee = employee.iloc[N - 1:N]\\n    return employee[[\\'salary\\']]\\n    \\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3682411,
                "title": "easy-solution-with-two-liner-code",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe intuition behind the approach is to retrieve the Nth highest salary from the \"Employee\" table. To achieve this, we first subtract 1 from N to adjust it to the correct index. Then, we query the distinct salaries from the \"Employee\" table, order them in descending order, and use the LIMIT and OFFSET clauses to select the Nth highest salary. This approach ensures that we retrieve the desired result efficiently.\\n\\n# Approach\\n1. We start by subtracting 1 from the given input N. This is because the problem assumes 1-based indexing, but SQL uses 0-based indexing.\\n\\n1. Next, we write a MySQL query using the SELECT statement to retrieve distinct salaries from the Employee table. The DISTINCT keyword ensures that each salary value is considered only once.\\n\\n1. We order the salaries in descending order using the ORDER BY clause. This means that the highest salary will appear first in the result set.\\n\\n1. Finally, we use the LIMIT clause to restrict the result to only the Nth row, starting from the 0-based index N. Since we subtracted 1 from N earlier, this will give us the Nth highest salary.\\n# Complexity\\n- Time complexity:\\nThe time complexity of your solution depends on the efficiency of executing the SQL query. The query retrieves distinct salaries and sorts them, which typically has a time complexity of $$O(n log n)$$, where n is the number of rows in the Employee table.\\n\\n- Space complexity:\\nThe space complexity of your solution is determined by the size of the result set. Since you are retrieving a single salary, the space complexity is $$O(1)$$ or constant.\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n        SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```\\n## ***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/546be381-7a0d-415f-9815-dc4523f5a8a4_1687718638.7967603.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n        SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1069551,
                "title": "nice-clear-solution-memory-0b-less-than-100-00",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      select DISTINCT Salary\\n      from Employee\\n      order by Salary desc\\n      limit M, 1\\n      \\n  );\\nEND",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      select DISTINCT Salary\\n      from Employee\\n      order by Salary desc\\n      limit M, 1\\n      \\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1025487,
                "title": "simple-and-easy-to-understand-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary\\n      FROM EMPLOYEE\\n      ORDER BY Salary Desc\\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary\\n      FROM EMPLOYEE\\n      ORDER BY Salary Desc\\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 370799,
                "title": "my-accepted-solution",
                "content": "My first solution was with CTE query, but it gave me error - I guess it\\'s not supported on LeetCode.\\nSo, I modified it to subquery and that gave me 1807 ms since I used GROUP BY. After adding additional subquery I was able to speed up it to 686ms and that was faster than ~79%.\\n\\nHere is the solution:\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT Salary FROM \\n        (\\n            SELECT\\n                row_number() OVER (ORDER BY salary DESC) AS row_num,            \\n                emp.salary\\n            FROM (SELECT DISTINCT Salary FROM Employee) emp\\n        ) result\\n        WHERE row_num = @N        \\n    );\\nEND\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT Salary FROM \\n        (\\n            SELECT\\n                row_number() OVER (ORDER BY salary DESC) AS row_num,            \\n                emp.salary\\n            FROM (SELECT DISTINCT Salary FROM Employee) emp\\n        ) result\\n        WHERE row_num = @N        \\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2607377,
                "title": "177-nth-highest-salary",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nSET N = N-1;\\n\\n  RETURN ( SELECT DISTINCT Salary \\n           FROM Employee \\n           ORDER BY Salary DESC LIMIT N, 1);\\n  \\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nSET N = N-1;\\n\\n  RETURN ( SELECT DISTINCT Salary \\n           FROM Employee \\n           ORDER BY Salary DESC LIMIT N, 1);\\n  \\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2551284,
                "title": "177-nth-highest-salary",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nSET N = N-1;\\n\\n  RETURN ( SELECT DISTINCT Salary \\n           FROM Employee \\n           ORDER BY Salary DESC LIMIT N, 1);\\n  \\nEND",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nSET N = N-1;\\n\\n  RETURN ( SELECT DISTINCT Salary \\n           FROM Employee \\n           ORDER BY Salary DESC LIMIT N, 1);\\n  \\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1878593,
                "title": "my-sql-simple-solution",
                "content": "Please upvote if you got any perspective from the solution. Thanks in advance. Happy Leetcoding!\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from Employee e where N - 1 = (\\n        select count(distinct salary) from Employee e1 where e1.salary > e.salary\\n      )\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from Employee e where N - 1 = (\\n        select count(distinct salary) from Employee e1 where e1.salary > e.salary\\n      )\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 784487,
                "title": "ms-sql-server",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM Employee\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM Employee\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 343689,
                "title": "mysql-easy-to-understand-beats-99-time",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      select distinct(salary) from employee order by salary desc LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      select distinct(salary) from employee order by salary desc LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2585924,
                "title": "mysql-solution-using-order-by-limit-easy-step-by-step-explanation",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT M,1\\n\\n\\n);\\nEND\\n```\\n\\n**Explanation:**\\n```\\nSELECT DISTINCT salary FROM Employee\\n```\\n* First I have selected **DISTINCT salary** from **Employee** table. \\n\\n```\\nORDER BY salary DESC\\nLIMIT M,1\\n```\\n* After that I have used **ORDER BY** on **salary** in **DESCENDING ORDER**.\\n* Then I have used **LIMIT** to show only the **Nth Highest Salary** using **M variable**\\n\\n\\n```\\nDECLARE M INT;\\nSET M=N-1;\\n```\\n* Here I have declared a new integer **M**, that will be used in **the LIMIT clause** for returning the nth highest salary.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT M,1\\n\\n\\n);\\nEND\\n```\n```\\nSELECT DISTINCT salary FROM Employee\\n```\n```\\nORDER BY salary DESC\\nLIMIT M,1\\n```\n```\\nDECLARE M INT;\\nSET M=N-1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1428784,
                "title": "177-nth-highest-salary-96-faster-solution-with-comments",
                "content": "\\'\\'\\'\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\n  SET N= N-1; # change N to N-1 because in OFFSET (check query) calculation is not allowed \\n\\n  RETURN (\\n      \\n      SELECT DISTINCT Salary # TAKE distinct becuase people can have same salary\\n      FROM Employee\\n      ORDER BY Salary DESC \\n      LIMIT 1 OFFSET N       \\n  );\\nEND\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\n  SET N= N-1; # change N to N-1 because in OFFSET (check query) calculation is not allowed \\n\\n  RETURN (\\n      \\n      SELECT DISTINCT Salary # TAKE distinct becuase people can have same salary\\n      FROM Employee\\n      ORDER BY Salary DESC \\n      LIMIT 1 OFFSET N       \\n  );\\nEND\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1339995,
                "title": "sql-mysql-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary\\n      FROM Employee\\n      ORDER BY Salary DESC\\n      LIMIT N, 1\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary\\n      FROM Employee\\n      ORDER BY Salary DESC\\n      LIMIT N, 1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 742686,
                "title": "n-1-approach",
                "content": "```\\nselect max(Salary) from Employee e1 where N-1 = (select count(distinct Salary) from Employee e2 where e2.Salary > e1.Salary)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect max(Salary) from Employee e1 where N-1 = (select count(distinct Salary) from Employee e2 where e2.Salary > e1.Salary)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 376369,
                "title": "postgresql-window-function-one-liner",
                "content": "```\\nselect distinct nth_value(salary, 2) over (order by salary desc rows between unbounded preceding and unbounded following) from employee;\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct nth_value(salary, 2) over (order by salary desc rows between unbounded preceding and unbounded following) from employee;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 137017,
                "title": "oracle-solution",
                "content": "```\\nselect salary into result from (\\n        select salary,rownum r1 from\\n            (select distinct salary from Employee order by salary desc)\\n        )\\n    where r1 = n;\\n```\\nUse \"rownum\" in subqueries.\\n1st query: order of salary in desc,\\n2nd query: get rownum as r1 of ordered table in 1st query;\\n3rd query: make r1 fixed.\\nNote: use \"distinct\" to output null value.\\n",
                "solutionTags": [],
                "code": "```\\nselect salary into result from (\\n        select salary,rownum r1 from\\n            (select distinct salary from Employee order by salary desc)\\n        )\\n    where r1 = n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3850655,
                "title": "best-solutions-mysql-pandas-beats-100",
                "content": "# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N \\n  );\\nEND\\n```\\n```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    unique_salaries = employee.salary.unique()\\n    if len(unique_salaries) < N:\\n        return pd.DataFrame([np.NaN], columns=[f\\'getMthHighestSalary({N})\\'])\\n    else:\\n        salary = sorted(unique_salaries, reverse=True)[N-1]\\n        return pd.DataFrame([salary], columns=[f\\'getMthHighestSalary({N})\\'])\\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N \\n  );\\nEND\\n```\n```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    unique_salaries = employee.salary.unique()\\n    if len(unique_salaries) < N:\\n        return pd.DataFrame([np.NaN], columns=[f\\'getMthHighestSalary({N})\\'])\\n    else:\\n        salary = sorted(unique_salaries, reverse=True)[N-1]\\n        return pd.DataFrame([salary], columns=[f\\'getMthHighestSalary({N})\\'])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2340388,
                "title": "using-limit-and-offset",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) \\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) \\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 2274283,
                "title": "using-cte-and-dense-rank-beats-95-288ms-with-explanation",
                "content": "* The **DENSE_RANK()** is a window function that assigns ranks to rows in partitions with no gaps in the ranking values.\\n\\n* If two or more rows in each partition have the same values, they receive the same rank. The next row has the rank increased by one.\\n\\n* Different from the RANK() function, the DENSE_RANK() function always generates consecutive rank values.\\n\\n**DENSE_RANK() OVER(PARTITION BY.... ORDER BY....) works like this**\\n\\n* First, the PARTITION BY clause divides the result set produced by the FROM clause into partitions.\\n* Then, The ORDER BY specifies the order of rows in each partition.\\n* Finally, the DENSE_RANK() function is applied to the rows in the specified order of each partition. It resets the rank when the partition boundary is crossed.\\n \\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      WITH CTE AS\\n        (\\n            SELECT DISTINCT salary,\\n            DENSE_RANK() OVER(ORDER BY salary DESC) AS dr\\n            FROM Employee\\n        )\\n        \\n        SELECT salary \\n        FROM CTE\\n        WHERE dr = N\\n        \\n      \\n      \\n  );\\nEND\\n```\\n\\n* Here I didn\\'t Use **PARTITION BY** because there was no need to assign rank to salaries on the basis of some partition so the **DENSE_RANK()** function treated the whole result set as a single Partition\\n \\n*  The **ORDER BY** clause sorted the salaries in descending order. Then, the DENSE_RANK() \\nfunction assigned a rank to each employee by his/her salary amount.\\n\\n* and, Finally in Where clause **[ dr = N ]** , it will match the rank with number **N** and will return the salary accordingly \\n\\n* if there **Nth** same salaries, even then this code will work because i am using Dense rank which will assign same rank to same values / salaries \\n\\nIf there is any Improvement that can be done or if there is any optimised way of doing it then feel free to comment and Discuss\\n\\nThanks for Visiting, I hope my Solution solved your Problem :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      WITH CTE AS\\n        (\\n            SELECT DISTINCT salary,\\n            DENSE_RANK() OVER(ORDER BY salary DESC) AS dr\\n            FROM Employee\\n        )\\n        \\n        SELECT salary \\n        FROM CTE\\n        WHERE dr = N\\n        \\n      \\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1981339,
                "title": "mysql-solution",
                "content": "# Solution\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n     SELECT distinct salary\\n     FROM (\\n         SELECT salary, DENSE_RANK() OVER(ORDER BY salary DESC) as rn\\n         FROM Employee\\n     ) as sub_select\\n     WHERE rn = N\\n  );\\nEND\\n```\\nThe **DENSE_RANK()** is a window function that assigns a rank to each row within a partition of a result set. Unlike the **RANK()** function, the **DENSE_RANK()** function returns consecutive rank values. Rows in each partition receive the same ranks if they have the same values.\\nIf you find this **solution** and **explanation** helpful, please **upvote** it for others people.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n     SELECT distinct salary\\n     FROM (\\n         SELECT salary, DENSE_RANK() OVER(ORDER BY salary DESC) as rn\\n         FROM Employee\\n     ) as sub_select\\n     WHERE rn = N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1779118,
                "title": "mysql-solution-featuring-the-distinct-keyword",
                "content": "Solution is as follows:\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET n = N-1;\\n  RETURN (\\n    SELECT MAX(salary) FROM ( SELECT DISTINCT salary FROM Employee ORDER BY salary DESC LIMIT 1 OFFSET n ) AS max_filtered_salary\\n  );\\nEND\\n```\\nThis solution composes of 2 main parts, being just setting a variable and a return query utilizing that variable to select one value from a modified ```Employee``` list. ```n``` is set to be equal to ```N-1``` to be used as an offset when selecting one ```salary``` value from the modified ```Employee``` table, which only contains entries that have a unique ```salary``` and which has its entries sorted by their ```salary``` in descending order. Modifying this list as such and selecting a single offset value yields the N\\'th maximum value in the table ```Employee```. Using ```N``` as it is without setting a variable that\\'s one less causes the selected value to always be one after the correct answer due to offsetting starting at 0 and ```N``` starting at 1.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET n = N-1;\\n  RETURN (\\n    SELECT MAX(salary) FROM ( SELECT DISTINCT salary FROM Employee ORDER BY salary DESC LIMIT 1 OFFSET n ) AS max_filtered_salary\\n  );\\nEND\\n```\n```Employee```\n```n```\n```N-1```\n```salary```\n```Employee```\n```salary```\n```salary```\n```Employee```\n```N```\n```N```",
                "codeTag": "Unknown"
            },
            {
                "id": 1115785,
                "title": "mysql-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE IND INT;\\n  SET IND = N - 1;\\n  RETURN (\\n    # Write your MySQL query statement below.\\n    SELECT DISTINCT salary\\n    FROM employee\\n    ORDER BY salary DESC\\n    LIMIT IND, 1\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE IND INT;\\n  SET IND = N - 1;\\n  RETURN (\\n    # Write your MySQL query statement below.\\n    SELECT DISTINCT salary\\n    FROM employee\\n    ORDER BY salary DESC\\n    LIMIT IND, 1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 762752,
                "title": "simple-solution-using-cursor-and-loop",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nx Employee.salary%TYPE;\\nCURSOR cur IS SELECT DISTINCT(salary) FROM Employee ORDER BY salary DESC;\\nBEGIN\\n    OPEN cur;\\n    LOOP\\n        FETCH cur INTO x;\\n        EXIT WHEN cur%ROWCOUNT>=N OR cur%NOTFOUND;\\n    END LOOP;\\n    IF cur%ROWCOUNT=N THEN\\n        RETURN x;\\n    END IF;\\n    CLOSE cur;\\n    RETURN NULL;\\nEND;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nx Employee.salary%TYPE;\\nCURSOR cur IS SELECT DISTINCT(salary) FROM Employee ORDER BY salary DESC;\\nBEGIN\\n    OPEN cur;\\n    LOOP\\n        FETCH cur INTO x;\\n        EXIT WHEN cur%ROWCOUNT>=N OR cur%NOTFOUND;\\n    END LOOP;\\n    IF cur%ROWCOUNT=N THEN\\n        RETURN x;\\n    END IF;\\n    CLOSE cur;\\n    RETURN NULL;\\nEND;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 476084,
                "title": "nth-max-easy-solution",
                "content": "```\\nselect(select distinct salary from Employee order by Salary Desc limit 1 offset 1)  as SecondHighestSalary;\\n```\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select(select distinct salary from Employee order by Salary Desc limit 1 offset N)  as SecondHighestSalary\\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect(select distinct salary from Employee order by Salary Desc limit 1 offset 1)  as SecondHighestSalary;\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select(select distinct salary from Employee order by Salary Desc limit 1 offset N)  as SecondHighestSalary\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 310127,
                "title": "mysql-192-ms",
                "content": "First of all, this problem is why we can\\'t have nice things. This is all about dealing with f----d up edge cases that are not adequately described in the problem statement. For instance, when the description says \"if there is no nth salary\" what they mean is \"if there is no nth unique salary\". \\n\\nSecond, this problem is all about the edge cases and the improper wording on the problem. Dealing with this nonsense takes up all the time complexity AND developer time. So really, dealing with the edge case IS ACTUALLY THE PROBLEM. \\n\\nThe rest is just a side-show, whether you\\'re taking a limit of a limit, or using an offset, or a subquery of some kind, or a window function if you\\'re not on MySql (memo to leetcode: MySql supports window functions now).\\n\\nAnyway, the lion\\'s share of the problem is just understanding that the author meant to say that salaries have to be unique and if N is greater than the number of unique salaries or otherwise invalid, then return NULL. \\n\\nFor extra points, also figure out how to take the Nth unique result. Normally you can just use a common table expression and/or window function - `select salary, rank() over (order by salary desc) ...` - but if you\\'re still using a MySql version that\\'s older than Brittany Spears, here\\'s one way you can do it:\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE results INT DEFAULT 0;\\n    SET results = (select count(distinct(salary)) from Employee);\\n    IF results = 0 OR N > results THEN \\n       return NULL;\\n    ELSE\\n      SET N = N -1;\\n      RETURN (\\n          select distinct salary \\n            from Employee\\n            order by salary desc\\n            limit 1 offset N\\n      );\\n    END IF; \\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE results INT DEFAULT 0;\\n    SET results = (select count(distinct(salary)) from Employee);\\n    IF results = 0 OR N > results THEN \\n       return NULL;\\n    ELSE\\n      SET N = N -1;\\n      RETURN (\\n          select distinct salary \\n            from Employee\\n            order by salary desc\\n            limit 1 offset N\\n      );\\n    END IF; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3824433,
                "title": "100-easy-fast-clean-solution",
                "content": "IF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\nSELECT  DISTINCT salary  INTO result FROM \\n(SELECT salary,DENSE_RANK() OVER (ORDER BY salary DESC) R \\nFROM  Employee) WHERE R = N;\\nRETURN result;\\nEXCEPTION\\nWHEN NO_DATA_FOUND THEN\\nRETURN NULL;\\nEND;\\n```\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/7933690f-2a91-46ea-a242-bd59a8412075_1690471570.3773673.jpeg)\\n",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\nSELECT  DISTINCT salary  INTO result FROM \\n(SELECT salary,DENSE_RANK() OVER (ORDER BY salary DESC) R \\nFROM  Employee) WHERE R = N;\\nRETURN result;\\nEXCEPTION\\nWHEN NO_DATA_FOUND THEN\\nRETURN NULL;\\nEND;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2553483,
                "title": "mysql-2-approaches",
                "content": "Do Upvote, if it Helped :)\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      # Method 1:\\n      \\n      select distinct salary \\n      from employee e1\\n      where N = (select count(distinct(e2.salary)) from employee e2 where e2.salary >= e1.salary)\\n      \\n      # Method 2:\\n      \\n      select distinct res.salary from (\\n          select salary, DENSE_RANK() OVER (ORDER BY salary DESC) as sal_rank from employee \\n      ) res \\n      where N = res.sal_rank \\n      \\n      \\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      # Method 1:\\n      \\n      select distinct salary \\n      from employee e1\\n      where N = (select count(distinct(e2.salary)) from employee e2 where e2.salary >= e1.salary)\\n      \\n      # Method 2:\\n      \\n      select distinct res.salary from (\\n          select salary, DENSE_RANK() OVER (ORDER BY salary DESC) as sal_rank from employee \\n      ) res \\n      where N = res.sal_rank \\n      \\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2524485,
                "title": "mysql-simple-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare M int;\\nset M = N - 1;\\n  RETURN (\\n    select distinct salary from employee order by salary desc limit M, 1\\n  );\\nEND\\n``",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare M int;\\nset M = N - 1;\\n  RETURN (\\n    select distinct salary from employee order by salary desc limit M, 1\\n  );\\nEND\\n``",
                "codeTag": "Unknown"
            },
            {
                "id": 2123342,
                "title": "two-easy-sollutions",
                "content": "**Upvote if this finds helpful to you!**\\n\\n 1.\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       select distinct salary from Employee order by salary desc limit 1 offset M\\n);\\nEND\\n```\\n2.\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\nselect  case \\n           when (select count(distinct salary) from Employee)>N-1 then salary\\n           else null\\n        end\\nfrom (\\n       select salary from Employee\\n       group by salary\\n       order by salary desc\\n       limit N\\n)  \\nas sub\\norder by salary asc \\nlimit 1 \\n);\\nEND\\n\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       select distinct salary from Employee order by salary desc limit 1 offset M\\n);\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\nselect  case \\n           when (select count(distinct salary) from Employee)>N-1 then salary\\n           else null\\n        end\\nfrom (\\n       select salary from Employee\\n       group by salary\\n       order by salary desc\\n       limit N\\n)  \\nas sub\\norder by salary asc \\nlimit 1 \\n);\\nEND\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1893876,
                "title": "mysql-faster-than-79-80-elegant-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE total INT;\\n    SET total = N - 1;\\n    RETURN (\\n        SELECT IFNULL(\\n            (\\n                SELECT DISTINCT salary FROM Employee \\n                ORDER BY salary DESC \\n                LIMIT 1 \\n                OFFSET total\\n            ), \\n            NULL\\n        )\\n    );\\nEND\\n```\\n\\n![image](https://assets.leetcode.com/users/images/5025a67a-aa61-4aec-b74f-9c6ebc0dbb58_1648542410.3723059.png)\\n",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE total INT;\\n    SET total = N - 1;\\n    RETURN (\\n        SELECT IFNULL(\\n            (\\n                SELECT DISTINCT salary FROM Employee \\n                ORDER BY salary DESC \\n                LIMIT 1 \\n                OFFSET total\\n            ), \\n            NULL\\n        )\\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1387878,
                "title": "offset-limit",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE X INT;\\n  SET X=N-1;\\n  \\n  RETURN (\\n      SELECT Salary\\n      FROM Employee\\n      GROUP BY Salary\\n      ORDER BY Salary DESC\\n      LIMIT 1\\n      OFFSET X\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE X INT;\\n  SET X=N-1;\\n  \\n  RETURN (\\n      SELECT Salary\\n      FROM Employee\\n      GROUP BY Salary\\n      ORDER BY Salary DESC\\n      LIMIT 1\\n      OFFSET X\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 910051,
                "title": "nth-highest-salary",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n    SELECT DISTINCT e.salary\\n      FROM Employee e\\n      ORDER BY e.salary DESC\\n      limit N, 1\\n  );\\n  \\n  \\n  \\n  CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n    SELECT DISTINCT salary\\n      FROM Employee \\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n    SELECT DISTINCT e.salary\\n      FROM Employee e\\n      ORDER BY e.salary DESC\\n      limit N, 1\\n  );\\n  \\n  \\n  \\n  CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n    SELECT DISTINCT salary\\n      FROM Employee \\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 905399,
                "title": "mysql-use-limit",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from Employee order by salary DESC limit 1 OFFSET M\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from Employee order by salary DESC limit 1 OFFSET M\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 843586,
                "title": "limit-offset",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary \\n\\t  FROM Employee \\n\\t  ORDER BY Salary DESC \\n\\t  LIMIT 1 OFFSET M\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary \\n\\t  FROM Employee \\n\\t  ORDER BY Salary DESC \\n\\t  LIMIT 1 OFFSET M\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 623299,
                "title": "mysql-with-dense-rank",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    select salary from (\\n        select distinct salary, \\n              DENSE_RANK() over (order by salary desc) as row_num\\n        from Employee) temp\\n    where row_num=N\\n  );\\nEND```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    select salary from (\\n        select distinct salary, \\n              DENSE_RANK() over (order by salary desc) as row_num\\n        from Employee) temp\\n    where row_num=N\\n  );\\nEND```",
                "codeTag": "Unknown"
            },
            {
                "id": 235106,
                "title": "simple-mysql-180ms",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      SELECT Salary\\n      FROM Employee     \\n      GROUP BY Salary \\n      ORDER BY Salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      SELECT Salary\\n      FROM Employee     \\n      GROUP BY Salary \\n      ORDER BY Salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 126179,
                "title": "accepted-sql-server-solution",
                "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT distinct top 1 Salary from Employee where Salary not in\\n        (SELECT distinct top ((@N) - 1) Salary from Employee order by Salary desc) ORDER BY Salary DESC\\n    );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT distinct top 1 Salary from Employee where Salary not in\\n        (SELECT distinct top ((@N) - 1) Salary from Employee order by Salary desc) ORDER BY Salary DESC\\n    );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 53081,
                "title": "my-accepted-solution-813ms",
                "content": "    select  IF(count(*) >= N, Min(rank.Salary), NULL) salary\\n    from (select distinct salary\\n          from Employee     \\n          order by salary desc\\n          limit N\\n     ) rank",
                "solutionTags": [],
                "code": "    select  IF(count(*) >= N, Min(rank.Salary), NULL) salary\\n    from (select distinct salary\\n          from Employee     \\n          order by salary desc\\n          limit N\\n     ) rank",
                "codeTag": "Unknown"
            },
            {
                "id": 3523697,
                "title": "mysql-solution-for-nth-highest-salary-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal of this MySQL function is to retrieve the Nth highest salary from the Employee table.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Declare a variable M and set it to N - 1. This is because the LIMIT clause uses a zero-based index, so the Nth highest salary corresponds to the (N-1)th row in the result set.\\n2. Use a subquery to select the distinct salaries from the Employee table, ordered in descending order.\\n3. Use the LIMIT clause to limit the result set to one row, starting from the (N-1)th row (i.e., offset M).\\n4. Return the result of the subquery as the output of the function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this function depends on the size of the Employee table and the value of the input parameter N. In general, the time complexity of a subquery with an ORDER BY clause is O(n * log n), where n is the number of rows in the table. The LIMIT clause reduces the number of rows returned by the subquery, so the actual time complexity may be less than O(n * log n). However, the function must be called once for each value of N, so the overall time complexity is O(k * n * log n), where k is the number of times the function is called.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this function depends on the size of the result set and the size of the columns being selected. In this case, the result set will have at most one row and one column (Salary). Therefore, the space complexity is O(1). The space used by the variable M is also constant, so it does not affect the overall space complexity\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    declare M INT;\\n    set M = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit 1 offset M\\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    declare M INT;\\n    set M = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit 1 offset M\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3371415,
                "title": "using-ifnull-and-limit",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M =N-1;\\n  RETURN (\\n   \\n      IFNULL((SELECT DISTINCT salary FROM Employee ORDER BY salary DESC LIMIT M, 1),NULL)\\n      \\n       );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M =N-1;\\n  RETURN (\\n   \\n      IFNULL((SELECT DISTINCT salary FROM Employee ORDER BY salary DESC LIMIT M, 1),NULL)\\n      \\n       );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3218633,
                "title": "81-with-row-number-sql-server",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n-- CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\n-- BEGIN\\n--     RETURN (\\n        \\n--         SELECT\\n-- \\t\\t\\tDISTINCT E.Salary\\n-- \\t\\tFROM\\n-- \\t\\t\\tEmployee E\\n-- \\t\\tWHERE\\n-- \\t\\t\\t@N = (\\n-- \\t\\t\\t\\tSELECT\\n-- \\t\\t\\t\\t\\tCOUNT(DISTINCT Salary) FROM Employee E2\\n-- \\t\\t\\t\\t\\tWHERE\\n-- \\t\\t\\t\\t\\t\\tE.Salary <= E2.Salary\\n-- \\t\\t\\t)\\n        \\n        \\n--     );\\n-- END\\n\\n\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n \\n\\tDECLARE @RESULT INT = 0\\n\\t;WITH CTE AS (SELECT\\n\\t\\t\\tDISTINCT Salary\\n\\t\\tFROM\\n\\t\\t\\tEmployee\\n\\t\\t\\t),\\n\\t\\tCTE2 AS (SELECT\\n\\t\\t\\tSalary,\\n\\t\\t\\tROW_NUMBER() OVER(ORDER BY Salary DESC) RANKED\\n\\t\\tFROM\\n\\t\\t\\tCTE\\n\\t\\t)\\n\\t\\tSELECT  @RESULT = ISNULL((SELECT\\n\\t\\t\\tSalary\\n\\t\\tFROM\\t\\n\\t\\t\\tCTE2\\n\\t\\tWHERE \\n\\t\\t\\tRANKED = @N),NULL) \\n        \\n\\t\\tRETURN @RESULT\\nEND\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n-- CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\n-- BEGIN\\n--     RETURN (\\n        \\n--         SELECT\\n-- \\t\\t\\tDISTINCT E.Salary\\n-- \\t\\tFROM\\n-- \\t\\t\\tEmployee E\\n-- \\t\\tWHERE\\n-- \\t\\t\\t@N = (\\n-- \\t\\t\\t\\tSELECT\\n-- \\t\\t\\t\\t\\tCOUNT(DISTINCT Salary) FROM Employee E2\\n-- \\t\\t\\t\\t\\tWHERE\\n-- \\t\\t\\t\\t\\t\\tE.Salary <= E2.Salary\\n-- \\t\\t\\t)\\n        \\n        \\n--     );\\n-- END\\n\\n\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n \\n\\tDECLARE @RESULT INT = 0\\n\\t;WITH CTE AS (SELECT\\n\\t\\t\\tDISTINCT Salary\\n\\t\\tFROM\\n\\t\\t\\tEmployee\\n\\t\\t\\t),\\n\\t\\tCTE2 AS (SELECT\\n\\t\\t\\tSalary,\\n\\t\\t\\tROW_NUMBER() OVER(ORDER BY Salary DESC) RANKED\\n\\t\\tFROM\\n\\t\\t\\tCTE\\n\\t\\t)\\n\\t\\tSELECT  @RESULT = ISNULL((SELECT\\n\\t\\t\\tSalary\\n\\t\\tFROM\\t\\n\\t\\t\\tCTE2\\n\\t\\tWHERE \\n\\t\\t\\tRANKED = @N),NULL) \\n        \\n\\t\\tRETURN @RESULT\\nEND\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3171311,
                "title": "mysql-easy-approach",
                "content": "Here is my MYSQL code for this problem.\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare x int;\\nset x=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from Employee group by salary order by salary desc limit x,1\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare x int;\\nset x=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from Employee group by salary order by salary desc limit x,1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2680604,
                "title": "mysql-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    SET N = N - 1;\\n  RETURN (\\n      SELECT DISTINCT salary\\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    SET N = N - 1;\\n  RETURN (\\n      SELECT DISTINCT salary\\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2341775,
                "title": "2-mysql-sols-dense-rank-limit-offset",
                "content": "### 1. Using `DENSE_RANK() OVER`\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary\\n      FROM (\\n            SELECT \\n                salary,\\n                DENSE_RANK() OVER (ORDER BY salary DESC) AS \\'index_no\\'\\n            FROM Employee) e\\n      WHERE index_no = N\\n  );\\nEND\\n```\\n\\n### 2. Using `LIMIT` & `OFFSET`\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT(salary)\\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET M  \\n  );\\nEND\\n```\\n\\n\\n##### Further Readings:\\n* [RANK() vs DENSE_RANK() vs ROW_NUMBER() - StackOverFlow](https://stackoverflow.com/a/22081083)\\n\\nThanks for reading!\\nIf there\\'s any error or doubt, do comment. Feedbacks are always appreciated!!",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary\\n      FROM (\\n            SELECT \\n                salary,\\n                DENSE_RANK() OVER (ORDER BY salary DESC) AS \\'index_no\\'\\n            FROM Employee) e\\n      WHERE index_no = N\\n  );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT(salary)\\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET M  \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2225324,
                "title": "mysql-simple-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT BEGIN\\nSET\\n    N = N -1;\\n\\nRETURN (\\n    SELECT\\n        DISTINCT salary\\n    FROM\\n        employee\\n    ORDER BY\\n        salary DESC\\n    LIMIT\\n        1 OFFSET N\\n);\\n\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT BEGIN\\nSET\\n    N = N -1;\\n\\nRETURN (\\n    SELECT\\n        DISTINCT salary\\n    FROM\\n        employee\\n    ORDER BY\\n        salary DESC\\n    LIMIT\\n        1 OFFSET N\\n);\\n\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2135131,
                "title": "mysql-limit-offset",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE K INT;\\nSET K = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT (\\n      SELECT DISTINCT SALARY \\n      FROM EMPLOYEE\\n      ORDER BY SALARY DESC\\n      LIMIT 1 OFFSET K) AS getNthHighestSalary\\n      \\n      \\n  );\\nEND\\n```\\nPLEASE **UPVOTE**.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE K INT;\\nSET K = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT (\\n      SELECT DISTINCT SALARY \\n      FROM EMPLOYEE\\n      ORDER BY SALARY DESC\\n      LIMIT 1 OFFSET K) AS getNthHighestSalary\\n      \\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2045879,
                "title": "solution-with-group-by",
                "content": "```CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT salary FROM Employee\\n      GROUP BY salary\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  ); \\nEND\\n```",
                "solutionTags": [],
                "code": "```CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT salary FROM Employee\\n      GROUP BY salary\\n      ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  ); \\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1924936,
                "title": "mysql-solution-for-nth-highest-salary",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT m.salary\\n    FROM\\n        (\\n            SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) \\'rank\\' \\n            FROM Employee\\n        ) m\\n    WHERE m.rank=N limit 1\\n  );\\nEND\\n```\\n",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT m.salary\\n    FROM\\n        (\\n            SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) \\'rank\\' \\n            FROM Employee\\n        ) m\\n    WHERE m.rank=N limit 1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1852002,
                "title": "mysql-using-limit-and-offset-faster-than-100",
                "content": "Order the records by salary in desc order\\nLimit results to 1 row\\nOffset N-1. (Skip all the rows before the intended row)\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT DEFAULT 0;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select (select distinct salary from Employee order by salary desc limit 1 offset M)\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT DEFAULT 0;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select (select distinct salary from Employee order by salary desc limit 1 offset M)\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1793875,
                "title": "oracle-dense-rank-exception",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n   \\n    select distinct salary\\n      into result\\n      from (select salary\\n                 , dense_rank() over (order by salary desc) rn\\n              from Employee)\\n     where rn = n; \\n     \\n        return result;\\nexception \\n    when no_data_found then\\n        return null;\\n    \\nEND;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n   \\n    select distinct salary\\n      into result\\n      from (select salary\\n                 , dense_rank() over (order by salary desc) rn\\n              from Employee)\\n     where rn = n; \\n     \\n        return result;\\nexception \\n    when no_data_found then\\n        return null;\\n    \\nEND;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1664144,
                "title": "simplest-ms-sql-server-solution-using-dense-rank",
                "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n\\t\\t//we are using top 1 beacuse in case of multiple records with same salary we just want to return single salary\\n        select top 1 salary AS getNthHighestSalary from \\n        (select id,salary,DENSE_RANK() over (order by salary desc)AS ranking from  Employee)temp\\n        where temp.ranking= @N\\n      );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n\\t\\t//we are using top 1 beacuse in case of multiple records with same salary we just want to return single salary\\n        select top 1 salary AS getNthHighestSalary from \\n        (select id,salary,DENSE_RANK() over (order by salary desc)AS ranking from  Employee)temp\\n        where temp.ranking= @N\\n      );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1656862,
                "title": "accepted-281ms-solution-just-add-one-variable-term-n-n-1",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      # select   avg(salary) from employee try and error method \\n        select distinct salary from employee order by salary desc\\n        limit 1 offset n\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      # select   avg(salary) from employee try and error method \\n        select distinct salary from employee order by salary desc\\n        limit 1 offset n\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1652756,
                "title": "nth-highest-salary-using-limit-and-ifnull",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT\\nBEGIN\\n\\n  DECLARE _offset int ;\\n  SET _offset = n-1;\\n  \\n  RETURN (\\n      \\n        select ifnull( \\n            \\n            (select distinct(salary) from Employee order by salary desc limit 1 offset _offset )\\n            , null)  \\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT\\nBEGIN\\n\\n  DECLARE _offset int ;\\n  SET _offset = n-1;\\n  \\n  RETURN (\\n      \\n        select ifnull( \\n            \\n            (select distinct(salary) from Employee order by salary desc limit 1 offset _offset )\\n            , null)  \\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1374596,
                "title": "dense-rank",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n      select distinct salary from\\n      (select salary,dense_rank() over (order by salary desc) salaryrank from employee)t\\n      where t.salaryrank=N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n      select distinct salary from\\n      (select salary,dense_rank() over (order by salary desc) salaryrank from employee)t\\n      where t.salaryrank=N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1128521,
                "title": "ms-sql-solution-row-number-and-max-for-null",
                "content": "Using Row_Number to create the rank. Rank and Dense_Rank also work as well.  Using Max to return NULL if there is no # highest salary.\\n\\nThis also works with #176 \"Second Highest Salary\".\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n\\nSELECT salary = MAX(salary) FROM (\\n    SELECT  ROW_NUMBER() OVER(ORDER BY salary DESC) AS ranking, salary FROM\\n    (\\n        SELECT DISTINCT Salary FROM Employee) A\\n    ) B\\nWHERE ranking =  @N\\n        \\n    );\\nEND",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "Using Row_Number to create the rank. Rank and Dense_Rank also work as well.  Using Max to return NULL if there is no # highest salary.\\n\\nThis also works with #176 \"Second Highest Salary\".\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n\\nSELECT salary = MAX(salary) FROM (\\n    SELECT  ROW_NUMBER() OVER(ORDER BY salary DESC) AS ranking, salary FROM\\n    (\\n        SELECT DISTINCT Salary FROM Employee) A\\n    ) B\\nWHERE ranking =  @N\\n        \\n    );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1092098,
                "title": "mysql-very-easy-to-understand",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT Salary\\n      FROM\\n          (SELECT\\n            Salary,\\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS \\'Rank\\'\\n          FROM Employee) T1\\n      WHERE T1.Rank = N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT Salary\\n      FROM\\n          (SELECT\\n            Salary,\\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS \\'Rank\\'\\n          FROM Employee) T1\\n      WHERE T1.Rank = N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1051200,
                "title": "3-solutions-for-oracle-mysql-and-sql-server",
                "content": "ORACLE\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(Salary) INTO result\\n    FROM (\\n        SELECT Salary, DENSE_RANK() OVER(ORDER BY Salary DESC) AS RK\\n        FROM Employee\\n     ) T\\n     WHERE RK = N;\\n    \\n    RETURN result;\\nEND;\\n```\\n\\nMySQL\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT Salary\\n      FROM (\\n        SELECT \\n          Salary,\\n          DENSE_RANK() OVER(ORDER BY Salary DESC) AS RK\\n        FROM Employee\\n            ) T\\n      WHERE RK = N\\n  );\\nEND\\n```\\n\\nSQL Server\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM (\\n        SELECT \\n          Salary,\\n          DENSE_RANK() OVER(ORDER BY Salary DESC) AS RK\\n        FROM Employee\\n            ) T\\n        WHERE RK = @N\\n        \\n    );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(Salary) INTO result\\n    FROM (\\n        SELECT Salary, DENSE_RANK() OVER(ORDER BY Salary DESC) AS RK\\n        FROM Employee\\n     ) T\\n     WHERE RK = N;\\n    \\n    RETURN result;\\nEND;\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT Salary\\n      FROM (\\n        SELECT \\n          Salary,\\n          DENSE_RANK() OVER(ORDER BY Salary DESC) AS RK\\n        FROM Employee\\n            ) T\\n      WHERE RK = N\\n  );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM (\\n        SELECT \\n          Salary,\\n          DENSE_RANK() OVER(ORDER BY Salary DESC) AS RK\\n        FROM Employee\\n            ) T\\n        WHERE RK = @N\\n        \\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1005765,
                "title": "mysql-solution",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select max(Salary) from\\n      (select Salary,\\n      dense_rank() over(order by Salary desc) as rnk\\n      from Employee) sub\\n      where rnk = N\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select max(Salary) from\\n      (select Salary,\\n      dense_rank() over(order by Salary desc) as rnk\\n      from Employee) sub\\n      where rnk = N\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 797377,
                "title": "simple-mysql-solution-accepted-using-order-by-limit-offset",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary \\n        from Employee\\n        order by Salary DESC\\n        LIMIT 1 OFFSET N\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary \\n        from Employee\\n        order by Salary DESC\\n        LIMIT 1 OFFSET N\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 694577,
                "title": "super-simple-solution-with-mysql-does-not-involve-dense-rank",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set N = N - 1;\\n  RETURN (\\n      Select Salary from Employee group by Salary order by Salary DESC limit 1 offset N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set N = N - 1;\\n  RETURN (\\n      Select Salary from Employee group by Salary order by Salary DESC limit 1 offset N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 570982,
                "title": "oracle-dense-rank-select-into",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    select max(Salary) into result\\n    from\\n        (select Salary, dense_rank() over(order by Salary desc) as rank\\n        from Employee) tb1 \\n    where tb1.rank = N;\\n    RETURN result;\\nEND;\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    select max(Salary) into result\\n    from\\n        (select Salary, dense_rank() over(order by Salary desc) as rank\\n        from Employee) tb1 \\n    where tb1.rank = N;\\n    RETURN result;\\nEND;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 542447,
                "title": "ms-sql-faster-than-98-39-easy-to-understand",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC OFFSET @N-1 ROWS FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC OFFSET @N-1 ROWS FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 348158,
                "title": "mssql-offset-fetch",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT(Salary) \\n        FROM Employee  \\n        ORDER BY Salary DESC\\n        OFFSET @N - 1 ROWS FETCH FIRST 1 ROW ONLY \\n    );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT(Salary) \\n        FROM Employee  \\n        ORDER BY Salary DESC\\n        OFFSET @N - 1 ROWS FETCH FIRST 1 ROW ONLY \\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 238265,
                "title": "accepted-solution-in-mysql-ms-sql-and-oracle",
                "content": "--challenge 177: Using MySQL\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n DECLARE M INT;\\n SET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.      \\n      select distinct Salary\\n      from Employee\\n      order by Salary desc\\n      LIMIT M,1\\n  );\\nEND\\n```\\n\\n--challenge 177: Using MS SQL\\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        \\n          select distinct Salary\\n          from \\n           (select dense_rank() over (order by salary desc) as Ranks, ID, Salary\\n            from Employee) as a\\n            where a.Ranks = @N\\n    );\\nEND\\n```\\n\\n--challenge 177: Using Oracle\\n\\n```\\n\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n        \\n    select distinct Salary into result\\n    from \\n        (select dense_rank() over (order by salary desc) as Ranks, ID, Salary\\n         from Employee) a\\n         where a.Ranks = N;\\n        \\nRETURN result;\\nEND\\n```\\n",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n DECLARE M INT;\\n SET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.      \\n      select distinct Salary\\n      from Employee\\n      order by Salary desc\\n      LIMIT M,1\\n  );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        \\n          select distinct Salary\\n          from \\n           (select dense_rank() over (order by salary desc) as Ranks, ID, Salary\\n            from Employee) as a\\n            where a.Ranks = @N\\n    );\\nEND\\n```\n```\\n\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n        \\n    select distinct Salary into result\\n    from \\n        (select dense_rank() over (order by salary desc) as Ranks, ID, Salary\\n         from Employee) a\\n         where a.Ranks = N;\\n        \\nRETURN result;\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 218619,
                "title": "easy-sql",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary AS getNthHighestSalary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary AS getNthHighestSalary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 180302,
                "title": "limit-and-offset-used",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    set N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit 1 offset N\\n      \\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    set N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit 1 offset N\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3913723,
                "title": "pandas-solution",
                "content": "# Code\\n```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    sorted_salary = employee[\\'salary\\'].sort_values(ascending=False).drop_duplicates()\\n    if N > len(sorted_salary):\\n        return pd.DataFrame({f\\'getNthHighestSalary({N})\\': [None]})\\n    nth_highest = sorted_salary.iloc[N-1]\\n    return pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nth_highest]})\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    sorted_salary = employee[\\'salary\\'].sort_values(ascending=False).drop_duplicates()\\n    if N > len(sorted_salary):\\n        return pd.DataFrame({f\\'getNthHighestSalary({N})\\': [None]})\\n    nth_highest = sorted_salary.iloc[N-1]\\n    return pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nth_highest]})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3911452,
                "title": "pandas-clean-code-solution-for-beginners",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    df = employee[\\'salary\\'].drop_duplicates().sort_values(ascending=False)\\n    \\n    if len(df) < N:\\n        return pd.DataFrame([], columns=[\"getNthHighestSalary({})\".format(N)])\\n    \\n    max_value = df.iloc[N-1]\\n    \\n    result = pd.DataFrame([max_value], columns=[\"getNthHighestSalary({})\".format(N)])\\n    \\n    return result\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    df = employee[\\'salary\\'].drop_duplicates().sort_values(ascending=False)\\n    \\n    if len(df) < N:\\n        return pd.DataFrame([], columns=[\"getNthHighestSalary({})\".format(N)])\\n    \\n    max_value = df.iloc[N-1]\\n    \\n    result = pd.DataFrame([max_value], columns=[\"getNthHighestSalary({})\".format(N)])\\n    \\n    return result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3323063,
                "title": "mysql-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    SET N=N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) FROM Employee order by salary DESC \\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    SET N=N-1;\\n  RETURN (\\n      SELECT DISTINCT(salary) FROM Employee order by salary DESC \\n      LIMIT 1 OFFSET N\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2866120,
                "title": "100-space-optimized-mysql-correlated-queries-without-limit-without-dense-rank",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT\\nBEGIN\\n    RETURN (\\n        SELECT distinct salary FROM Employee e1 WHERE n-1 = (SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e2.salary > e1.salary)\\n \\n    );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(n INT) RETURNS INT\\nBEGIN\\n    RETURN (\\n        SELECT distinct salary FROM Employee e1 WHERE n-1 = (SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e2.salary > e1.salary)\\n \\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2670045,
                "title": "mssql-dense-rank",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select max(a.salary) from \\n(select salary, dense_rank() over (order by salary desc) as rn\\nfrom Employee ) a\\nwhere a.rn = @N\\n    );\\nEND\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select max(a.salary) from \\n(select salary, dense_rank() over (order by salary desc) as rn\\nfrom Employee ) a\\nwhere a.rn = @N\\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2557321,
                "title": "without-offset",
                "content": "`If count of all distinct salary is less than N then Nth highest salary doesn\\'t exist else \\nfirst select N highest salary then return minumum of it.`\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN ( \\n     case \\n      when (select count(distinct (salary)) from Employee)<N then null \\n      else(\\n      select salary from \\n      (select distinct(salary) from Employee order by salary desc\\n      limit N) as Emp \\n      order by salary \\n      limit 1)\\n      end\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN ( \\n     case \\n      when (select count(distinct (salary)) from Employee)<N then null \\n      else(\\n      select salary from \\n      (select distinct(salary) from Employee order by salary desc\\n      limit N) as Emp \\n      order by salary \\n      limit 1)\\n      end\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2467558,
                "title": "nth-highest-salary",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n     with res as\\n      (select *, DENSE_RANK() over(order by salary DESC) as sal_rank from employee)\\n        select distinct(salary) from res where sal_rank = N  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n     with res as\\n      (select *, DENSE_RANK() over(order by salary DESC) as sal_rank from employee)\\n        select distinct(salary) from res where sal_rank = N  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 2366323,
                "title": "easy-solution-mysql",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      select max(salary) from employee e1 where N-1=\\n      (select count(distinct salary) from employee e2 where e2.salary>e1.salary)\\n      \\n  );\\nEND\\n``` Please \\uD83D\\uDC46 vote.",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      select max(salary) from employee e1 where N-1=\\n      (select count(distinct salary) from employee e2 where e2.salary>e1.salary)\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2321336,
                "title": "my-sql-simple-solution-offset-limit-easy-to-read",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE newNum INT; \\n    SET newNum = N - 1;\\n    \\n    RETURN (      \\n        SELECT DISTINCT salary\\n        FROM Employee\\n        ORDER BY salary DESC\\n        LIMIT 1\\n        OFFSET newNum\\n  );\\nEND\\n```\\n#### **uP  votE  iF  yoU  likE  thE  solutioN. **",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE newNum INT; \\n    SET newNum = N - 1;\\n    \\n    RETURN (      \\n        SELECT DISTINCT salary\\n        FROM Employee\\n        ORDER BY salary DESC\\n        LIMIT 1\\n        OFFSET newNum\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2247973,
                "title": "sql-ms-sql-server-and-oracle-solutions-using-dense-rank-function",
                "content": "Please Feel free to give other suggestions which are faster than these solutions. Also upvote if you are finding these solutions helpful.\\n\\nSQL Solution - \\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) \\nRETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT \\n        SALARY\\n      FROM\\n        (SELECT\\n            SALARY, \\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RNK\\n         FROM\\n            EMPLOYEE) AS T\\n      WHERE\\n        T.RNK = N \\n      LIMIT 0, 1\\n  );\\nEND\\n```\\n\\nMS SQL Server Solution - \\n\\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n      SELECT \\n         TOP 1 SALARY\\n      FROM\\n        (SELECT\\n            SALARY, \\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RNK\\n         FROM\\n            EMPLOYEE) AS T\\n      WHERE\\n        T.RNK = @N  \\n    );\\nEND\\n```\\n\\nOracle Solution - \\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n   \\n    SELECT \\n         SALARY INTO result\\n      FROM\\n        (SELECT\\n            SALARY, \\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RNK\\n         FROM\\n            EMPLOYEE)\\n      WHERE\\n        RNK = N\\n      AND\\n        ROWNUM = 1;  \\n    RETURN result;\\nEND;\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) \\nRETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT \\n        SALARY\\n      FROM\\n        (SELECT\\n            SALARY, \\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RNK\\n         FROM\\n            EMPLOYEE) AS T\\n      WHERE\\n        T.RNK = N \\n      LIMIT 0, 1\\n  );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n      SELECT \\n         TOP 1 SALARY\\n      FROM\\n        (SELECT\\n            SALARY, \\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RNK\\n         FROM\\n            EMPLOYEE) AS T\\n      WHERE\\n        T.RNK = @N  \\n    );\\nEND\\n```\n```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n   \\n    SELECT \\n         SALARY INTO result\\n      FROM\\n        (SELECT\\n            SALARY, \\n            DENSE_RANK() OVER (ORDER BY SALARY DESC) AS RNK\\n         FROM\\n            EMPLOYEE)\\n      WHERE\\n        RNK = N\\n      AND\\n        ROWNUM = 1;  \\n    RETURN result;\\nEND;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1948144,
                "title": "mysql-query-76-59-time-100-0-space-limit-offset-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE OFFSET_VAR INT DEFAULT N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select DISTINCT salary from Employee order by salary DESC limit 1 OFFSET OFFSET_VAR\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE OFFSET_VAR INT DEFAULT N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select DISTINCT salary from Employee order by salary DESC limit 1 OFFSET OFFSET_VAR\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1888990,
                "title": "ms-sql-server-dense-rank-82-58-faster",
                "content": "select distinct salary\\nfrom\\n(\\nselect salary\\n,\\ndense_rank() over (order by salary desc) as dr\\nfrom Employee\\n)\\nas source\\nwhere dr=@N",
                "solutionTags": [],
                "code": "select distinct salary\\nfrom\\n(\\nselect salary\\n,\\ndense_rank() over (order by salary desc) as dr\\nfrom Employee\\n)\\nas source\\nwhere dr=@N",
                "codeTag": "Unknown"
            },
            {
                "id": 1743141,
                "title": "mysql-ifnull-distinct-orderby-limit",
                "content": "### \\n\\n```SQL\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      SELECT IFNULL(\\n      (\\n          SELECT DISTINCT salary FROM Employee\\n          ORDER BY salary DESC\\n          LIMIT N,1\\n      ) , null)\\n      \\n      \\n  );\\nEND\\n```\\n\\n### Notes:\\n\\n- `IFNULL(expression, alt_value)` returns a specified value if the expression is NULL.\\n- Use `LIMIT` to choose the specific value(s).\\n- Use `SET` to update the variable - `LIMIT` in SQL is 0-based, so `N` needs to be subtracted 1 off, and it needs to happen before `RETURN`.\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```SQL\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      SELECT IFNULL(\\n      (\\n          SELECT DISTINCT salary FROM Employee\\n          ORDER BY salary DESC\\n          LIMIT N,1\\n      ) , null)\\n      \\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1725554,
                "title": "mysql-solution",
                "content": "```\\n######################################################\\n\\n#   Runtime: 292ms   -   80.97%\\n#   Memory: 0B  -   100.00%\\n\\n######################################################\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  # We set N to N - 1 here because, LIMIT is 0 based. So LIMIT N, 1 will give us\\n  # (N+1)st largest salary instead of Nth largest. We can\\'t give LIMIT N-1,1 in the\\n  # query. So we are creating this here\\n  SET N = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      # Since we need Nth unique largest salary, we added DISTINCT\\n      SELECT DISTINCT salary \\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT N, 1\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n######################################################\\n\\n#   Runtime: 292ms   -   80.97%\\n#   Memory: 0B  -   100.00%\\n\\n######################################################\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  # We set N to N - 1 here because, LIMIT is 0 based. So LIMIT N, 1 will give us\\n  # (N+1)st largest salary instead of Nth largest. We can\\'t give LIMIT N-1,1 in the\\n  # query. So we are creating this here\\n  SET N = N - 1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      # Since we need Nth unique largest salary, we added DISTINCT\\n      SELECT DISTINCT salary \\n      FROM Employee\\n      ORDER BY salary DESC\\n      LIMIT N, 1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1628527,
                "title": "mysql-solution",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare a int;\\nset a=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     SELECT  distinct salary \\n     FROM employee\\n     order by salary DESC limit a,1\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare a int;\\nset a=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     SELECT  distinct salary \\n     FROM employee\\n     order by salary DESC limit a,1\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1580358,
                "title": "simple-solution-using-dense-rank",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\nWITH CTE AS\\n\\t\\t\\t(SELECT Salary, DENSE_RANK () OVER (ORDER BY Salary desc) AS RANK_desc\\n\\t\\t\\t   FROM Employee)\\nSELECT MAX(salary) AS SecondHighestSalary\\n  FROM CTE\\n WHERE RANK_desc = N\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\nWITH CTE AS\\n\\t\\t\\t(SELECT Salary, DENSE_RANK () OVER (ORDER BY Salary desc) AS RANK_desc\\n\\t\\t\\t   FROM Employee)\\nSELECT MAX(salary) AS SecondHighestSalary\\n  FROM CTE\\n WHERE RANK_desc = N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1520597,
                "title": "mysql-simple-window-function-with-dense-rank",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from\\n      (select salary, dense_rank() over (order by salary desc) as rk\\n      from employee)temp1\\n      where rk = N\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from\\n      (select salary, dense_rank() over (order by salary desc) as rk\\n      from employee)temp1\\n      where rk = N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1423687,
                "title": "better-solution-easy-to-understand",
                "content": "\"\"\"\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary AS getNthHighestSalary \\n      FROM Employee ORDER BY Salary DESC\\n      Limit M,1\\n  );\\nEND****`****\\n\"\"\"",
                "solutionTags": [],
                "code": "\"\"\"\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M=N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary AS getNthHighestSalary \\n      FROM Employee ORDER BY Salary DESC\\n      Limit M,1\\n  );\\nEND****`****\\n\"\"\"",
                "codeTag": "Unknown"
            },
            {
                "id": 1399102,
                "title": "mysql",
                "content": "\\tCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n\\t\\n\\tBEGIN\\n\\n\\tSET N=N-1;\\n  \\n\\t RETURN (\\n      \\n      SELECT DISTINCT Salary \\n      FROM Employee \\n      order by Salary DESC\\n      LIMIT 1 OFFSET N\\n      #after leaving first (n-1) distinct salaries arranged in descending order display the nth salary \\n  );\\nEND",
                "solutionTags": [],
                "code": "\\tCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n\\t\\n\\tBEGIN\\n\\n\\tSET N=N-1;\\n  \\n\\t RETURN (\\n      \\n      SELECT DISTINCT Salary \\n      FROM Employee \\n      order by Salary DESC\\n      LIMIT 1 OFFSET N\\n      #after leaving first (n-1) distinct salaries arranged in descending order display the nth salary \\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1308526,
                "title": "sql",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare a INT ;\\nset a= N-1  ;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct(salary) from employee order by salary desc limit 1 offset a\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare a INT ;\\nset a= N-1  ;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct(salary) from employee order by salary desc limit 1 offset a\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1209708,
                "title": "using-ifnull-and-dense-rank",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT IFNULL((SELECT Distinct Salary FROM (SELECT *, DENSE_RANK() OVER(ORDER BY Salary DESC) as rnk FROM Employee) as a WHERE a.rnk=N), NULL) as SecondHighestSalary\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT IFNULL((SELECT Distinct Salary FROM (SELECT *, DENSE_RANK() OVER(ORDER BY Salary DESC) as rnk FROM Employee) as a WHERE a.rnk=N), NULL) as SecondHighestSalary\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1196040,
                "title": "mysql-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE targetRow INT;\\n    SET targetRow = N-1;\\n  RETURN (\\n      select e.salary\\n      from Employee e\\n\\t  # Grouping makes salaries distinct\\n      group by e.salary\\n      order by e.salary desc\\n      limit targetRow,1\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    DECLARE targetRow INT;\\n    SET targetRow = N-1;\\n  RETURN (\\n      select e.salary\\n      from Employee e\\n\\t  # Grouping makes salaries distinct\\n      group by e.salary\\n      order by e.salary desc\\n      limit targetRow,1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1175849,
                "title": "nth-highest-the-commonest-way",
                "content": "SELECT DISTINCT Salary\\n      FROM(\\n        SELECT *,DENSE_RANK() OVER(ORDER BY Salary DESC) AS s_rank\\n        FROM Employee) AS Salary_Ranked\\n      WHERE s_rank = N\\n\\t  \\n\\t # this is the commonest way to solve this kind of problem.\\n\\t",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "SELECT DISTINCT Salary\\n      FROM(\\n        SELECT *,DENSE_RANK() OVER(ORDER BY Salary DESC) AS s_rank\\n        FROM Employee) AS Salary_Ranked\\n      WHERE s_rank = N\\n\\t  \\n\\t # this is the commonest way to solve this kind of problem.\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 1163452,
                "title": "a-solution-using-rank",
                "content": "\\n```\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n\\t  # -- get distinct salaries\\n      WITH distinct_salaries as (\\n          SELECT distinct salary from Employee\\n      ), \\n\\t  # -- RANK window function to rank distinct salaries\\n\\t  agg_cte as (\\n          SELECT\\n            salary,\\n            RANK() OVER(ORDER BY salary desc) as nth_salary\\n          FROM distinct_salaries\\n      ) SELECT salary from agg_cte where nth_salary = N ORDER by salary desc\\n  );\\nEND\\n```\\n",
                "solutionTags": [],
                "code": "```\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n\\t  # -- get distinct salaries\\n      WITH distinct_salaries as (\\n          SELECT distinct salary from Employee\\n      ), \\n\\t  # -- RANK window function to rank distinct salaries\\n\\t  agg_cte as (\\n          SELECT\\n            salary,\\n            RANK() OVER(ORDER BY salary desc) as nth_salary\\n          FROM distinct_salaries\\n      ) SELECT salary from agg_cte where nth_salary = N ORDER by salary desc\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1076070,
                "title": "window-function-mysql",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      WITH emp AS(\\n      SELECT Salary,\\n      DENSE_RANK() OVER(ORDER BY Salary DESC) AS \\'rank\\'\\n      FROM Employee)\\n      SELECT DISTINCT Salary\\n      FROM emp\\n      WHERE emp.rank=N\\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      WITH emp AS(\\n      SELECT Salary,\\n      DENSE_RANK() OVER(ORDER BY Salary DESC) AS \\'rank\\'\\n      FROM Employee)\\n      SELECT DISTINCT Salary\\n      FROM emp\\n      WHERE emp.rank=N\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1044987,
                "title": "nth-highest-salary",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET N \\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT 1 OFFSET N \\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1037061,
                "title": "my-simple-mysql-solution-pass-all-test-cases",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select\\n      ifnull((select distinct(Salary) from Employee order by Salary desc limit 1 offset N),null)\\n      \\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select\\n      ifnull((select distinct(Salary) from Employee order by Salary desc limit 1 offset N),null)\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1013080,
                "title": "mysql-order-by-limit",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n\\nBEGIN\\n    SET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from employee order by Salary DESC limit N,1\\n  );\\nEND",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\n\\nBEGIN\\n    SET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from employee order by Salary DESC limit N,1\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 934217,
                "title": "faster-than-97-58-mysql",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\n  RETURN (\\n     select salary as getNthHighestSalary from employee group by salary order by salary desc limit  N,1\\n); \\nEND",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\n  RETURN (\\n     select salary as getNthHighestSalary from employee group by salary order by salary desc limit  N,1\\n); \\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 927408,
                "title": "faster-than-95-44-accepted-mysql-simple-solution-using-dense-rank-266-ms",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT Salary \\n      FROM \\n      (\\n      SELECT Salary, DENSE_RANK() OVER(ORDER BY Salary DESC) AS ranking\\n      FROM Employee) t\\n      WHERE ranking = N\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT Salary \\n      FROM \\n      (\\n      SELECT Salary, DENSE_RANK() OVER(ORDER BY Salary DESC) AS ranking\\n      FROM Employee) t\\n      WHERE ranking = N\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 883267,
                "title": "not-the-shortest-code-but-more-readable",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your code here\\n      SELECT DISTINCT Salary \\n      FROM Employee \\n      ORDER BY Salary DESC \\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```\\n\\nNote that if you are using MySQL, you can use the shorter form of the `LIMIT` `OFFSET` clauses with `LIMIT N , 1`\\n\\nThe `SELECT DISTINCT` syntax is used to return only distinct (unique) values from the `Salary` column.",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your code here\\n      SELECT DISTINCT Salary \\n      FROM Employee \\n      ORDER BY Salary DESC \\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 872726,
                "title": "faster-than-99-1-with-offset",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN \\ndeclare off int;\\nset off = N - 1;\\n  RETURN (\\n      select (select distinct Salary from Employee order by Salary desc limit 1 offset off)\\n  );\\nEND\\n``",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN \\ndeclare off int;\\nset off = N - 1;\\n  RETURN (\\n      select (select distinct Salary from Employee order by Salary desc limit 1 offset off)\\n  );\\nEND\\n``",
                "codeTag": "Unknown"
            },
            {
                "id": 761017,
                "title": "accepted-solution-with-simple-query",
                "content": "```\\nBEGIN\\n    SET  N = N-1;\\n  RETURN (        \\n  SELECT Distinct Salary\\n   from Employee\\n      \\tUNION ALL (SELECT null AS Salary)\\n\\t order by Salary desc \\n\\t limit 1 offset N     \\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nBEGIN\\n    SET  N = N-1;\\n  RETURN (        \\n  SELECT Distinct Salary\\n   from Employee\\n      \\tUNION ALL (SELECT null AS Salary)\\n\\t order by Salary desc \\n\\t limit 1 offset N     \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 634862,
                "title": "using-sub-query-accepted-solution-with-proper-explanation",
                "content": "The idea here is to scan every row in the employee table, and\\nIn each row, we make a sub-query which returns the count of the number of rows which has salary greater than the salary of the row we were current checking for(in the outer query). If this count is N-1, this means the row we are operating on has Nth highest salary. Thus, we return that salary. \\n\\nNote: We are using a couple of sub-queries (`select distinct salary from employee`) for handling duplicate salaries. \\n\\nThe sql query is as below \\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n              Select e1.salary\\n            from (select distinct salary from employee) e1 where N-1 =\\n                (select count(*) from (select distinct salary from employee) e2 where e2.salary > e1.salary)\\n  );\\nEND\\n```\\n",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n              Select e1.salary\\n            from (select distinct salary from employee) e1 where N-1 =\\n                (select count(*) from (select distinct salary from employee) e2 where e2.salary > e1.salary)\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 599281,
                "title": "simple-mysql-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      Select DISTINCT Salary from Employee Order By Salary DESC LIMIT M, 1\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      Select DISTINCT Salary from Employee Order By Salary DESC LIMIT M, 1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 566864,
                "title": "nth-highest-salary-mysql",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary as getNthHighestSalary\\n      from Employee E\\n      where N-1=(select count(distinct salary) from Employee E2 where E2.Salary > E.Salary)\\n      \\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary as getNthHighestSalary\\n      from Employee E\\n      where N-1=(select count(distinct salary) from Employee E2 where E2.Salary > E.Salary)\\n      \\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 383304,
                "title": "why-don-t-we-need-an-ifnull",
                "content": "In the problem of finding the SecondHighestSalary, I used IFNULL to output NULL if the second highest value did not exist. Why do I not need to do that in this problem where my code is below? Any feedback would be appreciated! I\\'m new to SQL but trying to prepare for an interview. \\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary \\n      FROM Employee\\n      ORDER BY Salary DESC\\n      LIMIT 1 \\n      OFFSET N\\n      \\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT Salary \\n      FROM Employee\\n      ORDER BY Salary DESC\\n      LIMIT 1 \\n      OFFSET N\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 341255,
                "title": "my-mssql-solution-since-there-wasn-t-one-posted",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        Select  \\n            Case \\n                WHEN @N > (Select count(Salary) FROM (Select Distinct Salary FROM Employee) as S) then null\\n                ELSE\\n                    (     \\n                        Select TOP 1 Salary\\n                        FROM (Select TOP (@N) Salary\\n                               FROM (Select Distinct Salary FROM Employee) as S\\n                               Order BY Salary DESC) as df\\n                        Order BY Salary ASC\\n                    )\\n            END\\n    );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        Select  \\n            Case \\n                WHEN @N > (Select count(Salary) FROM (Select Distinct Salary FROM Employee) as S) then null\\n                ELSE\\n                    (     \\n                        Select TOP 1 Salary\\n                        FROM (Select TOP (@N) Salary\\n                               FROM (Select Distinct Salary FROM Employee) as S\\n                               Order BY Salary DESC) as df\\n                        Order BY Salary ASC\\n                    )\\n            END\\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 255397,
                "title": "oracle-sql-accepted",
                "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    \\n    select distinct salary into result from\\n    (select salary,dense_rank() over (order by salary desc) rn from employee)\\n    where rn=N;\\n    \\n    RETURN result;\\nEND;",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    \\n    select distinct salary into result from\\n    (select salary,dense_rank() over (order by salary desc) rn from employee)\\n    where rn=N;\\n    \\n    RETURN result;\\nEND;",
                "codeTag": "Unknown"
            },
            {
                "id": 177434,
                "title": "my-accepted-solution",
                "content": "```CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set N = N-1;\\n  RETURN (\\n   \\n      # Write your MySQL query statement below.\\n      ifnull((select distinct Salary from Employee\\n      order by Salary desc\\n      limit N,1),Null)\\n      \\n  );\\nEND```\\n\\n# distinct plays the trick here, if there are 2 same salaries",
                "solutionTags": [],
                "code": "```CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set N = N-1;\\n  RETURN (\\n   \\n      # Write your MySQL query statement below.\\n      ifnull((select distinct Salary from Employee\\n      order by Salary desc\\n      limit N,1),Null)\\n      \\n  );\\nEND```",
                "codeTag": "Unknown"
            },
            {
                "id": 53046,
                "title": "my-accepted-easy-to-understand-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare M int;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit 1 offset M\\n      \\n  );\\nEND\\n\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare M int;\\nSET M=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit 1 offset M\\n      \\n  );\\nEND\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53080,
                "title": "fastest-solution-without-using-order-by-or-declaring-variables",
                "content": "Often this question would be followed by solving the same problem without order by, rank, or declaring variables. Below are two accepted solutions for that problem. However, both of them are a lot slower than other accepted answers for this question, I think because the faster questions use order by -- what is the fastest way to write this query without order by?\\n\\nsolution 1, correlated subquery, 1311 ms:\\n\\n    select distinct Salary from Employee e1 \\n        where N = (select count(distinct Salary)\\n        from Employee e2\\n        where e1.Salary <= e2.Salary)\\n\\nsolution 2, self join - 1329 ms:\\n\\n         select salary from\\n          ((select N as rank) rank\\n          left join\\n          (select a.salary, count(distinct b.salary) as rank\\n          from Employee a\\n          join Employee b\\n          where a.salary <= b.salary\\n          group by a.salary) salary_rank\\n          on rank.rank = salary_rank.rank)",
                "solutionTags": [],
                "code": "Often this question would be followed by solving the same problem without order by, rank, or declaring variables. Below are two accepted solutions for that problem. However, both of them are a lot slower than other accepted answers for this question, I think because the faster questions use order by -- what is the fastest way to write this query without order by?\\n\\nsolution 1, correlated subquery, 1311 ms:\\n\\n    select distinct Salary from Employee e1 \\n        where N = (select count(distinct Salary)\\n        from Employee e2\\n        where e1.Salary <= e2.Salary)\\n\\nsolution 2, self join - 1329 ms:\\n\\n         select salary from\\n          ((select N as rank) rank\\n          left join\\n          (select a.salary, count(distinct b.salary) as rank\\n          from Employee a\\n          join Employee b\\n          where a.salary <= b.salary\\n          group by a.salary) salary_rank\\n          on rank.rank = salary_rank.rank)",
                "codeTag": "Unknown"
            },
            {
                "id": 3868769,
                "title": "mysql-eassy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT(salary) from Employee order by salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3809172,
                "title": "mysql-solution-using-window-functions-dense-rank",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT salary\\n      FROM\\n      (\\n      SELECT salary,\\n        DENSE_RANK() OVER(ORDER BY salary DESC) AS drk\\n      FROM Employee \\n      ORDER BY salary DESC\\n      ) AS t\\n      WHERE drk = N\\n  );\\nEND",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      SELECT DISTINCT salary\\n      FROM\\n      (\\n      SELECT salary,\\n        DENSE_RANK() OVER(ORDER BY salary DESC) AS drk\\n      FROM Employee \\n      ORDER BY salary DESC\\n      ) AS t\\n      WHERE drk = N\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 3221381,
                "title": "hight-salary",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit N, 1\\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct Salary from Employee order by Salary desc limit N, 1\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3147270,
                "title": "solution-for-nth-salary",
                "content": "\\n# Approach\\nFirst assign a rank to all the salaries in descending order and then select the Nth ranked distinct salary. \\n\\n# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    select distinct Tablex.value from\\n    (SELECT salary,DENSE_RANK() OVER (ORDER BY salary desc) as \\'rank\\'  \\n    FROM Employee) as Tablex(value,ranking) where Tablex.ranking=N\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    select distinct Tablex.value from\\n    (SELECT salary,DENSE_RANK() OVER (ORDER BY salary desc) as \\'rank\\'  \\n    FROM Employee) as Tablex(value,ranking) where Tablex.ranking=N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2863129,
                "title": "beginner-method-on-how-to-write-function-using-mysql",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing limit offset and passing n = n-1 to find the nthhighest salary\\n# Code\\n```\\n# Write your MySQL query statement below.\\nCREATE FUNCTION getNthHighestSalary ( n INT ) RETURNS INT\\n\\nBEGIN\\n\\n   SET n = n-1;\\n\\n    return( \\n        select distinct(salary) from employee order by salary desc limit 1 offset n\\n        );\\n\\nEND;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below.\\nCREATE FUNCTION getNthHighestSalary ( n INT ) RETURNS INT\\n\\nBEGIN\\n\\n   SET n = n-1;\\n\\n    return( \\n        select distinct(salary) from employee order by salary desc limit 1 offset n\\n        );\\n\\nEND;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2807066,
                "title": "mysql-solution",
                "content": "# Code\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    set N = N - 1;\\n    RETURN (\\n        # Write your MySQL query statement below.\\n        select distinct salary from Employee order by salary desc limit N, 1\\n    );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    set N = N - 1;\\n    RETURN (\\n        # Write your MySQL query statement below.\\n        select distinct salary from Employee order by salary desc limit N, 1\\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2673560,
                "title": "simple-solution-using-dense-rank",
                "content": "```\\n# Code Author Naveen Kumar Vadlamudi\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN \\n  (\\n            SELECT DISTINCT\\n            CASE WHEN SALARY IS NULL THEN NULL\\n                 ELSE SALARY\\n            END AS getNthHighestSalary\\n            FROM \\n            (\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\tSALARY,\\n\\t\\t\\t\\tDENSE_RANK() OVER(ORDER BY SALARY DESC) AS  CRANK  \\n\\t\\t\\t\\tFROM EMPLOYEE \\n            ) AS A\\n            WHERE A.CRANK = N\\n              \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Code Author Naveen Kumar Vadlamudi\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN \\n  (\\n            SELECT DISTINCT\\n            CASE WHEN SALARY IS NULL THEN NULL\\n                 ELSE SALARY\\n            END AS getNthHighestSalary\\n            FROM \\n            (\\n\\t\\t\\t\\tSELECT\\n\\t\\t\\t\\tSALARY,\\n\\t\\t\\t\\tDENSE_RANK() OVER(ORDER BY SALARY DESC) AS  CRANK  \\n\\t\\t\\t\\tFROM EMPLOYEE \\n            ) AS A\\n            WHERE A.CRANK = N\\n              \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2584401,
                "title": "mysql-solution",
                "content": "```\\nSELECT MAX(salary)\\n      FROM Employee e1\\n      WHERE N - 1 = ( \\n                        SELECT COUNT(DISTINCT salary)\\n                        FROM Employee e2\\n                        WHERE e2.salary > e1.salary\\n                    )\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT MAX(salary)\\n      FROM Employee e1\\n      WHERE N - 1 = ( \\n                        SELECT COUNT(DISTINCT salary)\\n                        FROM Employee e2\\n                        WHERE e2.salary > e1.salary\\n                    )\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2547550,
                "title": "simple-using-limit-mysql",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE var INT;\\nSET var = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from employee order by salary desc limit var,1\\n  );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE var INT;\\nSET var = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary from employee order by salary desc limit var,1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2502086,
                "title": "mysql-solution-using-limit-and-offset",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from Employee \\n      order by salary desc\\n      limit 1 offset N\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from Employee \\n      order by salary desc\\n      limit 1 offset N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2419179,
                "title": "asked-in-interviews-accepted",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare m INT;\\nset m = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from Employee\\n      order by salary desc\\n      limit m,1\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare m INT;\\nset m = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from Employee\\n      order by salary desc\\n      limit m,1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2306632,
                "title": "ms-sql-solution-by-row-number",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n            \\n        select salary from \\n        (\\n            select \\n                salary,\\n                ROW_NUMBER() over(order by salary desc) as b from Employee e\\n\\t\\t\\t\\tgroup by salary \\n\\t\\t\\t\\thaving count(salary)>0) as p\\n\\t\\t\\t\\twhere p.b = @N\\n        \\n\\t\\t);\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n            \\n        select salary from \\n        (\\n            select \\n                salary,\\n                ROW_NUMBER() over(order by salary desc) as b from Employee e\\n\\t\\t\\t\\tgroup by salary \\n\\t\\t\\t\\thaving count(salary)>0) as p\\n\\t\\t\\t\\twhere p.b = @N\\n        \\n\\t\\t);\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2282444,
                "title": "2-approaches",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    # SET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      # Select distinct salary from employee order by salary desc limit N,1\\n      \\n      Select max(salary) from employee e1 where n-1=(Select count(distinct salary) from employee e2 where e2.salary>e1.salary)\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n    # SET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n      # Select distinct salary from employee order by salary desc limit N,1\\n      \\n      Select max(salary) from employee e1 where n-1=(Select count(distinct salary) from employee e2 where e2.salary>e1.salary)\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2274184,
                "title": "faster-than-100-of-the-submissions-easy",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select distinct salary from employee\\n        order by salary desc offset @N-1 rows fetch next 1 rows only\\n    );\\nEND\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select distinct salary from employee\\n        order by salary desc offset @N-1 rows fetch next 1 rows only\\n    );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2239097,
                "title": "fastest-solution-with-answer-to-common-doubt",
                "content": ":)\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare x int;\\nset x = N-1;\\n  RETURN (\\n      \\n      # Write your MySQL query statement below.\\n      select distinct salary from Employee order by salary desc limit x,1\\n  );\\nEND\\n```\\nwhy cant we put directly use N-1 in the return statement? \\nans: limit can\\'t handle arithmetic expression therefore we initialize x beforehand.\\nhttps://stackoverflow.com/questions/59255433/select-one-before-last-in-mysql-custom-function",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\ndeclare x int;\\nset x = N-1;\\n  RETURN (\\n      \\n      # Write your MySQL query statement below.\\n      select distinct salary from Employee order by salary desc limit x,1\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2237207,
                "title": "simplest-dynamic-oracle-solution",
                "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    select  max(SecondHighestSalary) into result   from(\\nselect salary as SecondHighestSalary,dense_rank() over(order by salary desc) as rank from Employee\\norder by salary desc\\n    )\\n    where rank=N;\\n    RETURN result;\\nEND;",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    select  max(SecondHighestSalary) into result   from(\\nselect salary as SecondHighestSalary,dense_rank() over(order by salary desc) as rank from Employee\\norder by salary desc\\n    )\\n    where rank=N;\\n    RETURN result;\\nEND;",
                "codeTag": "Unknown"
            },
            {
                "id": 2162528,
                "title": "straightforward-mysql-approach",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      SELECT DISTINCT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT N, 1\\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  SET N = N - 1;\\n  RETURN (\\n      SELECT DISTINCT SALARY FROM EMPLOYEE ORDER BY SALARY DESC LIMIT N, 1\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2091948,
                "title": "memory-usage-0b-less-than-100-00-of-mysql-online-submissions-for-nth-highest-salary",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE L int Default N-1;\\n  RETURN (\\n      SELECT distinct salary FROM Employee ORDER BY salary DESC LIMIT L,1 \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE L int Default N-1;\\n  RETURN (\\n      SELECT distinct salary FROM Employee ORDER BY salary DESC LIMIT L,1 \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2041092,
                "title": "ms-sql-solution-faster-than-96-27",
                "content": "![image](https://assets.leetcode.com/users/images/86aaf6c0-19a5-4b9d-8ddb-2e04499d168f_1652604761.5106602.png)\\n```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select (\\n                select distinct salary\\n                from Employee\\n                order by salary desc\\n                offset @N-1 rows\\n                fetch next 1 rows only\\n                ) m\\n            );\\nEND\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select (\\n                select distinct salary\\n                from Employee\\n                order by salary desc\\n                offset @N-1 rows\\n                fetch next 1 rows only\\n                ) m\\n            );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1885232,
                "title": "mysql-solution-use-limit-offset",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE var_off_set INT DEFAULT (N - 1);\\n  RETURN (\\n        SELECT IFNULL(\\n            (\\n\\t\\t\\t\\tSELECT DISTINCT `Employee`.`salary`\\n\\t\\t\\t\\tFROM `Employee`\\n\\t\\t\\t\\tORDER BY `salary` DESC\\n\\t\\t\\t\\tLIMIT 1 OFFSET var_off_set\\n\\t\\t\\t)\\n            , null\\n        )\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  DECLARE var_off_set INT DEFAULT (N - 1);\\n  RETURN (\\n        SELECT IFNULL(\\n            (\\n\\t\\t\\t\\tSELECT DISTINCT `Employee`.`salary`\\n\\t\\t\\t\\tFROM `Employee`\\n\\t\\t\\t\\tORDER BY `salary` DESC\\n\\t\\t\\t\\tLIMIT 1 OFFSET var_off_set\\n\\t\\t\\t)\\n            , null\\n        )\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1866155,
                "title": "solution-with-description",
                "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC LIMIT N,1\\n  );\\nEND\\n\\n**Here We SET N = N-1; Beacuse in LIMIT , we can\\'t pass N-1;**\\n\\n# We can also use this query\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC LIMIT 1 OFFSET M\\n  );\\nEND\\n# Using IFNULL\\nAgain we can use IFNULL Function. IFNULL function take two parameteres, one is expression and another is default value. If the value is null then it returns the set value. Otherwise , it returns the expression executed  value. The MySQL query is given below :\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      SELECT IFNULL((SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC LIMIT M,1),NULL)\\n  );\\nEND",
                "solutionTags": [],
                "code": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N = N-1;\\n  RETURN (\\n      SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC LIMIT N,1\\n  );\\nEND\\n\\n**Here We SET N = N-1; Beacuse in LIMIT , we can\\'t pass N-1;**\\n\\n# We can also use this query\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC LIMIT 1 OFFSET M\\n  );\\nEND\\n# Using IFNULL\\nAgain we can use IFNULL Function. IFNULL function take two parameteres, one is expression and another is default value. If the value is null then it returns the set value. Otherwise , it returns the expression executed  value. The MySQL query is given below :\\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\n      SELECT IFNULL((SELECT DISTINCT salary FROM Employee\\n      ORDER BY salary DESC LIMIT M,1),NULL)\\n  );\\nEND",
                "codeTag": "Unknown"
            },
            {
                "id": 1828851,
                "title": "my-sql-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      FROM (\\n      select salary, DENSE_RANK() OVER (Order BY salary DESC) AS rank_salary\\n      FROM Employee\\n      ) as Employee_Details\\n      Where rank_salary = N\\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      FROM (\\n      select salary, DENSE_RANK() OVER (Order BY salary DESC) AS rank_salary\\n      FROM Employee\\n      ) as Employee_Details\\n      Where rank_salary = N\\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1796789,
                "title": "oracle-solution-without-window-function-and-limit-clause",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    select distinct salary into result\\n    from employee e1\\n    where n-1 = (select count(distinct e2.salary)\\n                 from employee e2\\n                 where e1.salary < e2.salary);  \\n    RETURN result;\\nEND;\\n```",
                "solutionTags": [],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    select distinct salary into result\\n    from employee e1\\n    where n-1 = (select count(distinct e2.salary)\\n                 from employee e2\\n                 where e1.salary < e2.salary);  \\n    RETURN result;\\nEND;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1734688,
                "title": "mysql-solution",
                "content": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select q.salary from (select *,dense_rank() over(order by salary desc) as rnk from Employee)q\\n      where case when\\n      N in (select dense_rank() over(order by salary desc) as rnk from Employee) then \\n      q.rnk = N \\n      else \\n      NULL\\n      End\\n      limit 1\\n      \\n  );\\nEND\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select q.salary from (select *,dense_rank() over(order by salary desc) as rnk from Employee)q\\n      where case when\\n      N in (select dense_rank() over(order by salary desc) as rnk from Employee) then \\n      q.rnk = N \\n      else \\n      NULL\\n      End\\n      limit 1\\n      \\n  );\\nEND\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1633103,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1565858,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1627860,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1679464,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1566590,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1739036,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1567671,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1570272,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1567003,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1570223,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1633103,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1565858,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1627860,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1679464,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1566590,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1739036,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1567671,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1570272,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1567003,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 1570223,
                "content": [
                    {
                        "username": "user6793r",
                        "content": "None of the solutions working. It just throws Runtime error. I have tried solutions from discussions as well. Throws Runtime Error even though there is no mistake in the query. SOme leetcode bug."
                    },
                    {
                        "username": "mr-xed",
                        "content": "I take it back, For those looking for the solution make sure to put a semicolon at the end of the set expression, like this: `SET N=N-1;` sounds ridiculous, but that what worked for me."
                    },
                    {
                        "username": "mr-xed",
                        "content": "Great exercise, except it doesn\\'t work. Always runtime error for some reason."
                    },
                    {
                        "username": "noahsheldon",
                        "content": "Runtime Error\\nKeyError: \\'columns\\'\\n    json_file[\\'headers\\'] = json_file.pop(\\'columns\\')\\nLine 50 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "Jeff_Huang_1106",
                        "content": "It\\'s happening today again."
                    },
                    {
                        "username": "dinesh_bommisetty",
                        "content": "[@IliaOzhmegov](/IliaOzhmegov) still not working. same runtime error"
                    },
                    {
                        "username": "smuvva",
                        "content": "Yes, it\\'s still not working but if you try using submit button it will tell you whether your answer is accepting or not, my solution is accepted but when i run the code it shows ERROR"
                    },
                    {
                        "username": "JHarrisJoshua",
                        "content": "This bug still exists for a few problems... Submitting works, just not running. The way I have been testing these is by running them in db-fiddle.com"
                    },
                    {
                        "username": "viru_viral",
                        "content": "Yes, still happening with me too. "
                    },
                    {
                        "username": "ela4490",
                        "content": "[@sumithababu99](/sumithababu99) No, it still not working for MySQL"
                    },
                    {
                        "username": "IliaOzhmegov",
                        "content": "It still does, thou in old version it works fine"
                    },
                    {
                        "username": "keepintine",
                        "content": "Runtime Error even when returning 0 without any modifications. Submitting in older version changes nothing."
                    },
                    {
                        "username": "sumithababu99",
                        "content": "Try submitting in older version. It works. "
                    },
                    {
                        "username": "kmdude1000",
                        "content": "Is this still occurring? I hope this is the case. Spent a long time reviewing my statement"
                    },
                    {
                        "username": "wlichanchan",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nset N=N-1;\n  RETURN (\n      ifnull((select distinct Salary from Employee\n          order by Salary desc\n          limit 1 offset N),null)\n  );\nEND"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "why do we need to set N=N-1 if sql does not use zero-based indexing like Python?\\n"
                    },
                    {
                        "username": "Morgan-Sell",
                        "content": "Someone should remove these discussion.\\n\\nAlso, why do I receive a runtime error when I comment everything out and run the following code?\\n\\nSELECT * FROM Employee\\n\\nWhere can I learn about MySQL functions?"
                    },
                    {
                        "username": "vvaannddaannaa",
                        "content": "it gives runtime error, no matter whatever code you will run. I tried : select * from Employee. this also gives same error.\\n\\n "
                    },
                    {
                        "username": "pr0pr0gram",
                        "content": "I am also getting error. I even tried a query that matches the return type (select * won\\'t work, function needs to return int)"
                    },
                    {
                        "username": "HongdiZhao",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1\\n  );\\nEND"
                    },
                    {
                        "username": "Haidram",
                        "content": "runtime error"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# The Problem has a bug. Always gives RUNTIME ERROR⚠️\n\n\n# But There are 2 possible solutions :-\n# SOLUTION-1)\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\nDECLARE M INT;\nSET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1\n  );\nEND\n\n# SOLUTION-2)\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n\n  RETURN (\n      # Write your MySQL query statement below.\n      SELECT DISTINCT Salary FROM Employee e1 WHERE N>=(SELECT COUNT(DISTINCT salary) FROM Employee e2 WHERE e1.salary<=e2.salary) ORDER BY e1.salary DESC\n  );\nEND"
                    },
                    {
                        "username": "RamiRami",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSet N = N-1;\\nRETURN (\\nSelect IFNULL ((select distinct salary from employee order by salary desc limit 1 offset N), NULL)\\n);\\nEND"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "shouhm",
                        "content": "why there was no one complaining the problem definition is a piece of ** that the n-th salary is defined based on unique values?\\n"
                    },
                    {
                        "username": "arowell",
                        "content": "It took me quite a bit of trial-and-error to figure out you\\'re picking the Nth highest **unique** salary value."
                    },
                    {
                        "username": "akhand17",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nSELECT Emp1.Salary /*This is the outer query part */\\nFROM Employee Emp1\\nWHERE (N-1) = ( \\nSELECT COUNT(DISTINCT(Emp2.Salary))\\nFROM Employee Emp2\\nWHERE Emp2.Salary > Emp1.Salary)\\n);\\nEND\\n\\n\\nOne of the test case is failing for N=1"
                    }
                ]
            },
            {
                "id": 2013264,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1569821,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1566389,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1738525,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1706220,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1575269,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1573331,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 2010111,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1677468,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1576701,
                "content": [
                    {
                        "username": "amartins90",
                        "content": "For Pandas users: if there is no nth salary return a data frame containing None value instead of a string \\'null\\'. "
                    },
                    {
                        "username": "ClariePreston",
                        "content": "Thanks for the help"
                    },
                    {
                        "username": "micahma2016",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nDECLARE M INT;\\nSET M = N-1;\\n  RETURN (\\nSELECT IFNULL ((SELECT DISTINCT Salary FROM Employee order by Salary desc limit M,1), null)\\n      as getNthHighestSalary\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "dattasagnik47",
                        "content": "Folks , In this case I have used Dense_Rank .\\n\\nBut suppose rank becomes similar , then in that case Subset returns more than 1 row.\\nHave anyone used TOP(1)  to bypass that or used HAVING (COUNT) here ?\\n\\nWhich one will be good and efficient?\\n\\n\\n\\n"
                    },
                    {
                        "username": "rohankolhatkar",
                        "content": "Why is it giving a runtime error?Has everyone faced this exact issue?"
                    },
                    {
                        "username": "deepsgupta_16",
                        "content": "Getting runtiime error in every possible solution, even if the solution is correct. There is a bug in leetcode, No code from solution and discussions are working. "
                    },
                    {
                        "username": "gocoder1",
                        "content": "set @n=10;\\nselect salary from\\nsalaries\\norder by salary desc\\nlimit  @n,1 ;\\n\\n//what is wrong here. I get 1064 error in mysql"
                    },
                    {
                        "username": "amsavchuk",
                        "content": "Why is it needed to take into account only distinct salaries? For example, if table `Employee` has `salaries = [100, 100]` and `N = 2` the expected answer is `null` instead of `100`. It would be better to have information about that in task description."
                    },
                    {
                        "username": "edithi",
                        "content": "\\nTo find the Nth highest salary from a pandas DataFrame, sort the \\'salary\\' column in descending order, drop duplicates, and retrieve the Nth value if it exists, else return None. This approach uses pandas\\' sorting and indexing capabilities to efficiently solve the problem."
                    },
                    {
                        "username": "midnitte",
                        "content": "I\\'m not sure if you are the one commenting all of these abstract solutions, but as an in progress student, thank you!"
                    },
                    {
                        "username": "Pavani25",
                        "content": "Is there a Leet Code Bug ? As I am able to submit a solution in FEB but I am trying to submit every solution possible today again and it is not submitting throwing Run time Error"
                    },
                    {
                        "username": "priyanshgandhi",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N = N - 1;\\nRETURN (\\n# Write your MySQL query statement below.\\nselect distinct salary from Employee\\norder by salary desc limit N, 1\\n\\n);\\nEND"
                    }
                ]
            },
            {
                "id": 1575177,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 1574408,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 1574303,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 1573476,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 1572924,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 1571385,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 1570585,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 1571865,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 2077217,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 2064369,
                "content": [
                    {
                        "username": "CoderSoni",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n\\nselect salary into  result from (\\nselect salary , dense_rank() over (partition by null order by salary desc ) rn  from employee\\n)\\nwhere rn = n\\nand rownum = 1;\\n    \\n    RETURN result;\\nEND;"
                    },
                    {
                        "username": "Vibhanshu2020",
                        "content": "Below query is working fine but considered as wrong answers any suggestions\\n\\'\\'\\'select a.salary as SecondHighestSalary from employee a \\nwhere N =(select count(b.salary) from employee b where b.salary >=a.salary)\\'\\'\\'"
                    },
                    {
                        "username": "ksaif78900",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      (select Salary from Employee e1 where N-1=(select count(distinct(Salary)) from Employee e2 where    e1.Salary < e2.salary) LIMIT 1)\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "xiaodi980714",
                        "content": "RETURN (select distinct Salary from Employee order by Salary desc\\n          limit N-1,1\\n       \\n  );"
                    },
                    {
                        "username": "wwy_resp",
                        "content": "![image](https://assets.leetcode.com/users/wwy_resp/image_1565763393.png)\\n"
                    },
                    {
                        "username": "symplecticgeometry",
                        "content": "I find this question very unclear. What is the N-th Highest salary? \\nSay N = 3, what should be the results of the following cases:\\ncase 1: (1,100), (2,100), (3,100)\\ncase 2: (1,110), (2,100), (3, 100), (4, 90)"
                    },
                    {
                        "username": "yogeshthakur84",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\nselect distinct salary FROM (\\nselect Salary\\n,dense_rank() over (order by Salary DESC) ranking\\nfrom Employee\\n) t\\nWHERE ranking = @N\\n    );\\nEND\\n"
                    },
                    {
                        "username": "w22we33",
                        "content": "I find an article explaining this question, looks good.\n[Find Nth Highest Salary - SQL](https://www.programmerinterview.com/index.php/database-sql/find-nth-highest-salary-sql/)"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Using Pandas, how can I add (2) in the end of the name of the series? \\n `def nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    N = N - 1  # Adjust N to be 0-based\\n    sorted_salaries = employee[\\'salary\\'].sort_values(ascending=False)\\n    try:\\n        nth_highest_salary = sorted_salaries.iloc[N]\\n        result_df = pd.DataFrame({\\'getNthHighestSalary\\': [nth_highest_salary]})\\n        return result_df\\n    except IndexError:\\n        return pd.DataFrame({\\'getNthHighestSalary\\': [None]})`"
                    },
                    {
                        "username": "albucurus",
                        "content": "Leetcode don\\'t know Oracle. In Oracle exist pseudocolumn ROWNUM, which helps to resolve much sampler this problem,\\n\\nselect x.salary into result from \\n      (select distinct salary from employee order by salary desc) x\\n      where ROWNUM = N\\n"
                    }
                ]
            },
            {
                "id": 2058538,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2047608,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2046244,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2033129,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2030077,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2029551,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2028560,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2026139,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2019392,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2018426,
                "content": [
                    {
                        "username": "mdascoder",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset n=n-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n       SELECT DISTINCT Salary\\n    FROM Employee\\n    ORDER BY Salary DESC\\n    limit 1 offset N\\n  );\\nEND"
                    },
                    {
                        "username": "swamykumar851",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nset N=N-1;\\nRETURN (\\nSELECT DISTINCT\\n    (SELECT DISTINCT salary\\n     FROM Employee\\n     ORDER BY salary DESC\\n     LIMIT N, 1) AS nth_highest_salary\\nFROM Employee\\n\\n);\\nEND"
                    },
                    {
                        "username": "geetika_shekhawat",
                        "content": "AVOID RUNTIME ERROR by removing the \"-\" sign from the beginning of every row.\\n\\nplease upvote if it works.\\n"
                    },
                    {
                        "username": "Saramago92",
                        "content": "Is the solution wrong?\\n\\nEmployee =\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nargment = 1\\n\\nOutput\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nExpected\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "gurjaspreet",
                        "content": "I have written the following code, but it is not optimal. Can anyone shed some light?\n\n import pandas as pd\n\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\n    employee = employee.sort_values('salary', ascending = False)\n    colName = 'getNthHighestSalary(' + str(N) + ')'\n    try:\n        df = employee['salary'].drop_duplicates()\n        nth = df.iloc[N-1]\n        return pd.DataFrame({f'{colName}': [nth]})\n    except:\n        return pd.DataFrame({f'{colName}': [None]})"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "AttributeError: \\'numpy.int64\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)  whats this error how to resolve this kind of errors my code was \\n\\n ` import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n    my_max =  employee.iloc[0:N][\\'salary\\'].max()\\n    return my_max   `"
                    },
                    {
                        "username": "KalledaDinesh",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT (\\n      CASE WHEN (SELECT COUNT(DISTINCT salary) FROM Employee) > N\\n        THEN ( WITH CTE AS (SELECT SALARY, DENSE_RANK() OVER(ORDER BY SALARY DESC) \\n           AS DENSERANK FROM EMPLOYEE) \\n            SELECT SALARY FROM CTE WHERE DENSERANK = N\\n        )\\n        ELSE NULL\\n      END\\n    )\\n  );\\nEND;\\n\\nWhile test run this code gives all testcases passed however submitting it is giving 10/14 test cases are passing.\\n"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "for this testcase \\n```\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 100    |\\n\\nargument=2\\n```\\nI return 100 but it expects null. Can anyone explain why?"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "You need to drop duplicates first. There is no second highest salary in this df because only salary range is 100. So you should return null."
                    },
                    {
                        "username": "mr-xed",
                        "content": "If you would share your solution I might be able to figure out why\\n"
                    },
                    {
                        "username": "oguzhekim",
                        "content": "My output is the same as expected output but it still fails the testcase. Here is the code:\n\n    temp_df = employee.drop_duplicates(subset=[\"salary\"]).sort_values(by=\"salary\", ascending=False)[[\"salary\"]]\n    nth_highest = temp_df.iloc[N-1] if len(temp_df)>=N else None\n    return pd.DataFrame({f\"getNthHighestSalary({N})\": [nth_highest]})\n\nAnd here is the outputs:\nOutput: \n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n\nExpected:\n| getNthHighestSalary(2) |\n| ---------------------- |\n| 200                    |\n"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "1.) Don't forget to drop duplicates\n2.) Instead of 'null' use None"
                    }
                ]
            },
            {
                "id": 2018201,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 2016349,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 2015244,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 2013570,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 2011006,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 2003920,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 1998188,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 1997447,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 1995903,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 1994413,
                "content": [
                    {
                        "username": "dwaipayan649",
                        "content": "Used pandas but solution is not working everytime giving runtime error. But works in local environment.\\nHere is the code snippet.\\n\\n  import pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df2=employee[\"salary\"].sort_values()\\n    list1=list(df2)\\n    new_index=[i for i in range(1,len(df2)+1)]\\n    df3=pd.DataFrame(data=list1,columns=[\"getNthHighestsalary\"],index=new_index)\\n    result=df3.loc[N][0]\\n    return result\\n\\nP.S. - Its just a rough snippet which explains how the base problem can be solved.\\n"
                    },
                    {
                        "username": "user7938G",
                        "content": "Why I am getting this error? while running this code. In my local machine this code is working and getting the result as required. \\n    unique_data = employee[\\'salary\\'].unique()\\n    return unique_data\\nError: \\nAttributeError: \\'numpy.ndarray\\' object has no attribute \\'to_json\\'\\n    json_file = simplejson.loads(result_table.to_json(orient=\\'split\\'))\\nLine 47 in main (_driver.py)\\n    main()\\nLine 65 in <module> (_driver.py)"
                    },
                    {
                        "username": "midnitte",
                        "content": "Interestingly seems like something is borked with the provided `employee` dataframe - if I merely return the dataframe, it has column names of `| getNthHighestSalary(2) |     |`. Seems like it was somehow overwritten despite resetting code"
                    },
                    {
                        "username": "Anubhavkumarraj",
                        "content": "what is the nth salary means?"
                    },
                    {
                        "username": "codenameStarmunch",
                        "content": "'N' is a number chosen by someone else, it's basically a placeholder for any number of another user's choosing.  You'll see it in the function parameters when you select 'Pandas' from the dropdown box in the code window right after '(employee: pd.DataFrame'.... You'll have to build you code snippet based on the assumption that the number isn't hard-coded / can be any number input by the grading system, or by a person in the real world, so if you're using Pandas, you will have to put {N} using an f-string in whichever part of your code you'd ordinarily place the number (that would be the number 2 for the 'Second-highest salary' challenge).  "
                    },
                    {
                        "username": "hannahli123",
                        "content": "Does anyone know why this is not working with test case 1? The result looks the same:\\n\\nimport pandas as pd\\n\\ndef nth_highest_salary(employee: pd.DataFrame, N: int) -> pd.DataFrame:\\n\\n    df = employee.sort_values(\\'salary\\', ascending=False)[[\\'salary\\']]\\n    #df = df[\\'salary\\'].drop_duplicates()\\n\\n    if N > len(df):\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [nan]})\\n    else:\\n        value = df.iloc[N-1]\\n        df = pd.DataFrame({f\\'getNthHighestSalary({N})\\': [value]})\\n    return df"
                    },
                    {
                        "username": "Leaderboard",
                        "content": "https://leetcode.com/problems/nth-highest-salary/description/comments/2013264 helped me with a similar issue."
                    },
                    {
                        "username": "Turonio",
                        "content": "Am I missing something? How did they get the value if its id is greater then N?\\nThe input:\\n| id | salary |\\n| -- | ------ |\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n\\nN=1\\n\\nMy output:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 100                    |\\n\\nCorrect answer:\\n| getNthHighestSalary(1) |\\n| ---------------------- |\\n| 300                    |"
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "Basically id column is unique identifier for rows in table. Don\\'t focus on values of id column. If N is greater than number of rows ,answer will be null. For e.g.\\n\\n1st highest salary will be 300\\n2nd highest salary will be 200\\n3rd highest salary will be 100\\n4th highest salary onwards the answer will be null.\\n\\nI hope this clarifies your doubt."
                    },
                    {
                        "username": "dhruvbakshi20",
                        "content": "#pandas\\nI am trying to sort the dataframe and then using iloc to get relevant value . After that I am creating required dataframe output and returning it. \\nThe code is giving result in my local ide but failing 3 testcases in leetcode\\'s console. \\nCan anyone suggest where am I going wrong?\\n"
                    },
                    {
                        "username": "ara_",
                        "content": "what is N supposed to represent? "
                    },
                    {
                        "username": "kom-senapati",
                        "content": "Why there\\'s an error in driver code ??"
                    },
                    {
                        "username": "tajuddin_107",
                        "content": "just for feedback I\\'m not sure whether right or wrong..but\\nNo, their is not any bug related to the given question I think actually when we write the query to find nth highest from employee table we must take care about the some edge cases or corner situation for ex: suppose in employee table their is column like {id, emp, salary, ...} if the salary of more than one employee having the same salary then in that cases there is a chance to return a wrong nth salary. that\\'s why may be you face this issue. I\\'m also face first time this problem before including  the distinct keyword.\\n\\nso, the required query to resolve runtime error including all cases...\\n\\n      select distinct(salary) as getNthHighestSalary from employee as e1 \\n      where N - 1 = (select  count(distinct(salary)) from employee e2 where\\n      e2.salary > e1.salary)\\n\\nhope it will works without any error..."
                    }
                ]
            },
            {
                "id": 1989128,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1985819,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1966527,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1953393,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1935970,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1935969,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1935433,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1899326,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1885010,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1868410,
                "content": [
                    {
                        "username": "shouvik32",
                        "content": "BEST SOLUTION YOU WILL SEE : \\n\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      \\n      #common table create\\nwith cte as(\\nselect \\ndense_rank() over(order by salary desc) as \"rnk\",\\nsalary\\nfrom employee \\n)\\n\\n# you can fetch nth number of salary by putting rnk=n\\'th\\nselect max(case when rnk=N then salary else null end) as \"SecondHighestSalary\"\\nfrom cte\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "kirankumar99399",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select salary from(\\n            select distinct salary, dense_rank() \\n            over(order by salary desc) as salaryRanking\\n            from employee)x\\n            where salaryRanking = N\\n    );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\nselect Nth_value(salary,N) over(order by salary desc) as Salary\\nfrom Employee limit 1 offset N\\n     \\n  );\\nEND"
                    },
                    {
                        "username": "calderon-lyre",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n    SELECT CASE WHEN N = 1 THEN (SELECT MAX(salary) FROM Employee)\\n        WHEN N > 1 THEN (SELECT e1.salary\\n        FROM Employee AS e1\\n        WHERE N-1 = (SELECT COUNT(DISTINCT (e2.salary)) \\n        FROM Employee AS e2\\n        WHERE e2.salary > e1.salary)\\n        ORDER BY 1 DESC\\n        LIMIT 1)\\n      END\\n  );\\nEND"
                    },
                    {
                        "username": "District_12",
                        "content": "testcase 13 is failing with a value 510. Anyone else have this problem?"
                    },
                    {
                        "username": "District_12",
                        "content": "How should I debug this shit?"
                    },
                    {
                        "username": "UmeshSPatil",
                        "content": "Correct Ans:\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  set n = n - 1;   // \\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT Salary\\n        FROM Employee\\n        ORDER BY Salary desc\\n        Limit n, 1\\n  );\\nEND;"
                    },
                    {
                        "username": "pmorris95",
                        "content": "Is there an error with test case 13 (out of 14) ? It states that, with argument 88, the output should be 455, but I imported the data in my IDE and ordered by rank desc, and the 88th row is 510, whereas the 90th row is 455."
                    },
                    {
                        "username": "user8428J",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct e.salary as getNthHighestSalary\\n      from\\n      (select id, salary,dense_rank() over(order by salary desc) as \\'Rank\\'\\n      from employee) as e\\n      where e.Rank=n      \\n  );\\nEND"
                    },
                    {
                        "username": "MaheshBabuMummalaneni",
                        "content": "Query is running fine and showing as Accepted but while submitting it is throwing error and showing incorrect error descriptions or outputs. This is happening for most of the queries."
                    },
                    {
                        "username": "shivamj11",
                        "content": "Please mention your query. \\n"
                    }
                ]
            },
            {
                "id": 1866905,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1866874,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1862125,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1841300,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1802710,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1795705,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1791956,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1789025,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1786204,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1781746,
                "content": [
                    {
                        "username": "shivamj11",
                        "content": "Don\\'t use ifnull. Just select distinct salary with limit 1 and offset n-1. You have to set n value to n-1 beforehand."
                    },
                    {
                        "username": "shivamj11",
                        "content": "APPROACH \\n1. We need to use offset with limit.\\n2. If n is given then we need to offset n-1 rows before that to reach nth rank. So set n = n-1, before return .\\n3. We have to ignore duplicates salary. So you know what to use.\\n4. Use if null function incase of null. "
                    },
                    {
                        "username": "divyadikshantkumar",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n     \\n\\nSELECT salary FROM(\\nSELECT distinct salary, DENSE_RANK() \\nover(ORDER BY salary DESC) AS ranking FROM employee) as k\\nWHERE ranking=N\\n      \\n  );\\nEND"
                    },
                    {
                        "username": "Manbir7",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n\\nselect salary from (select distinct salary, row_number() over (order by salary desc) sal1 from Employee) A\\n\\nwhere A.sal1= N\\n\\n      \\n  );\\nEND\\n\\nworking solution"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n       select Distinct Salary from (select salary,dense_rank() over(order by Salary Desc) as d_rank from employee) temp where d_rank=@N \\n    );\\nEND"
                    },
                    {
                        "username": "duttak",
                        "content": "It has a bug. LeetCode team, please sort it. Thank you."
                    },
                    {
                        "username": "het_CE",
                        "content": "Hello Friends, Can someone give me reason why this SQL Query Passes 13 test cases out of 14 and Fail on last one.\n\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n    DECLARE M INT;\n    SET M=N-1;\n  RETURN (\n      # Write your MySQL query statement below.\n        SELECT MAX(salary) FROM Employee\n        WHERE salary NOT IN ( SELECT * FROM (\n          SELECT salary FROM Employee\n          ORDER BY salary DESC\n          LIMIT M\n          ) as t1\n        )\n  );\nEND"
                    },
                    {
                        "username": "sany2k8dev",
                        "content": "Why my submission every time ended with Runtime Error?\\n\\n```\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      SELECT DISTINCT salary FROM Employee\\n       ORDER BY salary DESC\\n      LIMIT 1 OFFSET N\\n  );\\nEND\\n```"
                    },
                    {
                        "username": "uni691125",
                        "content": "Always runtime error. System bug?\\n"
                    },
                    {
                        "username": "ro219",
                        "content": "CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    SELECT MAX(salary) INTO result\\n    FROM employee;\\n    WHILE(N>1)\\n    LOOP\\n        SELECT MAX(salary) INTO result\\n        FROM employee WHERE salary<result;\\n        N:=N-1;\\n    END LOOP;\\n    RETURN result;\\nEND;\\n\\nThis is my code and I am getting runtime error. Can anyone explain why?"
                    }
                ]
            },
            {
                "id": 1778807,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1776935,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1774746,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1773421,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1771148,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1770948,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1768508,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1766106,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1765585,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1762804,
                "content": [
                    {
                        "username": "dangquoctienvktl",
                        "content": "My MSSQL solution\\n\\n```\\nCREATE OR ALTER FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\tSet @N = @N-1\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT \\n\\t\\t\\tdistinct \\n\\t\\t\\tSalary\\n\\t\\tfrom Employee\\n\\t\\torder by salary desc Offset @N rows FETCH next 1 row only\\n    );\\nEND\\n```"
                    },
                    {
                        "username": "andrewlawrenceevans",
                        "content": "As a temporary workaround, just run your code in \"Second Highest Salary\" if you are getting the Runtime error. :("
                    },
                    {
                        "username": "SDhana",
                        "content": "it throws runtime error"
                    },
                    {
                        "username": "shashankaero",
                        "content": "My solution works in the sql developer plus but not in the console here. Not sure why it always returns runtime error. Any suggestions?"
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Runtime Error * Infinity :\n Since Jan 23, 2023"
                    },
                    {
                        "username": "siddhantdube",
                        "content": "Runtime Error, please fix this."
                    },
                    {
                        "username": "shang_shang_",
                        "content": "`CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select distinct salary\\n      from \\n        (select salary, \\n                dense_rank() over (order by salary desc) as sal_rank\\n        from Employee) t\\n      where t.sal_rank = N\\n  );\\nEND`\\n\\nThe solution above shows Runtime Error. Can anyone pls help me understand why and how to correct it?"
                    },
                    {
                        "username": "bluff_god",
                        "content": "Result always returning RUNTIME ERROR , But the possible solution would be \n\n `CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\nBEGIN\n  RETURN (\n    select salary from (select salary from Employee order by salary desc limit N) emp order by salary limit 1\n  );\nEND`"
                    },
                    {
                        "username": "hero4future",
                        "content": "run doesn\\'t work but submit work, very underwhelming experience"
                    },
                    {
                        "username": "girishrawat0097",
                        "content": "The Problem doesn\\'t have any Bug as i have submitted the solution. I have also receievd the Runtime Error at First Time Becuase it was checking for Duplicate Salary also which i have not handled at first time (because not mentioned the the case scenerior) . Once handled it worked like a charm. Hope this helps..."
                    }
                ]
            },
            {
                "id": 1754716,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1744525,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1741880,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1741322,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1739586,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1735223,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1733986,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1733475,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1733427,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1732911,
                "content": [
                    {
                        "username": "Bhushan_Waingankar",
                        "content": "If you are getting runtime error on running code directly Submit the code"
                    },
                    {
                        "username": "guptaparas1995",
                        "content": "for every solution it is runtime error"
                    },
                    {
                        "username": "user5014jA",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "Isshh",
                        "content": "What is the error?\\nCREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      select ifnull(salary,null) as getNthHighestSalary(2)\\n      from employee\\n      where id=n\\n      order by salary desc\\n  );\\nEND"
                    },
                    {
                        "username": "batul02",
                        "content": "CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\nSET N=N-1;\\n  RETURN (\\n      select distinct salary FROM Employee order by salary desc \\n      limit 1 offset N\\n      \\n  );\\nEND\\n\\nI think the logic for this query is right but it\\'s still showing runtime error. Any query doesn\\'t work. tried queries from discussion as well."
                    },
                    {
                        "username": "nandkumar87",
                        "content": "100% working in sql\\n--run this in ms sql server\\nalter FUNCTION getNthHighestSalary(@N int) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        SELECT DISTINCT Salary\\n        FROM employee_salary\\n        ORDER BY Salary DESC\\n        OFFSET @N-1 ROWS\\n        FETCH NEXT 1 ROWS ONLY\\n    );\\nEND\\nand then call function---\\nselect dbo.getNthHighestSalary(1)"
                    },
                    {
                        "username": "nandkumar87",
                        "content": "so many types i tried but all the times gives me runtime error"
                    },
                    {
                        "username": "Albert950207",
                        "content": "Runtime Error always, skip this question guys "
                    },
                    {
                        "username": "Vaibhav_Khaitan",
                        "content": "It\\'s giving runtime error no matter what you do. I am using Oracle."
                    },
                    {
                        "username": "nirmalkumarr",
                        "content": "select salary from\\n      (select salary, dense_rank() over(order by salary desc) as rankvalue from Employee) where rankvalue = &N\\n  "
                    }
                ]
            },
            {
                "id": 1729800,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1729365,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1728349,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1726918,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1722609,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1720696,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1714143,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1700111,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1689314,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            },
            {
                "id": 1688208,
                "content": [
                    {
                        "username": "misterabdul",
                        "content": "I tried so many times running my solution, it always throws `Runtime Error`. I thought my solution have some syntax error, then I tried running other people\\'s solution out of desperation, it still throws `Runtime Error`.\\nAfter that, I just submit my solution, and it worked fine & accepted.\\nDear LeetCode, please fix this issue."
                    },
                    {
                        "username": "shashwat_chawla",
                        "content": "\\nWhy this is giving run time error ?\\n `select salary from Employee e1 where N-1=(select count(distinct salary ) from Employee e2 where e2.salary > e1.salary)\\n`"
                    },
                    {
                        "username": "alexey0206",
                        "content": "Definitely, there is a bug, run throws runtime error and submission works... Magic!"
                    },
                    {
                        "username": "riteshbansal1709",
                        "content": "Why for most of the solutions, it is giving run time error?\\nIs dense rank method necessary for this solution?\\n"
                    },
                    {
                        "username": "impradeep27",
                        "content": "Why I'm getting error with below query:\nNote: Writing query in ms sql server\nCREATE FUNCTION getNthHighestSalary(@N INT) \nRETURNS INT AS\nBEGIN\n    RETURN (\n        /* Write your T-SQL query statement below. */\n        with cte as\n        (\n        select *, dense_rank() over (order by salary) as rnk\n        from Employee)\n\n        select distinct IFNULL(salary,null)\n        from cte\n        where rnk=@n;\n    );\nEND\nError:\n[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near the keyword 'with'. (156) (SQLExecDirectW)"
                    },
                    {
                        "username": "pulkitrajpal",
                        "content": "wth ! I resubmitted multiple times thinking I was doing but it\\'s throwing timeouts does not matter what the statement is . Lol"
                    },
                    {
                        "username": "suyalmukesh",
                        "content": "Runtime Error"
                    },
                    {
                        "username": "arjunallakote",
                        "content": "Hey guys,\\n\\nCREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 isnull(salary,null) from(\\n        select top @n salary from Employee order by salary desc) as emp order by salary  \\n    );\\nEND\\n\\nCan I know why I am getting error like this,\\n\\n\\'[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]Incorrect syntax near \\'@a\\'. (102) (SQLExecDirectW)\\'"
                    },
                    {
                        "username": "downvoteit",
                        "content": "Just doesn\\'t work with any solution and any vendor\\n\\nPress Run/Submit gets you a Runtime Error"
                    },
                    {
                        "username": "lamlegend108",
                        "content": "CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        SELECT us.salary as getNthHighestSalary\\nFROM (SELECT distinct ROW_NUMBER() OVER (ORDER BY salary) AS rnum, salary\\n     FROM Employee ) as us \\nWHERE us.rnum = @N   \\n    );\\nEND"
                    }
                ]
            }
        ]
    },
    {
        "title": "Strange Printer",
        "question_content": "<p>There is a strange printer with the following two special properties:</p>\n\n<ul>\n\t<li>The printer can only print a sequence of <strong>the same character</strong> each time.</li>\n\t<li>At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.</li>\n</ul>\n\n<p>Given a string <code>s</code>, return <em>the minimum number of turns the printer needed to print it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabbb&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Print &quot;aaa&quot; first and then print &quot;bbb&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Print &quot;aaa&quot; first and then print &quot;b&quot; from the second place of the string, which will cover the existing character &#39;a&#39;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 152758,
                "title": "clear-logical-thinking-with-code",
                "content": "**Logical Thinking**\\n\\nThe problem is easier to solve if we decrease it to subproblems using **Divide and Conquer**.\\n**base case**: \\nif s contains only 1 character, 1 turn is needed\\nif s contains 2 characters, 1 turn is needed if they equal to each other, or else, 2 turns are needed\\n**divide the problem**:\\nwe keep dividing s until the substring contains 1 or 2 characters (as the **base case**)\\nTake s = \"abc\" for example,\\n```\\n  abc\\n /    \\\\\\na,bc ab,c (base case here)\\n```\\n**conquer the subproblems**:\\n`turns s needed = min(turns one substring needed + turns the other needed)` (since there are many ways to divide s, we pick the one needs minimum turns)\\nPlease note that, if s = \"aba\", and we divide it into \"a,ba\", turns \"aba\" needed = turns \"a\" needed + turns \"ba\" needed `- 1` (aaa => aba rather than a => ab => aba).\\n\\nTo avoid duplicate calculations, we implement the idea above using **Bottom-up Dynamic Programming**.\\n**state**: `state[i][j]` turns needed to print s[i .. j] (both inclusive)\\n**aim state**: `state[0][n - 1]` (n = s.length() - 1)\\n**state transition**: \\n```\\nstate[i][i] = 1;\\nstate[i][i + 1] = 1 if s[i] == s[i + 1]\\nstate[i][i + 1] = 2 if s[i] != s[i + 1]\\nstate[i][j] = min(state[i][k] + state[k + 1][j]) for i <= k <= j - 1\\n\\tplease note that, if s[i] equals to s[j] , state[i][j] should -1\\n```\\n**Note**\\nWe observe that states defined on small sections contribute to the states defined on the larger one.\\nWe define `j = i + dist` to represent sections easily.\\nTake i = 2, dist = 3 for example,\\n`state[2][5] = state[2][3] + state[4][5]`,\\nstate[4][5] should be calculated before `state[2][5]`, so **i should keep decreasing**.\\n`dist = |5 - 4|` should be counted before `dist = |5 - 2|`, so **dist should be increasing**.\\n\\n**Clear Java Code**\\n```\\n    public int strangePrinter(String s) {\\n\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n\\n        int n = s.length();\\n        int[][] state = new int[n][n];\\n\\n        for (int i = 0; i < n; i++) {\\n            state[i][i] = 1;\\n        }\\n\\n        for (int i = n - 1; i >= 0; i--) {\\n            for (int dist = 1; dist + i < n; dist++) {\\n                int j = dist + i;\\n                if (dist == 1) {\\n                    state[i][j] = (s.charAt(i) == s.charAt(j)) ? 1 : 2;\\n                    continue;\\n                }\\n                state[i][j] = Integer.MAX_VALUE;\\n                for (int k = i; k + 1 <= j; k++) {\\n                    int tmp = state[i][k] + state[k + 1][j];\\n                    state[i][j] = Math.min(state[i][j], tmp);\\n                }\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    state[i][j]--;\\n                }\\n            }\\n        }\\n\\n        return state[0][n - 1];\\n    }\\n```\\n**I would appreciate your VOTE UP ;)**",
                "solutionTags": [],
                "code": "```\\n  abc\\n /    \\\\\\na,bc ab,c (base case here)\\n```\n```\\nstate[i][i] = 1;\\nstate[i][i + 1] = 1 if s[i] == s[i + 1]\\nstate[i][i + 1] = 2 if s[i] != s[i + 1]\\nstate[i][j] = min(state[i][k] + state[k + 1][j]) for i <= k <= j - 1\\n\\tplease note that, if s[i] equals to s[j] , state[i][j] should -1\\n```\n```\\n    public int strangePrinter(String s) {\\n\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n\\n        int n = s.length();\\n        int[][] state = new int[n][n];\\n\\n        for (int i = 0; i < n; i++) {\\n            state[i][i] = 1;\\n        }\\n\\n        for (int i = n - 1; i >= 0; i--) {\\n            for (int dist = 1; dist + i < n; dist++) {\\n                int j = dist + i;\\n                if (dist == 1) {\\n                    state[i][j] = (s.charAt(i) == s.charAt(j)) ? 1 : 2;\\n                    continue;\\n                }\\n                state[i][j] = Integer.MAX_VALUE;\\n                for (int k = i; k + 1 <= j; k++) {\\n                    int tmp = state[i][k] + state[k + 1][j];\\n                    state[i][j] = Math.min(state[i][j], tmp);\\n                }\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    state[i][j]--;\\n                }\\n            }\\n        }\\n\\n        return state[0][n - 1];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 106810,
                "title": "java-o-n-3-dp-solution-with-explanation-and-simple-optimization",
                "content": "The problem wants us to find the number of ways to do something without giving specific steps like how to achieve it. This can be a typical signal that dynamic programming may come to help.\\n\\n`dp[i][j]` stands for the minimal turns we need for string from index `i` to index `j`.\\nSo we have\\n- `dp[i][i] = 1`: we need 1 turn to paint a single character.\\n- `dp[i][i + 1] `\\n  - `dp[i][i + 1] = 1` if `s.chartAt(i) == s.charAt(i + 1)`\\n  - `dp[i][i + 1] = 2` if `s.chartAt(i) != s.charAt(i + 1)`\\n\\nThen we can iteration `len` from 2 to possibly n. For each iteration, we iteration `start` index from 0 to the farthest possible.\\n\\n- The maximum turns for `dp[start][start + len]` is `len + 1`, i.e. print one character each time.\\n- We can further divide the substring to two parts: **start -> start+k** and **start+k+1 -> start+len**. It is something as following:\\n  ```\\n  index |start  ...  start + k| |start + k + 1 ... start + len|\\n  char  |  a    ...       b   | |      c       ...      b     |\\n  ```\\n    - As shown above, if we have `s.charAt(start + k) == s.charAt(start + len)`, we can **make it in one turn when we print this character (i.e. `b` here)**\\n    - This case we can reduce our turns to `dp[start][start + k] + dp[start + k + 1][start + len] - 1`\\n\\nComplete codes are here\\n```java\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n        \\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        for (int i = 0; i < n; i++) {\\n            dp[i][i] = 1;\\n            if (i < n - 1) {\\n                dp[i][i + 1] = s.charAt(i) == s.charAt(i + 1) ? 1 : 2;\\n            }\\n        }\\n        \\n        for (int len = 2; len < n; len++) {\\n            for (int start = 0; start + len < n; start++) {\\n                dp[start][start + len] = len + 1;\\n                for (int k = 0; k < len; k++) {\\n                    int temp = dp[start][start + k] + dp[start + k + 1][start + len];\\n                    dp[start][start + len] = Math.min(\\n                        dp[start][start + len],\\n                        s.charAt(start + k) == s.charAt(start + len) ? temp - 1 : temp\\n                    );\\n                }\\n            }\\n        }\\n        \\n        return dp[0][n - 1];\\n    }\\n}\\n```\\nTime complexity is `O(n^3)`\\n\\nSome simple optimization. Consecutive repeating characters do not affect our printing as we can always print them together. i.e `aaabbb` is equivalent with `ab`. So we can reduce the string first which somehow reduce `n`\\n\\n```java\\nStringBuilder sb = new StringBuilder();\\nfor (int i = 0; i < s.length(); i++) {\\n    if (i > 0 && s.charAt(i) == s.charAt(i - 1)) {\\n        continue;\\n    }\\n    sb.append(s.charAt(i));\\n}\\ns = sb.toString();\\n```\\nThis helps reduce running time from 60ms to 53ms.",
                "solutionTags": [],
                "code": "```\\n  index |start  ...  start + k| |start + k + 1 ... start + len|\\n  char  |  a    ...       b   | |      c       ...      b     |\\n  ```\n```java\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n        \\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        for (int i = 0; i < n; i++) {\\n            dp[i][i] = 1;\\n            if (i < n - 1) {\\n                dp[i][i + 1] = s.charAt(i) == s.charAt(i + 1) ? 1 : 2;\\n            }\\n        }\\n        \\n        for (int len = 2; len < n; len++) {\\n            for (int start = 0; start + len < n; start++) {\\n                dp[start][start + len] = len + 1;\\n                for (int k = 0; k < len; k++) {\\n                    int temp = dp[start][start + k] + dp[start + k + 1][start + len];\\n                    dp[start][start + len] = Math.min(\\n                        dp[start][start + len],\\n                        s.charAt(start + k) == s.charAt(start + len) ? temp - 1 : temp\\n                    );\\n                }\\n            }\\n        }\\n        \\n        return dp[0][n - 1];\\n    }\\n}\\n```\n```java\\nStringBuilder sb = new StringBuilder();\\nfor (int i = 0; i < s.length(); i++) {\\n    if (i > 0 && s.charAt(i) == s.charAt(i - 1)) {\\n        continue;\\n    }\\n    sb.append(s.charAt(i));\\n}\\ns = sb.toString();\\n```",
                "codeTag": "Java"
            },
            {
                "id": 106794,
                "title": "one-suggestion-for-all-solutions",
                "content": "I suggest to do this treatment, before go directly DP.\\n\\nShorten the original string, like reduce ```aaabbb``` to ```ab```.\\n\\nThe same consecutive characters won't change the result and this really help improve the efficiency.\\n \\nBesides, in python, it takes only 1 line to do it:\\n```\\ns = ''.join(a for a, b in zip(s, '#' + s) if a != b)\\n````\\nor use regex\\n````\\ns = re.sub(r'(.)\\\\1*', r'\\\\1', s)\\n`````\\n\\nEdited after stefan's suggestion.",
                "solutionTags": [],
                "code": "```aaabbb```\n```ab```\n```\\ns = ''.join(a for a, b in zip(s, '#' + s) if a != b)\\n```\n````\\ns = re.sub(r'(.)\\\\1*', r'\\\\1', s)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 233067,
                "title": "python-recursive-approach-with-memorization",
                "content": "For each character at the end of the string, lets consider 2 cases:\\n1. It was simply inserted with the cost of 1\\n2. It was free from some previous step to the left that printed this character already (we can print extra character all the way till the end)\\n\\nConsider string **CABBA**. Last character could be simply inserted after a string **CABB** with the cost of 1 or it could be free since there is an **A** character to the left and we could simply print extra **As** all the way till the end: **CAAAA** we just need to consider the cost of building string **CA** (same as **CAAAA**) and **BB**, in other words, split remaining string into **CA** | **BB** | **A**\\n\\n```\\nclass Solution(object):\\n    def strangePrinter(self, s):\\n        cache = dict()\\n\\n        def solve(s):\\n            if not s:\\n                return 0\\n            if s in cache:\\n                return cache[s]\\n            # cost to simply insert last character\\n            cost = solve(s[0:-1]) + 1\\n            # what if last character could be inserted for free just by reusing previous step that already prints it?\\n\\t\\t\\t# . . . . . A . . . . A\\n\\t\\t\\t# |---------| |-----| last character is free\\n            char_to_insert = s[-1]\\n            for i, c in enumerate(s[:-1]):\\n                if c == char_to_insert:\\n                    cost = min(cost, solve(s[0:i + 1]) + solve(s[i + 1:-1]))\\n            cache[s] = cost\\n            return cost\\n\\n        return solve(s)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def strangePrinter(self, s):\\n        cache = dict()\\n\\n        def solve(s):\\n            if not s:\\n                return 0\\n            if s in cache:\\n                return cache[s]\\n            # cost to simply insert last character\\n            cost = solve(s[0:-1]) + 1\\n            # what if last character could be inserted for free just by reusing previous step that already prints it?\\n\\t\\t\\t# . . . . . A . . . . A\\n\\t\\t\\t# |---------| |-----| last character is free\\n            char_to_insert = s[-1]\\n            for i, c in enumerate(s[:-1]):\\n                if c == char_to_insert:\\n                    cost = min(cost, solve(s[0:i + 1]) + solve(s[i + 1:-1]))\\n            cache[s] = cost\\n            return cost\\n\\n        return solve(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 106795,
                "title": "python-straightforward-dp-with-explanation",
                "content": "Let ```dp(i, j)``` be the number of turns needed to print ```S[i:j+1]```.\\n\\nNote that whichever turn creates the final print of S[i], might as well be the first turn, and also there might as well only be one print, since any later prints on interval [i, k] could just be on [i+1, k].\\n\\nSo suppose our first print was on [i, k].  We only need to consider prints where S[i] == S[k], because we could instead take our first turn by printing up to the last printed index where S[k] == S[i] to get the same result.  \\n\\nThen, when trying to complete the printing of interval [i, k] (with S[i] == S[k]), the job will take the same number of turns as painting [i, k-1].  This is because it is always at least as good to print [i, k] first in one turn rather than separately.\\n\\nAlso, we would need to complete [k+1, j].  So in total, our candidate answer is dp(i, k-1) + dp(k+1, j).  Of course, when k == i, our candidate is 1 + dp(i+1, j): we paint S[i] in one turn, then paint the rest in dp(i+1, j) turns.\\n\\n```\\ndef strangePrinter(self, S):\\n    memo = {}\\n    def dp(i, j):\\n        if i > j: return 0\\n        if (i, j) not in memo:\\n            ans = dp(i+1, j) + 1\\n            for k in xrange(i+1, j+1):\\n                if S[k] == S[i]:\\n                    ans = min(ans, dp(i, k-1) + dp(k+1, j))\\n            memo[i, j] = ans\\n        return memo[i, j]\\n\\n    return dp(0, len(S) - 1)\\n```",
                "solutionTags": [],
                "code": "```dp(i, j)```\n```S[i:j+1]```\n```\\ndef strangePrinter(self, S):\\n    memo = {}\\n    def dp(i, j):\\n        if i > j: return 0\\n        if (i, j) not in memo:\\n            ans = dp(i+1, j) + 1\\n            for k in xrange(i+1, j+1):\\n                if S[k] == S[i]:\\n                    ans = min(ans, dp(i, k-1) + dp(k+1, j))\\n            memo[i, j] = ans\\n        return memo[i, j]\\n\\n    return dp(0, len(S) - 1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3835843,
                "title": "100-printer-video-peculiar-minimizing-prints-with-dynamic-programming",
                "content": "## Intuition\\nWhen first encountering this problem, it seems to be a task of finding an optimal strategy for a sequence of actions. This is often a cue for a dynamic programming approach. In particular, the \"strange\" behavior of the printer (being able to print on top of existing characters and only printing the same character at a time) suggests that we can benefit from considering smaller subproblems (i.e., substrings of the input) in order to construct the solution for the whole string.\\n\\nhttps://youtu.be/f4diE_0zYs4\\n\\n## Approach\\n\\nThe solution to this problem involves setting up a dynamic programming (DP) table, where each cell \\\\( dp[i][j] \\\\) represents the minimum number of turns the printer needs to print the substring from \\\\( i \\\\) to \\\\( j \\\\). \\n\\n1. **Initialization**: We start by initializing the diagonal of the DP table with 1, as the printer only needs one turn to print a single character. So, if we have the string \"abc\", the printer can print \"a\", \"b\", or \"c\" each in one turn. As such, the diagonal of our DP table (which represents substrings of length 1) is filled with 1s.\\n\\n2. **Filling the DP Table**: We adopt a bottom-up approach to fill in the DP table. For every \\\\( i \\\\) (from \\\\( n-1 \\\\) to 0) and \\\\( j \\\\) (from \\\\( i+1 \\\\) to \\\\( n \\\\)), we initially set \\\\( dp[i][j] \\\\) to \\\\( dp[i][j-1] + 1 \\\\). This equates to printing the substring from \\\\( i \\\\) to \\\\( j-1 \\\\) first, followed by printing the character at \\\\( j \\\\) separately. For example, if we have the string \"abc\", the printer can print \"ab\" in two turns and then print \"c\" in an additional turn, making a total of 3 turns.\\n\\n3. **Considering Overlapping Characters**: If there are overlapping characters, we may be able to print the substring from \\\\( i \\\\) to \\\\( j \\\\) in fewer turns. This is where \\\\( k \\\\) comes into play. We introduce \\\\( k \\\\) to divide the substring from \\\\( i \\\\) to \\\\( j \\\\) into two parts at \\\\( k \\\\), namely the left part from \\\\( i \\\\) to \\\\( k \\\\) and the right part from \\\\( k+1 \\\\) to \\\\( j \\\\). For each \\\\( k \\\\) from \\\\( i \\\\) to \\\\( j \\\\), if \\\\( s[k] \\\\) is the same as \\\\( s[j] \\\\), we can first print the substring from \\\\( i \\\\) to \\\\( k \\\\), and then print the character at \\\\( j \\\\), which will also cover \\\\( s[k] \\\\). For instance, if we have the string \"aba\", the printer can print \"aa\" in one turn and then print \"b\" in another turn, making a total of 2 turns. In this case, we update \\\\( dp[i][j] \\\\) to be the minimum of its current value and \\\\( dp[i][k] + dp[k+1][j-1] \\\\) (or just \\\\( dp[i][k] \\\\) if \\\\( k+1 > j-1 \\\\)).\\n\\n4. **Final Output**: After filling the DP table, we can find the minimum number of turns needed to print the entire string at \\\\( dp[0][n-1] \\\\). This cell represents the minimum number of turns to print the entire string since it covers the substring from the first character (0) to the last character (\\\\( n-1 \\\\)) of the string.\\n\\n## Complexity\\n\\n- Time complexity: \\\\(O(n^3)\\\\). The algorithm needs to fill a \\\\(n \\\\times n\\\\) DP table. For each cell in the DP table, it goes through a loop of size \\\\(n\\\\) to consider all possible values of \\\\(k\\\\).\\n\\n- Space complexity: \\\\(O(n^2)\\\\). The space complexity is determined by the size of the DP table, which is \\\\(n \\\\times n\\\\).\\n\\n## Code\\n```Python []\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0]*n for _ in range(n)]\\n        \\n        for i in range(n-1, -1, -1):\\n            dp[i][i] = 1\\n            for j in range(i+1, n):\\n                dp[i][j] = dp[i][j-1] + 1\\n                for k in range(i, j):\\n                    if s[k] == s[j]:\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (dp[k+1][j-1] if k+1<=j-1 else 0))\\n\\n        return dp[0][n-1]\\n```\\n``` C++ []\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s[k] == s[j]) {\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n```\\n``` Java []\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```\\n``` JavaScript []\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar strangePrinter = function(s) {\\n    let n = s.length;\\n    let dp = Array.from(Array(n), () => new Array(n).fill(0));\\n    \\n    for (let i = n-1; i >= 0; --i) {\\n        dp[i][i] = 1;\\n        for (let j = i+1; j < n; ++j) {\\n            dp[i][j] = dp[i][j-1] + 1;\\n            for (let k = i; k < j; ++k) {\\n                if (s[k] == s[j]) {\\n                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                }\\n            }\\n        }\\n    }\\n    return dp[0][n-1];\\n};\\n```\\n``` C# []\\npublic class Solution {\\n    public int StrangePrinter(string s) {\\n        int n = s.Length;\\n        int[,] dp = new int[n,n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i,i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i,j] = dp[i,j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s[k] == s[j]) {\\n                        dp[i,j] = Math.Min(dp[i,j], dp[i,k] + (k+1<=j-1 ? dp[k+1,j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0,n-1];\\n    }\\n}\\n```\\n## Video for JavaScript & C++\\nhttps://youtu.be/bazV0MMaFQI\\nhttps://youtu.be/dBtekOl0ofE\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "C#",
                    "JavaScript"
                ],
                "code": "```Python []\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0]*n for _ in range(n)]\\n        \\n        for i in range(n-1, -1, -1):\\n            dp[i][i] = 1\\n            for j in range(i+1, n):\\n                dp[i][j] = dp[i][j-1] + 1\\n                for k in range(i, j):\\n                    if s[k] == s[j]:\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (dp[k+1][j-1] if k+1<=j-1 else 0))\\n\\n        return dp[0][n-1]\\n```\n``` C++ []\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s[k] == s[j]) {\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n```\n``` Java []\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```\n``` JavaScript []\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar strangePrinter = function(s) {\\n    let n = s.length;\\n    let dp = Array.from(Array(n), () => new Array(n).fill(0));\\n    \\n    for (let i = n-1; i >= 0; --i) {\\n        dp[i][i] = 1;\\n        for (let j = i+1; j < n; ++j) {\\n            dp[i][j] = dp[i][j-1] + 1;\\n            for (let k = i; k < j; ++k) {\\n                if (s[k] == s[j]) {\\n                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                }\\n            }\\n        }\\n    }\\n    return dp[0][n-1];\\n};\\n```\n``` C# []\\npublic class Solution {\\n    public int StrangePrinter(string s) {\\n        int n = s.Length;\\n        int[,] dp = new int[n,n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i,i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i,j] = dp[i,j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s[k] == s[j]) {\\n                        dp[i,j] = Math.Min(dp[i,j], dp[i,k] + (k+1<=j-1 ? dp[k+1,j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0,n-1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835921,
                "title": "c-recursive-dp-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse a divide-and-conquer approach to solve the problem. It breaks down the problem of finding the minimum number of operations required to print a given string into smaller subproblems and solves each subproblem independently. The solutions to these subproblems are then combined to obtain the final result for the entire string. The approach efficiently handles overlapping subproblems using dynamic programming to avoid redundant computations.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n^3)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n^2)$$\\n# Code Runtime 9 ms\\n```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    int f(int i, int j, string& s){       \\n        if (dp[i][j]!=-1) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int ans;\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        else{\\n            ans=f(i,j-1, s)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        n=s.size();\\n        dp.assign(n, vector<int>(n, -1));\\n        return f(0, n-1, s);\\n    }\\n};\\n```\\n# Code with Explanation in comments\\n```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    \\n    // Helper function to find the minimum number of operations required to print substring s[i...j]\\n    int f(int i, int j, string& s){       \\n        // If dp[i][j] has already been calculated, return its value to avoid recomputation.\\n        if (dp[i][j]!=-1) return dp[i][j];\\n        \\n        // initial case: When i=j, it only takes 1 operation to print it.\\n        if (i==j) return dp[i][j]=1;\\n        \\n        int ans; // Variable to store the minimum number of operations required to print substring s[i...j].\\n        \\n        // If s[i]==s[j] or s[j]==s[j-1],\\n        // then it\\'s equivalent to printing substring s[i...j-1].\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        \\n        // If s[i]==s[i+1], it\\'s equivalent to printing substring s[i+1...j].\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        \\n        // If the above two conditions are not met, it means that s[i] and s[j] are different, and s[j] is also different \\n        // from the character before it. In this case, we have multiple options:\\n        else{\\n            // Option 1: Print s[i...j-1] and then the character at position j, so the number of operations is f(i,j-1,s) + 1.\\n            ans=f(i,j-1, s)+1;\\n            \\n            // Option 2: We can try to find a character k between i and j (exclusive) such that s[k] is the same as s[j].\\n            // If we find such a character, it means we can print s[i...k-1] and s[k...j-1] together as one operation,\\n            // since both sequences will end with the same character s[j]. The number of operations would be f(i,k-1,s) + f(k,j-1,s).\\n            // We try all possible k values and choose the minimum among them.\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        // Save the computed result in dp table to avoid recomputation for the same subproblems.\\n        return dp[i][j]=ans;\\n    }\\n    \\n    int strangePrinter(string s) {\\n        n=s.size(); // Get the size of the input string.\\n        dp.assign(n, vector<int>(n, -1)); // Initialize the dp table with -1 to mark that no subproblem has been computed yet.\\n        return f(0, n-1, s); // Call the helper function to find the minimum number of operations to print the entire string.\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Divide and Conquer",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    int f(int i, int j, string& s){       \\n        if (dp[i][j]!=-1) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int ans;\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        else{\\n            ans=f(i,j-1, s)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        n=s.size();\\n        dp.assign(n, vector<int>(n, -1));\\n        return f(0, n-1, s);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    \\n    // Helper function to find the minimum number of operations required to print substring s[i...j]\\n    int f(int i, int j, string& s){       \\n        // If dp[i][j] has already been calculated, return its value to avoid recomputation.\\n        if (dp[i][j]!=-1) return dp[i][j];\\n        \\n        // initial case: When i=j, it only takes 1 operation to print it.\\n        if (i==j) return dp[i][j]=1;\\n        \\n        int ans; // Variable to store the minimum number of operations required to print substring s[i...j].\\n        \\n        // If s[i]==s[j] or s[j]==s[j-1],\\n        // then it\\'s equivalent to printing substring s[i...j-1].\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        \\n        // If s[i]==s[i+1], it\\'s equivalent to printing substring s[i+1...j].\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        \\n        // If the above two conditions are not met, it means that s[i] and s[j] are different, and s[j] is also different \\n        // from the character before it. In this case, we have multiple options:\\n        else{\\n            // Option 1: Print s[i...j-1] and then the character at position j, so the number of operations is f(i,j-1,s) + 1.\\n            ans=f(i,j-1, s)+1;\\n            \\n            // Option 2: We can try to find a character k between i and j (exclusive) such that s[k] is the same as s[j].\\n            // If we find such a character, it means we can print s[i...k-1] and s[k...j-1] together as one operation,\\n            // since both sequences will end with the same character s[j]. The number of operations would be f(i,k-1,s) + f(k,j-1,s).\\n            // We try all possible k values and choose the minimum among them.\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        // Save the computed result in dp table to avoid recomputation for the same subproblems.\\n        return dp[i][j]=ans;\\n    }\\n    \\n    int strangePrinter(string s) {\\n        n=s.size(); // Get the size of the input string.\\n        dp.assign(n, vector<int>(n, -1)); // Initialize the dp table with -1 to mark that no subproblem has been computed yet.\\n        return f(0, n-1, s); // Call the helper function to find the minimum number of operations to print the entire string.\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 106793,
                "title": "java-solution-dp",
                "content": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        if (n == 0) return 0;\\n        \\n        int[][] dp = new int[101][101];\\n        for (int i = 0; i < n; i++) dp[i][i] = 1;\\n        \\n        for (int i = 1; i < n; i++) {\\n            for (int j = 0; j < n - i; j++) {\\n                dp[j][j + i] = i + 1;\\n                for (int k = j + 1; k <= j + i; k++) {\\n                    int temp = dp[j][k - 1] + dp[k][j + i];\\n                    if (s.charAt(k - 1) == s.charAt(j + i)) temp--;\\n                    dp[j][j + i] = Math.min(dp[j][j + i], temp);\\n                }\\n            }\\n        }\\n        return dp[0][n - 1];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        if (n == 0) return 0;\\n        \\n        int[][] dp = new int[101][101];\\n        for (int i = 0; i < n; i++) dp[i][i] = 1;\\n        \\n        for (int i = 1; i < n; i++) {\\n            for (int j = 0; j < n - i; j++) {\\n                dp[j][j + i] = i + 1;\\n                for (int k = j + 1; k <= j + i; k++) {\\n                    int temp = dp[j][k - 1] + dp[k][j + i];\\n                    if (s.charAt(k - 1) == s.charAt(j + i)) temp--;\\n                    dp[j][j + i] = Math.min(dp[j][j + i], temp);\\n                }\\n            }\\n        }\\n        return dp[0][n - 1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1220646,
                "title": "rephrase-the-problem-for-a-simpler-recurrence-a-detailed-proof",
                "content": "If you\\'re anything like me, the explanations people have been giving for the popular DP formula are complex and nonintuitive. Their explanations go like: \\n\\n* Let ```dp(i, j)``` be the number of turns needed to print s on ```[i, j)```. \\n* Assume the first printing step is to print ```s[i]``` over some interval ```[i, k] ```. \\n* Then their formula is ```dp(i, j) == min(1 + dp(i + 1, j), dp(i, k) + dp(k + 1, j))```\\n\\nThe second part of that formula is **bad and needlessly confusing**: for some reason we either \\n1. Pay the cost of \\'1\\' for printing ```s[i]``` and move on to ```dp(i + 1, j)```, \\n\\n2. Or we print ```s[i]``` for free all the way to ```s[k]```, don\\'t move on to i + 1, but also somehow have ```s[k]``` already printed in future calls?\\n\\nIf you think you understand that formula, please ask yourself, **On which call to our dp function do we actually print ```s[i]```?** If we look at their explanation, we paint all of ```[i, k]``` at the same time, but the code and formula imply that only ```s[k]``` is painted, because we are repeatedly calling our dp function with a left endpoint of i. \\n\\n*If code and explanations contradict each other, and the code works in surprising ways, then it is impossible to extend the code to solve other problems.*\\n\\nNow, most of the time when someone claims that other existing solutions are bad, they\\'re usually mistaken. Since I genuinely want others to be able to learn from this problem too, **I\\'ll try to prove why every upvoted solution is insufficient by giving out a genuine challenge:**\\n\\n* Try to modify your code to also return the list of printer instructions (the sequence of intervals for where to print each character) that matches your minimum solution.\\n\\nI would be quite pleasantly surprised if any of the posted solutions can be modified to return the actual solution, even with 100 extra lines of code. For the solutions whose formula subtracts 1 from the answer sometimes, implying a negative cost for printing, I honestly have zero idea how you would get the output of intervals. The code technically works, but the proof seems non-constructive.\\n\\nSecondly, and most importantly, every top post has around 50% comments asking why the recursive formula given works, and few good answers. This makes the problem useless for learning or modifying to solve other problems. \\n**The question that every comment section keeps repeating is:**\\n\\nWhy do we have ```dp(i, j) == min(1 + dp(i + 1, j), dp(i, k) + dp(k + 1, j))```\\n\\nInstead of doing   `dp(i, j)  == min(1 + dp(i + 1, j), 1 + dp(i + 1, k) + dp(k + 1, j))`\\n\\nThe second recursion, if it worked, is clearly true, since it matches the explanation and the usual template for dp.\\nFortunately, **your intuition is right! The second formula not only works, but works as fast as and simpler than the popular recursion.** The key is to \\n1. Slightly reframe the question\\n2. Make the code match the explanation\\n3. Avoid hidden assumptions about our subproblems\\n\\nNow, what\\'s the hidden assumption being made? It\\'s about what the current printed character is on our interval. The bad recurrence involving ```dp(i, k)``` has a hidden assumption that we\\'ve already painted the interval [i, k) with the character at ```s[k]```, but that we haven\\'t paid the cost for that print yet. **This leads us to the new problem definition**:\\n\\n* ```dp(i, j)``` is the number of turns needed to print s on the interval ```[i, j)```, given that all of ```[i, j)``` currently has ```s[j]``` printed over it.\\n\\nFrom here, the formula is obvious, and can be extended to similar dp problems:\\n```\\ndp(i, j) = 0 if i >= j, else                   // if we have nothing to print\\n         = dp(i + 1, j) if s[i] == s[j], else  // if s[i] already has s[j] printed on it\\n\\t\\t \\n\\t\\t = min(1 + dp(i + 1, k) + dp(k + 1, j)) for (i <= k < j with s[i] == s[k]) otherwise.\\n\\t\\t \\n\\t\\t // Cost of 1 to print the interval [i, k] with s[k] == s[i],\\n\\t\\t // then the two subproblems: between i+1 and k, and after k,\\n\\t\\t // since indexes i and k are now correct (i may be equal to k)\\n```\\n\\nTo make the original problem be the answer to ```dp(0, len(s))```, we just need to append some dummy character, like \\'#\\' to s, so that we can assume our starting string to be replaced/active workspace is \\'#\\' repeated over the length of s.\\n\\nHere\\'s the code in python: `O(n^3)` and faster than 100% runtime.\\n```python\\nclass Solution:\\n\\tdef strangePrinter(self, s: str) -> int:\\n\\t\\t# Our working string can be treated as initially equal to repeated \\'#\\'\\n\\n\\t\\t# Merge consecutive characters\\n\\t\\ts = \\'\\'.join([c for i, c in enumerate(s)\\n\\t\\t\\t\\t\\t if i == 0 or c != s[i - 1]])\\n\\n\\t\\t# Track index where each letter occurs next, for faster lookup\\n\\t\\tnext_occ_search = {}\\n\\t\\tnext_occurrence_of_letter = list(range(len(s)))\\n\\t\\tfor i, c in enumerate(s):\\n\\t\\t\\tif c in next_occ_search:\\n\\t\\t\\t\\tnext_occurrence_of_letter[next_occ_search[c]] = i\\n\\t\\t\\tnext_occ_search[c] = i\\n\\n\\t\\tfor v in next_occ_search.values():\\n\\t\\t\\tnext_occurrence_of_letter[v] = 10**10\\n\\n\\t\\t# dp(left_ind, right_ind) is minimum steps to convert a string of\\n\\t\\t# repeated s[right_ind] into s[left_ind:right_ind]\\n\\t\\t# Note the python half open interval: [left_ind, right_ind)\\n\\t\\t@functools.lru_cache(None)\\n\\t\\tdef dp(left_ind: int, right_ind: int) -> int:\\n\\n\\t\\t\\t# Nothing to print\\n\\t\\t\\tif left_ind >= right_ind:\\n\\t\\t\\t\\treturn 0\\n\\n\\t\\t\\t# s[left_ind] is already the desired character\\n\\t\\t\\tif s[right_ind] == s[left_ind]:\\n\\t\\t\\t\\treturn dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\t# If our pivot index is left_ind\\n\\t\\t\\tans = 1 + dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\tpivot_index = next_occurrence_of_letter[left_ind]\\n\\t\\t\\twhile pivot_index <= right_ind:\\n\\t\\t\\t\\tans = min(ans, 1 + dp(left_ind + 1, pivot_index)\\n\\t\\t\\t\\t\\t\\t  + dp(pivot_index + 1, right_ind))\\n\\t\\t\\t\\tpivot_index = next_occurrence_of_letter[pivot_index]\\n\\n\\t\\t\\treturn ans\\n\\n\\t\\ts += \\'#\\'\\n\\t\\treturn dp(0, len(s) - 1)\\n```\\n\\nThis post is partly inspired by [laiden\\'s excellent proof](https://leetcode.com/problems/strange-printer/discuss/118769/Proof-of-O(n3)-algorithms), which comes the closest of any to this kind of formula. I highly recommend checking it out, especially for the reasoning for pivot_index, the rightmost index that isn\\'t repainted after we print on ```[i, j)```, and why we can always print ```s[i]``` first. Reframing the question around the endpoint behavior makes this problem more clearly similar to problem [546](https://leetcode.com/problems/remove-boxes)\\n\\nAs always, feel free to ask any questions, make comments or post your modifications of the code and formula.\\nEdit: Changed binary search for next indices to a lookup array based on idea from @decomplexifier giving further speedup, from ~150 ms -> ~130 ms",
                "solutionTags": [
                    "Python"
                ],
                "code": "```dp(i, j)```\n```[i, j)```\n```s[i]```\n```[i, k] ```\n```dp(i, j) == min(1 + dp(i + 1, j), dp(i, k) + dp(k + 1, j))```\n```s[i]```\n```dp(i + 1, j)```\n```s[i]```\n```s[k]```\n```s[k]```\n```s[i]```\n```[i, k]```\n```s[k]```\n```dp(i, j) == min(1 + dp(i + 1, j), dp(i, k) + dp(k + 1, j))```\n```dp(i, k)```\n```s[k]```\n```dp(i, j)```\n```[i, j)```\n```[i, j)```\n```s[j]```\n```\\ndp(i, j) = 0 if i >= j, else                   // if we have nothing to print\\n         = dp(i + 1, j) if s[i] == s[j], else  // if s[i] already has s[j] printed on it\\n\\t\\t \\n\\t\\t = min(1 + dp(i + 1, k) + dp(k + 1, j)) for (i <= k < j with s[i] == s[k]) otherwise.\\n\\t\\t \\n\\t\\t // Cost of 1 to print the interval [i, k] with s[k] == s[i],\\n\\t\\t // then the two subproblems: between i+1 and k, and after k,\\n\\t\\t // since indexes i and k are now correct (i may be equal to k)\\n```\n```dp(0, len(s))```\n```python\\nclass Solution:\\n\\tdef strangePrinter(self, s: str) -> int:\\n\\t\\t# Our working string can be treated as initially equal to repeated \\'#\\'\\n\\n\\t\\t# Merge consecutive characters\\n\\t\\ts = \\'\\'.join([c for i, c in enumerate(s)\\n\\t\\t\\t\\t\\t if i == 0 or c != s[i - 1]])\\n\\n\\t\\t# Track index where each letter occurs next, for faster lookup\\n\\t\\tnext_occ_search = {}\\n\\t\\tnext_occurrence_of_letter = list(range(len(s)))\\n\\t\\tfor i, c in enumerate(s):\\n\\t\\t\\tif c in next_occ_search:\\n\\t\\t\\t\\tnext_occurrence_of_letter[next_occ_search[c]] = i\\n\\t\\t\\tnext_occ_search[c] = i\\n\\n\\t\\tfor v in next_occ_search.values():\\n\\t\\t\\tnext_occurrence_of_letter[v] = 10**10\\n\\n\\t\\t# dp(left_ind, right_ind) is minimum steps to convert a string of\\n\\t\\t# repeated s[right_ind] into s[left_ind:right_ind]\\n\\t\\t# Note the python half open interval: [left_ind, right_ind)\\n\\t\\t@functools.lru_cache(None)\\n\\t\\tdef dp(left_ind: int, right_ind: int) -> int:\\n\\n\\t\\t\\t# Nothing to print\\n\\t\\t\\tif left_ind >= right_ind:\\n\\t\\t\\t\\treturn 0\\n\\n\\t\\t\\t# s[left_ind] is already the desired character\\n\\t\\t\\tif s[right_ind] == s[left_ind]:\\n\\t\\t\\t\\treturn dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\t# If our pivot index is left_ind\\n\\t\\t\\tans = 1 + dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\tpivot_index = next_occurrence_of_letter[left_ind]\\n\\t\\t\\twhile pivot_index <= right_ind:\\n\\t\\t\\t\\tans = min(ans, 1 + dp(left_ind + 1, pivot_index)\\n\\t\\t\\t\\t\\t\\t  + dp(pivot_index + 1, right_ind))\\n\\t\\t\\t\\tpivot_index = next_occurrence_of_letter[pivot_index]\\n\\n\\t\\t\\treturn ans\\n\\n\\t\\ts += \\'#\\'\\n\\t\\treturn dp(0, len(s) - 1)\\n```\n```[i, j)```\n```s[i]```",
                "codeTag": "Java"
            },
            {
                "id": 3836315,
                "title": "python-easy-to-understand-hard-problem-664-strange-printer",
                "content": "# Python | Easy to Understand | Hard Problem | 664. Strange Printer\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        N = len(s)\\n        @cache\\n        def calc(left, right): \\n            if left >= right: \\n                return 0\\n            best = calc(left + 1, right) + 1\\n            for index in range(left + 1, right + 1): \\n                if s[left] == s[index]: \\n                    best = min(best, calc(left, index - 1) + calc(index, right))\\n            return best\\n        return calc(0, N - 1) + 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        N = len(s)\\n        @cache\\n        def calc(left, right): \\n            if left >= right: \\n                return 0\\n            best = calc(left + 1, right) + 1\\n            for index in range(left + 1, right + 1): \\n                if s[left] == s[index]: \\n                    best = min(best, calc(left, index - 1) + calc(index, right))\\n            return best\\n        return calc(0, N - 1) + 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 118769,
                "title": "proof-of-o-n-3-algorithms",
                "content": "This is an update of the proof I first posted on december 2017.\\n\\n----------------------------------\\n----------------------------------\\nWe will first prove this inefficient algorithm to be correct, and then tune it so that it runs in O(n^3) time.\\n```\\n#python code\\ndef strangePrinter(self, S):\\n    def solve(l, r):\\n        if l > r: return 0\\n        ans = solve(l+1, r) + 1\\n        for k in range(l+1, r+1): #[l+1,r]\\n            if S[k] == S[l]:\\n                ans = min(ans, solve(l, k-1) + solve(k+1, r))\\n        return ans\\n    return solve(0, len(S) - 1)\\n```\\n\\nIn the proof, lets imagine that solve(l, r) not only finds the minimum necessary number of prints, but also finds an optimal print sequence that achieves this number of prints.\\n\\nPROOF START:\\n\\nsolve(l,r) finds an optimal print sequence to print s[l,r] over range [l,r] from scratch. What should be the first print in this sequence?\\n\\n*Given that we need to paste over all cells in [l,r], one option for a first print that is always optimal is to print s[l] over the entire range.*\\n<code>proof by substitution:\\nTake an arbitrary sequence of prints which optimally prints s[l,r] over [l,r] from scratch.\\nThere is exactly one print over cell l which prints s[l]. Lets say that it prints over the range [l,x], and that it was the ith print.\\nNow, we create new sequence of prints, as follows\\n1: print s[l] over the entire range [l,r]\\n2: do all prints before the ith print, BUT ignore any part of the prints over the range [l,x]. If an entire print lies within [l,x], skip it.\\n3: do all prints after the ith print.\\nThis new sequence prints exactly the same thing as the old sequence of prints. However, it does it in fewer or equal number of prints.\\n</code>\\nSo, lets just agree to always do this as the first print.\\n\\nNow, we know that the optimal print sequence that solve(l,r) will find starts w/ one print of s[l] over [l,r]. Afterwards, it does some optimal subsequent prints to finish off the range.\\n\\nIn the (not yet known) optimal print sequence that solve(l,r) ends up finding, there will be some cells in [l,r] which **do not get pasted over again after that first print**. Lets denote the *rightmost* of these cells as the **pivot**.\\n\\nThere are two possible cases for the pivot:\\n\\n1. The pivot is cell l.\\n\\nAfter doing the first print s[l] over [l,r], all the cells in [l+1,r] need to be pasted over again, so we need to print s[l+1,r] over [l+1,r] from scratch. The optimal print sequence of solve(l+1,r) does exactly this.\\n\\n2. The pivot is not cell l.\\n\\nLets denote the pivot as k, where l<k<=r and s[k] == s[l].\\n\\nThe algorithm logic asserts that if k is an optimal pivot, an optimal print sequence for solve(l,r) has the same number of prints as solve(l,k-1) and solve(k+1,r) combined. Why is this true?\\n\\nLets think about the optimal print sequence that solve(l,k-1) finds. It first prints s[l] over [l,k-1] and then does optimal subsequent prints to finish off the range [l,k-1]. \\n\\nNotice that after solve(l,r) first prints s[l] over [l,r], it can copy the \"optimal subsequent prints\" of solve(l,k-1) to finish off the subrange [l,k-1].\\n\\nThis is because the conditions under which they must finish off range [l,k-1] are IDENTICAL. Namely,\\ni. All cells in the range have value s[l], initially.\\nii. Any print on this range cannot extend left of l nor right of k-1.\\n\\nFor solve(l,r), a print on the range [l,k-1] cannot extend right of k-1, because k is the pivot (note the definition of pivot).\\n\\nLastly, solve(l,r) must print s[k+1,r] over subrange [k+1,r] from scratch. We can copy the optimal print sequence of solve(k+1,r) to do this.\\n\\nThese observations lead to a straightforward way of constructing an optimal print sequence for solve(l,r) under the assumption that the optimal pivot is k.\\ni. First print s[l] over [l,r]\\nii. Copy the optimal subsequent prints found by solve(l,k-1) to finish off range [l,k-1]\\niii. Copy the optimal print sequence found by solve(k+1,r) to do range [k+1,r]\\n\\nNotice that this print sequence has exactly the same number of prints as solve(l,k-1) and solve(k+1,r) combined. \\n\\nLastly, we don\\'t know what the optimal pivot is initially, but since solve(l,r) tries out all candidates, it is guarenteed to find the optimal print sequence overall.\\n\\nThis concludes the proof that the algorithm is correct.\\n\\nNow, to speed up computation, we will augment our algorithm w/ memoization.\\n```\\ndef strangePrinter(self, S):\\n    memo = {}\\n    def solve(l, r):\\n        if l > r: return 0\\n        if (l, r) not in memo:\\n            ans = solve(l+1, r) + 1\\n            for k in range(l+1, r+1): #[l+1,r]\\n                if S[k] == S[l]:\\n                    ans = min(ans, solve(l, k-1) + solve(k+1, r))\\n            memo[l, r] = ans\\n        return memo[l, r]\\n\\n    return solve(0, len(S) - 1)\\n```\\n\\nComparing the original algorithm to this augmented version, one can see that the memoization does not affect what is returned by any subproblem. Therefore, the algorithm is still correct.\\nHowever, the time complexity has been reduced from exponential time to O(n^3).\\n\\nQ.E.D.",
                "solutionTags": [],
                "code": "```\\n#python code\\ndef strangePrinter(self, S):\\n    def solve(l, r):\\n        if l > r: return 0\\n        ans = solve(l+1, r) + 1\\n        for k in range(l+1, r+1): #[l+1,r]\\n            if S[k] == S[l]:\\n                ans = min(ans, solve(l, k-1) + solve(k+1, r))\\n        return ans\\n    return solve(0, len(S) - 1)\\n```\n```\\ndef strangePrinter(self, S):\\n    memo = {}\\n    def solve(l, r):\\n        if l > r: return 0\\n        if (l, r) not in memo:\\n            ans = solve(l+1, r) + 1\\n            for k in range(l+1, r+1): #[l+1,r]\\n                if S[k] == S[l]:\\n                    ans = min(ans, solve(l, k-1) + solve(k+1, r))\\n            memo[l, r] = ans\\n        return memo[l, r]\\n\\n    return solve(0, len(S) - 1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3836705,
                "title": "easy-recursive-solution-dp-java-beginner-s-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIntuition is to reduce the problem somehow to problems of smaller size. If string has just 1 letter then minimum steps would be 1.\\nIf it has 2 letters then there can be 2 cases : `f(\"aa\") = 1` `f(\"ab\") = 2`. Similarly for all unique characters we have length as the answer. \\nGeneralisation : If a current character doesnt occur in the string then we can call the recursive function for `i + 1` to `j` and add 1.\\neg. str = `abcb` then `answer = 1 + Util(\"bcb\")`. But in case we have a character that is same as the current character then we might have better option. eg str = `abac`, in this case we have `a` repeated, so we might get a better answer. In this case, total steps will be 3, instead of 4 since `a` is repeating (`1 for \"aaaa\", 1 for putting b (abaa), 1 for putting c (abac)`). Now since we dont know where exactly is the better we will find all of them. Now we will split the str into `aba` and `c`, means at the point where we found repeated character.\\n\\nThis is done to split the problem into subproblem, Now we are seeing that in `aba`, the amount of steps needed would be same as `ab`, so we will remove the repeated character and call the `Util` function for `i` to `k - 1` and for another half of the string from `k + 1` to `j`. \\nNote : We have removed the last `a` from the first half as discussed earlier.\\nNow we will calculate the minimum of the answer with the better answer and return the updated answer.\\n\\n# Complexity\\n- Time complexity: O(N * N * N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N * N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        char[] sChar = s.toCharArray();\\n        int[][] dp = new int[n][n];\\n        for(int[] in : dp) Arrays.fill(in, -1);\\n        return Util(0, n - 1, sChar, dp);\\n    }\\n    public int Util(int i, int j, char[] sChar, int[][] dp) {\\n        if (i > j) {\\n            return 0;\\n        }\\n\\n        if(dp[i][j] != -1) return dp[i][j];\\n        \\n        int firstLetter = sChar[i];\\n        // in case, current character is not repeated in the rest of the string\\n        int answer = 1 + Util(i + 1, j, sChar, dp);\\n        for (int k = i + 1; k <= j; k++) {\\n            // if repeated then update the answer\\n            if (sChar[k] == firstLetter) {   \\n                // splitting from i -> k - 1(remove the last character)\\n                // and from k + 1 -> j             \\n                int betterAnswer = Util(i, k - 1, sChar, dp) + Util(k + 1, j, sChar, dp);\\n                answer = Math.min(answer, betterAnswer);\\n            }\\n        }\\n        return dp[i][j] = answer;\\n    }\\n}\\n```\\n# Please upvote if you like the solution.",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        char[] sChar = s.toCharArray();\\n        int[][] dp = new int[n][n];\\n        for(int[] in : dp) Arrays.fill(in, -1);\\n        return Util(0, n - 1, sChar, dp);\\n    }\\n    public int Util(int i, int j, char[] sChar, int[][] dp) {\\n        if (i > j) {\\n            return 0;\\n        }\\n\\n        if(dp[i][j] != -1) return dp[i][j];\\n        \\n        int firstLetter = sChar[i];\\n        // in case, current character is not repeated in the rest of the string\\n        int answer = 1 + Util(i + 1, j, sChar, dp);\\n        for (int k = i + 1; k <= j; k++) {\\n            // if repeated then update the answer\\n            if (sChar[k] == firstLetter) {   \\n                // splitting from i -> k - 1(remove the last character)\\n                // and from k + 1 -> j             \\n                int betterAnswer = Util(i, k - 1, sChar, dp) + Util(k + 1, j, sChar, dp);\\n                answer = Math.min(answer, betterAnswer);\\n            }\\n        }\\n        return dp[i][j] = answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 106811,
                "title": "c-29ms-dp-solution",
                "content": "This problem is simiiar to [#546 Remove Boxes](https://leetcode.com/problems/remove-boxes/description/) which uses `f[l][r][k]` to store the maximum points of range `[l, r]` with `k` boxes equal to `r`. But for this problem, we can use 2D-array DP instead of 3D-array DP because the store of `k` is useless.\\n\\n`f[i][j]` represents the minumum turns to print the sequence from `i` to `j`. The transition function should be: \\n```\\nf[i][j] = min(f[i][k] + f[k+1][j-1]) for each k where i<k<j and s[k]=s[j]\\n```\\nDo not forget the common transition:\\n```\\nf[i][j] = f[i][j-1] + 1\\n```\\nAnd the border condition:\\n```\\nf[i][j] = 0 where i>j\\n```\\n\\nMy C++ code is shown as below(with memorization):\\n```\\n#include <string>\\n#include <cmath>\\n\\nclass Solution\\n{\\nprivate:\\n    int f[100][100];\\n    \\nprivate:\\n    int dfs(const std::string& s, int l, int r)\\n    {\\n        if (l > r) return 0;\\n        if (f[l][r]) return f[l][r];\\n        f[l][r] = dfs(s, l, r - 1) + 1;\\n        for (int i = l; i < r; ++i)\\n        {\\n            if (s[i] == s[r])\\n            {\\n                f[l][r] = std::min(f[l][r], dfs(s, l, i) + dfs(s, i + 1, r - 1));\\n            }\\n        }\\n        return f[l][r];\\n    }\\n    \\npublic:\\n    int strangePrinter(std::string s)\\n    {\\n        memset(f, 0, sizeof(f));\\n        int len = (int)s.size();\\n        return dfs(s, 0, len - 1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nf[i][j] = min(f[i][k] + f[k+1][j-1]) for each k where i<k<j and s[k]=s[j]\\n```\n```\\nf[i][j] = f[i][j-1] + 1\\n```\n```\\nf[i][j] = 0 where i>j\\n```\n```\\n#include <string>\\n#include <cmath>\\n\\nclass Solution\\n{\\nprivate:\\n    int f[100][100];\\n    \\nprivate:\\n    int dfs(const std::string& s, int l, int r)\\n    {\\n        if (l > r) return 0;\\n        if (f[l][r]) return f[l][r];\\n        f[l][r] = dfs(s, l, r - 1) + 1;\\n        for (int i = l; i < r; ++i)\\n        {\\n            if (s[i] == s[r])\\n            {\\n                f[l][r] = std::min(f[l][r], dfs(s, l, i) + dfs(s, i + 1, r - 1));\\n            }\\n        }\\n        return f[l][r];\\n    }\\n    \\npublic:\\n    int strangePrinter(std::string s)\\n    {\\n        memset(f, 0, sizeof(f));\\n        int len = (int)s.size();\\n        return dfs(s, 0, len - 1);\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 146916,
                "title": "concise-dp-solution-in-c",
                "content": "`d[start][end]` is the mininum number of steps to print a substring from `start`th to `end`th inclusive. In the worst case a printer has to print every character separately, so `d[start][end] = end - start`, but it may be possible to get away with fewer steps by combining subproblems `d[start][k-1]` and `d[k][end]` for each `k` between `start` and `end`. The only other thing to keep in mind is that if `s[k-1] == s[end]` we can get `end`th character (and all same characters before it) for free by extending printed step from `k-1` all the way to the `end`, since it\\'s always possible to override the ones that do not match with correct characters.\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(const string& s) {\\n        vector<vector<int>> d(s.size()+1, vector<int>(s.size()+1));\\n        for (int len = 0; len < s.size(); ++len) {\\n            for (int start = 0; start < s.size() - len; ++start) {\\n                int end = start + len;\\n                d[start][end] = len + 1;\\n                for (int k = start + 1; k <= end; ++k) {\\n                    int steps = d[start][k-1] + d[k][end] - (s[k-1] == s[end] ? 1 : 0);\\n                    d[start][end] = min(d[start][end], steps);\\n                }\\n            }\\n        }\\n        return d[0][s.size()-1];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(const string& s) {\\n        vector<vector<int>> d(s.size()+1, vector<int>(s.size()+1));\\n        for (int len = 0; len < s.size(); ++len) {\\n            for (int start = 0; start < s.size() - len; ++start) {\\n                int end = start + len;\\n                d[start][end] = len + 1;\\n                for (int k = start + 1; k <= end; ++k) {\\n                    int steps = d[start][k-1] + d[k][end] - (s[k-1] == s[end] ? 1 : 0);\\n                    d[start][end] = min(d[start][end], steps);\\n                }\\n            }\\n        }\\n        return d[0][s.size()-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839197,
                "title": "ex-amazon-explains-a-solution-with-a-video-python-javascript-java-and-c",
                "content": "# Intuition\\nUsing dynamic programming to keep how many times the strange printer should print characters in current range between start and end.\\n\\n\\n---\\n\\n\\n# Solution Video\\n## *** Please upvote for this article. *** \\n\\nhttps://youtu.be/bAS9rmAxBnI\\n\\n# Subscribe to my channel from here. I have 235 videos as of July 31th\\nhttp://www.youtube.com/channel/UC9RMNwYTL3SXCP6ShLWVFww?sub_confirmation=1\\n\\n---\\n\\n# Approach\\nThis is based on Python solution. Other might be different a bit.\\n\\n1. Initialize an empty dictionary `memo` to store the results of subproblems for memoization.\\n\\n2. Define a recursive function `min_turns_to_print(start, end)` that calculates the minimum number of turns needed to print the substring `s[start:end+1]`.\\n\\n3. In the `min_turns_to_print` function:\\n   a. Base case: If `start` is greater than `end`, there are no characters to print, so return 0 turns.\\n   b. Check if the result for the current subproblem `(start, end)` is already memoized in `memo`. If yes, return the memoized result to avoid redundant computations.\\n   c. Initialize the minimum number of turns `res` for the current subproblem by assuming that the last character `s[end]` is printed separately. Therefore, `res = min_turns_to_print(start, end - 1) + 1`.\\n\\n4. Try to improve the minimum turns `res` by considering all possible break points (middle) between `start` and `end - 1`. For each `middle`:\\n   a. If the character at `s[middle]` is the same as the character at `s[end]`, it means that we can potentially print the substring `s[start:end+1]` in a single operation. In this case, try to combine the turns needed to print `s[start:middle]` and `s[middle+1:end]` separately. Calculate `min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1)`.\\n   b. Update `res` to be the minimum of the current `res` and the value calculated in the previous step, i.e., `res = min(res, min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1))`.\\n\\n5. Memoize the result `res` for the current subproblem `(start, end)` in the `memo` dictionary, so that we can use it for future computations.\\n\\n6. Return the minimum number of turns needed to print the entire string `s`, which is the result of calling `min_turns_to_print(0, len(s) - 1)`.\\n\\nThe main idea of this algorithm is to recursively divide the string into smaller subproblems and use memoization to avoid redundant calculations. By considering all possible break points, we can find the optimal way to print the string with the minimum number of turns.\\n\\n# Complexity\\nThis is based on Python solution. Other might be different a bit.\\n\\n- Time complexity: O(n^3)\\n\\nn is the length of the input string s. The reason for this time complexity is due to the recursive nature of the min_turns_to_print function and the memoization technique used.\\n\\nIn the min_turns_to_print function, we are considering all possible subproblems by iterating through all possible start and end positions of substrings of s. For each substring, we also consider all possible break points (middle) to find the optimal way to print it. This leads to three nested loops, resulting in a cubic time complexity.\\n\\n- Space complexity: O(n^2)\\n\\nn is the length of the input string s. The main reason for this space complexity is the memoization dictionary memo. Since we are memoizing the results of all possible subproblems (start and end positions of substrings), the space required for the memo dictionary grows quadratically with the length of the input string. Additionally, the recursion stack also contributes to the space complexity, but it is limited to O(n) in this case.\\n\\n```python []\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        memo = {}\\n\\n        def min_turns_to_print(start, end):\\n            if start > end:\\n                return 0\\n            \\n            if (start, end) in memo:\\n                return memo[(start, end)]\\n            \\n            res = min_turns_to_print(start, end - 1) + 1\\n\\n            for middle in range(start, end):\\n                if s[middle] == s[end]:\\n                    res = min(res, min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1))\\n            \\n            memo[(start, end)] = res\\n            return res\\n\\n        return min_turns_to_print(0, len(s) - 1)        \\n```\\n```javascript []\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar strangePrinter = function(s) {\\n    const memo = {};\\n\\n    function min_turns_to_print(start, end) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        \\n        if (memo.hasOwnProperty(`${start}-${end}`)) {\\n            return memo[`${start}-${end}`];\\n        }\\n        \\n        let res = min_turns_to_print(start, end - 1) + 1;\\n\\n        for (let middle = start; middle < end; middle++) {\\n            if (s[middle] === s[end]) {\\n                res = Math.min(res, min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1));\\n            }\\n        }\\n        \\n        memo[`${start}-${end}`] = res;\\n        return res;\\n    }\\n\\n    return min_turns_to_print(0, s.length - 1);    \\n};\\n```\\n```java []\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        Map<String, Integer> memo = new HashMap<>();\\n\\n        return min_turns_to_print(0, s.length() - 1, s, memo);        \\n    }\\n\\n    private int min_turns_to_print(int start, int end, String s, Map<String, Integer> memo) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        \\n        String key = start + \"-\" + end;\\n        if (memo.containsKey(key)) {\\n            return memo.get(key);\\n        }\\n        \\n        int res = min_turns_to_print(start, end - 1, s, memo) + 1;\\n\\n        for (int middle = start; middle < end; middle++) {\\n            if (s.charAt(middle) == s.charAt(end)) {\\n                res = Math.min(res, min_turns_to_print(start, middle, s, memo) + min_turns_to_print(middle + 1, end - 1, s, memo));\\n            }\\n        }\\n        \\n        memo.put(key, res);\\n        return res;\\n    }    \\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        std::unordered_map<std::string, int> memo;\\n        return min_turns_to_print(0, s.length() - 1, s, memo);        \\n    }\\n\\nprivate:\\n    int min_turns_to_print(int start, int end, const std::string& s, std::unordered_map<std::string, int>& memo) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        \\n        std::string key = std::to_string(start) + \"-\" + std::to_string(end);\\n        if (memo.count(key)) {\\n            return memo[key];\\n        }\\n        \\n        int res = min_turns_to_print(start, end - 1, s, memo) + 1;\\n\\n        for (int middle = start; middle < end; middle++) {\\n            if (s[middle] == s[end]) {\\n                res = std::min(res, min_turns_to_print(start, middle, s, memo) + min_turns_to_print(middle + 1, end - 1, s, memo));\\n            }\\n        }\\n        \\n        memo[key] = res;\\n        return res;\\n    }    \\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "JavaScript"
                ],
                "code": "```python []\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        memo = {}\\n\\n        def min_turns_to_print(start, end):\\n            if start > end:\\n                return 0\\n            \\n            if (start, end) in memo:\\n                return memo[(start, end)]\\n            \\n            res = min_turns_to_print(start, end - 1) + 1\\n\\n            for middle in range(start, end):\\n                if s[middle] == s[end]:\\n                    res = min(res, min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1))\\n            \\n            memo[(start, end)] = res\\n            return res\\n\\n        return min_turns_to_print(0, len(s) - 1)        \\n```\n```javascript []\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar strangePrinter = function(s) {\\n    const memo = {};\\n\\n    function min_turns_to_print(start, end) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        \\n        if (memo.hasOwnProperty(`${start}-${end}`)) {\\n            return memo[`${start}-${end}`];\\n        }\\n        \\n        let res = min_turns_to_print(start, end - 1) + 1;\\n\\n        for (let middle = start; middle < end; middle++) {\\n            if (s[middle] === s[end]) {\\n                res = Math.min(res, min_turns_to_print(start, middle) + min_turns_to_print(middle + 1, end - 1));\\n            }\\n        }\\n        \\n        memo[`${start}-${end}`] = res;\\n        return res;\\n    }\\n\\n    return min_turns_to_print(0, s.length - 1);    \\n};\\n```\n```java []\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        Map<String, Integer> memo = new HashMap<>();\\n\\n        return min_turns_to_print(0, s.length() - 1, s, memo);        \\n    }\\n\\n    private int min_turns_to_print(int start, int end, String s, Map<String, Integer> memo) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        \\n        String key = start + \"-\" + end;\\n        if (memo.containsKey(key)) {\\n            return memo.get(key);\\n        }\\n        \\n        int res = min_turns_to_print(start, end - 1, s, memo) + 1;\\n\\n        for (int middle = start; middle < end; middle++) {\\n            if (s.charAt(middle) == s.charAt(end)) {\\n                res = Math.min(res, min_turns_to_print(start, middle, s, memo) + min_turns_to_print(middle + 1, end - 1, s, memo));\\n            }\\n        }\\n        \\n        memo.put(key, res);\\n        return res;\\n    }    \\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        std::unordered_map<std::string, int> memo;\\n        return min_turns_to_print(0, s.length() - 1, s, memo);        \\n    }\\n\\nprivate:\\n    int min_turns_to_print(int start, int end, const std::string& s, std::unordered_map<std::string, int>& memo) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        \\n        std::string key = std::to_string(start) + \"-\" + std::to_string(end);\\n        if (memo.count(key)) {\\n            return memo[key];\\n        }\\n        \\n        int res = min_turns_to_print(start, end - 1, s, memo) + 1;\\n\\n        for (int middle = start; middle < end; middle++) {\\n            if (s[middle] == s[end]) {\\n                res = std::min(res, min_turns_to_print(start, middle, s, memo) + min_turns_to_print(middle + 1, end - 1, s, memo));\\n            }\\n        }\\n        \\n        memo[key] = res;\\n        return res;\\n    }    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 788261,
                "title": "a-recursive-c-top-down-dp-solution-o-n-3-fast",
                "content": "Let\\'s try to think about this problem with an example. Say our input string is [si, si+1, si+2, si+3, .........., sj]\\n\\nThink of the last character **sj**. This character either would have been printed fresh in a new turn of printer starting at index **j**, \\nOR it might have been printed as a part of some previous turn of printer starting at index **< j** and **>= i**.\\n\\nIf we consider the first option then one of the possible solutions would be - \\n**PossibleSolution[i][j] = Solution[i][j-1] + 1**\\n\\nA clear optimization here would be that if **sj-1 == s**j or **si == sj**, then **Solution[i][j] = Solution[i][j-1]**. \\n\\nAnother optimization here would be that if **si+1 == si**, then **Solution[i][j] = Solution[i+1][j]**.\\n\\nFor the second option, suppose there are some characters which are equal to **sj** with index **k < j**. Therefore, our character **sj** could have been printed as a part of printing any of these characters. So for all such index k\\n\\n**PossibleSolution[i][j] = Solution[i][k-1]** (solution to print the string starting at index i and ending at k-1) **+ Solution[k, j-1]** (solution to print the string starting at index k and ending at j-1)\\n\\nNote - We don\\'t consider index **j** on the right side since we are already assuming that it is getting printed as part of printing the character **sk**. Therefore it is already covered in **Solution[k][j-1]**\\n\\nOur final **Solution[i][j]** would be the minimum of all **PossibleSolution[i][j]** above.\\n\\n\\n```\\nclass Solution {\\n    \\nprivate:\\n    string s;\\n    int answer[100][100];\\n    \\n\\t/* Find minimum number of turns the printer will need in order to print the string from index i to index j */\\n    int find(int i, int j)\\n    {\\n\\t\\t/* I don\\'t need to explain this */\\n        if(answer[i][j] != -1)\\n            return answer[i][j];\\n        \\n        if(s[j-1] == s[j] || s[i] == s[j])\\n        {\\n            /* A clear optimization here would be that if sj-1 == sj or si == sj, then Solution[i][j] = Solution[i][j-1] */\\n            answer[i][j] = find(i, j-1);\\n        }\\n        else if(s[i] == s[i+1])\\n        {\\n            /* Another optimization here would be that if si+1 == si, then Solution[i][j] = Solution[i+1][j] */\\n            answer[i][j] = find(i+1, j);\\n        }\\n        else\\n        {\\n\\t\\t\\t/* PossibleSolution[i][j] = Solution[i][j-1] + 1 */\\n            answer[i][j] = find(i, j-1) + 1;\\n            \\n            for(int k = i+1; k < j; ++k)\\n            {\\n                if(s[k] == s[j])\\n                {\\n\\t\\t\\t\\t\\t/* PossibleSolution[i][j] = Solution[i][k-1] (solution to print the string starting at index i and ending at k-1) + Solution[k, j-1] (solution to print the string starting at index k and ending at j-1) */\\n                    answer[i][j] = min(answer[i][j], find(i, k-1) + find(k, j-1));\\n                }\\n            }\\n        }\\n        \\n        return answer[i][j];\\n    }\\n    \\npublic:\\n    int strangePrinter(string s) \\n    {\\n        if(s.length() == 0)\\n            return 0;\\n        \\n        this->s = std::move(s);\\n        \\n        for(int i = 0 ; i < this->s.length(); ++i)\\n        {\\n            for(int j = 0 ; j < this->s.length(); ++j)\\n            {\\n                if(i==j)\\n                    answer[i][j] = 1;\\n                else\\n                    answer[i][j] = -1;\\n            }\\n        }\\n        \\n        return find(0, this->s.length()-1);\\n    }\\n};\\n```\\n\\n*Runtime: 20 ms, faster than 100.00% of C++ online submissions for Strange Printer*",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    \\nprivate:\\n    string s;\\n    int answer[100][100];\\n    \\n\\t/* Find minimum number of turns the printer will need in order to print the string from index i to index j */\\n    int find(int i, int j)\\n    {\\n\\t\\t/* I don\\'t need to explain this */\\n        if(answer[i][j] != -1)\\n            return answer[i][j];\\n        \\n        if(s[j-1] == s[j] || s[i] == s[j])\\n        {\\n            /* A clear optimization here would be that if sj-1 == sj or si == sj, then Solution[i][j] = Solution[i][j-1] */\\n            answer[i][j] = find(i, j-1);\\n        }\\n        else if(s[i] == s[i+1])\\n        {\\n            /* Another optimization here would be that if si+1 == si, then Solution[i][j] = Solution[i+1][j] */\\n            answer[i][j] = find(i+1, j);\\n        }\\n        else\\n        {\\n\\t\\t\\t/* PossibleSolution[i][j] = Solution[i][j-1] + 1 */\\n            answer[i][j] = find(i, j-1) + 1;\\n            \\n            for(int k = i+1; k < j; ++k)\\n            {\\n                if(s[k] == s[j])\\n                {\\n\\t\\t\\t\\t\\t/* PossibleSolution[i][j] = Solution[i][k-1] (solution to print the string starting at index i and ending at k-1) + Solution[k, j-1] (solution to print the string starting at index k and ending at j-1) */\\n                    answer[i][j] = min(answer[i][j], find(i, k-1) + find(k, j-1));\\n                }\\n            }\\n        }\\n        \\n        return answer[i][j];\\n    }\\n    \\npublic:\\n    int strangePrinter(string s) \\n    {\\n        if(s.length() == 0)\\n            return 0;\\n        \\n        this->s = std::move(s);\\n        \\n        for(int i = 0 ; i < this->s.length(); ++i)\\n        {\\n            for(int j = 0 ; j < this->s.length(); ++j)\\n            {\\n                if(i==j)\\n                    answer[i][j] = 1;\\n                else\\n                    answer[i][j] = -1;\\n            }\\n        }\\n        \\n        return find(0, this->s.length()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835942,
                "title": "mastering-the-strange-printer-unraveling-dynamic-programming-mysteries",
                "content": "# Intuition\\nFirstly, a big thank you to vanAmsen for the insightful video explanation on this problem (you can check it out here: [vanAmsen - 664. Strange Printer](https://youtu.be/f4diE_0zYs4)). This problem is a classic example of dynamic programming (DP). The key insight is to realize that we can break down the problem into smaller subproblems (i.e., substrings of the input string). We then solve these subproblems and use their solutions to construct the solution for the original problem.\\n\\n# Approach\\nThe approach involves setting up a DP table where each cell `dp[i][j]` represents the minimum number of turns the printer needs to print the substring from `i` to `j`. We initialize the diagonal of the DP table with 1s because the printer only needs one turn to print a single character. Then, we fill in the DP table using a bottom-up approach. For every `i` (from `n-1` to 0) and `j` (from `i+1` to `n`), we initially set `dp[i][j]` to `dp[i][j-1] + 1`. This corresponds to printing the substring from `i` to `j-1` first and then printing the character at `j` separately. However, if there are overlapping characters, we can print the substring in fewer turns. We update `dp[i][j]` to be the minimum of its current value and `dp[i][k] + dp[k+1][j-1]` (or just `dp[i][k]` if `k+1 > j-1`). After filling the DP table, the minimum number of turns needed to print the entire string is found at `dp[0][n-1]`.\\n\\n# Complexity\\n- Time complexity: The time complexity is \\\\(O(n^3)\\\\), where \\\\(n\\\\) is the length of the string. This is because we have three nested loops iterating over the string.\\n- Space complexity: The space complexity is \\\\(O(n^2)\\\\), due to the space required for the DP table.\\n\\n# Code\\nHere are implementations of the solution in multiple languages:\\n\\n``` Rust []\\nimpl Solution {\\n    pub fn strange_printer(s: String) -> i32 {\\n        let s = s.into_bytes();\\n        let n = s.len();\\n        let mut dp = vec![vec![0; n]; n];\\n\\n        for i in (0..n).rev() {\\n            dp[i][i] = 1;\\n            for j in i+1..n {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for k in i..j {\\n                    if s[k] == s[j] {\\n                        dp[i][j] = dp[i][j].min(dp[i][k] + if k+1<=j-1 { dp[k+1][j-1] } else { 0 });\\n                    }\\n                }\\n            }\\n        }\\n\\n        dp[0][n-1] as i32\\n    }\\n}\\n```\\n``` Go []\\nfunc strangePrinter(s string) int {\\n\\tn := len(s)\\n\\tdp := make([][]int, n)\\n\\tfor i := range dp {\\n\\t\\tdp[i] = make([]int, n)\\n\\t}\\n\\n\\tfor i := n - 1; i >= 0; i-- {\\n\\t\\tdp[i][i] = 1\\n\\t\\tfor j := i + 1; j < n; j++ {\\n\\t\\t\\tdp[i][j] = dp[i][j-1] + 1\\n\\t\\t\\tfor k := i; k < j; k++ {\\n\\t\\t\\t\\tif s[k] == s[j] {\\n\\t\\t\\t\\t\\ttmp := dp[i][k] + dp[k+1][j-1]\\n\\t\\t\\t\\t\\tif k+1 > j-1 {\\n\\t\\t\\t\\t\\t\\ttmp = dp[i][k]\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif dp[i][j] > tmp {\\n\\t\\t\\t\\t\\t\\tdp[i][j] = tmp\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[0][n-1]\\n}\\n```\\n``` Ruby []\\n# @param {String} s\\n# @return {Integer}\\ndef strange_printer(s)\\n    n = s.size\\n    dp = Array.new(n) {Array.new(n, 0)}\\n\\n    (n-1).downto(0) do |i|\\n        dp[i][i] = 1\\n        (i+1...n).each do |j|\\n            dp[i][j] = dp[i][j-1] + 1\\n            (i...j).each do |k|\\n                if s[k] == s[j]\\n                    dp[i][j] = [dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0)].min\\n                end\\n            end\\n        end\\n    end\\n\\n    dp[0][n-1]\\nend\\n```\\n``` TypeScript []\\nfunction strangePrinter(s: string): number {\\n    const n = s.length;\\n    const dp: number[][] = Array.from({ length: n }, () => Array(n).fill(0));\\n\\n    for (let i = n - 1; i >= 0; i--) {\\n        dp[i][i] = 1;\\n        for (let j = i + 1; j < n; j++) {\\n            dp[i][j] = dp[i][j - 1] + 1;\\n            for (let k = i; k < j; k++) {\\n                if (s[k] === s[j]) {\\n                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                }\\n            }\\n        }\\n    }\\n\\n    return dp[0][n - 1];\\n};\\n```\\n``` swift []\\nclass Solution {\\n\\t\\tfunc strangePrinter(_ s: String) -> Int {\\n\\t\\t\\tlet s = Array(s)\\n\\t\\t\\tlet n = s.count\\n\\t\\t\\tvar dp = Array(repeating: Array(repeating: 0, count: n), count: n)\\n\\n\\t\\t\\tfor i in stride(from: n-1, through: 0, by: -1) {\\n\\t\\t\\t\\t\\tdp[i][i] = 1\\n\\t\\t\\t\\t\\tfor j in i+1..<n {\\n\\t\\t\\t\\t\\t\\t\\tdp[i][j] = dp[i][j-1] + 1\\n\\t\\t\\t\\t\\t\\t\\tfor k in i..<j {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif s[k] == s[j] {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdp[i][j] = min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn dp[0][n-1]\\n\\t}\\n}\\n```\\n",
                "solutionTags": [
                    "Ruby",
                    "Swift",
                    "Go",
                    "Rust",
                    "TypeScript"
                ],
                "code": "``` Rust []\\nimpl Solution {\\n    pub fn strange_printer(s: String) -> i32 {\\n        let s = s.into_bytes();\\n        let n = s.len();\\n        let mut dp = vec![vec![0; n]; n];\\n\\n        for i in (0..n).rev() {\\n            dp[i][i] = 1;\\n            for j in i+1..n {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for k in i..j {\\n                    if s[k] == s[j] {\\n                        dp[i][j] = dp[i][j].min(dp[i][k] + if k+1<=j-1 { dp[k+1][j-1] } else { 0 });\\n                    }\\n                }\\n            }\\n        }\\n\\n        dp[0][n-1] as i32\\n    }\\n}\\n```\n``` Go []\\nfunc strangePrinter(s string) int {\\n\\tn := len(s)\\n\\tdp := make([][]int, n)\\n\\tfor i := range dp {\\n\\t\\tdp[i] = make([]int, n)\\n\\t}\\n\\n\\tfor i := n - 1; i >= 0; i-- {\\n\\t\\tdp[i][i] = 1\\n\\t\\tfor j := i + 1; j < n; j++ {\\n\\t\\t\\tdp[i][j] = dp[i][j-1] + 1\\n\\t\\t\\tfor k := i; k < j; k++ {\\n\\t\\t\\t\\tif s[k] == s[j] {\\n\\t\\t\\t\\t\\ttmp := dp[i][k] + dp[k+1][j-1]\\n\\t\\t\\t\\t\\tif k+1 > j-1 {\\n\\t\\t\\t\\t\\t\\ttmp = dp[i][k]\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif dp[i][j] > tmp {\\n\\t\\t\\t\\t\\t\\tdp[i][j] = tmp\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn dp[0][n-1]\\n}\\n```\n``` Ruby []\\n# @param {String} s\\n# @return {Integer}\\ndef strange_printer(s)\\n    n = s.size\\n    dp = Array.new(n) {Array.new(n, 0)}\\n\\n    (n-1).downto(0) do |i|\\n        dp[i][i] = 1\\n        (i+1...n).each do |j|\\n            dp[i][j] = dp[i][j-1] + 1\\n            (i...j).each do |k|\\n                if s[k] == s[j]\\n                    dp[i][j] = [dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0)].min\\n                end\\n            end\\n        end\\n    end\\n\\n    dp[0][n-1]\\nend\\n```\n``` TypeScript []\\nfunction strangePrinter(s: string): number {\\n    const n = s.length;\\n    const dp: number[][] = Array.from({ length: n }, () => Array(n).fill(0));\\n\\n    for (let i = n - 1; i >= 0; i--) {\\n        dp[i][i] = 1;\\n        for (let j = i + 1; j < n; j++) {\\n            dp[i][j] = dp[i][j - 1] + 1;\\n            for (let k = i; k < j; k++) {\\n                if (s[k] === s[j]) {\\n                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                }\\n            }\\n        }\\n    }\\n\\n    return dp[0][n - 1];\\n};\\n```\n``` swift []\\nclass Solution {\\n\\t\\tfunc strangePrinter(_ s: String) -> Int {\\n\\t\\t\\tlet s = Array(s)\\n\\t\\t\\tlet n = s.count\\n\\t\\t\\tvar dp = Array(repeating: Array(repeating: 0, count: n), count: n)\\n\\n\\t\\t\\tfor i in stride(from: n-1, through: 0, by: -1) {\\n\\t\\t\\t\\t\\tdp[i][i] = 1\\n\\t\\t\\t\\t\\tfor j in i+1..<n {\\n\\t\\t\\t\\t\\t\\t\\tdp[i][j] = dp[i][j-1] + 1\\n\\t\\t\\t\\t\\t\\t\\tfor k in i..<j {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif s[k] == s[j] {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tdp[i][j] = min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn dp[0][n-1]\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1842310,
                "title": "c-memoization",
                "content": "This ques is same as [546. Remove Boxes](https://leetcode.com/problems/remove-boxes/) \\n ```\\n vector<vector<int>> dp;\\n    int func(string& s,int i,int j){\\n        if(i>j) return 0;\\n        if(dp[i][j]!=0) return dp[i][j];\\n        int x=i;\\n        \\n        while(x+1<=j && s[x]==s[x+1]) x++;\\n        int ans=1+func(s,x+1,j);\\n        for(int k=x+1;k<=j;k++){\\n            if(s[k]==s[i]){\\n                ans=min(ans,func(s,k,j)+func(s,x+1,k-1));\\n            }\\n        }\\n        \\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        dp=vector<vector<int>>(s.size(),vector<int>(s.size(),0));\\n        return func(s,0,s.size()-1);\\n    }",
                "solutionTags": [
                    "C",
                    "Memoization"
                ],
                "code": "This ques is same as [546. Remove Boxes](https://leetcode.com/problems/remove-boxes/) \\n ```\\n vector<vector<int>> dp;\\n    int func(string& s,int i,int j){\\n        if(i>j) return 0;\\n        if(dp[i][j]!=0) return dp[i][j];\\n        int x=i;\\n        \\n        while(x+1<=j && s[x]==s[x+1]) x++;\\n        int ans=1+func(s,x+1,j);\\n        for(int k=x+1;k<=j;k++){\\n            if(s[k]==s[i]){\\n                ans=min(ans,func(s,k,j)+func(s,x+1,k-1));\\n            }\\n        }\\n        \\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        dp=vector<vector<int>>(s.size(),vector<int>(s.size(),0));\\n        return func(s,0,s.size()-1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 106792,
                "title": "java-o-n-3-short-dp-solution",
                "content": "f[i][j] represents the number we need to print the substring [i,j]\\nBoundary condition:\\nf[i][i]=1\\nf[i][i-1]=0\\n\\nFor every i<j\\nf[i][j]=min{\\n                1+f[i+1][j], \\n                f[i+1][k-1]+f[k][j] (when i<k<=j, s.charAt(i)==s.charAt(k))\\n               }\\n\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n=s.length();\\n        int[][] f=new int[n][n];\\n        for (int i=n-1;i>=0;i--) \\n            for (int j=i;j<n;j++) \\n            {\\n                f[i][j]=(i==j)?1:1+f[i+1][j];\\n                for (int k=i+1;k<=j;k++) \\n                    if (s.charAt(k)==s.charAt(i)) f[i][j]=Math.min(f[i][j],f[i+1][k-1]+f[k][j]);\\n            }\\n        return (n==0?0:f[0][n-1]);\\n    }  \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n=s.length();\\n        int[][] f=new int[n][n];\\n        for (int i=n-1;i>=0;i--) \\n            for (int j=i;j<n;j++) \\n            {\\n                f[i][j]=(i==j)?1:1+f[i+1][j];\\n                for (int k=i+1;k<=j;k++) \\n                    if (s.charAt(k)==s.charAt(i)) f[i][j]=Math.min(f[i][j],f[i+1][k-1]+f[k][j]);\\n            }\\n        return (n==0?0:f[0][n-1]);\\n    }  \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838468,
                "title": "simple-solution-explained-in-detail",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nWhenever you encounter such problems, just try breaking the string **into the smallest possible..**\\n\\nLet me give you an example...\\n\\nIf i would have said you to find the **answer for string \"ab\"...**\\n\\nJust **don\\'t consider** \"ab\" as a whole, **consider \"a\"  as different** and the **other \"b\" as different** and then calculate the ans for both of them and then add them up....\\n\\nThis is how we are gonna approach our solution..\\n\\nLet us say..you have the string as \"abcdcba\"\\n\\nNow, we just need to break the string into two parts...\\n\\n**1) First part is left one**\\n\\n**2) Second part is right one..**\\n\\nNow, let me explain me how you will break this string \"abcdcba\"\\n\\n**Case 1 => \"a\"   + \"bcdcba\"  (It means \"a\" is on the left hand side and \"bcdcba\" is on the right side)**\\n\\n**Case 2 => \"ab\" + \"cdcba\"**\\n\\n**Case 3 => \"abc\" + \"dcba\"**\\n\\n**Case 4 => \"abcd\" + \"cba\"**\\n\\n**Case 5 => \"abcdc\" + \"ba\"**\\n\\n**Case 6 => \"abcdcb\" + \"a\"**\\n\\nNow, these are the 6 cases possible and we have to **return the min** of all these cases..\\n\\nCase 1 will further break down into multiple cases and this will go on...like in case 1 the right part of the string was \"bcdcba\" and this will break into multiple cases...\\n\\nBut, what should be done after breaking....\\n\\nLet us say, after **multiple times of breaking your case comes to be** \\n\\n**Case => \"a\" + \"b\"**\\n\\nNow, if the string if of size 1, then how many times you will run the printer...The ans is 1\\n\\nso in this case from the left side you get 1 and from right side you get 1, so ans becomes 2 and that is a valid answer ...\\n\\nNow the question comes ..how do we write the code to break the string up..\\n\\n```\\n        int ans = INT_MAX;\\n\\n        for(int k= i; k<=j-1; k++)\\n        {\\n        ans = min(ans,solve(i,k,s,dp) + solve(k+1,j,s,dp));\\n        }\\n```\\n\\nThis is how you make all the cases...\\n\\nNow..There will be a **special case**..you need to take care of\\n\\nLet us say the case is something like this..\\n\\n**Case => \"a\" + \"a\"**\\n\\nNow, according to what i told you above..you will return 1 from left hand side and 1 from right hand side and will give an ans of 2...but but but...the ans is 1...so how do we tackel such a case...\\n\\nSIMPLE...just make sure that **if s[i]==s[j]**, where i is the start pointer of the string and j is the end pointer... which means if both the chacters are same ..**you will return ans-1**...SIMPLE...\\n\\n\\nNow, what will be the **base case**...\\n\\nif the **size of string is 1**, that means the end pointer and start pointer of the string is at same position then **just return 1**..because we need to run printer 1 time...\\n\\n**Now, how do we memoize...**\\n\\nTwo paramaters are changing..\\n\\n**1) index i(which is the start pointer of the string)**\\n\\n**2) index j(which is the end pointer of the string)**\\n\\nNow, just make a 2-d dp array and store the results in **dp[i][j]**...This is how you solve the question simply..\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nYou are running a loop from 0 to n every time and every time you are breaking the strings in to two parts...(i,k) and (k+1,j)..and for both if them the for loop will run again in the next recursion step...so total **O(N * N * N)**\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nYou made a 2-d dp array so **O(N * N)**\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int solve(int i,int j,string &s,vector<vector<int>>&dp)\\n    {\\n\\n        if(i==j)\\n        {\\n            return 1;\\n        }\\n\\n        if(dp[i][j]!=-1)\\n        {\\n            return dp[i][j];\\n        }\\n        int ans = INT_MAX;\\n        for(int k= i; k<=j-1; k++)\\n        {\\n        ans = min(ans,solve(i,k,s,dp) + solve(k+1,j,s,dp));\\n        }\\n\\n        if(s[i]==s[j])\\n        {\\n            dp[i][j]=ans-1;\\n            return ans-1;\\n        }\\n        else\\n        {\\n            dp[i][j]=ans;\\n            return ans;\\n        }\\n\\n    }\\n\\n    int strangePrinter(string s) {\\n        \\n\\n        int n = s.size();\\n\\n        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));\\n\\n        int i = 0;\\n        int j = s.size()-1;\\n\\n        int ans  = solve(i,j,s,dp);\\n        \\n        return ans;\\n    }\\n};\\n\\n```\\n\\n**TIME FOR A MEME NOW**\\n\\n![WhatsApp Image 2023-07-30 at 18.26.53.jpeg](https://assets.leetcode.com/users/images/b9de1103-4718-46df-83f1-2e004bc76fb7_1690721858.9330523.jpeg)\\n\\n# **IF YOU LIKE MY SOLUTION, PLEASE UPVOTE..**\\n",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\n        int ans = INT_MAX;\\n\\n        for(int k= i; k<=j-1; k++)\\n        {\\n        ans = min(ans,solve(i,k,s,dp) + solve(k+1,j,s,dp));\\n        }\\n```\n```\\nclass Solution {\\npublic:\\n\\n    int solve(int i,int j,string &s,vector<vector<int>>&dp)\\n    {\\n\\n        if(i==j)\\n        {\\n            return 1;\\n        }\\n\\n        if(dp[i][j]!=-1)\\n        {\\n            return dp[i][j];\\n        }\\n        int ans = INT_MAX;\\n        for(int k= i; k<=j-1; k++)\\n        {\\n        ans = min(ans,solve(i,k,s,dp) + solve(k+1,j,s,dp));\\n        }\\n\\n        if(s[i]==s[j])\\n        {\\n            dp[i][j]=ans-1;\\n            return ans-1;\\n        }\\n        else\\n        {\\n            dp[i][j]=ans;\\n            return ans;\\n        }\\n\\n    }\\n\\n    int strangePrinter(string s) {\\n        \\n\\n        int n = s.size();\\n\\n        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));\\n\\n        int i = 0;\\n        int j = s.size()-1;\\n\\n        int ans  = solve(i,j,s,dp);\\n        \\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 112489,
                "title": "c-solution-and-proof-with-optimal-substructure",
                "content": "First of all, I post my proof here just to help others, and my writing may not be very accurate. Bear with me on that. Code is at the end. Also, I posted picture so that to keep my format. \\n![0_1515523069718_622d9f81-5bfb-4677-8d39-c7f1d49fc7f9-image.png](/assets/uploads/files/1515523068000-622d9f81-5bfb-4677-8d39-c7f1d49fc7f9-image.png) \\t\\n\\nCode with debugging and print solution, etc. \\n\\n```\\n#include <string>\\n#include <iostream>\\n#include <cstdio>\\n#include <vector>\\n#include <cassert>\\n#include <iomanip>\\n\\nusing namespace std; \\nclass Solution {\\n    vector<vector<int>> cost; \\n    vector<vector<int>> choice; //ending index as k\\n    string s; \\n    string printed;\\n    int n; \\n    int prefix; \\n    \\npublic:\\n    \\n    string reduceStr(string s) {\\n        if (s.empty())\\n            return s; \\n        string r; \\n        r.push_back(s[0]);\\n        for (int i =1; i< s.size(); i++){\\n            if(s[i]!=r.back())\\n                r.push_back(s[i]);\\n        }\\n        return r; \\n    }\\n    int strangePrinter(string str) {\\n        cout<<\"The given string:\" << str <<endl; \\n        s = reduceStr(str); \\n        \\n        if (s.empty())\\n            return 0; \\n        \\n        n = s.size();\\n        \\n        cost.resize(n, vector<int> (n, 0));\\n        choice.resize(n, vector<int> (n, -1));\\n        \\n        int cnt = turns(0, n-1); \\n        \\n        prefix=0; \\n        cout<<\"Starting to print solution for string with length: \" << n <<endl; \\n        cout<< setw(2) << prefix++ << \":\" <<s<<endl; \\n        \\n        printed.resize(n, '*');\\n        printSolution(0, n-1);\\n        cout<<\"Printed string is:\"<<endl;\\n        cout<< \"  :\" <<s<<endl; \\n        cout<< (printed == s? \"Equal\": \"Not equal\" ) << \" to original string\" <<endl; \\n        \\n        debugPrint(); \\n        \\n        return cnt;\\n    }\\n    int turns(int i, int j) {\\n        if (i>j)\\n            return 0; \\n        if(i==j) {\\n            cost[i][j]=1;\\n            choice[i][j]=i; \\n            return 1;\\n        }\\n        \\n        if(cost[i][j]!=0)\\n            return cost[i][j];\\n        \\n        cost[i][j]=1 + turns(i+1, j); \\n        choice[i][j]=i; \\n        for ( int k = i+2; k <=j ; ++k) {\\n            if (s[k] == s[i]) {\\n                int tmp = turns(i, k-1) + turns(k+1, j);\\n                if (tmp < cost[i][j]) {\\n                    cost[i][j]=tmp;\\n                    choice[i][j]=k;\\n                }\\n            }\\n        }\\n        \\n        return cost[i][j]; \\n    }\\n    \\n    void printOneChar(char a, int i, int j) {\\n      cout<< setw(2) << prefix++ << \":\"; \\n      for(int k =0; k<i;++k)\\n        cout<<\"_\"; //_____\\n      \\n      for(int k=i; k<=j; k++) {\\n        cout<<a;\\n        printed[k]=a;\\n      }\\n      \\n      for(int k =j+1; k<n;++k)\\n        cout<<\"_\";\\n      cout<<endl;\\n    }\\n    \\n    void printChar(int i, int j) {\\n      cout<< setw(2) <<prefix++ << \":\"; \\n      for(int k =0; k<i;++k)\\n        cout<<\"-\"; //--------------\\n      \\n      for(int k=i; k<=j; k++) {\\n        cout<<s[k];\\n        printed[k]=s[k];\\n      }\\n      \\n      for(int k =j+1; k<n;++k)\\n        cout<<\"-\";\\n      \\n      cout<<endl;      \\n    }\\n        \\n    void printSolution(int i, int j) {\\n      if (i>j)\\n        return;\\n        \\n      if (i==j) {\\n        printChar(i,j); \\n        return;\\n      }\\n      \\n      int k = choice[i][j]; \\n      \\n      if(printed[i] != s[i]) {\\n        printOneChar(s[i], i, k);        \\n      }\\n      printSolution(i, k-1);\\n      printSolution(k+1, j);      \\n    }\\n    \\n    void print2dArray( vector<vector<int>> & v) {\\n      int row = v.size(); \\n      int col = v[0].size(); \\n      for (int i=0; i< row; ++i ){        \\n        for (int j=0; j< col; ++j ) {\\n          cout<< \"(\" <<setw(2) << i << \",\" <<setw(2) << j << \":\" << setw(3) << v[i][j] << \") \"; \\n        }\\n        cout<<endl;\\n      }\\n    }\\n    \\n    void debugPrint(){\\n      cout<< endl; \\n      cout << \"The contents of turns: \" << endl;\\n      print2dArray(cost);\\n      cout << \"The choice is: \" << endl;\\n      print2dArray(choice);  \\n    }\\n};\\n\\nstring stringToString(string input) {\\n    //assert(input.length() >= 2);\\n    string result;\\n    for (int i = 1; i < input.length() -1; i++) {\\n        char currentChar = input[i];\\n        if (input[i] == '\\\\\\\\') {\\n            char nextChar = input[i+1];\\n            switch (nextChar) {\\n                case '\\\\\"': result.push_back('\\\\\"'); break;\\n                case '/' : result.push_back('/'); break;\\n                case '\\\\\\\\': result.push_back('\\\\\\\\'); break;\\n                case 'b' : result.push_back('\\\\b'); break;\\n                case 'f' : result.push_back('\\\\f'); break;\\n                case 'r' : result.push_back('\\\\r'); break;\\n                case 'n' : result.push_back('\\\\n'); break;\\n                case 't' : result.push_back('\\\\t'); break;\\n                default: break;\\n            }\\n            i++;\\n        } else {\\n          result.push_back(currentChar);\\n        }\\n    }\\n    return result;\\n}\\n\\nint main() {\\n    int nTests ;\\n    cin >> nTests;\\n    \\n    string line;\\n    for (int i=0; i<nTests; ++i) {\\n        //getline(cin, line);\\n        cin >> line; \\n        //string s = stringToString(line);\\n        string s= line; \\n        \\n        int ret = Solution().strangePrinter(s);\\n\\n        //string out = to_string(ret);\\n        cout << \"Final count: \" << ret << endl;\\n    }\\n    return 0;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n#include <string>\\n#include <iostream>\\n#include <cstdio>\\n#include <vector>\\n#include <cassert>\\n#include <iomanip>\\n\\nusing namespace std; \\nclass Solution {\\n    vector<vector<int>> cost; \\n    vector<vector<int>> choice; //ending index as k\\n    string s; \\n    string printed;\\n    int n; \\n    int prefix; \\n    \\npublic:\\n    \\n    string reduceStr(string s) {\\n        if (s.empty())\\n            return s; \\n        string r; \\n        r.push_back(s[0]);\\n        for (int i =1; i< s.size(); i++){\\n            if(s[i]!=r.back())\\n                r.push_back(s[i]);\\n        }\\n        return r; \\n    }\\n    int strangePrinter(string str) {\\n        cout<<\"The given string:\" << str <<endl; \\n        s = reduceStr(str); \\n        \\n        if (s.empty())\\n            return 0; \\n        \\n        n = s.size();\\n        \\n        cost.resize(n, vector<int> (n, 0));\\n        choice.resize(n, vector<int> (n, -1));\\n        \\n        int cnt = turns(0, n-1); \\n        \\n        prefix=0; \\n        cout<<\"Starting to print solution for string with length: \" << n <<endl; \\n        cout<< setw(2) << prefix++ << \":\" <<s<<endl; \\n        \\n        printed.resize(n, '*');\\n        printSolution(0, n-1);\\n        cout<<\"Printed string is:\"<<endl;\\n        cout<< \"  :\" <<s<<endl; \\n        cout<< (printed == s? \"Equal\": \"Not equal\" ) << \" to original string\" <<endl; \\n        \\n        debugPrint(); \\n        \\n        return cnt;\\n    }\\n    int turns(int i, int j) {\\n        if (i>j)\\n            return 0; \\n        if(i==j) {\\n            cost[i][j]=1;\\n            choice[i][j]=i; \\n            return 1;\\n        }\\n        \\n        if(cost[i][j]!=0)\\n            return cost[i][j];\\n        \\n        cost[i][j]=1 + turns(i+1, j); \\n        choice[i][j]=i; \\n        for ( int k = i+2; k <=j ; ++k) {\\n            if (s[k] == s[i]) {\\n                int tmp = turns(i, k-1) + turns(k+1, j);\\n                if (tmp < cost[i][j]) {\\n                    cost[i][j]=tmp;\\n                    choice[i][j]=k;\\n                }\\n            }\\n        }\\n        \\n        return cost[i][j]; \\n    }\\n    \\n    void printOneChar(char a, int i, int j) {\\n      cout<< setw(2) << prefix++ << \":\"; \\n      for(int k =0; k<i;++k)\\n        cout<<\"_\"; //_____\\n      \\n      for(int k=i; k<=j; k++) {\\n        cout<<a;\\n        printed[k]=a;\\n      }\\n      \\n      for(int k =j+1; k<n;++k)\\n        cout<<\"_\";\\n      cout<<endl;\\n    }\\n    \\n    void printChar(int i, int j) {\\n      cout<< setw(2) <<prefix++ << \":\"; \\n      for(int k =0; k<i;++k)\\n        cout<<\"-\"; //--------------\\n      \\n      for(int k=i; k<=j; k++) {\\n        cout<<s[k];\\n        printed[k]=s[k];\\n      }\\n      \\n      for(int k =j+1; k<n;++k)\\n        cout<<\"-\";\\n      \\n      cout<<endl;      \\n    }\\n        \\n    void printSolution(int i, int j) {\\n      if (i>j)\\n        return;\\n        \\n      if (i==j) {\\n        printChar(i,j); \\n        return;\\n      }\\n      \\n      int k = choice[i][j]; \\n      \\n      if(printed[i] != s[i]) {\\n        printOneChar(s[i], i, k);        \\n      }\\n      printSolution(i, k-1);\\n      printSolution(k+1, j);      \\n    }\\n    \\n    void print2dArray( vector<vector<int>> & v) {\\n      int row = v.size(); \\n      int col = v[0].size(); \\n      for (int i=0; i< row; ++i ){        \\n        for (int j=0; j< col; ++j ) {\\n          cout<< \"(\" <<setw(2) << i << \",\" <<setw(2) << j << \":\" << setw(3) << v[i][j] << \") \"; \\n        }\\n        cout<<endl;\\n      }\\n    }\\n    \\n    void debugPrint(){\\n      cout<< endl; \\n      cout << \"The contents of turns: \" << endl;\\n      print2dArray(cost);\\n      cout << \"The choice is: \" << endl;\\n      print2dArray(choice);  \\n    }\\n};\\n\\nstring stringToString(string input) {\\n    //assert(input.length() >= 2);\\n    string result;\\n    for (int i = 1; i < input.length() -1; i++) {\\n        char currentChar = input[i];\\n        if (input[i] == '\\\\\\\\') {\\n            char nextChar = input[i+1];\\n            switch (nextChar) {\\n                case '\\\\\"': result.push_back('\\\\\"'); break;\\n                case '/' : result.push_back('/'); break;\\n                case '\\\\\\\\': result.push_back('\\\\\\\\'); break;\\n                case 'b' : result.push_back('\\\\b'); break;\\n                case 'f' : result.push_back('\\\\f'); break;\\n                case 'r' : result.push_back('\\\\r'); break;\\n                case 'n' : result.push_back('\\\\n'); break;\\n                case 't' : result.push_back('\\\\t'); break;\\n                default: break;\\n            }\\n            i++;\\n        } else {\\n          result.push_back(currentChar);\\n        }\\n    }\\n    return result;\\n}\\n\\nint main() {\\n    int nTests ;\\n    cin >> nTests;\\n    \\n    string line;\\n    for (int i=0; i<nTests; ++i) {\\n        //getline(cin, line);\\n        cin >> line; \\n        //string s = stringToString(line);\\n        string s= line; \\n        \\n        int ret = Solution().strangePrinter(s);\\n\\n        //string out = to_string(ret);\\n        cout << \"Final count: \" << ret << endl;\\n    }\\n    return 0;\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 106812,
                "title": "java-dp-memorization",
                "content": "```\\n   public int strangePrinter(String s) {\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n\\n        int size = s.length();\\n        int[][] dp = new int[size][size];\\n\\n        for (int i = 0; i < size; i++) {\\n            dp[i][i] = 1;\\n        }\\n\\n        return helper(dp, 0, size - 1, s);\\n\\n    }\\n\\n    private int helper(int[][] dp, int x, int y, String s) {\\n        int size = s.length();\\n\\n        if (x < 0 || x >= size || y < 0 || y >= size) {\\n            return 0;\\n        } else if (x > y) {\\n            return 0;\\n        } else if (dp[x][y] != 0) {\\n            return dp[x][y];\\n        } else {\\n\\n            if (s.charAt(y) != s.charAt(y - 1)) {\\n                dp[x][y] = helper(dp, x, y - 1, s) + 1;\\n            } else {\\n                dp[x][y] = helper(dp, x, y-1, s);\\n            }\\n\\n            for (int i = 0; i < y; i++) {\\n                if (s.charAt(i) == s.charAt(y)) {\\n                    dp[x][y] = Math.min(dp[x][y], helper(dp, x, i, s) + helper(dp, i + 1, y - 1, s));\\n                }\\n            }\\n\\n            return dp[x][y];\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n   public int strangePrinter(String s) {\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n\\n        int size = s.length();\\n        int[][] dp = new int[size][size];\\n\\n        for (int i = 0; i < size; i++) {\\n            dp[i][i] = 1;\\n        }\\n\\n        return helper(dp, 0, size - 1, s);\\n\\n    }\\n\\n    private int helper(int[][] dp, int x, int y, String s) {\\n        int size = s.length();\\n\\n        if (x < 0 || x >= size || y < 0 || y >= size) {\\n            return 0;\\n        } else if (x > y) {\\n            return 0;\\n        } else if (dp[x][y] != 0) {\\n            return dp[x][y];\\n        } else {\\n\\n            if (s.charAt(y) != s.charAt(y - 1)) {\\n                dp[x][y] = helper(dp, x, y - 1, s) + 1;\\n            } else {\\n                dp[x][y] = helper(dp, x, y-1, s);\\n            }\\n\\n            for (int i = 0; i < y; i++) {\\n                if (s.charAt(i) == s.charAt(y)) {\\n                    dp[x][y] = Math.min(dp[x][y], helper(dp, x, i, s) + helper(dp, i + 1, y - 1, s));\\n                }\\n            }\\n\\n            return dp[x][y];\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3838084,
                "title": "c-solution-top-down-dynamic-programming-supereasy-explanation",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The `solveDp` function is a recursive function that uses dynamic programming (DP) to find the minimum number of cuts required to print a substring of the given string s. The function takes four parameters: `i` (start index of the substring), `j` (end index of the substring), `s` (the input string), and `dp` (the DP array used for memoization).\\n\\n2. The base case of the solveDp function checks if `i` is equal to `j`, which means we have a substring of length 1. In this case, we don\\'t need any cuts, so we return 1.\\n\\n3. The function then checks if the result for the current substring (from index i to j) is already present in the DP array. If yes, it returns the precalculated result to avoid redundant calculations.\\n\\n4. If the result is not present in the DP array, the function proceeds to calculate the minimum number of cuts required to print the substring. It does this by considering all possible partition points (k) between i and j, and recursively finding the minimum number of cuts for both the `left` and `right` substrings.\\n\\n5. The variable `miniCuts` is initialized to a large value (1e9) before the loop. The loop iterates over all possible partition points k, and at each step, it calculates the minimum number of cuts needed to print the substring. The result is stored in miniCuts.\\n\\n6. After the loop, the function checks if the characters at positions i and j are the same. If they are the same, it means the current substring (from index i to j) has consecutive identical characters. In this case, the miniCuts value should be reduced by 1, as we can print the substring in one less cut since consecutive identical characters can be printed in one operation.\\n\\n7. Finally, the result for the current substring is stored in the DP array (`dp[i][j]`), and the function returns the minimum number of cuts required for the current substring.\\n\\n8. The `strangePrinter` function is a wrapper function that is called from outside the class. It takes a single parameter `s`, which is the input string to be printed. The function calculates the length of the input string (n), initializes the DP array (dp) with -1, and then calls the solveDp function to find the minimum number of cuts required to print the entire string.\\n\\n9. The result obtained from the `solveDp` function is returned, representing the minimum number of cuts needed to print the input string using the strange printer.\\n\\n# Complexity\\n- Time complexity:$$O(n^3)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n^2)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int solveDp(int i,int j,string &s,vector<vector<int>>&dp){\\n\\n        //base case\\n        if(i==j) return 1;\\n\\n        if(dp[i][j]!=-1) return dp[i][j];\\n\\n        int miniCuts=1e9;\\n\\n        for(int k=i;k<j;k++){\\n            miniCuts=min(miniCuts,(solveDp(i,k,s,dp)+solveDp(k+1,j,s,dp)));\\n        }\\n\\n        return dp[i][j]= s[i]==s[j]?miniCuts-1:miniCuts;\\n    }\\n    int strangePrinter(string s) {\\n        \\n        int n=s.length();\\n\\n        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));\\n\\n        return solveDp(0,n-1,s,dp);\\n         \\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int solveDp(int i,int j,string &s,vector<vector<int>>&dp){\\n\\n        //base case\\n        if(i==j) return 1;\\n\\n        if(dp[i][j]!=-1) return dp[i][j];\\n\\n        int miniCuts=1e9;\\n\\n        for(int k=i;k<j;k++){\\n            miniCuts=min(miniCuts,(solveDp(i,k,s,dp)+solveDp(k+1,j,s,dp)));\\n        }\\n\\n        return dp[i][j]= s[i]==s[j]?miniCuts-1:miniCuts;\\n    }\\n    int strangePrinter(string s) {\\n        \\n        int n=s.length();\\n\\n        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));\\n\\n        return solveDp(0,n-1,s,dp);\\n         \\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3314813,
                "title": "664-space-93-43-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Get the length of the input string and store it in variable n.\\n2. Create a n x n matrix called dp to store the minimum number of turns needed to print s[i:j+1].\\n3. Loop backwards over the matrix to fill in the upper diagonal (i.e., the values above the diagonal).\\n4. For each index i on the diagonal, set dp[i][i] to 1, since it takes one turn to print a single character.\\n5. Loop forwards over the matrix to fill in the lower diagonal (i.e., the values below the diagonal).\\n6. For each pair of indices (i,j) in the lower diagonal, check if s[i] and s[j] are the same character. If so, we can print them together in one turn and set dp[i][j] to dp[i][j-1], which represents the minimum number of turns needed to print s[i:j] plus the additional character s[j].\\n7. If s[i] and s[j] are different characters, we need to try all possible k values between i and j, and find the minimum number of turns needed to print s[i:j+1] by combining s[i:k+1] and s[k+1:j+1]. To do this, set dp[i][j] to infinity and loop over all k values between i and j. For each k value, update dp[i][j] to the minimum of its current value and dp[i][k] + dp[k+1][j], which represents the minimum number of turns needed to print s[i:k+1] plus the minimum number of turns needed to print s[k+1:j+1].\\n8. Once all values in the matrix have been computed, the minimum number of turns needed to print the entire string s is stored in dp[0][n-1]. Return this value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        # Get the length of the input string\\n        n = len(s)\\n        \\n        # Create a n x n matrix to store the minimum number of turns needed to print s[i:j+1]\\n        dp = [[0] * n for _ in range(n)]\\n        \\n        # Loop backwards over the matrix to fill in the upper diagonal\\n        for i in range(n-1, -1, -1):\\n            # Initialize the diagonal values to 1, since it takes one turn to print a single character\\n            dp[i][i] = 1\\n            \\n            # Loop forwards over the matrix to fill in the lower diagonal\\n            for j in range(i+1, n):\\n                # If s[i] and s[j] are the same character, we can print them together in one turn\\n                if s[i] == s[j]:\\n                    dp[i][j] = dp[i][j-1]\\n                else:\\n                    # If s[i] and s[j] are different characters, we try to use the previously computed dp values\\n                    # and update the current dp value by taking the minimum value of the two possible options\\n                    dp[i][j] = float(\\'inf\\')\\n                    for k in range(i, j):\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\\n        \\n        # The minimum number of turns needed to print the entire string s is stored in dp[0][n-1]\\n        return dp[0][n-1]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        # Get the length of the input string\\n        n = len(s)\\n        \\n        # Create a n x n matrix to store the minimum number of turns needed to print s[i:j+1]\\n        dp = [[0] * n for _ in range(n)]\\n        \\n        # Loop backwards over the matrix to fill in the upper diagonal\\n        for i in range(n-1, -1, -1):\\n            # Initialize the diagonal values to 1, since it takes one turn to print a single character\\n            dp[i][i] = 1\\n            \\n            # Loop forwards over the matrix to fill in the lower diagonal\\n            for j in range(i+1, n):\\n                # If s[i] and s[j] are the same character, we can print them together in one turn\\n                if s[i] == s[j]:\\n                    dp[i][j] = dp[i][j-1]\\n                else:\\n                    # If s[i] and s[j] are different characters, we try to use the previously computed dp values\\n                    # and update the current dp value by taking the minimum value of the two possible options\\n                    dp[i][j] = float(\\'inf\\')\\n                    for k in range(i, j):\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\\n        \\n        # The minimum number of turns needed to print the entire string s is stored in dp[0][n-1]\\n        return dp[0][n-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1931767,
                "title": "java-solution-divide-and-conquer-memoization-simple-intuitive",
                "content": "Algorithm\\n1) Identify the base cases : \\n* if string length is 1 the answer is 1.\\n* if string length is 2 the turns required to print it  is two if they are unique else it is 1.\\n* if any substring has a structure \"axysahfhdhhdsa\" (basicaly end character matching), then the repeating character can be accounted for only one because we can always go for aaaaaaaa upto string size and then cover the rest of the characters, for this case remove one of the repeated character, to adjust the count accounted. eg : aba -> ba (which will give count to 2 instead of 3)\\n2) for each possible partition point calculate all the answers for the string and return the minimum of all the possible combinations.\\n\\n```\\nclass Solution {\\n    HashMap<String,Integer> cache;\\n    public int strangePrinter(String s) {\\n        s = removeConsecutiveDuplicates(s);\\n        cache = new HashMap<>();\\n        return divideAndConquer(s);     \\n    }\\n    \\n    public String removeConsecutiveDuplicates(String s) {\\n        int i =0;\\n        StringBuilder stringBuilder = new StringBuilder();\\n        while(i<s.length()) {\\n            char current=s.charAt(i);\\n            stringBuilder.append(current);\\n            i++;\\n        while(i<s.length() && current==s.charAt(i))\\n              i++;\\n            }\\n        return stringBuilder.toString();    \\n    }\\n    \\n    public int divideAndConquer(String s) {\\n        \\n        if(s.length()==0) {\\n            return 0;\\n        }\\n        \\n        if(s.length()==1) {\\n            return 1;\\n        }\\n        \\n        if(s.length()==2) {\\n            if(s.charAt(0)==s.charAt(1)) {\\n                return 1;\\n            } else {\\n                return 2;\\n            }\\n        }\\n        \\n        if(s.charAt(0)==s.charAt(s.length()-1)) {\\n            s = s.substring(1);\\n        }\\n        \\n        if(cache.containsKey(s)) {\\n            return cache.get(s);\\n        }\\n        \\n        int result = Integer.MAX_VALUE;\\n        for(int j=1;j<s.length();j++) {\\n            int current = divideAndConquer(s.substring(0,j)) +\\n                divideAndConquer(s.substring(j));\\n            result = Math.min(result,current);\\n        } \\n        cache.put(s,result);\\n        return result;  \\n    }\\n    \\n    \\n}\\n```",
                "solutionTags": [
                    "Divide and Conquer",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    HashMap<String,Integer> cache;\\n    public int strangePrinter(String s) {\\n        s = removeConsecutiveDuplicates(s);\\n        cache = new HashMap<>();\\n        return divideAndConquer(s);     \\n    }\\n    \\n    public String removeConsecutiveDuplicates(String s) {\\n        int i =0;\\n        StringBuilder stringBuilder = new StringBuilder();\\n        while(i<s.length()) {\\n            char current=s.charAt(i);\\n            stringBuilder.append(current);\\n            i++;\\n        while(i<s.length() && current==s.charAt(i))\\n              i++;\\n            }\\n        return stringBuilder.toString();    \\n    }\\n    \\n    public int divideAndConquer(String s) {\\n        \\n        if(s.length()==0) {\\n            return 0;\\n        }\\n        \\n        if(s.length()==1) {\\n            return 1;\\n        }\\n        \\n        if(s.length()==2) {\\n            if(s.charAt(0)==s.charAt(1)) {\\n                return 1;\\n            } else {\\n                return 2;\\n            }\\n        }\\n        \\n        if(s.charAt(0)==s.charAt(s.length()-1)) {\\n            s = s.substring(1);\\n        }\\n        \\n        if(cache.containsKey(s)) {\\n            return cache.get(s);\\n        }\\n        \\n        int result = Integer.MAX_VALUE;\\n        for(int j=1;j<s.length();j++) {\\n            int current = divideAndConquer(s.substring(0,j)) +\\n                divideAndConquer(s.substring(j));\\n            result = Math.min(result,current);\\n        } \\n        cache.put(s,result);\\n        return result;  \\n    }\\n    \\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1590965,
                "title": "c-solution-using-dp",
                "content": "We approach this solution using DP, where dp[i][j] is the minimum number of operations of printer to print the letters between index i and j. We know we need to return dp[0][n-1] where n = length of string.\\nNow, how can we calculate dp[i][j]? Imagine there are NO repeating digits, in that case, all the letters are printed sepratedly in seprate operations: which will make our final answer = n. Consider the same case for i and j, hence, 1 (to print character at index i) + dp[i+1][j] = dp[i][j].\\nNow consider we have some repeatition of character at some kth index where i<k<=j. Hence we check if s[i]==s[k], then the dp[i][j] is minimum of existing dp[i][j] or dp[i][k-1] + dp[k+1][j].\\nLet me explain each part of it, dp[i][k-1] denotes number of way to print letters from index i to k (included). Now why dp[i][k] == dp[i][k-1]? Note that s[i]==s[k], hence there was a repetition and hence we already printed letters from index i to k index, so no need of another operation. \\nAnd for index k+1 to j, its clear dp[k+1][j]. Also we put a condition to check if j>k, only then all dp[k+1][j] or else add 0 -> if this is not present, we will get INT_MAX as k+1 would have exceeded j.\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l<n+1; l++)\\n        {\\n            for(int i=0; i<n-l+1; i++)\\n            {\\n                int j = i+l-1;\\n                //assuming all letters seprate\\n                dp[i][j] = dp[i+1][j]+1;\\n                \\n                for(int k=i+1; k<j+1; k++)\\n                {\\n                    if(s[i]==s[k])\\n                        dp[i][j] = min(dp[i][j], dp[i][k-1] + ((j>k)?dp[k+1][j]:0));\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n```\\nTime complexity: O(n^3)\\nSpace complexity: O(n^2)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l<n+1; l++)\\n        {\\n            for(int i=0; i<n-l+1; i++)\\n            {\\n                int j = i+l-1;\\n                //assuming all letters seprate\\n                dp[i][j] = dp[i+1][j]+1;\\n                \\n                for(int k=i+1; k<j+1; k++)\\n                {\\n                    if(s[i]==s[k])\\n                        dp[i][j] = min(dp[i][j], dp[i][k-1] + ((j>k)?dp[k+1][j]:0));\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838285,
                "title": "easy-approach-dp-matrix-chain-multiplication-method",
                "content": "# Memoziation Code\\n```\\nclass Solution\\n{\\npublic:\\n    int solveMem(string &s, int left, int right, vector<vector<int>> &dp)\\n    {\\n        if (left == right)\\n            return 1;\\n        if (dp[left][right] != -1)\\n            return dp[left][right];\\n        int ans = INT_MAX, tmp;\\n        for (int k = left; k < right; k++)\\n        {\\n            tmp = solveMem(s, left, k, dp) + solveMem(s, k + 1, right, dp);\\n            ans = min(ans, tmp);\\n        }\\n        if (s[left] == s[right])\\n            ans--;\\n        dp[left][right] = ans;\\n        return ans;\\n    }\\n    int strangePrinter(string s)\\n    {\\n        int len = s.size();\\n        vector<vector<int>> dp(len, vector<int>(len, -1));\\n        return solveMem(s, 0, len - 1, dp);\\n    }\\n};\\n```\\n# Tabulation Code\\n```\\nclass Solution\\n{\\npublic:\\n    int strangePrinter(string s)\\n    {\\n        int len = s.size();\\n        vector<vector<int>> dp(len + 1, vector<int>(len + 1, 0));\\n        int ans, tmp, right;\\n        for (int left = len - 1; left >= 0; left--)\\n        {\\n            dp[left][left] = 1;\\n            for (int right = left + 1; right < len; right++)\\n            {\\n                ans = INT_MAX;\\n                for (int k = left; k < right; k++)\\n                {\\n                    tmp = dp[left][k] + dp[k + 1][right];\\n                    ans = min(ans, tmp);\\n                }\\n                if (s[left] == s[right])\\n                    ans--;\\n                dp[left][right] = ans;\\n            }\\n        }\\n        return dp[0][len - 1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int solveMem(string &s, int left, int right, vector<vector<int>> &dp)\\n    {\\n        if (left == right)\\n            return 1;\\n        if (dp[left][right] != -1)\\n            return dp[left][right];\\n        int ans = INT_MAX, tmp;\\n        for (int k = left; k < right; k++)\\n        {\\n            tmp = solveMem(s, left, k, dp) + solveMem(s, k + 1, right, dp);\\n            ans = min(ans, tmp);\\n        }\\n        if (s[left] == s[right])\\n            ans--;\\n        dp[left][right] = ans;\\n        return ans;\\n    }\\n    int strangePrinter(string s)\\n    {\\n        int len = s.size();\\n        vector<vector<int>> dp(len, vector<int>(len, -1));\\n        return solveMem(s, 0, len - 1, dp);\\n    }\\n};\\n```\n```\\nclass Solution\\n{\\npublic:\\n    int strangePrinter(string s)\\n    {\\n        int len = s.size();\\n        vector<vector<int>> dp(len + 1, vector<int>(len + 1, 0));\\n        int ans, tmp, right;\\n        for (int left = len - 1; left >= 0; left--)\\n        {\\n            dp[left][left] = 1;\\n            for (int right = left + 1; right < len; right++)\\n            {\\n                ans = INT_MAX;\\n                for (int k = left; k < right; k++)\\n                {\\n                    tmp = dp[left][k] + dp[k + 1][right];\\n                    ans = min(ans, tmp);\\n                }\\n                if (s[left] == s[right])\\n                    ans--;\\n                dp[left][right] = ans;\\n            }\\n        }\\n        return dp[0][len - 1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1449119,
                "title": "c-solution-with-comments",
                "content": "**Please upvote if you like**\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        //remove consecutive duplicates e.g. convert aaabbbaa to aba \\n        s.erase(unique(s.begin(),s.end()),s.end());\\n        int n=s.length();\\n        //here we will use dynamic programming since smaller components contribute to bigger\\n        // dp[i][j] means minimum number of turns printer need to print from i to j\\n        //our target is to find dp[0][n-1]\\n        vector<vector<int>> dp(n,vector<int>(n,0));\\n        // since dp[i][i] represents single character so only one turn required\\n        for(int i=0;i<n;i++)\\n        {\\n            dp[i][i]=1;\\n        }\\n        // since smaller contribute to bigger we will use top-down dp\\n        // k is the length of substring at a time\\n        for(int k=1;k<n;k++)\\n        {\\n            for(int i=0;i<n-k;i++)\\n            {\\n                int j=i+k;\\n                if(s[i]==s[j])\\n                {\\n                    dp[i][j]=dp[i][j-1];\\n                }\\n                else{\\n                    dp[i][j]=INT_MAX;\\n                    for(int l=i;l<j;l++)\\n                    {   //cout<<i<<l<<j\\n                        dp[i][j] = min(dp[i][j], dp[i][l] + dp[l + 1][j]);\\n                    }\\n                }\\n            }\\n        }\\n       \\n        return dp[0][n-1];\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        //remove consecutive duplicates e.g. convert aaabbbaa to aba \\n        s.erase(unique(s.begin(),s.end()),s.end());\\n        int n=s.length();\\n        //here we will use dynamic programming since smaller components contribute to bigger\\n        // dp[i][j] means minimum number of turns printer need to print from i to j\\n        //our target is to find dp[0][n-1]\\n        vector<vector<int>> dp(n,vector<int>(n,0));\\n        // since dp[i][i] represents single character so only one turn required\\n        for(int i=0;i<n;i++)\\n        {\\n            dp[i][i]=1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3838597,
                "title": "c-dynamic-programming-easy-to-understand-intuition-full-explanation",
                "content": "# Intuition\\nBreaking the problem into sub-problems because the basic idea of recursion is if we are able to solve one sub-problem and build a recurrence relation the program does the rest for us. Also we can observe we would get multiple answers by breaking the problem by partitioning the array into multiple partitions but we are sure the partition can be done only from index 0 to n-1. So we can think of Partiton DP.\\n\\n# Approach\\nI can break down the problem into 2 sub-problems namely left and right by partitioning starting from some index i to some index j such that 0<=i<=j<n. Now I can add the two cases to get my final answer. In more formal terms i would say \\nLet f(i,j) represents my answer from index i to index j and if I am partitioning my array at k such that i<=k<=j, then\\n\\nf(i,j)=f(i,k)+f(k+1,j)\\n\\nBut there is one edge case what if s[i]==s[j]?\\n\\nLet us assume the string as \\n\"aba\" [Sample Test 2]\\n\\nIf I am partitioning at index 1 so the left part is \"ab\" and the right part is \"a\" so we would get the answer as \\n2-> \"ab\"\\n1-> \"a\"\\n\\nso final answer is 2+1=3\\n\\nbut we see the answer should be 2 instead of 3. This is happening because if both the characters were equal then we are overcounting 1 extra case where we are printing \"a\" two times whereas in the first operation only we could have used our \"Strange Printer\" to print the 2 \"a\"s in one go. So our final answer more formaly is\\n\\nans=f(i,k)+f(k+1,j)-1\\n\\n# Complexity\\n- Time complexity:\\n$$O(N^3)$$\\n\\n- Space complexity:\\n  $$O(N^2)$$\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nint f(int i,int j,const string& s, vector<vector<int>>& dp)\\n{\\n    //Base Case\\n    if(i==j) return 1; // if only one character is present just return 1  \\n    if(dp[i][j]!=-1) return dp[i][j];\\n    int mn=INT_MAX;\\n    for(int k=i;k<j;k++) //partition from i->j\\n    {\\n        mn=min(mn,f(i,k,s,dp)+f(k+1,j,s,dp)); // store the minimum\\n    }\\n    return dp[i][j]=(s[i]==s[j])?mn-1:mn;\\n}\\n    int strangePrinter(string s) {\\n        int n=s.size();\\n        vector<vector<int>>dp(n,vector<int>(n,-1));\\n        return f(0,n-1,s,dp);        \\n                \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Divide and Conquer",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint f(int i,int j,const string& s, vector<vector<int>>& dp)\\n{\\n    //Base Case\\n    if(i==j) return 1; // if only one character is present just return 1  \\n    if(dp[i][j]!=-1) return dp[i][j];\\n    int mn=INT_MAX;\\n    for(int k=i;k<j;k++) //partition from i->j\\n    {\\n        mn=min(mn,f(i,k,s,dp)+f(k+1,j,s,dp)); // store the minimum\\n    }\\n    return dp[i][j]=(s[i]==s[j])?mn-1:mn;\\n}\\n    int strangePrinter(string s) {\\n        int n=s.size();\\n        vector<vector<int>>dp(n,vector<int>(n,-1));\\n        return f(0,n-1,s,dp);        \\n                \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1205305,
                "title": "python3-180ms-beating-100",
                "content": "For a substring from index i to index j, we can break it into subproblems of smaller sizes. We will choose break points greedily using the same character as s[i]. So for substring \\'abcabcabc\\', s[i]=\\'a\\'. We will choose to break it into either (\\'abc\\' + \\'abcabc\\') or (\\'abcabc\\' + \\'abc\\').\\n\\nThere are many optimizations that we can do:\\n1. First we can get rid of all the repeated characters. This is easy to see, since all the repeated characters only need 1 turn to print. There is no difference between printing `a` and `aa`.\\n2. Second we can keep a list of increasing indexes for any character. So when we try to find break point, we just use binary search to quickly locate next break point. \\n\\nIn the program, `k` is the index in `table[c]` found by binary search, and `m` is the break point index of the original string. For example, suppose table[c] is [0,2,4,9], and current `i` is 4. The bisect search will return `k` = 3, and m will be `table[c][k]` = 9, meaning that the next break point will be index 9 in the string.\\n\\n```python\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        s = [c for i,c in enumerate(s)\\n             if i == 0 or (i > 0 and c != s[i-1])]\\n        n = len(s)\\n        table = defaultdict(list)\\n        for i,c in enumerate(s):\\n            table[c] += i,   \\n\\n        @lru_cache(None)\\n        def dp(i, j):\\n            if i > j:\\n                return 0\\n            if i == j:\\n                return 1\\n            ans = 1 + dp(i+1, j)\\n            c = s[i]\\n            k = bisect.bisect_right(table[c], i)\\n            while k < len(table[c]) and table[c][k] <= j:\\n                m = table[c][k]\\n                ans = min(ans, dp(i+1, m-1) + dp(m, j))\\n                k += 1\\n            return ans\\n\\n        return dp(0, n-1)\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        s = [c for i,c in enumerate(s)\\n             if i == 0 or (i > 0 and c != s[i-1])]\\n        n = len(s)\\n        table = defaultdict(list)\\n        for i,c in enumerate(s):\\n            table[c] += i,   \\n\\n        @lru_cache(None)\\n        def dp(i, j):\\n            if i > j:\\n                return 0\\n            if i == j:\\n                return 1\\n            ans = 1 + dp(i+1, j)\\n            c = s[i]\\n            k = bisect.bisect_right(table[c], i)\\n            while k < len(table[c]) and table[c][k] <= j:\\n                m = table[c][k]\\n                ans = min(ans, dp(i+1, m-1) + dp(m, j))\\n                k += 1\\n            return ans\\n\\n        return dp(0, n-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1136759,
                "title": "modify-the-problem-statement-to-make-the-recurrence-relation-more-obvious",
                "content": "When we look at this question initially, it looks like it is decomposible into smaller repeated sub-problems. But, it\\'s somewhat hard to imagine how we should approach or to come up with the recurrence relation. Now, let\\'s look at a different interpretations of the same problem - \\n\\nLet\\'s work with the example of string \\'aacbabb\\'  referred by \\'s\\'\\n1. Let\\'s assume instead of printing the \\'s\\' , our task is to knock off characters from \\'s\\' until it becomes empty. If there is a group of same characters we can knock them off in one go. We need to find the minimum number of steps to knock off all characters.\\n\\nFor eg -  One optimal sequence of steps for \\'aacbabb\\' will be -\\n step-1 ) \\'aacbabb\\' -> \\'aacbbb\\' (knock off \\'a\\' at index 4 (0 indexed) \\n step-2 ) \\'aacbbb\\'  ->  \\'aac\\'        (knock off 3 \\'b\\'s starting at index 3)\\n step-3 ) \\'aac\\' -> \\'c\\'                    (knock off 2 \\'a\\'s at index 0)\\n step-4) \\'c\\' -> \\'\\'                            (knock off last character)\\n \\n So, we need 4 steps in all. I think, it should be now visible now that our given problem ( min steps to print all characters) and this problem (finding min steps to knock off all characters) are one and the same.\\n \\n Let\\'s reduce our problem still further. \\n Let\\'s look at our string \\'aacbabb\\'.\\n It\\'s easy to see that the number of steps to knock off all characters from \\'aacbabb\\' is the same as the number of steps to knock off all characters from \\'acbab\\' (It is the string created by removing all repeating characters in the initial string).\\n This is becuase number of steps to knock off a group of same characters is 1 irrespective of the group size.\\n\\nNow, it is somewhat easier to come up with the recurrence relation for our new problem statement\\n\\nLet DP( i , j ) represent the number of steps needed to knock off all characters from string in range [i , j]\\n\\nLet\\'s try to come up with the recurrence relationship. \\nWhile knocking off characters from left to right, for each character \\'x\\' between i and j, we have 2 choices\\n1. knock off the s[x] in one step and solve for remaining characters s[ x+1 : j ].\\n2. don\\'t knock off current character right now, but look at the following characters , Let\\'s say we encounter the same character at x+k (i.e. s[x] == s[ x + k] ). Then, we could first knock off all characters between i and k first and then we will be left following string - s.[i] + s[ k : j ]. Now, since s[i] == s[k] .    So, solving for \\n\\ns[i] + s[ k : j ]         is essentially the same as solving for \\n\\ns [k : j ]    as characters at \\'i\\' and \\'k\\' will always be knocked off together in one step.\\n\\n\\nDP( i, j ) = max {    [ 1 + DP ( i + 1 , j) ] ,   [ DP( i + 1, k - 1) + DP ( k , j) ]  for k in range [ i+1 , j ] and s[ i ] == s[ k ]\\n\\n\\n\\n```\\nclass Solution {\\n    char[] car;\\n    int[][] dp;\\n    \\n    public int strangePrinter(String s) {\\n        int l = s.length();\\n        if(l<=1)\\n            return l;\\n        \\n        car = s.toCharArray();\\n        dp = new int[l][l];\\n        \\n        return findMinStepsToRemove(0,l-1);\\n        \\n    }\\n    \\n    \\n    \\n     int findMinStepsToRemove(int st, int end){\\n        if(st>end)\\n            return 0;\\n        \\n        if(st==end)\\n            return 1;\\n        \\n        if(dp[st][end]!=0)\\n            return dp[st][end];\\n        \\n        char cf = car[st];\\n        for(; st<=end; st++){\\n            if(st==end || (car[st+1] != cf))\\n                break;\\n        }\\n        if(st == end)\\n            return 1;\\n        \\n        int res = 1 + findMinStepsToRemove(st+1,end);\\n        \\n        for(int mid = st+1 ;mid<=end; mid++){\\n            if(car[mid] == car[st]){\\n                res = Math.min(res, findMinStepsToRemove(st+1,mid-1) + findMinStepsToRemove(mid, end));\\n            }\\n        }\\n        dp[st][end] = res;\\n        return res;\\n\\n    }\\n}\\n```\\n\\n Note - Our new problem statement looks similar to https://leetcode.com/problems/remove-boxes/ . But, unlike in the solution for https://leetcode.com/problems/remove-boxes/ , here we do not need to track the number of characters before current character that match the current character (called prefix). Our result (number of steps) is the same irrespective of the prefix length.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    char[] car;\\n    int[][] dp;\\n    \\n    public int strangePrinter(String s) {\\n        int l = s.length();\\n        if(l<=1)\\n            return l;\\n        \\n        car = s.toCharArray();\\n        dp = new int[l][l];\\n        \\n        return findMinStepsToRemove(0,l-1);\\n        \\n    }\\n    \\n    \\n    \\n     int findMinStepsToRemove(int st, int end){\\n        if(st>end)\\n            return 0;\\n        \\n        if(st==end)\\n            return 1;\\n        \\n        if(dp[st][end]!=0)\\n            return dp[st][end];\\n        \\n        char cf = car[st];\\n        for(; st<=end; st++){\\n            if(st==end || (car[st+1] != cf))\\n                break;\\n        }\\n        if(st == end)\\n            return 1;\\n        \\n        int res = 1 + findMinStepsToRemove(st+1,end);\\n        \\n        for(int mid = st+1 ;mid<=end; mid++){\\n            if(car[mid] == car[st]){\\n                res = Math.min(res, findMinStepsToRemove(st+1,mid-1) + findMinStepsToRemove(mid, end));\\n            }\\n        }\\n        dp[st][end] = res;\\n        return res;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838544,
                "title": "partition-dp-mcm-for-newbie-like-me",
                "content": "Let\\'s explain the dynamic programming (DP) solution for the problem using a bottom-up approach for beginners.\\n\\n**Problem Statement:**\\n\\nYou are given a string `s`. You have a strange printer with the following two operations:\\n1. You can print a single character from the beginning of the string.\\n2. You can print the entire remaining string with the same character if it is the same as the first character of the remaining string.\\n\\nYour task is to find the minimum number of turns the printer has to take to print the entire string.\\n\\n**Dynamic Programming Approach:**\\n\\nTo solve this problem using dynamic programming, we can break it down into smaller subproblems. We\\'ll define a DP table `dp`, where `dp[i][j]` will represent the minimum number of turns needed to print the substring `s[i...j]` (inclusive).\\n\\n**Base Case:**\\n- For a single character (substring of length 1), we need only one turn to print it. Therefore, `dp[i][i] = 1` for all `i`.\\n\\n**Recursive Formula:**\\n- Now, we need to find the minimum number of turns for substrings of length 2, 3, and so on, up to the entire string length.\\n- For each substring length, we\\'ll iterate over all possible starting points (`i`) and ending points (`j`) of that substring.\\n- To compute `dp[i][j]`, we\\'ll iterate over all possible `k` from `i` to `j-1` (inclusive).\\n- For each `k`, we\\'ll try to find the minimum number of turns by combining the minimum turns required to print `s[i...k]` and `s[k+1...j]`.\\n\\n**Final Answer:**\\nThe answer to the problem will be stored in `dp[0][n-1]`, where `n` is the length of the string.\\n\\n**Pseudocode:**\\n\\n```plaintext\\n1. Initialize dp array of size n x n with all values set to 0.\\n2. For i = n-1 to 0:\\n3.   Set dp[i][i] = 1 (Base case: single character requires one turn).\\n4.   For j = i+1 to n-1:\\n5.     Set dp[i][j] to a large value (e.g., INT_MAX) as a placeholder.\\n6.     For k = i to j-1:\\n7.       Compute minTurns = dp[i][k] + dp[k+1][j].\\n8.       If s[i] == s[j], decrement minTurns by 1 (as we can print the entire remaining string with the same character).\\n9.       Update dp[i][j] to the minimum of its current value and minTurns.\\n10. Return dp[0][n-1].\\n```\\n\\n\\nThis C++ code implements the bottom-up DP approach to find the minimum turns needed to print the entire string using the strange printer. It uses a 2D array `dp` to store the intermediate results and fills it from smaller subproblems to larger ones. The final answer is obtained from `dp[0][n-1]`, where `n` is the length of the input string `s`.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^3)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    int strangePrinter(string s)\\n    {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n\\n        for (int i = n - 1; i >= 0; --i)\\n        {\\n            dp[i][i] = 1; // base case : one character example : a -> 1\\n            for (int j = i + 1; j < n; ++j)\\n            {\\n                dp[i][j] = INT_MAX; \\n                for (int k = i; k < j; ++k) // k is the partition point\\n                {\\n                    int minTurns = dp[i][k] + dp[k + 1][j]; // dp[i][k] -> turns for s[i...k] and dp[k+1][j] -> turns for s[k+1...j]\\n                    if (s[i] == s[j])\\n                        minTurns--; // If s[i] and s[j] are the same, we need one less turn. || example : aabaa -> 2 turns instead of 3 \\n                    dp[i][j] = min(dp[i][j], minTurns); // minTurns is the minimum turns for s[i...j]\\n                }\\n            }\\n        }\\n        return dp[0][n - 1]; // minimum turns for s[0...n-1]\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```plaintext\\n1. Initialize dp array of size n x n with all values set to 0.\\n2. For i = n-1 to 0:\\n3.   Set dp[i][i] = 1 (Base case: single character requires one turn).\\n4.   For j = i+1 to n-1:\\n5.     Set dp[i][j] to a large value (e.g., INT_MAX) as a placeholder.\\n6.     For k = i to j-1:\\n7.       Compute minTurns = dp[i][k] + dp[k+1][j].\\n8.       If s[i] == s[j], decrement minTurns by 1 (as we can print the entire remaining string with the same character).\\n9.       Update dp[i][j] to the minimum of its current value and minTurns.\\n10. Return dp[0][n-1].\\n```\n```\\nclass Solution\\n{\\npublic:\\n    int strangePrinter(string s)\\n    {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n\\n        for (int i = n - 1; i >= 0; --i)\\n        {\\n            dp[i][i] = 1; // base case : one character example : a -> 1\\n            for (int j = i + 1; j < n; ++j)\\n            {\\n                dp[i][j] = INT_MAX; \\n                for (int k = i; k < j; ++k) // k is the partition point\\n                {\\n                    int minTurns = dp[i][k] + dp[k + 1][j]; // dp[i][k] -> turns for s[i...k] and dp[k+1][j] -> turns for s[k+1...j]\\n                    if (s[i] == s[j])\\n                        minTurns--; // If s[i] and s[j] are the same, we need one less turn. || example : aabaa -> 2 turns instead of 3 \\n                    dp[i][j] = min(dp[i][j], minTurns); // minTurns is the minimum turns for s[i...j]\\n                }\\n            }\\n        }\\n        return dp[0][n - 1]; // minimum turns for s[0...n-1]\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 475313,
                "title": "dp-with-explanation-on-equations",
                "content": "Many posts alreay give the code and DP equations. Here are some explainations to understand the DP equations.\\n\\nTwo basic points:\\n1, When we print a string, we may have lots of optimal solutions. ***Printing the whole line with the first character at the first step can always yield one of the optimal solutions.*** My understanding is that, although we can print other characters first, we still need one step coming back to print the first character. So printing other characters first and coming back printing the first character with one extra step is equivavlent to print the first character in first step and then printing other characters. Since in the first step, printing one character is equivalent to printing whole line with that character, we can print the whole line with the first character in the first step. And this will always give us one optimal solution.\\n\\n2, When we print s[i..j], characters from i to j in the line, if some character s[k] in the middle same as s[i], base on point 1, one optimal soltution is we print whole s[i..j] with s[i] first, this will print s[k] too. So the DP equation ***dp[i][j] = min(dp[i][j], dp[i][k-1] + dp[k+1][j])*** holds, becase s[k] already printed when we print s[i] at the first step.\\n\\nC++ Code:\\n\\n\\tint strangePrinter(string s) {\\n        if (s.size() <= 1){return s.size();}\\n        \\n        /* 2-d dp, \\n         * dp[i][j] = minimal steps need to print s[i..j]\\n         * dp[i][i] = 1;\\n         * dp[i][j] = min{1 + dp[i+1][j], dp[i][k-1] + dp[k+1][j] for i < k <= j and s[i] = s[k]}\\n         */\\n        int memo[101][101], n = s.size();\\n        for (int i = 0; i < n; ++i){\\n            memo[i][i] = 1; \\n        }\\n        for (int l = 2; l <= n; ++l){\\n            for (int j = l - 1; j < n; ++j){\\n                int i = j - l + 1;\\n                \\n                memo[i][j] = (s[i] == s[j]) ? memo[i][j-1] : (1 + memo[i+1][j]);\\n                for (int k = i + 1; k < j; ++k){\\n                    if (s[i] == s[k]){\\n                        memo[i][j] = min(memo[i][j], memo[i][k-1] + memo[k+1][j]);\\n                    }\\n                }\\n            }\\n        }\\n        return memo[0][n-1];\\n    }\\n",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "Many posts alreay give the code and DP equations. Here are some explainations to understand the DP equations.\\n\\nTwo basic points:\\n1, When we print a string, we may have lots of optimal solutions. ***Printing the whole line with the first character at the first step can always yield one of the optimal solutions.*** My understanding is that, although we can print other characters first, we still need one step coming back to print the first character. So printing other characters first and coming back printing the first character with one extra step is equivavlent to print the first character in first step and then printing other characters. Since in the first step, printing one character is equivalent to printing whole line with that character, we can print the whole line with the first character in the first step. And this will always give us one optimal solution.\\n\\n2, When we print s[i..j], characters from i to j in the line, if some character s[k] in the middle same as s[i], base on point 1, one optimal soltution is we print whole s[i..j] with s[i] first, this will print s[k] too. So the DP equation ***dp[i][j] = min(dp[i][j], dp[i][k-1] + dp[k+1][j])*** holds, becase s[k] already printed when we print s[i] at the first step.\\n\\nC++ Code:\\n\\n\\tint strangePrinter(string s) {\\n        if (s.size() <= 1){return s.size();}\\n        \\n        /* 2-d dp, \\n         * dp[i][j] = minimal steps need to print s[i..j]\\n         * dp[i][i] = 1;\\n         * dp[i][j] = min{1 + dp[i+1][j], dp[i][k-1] + dp[k+1][j] for i < k <= j and s[i] = s[k]}\\n         */\\n        int memo[101][101], n = s.size();\\n        for (int i = 0; i < n; ++i){\\n            memo[i][i] = 1; \\n        }\\n        for (int l = 2; l <= n; ++l){\\n            for (int j = l - 1; j < n; ++j){\\n                int i = j - l + 1;\\n                \\n                memo[i][j] = (s[i] == s[j]) ? memo[i][j-1] : (1 + memo[i+1][j]);\\n                for (int k = i + 1; k < j; ++k){\\n                    if (s[i] == s[k]){\\n                        memo[i][j] = min(memo[i][j], memo[i][k-1] + memo[k+1][j]);\\n                    }\\n                }\\n            }\\n        }\\n        return memo[0][n-1];\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 106808,
                "title": "c-dp-15ms-with-detailed-explanation-o-n-3",
                "content": "This problem can be solved by two dimensional DP, but the transition formula is a bit tricky.\\n\\n1) dp[i][j] represents the minimum turns required for the left inclusive sequence [i, j). I use memoization and DFS to avoid solving a large amount of unnecessary subproblems.\\n2) Greedy choice: For any sequence, we can always begin with printing the first character. Let's say the first character s[0] = 'a'. If there is an optimized solution, which prints s[0] for the range [0, k) as non-first step, we can move this step as the first and keep other steps in the original order. If any printing earlier than s[0]'s original order starts before k, we modify the range to start from k.\\n\\nBased on different ways to combine s[0] = 'a' with other segment of 'a'. We have\\n```\\ndp[i][j] = min(dp[i][j], dp[start][k]+dp[k][end]), for each k where s[k] == s[i]\\nHere start is first character not of s[i], and end is after last character not of s[i] \\n```    \\nFor example, given a sequence \"aaa bcd aaa def aaa ccd aaa\", we have 3 choices to combine s[0] = 'a' with other segment of 'a'.\\nbcd + aaa aaa def aaa ccd aaa, which is the same as  bcd + aaa def aaa ccd\\nbcd aaa def + aaa ccd\\nbcd aaa def aaa ccd + aaa\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));\\n        return helper(s, dp, 0, n);\\n    }\\nprivate:\\n    int helper(string& str, vector<vector<int>>& dp, int s, int e) {\\n        if (s >= e) return 0;\\n        if (dp[s][e]) return dp[s][e];\\n        // handle leading and trailing characters of str[s]\\n        // Note the range is left inclusive [s,e) [l,r)\\n        int l = s, r = e;\\n        while (l < e && str[l] == str[s]) l++;\\n        while (r > l && str[r-1] == str[s]) r--;\\n        dp[s][e] = 1+helper(str, dp, l, r);\\n        for (int i = l; i < r; i++) {\\n            if (str[i] == str[s]) {\\n                dp[s][e] = min(dp[s][e], helper(str,dp,l,i)+helper(str,dp,i,r));\\n                while (i < e && str[i] == str[s]) i++;\\n            }   \\n        }\\n        return dp[s][e];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\ndp[i][j] = min(dp[i][j], dp[start][k]+dp[k][end]), for each k where s[k] == s[i]\\nHere start is first character not of s[i], and end is after last character not of s[i] \\n```\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n+1, vector<int>(n+1, 0));\\n        return helper(s, dp, 0, n);\\n    }\\nprivate:\\n    int helper(string& str, vector<vector<int>>& dp, int s, int e) {\\n        if (s >= e) return 0;\\n        if (dp[s][e]) return dp[s][e];\\n        // handle leading and trailing characters of str[s]\\n        // Note the range is left inclusive [s,e) [l,r)\\n        int l = s, r = e;\\n        while (l < e && str[l] == str[s]) l++;\\n        while (r > l && str[r-1] == str[s]) r--;\\n        dp[s][e] = 1+helper(str, dp, l, r);\\n        for (int i = l; i < r; i++) {\\n            if (str[i] == str[s]) {\\n                dp[s][e] = min(dp[s][e], helper(str,dp,l,i)+helper(str,dp,i,r));\\n                while (i < e && str[i] == str[s]) i++;\\n            }   \\n        }\\n        return dp[s][e];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838270,
                "title": "recursive-approach-memoization-matrix-chain-multiplication-mcm-partition-dp",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(N^3)$$\\n- Space complexity: $$O(N^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int f(int i, int j, string &s,  vector<vector<int>> &dp)\\n    {\\n        if(i==j) return 1;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        int ans=INT_MAX;\\n        for(int x=i;x<j;x++)\\n        {\\n            ans=min(ans, f(i,x, s, dp)+f(x+1, j,s, dp));\\n        }\\n        return dp[i][j]=(s[i]==s[j])?ans-1: ans;\\n    }\\n    int strangePrinter(string s) {\\n        int n=s.length();\\n        vector<vector<int>> dp(n, vector<int> (n, -1));\\n        return f(0, n-1, s, dp);\\n    }\\n};\\n```\\n## ***Let me know if you got it by upvoting it.***\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int f(int i, int j, string &s,  vector<vector<int>> &dp)\\n    {\\n        if(i==j) return 1;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        int ans=INT_MAX;\\n        for(int x=i;x<j;x++)\\n        {\\n            ans=min(ans, f(i,x, s, dp)+f(x+1, j,s, dp));\\n        }\\n        return dp[i][j]=(s[i]==s[j])?ans-1: ans;\\n    }\\n    int strangePrinter(string s) {\\n        int n=s.length();\\n        vector<vector<int>> dp(n, vector<int> (n, -1));\\n        return f(0, n-1, s, dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836582,
                "title": "very-optimised-code-java-beginner-friendly",
                "content": "# Code\\n```\\nclass Solution {\\n    static char ch[]=new char[100]; int n;\\n    public int strangePrinter(String s) {\\n        setCompressedString(s);\\n        return f(0,n-1,new Integer[n][n]);\\n    }\\n    private void setCompressedString(String s){\\n        int x=s.length(),k=0;\\n        for(int i=0;i<x;i++) \\n            if(i==x-1 || s.charAt(i)!=s.charAt(i+1))\\n                ch[k++]=s.charAt(i);\\n        n=k;\\n    }\\n    private int f(int i, int j, Integer[][] memo){\\n        if(i==j) return 1;\\n        if(memo[i][j]!=null) return memo[i][j];\\n        int res=101;\\n        for(int k=i;k<j;k++)\\n            res=Math.min(res, f(i,k,memo)+f(k+1,j,memo));\\n        return memo[i][j]=ch[i]==ch[j]? res-1:res;\\n    }\\n}\\n```\\n# Documentation\\n- `setCompressedString()`: This function computes the new character array which contains only single character for a sequence of same characters. Eg: `aaabbbaa` is converted to `aba`.\\nThis saves a lost of time, since the time complexity is Quadratic.\\n- `f(i,j,memo)`: This computes the answer from the position `i` to `j` in the string and returns the result recursively.\\n- `strangePrinter(s)`: This is the main function that is called by the LC compiler.\\n# Complexity\\n- Time: $$O(n^3)$$\\n- Space: $$O(n+n^2)$$",
                "solutionTags": [
                    "Java",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    static char ch[]=new char[100]; int n;\\n    public int strangePrinter(String s) {\\n        setCompressedString(s);\\n        return f(0,n-1,new Integer[n][n]);\\n    }\\n    private void setCompressedString(String s){\\n        int x=s.length(),k=0;\\n        for(int i=0;i<x;i++) \\n            if(i==x-1 || s.charAt(i)!=s.charAt(i+1))\\n                ch[k++]=s.charAt(i);\\n        n=k;\\n    }\\n    private int f(int i, int j, Integer[][] memo){\\n        if(i==j) return 1;\\n        if(memo[i][j]!=null) return memo[i][j];\\n        int res=101;\\n        for(int k=i;k<j;k++)\\n            res=Math.min(res, f(i,k,memo)+f(k+1,j,memo));\\n        return memo[i][j]=ch[i]==ch[j]? res-1:res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836097,
                "title": "c-solution-for-strange-printer-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem can be solved using dynamic programming. The idea is to break down the input string into smaller substrings and find the minimum number of turns needed to print each substring. We will then use the results of smaller substrings to calculate the minimum turns needed for larger substrings until we reach the full input string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- We use a 2D dynamic programming array dp, where dp[i, j] represents the minimum number of turns needed to print the substring s[i...j].\\n- The base case is when the substring has only one character, so dp[i, i] = 1 (one turn needed to print a single character).\\n- We then iterate over the length of the substrings (len) starting from 2, as we have already handled substrings of length 1.\\n- For each substring length len, we iterate over all possible starting positions i, and we calculate the ending position j = i + len - 1.\\n- If the first and last characters of the substring are the same (s[i] == s[j]), then the minimum turns needed to print the substring s[i...j] is the same as the minimum turns needed to print the substring s[i...j-1] (i.e., dp[i, j] = dp[i, j - 1]).\\n- Otherwise, we try all possible ways to split the substring at position k (where i <= k < j), and calculate the minimum turns needed by combining the turns needed for the two smaller substrings s[i...k] and s[k+1...j]. The result for the current substring s[i...j] will be the minimum of all these combinations.\\n- After filling the entire DP array, the answer will be in the top-right cell, i.e., dp[0, n - 1], where n is the length of the input string.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the dynamic programming solution is O(n^3), where \\'n\\' is the length of the input string s. This is because we have a nested loop for each substring length and within that, we have another loop to iterate over all possible splits to find the minimum turns needed. Each loop runs at most \\'n\\' times, resulting in a cubic time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the solution is O(n^2), which is due to the 2D DP array of size n x n. As we store the results of all possible substrings, the space complexity grows quadratically with the size of the input string s.\\n\\n# Code\\n```\\npublic class Solution {\\n    public int StrangePrinter(string s) {\\n        int n = s.Length;\\n        int[,] dp = new int[n, n];\\n\\n        for (int i = 0; i < n; i++)\\n        {\\n            // Each single character needs one turn to print\\n            dp[i, i] = 1;\\n        }\\n\\n        // Iterate over the length of the substrings\\n        for (int len = 2; len <= n; len++)\\n        {\\n            for (int i = 0; i <= n - len; i++)\\n            {\\n                int j = i + len - 1;\\n                dp[i, j] = len; // Initialize the maximum value for the current substring\\n\\n                // Case 1: If the first and last characters are the same, reduce the turns\\n                if (s[i] == s[j])\\n                {\\n                    dp[i, j] = dp[i, j - 1];\\n                }\\n\\n                // Case 2: Try all possible ways to split the substring and find the minimum turns\\n                for (int k = i; k < j; k++)\\n                {\\n                    dp[i, j] = Math.Min(dp[i, j], dp[i, k] + dp[k + 1, j]);\\n                }\\n            }\\n        }\\n\\n        // The answer will be in the top-right cell of the DP array\\n        return dp[0, n - 1];\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int StrangePrinter(string s) {\\n        int n = s.Length;\\n        int[,] dp = new int[n, n];\\n\\n        for (int i = 0; i < n; i++)\\n        {\\n            // Each single character needs one turn to print\\n            dp[i, i] = 1;\\n        }\\n\\n        // Iterate over the length of the substrings\\n        for (int len = 2; len <= n; len++)\\n        {\\n            for (int i = 0; i <= n - len; i++)\\n            {\\n                int j = i + len - 1;\\n                dp[i, j] = len; // Initialize the maximum value for the current substring\\n\\n                // Case 1: If the first and last characters are the same, reduce the turns\\n                if (s[i] == s[j])\\n                {\\n                    dp[i, j] = dp[i, j - 1];\\n                }\\n\\n                // Case 2: Try all possible ways to split the substring and find the minimum turns\\n                for (int k = i; k < j; k++)\\n                {\\n                    dp[i, j] = Math.Min(dp[i, j], dp[i, k] + dp[k + 1, j]);\\n                }\\n            }\\n        }\\n\\n        // The answer will be in the top-right cell of the DP array\\n        return dp[0, n - 1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835913,
                "title": "python3-solution",
                "content": "\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n=len(s)\\n        if not s:\\n            return 0\\n\\n        dp=[[sys.maxsize]*n for _ in range(n)]\\n\\n        for i in range(n):\\n            dp[i][i]=1\\n\\n        for l in range(2,n+1):\\n            for i in range(n-l+1):\\n                j=i+l-1\\n                dp[i][j]=dp[i+1][j]+1\\n\\n                for k in range(i+1,j+1):\\n                    if s[i]==s[k]:\\n                        dp[i][j]=min(dp[i][j],dp[i][k-1]+(dp[k+1][j] if j>k else 0))\\n\\n        return dp[0][n-1]                        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n=len(s)\\n        if not s:\\n            return 0\\n\\n        dp=[[sys.maxsize]*n for _ in range(n)]\\n\\n        for i in range(n):\\n            dp[i][i]=1\\n\\n        for l in range(2,n+1):\\n            for i in range(n-l+1):\\n                j=i+l-1\\n                dp[i][j]=dp[i+1][j]+1\\n\\n                for k in range(i+1,j+1):\\n                    if s[i]==s[k]:\\n                        dp[i][j]=min(dp[i][j],dp[i][k-1]+(dp[k+1][j] if j>k else 0))\\n\\n        return dp[0][n-1]                        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2161094,
                "title": "java-clean-code-tc-o-n-3",
                "content": "```\\npublic int strangePrinter(String s) {\\n      // Memoizatiion ----- Approach - 1 \\n      // Integer[][] dp = new Integer[s.length()][s.length()];\\n      // return solveMemo(s, 0, s.length() - 1, dp);\\n      \\n      // Tabulation ------ Approach - 2\\n      int[][] dp = new int[s.length()][s.length()]; // dp[i][j] defines minimum turns for substring i to j\\n      for(int i = dp.length - 1; i >= 0; i--){\\n        for(int j = 0; j < dp.length; j++){\\n          if(i > j){ // invalid substring\\n            continue;\\n          }else if(i == j){// single character || base condition\\n            dp[i][j] = 1;\\n          }else{\\n            int min = Integer.MAX_VALUE;\\n            for(int k = i; k < j; k++){ // For finding split which results in minimum turns;\\n              min = Math.min(min, dp[i][k] + dp[k + 1][j]); \\n            }\\n            if(s.charAt(i) == s.charAt(j)){\\n              min--;\\n            }\\n            dp[i][j] = min;\\n          }\\n        }\\n      }\\n      return dp[0][s.length() - 1];\\n      // TC -> O(n ^ 3)\\n    }\\n\\t  // Memoization\\n    public int solveMemo(String s, int i, int j, Integer[][] dp){\\n      if(i == j){\\n        return 1;\\n      }\\n      if(dp[i][j] != null){\\n        return dp[i][j];\\n      }\\n      int ans = Integer.MAX_VALUE;\\n      for(int k = i; k < j; k++){\\n        ans = Math.min(ans, solveMemo(s, i, k, dp) + solveMemo(s, k + 1, j, dp));\\n      }\\n      \\n      return dp[i][j] = s.charAt(i) == s.charAt(j) ? ans - 1 : ans;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Depth-First Search",
                    "Memoization"
                ],
                "code": "```\\npublic int strangePrinter(String s) {\\n      // Memoizatiion ----- Approach - 1 \\n      // Integer[][] dp = new Integer[s.length()][s.length()];\\n      // return solveMemo(s, 0, s.length() - 1, dp);\\n      \\n      // Tabulation ------ Approach - 2\\n      int[][] dp = new int[s.length()][s.length()]; // dp[i][j] defines minimum turns for substring i to j\\n      for(int i = dp.length - 1; i >= 0; i--){\\n        for(int j = 0; j < dp.length; j++){\\n          if(i > j){ // invalid substring\\n            continue;\\n          }else if(i == j){// single character || base condition\\n            dp[i][j] = 1;\\n          }else{\\n            int min = Integer.MAX_VALUE;\\n            for(int k = i; k < j; k++){ // For finding split which results in minimum turns;\\n              min = Math.min(min, dp[i][k] + dp[k + 1][j]); \\n            }\\n            if(s.charAt(i) == s.charAt(j)){\\n              min--;\\n            }\\n            dp[i][j] = min;\\n          }\\n        }\\n      }\\n      return dp[0][s.length() - 1];\\n      // TC -> O(n ^ 3)\\n    }\\n\\t  // Memoization\\n    public int solveMemo(String s, int i, int j, Integer[][] dp){\\n      if(i == j){\\n        return 1;\\n      }\\n      if(dp[i][j] != null){\\n        return dp[i][j];\\n      }\\n      int ans = Integer.MAX_VALUE;\\n      for(int k = i; k < j; k++){\\n        ans = Math.min(ans, solveMemo(s, i, k, dp) + solveMemo(s, k + 1, j, dp));\\n      }\\n      \\n      return dp[i][j] = s.charAt(i) == s.charAt(j) ? ans - 1 : ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1492420,
                "title": "python3-dp",
                "content": "\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        s = \"\".join(ch for i, ch in enumerate(s) if i == 0 or s[i-1] != ch)\\n        \\n        @cache\\n        def fn(lo, hi): \\n            \"\"\"Return min ops to print s[lo:hi].\"\"\"\\n            if lo == hi: return 0\\n            ans = 1 + fn(lo+1, hi)\\n            for mid in range(lo+1, hi): \\n                if s[lo] == s[mid]: \\n                    ans = min(ans, fn(lo, mid) + fn(mid+1, hi))\\n            return ans \\n        \\n        return fn(0, len(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        s = \"\".join(ch for i, ch in enumerate(s) if i == 0 or s[i-1] != ch)\\n        \\n        @cache\\n        def fn(lo, hi): \\n            \"\"\"Return min ops to print s[lo:hi].\"\"\"\\n            if lo == hi: return 0\\n            ans = 1 + fn(lo+1, hi)\\n            for mid in range(lo+1, hi): \\n                if s[lo] == s[mid]: \\n                    ans = min(ans, fn(lo, mid) + fn(mid+1, hi))\\n            return ans \\n        \\n        return fn(0, len(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 778646,
                "title": "c-dp-memo",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    \\n    int dp[100][100] = {0};\\n    int find(string & s, int l , int r){\\n        if(l>r) return 0;\\n        \\n        int & ans = dp[l][r];\\n        if(ans!=0) return ans;\\n       \\n        ans = 1+ find(s, l+1 ,r);\\n        \\n        for(int k = l+1; k<=r;k++){\\n            if(s[k] == s[l]){\\n                ans = min(ans,  find(s, l+1, k) + find(s,k+1,r ));\\n            }\\n        }\\n        \\n    return ans;\\n    }\\n    \\n    int strangePrinter(string s) {\\n        return find(s, 0,s.size()-1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    \\n    int dp[100][100] = {0};\\n    int find(string & s, int l , int r){\\n        if(l>r) return 0;\\n        \\n        int & ans = dp[l][r];\\n        if(ans!=0) return ans;\\n       \\n        ans = 1+ find(s, l+1 ,r);\\n        \\n        for(int k = l+1; k<=r;k++){\\n            if(s[k] == s[l]){\\n                ans = min(ans,  find(s, l+1, k) + find(s,k+1,r ));\\n            }\\n        }\\n        \\n    return ans;\\n    }\\n    \\n    int strangePrinter(string s) {\\n        return find(s, 0,s.size()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 709340,
                "title": "evolve-from-recursion-to-dp",
                "content": "This problem is similar to [Problem 546. Remove Boxes](https://leetcode.com/problems/remove-boxes/discuss/645838/Evolve-from-intuition-to-dp) but easier. Remove Boxes is 3d dp while this one is standard 2d dp for array problems.\\n1. Brute force\\nWe need a way to break the problem into subproblems so that we can solve it recursively. For a char at the end of array, there are two cases\\n* add it with 1 turn\\n* add it with a same char before it\\nThe idea is from [@shlykovich](https://leetcode.com/problems/strange-printer/discuss/233067/Python.-Recursive-approach-with-memorization).\\n```\\npublic int strangePrinter(String s) {\\n        return strangePrinter(0,s.length()-1,s);\\n    }\\n    private int strangePrinter(int l, int r, String s) {\\n        if(l>r) return 0;\\n        int t=1+strangePrinter(l+1,r,s);\\n        for(int i=l+1;i<=r;i++)\\n            if(s.charAt(i)==s.charAt(l))\\n                t=Math.min(t,strangePrinter(l+1,i-1,s)+strangePrinter(i,r,s));\\n        return t;\\n    }\\n```\\n2. Memoization\\n```\\npublic int strangePrinter(String s) {\\n        String st=s.replaceAll(\"(.)\\\\\\\\1+\",\"$1\");\\n        int len=st.length();\\n        int[][] mem=new int[len][len];\\n        return strangePrinter(0,len-1,st,mem);\\n    }\\n    private int strangePrinter(int l, int r, String s, int[][] mem) {\\n        if(l>r) return 0;\\n        if(mem[l][r]!=0) return mem[l][r];\\n        int t=1+strangePrinter(l+1,r,s,mem);\\n        for(int i=l+1;i<=r;i++)\\n            if(s.charAt(i)==s.charAt(l))\\n                t=Math.min(t,strangePrinter(l+1,i-1,s,mem)+strangePrinter(i,r,s,mem));\\n        return mem[l][r]=t;\\n    }\\n```\\n3. dp\\n```\\n    public int strangePrinter(String s) {\\n        if(s.isEmpty()) return 0;\\n        String st=s.replaceAll(\"(.)\\\\\\\\1+\",\"$1\");\\n        int n=st.length();\\n        int[][] dp=new int[n][n];\\n        for(int i=0;i<n;i++) dp[i][i]=1;\\n        for(int len=1;len<n;len++)\\n            for(int i=0;i<n-len;i++) {\\n                dp[i][i+len]=1+dp[i+1][i+len];\\n                for(int j=i+1;j<=i+len;j++)\\n                    if(st.charAt(i)==st.charAt(j)) \\n                        dp[i][i+len]=Math.min(dp[i][i+len],(j-i>1?dp[i+1][j-1]:0)+dp[j][i+len]);\\n            }\\n        return dp[0][n-1];\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int strangePrinter(String s) {\\n        return strangePrinter(0,s.length()-1,s);\\n    }\\n    private int strangePrinter(int l, int r, String s) {\\n        if(l>r) return 0;\\n        int t=1+strangePrinter(l+1,r,s);\\n        for(int i=l+1;i<=r;i++)\\n            if(s.charAt(i)==s.charAt(l))\\n                t=Math.min(t,strangePrinter(l+1,i-1,s)+strangePrinter(i,r,s));\\n        return t;\\n    }\\n```\n```\\npublic int strangePrinter(String s) {\\n        String st=s.replaceAll(\"(.)\\\\\\\\1+\",\"$1\");\\n        int len=st.length();\\n        int[][] mem=new int[len][len];\\n        return strangePrinter(0,len-1,st,mem);\\n    }\\n    private int strangePrinter(int l, int r, String s, int[][] mem) {\\n        if(l>r) return 0;\\n        if(mem[l][r]!=0) return mem[l][r];\\n        int t=1+strangePrinter(l+1,r,s,mem);\\n        for(int i=l+1;i<=r;i++)\\n            if(s.charAt(i)==s.charAt(l))\\n                t=Math.min(t,strangePrinter(l+1,i-1,s,mem)+strangePrinter(i,r,s,mem));\\n        return mem[l][r]=t;\\n    }\\n```\n```\\n    public int strangePrinter(String s) {\\n        if(s.isEmpty()) return 0;\\n        String st=s.replaceAll(\"(.)\\\\\\\\1+\",\"$1\");\\n        int n=st.length();\\n        int[][] dp=new int[n][n];\\n        for(int i=0;i<n;i++) dp[i][i]=1;\\n        for(int len=1;len<n;len++)\\n            for(int i=0;i<n-len;i++) {\\n                dp[i][i+len]=1+dp[i+1][i+len];\\n                for(int j=i+1;j<=i+len;j++)\\n                    if(st.charAt(i)==st.charAt(j)) \\n                        dp[i][i+len]=Math.min(dp[i][i+len],(j-i>1?dp[i+1][j-1]:0)+dp[j][i+len]);\\n            }\\n        return dp[0][n-1];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 306009,
                "title": "java-easy-understand-top-down-idea-coming-from-leetcode-546",
                "content": "I read all the top discussions (https://leetcode.com/problems/strange-printer/discuss/106810/Java-O(n3)-DP-Solution-with-Explanation-and-Simple-Optimization )but I still cannot figure out  why it is correct, especially when we have ```s.charAt(start + k) == s.charAt(start + len)```, we need to minus 1. What about ```s.charAt(start) == s.charAt(start + len)``` or ```s.charAt(start) == s.charAt(start + k  + 1)``` or ```s.charAt(start+k) == s.charAt(start + k  + 1)```?\\n```\\nindex |start  ...  start + k| |start + k + 1 ... start + len|\\nchar  |  a    ...       b   | |      c       ...      b     |\\n```\\nWhy we don\\'t need to think about them or how we can include them in some subproblems? I will be grateful if someone can tell me.\\n\\n------------------------------------------------------------------------------------------------------------------------------------\\n\\nThanks to someone I can\\'t find now :(   He said it is just like the problem 546. I learned really a lot from the top disscusion (https://leetcode.com/problems/remove-boxes/discuss/101310/Java-top-down-and-bottom-up-DP-solutions) and get the idea below.\\n\\nI cannot demnnstrate it better so I post the link. I **RECOMMEND** anyone with doubt to read it first.\\n\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n        int n = s.length();\\n        int[][] memo = new int[n][n];\\n        return helper(memo, s, 0 ,n-1);\\n    }\\n    \\n    private int helper(int[][] memo, String s, int i, int j){\\n        if(i > j) return 0;\\n        if(memo[i][j] != 0) return memo[i][j];\\n        int originI = i; // maybe we don\\'t need this\\n        for(; i+1 <= j && s.charAt(i+1) == s.charAt(i); i++);\\n        int res = 1 + helper(memo, s, i+1, j);// print the first continuous i char same as the first one in one time.\\n        for(int m = i + 1; m <= j; m++){\\n            if(s.charAt(m) == s.charAt(i)){\\n                res = Math.min(res, helper(memo, s, i+1, m-1)+ helper(memo, s, m, j));// the first continuous i char same as the first one is print with the m to j characters together.\\n            }\\n        }\\n        memo[originI][j] = res;\\n        return res;\\n    }\\n        \\n}\\n```",
                "solutionTags": [],
                "code": "```s.charAt(start + k) == s.charAt(start + len)```\n```s.charAt(start) == s.charAt(start + len)```\n```s.charAt(start) == s.charAt(start + k  + 1)```\n```s.charAt(start+k) == s.charAt(start + k  + 1)```\n```\\nindex |start  ...  start + k| |start + k + 1 ... start + len|\\nchar  |  a    ...       b   | |      c       ...      b     |\\n```\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if (s == null || s.length() == 0) {\\n            return 0;\\n        }\\n        int n = s.length();\\n        int[][] memo = new int[n][n];\\n        return helper(memo, s, 0 ,n-1);\\n    }\\n    \\n    private int helper(int[][] memo, String s, int i, int j){\\n        if(i > j) return 0;\\n        if(memo[i][j] != 0) return memo[i][j];\\n        int originI = i; // maybe we don\\'t need this\\n        for(; i+1 <= j && s.charAt(i+1) == s.charAt(i); i++);\\n        int res = 1 + helper(memo, s, i+1, j);// print the first continuous i char same as the first one in one time.\\n        for(int m = i + 1; m <= j; m++){\\n            if(s.charAt(m) == s.charAt(i)){\\n                res = Math.min(res, helper(memo, s, i+1, m-1)+ helper(memo, s, m, j));// the first continuous i char same as the first one is print with the m to j characters together.\\n            }\\n        }\\n        memo[originI][j] = res;\\n        return res;\\n    }\\n        \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 296980,
                "title": "python-dp-with-explanations",
                "content": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        if not s:\\n            return 0\\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\\n        for i in range(len(s)):\\n            dp[i][i] = 1\\n        for d in range(1, len(s)):\\n            for l in range(0, len(s) - d):\\n                r = l + d\\n                dp[l][r] = 1 + dp[l + 1][r]\\n                for i in range(l + 1, r + 1):\\n                    if s[i] == s[l]:\\n                        dp[l][r] = min(dp[l][r], dp[l][i - 1] + (dp[i + 1][r] if i + 1 <= r else 0))\\n        return dp[0][-1]\\n    \\n#dp[i][j] means that the minimum number of turns the printer needed in order to print it.\\n#We need to initialize dp. dp[i][i] = 1 and dp[i][j] = dp[i + 1][j] + 1(this step means the maximum #value of dp[i][j] is dp[i][j] + 1, suppose the first element is not the same as the following #element , so we need to add one step)\\n#Search a element in s[i + 1: j + 1] if this element is equal to the s[i]\\n#dp[i][j] = min(dp[i][j], dp[i][k - 1] + dp[k + 1][r])",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        if not s:\\n            return 0\\n        dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\\n        for i in range(len(s)):\\n            dp[i][i] = 1\\n        for d in range(1, len(s)):\\n            for l in range(0, len(s) - d):\\n                r = l + d\\n                dp[l][r] = 1 + dp[l + 1][r]\\n                for i in range(l + 1, r + 1):\\n                    if s[i] == s[l]:\\n                        dp[l][r] = min(dp[l][r], dp[l][i - 1] + (dp[i + 1][r] if i + 1 <= r else 0))\\n        return dp[0][-1]\\n    \\n#dp[i][j] means that the minimum number of turns the printer needed in order to print it.\\n#We need to initialize dp. dp[i][i] = 1 and dp[i][j] = dp[i + 1][j] + 1(this step means the maximum #value of dp[i][j] is dp[i][j] + 1, suppose the first element is not the same as the following #element , so we need to add one step)\\n#Search a element in s[i + 1: j + 1] if this element is equal to the s[i]\\n#dp[i][j] = min(dp[i][j], dp[i][k - 1] + dp[k + 1][r])",
                "codeTag": "Java"
            },
            {
                "id": 3839631,
                "title": "easiest-java-dp-and-memoization-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(n^3)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n^2)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int dp[][]= new int [s.length()+1][s.length()+1];\\n        for(int d[]:dp) Arrays.fill(d,-1);\\n        return helper(0,s.length()-1,s,dp);\\n    }\\n    int helper(int l,int r,String s,int[][]dp){\\n        if(l==r) return 1;\\n        if(l>r) return 0;\\n        if(dp[l][r]!=-1) return dp[l][r];\\n        int i=l+1;\\n        while(i<=r && s.charAt(i)==s.charAt(l))i++;\\n        if(i==r+1) return 1;\\n        int ans=1+helper(i,r,s,dp);\\n        int ansss=Integer.MAX_VALUE;\\n        int count=0;\\n        for(int j=i;j<=r;j++){\\n            if(s.charAt(j)==s.charAt(l)){\\n             count=helper(i,j-1,s,dp)+helper(j,r,s,dp);\\n            ansss=Math.min(count,ansss);\\n            }\\n        }\\n        return dp[l][r]=Math.min(ansss,ans);\\n    }\\n}\\n//Please Upvote !!!\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int dp[][]= new int [s.length()+1][s.length()+1];\\n        for(int d[]:dp) Arrays.fill(d,-1);\\n        return helper(0,s.length()-1,s,dp);\\n    }\\n    int helper(int l,int r,String s,int[][]dp){\\n        if(l==r) return 1;\\n        if(l>r) return 0;\\n        if(dp[l][r]!=-1) return dp[l][r];\\n        int i=l+1;\\n        while(i<=r && s.charAt(i)==s.charAt(l))i++;\\n        if(i==r+1) return 1;\\n        int ans=1+helper(i,r,s,dp);\\n        int ansss=Integer.MAX_VALUE;\\n        int count=0;\\n        for(int j=i;j<=r;j++){\\n            if(s.charAt(j)==s.charAt(l)){\\n             count=helper(i,j-1,s,dp)+helper(j,r,s,dp);\\n            ansss=Math.min(count,ansss);\\n            }\\n        }\\n        return dp[l][r]=Math.min(ansss,ans);\\n    }\\n}\\n//Please Upvote !!!\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837494,
                "title": "c-memorization",
                "content": "# Intuition\\nThe recursion is quite straightforward: \\n0. For a string of a length n the answer is at most n. \\n1. Trival cases are when length of the string is 0 or 1.\\n2. We need to check all possible ways to split a string on two and compare the result of the sum with the given one. The only exception is that if the end character matches the first one, we don\\'t need to take into account the last one.\\n\\nOn top of this recursion we of course add a simple memorization: the state is a pair (start, end) representing the indexes in the substring. We use dictionary to cache the results.\\n\\nObserve that we can replace any number of consequent occurences of the character by one character. So we do this to improve performance.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public Dictionary<char, List<int>> data = new Dictionary<char, List<int>>();\\n    public Dictionary<(int, int), int> cache = new Dictionary<(int, int), int>(); \\n    public string target;\\n    public int StrangePrinter(string s) \\n    {\\n        var sb = new StringBuilder();\\n        foreach(var ch in s)\\n        {\\n            if(sb.Length == 0 || sb[sb.Length - 1] != ch)\\n            {\\n                sb.Append(ch);\\n            }\\n        }\\n\\n        target = sb.ToString();\\n        var n = target.Length;\\n\\n        return Solve(0, n - 1);     \\n    }\\n\\n    public int Solve(int start, int end)\\n    {\\n        if(start == end)\\n        {\\n            return 1;\\n        }\\n\\n        if(start > end)\\n        {\\n            return 0;\\n        }\\n\\n        if(!cache.ContainsKey((start, end)))\\n        {\\n            var result = target[start] == target[end] ? Solve(start, end - 1) : end - start + 1;\\n            \\n\\n            for(int i = start; i < end; ++i)\\n            {\\n                result = Math.Min(result, Solve(start, i) + \\n                                          Solve(i + 1, end));\\n            }\\n\\n            cache.Add((start, end), result);\\n        }\\n\\n        return cache[(start, end)];\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public Dictionary<char, List<int>> data = new Dictionary<char, List<int>>();\\n    public Dictionary<(int, int), int> cache = new Dictionary<(int, int), int>(); \\n    public string target;\\n    public int StrangePrinter(string s) \\n    {\\n        var sb = new StringBuilder();\\n        foreach(var ch in s)\\n        {\\n            if(sb.Length == 0 || sb[sb.Length - 1] != ch)\\n            {\\n                sb.Append(ch);\\n            }\\n        }\\n\\n        target = sb.ToString();\\n        var n = target.Length;\\n\\n        return Solve(0, n - 1);     \\n    }\\n\\n    public int Solve(int start, int end)\\n    {\\n        if(start == end)\\n        {\\n            return 1;\\n        }\\n\\n        if(start > end)\\n        {\\n            return 0;\\n        }\\n\\n        if(!cache.ContainsKey((start, end)))\\n        {\\n            var result = target[start] == target[end] ? Solve(start, end - 1) : end - start + 1;\\n            \\n\\n            for(int i = start; i < end; ++i)\\n            {\\n                result = Math.Min(result, Solve(start, i) + \\n                                          Solve(i + 1, end));\\n            }\\n\\n            cache.Add((start, end), result);\\n        }\\n\\n        return cache[(start, end)];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837072,
                "title": "c-dynamic-programming",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        \\n        // Initialize a 2D DP array to store the minimum number of operations needed\\n        // to print substrings of s[i..j].\\n        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\\n        \\n        // For single-character substrings, the number of operations needed is 1.\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n        \\n        // Loop for different substring lengths (l) starting from 2 and going up to n.\\n        for (int l = 2; l<n+1; l++)\\n        {\\n            // Loop through all possible starting indices of the substrings.\\n            for(int i=0; i<n-l+1; i++)\\n            {\\n                // Calculate the ending index of the current substring.\\n                int j = i+l-1;\\n                \\n                // If the first and last characters of the substring are the same,\\n                // we can use the same operation used for s[i+1..j] and increment the count by 1.\\n                dp[i][j] = dp[i+1][j] + 1;\\n                \\n                // Loop through all possible partition points (k) within the current substring.\\n                for(int k=i+1; k<j+1; k++)\\n                {\\n                    // If the character at index i is equal to the character at index k,\\n                    // it means we can save some operations by printing the characters s[i..k-1]\\n                    // together and then separately printing s[k..j].\\n                    if(s[i] == s[k])\\n                        dp[i][j] = min(dp[i][j], dp[i][k-1] + ((j>k) ? dp[k+1][j] : 0));\\n                }\\n            }\\n        }\\n        \\n        // The minimum number of operations needed to print the entire string s[0..n-1]\\n        // is stored in dp[0][n-1].\\n        return dp[0][n-1];\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        \\n        // Initialize a 2D DP array to store the minimum number of operations needed\\n        // to print substrings of s[i..j].\\n        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\\n        \\n        // For single-character substrings, the number of operations needed is 1.\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n        \\n        // Loop for different substring lengths (l) starting from 2 and going up to n.\\n        for (int l = 2; l<n+1; l++)\\n        {\\n            // Loop through all possible starting indices of the substrings.\\n            for(int i=0; i<n-l+1; i++)\\n            {\\n                // Calculate the ending index of the current substring.\\n                int j = i+l-1;\\n                \\n                // If the first and last characters of the substring are the same,\\n                // we can use the same operation used for s[i+1..j] and increment the count by 1.\\n                dp[i][j] = dp[i+1][j] + 1;\\n                \\n                // Loop through all possible partition points (k) within the current substring.\\n                for(int k=i+1; k<j+1; k++)\\n                {\\n                    // If the character at index i is equal to the character at index k,\\n                    // it means we can save some operations by printing the characters s[i..k-1]\\n                    // together and then separately printing s[k..j].\\n                    if(s[i] == s[k])\\n                        dp[i][j] = min(dp[i][j], dp[i][k-1] + ((j>k) ? dp[k+1][j] : 0));\\n                }\\n            }\\n        }\\n        \\n        // The minimum number of operations needed to print the entire string s[0..n-1]\\n        // is stored in dp[0][n-1].\\n        return dp[0][n-1];\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836324,
                "title": "c-fastest-100-beats-easy-to-understand-hard-problem-664-strange-printer",
                "content": "# C++ | Fastest | 100% BEATS | Easy to Understand | Hard Problem | 664. Strange Printer\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        if(s.size()==0)return 0;\\n        vector<vector<int>> dp(s.size(),vector<int>(s.size(),0));\\n        for(int i=s.size()-1;i>=0;i--)\\n            for(int j=i;j<s.size();j++)\\n            {\\n                if(i==j)dp[i][j]=1;\\n                else\\n                {\\n                    int temp=dp[i][j-1]+1,m;\\n                    for(m=j-1;m>=i;m--)\\n                        if(s[m]==s[j])\\n                        {\\n                            if(m>0&&temp>dp[i][m-1]+dp[m][j-1])temp=dp[i][m-1]+dp[m][j-1];\\n                            else if(m==0)temp=dp[0][j-1];//for special cases\\n                        }\\n                    dp[i][j]=temp;\\n                }\\n            }\\n        return dp[0][s.size()-1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        if(s.size()==0)return 0;\\n        vector<vector<int>> dp(s.size(),vector<int>(s.size(),0));\\n        for(int i=s.size()-1;i>=0;i--)\\n            for(int j=i;j<s.size();j++)\\n            {\\n                if(i==j)dp[i][j]=1;\\n                else\\n                {\\n                    int temp=dp[i][j-1]+1,m;\\n                    for(m=j-1;m>=i;m--)\\n                        if(s[m]==s[j])\\n                        {\\n                            if(m>0&&temp>dp[i][m-1]+dp[m][j-1])temp=dp[i][m-1]+dp[m][j-1];\\n                            else if(m==0)temp=dp[0][j-1];//for special cases\\n                        }\\n                    dp[i][j]=temp;\\n                }\\n            }\\n        return dp[0][s.size()-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835864,
                "title": "dart",
                "content": "# Code\\n```\\nimport \\'dart:math\\';\\n\\nclass Solution {\\n  int strangePrinter(String s) {\\n    final N = s.length;\\n    final memo = List.generate(N, (_) => List.filled(N, -1));\\n    \\n    int search(int A, int B) {\\n      if (A > B) return 0;\\n      if (A == B) return 1;\\n      if (memo[A][B] == -1) {\\n        var best = search(A + 1, B) + 1;        \\n        for (int j = A + 1; j <= B; j++) {\\n          if (s[A] == s[j])\\n            best = min(best, search(A + 1, j - 1) + search(j, B));\\n        }        \\n        memo[A][B] = best;\\n      }\\n      return memo[A][B];          \\n    }\\n    \\n    return search(0, N - 1);\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nimport \\'dart:math\\';\\n\\nclass Solution {\\n  int strangePrinter(String s) {\\n    final N = s.length;\\n    final memo = List.generate(N, (_) => List.filled(N, -1));\\n    \\n    int search(int A, int B) {\\n      if (A > B) return 0;\\n      if (A == B) return 1;\\n      if (memo[A][B] == -1) {\\n        var best = search(A + 1, B) + 1;        \\n        for (int j = A + 1; j <= B; j++) {\\n          if (s[A] == s[j])\\n            best = min(best, search(A + 1, j - 1) + search(j, B));\\n        }        \\n        memo[A][B] = best;\\n      }\\n      return memo[A][B];          \\n    }\\n    \\n    return search(0, N - 1);\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3436666,
                "title": "python3-dp-solution-beats-65-8",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor a given string s, we can model the number of turns needed to print s as the number of turns needed to print s up to the last letter, plus a possible extra turn to print the last letter.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Start an array dp, where dp[i][j] represents the number of turns needed to print the substring s[i:j+1]. Initialize all elements of the array to 0.\\n2. Set dp[0][0] = 1, as the first letter by itself will always take only one turn to print.\\n3. Now create a function for the dp loop. The function will take two inputs, i and j, corresponding to the start and end index of the substring we want to calculate.\\n4. If the start index is greater than the end index (i>j), or if we\\'ve already stored the result for this substring (dp[i][j] >0), we can return without doing anything.\\n5. Otherwise, get the result for df(i,j-1), i.e. the number of turns needed to print df[i:j-1]. Assume to begin with that we will need one extra turn to print the letter string[j], giving us an initial guess that the result will be dp[i][j-1]+1. We\\'ll make a variable, \"turns\", to store this result.\\n6. Search through the substring for indices with letters matching the end index (other than the end index itself). If we find one, then we may not need the extra turn, as we may be able to just print the final letter repeatedly and then cover it. When we find such an index, which we\\'ll call k, we can test how many turns we\\'d need to print s[i:k-1] and then s[k+1:j] -- because we know that s[k:j] starts and ends with the same letter, we can assume that we will not need an extra turn for s[k:j] compared to s[k+1:j]. If the combined number of turns needed for this is fewer than the previously calculated minimum number of turns for s[i:j], we set this sum to be the new minimum.\\n7. Once we\\'re done with this, we store the final minimum in the array as dp[i][j].\\n8. We now run this dynamic function with start index i=0 and end index j=len(s)-1. When we\\'re done, the value at dp[0][len(s)-1] will be the minimum number of turns needed to print the entire string.\\n\\n# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        #Start a dict where [i][j]\\n        dp = [[0]*len(s) for _ in range(len(s))]\\n        dp[0][0] = 1\\n\\n        def df(i, j):\\n            if i > j or dp[i][j]: return\\n            \\n            df(i,j-1)\\n            turns = dp[i][j-1] + 1\\n            for k in range(i, j):\\n                if s[k] == s[j]:\\n                    df(i,k-1)\\n                    df(k+1,j)\\n                    turns = min(turns, dp[i][k-1] + dp[k+1][j])\\n                    \\n            dp[i][j] = turns\\n        \\n        df(0,len(s)-1)\\n        return dp[0][len(s)-1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        #Start a dict where [i][j]\\n        dp = [[0]*len(s) for _ in range(len(s))]\\n        dp[0][0] = 1\\n\\n        def df(i, j):\\n            if i > j or dp[i][j]: return\\n            \\n            df(i,j-1)\\n            turns = dp[i][j-1] + 1\\n            for k in range(i, j):\\n                if s[k] == s[j]:\\n                    df(i,k-1)\\n                    df(k+1,j)\\n                    turns = min(turns, dp[i][k-1] + dp[k+1][j])\\n                    \\n            dp[i][j] = turns\\n        \\n        df(0,len(s)-1)\\n        return dp[0][len(s)-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052226,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem is asking for the minimum number of turns that a printer must take to print a given string. The printer can print in one turn, any consecutive substring of the same character.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach used in this code is dynamic programming. The problem is broken down into smaller subproblems and solved using a bottom-up approach. The 2D dp array stores the minimum number of turns required to print the substring s[i:j+1].\\n# Complexity\\n- Time complexity: O(n^3)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n^2)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        if not s:\\n            return 0\\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n        for i in range(n):\\n            dp[i][i] = 1\\n        for i in range(n - 1, -1, -1):\\n            for j in range(i + 1, n):\\n                if s[i] == s[j]:\\n                    dp[i][j] = dp[i][j - 1]\\n                else:\\n                    dp[i][j] = min(dp[i][k] + dp[k + 1][j] for k in range(i, j))\\n        return dp[0][n - 1]\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        if not s:\\n            return 0\\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n        for i in range(n):\\n            dp[i][i] = 1\\n        for i in range(n - 1, -1, -1):\\n            for j in range(i + 1, n):\\n                if s[i] == s[j]:\\n                    dp[i][j] = dp[i][j - 1]\\n                else:\\n                    dp[i][j] = min(dp[i][k] + dp[k + 1][j] for k in range(i, j))\\n        return dp[0][n - 1]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1970648,
                "title": "java-beats-100-00-memory-speed-0ms-april-2022",
                "content": "\\n\\tclass Solution {\\n\\n    public int strangePrinter(String s) {\\n        if (s.equals(\"\")) return 0;\\n        int len = s.length();\\n        int[][] dp = new int[len][len];\\n        for (int i = 0; i < len; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l <= len; l++) {\\n            for (int i = 0; i < len && l + i - 1 < len; i++) {\\n                int j = l + i - 1;\\n                dp[i][j] = dp[i][j - 1] + (s.charAt(i) == s.charAt(j) ? 0 : 1);\\n                for (int k = i + 1; k < j; k++) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k - 1] + dp[k][j - 1]);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][len - 1];\\n    }\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int strangePrinter(String s) {\\n        if (s.equals(\"\")) return 0;\\n        int len = s.length();\\n        int[][] dp = new int[len][len];\\n        for (int i = 0; i < len; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l <= len; l++) {\\n            for (int i = 0; i < len && l + i - 1 < len; i++) {\\n                int j = l + i - 1;\\n                dp[i][j] = dp[i][j - 1] + (s.charAt(i) == s.charAt(j) ? 0 : 1);\\n                for (int k = i + 1; k < j; k++) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k - 1] + dp[k][j - 1]);\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 1885963,
                "title": "python-dfs-with-memoization-detailed-comments",
                "content": "```\\nfrom functools import lru_cache\\n\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        @lru_cache(None)\\n        #min cost to print s[i:j+1]\\n        def dfs(i,j):\\n            if i > j:\\n                return 0\\n            #s[j] is printed with cost 1\\n            ans = dfs(i,j-1)+1\\n            #s[j] is printed with cost 0 due to a previous character that is same as s[j]\\n            #A...A...A\\n            #s[i]...s[j]...s[k]\\n            #in this case, if the optimal case prints all the \"A\" due to the leftmost \"A\",\\n            #then dfs(i,i)+d(i+1,j-1)+d(j+1,k-1) contributes to the answer\\n            #that is, cost 0 can be propagated to the left\\n            for k in range(i,j):\\n                if s[k] == s[j]:\\n                    ans = min(ans, dfs(i,k)+dfs(k+1,j-1))\\n            return ans\\n        return dfs(0,len(s)-1)",
                "solutionTags": [
                    "Python",
                    "Depth-First Search"
                ],
                "code": "```\\nfrom functools import lru_cache\\n\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        @lru_cache(None)\\n        #min cost to print s[i:j+1]\\n        def dfs(i,j):\\n            if i > j:\\n                return 0\\n            #s[j] is printed with cost 1\\n            ans = dfs(i,j-1)+1\\n            #s[j] is printed with cost 0 due to a previous character that is same as s[j]\\n            #A...A...A\\n            #s[i]...s[j]...s[k]\\n            #in this case, if the optimal case prints all the \"A\" due to the leftmost \"A\",\\n            #then dfs(i,i)+d(i+1,j-1)+d(j+1,k-1) contributes to the answer\\n            #that is, cost 0 can be propagated to the left\\n            for k in range(i,j):\\n                if s[k] == s[j]:\\n                    ans = min(ans, dfs(i,k)+dfs(k+1,j-1))\\n            return ans\\n        return dfs(0,len(s)-1)",
                "codeTag": "Java"
            },
            {
                "id": 1861203,
                "title": "python-top-down-iterative-dp-o-n-2-space-and-o-n-3-time-complexity",
                "content": "The idea is that if we meet a character same as the previous one, we don\\'t need new moves because the printer can print them together. For example, steps (\"aa\") = steps(\"a\"). However, if we meet a different character, we have 2 options: option 1: use another step to print that single character, then steps(new string) = steps (old string)+1. \\n\\nOption 2, if this character also appear in the previous string, we can print it together with previous string. For example, \"aabba\", we can print last \"a\" with first 2 a \"aa\", then replace it with the string in the middle. steps (\"aabba\") = steps (\"aa\")+ steps (\"bb\")\\n\\nBut how do we calculate steps for the string in the middle? The idea is that we can use a 2D matrix to store all substrings. More formally, option 2 will become steps[i][j] = steps [k+1][j-1] + steps[i][k], where i means starting index of previous string and new string. Index k+1 means starting index of middle string and j means  the ending index of our new string. Notice that here k is greater than i, therefore we need to iterate form n-1 to 0 instead of 0 to n-1 in order to take pre-computed value steps[k+1][j-1]. \\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n=len(s)\\n        dp=[[0]*n for i in range(n)]\\n\\n        ## i: start point of string\\n        ## j: end point of string\\n        for i in range(n-1,-1,-1):\\n            for j in range(i,n):\\n\\t\\t\\t## if there is single character, it\\'s a base case\\n                if i==j:\\n                    dp[i][j]=1\\n                else:\\n                    if j>=1 and s[j]==s[j-1]:\\n                        dp[i][j]=dp[i][j-1]\\n                    else:\\n                        dp[i][j]=dp[i][j-1]+1\\n                        for k in range(i,j-1):\\n                            if s[k]==s[j]:\\n                                dp[i][j]=min(dp[i][k]+dp[k+1][j-1],dp[i][j])\\n        ##print(\"dp\",dp)\\n        return dp[0][n-1]\\n```",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n=len(s)\\n        dp=[[0]*n for i in range(n)]\\n\\n        ## i: start point of string\\n        ## j: end point of string\\n        for i in range(n-1,-1,-1):\\n            for j in range(i,n):\\n\\t\\t\\t## if there is single character, it\\'s a base case\\n                if i==j:\\n                    dp[i][j]=1\\n                else:\\n                    if j>=1 and s[j]==s[j-1]:\\n                        dp[i][j]=dp[i][j-1]\\n                    else:\\n                        dp[i][j]=dp[i][j-1]+1\\n                        for k in range(i,j-1):\\n                            if s[k]==s[j]:\\n                                dp[i][j]=min(dp[i][k]+dp[k+1][j-1],dp[i][j])\\n        ##print(\"dp\",dp)\\n        return dp[0][n-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1607967,
                "title": "java-dp",
                "content": "This problem is a lot similar to remove boxes . \\n\\n```\\nclass Solution {\\n    HashMap<String,Integer> map = new HashMap<>();\\n    public int strangePrinter(String s) {\\n        return print(s);    \\n    }\\n    \\n    private int print(String str){\\n        if(str.length()==0){\\n            return 0;\\n        }\\n        if(str.length()==1){\\n            return 1;\\n        }\\n        if(map.containsKey(str)){\\n            return map.get(str);\\n        }\\n        char ch = str.charAt(0);\\n        int idx = 0;\\n        while(idx<str.length() && str.charAt(idx)==ch){\\n            idx++;\\n        }\\n        int best = 1+print(str.substring(idx));\\n        for(int i=idx;i<str.length();i++){\\n            if(str.charAt(i)==ch){\\n                best = Math.min(best,print(str.substring(idx,i))+print(str.substring(i)));\\n            }\\n        }\\n        map.put(str,best);\\n        return best;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    HashMap<String,Integer> map = new HashMap<>();\\n    public int strangePrinter(String s) {\\n        return print(s);    \\n    }\\n    \\n    private int print(String str){\\n        if(str.length()==0){\\n            return 0;\\n        }\\n        if(str.length()==1){\\n            return 1;\\n        }\\n        if(map.containsKey(str)){\\n            return map.get(str);\\n        }\\n        char ch = str.charAt(0);\\n        int idx = 0;\\n        while(idx<str.length() && str.charAt(idx)==ch){\\n            idx++;\\n        }\\n        int best = 1+print(str.substring(idx));\\n        for(int i=idx;i<str.length();i++){\\n            if(str.charAt(i)==ch){\\n                best = Math.min(best,print(str.substring(idx,i))+print(str.substring(i)));\\n            }\\n        }\\n        map.put(str,best);\\n        return best;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1277683,
                "title": "javascript-always-100-fast-solution",
                "content": "The considerable calculation has only two cases\\n1. check all the characters separately\\nwhich is value = 1 + check(left+1, right)\\n2. check same characters together\\nFor example s = \\'a..a..\\'\\nwhich is value = check(0, 2) + check(4, 5)\\nIt is very import to understand why it is not 1 + check(1, 3)\\nIf 1 + check(1,3) for s = \\'aaa\\' the value will be 3 instead of 1, \\nso we reduce the string until one is remained if they are all the same characters\\n```\\nvar strangePrinter = function(s) {\\n    let dp = Array(s.length + 1).fill(null).map(a => Array(s.length + 1).fill(-1));\\n\\n    const check = (left, right) => {\\n        if (dp[left][right] > -1) {\\n            return dp[left][right];\\n        }\\n        if (left == right) {\\n            return 1;\\n        } else if (left > right) {\\n            return 0;\\n        }\\n        const target = s[left];\\n        let out = s.length;\\n        for (let i = left; i <= right; i++) {\\n            if (s[i] === target) {\\n                if (i == left) {\\n                    out = 1 + check(left+1, right);\\n                } else {\\n                    out = Math.min(out, check(left, i-1) + check(i+1, right));\\n                }\\n            }\\n        }\\n        dp[left][right] = out;\\n        return out;\\n    };\\n\\n    return check(0, s.length-1)\\n};",
                "solutionTags": [],
                "code": "The considerable calculation has only two cases\\n1. check all the characters separately\\nwhich is value = 1 + check(left+1, right)\\n2. check same characters together\\nFor example s = \\'a..a..\\'\\nwhich is value = check(0, 2) + check(4, 5)\\nIt is very import to understand why it is not 1 + check(1, 3)\\nIf 1 + check(1,3) for s = \\'aaa\\' the value will be 3 instead of 1, \\nso we reduce the string until one is remained if they are all the same characters\\n```\\nvar strangePrinter = function(s) {\\n    let dp = Array(s.length + 1).fill(null).map(a => Array(s.length + 1).fill(-1));\\n\\n    const check = (left, right) => {\\n        if (dp[left][right] > -1) {\\n            return dp[left][right];\\n        }\\n        if (left == right) {\\n            return 1;\\n        } else if (left > right) {\\n            return 0;\\n        }\\n        const target = s[left];\\n        let out = s.length;\\n        for (let i = left; i <= right; i++) {\\n            if (s[i] === target) {\\n                if (i == left) {\\n                    out = 1 + check(left+1, right);\\n                } else {\\n                    out = Math.min(out, check(left, i-1) + check(i+1, right));\\n                }\\n            }\\n        }\\n        dp[left][right] = out;\\n        return out;\\n    };\\n\\n    return check(0, s.length-1)\\n};",
                "codeTag": "Python3"
            },
            {
                "id": 1193348,
                "title": "c-dp-topdown",
                "content": "```\\n int dp[101][101];\\n  int dfs(int i,int j,string &str){\\n    \\n    if(i>j) return 0;\\n    if(i==j) return 1;\\n    if(dp[i][j]!=-1) return dp[i][j];\\n    int ans = 1+dfs(i+1,j,str);\\n    \\n    for(int k=i+1;k<=j;k++){\\n      if(str[i]==str[k]){\\n        ans= min(ans,dfs(i+1,k-1,str)+dfs(k,j,str));\\n        \\n      }\\n    }\\n    \\n    return dp[i][j]= ans;\\n    \\n    \\n  }\\n  \\n    int strangePrinter(string s) {\\n        \\n      string str =\"\";\\n      int n=s.length();\\n      str+=s[0];\\n      for(int i=1;i<n;i++){\\n        if(s[i]==s[i-1]) continue;\\n        str+=s[i];\\n      }\\n      n=str.length();\\n      memset(dp,-1,sizeof(dp));\\n      return dfs(0,n-1,str);\\n      \\n    }\\n\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\n int dp[101][101];\\n  int dfs(int i,int j,string &str){\\n    \\n    if(i>j) return 0;\\n    if(i==j) return 1;\\n    if(dp[i][j]!=-1) return dp[i][j];\\n    int ans = 1+dfs(i+1,j,str);\\n    \\n    for(int k=i+1;k<=j;k++){\\n      if(str[i]==str[k]){\\n        ans= min(ans,dfs(i+1,k-1,str)+dfs(k,j,str));\\n        \\n      }\\n    }\\n    \\n    return dp[i][j]= ans;\\n    \\n    \\n  }\\n  \\n    int strangePrinter(string s) {\\n        \\n      string str =\"\";\\n      int n=s.length();\\n      str+=s[0];\\n      for(int i=1;i<n;i++){\\n        if(s[i]==s[i-1]) continue;\\n        str+=s[i];\\n      }\\n      n=str.length();\\n      memset(dp,-1,sizeof(dp));\\n      return dfs(0,n-1,str);\\n      \\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 904647,
                "title": "o-n-3-memoized-solution-in-python",
                "content": "Runtime Explanation:\\nNo. of unique function calls : i * j == n^2\\nA loop for function call:  n\\nTotal Runtime: O(n^2 * n)  == O(n^3)\\n\\n\\n```\\nclass Solution(object):\\n    \\n    def minCost(self, s, i, j, dp):\\n    \\n        if (i, j) in dp:\\n            return dp[(i, j)]\\n\\n        elif i > j:\\n            return 0\\n\\n        else:        \\n            min_cost = 1 + self.minCost(s, i, j-1, dp)       \\n\\n            for k in range(j-1, i-1, -1):\\n                if s[k] == s[j]:\\n                    min_cost = min(min_cost, self.minCost(s, i, k, dp) + self.minCost(s, k+1, j-1, dp))\\n            dp[(i, j)] = min_cost\\n            return dp[(i, j)]\\n\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        return self.minCost(s, 0, len(s)-1, dict())\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    \\n    def minCost(self, s, i, j, dp):\\n    \\n        if (i, j) in dp:\\n            return dp[(i, j)]\\n\\n        elif i > j:\\n            return 0\\n\\n        else:        \\n            min_cost = 1 + self.minCost(s, i, j-1, dp)       \\n\\n            for k in range(j-1, i-1, -1):\\n                if s[k] == s[j]:\\n                    min_cost = min(min_cost, self.minCost(s, i, k, dp) + self.minCost(s, k+1, j-1, dp))\\n            dp[(i, j)] = min_cost\\n            return dp[(i, j)]\\n\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        return self.minCost(s, 0, len(s)-1, dict())\\n```",
                "codeTag": "Java"
            },
            {
                "id": 626720,
                "title": "java-o-n-3-bottom-up-dp-save-print-s",
                "content": "DP problems always contains many sub-problems. Here in this question, we can define `dp[i][j]` as **the minimun prints needed to make a substring range from `i` to `j` included**. When we need a longer string, we can try to combine the shorter ones. So the dependency order is `substr.length` \\u2192 `substr.length + 1` instead of ragularly `i` \\u2192 `i + 1` and `j` \\u2192 `j + 1`.\\n- `dp[i][i] == 1`, where `i` in `[0, len)`;\\n- When it comes to `dp[i][j]`, we can simply give one more print for `s[j]` and make `dp[i][j] = dp[i][j - 1] + 1`. But can we save it? Here gives a possible way: character we encountered at `i` is equal to that of `j`, then we can just type a sequence of long long `aaa...a` and save the print mentioned above (now `dp[i][j] = dp[i][j-1]` holds).\\n\\t```python\\n\\tindex     i     i + 1    ...    j - 1    j \\n\\tchar      a       ?      ...      ?      a\\n\\t```\\n\\tWithout loss of generality, we may encounter a character the same as `s[j]` in any position `k`. Then we just combine `dp[i][k-1]` and `dp[k][j-1]`.\\n\\t```python\\n\\tindex     i   ...   k - 1   k    ...   j \\n\\tchar      ?   ...     ?     a    ...   a\\n\\t```\\n```java\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if (s.equals(\"\")) return 0;\\n        int len = s.length();\\n        int[][] dp = new int[len][len];\\n        for (int i = 0; i < len; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l <= len; l++) {\\n            for (int i = 0; i < len && l + i - 1 < len; i++) {\\n                int j = l + i - 1;\\n                dp[i][j] = dp[i][j - 1] + (s.charAt(i) == s.charAt(j) ? 0 : 1);\\n                for (int k = i + 1; k < j; k++) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k - 1] + dp[k][j - 1]);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][len - 1];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```python\\n\\tindex     i     i + 1    ...    j - 1    j \\n\\tchar      a       ?      ...      ?      a\\n\\t```\n```python\\n\\tindex     i   ...   k - 1   k    ...   j \\n\\tchar      ?   ...     ?     a    ...   a\\n\\t```\n```java\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if (s.equals(\"\")) return 0;\\n        int len = s.length();\\n        int[][] dp = new int[len][len];\\n        for (int i = 0; i < len; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l <= len; l++) {\\n            for (int i = 0; i < len && l + i - 1 < len; i++) {\\n                int j = l + i - 1;\\n                dp[i][j] = dp[i][j - 1] + (s.charAt(i) == s.charAt(j) ? 0 : 1);\\n                for (int k = i + 1; k < j; k++) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k - 1] + dp[k][j - 1]);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][len - 1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 406918,
                "title": "python-dp-explained",
                "content": "1. Repeated element doesn\\'t affect the final result. We remove all repeated elements.\\n2. dp(i,j) means the result between index i and j. When i>j, it means we want to type and empty string, so it should take 0 steps.\\n3. dp(i,j)=dp(i+1,j)+1 is one possible result. But not necessary the best.\\nBased on this, we select k between i and j, if we see s[k]==s[i], then we can print i~k with value s[i] first, and use dp(i,k-1)+dp(k+1,j) to replace dp(i+1,j). \\n\\n```\\nimport functools\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        s = re.sub(r\\'(.)\\\\1*\\', r\\'\\\\1\\', s)\\n        @functools.lru_cache(None)\\n        def dp(i,j):\\n            if i>j:\\n                return 0\\n            res=dp(i+1,j)+1\\n            for k in range(i+1,j+1):\\n                if s[k]==s[i]:\\n                    res=min(res, dp(i,k-1)+dp(k+1,j))\\n            return res\\n        return dp(0,len(s)-1)\\n```",
                "solutionTags": [],
                "code": "```\\nimport functools\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        s = re.sub(r\\'(.)\\\\1*\\', r\\'\\\\1\\', s)\\n        @functools.lru_cache(None)\\n        def dp(i,j):\\n            if i>j:\\n                return 0\\n            res=dp(i+1,j)+1\\n            for k in range(i+1,j+1):\\n                if s[k]==s[i]:\\n                    res=min(res, dp(i,k-1)+dp(k+1,j))\\n            return res\\n        return dp(0,len(s)-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 106807,
                "title": "java-dp-solution",
                "content": "We start with a string of len *n*. This string can be decomposed to two substrings of len *n-1* and len *1*. There are only two possible start indexes of the substring with len n-1.  If the initial character of two substrings are same, then we can have one less turn. Each substring can be decomposed further until reaching the boundary case, a substring with len 1. \\n\\nSo basically, this DP solution caches all possible decomposition cases from substring of len 1 starting from any possible index.  Then we build the string from the scratch until we are able to build the whole input string. \\n\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if(s.isEmpty()) return 0;\\n        \\n        int[][] dp = new int[100][100];\\n\\n        //boundary case, substring with len 1, i.e. char at each index\\n        for(int i = 0; i < 100; i++){\\n            dp[i][i] = 1;\\n        }\\n        \\n        for(int len = 2; len <= s.length(); len++){\\n            for(int start = 0; start + len <= s.length(); start++){\\n                dp[start][start+len-1] = len;\\n                for(int split = start + 1; split <= start + len -1; split++){\\n                    int result = dp[start][split-1] + dp[split][start + len -1];\\n                    if(s.charAt(start) == s.charAt(split)){\\n                        result --;\\n                    }\\n                    dp[start][start+len-1] = Math.min(result, dp[start][start+len-1]);\\n                }\\n            }\\n        }\\n        \\n        \\n        return dp[0][s.length()-1];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if(s.isEmpty()) return 0;\\n        \\n        int[][] dp = new int[100][100];\\n\\n        //boundary case, substring with len 1, i.e. char at each index\\n        for(int i = 0; i < 100; i++){\\n            dp[i][i] = 1;\\n        }\\n        \\n        for(int len = 2; len <= s.length(); len++){\\n            for(int start = 0; start + len <= s.length(); start++){\\n                dp[start][start+len-1] = len;\\n                for(int split = start + 1; split <= start + len -1; split++){\\n                    int result = dp[start][split-1] + dp[split][start + len -1];\\n                    if(s.charAt(start) == s.charAt(split)){\\n                        result --;\\n                    }\\n                    dp[start][start+len-1] = Math.min(result, dp[start][start+len-1]);\\n                }\\n            }\\n        }\\n        \\n        \\n        return dp[0][s.length()-1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3847147,
                "title": "no-nonsense-clear-code-partition-dp-beats-93",
                "content": "Answer based on partition dp concept.\\n\\nhere at a particualr index, we can either remove that charcter from the String, or we can look for its match in the remaning part of the String.\\n\\nwe take the minimum of the two.\\n\\nrest the code should be self explanatory\\n \\n# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n         return util1(s);\\n    }\\n    int dp[][];\\n\\n    public int util1(String str) {\\n        char arr[] = str.toCharArray();\\n        dp = new int[str.length() + 1][str.length() + 1];\\n        return helper2(arr, 0, arr.length - 1);\\n    }\\n\\n    public int helper2(char arr[], int i, int j) {\\n        if (i > j) {\\n            return 0;\\n        }\\n        if (dp[i][j] != 0) {\\n            return dp[i][j];\\n        }\\n        int ans = helper2(arr, i + 1, j)+1;\\n        for (int a = i + 1; a <= j; a++) {\\n            if (arr[a] == arr[i]) {\\n                int smallAns = helper2(arr, i, a - 1) + helper2(arr, a + 1, j);\\n                ans = Math.min(ans, smallAns);\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n}\\n```\\nyou can check out my github repository where i am uploading famous interview questions topic wise with solutions.\\nlink-- https://github.com/Abhaydutt2003/DataStructureAndAlgoPractice \\nkindly upvote if you like my solution. you can ask doubts below.\\n    \\n",
                "solutionTags": [
                    "Java",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n         return util1(s);\\n    }\\n    int dp[][];\\n\\n    public int util1(String str) {\\n        char arr[] = str.toCharArray();\\n        dp = new int[str.length() + 1][str.length() + 1];\\n        return helper2(arr, 0, arr.length - 1);\\n    }\\n\\n    public int helper2(char arr[], int i, int j) {\\n        if (i > j) {\\n            return 0;\\n        }\\n        if (dp[i][j] != 0) {\\n            return dp[i][j];\\n        }\\n        int ans = helper2(arr, i + 1, j)+1;\\n        for (int a = i + 1; a <= j; a++) {\\n            if (arr[a] == arr[i]) {\\n                int smallAns = helper2(arr, i, a - 1) + helper2(arr, a + 1, j);\\n                ans = Math.min(ans, smallAns);\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840514,
                "title": "go-solution",
                "content": "# Intuition\\nhttps://github.com/ganeshskudva/Leetcode-Golang\\n\\n# Code\\n```\\nfunc strangePrinter(s string) int {\\n\\tvar (\\n\\t\\tsolve func(left, right int) int\\n\\t)\\n\\tmp := make(map[string]int)\\n\\n\\tsolve = func(left, right int) int {\\n\\t\\tif left == right {\\n\\t\\t\\treturn 1\\n\\t\\t}\\n\\t\\tkey := fmt.Sprintf(\"%d-%d\", left, right)\\n\\t\\tif v, ok := mp[key]; ok {\\n\\t\\t\\treturn v\\n\\t\\t}\\n\\n\\t\\tres := math.MaxInt32\\n\\t\\tfor k := left; k < right; k++ {\\n\\t\\t\\tres = min(res, solve(left, k)+solve(k+1, right))\\n\\t\\t}\\n\\n\\t\\tif s[left] == s[right] {\\n\\t\\t\\tres--\\n\\t\\t}\\n\\t\\tmp[key] = res\\n\\t\\treturn mp[key]\\n\\t}\\n\\n\\treturn solve(0, len(s)-1)\\n}\\n\\nfunc min(a, b int) int {\\n\\tif a < b {\\n\\t\\treturn a\\n\\t}\\n\\n\\treturn b\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nfunc strangePrinter(s string) int {\\n\\tvar (\\n\\t\\tsolve func(left, right int) int\\n\\t)\\n\\tmp := make(map[string]int)\\n\\n\\tsolve = func(left, right int) int {\\n\\t\\tif left == right {\\n\\t\\t\\treturn 1\\n\\t\\t}\\n\\t\\tkey := fmt.Sprintf(\"%d-%d\", left, right)\\n\\t\\tif v, ok := mp[key]; ok {\\n\\t\\t\\treturn v\\n\\t\\t}\\n\\n\\t\\tres := math.MaxInt32\\n\\t\\tfor k := left; k < right; k++ {\\n\\t\\t\\tres = min(res, solve(left, k)+solve(k+1, right))\\n\\t\\t}\\n\\n\\t\\tif s[left] == s[right] {\\n\\t\\t\\tres--\\n\\t\\t}\\n\\t\\tmp[key] = res\\n\\t\\treturn mp[key]\\n\\t}\\n\\n\\treturn solve(0, len(s)-1)\\n}\\n\\nfunc min(a, b int) int {\\n\\tif a < b {\\n\\t\\treturn a\\n\\t}\\n\\n\\treturn b\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3840505,
                "title": "java-7ms-dfs-with-memorization-string-compression",
                "content": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        char[] sc = s.toCharArray();\\n        final int n = removeDuplicates(sc);\\n        if (n <= 1)  return n;\\n        return dfs(0, n - 1, sc, new int[n][n]);\\n    }\\n    \\n    \\n    private int dfs(int left, int right, char[] sc, int[][] memo) {\\n        if (left >= right)  return (left == right) ? 1 : 0;\\n        if (memo[left][right] != 0)  return memo[left][right];\\n        int letter = sc[left];\\n        int answer = 1 + dfs(left + 1, right, sc, memo);\\n        for (int k = left + 2; k <= right; k++) \\n            if (sc[k] == letter) \\n                answer = Math.min(answer, dfs(left, k - 1, sc, memo) + dfs(k + 1, right, sc, memo));\\n        return memo[left][right] = answer;\\n    }\\n    \\n    \\n    private int removeDuplicates(char[] sc) {\\n        int scOutIdx = 0;\\n        char prev = 0;\\n        for (char c : sc) {\\n            if (c != prev) {\\n                sc[scOutIdx++] = c;\\n                prev = c;\\n            }\\n        }\\n        return scOutIdx;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        char[] sc = s.toCharArray();\\n        final int n = removeDuplicates(sc);\\n        if (n <= 1)  return n;\\n        return dfs(0, n - 1, sc, new int[n][n]);\\n    }\\n    \\n    \\n    private int dfs(int left, int right, char[] sc, int[][] memo) {\\n        if (left >= right)  return (left == right) ? 1 : 0;\\n        if (memo[left][right] != 0)  return memo[left][right];\\n        int letter = sc[left];\\n        int answer = 1 + dfs(left + 1, right, sc, memo);\\n        for (int k = left + 2; k <= right; k++) \\n            if (sc[k] == letter) \\n                answer = Math.min(answer, dfs(left, k - 1, sc, memo) + dfs(k + 1, right, sc, memo));\\n        return memo[left][right] = answer;\\n    }\\n    \\n    \\n    private int removeDuplicates(char[] sc) {\\n        int scOutIdx = 0;\\n        char prev = 0;\\n        for (char c : sc) {\\n            if (c != prev) {\\n                sc[scOutIdx++] = c;\\n                prev = c;\\n            }\\n        }\\n        return scOutIdx;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840125,
                "title": "iteratively-building-optimal-solution-full-explanations-python-solutions",
                "content": "Denote `strangePrinter = sp`\\n\\nHere are some observations that can be made. I am stating them without proof since I feel they are somewhat intuitive and it\\'s probably unlikely to come up with a proof for all these properties within a 45 min interview.\\n1. We can work with a compressed string. e.g. `sp(\"aabb\") == sp(\"ab\")`. This should hopefully be obvious given the fact that the printer can print as much as needed. From this point forward, when I mention `s`, I am mentioning the compressed string `s` and not the input string `s`. I will specify otherwise if needed.\\n2. If we decide to print a char `c`, we should print `j-i+1` `c`\\'s where `s[i] == s[j] == c`. The main idea here is if we need to print `s = \"ab\"`, we don\\'t need to consider printing `\"aa\"`. It **could lead to an optimal solution** but considering printing only `\"a\"` will also lead to **an optimal solution**.\\n3. Always perform prints by reading characters from left to right. E.g. for `s = \"abc\"`, start by printing `\"a\"`. The permutations in which you print characters should not affect the result of `sp(s)`.\\n\\nMost people probably figured out that there is some recursive relationship or divide-and-conquer relationship. I will describe the **incorrect relationship** I first derived which I think many people also derived initially. \\n\\nAn intuitive **yet incorrect** approach is to define `f(low, high) = minimal prints needed to print s[low:high+1]`. Suppose we work with `s = \"abaca\"`. We call `sp(\"abaca\") = f(0,4)`. By observation 3, we will print `a`\\'s first. In this case, it is optimal to print `\"aaaaa\"`. After doing so, what exactly do we recurse on? My initial thought is to recurse on `\"bac\"` since the first and last `\"a\"` in `s` are correctly printed. Let\\'s not worry about the exact recursive relationship here since anything you can come up with for this definition of `f` will be wrong (and I will explain why). This is just a demo incorrect relationship. \\n\\nWhen we recurse, we will call `sp(\"bac\") = f(1,3)`. Assuming `sp` and `f` are correct, we will return `3`. The result is `sp(\"abaca\") = 1 + sp(\"bac\") = 1 + 3 = 4`. But this is clearly wrong since we printed `\"aaaaa\"` and we want to form `\"abaca\"`. In particular, the middle `\"a\"` has already been printed which means we only need `3` prints. The main issue of just considering `f(low, high) = sp(s[low:high+1])`  is we do not consider previously printed characters in the `[low, high]` interval which could help avoid duplicate prints. Thus, as I mentioned above, any recursive function (naively) involving only `low` and `high` that **does not (implicitly or explicitly) keep track of the previously printed character in `[low, high]`** will always be wrong. It most likely overcounts. \\n\\nLet\\'s redefine our solution then. Let `f(low, high, prev_printed_char) = minimal prints needed to print s[low:high+1] given that s[low:high+1] = prev_printed_char * (high - low + 1)`. For instance, we could represent the previous issue we faced as `f(low, high, \"a\")` (where `low` and `high` are indices of `\"bac\"` in `s`). This is helpful since we recognize that the middle `\"a\"` is already correctly printed since `\"a\"` is the `prev_printed_char`.\\n\\nHere are some more observations that can be made. (These are observations 4 and 5 but Leetcode doesn\\'t seem to support numbered bullets starting from 4).\\n1. If `s[high] == prev_printed_char`, then `f(low, high, prev_printed_char) = f(low, high-1, prev_printed_char)`. For instance, if we want to print `\"xya\"` and currently printed `\"aaa\"`, it suffices to consider printing `\"xy\"` given we have printed `\"aa\"`. \\n2. Similarly if `s[low] == prev_printed_char`, then `f(low, high, prev_printed_char) = f(low + 1, high, prev_printed_char)`.\\n\\n**Base Cases**\\n- ` low > high`: return 0 since we are trying to print an empty string.\\n- ` low == high`: return `0` if `s[low] == prev_printed_char` else `1`. This should be fairly easy to understand. It is similar to observation 4 and 5 made but for 1 character left.\\n\\n**Recursive Cases**\\n- Use observation 4 and 5 and iterate `high` backwards and `low` forward as necessary. Note that these increments or decrements can occur exactly zero or one time(s) due to `s` being compressed. In particular, increments and decrements will not occur more than once. \\n- At this point, `s[low] != prev_printed_char` and `s[high]  != prev_printed_char`.\\n- Iterate `mid = low,..., high` and find indices such that `s[mid] == s[low]`. Note that we are attempting to print a sequence of `s[low]`\\'s (observation 3) and we want to print from indices `low` to `mid` inclusive (observation 2). \\n- Iterate through `mid=low,...,high` and find indices such that `s[mid] == s[low]`. Compute \\n`1 + f(low + 1, mid - 1, s[low]) + f(mid+1, high, prev_printed_char)` and take the minimum of the computed value with the running minimum number of prints.\\n\\nLet\\'s briefly explain the recursive relationship and some variants it could have.\\n- `1`  represents the cost of printing a sequence of `s[low]`s (from `low` to `mid` inclusive).\\n- `f(low + 1, mid-1, s[low])` represents minimal prints to print `s[low+1:mid]` given we printed `s[low]`s from `low` to `mid` inclusive. We increment `low+1` since `s[low]` is handled by the print and similarly, we decrement `mid-1`. A variation we could have here is just `f(low, mid, s[low])` and have the recursion use observation 4 and 5 to help handle incrementing `low` and decrementing `mid`. It\\'s your choice what you want to write but both work.\\n- Note that we still need to print `s[mid+1:high+1]` but the previously printed character is unchanged since we only printed `s[low]`\\'s from `low` to `mid` inclusive. Thus, we can call `f(mid+1, high, prev_printed_char)`. \\n\\nThis leads us to our first solution. Runtimes on leetcode don\\'t really matter but I will include them for some **(potentially unreliable) benchmarking to compare and contrast the solutions I provide**. The first solution\\'s runtime beats around 90% of solutions. Also note the solution is memoized (without explanation) since I am assuming you are familiar with memoization. Otherwise, it probably doesn\\'t make sense to work through this problem as your gateway or introduction to DP.\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        compressed_s = \"\".join([s[i] for i in range(len(s)) if i == 0 or s[i] != s[i-1]])\\n        \\n        memo = {}\\n        def solve(low: int, high: int, prev_printed_char: str) -> int:\\n            # Check to avoid indexing errors\\n            if low > high:\\n                return 0\\n            \\n            # Observation 4 and 5. Avoid wasting prints.\\n            if compressed_s[low] == prev_printed_char:\\n                low += 1\\n            if compressed_s[high] == prev_printed_char:\\n                high -= 1\\n            \\n            # Base cases and memoization.\\n            if low > high:\\n                return 0\\n            if low == high:\\n                return int(compressed_s[low] != prev_printed_char) \\n            if (low, high, prev_printed_char) in memo:\\n                return memo[low, high, prev_printed_char]\\n            \\n            # Recursive case \\n\\t\\t\\t# 100 chars requires at most 100 prints\\n            min_prints = 100\\n            for mid in range(low, high + 1):\\n                if compressed_s[low] == compressed_s[mid]:\\n\\t\\t\\t\\t\\t# min_prints = min(min_prints, 1 + solve(low, mid, compressed_s[low]) + solve(mid + 1, high, prev_printed_char))\\n                    min_prints = min(min_prints, 1 + solve(low + 1, mid - 1, compressed_s[low]) + solve(mid + 1, high, prev_printed_char))\\n            memo[low, high, prev_printed_char] = min_prints \\n            return min_prints\\n        \\n        # didn\\'t print anything previously. Use \" \" representing nothing being previously printed.\\n        return solve(0, len(compressed_s) - 1, \" \")\\n```\\n\\nThe next optimization we can make is the iteration of `mid=low,...,high`. We are wasting some time iterating through all these characters. We can precompute `successor[i] = j` to represent `j` being the minimal index to satisfy `compressed_s[j] == compressed_s[i]` and `j > i`. This will be able to reduce some iterations. We will use `100` to represent no successor (since no string is longer than 100).\\n\\nThus, we now have our second solution which beats around 95% of solutions. This is expected since the second solution should be slightly faster than the first solution.\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        compressed_s = \"\".join([s[i] for i in range(len(s)) if i == 0 or s[i] != s[i-1]])\\n\\t\\t\\n\\t\\t# Hopefully, this isn\\'t too hard to understand. But previous_index[char] represents\\n\\t\\t# the previous index where char was spotted. And for each compressed_s[j] (char), \\n\\t\\t# if compressed_s[j] (char) is in previous_index, previous_index[char] is the i described\\n\\t\\t# above and j is the j described above.\\n        successor = [100 for _ in range(len(compressed_s))]\\n        previous_index = {}\\n        for j, char in enumerate(compressed_s):\\n            if char in previous_index:\\n                successor[previous_index[char]] = j \\n            previous_index[char] = j\\n        \\n        memo = {}\\n        def solve(low: int, high: int, prev_printed_char: str) -> int:\\n            # Check to avoid indexing errors\\n            if low > high:\\n                return 0\\n            \\n            # Observation 4 and 5. Avoid wasting prints.\\n            if compressed_s[low] == prev_printed_char:\\n                low += 1\\n            if compressed_s[high] == prev_printed_char:\\n                high -= 1\\n            \\n            # Base cases and memoization.\\n            if low > high:\\n                return 0\\n            if low == high:\\n                return int(compressed_s[low] != prev_printed_char) \\n            if (low, high, prev_printed_char) in memo:\\n                return memo[low, high, prev_printed_char]\\n            \\n            # Recursive case \\n\\t\\t\\tmin_prints = 100\\n            mid = low\\n            while mid <= high:\\n                min_prints = min(min_prints, 1 + solve(low + 1, mid - 1, compressed_s[low]) + solve(mid + 1, high, prev_printed_char))\\n                mid = successor[mid]\\n            memo[low, high, prev_printed_char] = min_prints \\n            return min_prints\\n        \\n        # didn\\'t print anything previously. Use \" \" representing nothing.\\n        return solve(0, len(compressed_s) - 1, \" \")\\n```\\n\\nThe runtime is `O(26 * n^3)` since there are `O(26n^2)` states and each state does at most `O(n)` work (looping through `mid`). I am aware that this is Big-O but I am intentionally including the constant. We have 1 final optimization to work towards. We will shave the constant off the runtime and make a `O(n^3)` solution. **Spoiler**: the `26` constant is actually a very loose constant.\\n\\nHow should we do this? As I mentioned in the incorrect solution section, it does not suffice for a state to keep track of the previously printed characters in the interval `[low, high]`. To reduce to a `O(n^3)` solution means that the state `(low, high)` must **implicitly capture the previously printed character in the interval `[low, high]`** as a part of the state.\\n\\nTo do this, we can play some smart tricks. First, we add an empty space (`\" \"`) to the end of `compressed_s`. Then, redefine `f(low, high) = minimal prints to print s[low:high+1]` given all characters in the interval `[low,high]` are `s[high + 1]`. Hopefully, the empty space added at the end of `compressed_s` now makes sense. It simply represents that nothing has ever been printed to the interval `[1,len(compressed_s)-2]` (i.e. `compressed_s` without the `\" \"`). \\n\\nLet\\'s work out how the recursion works in this case and in the process explain why the compression of state even works. \\n\\n**Base Case**\\n- Not much changes.\\n- However, we let `s[high+1]` play the role of `prev_printed_char`. \\n\\n**Recursive Case**\\n- Not much changes. \\n- However, we let `s[high+1]` play the role of `prev_printed_char`.\\n- Also, where we had the freedom to call `solve(low + 1, mid - 1, compressed_s[low])` versus `solve(low, mid, compressed_s[low])` (in solution 2). If you forgot why this is the case, this is because we can code observation 4 and 5 or rely on the recursion to do the work. But now, we must call we must now call `solve(low + 1, mid - 1)` or `solve(low, mid-1)` to indicate that the characters in interval `[low+1,mid-1]` are `compressed_s[mid-1+1] = compressed_s[mid]` (where `compressed_s[mid] == compressed_s[low]`). \\n- If we decided to call `solve(*, mid)` (where `* = low + 1` or `low`), this would mean the interval `[*,mid]` is printed with `s[mid+1]` which is absolutely incorrect (since adversarially `s[mid+1] != s[mid]` but we printed / filled the interval `[low, mid]` with character `s[low] == s[mid]`. \\n\\nThe other changes are simpler to understand and I left some comments in the code. Let\\'s see the code for the third solution. \\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        # CHANGE: add space after compressed_s\\n        compressed_s_list = [s[i] for i in range(len(s)) if i == 0 or s[i] != s[i-1]]\\n        compressed_s_list.append(\" \")\\n        compressed_s = \"\".join(compressed_s_list)\\n        \\n        # CHANGE: change to 101 to be safe since compressed_s could have 101 chars \\n        successor = [101 for _ in range(len(compressed_s))]\\n        previous_index = {}\\n        for j, char in enumerate(compressed_s):\\n            if char in previous_index:\\n                successor[previous_index[char]] = j \\n            previous_index[char] = j\\n        \\n        memo = {}\\n        def solve(low: int, high: int) -> int:\\n            if low > high:\\n                return 0\\n            \\n            # CHANGE: s[high + 1] is previously printed character.\\n            prev_printed_char = compressed_s[high + 1]\\n            if compressed_s[low] == prev_printed_char:\\n                low += 1\\n            if compressed_s[high] == prev_printed_char:\\n                high -= 1\\n            \\n            if low > high:\\n                return 0\\n            if low == high:\\n                return int(compressed_s[low] != prev_printed_char) \\n            if (low, high) in memo:\\n                return memo[low, high]\\n            \\n            min_prints = 100\\n            mid = low\\n            while mid <= high:\\n                # CHANGE: We must call solve(low + 1, mid - 1) (or solve(low, mid - 1) and rely on \\n                # observation 4 and 5). This is to indicate that the previously printed character \\n                # in [low, mid-1] (or [low+1, mid-1]) is compressed_s[mid - 1 + 1] == compressed_s[mid] \\n                # == compressed_s[low]. And, solve(mid + 1, high) is called since the printed characters\\n                # in [mid+1, high] do not change (it is still compressed_s[high+1])\\n                min_prints = min(min_prints, 1 + solve(low + 1, mid - 1) + solve(mid + 1, high))\\n                mid = successor[mid]\\n            memo[low, high] = min_prints \\n            return min_prints\\n        \\n        # CHANGE: Essentially count number of ways to print compressed_s[:len(compressed_s)-1] (i.e. no \" \")\\n        # given [0, len(compressed_s)-2] is filled with empty spaces (i.e. no prints) since \\n        # compressed_s[len(compressed)-2+1] = compressed_s[len(compressed)-1] = compressed_s[-1] = \" \".\\n        return solve(0, len(compressed_s) - 2)\\n```\\n\\nSo, here\\'s the surprise for you (answering the **spoiler** above). This solution also just beats 94% of solutions. My guess is that the second solution essentially explores the same states as the third solution but it just looks to have that extra factor of `26`. As a result, I much prefer the second (and even the first) solution compared to the third solution as it represents the actual states and transitions of the printing mechanisms. With this said, the third solution looks really clean though (with the comments removed).\\n\\nLastly, a question you might ask is why append `\" \"` to the end of the compressed string as opposed to the front of the string. This is mainly done because for the right slice / substring (`f(mid + 1, high)`), the character filling up the interval `[mid + 1, high]` is `s[high+1]` and not necessarily `s[mid+1-1] = s[mid]` (again, adversarially `s[mid] != s[high+1]`). Thus, it is not a good idea to append `\" \"` to the beginning of the compressed string as the divide step or recursive calls won\\'t \"make sense\"\\n\\nIf you made it this far, I hope you enjoyed reading this and found it helpful! I think most solutions posted jump straight to the third solution or some solution that involves negative costs (`-1`) to print which is extremely hard to grasp. I hope this helps out people a bit. If you found it helpful, feel free to upvote :)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        compressed_s = \"\".join([s[i] for i in range(len(s)) if i == 0 or s[i] != s[i-1]])\\n        \\n        memo = {}\\n        def solve(low: int, high: int, prev_printed_char: str) -> int:\\n            # Check to avoid indexing errors\\n            if low > high:\\n                return 0\\n            \\n            # Observation 4 and 5. Avoid wasting prints.\\n            if compressed_s[low] == prev_printed_char:\\n                low += 1\\n            if compressed_s[high] == prev_printed_char:\\n                high -= 1\\n            \\n            # Base cases and memoization.\\n            if low > high:\\n                return 0\\n            if low == high:\\n                return int(compressed_s[low] != prev_printed_char) \\n            if (low, high, prev_printed_char) in memo:\\n                return memo[low, high, prev_printed_char]\\n            \\n            # Recursive case \\n\\t\\t\\t# 100 chars requires at most 100 prints\\n            min_prints = 100\\n            for mid in range(low, high + 1):\\n                if compressed_s[low] == compressed_s[mid]:\\n\\t\\t\\t\\t\\t# min_prints = min(min_prints, 1 + solve(low, mid, compressed_s[low]) + solve(mid + 1, high, prev_printed_char))\\n                    min_prints = min(min_prints, 1 + solve(low + 1, mid - 1, compressed_s[low]) + solve(mid + 1, high, prev_printed_char))\\n            memo[low, high, prev_printed_char] = min_prints \\n            return min_prints\\n        \\n        # didn\\'t print anything previously. Use \" \" representing nothing being previously printed.\\n        return solve(0, len(compressed_s) - 1, \" \")\\n```\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        compressed_s = \"\".join([s[i] for i in range(len(s)) if i == 0 or s[i] != s[i-1]])\\n\\t\\t\\n\\t\\t# Hopefully, this isn\\'t too hard to understand. But previous_index[char] represents\\n\\t\\t# the previous index where char was spotted. And for each compressed_s[j] (char), \\n\\t\\t# if compressed_s[j] (char) is in previous_index, previous_index[char] is the i described\\n\\t\\t# above and j is the j described above.\\n        successor = [100 for _ in range(len(compressed_s))]\\n        previous_index = {}\\n        for j, char in enumerate(compressed_s):\\n            if char in previous_index:\\n                successor[previous_index[char]] = j \\n            previous_index[char] = j\\n        \\n        memo = {}\\n        def solve(low: int, high: int, prev_printed_char: str) -> int:\\n            # Check to avoid indexing errors\\n            if low > high:\\n                return 0\\n            \\n            # Observation 4 and 5. Avoid wasting prints.\\n            if compressed_s[low] == prev_printed_char:\\n                low += 1\\n            if compressed_s[high] == prev_printed_char:\\n                high -= 1\\n            \\n            # Base cases and memoization.\\n            if low > high:\\n                return 0\\n            if low == high:\\n                return int(compressed_s[low] != prev_printed_char) \\n            if (low, high, prev_printed_char) in memo:\\n                return memo[low, high, prev_printed_char]\\n            \\n            # Recursive case \\n\\t\\t\\tmin_prints = 100\\n            mid = low\\n            while mid <= high:\\n                min_prints = min(min_prints, 1 + solve(low + 1, mid - 1, compressed_s[low]) + solve(mid + 1, high, prev_printed_char))\\n                mid = successor[mid]\\n            memo[low, high, prev_printed_char] = min_prints \\n            return min_prints\\n        \\n        # didn\\'t print anything previously. Use \" \" representing nothing.\\n        return solve(0, len(compressed_s) - 1, \" \")\\n```\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        # CHANGE: add space after compressed_s\\n        compressed_s_list = [s[i] for i in range(len(s)) if i == 0 or s[i] != s[i-1]]\\n        compressed_s_list.append(\" \")\\n        compressed_s = \"\".join(compressed_s_list)\\n        \\n        # CHANGE: change to 101 to be safe since compressed_s could have 101 chars \\n        successor = [101 for _ in range(len(compressed_s))]\\n        previous_index = {}\\n        for j, char in enumerate(compressed_s):\\n            if char in previous_index:\\n                successor[previous_index[char]] = j \\n            previous_index[char] = j\\n        \\n        memo = {}\\n        def solve(low: int, high: int) -> int:\\n            if low > high:\\n                return 0\\n            \\n            # CHANGE: s[high + 1] is previously printed character.\\n            prev_printed_char = compressed_s[high + 1]\\n            if compressed_s[low] == prev_printed_char:\\n                low += 1\\n            if compressed_s[high] == prev_printed_char:\\n                high -= 1\\n            \\n            if low > high:\\n                return 0\\n            if low == high:\\n                return int(compressed_s[low] != prev_printed_char) \\n            if (low, high) in memo:\\n                return memo[low, high]\\n            \\n            min_prints = 100\\n            mid = low\\n            while mid <= high:\\n                # CHANGE: We must call solve(low + 1, mid - 1) (or solve(low, mid - 1) and rely on \\n                # observation 4 and 5). This is to indicate that the previously printed character \\n                # in [low, mid-1] (or [low+1, mid-1]) is compressed_s[mid - 1 + 1] == compressed_s[mid] \\n                # == compressed_s[low]. And, solve(mid + 1, high) is called since the printed characters\\n                # in [mid+1, high] do not change (it is still compressed_s[high+1])\\n                min_prints = min(min_prints, 1 + solve(low + 1, mid - 1) + solve(mid + 1, high))\\n                mid = successor[mid]\\n            memo[low, high] = min_prints \\n            return min_prints\\n        \\n        # CHANGE: Essentially count number of ways to print compressed_s[:len(compressed_s)-1] (i.e. no \" \")\\n        # given [0, len(compressed_s)-2] is filled with empty spaces (i.e. no prints) since \\n        # compressed_s[len(compressed)-2+1] = compressed_s[len(compressed)-1] = compressed_s[-1] = \" \".\\n        return solve(0, len(compressed_s) - 2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839612,
                "title": "python-beats-100-time-and-space",
                "content": "# Intuition\\nTo find the minimum number of turns the printer needed to print the given string with the provided properties, we can use a dynamic programming approach.\\n\\n# Approach\\n\\n\\n- We define the function `minTurns(s)` which takes a string `s` as input.\\n- `n = len(s)` calculates the length of the input string `s`.\\n- `dp = [[0] * n for _ in range(n)]` initializes a 2D DP (Dynamic Programming) table with `n` rows and `n` columns, where `dp[i][j]` will store the minimum number of turns needed to print the substring `s[i:j+1]` (inclusive) using the given printer properties.\\n\\n- This loop initializes the diagonal elements of the DP table. Since printing a single character requires one turn, `dp[i][i]` is set to 1 for all `i`.\\n\\n- The outer loop (`length` loop) iterates over all possible lengths of substrings, starting from 2 and going up to the length of the input string (`n`).\\n- The inner loop (`i` loop) iterates over all possible starting indices of substrings.\\n- For each combination of `length` and `i`, we calculate the ending index `j` based on the starting index and length.\\n- `dp[i][j]` is initialized to `1 + dp[i + 1][j]`, which represents the minimum number of turns needed to print the substring `s[i:j+1]` separately (i.e., printing `s[i]` as a single character).\\n- This loop iterates over all possible split points `k` within the substring `s[i:j+1]`.\\n- If the character at index `i` is the same as the character at index `k`, it means we can merge the substring `s[i:k+1]` into a single character printing.\\n- If `k` is right after `i` (i.e., `k == i + 1`), we only need to consider merging the characters `s[i]` and `s[k]`, so we update `dp[i][j]` to be the minimum of its current value and `dp[k][j]`.\\n- Otherwise, if `k` is not immediately after `i`, we consider merging `s[i:k+1]` and then recursively calculate the turns needed for the remaining substring `s[k+1:j+1]`, which is represented as `dp[i + 1][k - 1] + dp[k][j]`. We update `dp[i][j]` to be the minimum of its current value and this calculated value.\\n\\n- Finally, we return the value stored in `dp[0][n - 1]`, which represents the minimum number of turns needed to print the entire input string `s`.\\n\\n# Complexity\\n- Time complexity:\\nO(n^2).\\n\\n- Space complexity:\\nO(n^2).\\n\\n# Code\\n```\\nclass Solution(object):\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n\\n        # Initialize diagonal elements\\n        for i in range(n):\\n            dp[i][i] = 1\\n\\n        for length in range(2, n + 1):\\n            for i in range(n - length + 1):\\n                j = i + length - 1\\n                dp[i][j] = 1 + dp[i + 1][j]  # Printing s[i] separately\\n\\n                for k in range(i + 1, j + 1):\\n                    if s[i] == s[k]:\\n                        if k == i + 1:\\n                            dp[i][j] = min(dp[i][j], dp[k][j])  # Merge s[i:k+1] into single character printing\\n                        else:\\n                            dp[i][j] = min(dp[i][j], dp[i + 1][k - 1] + dp[k][j])  # Merge s[i:k+1] into single character printing\\n\\n        return dp[0][n - 1]\\n\\n\\n```\\n\\n# **PLEASE DO UPVOTE!!!\\uD83E\\uDD79**",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution(object):\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        \\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n\\n        # Initialize diagonal elements\\n        for i in range(n):\\n            dp[i][i] = 1\\n\\n        for length in range(2, n + 1):\\n            for i in range(n - length + 1):\\n                j = i + length - 1\\n                dp[i][j] = 1 + dp[i + 1][j]  # Printing s[i] separately\\n\\n                for k in range(i + 1, j + 1):\\n                    if s[i] == s[k]:\\n                        if k == i + 1:\\n                            dp[i][j] = min(dp[i][j], dp[k][j])  # Merge s[i:k+1] into single character printing\\n                        else:\\n                            dp[i][j] = min(dp[i][j], dp[i + 1][k - 1] + dp[k][j])  # Merge s[i:k+1] into single character printing\\n\\n        return dp[0][n - 1]\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839429,
                "title": "java-easy-solution-matrix-chain-multiplication-mcm",
                "content": "\\n# Complexity\\n- Time/Space complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    int dp[][];\\n    public int strangePrinter(String s) {\\n        char arr[] = s.toCharArray();\\n        int n = s.length();\\n        dp = new int[n][n];\\n        return f(0,s.length()-1, arr);\\n    }\\n    int f(int i, int j, char []arr){\\n        if(i>j) return 0; \\n        if(i==j) return 1;\\n        if(dp[i][j]!=0) return dp[i][j];\\n        int val = 1 + f(i+1,j,arr);\\n        for(int x=i+1; x<=j; x++){\\n            if(arr[x]==arr[i]){\\n                int v = f(i,x-1,arr)+f(x+1,j,arr);\\n                val = Math.min(val,v);\\n            }\\n        }\\n        return dp[i][j] = val;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    int dp[][];\\n    public int strangePrinter(String s) {\\n        char arr[] = s.toCharArray();\\n        int n = s.length();\\n        dp = new int[n][n];\\n        return f(0,s.length()-1, arr);\\n    }\\n    int f(int i, int j, char []arr){\\n        if(i>j) return 0; \\n        if(i==j) return 1;\\n        if(dp[i][j]!=0) return dp[i][j];\\n        int val = 1 + f(i+1,j,arr);\\n        for(int x=i+1; x<=j; x++){\\n            if(arr[x]==arr[i]){\\n                int v = f(i,x-1,arr)+f(x+1,j,arr);\\n                val = Math.min(val,v);\\n            }\\n        }\\n        return dp[i][j] = val;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839413,
                "title": "recursion-solution-tabulation-mcm-pattern-partition-dp-simple-code-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\no(n^3)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nRECURSION \\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n, -1));\\n        return solve(0, n - 1, s, dp);\\n    }\\n\\nprivate:\\n    int solve(int i, int j, const string& s, vector<vector<int>>& dp) {\\n        if (i == j)\\n            return 1;\\n\\n        if (dp[i][j] != -1)\\n            return dp[i][j];\\n\\n        int mini = INT_MAX;\\n\\n        for (int k = i; k < j; k++) {\\n            int steps = solve(i, k, s, dp) + solve(k + 1, j, s, dp);\\n            mini = min(steps, mini);\\n        }\\n\\n        if (s[i] == s[j])\\n            mini--;\\n\\n        return dp[i][j] = mini;\\n    }\\n};\\n```\\nTABULATION \\n```\\nint strangePrinter(string s) {\\n    int n = s.size();\\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\\n\\n    for (int i = 0; i < n; i++) {\\n        dp[i][i] = 1;\\n    }\\n\\n    for (int i = n - 1; i >= 0; i--) {\\n       \\n       for (int j = i + 1; j <= n; j++) {\\n            \\n          int mini = INT_MAX;\\n           \\n               for (int k = i; k < j; k++) {\\n                  int steps = dp[i][k] + dp[k + 1][j];\\n                  mini = min(steps, mini);\\n              }\\n\\n            if (s[i] == s[j])\\n                mini--;\\n                \\n            dp[i][j] = mini;\\n        }\\n    }\\n\\n    return dp[0][n];\\n}\\n\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n, -1));\\n        return solve(0, n - 1, s, dp);\\n    }\\n\\nprivate:\\n    int solve(int i, int j, const string& s, vector<vector<int>>& dp) {\\n        if (i == j)\\n            return 1;\\n\\n        if (dp[i][j] != -1)\\n            return dp[i][j];\\n\\n        int mini = INT_MAX;\\n\\n        for (int k = i; k < j; k++) {\\n            int steps = solve(i, k, s, dp) + solve(k + 1, j, s, dp);\\n            mini = min(steps, mini);\\n        }\\n\\n        if (s[i] == s[j])\\n            mini--;\\n\\n        return dp[i][j] = mini;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839224,
                "title": "dp-memo-to-tabulation",
                "content": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int[][] dp = new int[s.length()][s.length()];\\n        return find(s.toCharArray(), dp, 0, s.length() - 1);\\n    }\\n\\n    public int find(char[] s, int[][] dp, int i, int j) {\\n        if (i == j) return dp[i][j] = 1;\\n        if (dp[i][j] != 0) return dp[i][j];\\n        int min = Integer.MAX_VALUE;\\n        for (int p_Index = i; p_Index < j; p_Index++) {\\n            min = Math.min(find(s, dp, i, p_Index) + find(s, dp, p_Index + 1, j) - (s[p_Index] == s[j] ? 1 : 0),\\n                    min);\\n        }\\n        return dp[i][j] = min;\\n    }\\n}\\n//tabulation\\n\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int[][] dp = new int[s.length()][s.length()];\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            for (int j = 0; j <= s.length() - 1; j++) {\\n                if (i == j) dp[i][j] = 1;\\n                else {\\n                    int min = Integer.MAX_VALUE;\\n                    for (int pIndex = i; pIndex < j; pIndex++) {\\n                        min = Math.min(dp[i][pIndex] + dp[pIndex + 1][j] -\\n                                (s.charAt(pIndex) == s.charAt(j) ? 1 : 0), min);\\n                    }\\n                    dp[i][j] = min;\\n                }\\n            }\\n        }\\n        return dp[0][s.length() - 1];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int[][] dp = new int[s.length()][s.length()];\\n        return find(s.toCharArray(), dp, 0, s.length() - 1);\\n    }\\n\\n    public int find(char[] s, int[][] dp, int i, int j) {\\n        if (i == j) return dp[i][j] = 1;\\n        if (dp[i][j] != 0) return dp[i][j];\\n        int min = Integer.MAX_VALUE;\\n        for (int p_Index = i; p_Index < j; p_Index++) {\\n            min = Math.min(find(s, dp, i, p_Index) + find(s, dp, p_Index + 1, j) - (s[p_Index] == s[j] ? 1 : 0),\\n                    min);\\n        }\\n        return dp[i][j] = min;\\n    }\\n}\\n//tabulation\\n\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int[][] dp = new int[s.length()][s.length()];\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            for (int j = 0; j <= s.length() - 1; j++) {\\n                if (i == j) dp[i][j] = 1;\\n                else {\\n                    int min = Integer.MAX_VALUE;\\n                    for (int pIndex = i; pIndex < j; pIndex++) {\\n                        min = Math.min(dp[i][pIndex] + dp[pIndex + 1][j] -\\n                                (s.charAt(pIndex) == s.charAt(j) ? 1 : 0), min);\\n                    }\\n                    dp[i][j] = min;\\n                }\\n            }\\n        }\\n        return dp[0][s.length() - 1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838957,
                "title": "recusive-function-c-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    int f(int i, int j, string& s){       \\n        if (dp[i][j]!=-1) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int ans;\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        else{\\n            ans=f(i,j-1, s)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        n=s.size();\\n        dp.assign(n, vector<int>(n, -1));\\n        return f(0, n-1, s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    int f(int i, int j, string& s){       \\n        if (dp[i][j]!=-1) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int ans;\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        else{\\n            ans=f(i,j-1, s)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        n=s.size();\\n        dp.assign(n, vector<int>(n, -1));\\n        return f(0, n-1, s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838580,
                "title": "c-beginner-friendly-memoization-clearest-explanation-video-codestorywithmik",
                "content": "YouTube Video Link - [Strange Printer](https://www.youtube.com/watch?v=pV3arpA0TzY)\\nMy Github treasure - [Strange Printer](https://github.com/MAZHARMIK/Interview_DS_Algo/blob/master/DP/Strange%20Printer.cpp)\\n\\n```\\n//Approach-1 (Recursion + Memoization)\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> t;\\n    \\n    int solve(int l, int r, string& s){\\n        if(l == r)\\n            return 1;\\n        \\n        else if(l > r)\\n            return 0;\\n        \\n        if(t[l][r] != -1)\\n            return t[l][r];\\n\\n\\n        int i = l+1;\\n        while(i <= r && s[i] == s[l])\\n            i++;\\n\\n        if(i == r+1)\\n            return 1;\\n\\n        int normal = 1 + solve(i,r,s);\\n\\n        int aage_ka = INT_MAX;\\n\\n        for(int j = i; j <= r; j++){\\n            if(s[l] == s[j]){\\n                \\n                int x = solve(i,j-1,s) + solve(j,r,s);\\n                \\n                aage_ka = min(aage_ka, x);\\n            }\\n        }\\n\\n        return t[l][r] = min(aage_ka, normal);\\n    }\\n\\n    int strangePrinter(string s) {\\n        n = s.length() ;\\n        \\n        t.resize(n,vector<int>(n+1, -1));\\n        \\n        return solve(0, n-1, s);\\n    }\\n};\\n```\\n\\n\\n```\\n//Approach-2 (Bottom Up soon)\\n```",
                "solutionTags": [],
                "code": "```\\n//Approach-1 (Recursion + Memoization)\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> t;\\n    \\n    int solve(int l, int r, string& s){\\n        if(l == r)\\n            return 1;\\n        \\n        else if(l > r)\\n            return 0;\\n        \\n        if(t[l][r] != -1)\\n            return t[l][r];\\n\\n\\n        int i = l+1;\\n        while(i <= r && s[i] == s[l])\\n            i++;\\n\\n        if(i == r+1)\\n            return 1;\\n\\n        int normal = 1 + solve(i,r,s);\\n\\n        int aage_ka = INT_MAX;\\n\\n        for(int j = i; j <= r; j++){\\n            if(s[l] == s[j]){\\n                \\n                int x = solve(i,j-1,s) + solve(j,r,s);\\n                \\n                aage_ka = min(aage_ka, x);\\n            }\\n        }\\n\\n        return t[l][r] = min(aage_ka, normal);\\n    }\\n\\n    int strangePrinter(string s) {\\n        n = s.length() ;\\n        \\n        t.resize(n,vector<int>(n+1, -1));\\n        \\n        return solve(0, n-1, s);\\n    }\\n};\\n```\n```\\n//Approach-2 (Bottom Up soon)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837989,
                "title": "matrix-chain-multiplication-variation",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    int solve(int i, int j, string &s , vector<vector<int>> &dp)\\n    {\\n        if(j==i)\\n            return 1;\\n        \\n        if(dp[i][j] != -1)\\n            return dp[i][j];\\n        int ans = INT_MAX;\\n        for(int l = i;l<j; l++)\\n        {\\n            ans = min({ans, solve(i,l,s,dp)+solve(l+1,j,s,dp)});\\n            \\n        }\\n        \\n        return dp[i][j] = ((s[i] == s[j])? ans-1:ans);\\n        \\n    }\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        \\n        vector<vector<int>> dp(n,vector<int>(n,-1));\\n        \\n        return solve(0,n-1,s,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    int solve(int i, int j, string &s , vector<vector<int>> &dp)\\n    {\\n        if(j==i)\\n            return 1;\\n        \\n        if(dp[i][j] != -1)\\n            return dp[i][j];\\n        int ans = INT_MAX;\\n        for(int l = i;l<j; l++)\\n        {\\n            ans = min({ans, solve(i,l,s,dp)+solve(l+1,j,s,dp)});\\n            \\n        }\\n        \\n        return dp[i][j] = ((s[i] == s[j])? ans-1:ans);\\n        \\n    }\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        \\n        vector<vector<int>> dp(n,vector<int>(n,-1));\\n        \\n        return solve(0,n-1,s,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837867,
                "title": "c-dp-l-r-o-n-3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nthis problem is like minimum n.o of steps to delete a string\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n O(N^3)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n O(N^2)+recursive stack \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int dp[102][102];\\n    int rec(int l,int r,string &s)\\n    {\\n        if(l>r)\\n        {\\n            return 0;\\n        }\\n        if(l==r)\\n        {\\n            return 1;\\n        }\\n        if(dp[l][r]!=-1)\\n        {\\n            return dp[l][r];\\n        }\\n        int aa=1+rec(l+1,r,s);\\n        for(int i=l+1;i<=r;i++){\\n            if(s[i]==s[l])\\n            {\\n                aa=min(aa,rec(l+1,i-1,s)+rec(i,r,s));\\n            }\\n        }\\n        return dp[l][r]=aa;\\n    }\\n    int strangePrinter(string s) {\\n        int n=s.length();\\n        memset(dp,-1,sizeof(dp));\\n        return rec(0,n-1,s);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int dp[102][102];\\n    int rec(int l,int r,string &s)\\n    {\\n        if(l>r)\\n        {\\n            return 0;\\n        }\\n        if(l==r)\\n        {\\n            return 1;\\n        }\\n        if(dp[l][r]!=-1)\\n        {\\n            return dp[l][r];\\n        }\\n        int aa=1+rec(l+1,r,s);\\n        for(int i=l+1;i<=r;i++){\\n            if(s[i]==s[l])\\n            {\\n                aa=min(aa,rec(l+1,i-1,s)+rec(i,r,s));\\n            }\\n        }\\n        return dp[l][r]=aa;\\n    }\\n    int strangePrinter(string s) {\\n        int n=s.length();\\n        memset(dp,-1,sizeof(dp));\\n        return rec(0,n-1,s);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837794,
                "title": "golang-dp-bottom-up-approach",
                "content": "# Code\\n```\\nfunc strangePrinter(s string) int {\\n    n := len(s)\\n    dp := make([][]int, n)\\n    for r := 0; r < n; r++ {\\n        dp[r] = make([]int, n)\\n    }\\n\\n    for length := 1; length <= n; length++ {\\n        for left := 0; left <= n - length; left++ {\\n            right := left + length - 1\\n            j := -1\\n            dp[left][right] = n\\n\\n            for i := left; i < right; i++ {\\n                if s[i] != s[right] && j == -1 {\\n                    j = i\\n                }\\n                if j != -1 {\\n                    dp[left][right] = min(dp[left][right], 1 + dp[j][i] + dp[i+1][right])\\n                }\\n            }\\n\\n            if j == -1 {\\n                dp[left][right] = 0\\n            }\\n        }\\n    }\\n\\n    return dp[0][n-1] + 1\\n}\\n\\nfunc min(a, b int) int {\\n    if a < b {\\n        return a\\n    }\\n    return b\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc strangePrinter(s string) int {\\n    n := len(s)\\n    dp := make([][]int, n)\\n    for r := 0; r < n; r++ {\\n        dp[r] = make([]int, n)\\n    }\\n\\n    for length := 1; length <= n; length++ {\\n        for left := 0; left <= n - length; left++ {\\n            right := left + length - 1\\n            j := -1\\n            dp[left][right] = n\\n\\n            for i := left; i < right; i++ {\\n                if s[i] != s[right] && j == -1 {\\n                    j = i\\n                }\\n                if j != -1 {\\n                    dp[left][right] = min(dp[left][right], 1 + dp[j][i] + dp[i+1][right])\\n                }\\n            }\\n\\n            if j == -1 {\\n                dp[left][right] = 0\\n            }\\n        }\\n    }\\n\\n    return dp[0][n-1] + 1\\n}\\n\\nfunc min(a, b int) int {\\n    if a < b {\\n        return a\\n    }\\n    return b\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3837642,
                "title": "swift-recursion-100-faster-223ms-works-well-for-emojis-as-well",
                "content": "#### Standard Solution: TLE\\n```\\nclass Solution {\\n    func strangePrinter(_ s: String) -> Int {\\n        func minTurns(lo: String.Index, hi: String.Index) -> Int {\\n            guard lo < hi else { return lo == hi ? 1 : 0 }\\n            \\n            var k = s.index(after: lo)\\n            if k == hi {\\n                return s[lo] == s[hi] ? 1 : 2\\n            }\\n\\n            var res = 1 + minTurns(lo: k, hi: hi)\\n            while k <= hi {\\n                if s[k] == s[lo] {\\n                    let left = minTurns(lo: lo, hi: s.index(before: k))\\n                    let right = minTurns(lo: s.index(after: k), hi: hi)\\n                    res = min(res, left + right)\\n                }\\n                k = s.index(after: k)\\n            }\\n            return res\\n        }\\n\\n        return minTurns(lo: s.startIndex, hi: s.index(before: s.endIndex))\\n    }\\n}\\n```\\n\\n### Memoiztion added solution: 223 ms 100% faster\\n```\\nclass Solution {\\n    func strangePrinter(_ s: String) -> Int {\\n        var memo: [String.Index: [String.Index: Int]] = [:]\\n        func minTurns(lo: String.Index, hi: String.Index) -> Int {\\n            if let cachedResult = memo[lo]?[hi] {\\n                return cachedResult\\n            }\\n\\n            guard lo < hi else { return lo == hi ? 1 : 0 }\\n            var k = s.index(after: lo)\\n            if k == hi {\\n                let res = s[lo] == s[hi] ? 1 : 2\\n                memo[lo, default: [:]][hi] = res\\n                return res\\n            }\\n\\n            var res = 1 + minTurns(lo: k, hi: hi)\\n\\n            while k <= hi {\\n                if s[k] == s[lo] {\\n                    let left = minTurns(lo: lo, hi: s.index(before: k))\\n                    let right = minTurns(lo: s.index(after: k), hi: hi)\\n                    res = min(res, left + right)\\n                }\\n                k = s.index(after: k)\\n            }\\n\\n            memo[lo, default: [:]][hi] = res\\n            return res\\n        }\\n\\n        return minTurns(lo: s.startIndex, hi: s.index(before: s.endIndex))\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    func strangePrinter(_ s: String) -> Int {\\n        func minTurns(lo: String.Index, hi: String.Index) -> Int {\\n            guard lo < hi else { return lo == hi ? 1 : 0 }\\n            \\n            var k = s.index(after: lo)\\n            if k == hi {\\n                return s[lo] == s[hi] ? 1 : 2\\n            }\\n\\n            var res = 1 + minTurns(lo: k, hi: hi)\\n            while k <= hi {\\n                if s[k] == s[lo] {\\n                    let left = minTurns(lo: lo, hi: s.index(before: k))\\n                    let right = minTurns(lo: s.index(after: k), hi: hi)\\n                    res = min(res, left + right)\\n                }\\n                k = s.index(after: k)\\n            }\\n            return res\\n        }\\n\\n        return minTurns(lo: s.startIndex, hi: s.index(before: s.endIndex))\\n    }\\n}\\n```\n```\\nclass Solution {\\n    func strangePrinter(_ s: String) -> Int {\\n        var memo: [String.Index: [String.Index: Int]] = [:]\\n        func minTurns(lo: String.Index, hi: String.Index) -> Int {\\n            if let cachedResult = memo[lo]?[hi] {\\n                return cachedResult\\n            }\\n\\n            guard lo < hi else { return lo == hi ? 1 : 0 }\\n            var k = s.index(after: lo)\\n            if k == hi {\\n                let res = s[lo] == s[hi] ? 1 : 2\\n                memo[lo, default: [:]][hi] = res\\n                return res\\n            }\\n\\n            var res = 1 + minTurns(lo: k, hi: hi)\\n\\n            while k <= hi {\\n                if s[k] == s[lo] {\\n                    let left = minTurns(lo: lo, hi: s.index(before: k))\\n                    let right = minTurns(lo: s.index(after: k), hi: hi)\\n                    res = min(res, left + right)\\n                }\\n                k = s.index(after: k)\\n            }\\n\\n            memo[lo, default: [:]][hi] = res\\n            return res\\n        }\\n\\n        return minTurns(lo: s.startIndex, hi: s.index(before: s.endIndex))\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837275,
                "title": "simple-beginner-friendly-c-solution-with-intuition-and-explanation",
                "content": "# Intuition\\nThe problem requires finding the minimum steps needed by a \"strange printer\" to print a given string s.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- We use dynamic programming to find the minimum steps needed for a \"strange printer\" to print a given string s.\\n- We iterate through all possible substrings of s to find a \"pivot\" index j, reducing the number of steps needed.\\n- The minimum steps for each substring are stored in the dp table.\\n- Finally, the minimum steps needed to print the entire string s are returned as dp[0][n-1] + 1, where n is the size of s.\\n<!-- Describe your approach to solving the problem. -->\\n# Summary \\nWe use dynamic programming to efficiently calculate the minimum steps for printing all substrings of s. We searche for a \"pivot\" index j in each substring, and if found, we reduce the number of steps needed. The minimum steps for each substring are stored in the dp table. Finally, the minimum steps needed to print the entire string s are returned by accessing dp[0][n-1] + 1, where n is the size of s. \\n# Complexity\\n- Time complexity: O(n^3)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N^2)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nUPVOTE. Glad to help.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n=s.size();\\n        vector dp(n,vector<int>(n,n));\\n        for(int length=1;length<=n;length++){\\n            for(int left=0;left<=n-length;left++){\\n                int right=left+length-1;\\n                int j=-1;\\n                for(int i=left;i<right;i++){\\n                    if(s[i]!=s[right] and j==-1) j=i;\\n                    if(j!=-1) dp[left][right]=min(dp[left][right],\\n                    1+dp[j][i]+dp[i+1][right]);\\n                }\\n                if(j==-1) dp[left][right]=0;\\n            }\\n        }\\n        return dp[0][n-1]+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n=s.size();\\n        vector dp(n,vector<int>(n,n));\\n        for(int length=1;length<=n;length++){\\n            for(int left=0;left<=n-length;left++){\\n                int right=left+length-1;\\n                int j=-1;\\n                for(int i=left;i<right;i++){\\n                    if(s[i]!=s[right] and j==-1) j=i;\\n                    if(j!=-1) dp[left][right]=min(dp[left][right],\\n                    1+dp[j][i]+dp[i+1][right]);\\n                }\\n                if(j==-1) dp[left][right]=0;\\n            }\\n        }\\n        return dp[0][n-1]+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837140,
                "title": "c-python-rust-divide-and-conquer-dp-solution",
                "content": "# Complexity\\n- Time complexity: $$O(n ^ 3)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n ^ 2)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```cpp []\\nconst int INF = 1e9;\\n\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n\\n        for (int d = 0; d < n; ++d) {\\n            for (int idx = 0; idx < n; ++idx) {\\n                int l = idx, r = idx + d;\\n                if (r >= n) {\\n                    break;\\n                }\\n                dp[l][r] = INF;\\n                if (l == r) {\\n                    dp[l][r] = 0;\\n                } else if (s[l] != s[l + 1]) {\\n                    dp[l][r] = min(dp[l][r], dp[l + 1][r] + 1);\\n                    for (int i = l + 1; i <= r; ++i) {\\n                        if (s[l] == s[i]) {\\n                            dp[l][r] = min(dp[l][r], dp[l][i - 1] + dp[i][r]);\\n                        }\\n                    }\\n                } else {\\n                    dp[l][r] = dp[l + 1][r];\\n                }\\n            }\\n        }\\n\\n        return dp[0][n - 1] + 1;\\n    }\\n};\\n```\\n```python3 []\\nINF = 1_000_000_000\\n\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n\\n        for d in range(n):\\n            for idx in range(n):\\n                l, r = idx, idx + d\\n                if r >= n:\\n                    break\\n                dp[l][r] = INF\\n                if l == r:\\n                    dp[l][r] = 0\\n                elif s[l] != s[l + 1]:\\n                    dp[l][r] = min(dp[l][r], dp[l + 1][r] + 1)\\n                    for i in range(l + 1, r + 1):\\n                        if s[l] == s[i]:\\n                            dp[l][r] = min(dp[l][r], dp[l][i - 1] + dp[i][r])\\n                else:\\n                    dp[l][r] = dp[l + 1][r]\\n\\n        return dp[0][n - 1] + 1\\n```\\n```rust []\\nuse std::cmp;\\n\\nconst INF: i32 = 1_000_000_000;\\n\\nimpl Solution {\\n    pub fn strange_printer(s: String) -> i32 {\\n        let s = s.as_bytes();\\n        let n = s.len();\\n        let mut dp = vec![vec![0 as i32; n]; n];\\n        for d in 0..n {\\n            for idx in 0..n {\\n                let (l, r) = (idx, idx + d);\\n                if r >= n {\\n                    break;\\n                } \\n                dp[l][r] = INF;\\n                if l == r {\\n                    dp[l][r] = 0;\\n                } else if s[l] != s[l + 1] {\\n                    dp[l][r] = cmp::min(dp[l][r], dp[l + 1][r] + 1);\\n                    for i in (l + 1)..=r {\\n                        if s[l] == s[i] {\\n                            dp[l][r] = cmp::min(dp[l][r], dp[l][i - 1] + dp[i][r]);\\n                        }\\n                    }\\n                } else {\\n                    dp[l][r] = dp[l + 1][r];\\n                }\\n            } \\n        }\\n        return dp[0][n - 1] + 1;       \\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Python3",
                    "Rust",
                    "Dynamic Programming"
                ],
                "code": "```cpp []\\nconst int INF = 1e9;\\n\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n\\n        for (int d = 0; d < n; ++d) {\\n            for (int idx = 0; idx < n; ++idx) {\\n                int l = idx, r = idx + d;\\n                if (r >= n) {\\n                    break;\\n                }\\n                dp[l][r] = INF;\\n                if (l == r) {\\n                    dp[l][r] = 0;\\n                } else if (s[l] != s[l + 1]) {\\n                    dp[l][r] = min(dp[l][r], dp[l + 1][r] + 1);\\n                    for (int i = l + 1; i <= r; ++i) {\\n                        if (s[l] == s[i]) {\\n                            dp[l][r] = min(dp[l][r], dp[l][i - 1] + dp[i][r]);\\n                        }\\n                    }\\n                } else {\\n                    dp[l][r] = dp[l + 1][r];\\n                }\\n            }\\n        }\\n\\n        return dp[0][n - 1] + 1;\\n    }\\n};\\n```\n```python3 []\\nINF = 1_000_000_000\\n\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n\\n        for d in range(n):\\n            for idx in range(n):\\n                l, r = idx, idx + d\\n                if r >= n:\\n                    break\\n                dp[l][r] = INF\\n                if l == r:\\n                    dp[l][r] = 0\\n                elif s[l] != s[l + 1]:\\n                    dp[l][r] = min(dp[l][r], dp[l + 1][r] + 1)\\n                    for i in range(l + 1, r + 1):\\n                        if s[l] == s[i]:\\n                            dp[l][r] = min(dp[l][r], dp[l][i - 1] + dp[i][r])\\n                else:\\n                    dp[l][r] = dp[l + 1][r]\\n\\n        return dp[0][n - 1] + 1\\n```\n```rust []\\nuse std::cmp;\\n\\nconst INF: i32 = 1_000_000_000;\\n\\nimpl Solution {\\n    pub fn strange_printer(s: String) -> i32 {\\n        let s = s.as_bytes();\\n        let n = s.len();\\n        let mut dp = vec![vec![0 as i32; n]; n];\\n        for d in 0..n {\\n            for idx in 0..n {\\n                let (l, r) = (idx, idx + d);\\n                if r >= n {\\n                    break;\\n                } \\n                dp[l][r] = INF;\\n                if l == r {\\n                    dp[l][r] = 0;\\n                } else if s[l] != s[l + 1] {\\n                    dp[l][r] = cmp::min(dp[l][r], dp[l + 1][r] + 1);\\n                    for i in (l + 1)..=r {\\n                        if s[l] == s[i] {\\n                            dp[l][r] = cmp::min(dp[l][r], dp[l][i - 1] + dp[i][r]);\\n                        }\\n                    }\\n                } else {\\n                    dp[l][r] = dp[l + 1][r];\\n                }\\n            } \\n        }\\n        return dp[0][n - 1] + 1;       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836968,
                "title": "kotlin-beats-100-runtime-and-memory-explanation",
                "content": "# Intuition\\nI thought of an approach that involves repeating each character in reverse order, starting from the end of the line. For each character, it to  consider all possible substrings that can be formed by expanding from this position. By comparing characters and calculating intermediate values based on previously calculated results, it would determine how many additional operations are needed for optimal printing of each substring. \\n\\n# Approach\\n- To solve this problem, I used dynamic programming and build a 2D array (dp) where dp[i][j] represents the minimum number of operations required to print the substring from index i to index j. \\n- The solution is as follows:\\n    1. Iterate in reverse order over each character in \\'s\\' using an outer loop starting from position n-1 down to 0.\\n\\n    2. For each iteration, set dp[i][i] = 1 since printing a single character requires one operation.\\n\\n    3. Inside this for loop(with i), use an inner nested for loop (with j) that starts from i+1 up to n-1. This inner loop iterates over all possible substrings starting at position i and ending at position j.\\n\\n    4. Within this inner for loop(with j), add another nested loop (with k) that starts from i up to j-1. This additional nested loop checks if any characters within the substring match with character \\'s[j]\\'. If they do match - we calculate dp[i][j] by taking either its current value or adding dp[i][k], where k ranges from i to j-1 and if condition (k + 1 <= j - 1) holds true then add dp[k + 1][j - 1] and then save the smaller value via using Math.min().\\n \\n    5. After completing all iterations, dp[0][n-1] represents the minimum number of operations required to print the entire string \\'s\\', so we return it. \\n\\n# Complexity\\n- Time complexity:\\n $$O(n^3)$$ \\n\\n- Space complexity:\\n$$O(n^2)$$\\n\\n# Code\\n```\\nclass Solution {\\nfun strangePrinter(s: String): Int {\\n    val n = s.length\\n    val dp = Array(n) { IntArray(n) }\\n    for (i in n - 1 downTo 0) {\\n        dp[i][i] = 1\\n        for (j in i + 1 until n) {\\n            dp[i][j] = dp[i][j - 1] + 1\\n            for (k in i until j) {\\n                if (s[k] == s[j]) dp[i][j] = Math.min(dp[i][j], dp[i][k] + if (k + 1 <= j - 1) dp[k + 1][j - 1] else 0)\\n            }\\n        }\\n    }\\n    return dp[0][n - 1]\\n}\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\nfun strangePrinter(s: String): Int {\\n    val n = s.length\\n    val dp = Array(n) { IntArray(n) }\\n    for (i in n - 1 downTo 0) {\\n        dp[i][i] = 1\\n        for (j in i + 1 until n) {\\n            dp[i][j] = dp[i][j - 1] + 1\\n            for (k in i until j) {\\n                if (s[k] == s[j]) dp[i][j] = Math.min(dp[i][j], dp[i][k] + if (k + 1 <= j - 1) dp[k + 1][j - 1] else 0)\\n            }\\n        }\\n    }\\n    return dp[0][n - 1]\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836921,
                "title": "python-easy-solutions-time-memory-efficient",
                "content": "# Intuition\\nThe problem seems to involve finding the minimum number of turns required to print a given string using a \"strange printer.\" The printer can print a character on any substring of the given string and it can overlap with the existing characters. The objective is to minimize the number of turns to print the entire string.\\n\\n# Approach\\nTo solve this problem, we use dynamic programming. It initializes a 2D DP array, where dp[i][j] represents the minimum number of turns required to print the substring from index i to index j of the original string s.\\n\\nThe base case is when i == j, which means there is only one character in the substring, and in this case, dp[i][i] is set to 1 as it takes 1 turn to print a single character.\\n\\nFor substrings with more than one character, the solution iterates from the end of the string (n-1) to the start (0). For each i and j, it checks if the characters at these positions in the string are the same. If they are, then the minimum turns required to print the substring from i to j is the same as the minimum turns required to print the substring from i to j-1.\\n\\nIf the characters at i and j are different, it means a new turn is required to print the character at position j. In this case, the solution tries different partition points k between i and j and calculates the minimum turns required to print the substring from i to j. It takes the minimum of all such values as the final minimum turns required for dp[i][j].\\n\\nIn the end, dp[0][n-1] represents the minimum turns required to print the entire original string.\\n\\n# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n\\n        for i in range(n - 1, -1, -1):\\n            dp[i][i] = 1  # Base case: single character needs 1 turn\\n            for j in range(i + 1, n):\\n                if s[i] == s[j]:\\n                    dp[i][j] = dp[i][j - 1]  # If s[i] and s[j] are the same, no extra turn needed\\n                else:\\n                    dp[i][j] = dp[i][j - 1] + 1  # Initialize to maximum turns\\n                    for k in range(i, j):\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\\n\\n        return dp[0][n - 1]\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0] * n for _ in range(n)]\\n\\n        for i in range(n - 1, -1, -1):\\n            dp[i][i] = 1  # Base case: single character needs 1 turn\\n            for j in range(i + 1, n):\\n                if s[i] == s[j]:\\n                    dp[i][j] = dp[i][j - 1]  # If s[i] and s[j] are the same, no extra turn needed\\n                else:\\n                    dp[i][j] = dp[i][j - 1] + 1  # Initialize to maximum turns\\n                    for k in range(i, j):\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\\n\\n        return dp[0][n - 1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836549,
                "title": "javascript-short-solution-using-recursion",
                "content": "# Code\\n```\\nvar strangePrinter = function(s) {\\n    const n = s.length;\\n    const memo = Array(n).fill().map(() => Array(n).fill(0));\\n\\n    function dp(l, r) {\\n        if (l>r) return 0;\\n\\n        if (memo[l][r]) return memo[l][r];\\n\\n        let min = 1 + dp(l+1, r);\\n\\n        for (let i=l+1; i<=r; ++i)\\n            if (s[i]==s[l])\\n                min = Math.min(min, dp(l+1, i-1) + dp(i, r));\\n\\n        memo[l][r] = min;\\n        return min;\\n    }\\n\\n    return dp(0, n-1);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar strangePrinter = function(s) {\\n    const n = s.length;\\n    const memo = Array(n).fill().map(() => Array(n).fill(0));\\n\\n    function dp(l, r) {\\n        if (l>r) return 0;\\n\\n        if (memo[l][r]) return memo[l][r];\\n\\n        let min = 1 + dp(l+1, r);\\n\\n        for (let i=l+1; i<=r; ++i)\\n            if (s[i]==s[l])\\n                min = Math.min(min, dp(l+1, i-1) + dp(i, r));\\n\\n        memo[l][r] = min;\\n        return min;\\n    }\\n\\n    return dp(0, n-1);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3836503,
                "title": "swift-expected-solution-dynamic-programming",
                "content": "# Solution\\n```\\nclass Solution {\\n    func strangePrinter(_ s: String) -> Int {\\n        let s = Array(s)\\n        var dp = Array(repeating: Array(repeating: 0, count: s.count), count: s.count)\\n        for i in (0..<s.count).reversed() {\\n            dp[i][i] = 1\\n            for j in i+1..<s.count {\\n                dp[i][j] = dp[i][j - 1] + 1\\n                for k in i..<j where s[k] == s[j] {\\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j - 1])\\n                }\\n            }\\n        }\\n        return dp[0][s.count - 1]       \\n    }\\n}\\n```\\n\\n# Complexity\\n- Time: $$O(n^3)$$\\n- Space: $$O(n^2)$$",
                "solutionTags": [
                    "Swift",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    func strangePrinter(_ s: String) -> Int {\\n        let s = Array(s)\\n        var dp = Array(repeating: Array(repeating: 0, count: s.count), count: s.count)\\n        for i in (0..<s.count).reversed() {\\n            dp[i][i] = 1\\n            for j in i+1..<s.count {\\n                dp[i][j] = dp[i][j - 1] + 1\\n                for k in i..<j where s[k] == s[j] {\\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j - 1])\\n                }\\n            }\\n        }\\n        return dp[0][s.count - 1]       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836205,
                "title": "c-dynamic-programming",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(string& s, int i, int j, vector<vector<int>>& dp) {\\n        if (i > j) {\\n            return 0;\\n        }\\n        if (i == j) {\\n            return 1;\\n        }\\n        if (dp[i][j] != -1) {\\n            return dp[i][j];\\n        }\\n        int ans = 1 + solve(s, i + 1, j, dp);\\n        for (int k = i + 1; k <= j; k++) {\\n            if (s[k] == s[i]) {\\n                ans = min(ans, solve(s, i, k - 1, dp) + solve(s, k + 1, j, dp));\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, -1));\\n        return solve(s, 0, n - 1, dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int solve(string& s, int i, int j, vector<vector<int>>& dp) {\\n        if (i > j) {\\n            return 0;\\n        }\\n        if (i == j) {\\n            return 1;\\n        }\\n        if (dp[i][j] != -1) {\\n            return dp[i][j];\\n        }\\n        int ans = 1 + solve(s, i + 1, j, dp);\\n        for (int k = i + 1; k <= j; k++) {\\n            if (s[k] == s[i]) {\\n                ans = min(ans, solve(s, i, k - 1, dp) + solve(s, k + 1, j, dp));\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, -1));\\n        return solve(s, 0, n - 1, dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836064,
                "title": "easy-python3-solution-peculiar-minimizing-prints-with-dynamic-programming",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0]*n for _ in range(n)]\\n        \\n        for i in range(n-1, -1, -1):\\n            dp[i][i] = 1\\n            for j in range(i+1, n):\\n                dp[i][j] = dp[i][j-1] + 1\\n                for k in range(i, j):\\n                    if s[k] == s[j]:\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (dp[k+1][j-1] if k+1<=j-1 else 0))\\n\\n        return dp[0][n-1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        dp = [[0]*n for _ in range(n)]\\n        \\n        for i in range(n-1, -1, -1):\\n            dp[i][i] = 1\\n            for j in range(i+1, n):\\n                dp[i][j] = dp[i][j-1] + 1\\n                for k in range(i, j):\\n                    if s[k] == s[j]:\\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (dp[k+1][j-1] if k+1<=j-1 else 0))\\n\\n        return dp[0][n-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836030,
                "title": "c-dp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l<n+1; l++)\\n        {\\n            for(int i=0; i<n-l+1; i++)\\n            {\\n                int j = i+l-1;\\n                dp[i][j] = dp[i+1][j]+1;\\n                \\n                for(int k=i+1; k<j+1; k++)\\n                {\\n                    if(s[i]==s[k])\\n                dp[i][j] = min(dp[i][j], dp[i][k-1] + ((j>k)?dp[k+1][j]:0));\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n        for (int l = 2; l<n+1; l++)\\n        {\\n            for(int i=0; i<n-l+1; i++)\\n            {\\n                int j = i+l-1;\\n                dp[i][j] = dp[i+1][j]+1;\\n                \\n                for(int k=i+1; k<j+1; k++)\\n                {\\n                    if(s[i]==s[k])\\n                dp[i][j] = min(dp[i][j], dp[i][k-1] + ((j>k)?dp[k+1][j]:0));\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835910,
                "title": "dp-memoization-c-with-comments",
                "content": "### Connect with me on LinkedIN : https://www.linkedin.com/in/aditya-jhunjhunwala-51b586195/\\n# Complexity\\n```\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n^2)\\n```\\n\\n# Code\\n## Please Upvote if u found it Useful\\uD83E\\uDD17\\n```\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    int solve(string &s, int i, int j){\\n        if(i > j)\\n            return 0;\\n        if(dp[i][j] != -1) \\n            return dp[i][j];\\n\\n        int x = i;\\n        while(x + 1 <= j && s[x] == s[x + 1])  //find the end of the first same character in the substring , x is the end \\n            x++;   //stores the ending index of this sequence.\\n\\n        int ans = 1 + solve(s,x + 1, j);   // number of turns needed to print the rest of the substring after the first same character sequence\\n\\n        for(int k = x + 1; k <= j; k++){\\n            if(s[k] == s[i]){\\n                ans = min(ans, solve(s,k,j) + solve(s,x + 1, k - 1));  //solve(s, k, j) to find the minimum number of turns needed to print the rest of the substring after this character, and solve(s, x + 1, k - 1) to find the minimum number of turns needed to print the part of the substring between the first same character sequence and the current character\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n    \\n    int strangePrinter(string s) {\\n        memset(dp,-1,sizeof(dp));\\n        return solve(s,0,s.size() - 1);\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n^2)\\n```\n```\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    int solve(string &s, int i, int j){\\n        if(i > j)\\n            return 0;\\n        if(dp[i][j] != -1) \\n            return dp[i][j];\\n\\n        int x = i;\\n        while(x + 1 <= j && s[x] == s[x + 1])  //find the end of the first same character in the substring , x is the end \\n            x++;   //stores the ending index of this sequence.\\n\\n        int ans = 1 + solve(s,x + 1, j);   // number of turns needed to print the rest of the substring after the first same character sequence\\n\\n        for(int k = x + 1; k <= j; k++){\\n            if(s[k] == s[i]){\\n                ans = min(ans, solve(s,k,j) + solve(s,x + 1, k - 1));  //solve(s, k, j) to find the minimum number of turns needed to print the rest of the substring after this character, and solve(s, x + 1, k - 1) to find the minimum number of turns needed to print the part of the substring between the first same character sequence and the current character\\n            }\\n        }\\n        return dp[i][j] = ans;\\n    }\\n    \\n    int strangePrinter(string s) {\\n        memset(dp,-1,sizeof(dp));\\n        return solve(s,0,s.size() - 1);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835840,
                "title": "2-easy-c-solutions-simple-dp-approach-beats-86",
                "content": "### This question is similar to [546. Remove boxes](https://leetcode.com/problems/remove-boxes/) \\n\\n# Approach\\n- `dp[i][j]` is the mininum number of steps to print a substring from ith to jth inclusive. \\n- In the worst case a printer has to print every character separately, so `dp[i][j] = j-i`, but it may be possible to get away with fewer steps by combining subproblems `dp[i][k-1]` and `dp[k][j]` for each k between i and j. \\n\\n# Code\\n```\\n// Solution 1\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        \\n        for (int i=n-1; i>=0; i--){\\n            dp[i][i] = 1;\\n            for (int j=i+1; j<n; j++){\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k=i; k<j; k++){\\n                    if (s[k] == s[j]) \\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n\\n// Solution 2\\nclass Solution {\\npublic:\\n    vector<vector<int>> dp;\\n    int solve(string& s, int i, int j){\\n        if(i>j)             return 0;\\n        if(dp[i][j]!=0)     return dp[i][j];\\n        int x = i;\\n        \\n        while(x+1<=j && s[x]==s[x+1]) \\n            x++;\\n        int ans = 1 + solve(s, x+1, j);\\n        for(int k = x+1; k<=j; k++){\\n            if(s[k] == s[i])\\n                ans = min(ans, solve(s, k,j ) + solve(s, x+1, k-1));\\n        }\\n        return dp[i][j] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        dp = vector<vector<int>> (s.size(), vector<int>(s.size(), 0));\\n        return solve(s, 0, s.size()-1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\n// Solution 1\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        \\n        for (int i=n-1; i>=0; i--){\\n            dp[i][i] = 1;\\n            for (int j=i+1; j<n; j++){\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k=i; k<j; k++){\\n                    if (s[k] == s[j]) \\n                        dp[i][j] = min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n\\n// Solution 2\\nclass Solution {\\npublic:\\n    vector<vector<int>> dp;\\n    int solve(string& s, int i, int j){\\n        if(i>j)             return 0;\\n        if(dp[i][j]!=0)     return dp[i][j];\\n        int x = i;\\n        \\n        while(x+1<=j && s[x]==s[x+1]) \\n            x++;\\n        int ans = 1 + solve(s, x+1, j);\\n        for(int k = x+1; k<=j; k++){\\n            if(s[k] == s[i])\\n                ans = min(ans, solve(s, k,j ) + solve(s, x+1, k-1));\\n        }\\n        return dp[i][j] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        dp = vector<vector<int>> (s.size(), vector<int>(s.size(), 0));\\n        return solve(s, 0, s.size()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3630457,
                "title": "python3-with-explanation-beats-97",
                "content": "For simplicity, I\\'ll use \"handle `s[i]`\" to mean printing `s[i]` for the final result, so we never overwrite `i` in a later step.  \\nThe solution is based on a few ideas:\\n\\n1.  A singleton string requires 1 print.\\n2. We should always print the leftmost character first.  If we were to handle `s[1]` before `s[0]`, for example, when we handle `s[0]` later on we can never simultaneously handle anything on index 1 or beyond.  Take `s=aba` - if we printed `_b_` first we would have to print `s[0]` and `s[1]` separately, requiring 3 steps, but we can start with `aaa` and then `_b_` and only require 2 steps.\\n3. If we have repeated consecutive characters, when we handle one of them, we should handle them all with the same print.  For example, if we have `s=aaba`, it never makes sense to handle just `s[0]`  and print a single `a`, when we could print `aa` and handle both `s[0]` and `s[1]`.  This also means that a string like `aabbccc` requires the same number of steps as `abc`.  Therefore, we can consider a de-duped version of the string with no repeated consecutive characters.  We can find this new string in linear time with one pass through the original.\\n4. Suppose we have `s[i0] == s[i1] == s[i2] == s[i3] == ...  a`  When we handle `s[i0]`, we should either print a single `a` or print a string of all `a` up through `i1` or `i2` or `i3`, etc.  By printing through `i1` or `i2`, we can potentially handle one or both of `i1` and `i2` now to save a print.  The characters inbetween don\\'t matter since those are necessarily different than `s[i0]` and have to be handled later.\\n\\nThe difficulty with #4 above is knowing if we should print through `i1` or `i2` etc, and which of those should be handled now versus on a later print.  If we have `k+1` occurrences of a character, we have to choose whether or not we handle k different spots for  `2^k` subproblems to check.  This will quickly become unweildy, so we need to figure out how to handle them cleanly.\\n\\nLet `dp(i, j)` be the minumum number of prints needed to handle `s[i:j+1]`.\\n\\nIf we have just a single occurrence of a character `s[i]`, then `dp(i, j) = 1 + dp(i+1, j)`.\\n\\nIf we have two occurrences `[i0, i1]`, then we can either handle `s[i1]` now or later.  If we handle it now, we need to separately handle `s[i0+1:i1]`  and `s[i1+1:j+1]`.  If we skip it then we just need to handle `s[i0+1:j+1]`.\\nTherefore, \\n```\\ndp(i0, j) = min(1 + dp(i0+1, j), \\n                1 + dp(i0+1, i1-1) + dp(i1+1, j)\\n\\t\\t\\t\\t).\\n```\\n\\nIf we have three occurrences `[i0, i1, i2]` then there are four cases to consider, and `dp(i0, j)` is the minimum of all cases.\\n1. handle `i1` later, `i2` later\\n2. handle `i1` later, `i2` now\\n3. handle `i1` now, `i2` later\\n4. handle `i1` now, `i2` now\\n\\nthe steps required for each are:\\n1. `1 + dp(i0+1, j)`\\n2. `1 + dp(i0+1, i2-1) + dp(i2+1, j)`\\n3. `1 + dp(i0+1, i1-1) + dp(i1+1, j)`\\n4. `1 + dp(i0+1, i1-1) + dp(i1+1, i2-1) + dp(i2+1, j)`\\n\\nNote that case 2 can be rewriten as `dp(i0+1, i2-1) + dp(i2, j)` (by grouping the 1 with the second dp term)\\nNote also that `min(case3, case4) = dp(i0+1, i1-1) + dp(i1, j)`  (by comparing to the case of just 2 occurrences of the character)\\nSo we can rewrite `dp(i0, j)` as\\n```\\ndp(i0, j) = min(1 + dp(i0+1, j),\\n                dp(i0+1, i2-1) + dp(i2, j),\\n\\t\\t\\t\\tdp(i0+1, i1-1) + dp(i1, j)\\n\\t\\t\\t\\t)\\n```\\nIn general, if a character occurs at indexes `[i0, i1, .... ik]` with `i0 < i2 < ... ik < j`, then\\n(\\\\*) ` dp(i0, j) = min(1 + dp(i0+1, j), min([dp(i0+1, x-1) + dp(x, j) for x in [i1, ..., ik]) )`.\\n\\nSo, we can write `dp(i0, j)` neatly as a sum of `k+1` subproblems, instead of `2^k`.\\n\\nThe solution is as follows:\\n1.  Create a de-duped version of s, and a map of characters to a list of the indexes where they are in the deduped string.  This can be done with one pass through the original string.  \\n2.   Calculate `dp(i, j)` according to the * formula above.  Our answer is `dp(0, len(dedup string))`\\n\\n```\\n    def strangePrinter(self, s: str) -> int:\\n        char_map = collections.defaultdict(list)\\n        dedup = []\\n        prev = None\\n        pos = 0\\n        for char in s:\\n            if char != prev:\\n                char_map[char].append(pos)\\n                dedup.append(char)\\n                prev = char\\n                pos += 1\\n                \\n        @functools.cache\\n        def dp(i, k):\\n            if i >= k:\\n                return 1\\n            char = dedup[i]\\n            result = 1 + dp(i+1, k)\\n            for j in char_map[char]:\\n                if i < j <= k:\\n                    result = min(result, dp(i+1, j-1) + dp(j, k))\\n            return result\\n        \\n        n = len(dedup)\\n        return dp(0, n-1)\\n```\\n",
                "solutionTags": [
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```\\ndp(i0, j) = min(1 + dp(i0+1, j), \\n                1 + dp(i0+1, i1-1) + dp(i1+1, j)\\n\\t\\t\\t\\t).\\n```\n```\\ndp(i0, j) = min(1 + dp(i0+1, j),\\n                dp(i0+1, i2-1) + dp(i2, j),\\n\\t\\t\\t\\tdp(i0+1, i1-1) + dp(i1, j)\\n\\t\\t\\t\\t)\\n```\n```\\n    def strangePrinter(self, s: str) -> int:\\n        char_map = collections.defaultdict(list)\\n        dedup = []\\n        prev = None\\n        pos = 0\\n        for char in s:\\n            if char != prev:\\n                char_map[char].append(pos)\\n                dedup.append(char)\\n                prev = char\\n                pos += 1\\n                \\n        @functools.cache\\n        def dp(i, k):\\n            if i >= k:\\n                return 1\\n            char = dedup[i]\\n            result = 1 + dp(i+1, k)\\n            for j in char_map[char]:\\n                if i < j <= k:\\n                    result = min(result, dp(i+1, j-1) + dp(j, k))\\n            return result\\n        \\n        n = len(dedup)\\n        return dp(0, n-1)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3423364,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    int helper(int l, int r, string &s){\\n        if(l>r) return 0;\\n        if(dp[l][r] != -1) return dp[l][r];\\n        int ans = INT_MAX;\\n        ans = min(ans, 1+helper(l+1, r, s));\\n        for(int i=l+1; i<=r; i++){\\n            if(s[i]==s[l]){\\n                ans = min(ans, helper(i, r, s)+helper(l+1, i-1, s));\\n            }\\n        }\\n        return dp[l][r] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        memset(dp, -1, sizeof(dp));\\n        string str;\\n        for(int i=0; i<s.size();){\\n            char ch = s[i];\\n            while(i<s.size() and ch==s[i]) i++;\\n            str.push_back(ch);\\n        }     \\n        return helper(0, str.size()-1, str);\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n\\tdef strangePrinter(self, s: str) -> int:\\n\\t\\t\\n\\t\\ts = \\'\\'.join([c for i, c in enumerate(s)\\n\\t\\t\\t\\t\\t if i == 0 or c != s[i - 1]])\\n\\n\\t\\tnext_occ_search = {}\\n\\t\\tnext_occurrence_of_letter = list(range(len(s)))\\n\\t\\tfor i, c in enumerate(s):\\n\\t\\t\\tif c in next_occ_search:\\n\\t\\t\\t\\tnext_occurrence_of_letter[next_occ_search[c]] = i\\n\\t\\t\\tnext_occ_search[c] = i\\n\\n\\t\\tfor v in next_occ_search.values():\\n\\t\\t\\tnext_occurrence_of_letter[v] = 10**10\\n\\n\\t\\t@functools.lru_cache(None)\\n\\t\\tdef dp(left_ind: int, right_ind: int) -> int:\\n\\n\\t\\t\\tif left_ind >= right_ind:\\n\\t\\t\\t\\treturn 0\\n\\n\\t\\t\\tif s[right_ind] == s[left_ind]:\\n\\t\\t\\t\\treturn dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\tans = 1 + dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\tpivot_index = next_occurrence_of_letter[left_ind]\\n\\t\\t\\twhile pivot_index <= right_ind:\\n\\t\\t\\t\\tans = min(ans, 1 + dp(left_ind + 1, pivot_index)\\n\\t\\t\\t\\t\\t\\t  + dp(pivot_index + 1, right_ind))\\n\\t\\t\\t\\tpivot_index = next_occurrence_of_letter[pivot_index]\\n\\n\\t\\t\\treturn ans\\n\\n\\t\\ts += \\'#\\'\\n\\t\\treturn dp(0, len(s) - 1)\\n```\\n\\n```Java []\\nclass Solution {\\n    private int[][] memo;\\n    private char[] array;\\n    public int strangePrinter(String s) {\\n        if (s.isEmpty()) {\\n            return 0;\\n        }\\n        array = squash(s);\\n        int N = array.length;\\n        memo = new int[N][];\\n\\n        for (int i = 0; i < N; i++) {\\n            memo[i] = new int[N];\\n            memo[i][i] = 1;\\n            if (i != N - 1) {\\n                int next = i + 1;\\n                memo[i][next] = array[i] == array[next] ? 1 : 2;\\n            }\\n        }\\n        return strangePrinter(0, array.length - 1);\\n    }\\n    public int strangePrinter(int i, int j) {\\n        if (i > j) {\\n            return 0;\\n        }\\n        if (memo[i][j] == 0) {\\n\\n            int nextIdx = i + 1;\\n            int letter = array[i];\\n\\n            int answer = 1 + strangePrinter(nextIdx, j);\\n\\n            for (int k = nextIdx; k <= j; k++) {\\n                if (array[k] == letter) {\\n\\n                    int betterAnswer = strangePrinter(i, k - 1) + strangePrinter(k + 1, j);\\n                    answer = Math.min(answer, betterAnswer);\\n                }\\n            }\\n            memo[i][j] = answer;\\n        }\\n        return memo[i][j];\\n    }\\n    char[] squash(String s) {\\n        char[] chars = s.toCharArray();\\n        int last = 0;\\n        int fullLength = chars.length;\\n        for (int i = 1; i < fullLength; i++) {\\n            if (chars[i] != chars[last]) {\\n                chars[++last] = chars[i];\\n            }\\n        }\\n        return Arrays.copyOf(chars, last + 1);\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    int helper(int l, int r, string &s){\\n        if(l>r) return 0;\\n        if(dp[l][r] != -1) return dp[l][r];\\n        int ans = INT_MAX;\\n        ans = min(ans, 1+helper(l+1, r, s));\\n        for(int i=l+1; i<=r; i++){\\n            if(s[i]==s[l]){\\n                ans = min(ans, helper(i, r, s)+helper(l+1, i-1, s));\\n            }\\n        }\\n        return dp[l][r] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        memset(dp, -1, sizeof(dp));\\n        string str;\\n        for(int i=0; i<s.size();){\\n            char ch = s[i];\\n            while(i<s.size() and ch==s[i]) i++;\\n            str.push_back(ch);\\n        }     \\n        return helper(0, str.size()-1, str);\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n\\tdef strangePrinter(self, s: str) -> int:\\n\\t\\t\\n\\t\\ts = \\'\\'.join([c for i, c in enumerate(s)\\n\\t\\t\\t\\t\\t if i == 0 or c != s[i - 1]])\\n\\n\\t\\tnext_occ_search = {}\\n\\t\\tnext_occurrence_of_letter = list(range(len(s)))\\n\\t\\tfor i, c in enumerate(s):\\n\\t\\t\\tif c in next_occ_search:\\n\\t\\t\\t\\tnext_occurrence_of_letter[next_occ_search[c]] = i\\n\\t\\t\\tnext_occ_search[c] = i\\n\\n\\t\\tfor v in next_occ_search.values():\\n\\t\\t\\tnext_occurrence_of_letter[v] = 10**10\\n\\n\\t\\t@functools.lru_cache(None)\\n\\t\\tdef dp(left_ind: int, right_ind: int) -> int:\\n\\n\\t\\t\\tif left_ind >= right_ind:\\n\\t\\t\\t\\treturn 0\\n\\n\\t\\t\\tif s[right_ind] == s[left_ind]:\\n\\t\\t\\t\\treturn dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\tans = 1 + dp(left_ind + 1, right_ind)\\n\\n\\t\\t\\tpivot_index = next_occurrence_of_letter[left_ind]\\n\\t\\t\\twhile pivot_index <= right_ind:\\n\\t\\t\\t\\tans = min(ans, 1 + dp(left_ind + 1, pivot_index)\\n\\t\\t\\t\\t\\t\\t  + dp(pivot_index + 1, right_ind))\\n\\t\\t\\t\\tpivot_index = next_occurrence_of_letter[pivot_index]\\n\\n\\t\\t\\treturn ans\\n\\n\\t\\ts += \\'#\\'\\n\\t\\treturn dp(0, len(s) - 1)\\n```\n```Java []\\nclass Solution {\\n    private int[][] memo;\\n    private char[] array;\\n    public int strangePrinter(String s) {\\n        if (s.isEmpty()) {\\n            return 0;\\n        }\\n        array = squash(s);\\n        int N = array.length;\\n        memo = new int[N][];\\n\\n        for (int i = 0; i < N; i++) {\\n            memo[i] = new int[N];\\n            memo[i][i] = 1;\\n            if (i != N - 1) {\\n                int next = i + 1;\\n                memo[i][next] = array[i] == array[next] ? 1 : 2;\\n            }\\n        }\\n        return strangePrinter(0, array.length - 1);\\n    }\\n    public int strangePrinter(int i, int j) {\\n        if (i > j) {\\n            return 0;\\n        }\\n        if (memo[i][j] == 0) {\\n\\n            int nextIdx = i + 1;\\n            int letter = array[i];\\n\\n            int answer = 1 + strangePrinter(nextIdx, j);\\n\\n            for (int k = nextIdx; k <= j; k++) {\\n                if (array[k] == letter) {\\n\\n                    int betterAnswer = strangePrinter(i, k - 1) + strangePrinter(k + 1, j);\\n                    answer = Math.min(answer, betterAnswer);\\n                }\\n            }\\n            memo[i][j] = answer;\\n        }\\n        return memo[i][j];\\n    }\\n    char[] squash(String s) {\\n        char[] chars = s.toCharArray();\\n        int last = 0;\\n        int fullLength = chars.length;\\n        for (int i = 1; i < fullLength; i++) {\\n            if (chars[i] != chars[last]) {\\n                chars[++last] = chars[i];\\n            }\\n        }\\n        return Arrays.copyOf(chars, last + 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3418910,
                "title": "interval-dp-with-full-commented-code",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int solve(int l,int r,string s,vector<vector<int>> &mem) {\\n        if(l > r) return 0;\\n\\n        if(mem[l][r] != -1) return mem[l][r];\\n\\n        // so now basically you have two choices for this interval l to r.\\n        // you can take any of it\\'s end.(l or r) , i have taken r.\\n        // so choice 1: treat this s[r] as an individual character and count 1 turn for it.\\n        // choice 2: don\\'t count turn for it, wait for characters which are before it and try to merge this s[r] with them.\\n        // so now for choice 2 the new intervals would be if s[i] == s[r] (l <= i < r)\\n        // then l to i (not i-1 bcz we want to merge i\\'th charater) and (i+1 to r-1)\\n\\n        int res = 0;\\n        // choice 1 : dont want to merge\\n        res = 1 + solve(l,r-1,s,mem);\\n\\n        // choice 2 : wanna wait and want to merge\\n        for(int i=l;i<r;i++) {\\n            if(s[i] == s[r])\\n                res = min(res,solve(l,i,s,mem)+solve(i+1,r-1,s,mem));\\n        }\\n\\n        return mem[l][r] = res;\\n    }\\n\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n\\n        vector<vector<int>> mem(n+1,vector<int>(n+1,-1));\\n\\n        return solve(0,n-1,s,mem);\\n    }\\n};\\n// Please do upvote if you understood the solution!!\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int solve(int l,int r,string s,vector<vector<int>> &mem) {\\n        if(l > r) return 0;\\n\\n        if(mem[l][r] != -1) return mem[l][r];\\n\\n        // so now basically you have two choices for this interval l to r.\\n        // you can take any of it\\'s end.(l or r) , i have taken r.\\n        // so choice 1: treat this s[r] as an individual character and count 1 turn for it.\\n        // choice 2: don\\'t count turn for it, wait for characters which are before it and try to merge this s[r] with them.\\n        // so now for choice 2 the new intervals would be if s[i] == s[r] (l <= i < r)\\n        // then l to i (not i-1 bcz we want to merge i\\'th charater) and (i+1 to r-1)\\n\\n        int res = 0;\\n        // choice 1 : dont want to merge\\n        res = 1 + solve(l,r-1,s,mem);\\n\\n        // choice 2 : wanna wait and want to merge\\n        for(int i=l;i<r;i++) {\\n            if(s[i] == s[r])\\n                res = min(res,solve(l,i,s,mem)+solve(i+1,r-1,s,mem));\\n        }\\n\\n        return mem[l][r] = res;\\n    }\\n\\n    int strangePrinter(string s) {\\n        int n = s.length();\\n\\n        vector<vector<int>> mem(n+1,vector<int>(n+1,-1));\\n\\n        return solve(0,n-1,s,mem);\\n    }\\n};\\n// Please do upvote if you understood the solution!!\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986958,
                "title": "c-solution-faster-than-100-00",
                "content": "\\tpublic int StrangePrinter(string s)\\n\\t{\\n\\t\\tint n = s.Length;\\n\\t\\tif (n == 0)\\n\\t\\t\\treturn 0;\\n\\n\\t\\t// dp[i,j] is the minimum number of turns needed to print s[i..j]\\n\\t\\tint[,] dp = new int[n,n];\\n\\t\\tfor (int i = 0; i < n; i++)\\n\\t\\t\\tdp[i,i] = 1;\\n\\n\\t\\tfor (int len = 2; len <= n; len++)\\n\\t\\t{\\n\\t\\t\\tfor (int i = 0; i + len - 1 < n; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint j = i + len - 1;\\n\\t\\t\\t\\tdp[i,j] = dp[i,j - 1] + 1;\\n\\t\\t\\t\\tfor (int k = i; k < j; k++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (s[k] == s[j])\\n\\t\\t\\t\\t\\t\\tdp[i,j] = Math.Min(dp[i,j], dp[i,k] + dp[k + 1,j - 1]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn dp[0,n - 1];\\n\\t}",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "\\tpublic int StrangePrinter(string s)\\n\\t{\\n\\t\\tint n = s.Length;\\n\\t\\tif (n == 0)\\n\\t\\t\\treturn 0;\\n\\n\\t\\t// dp[i,j] is the minimum number of turns needed to print s[i..j]\\n\\t\\tint[,] dp = new int[n,n];\\n\\t\\tfor (int i = 0; i < n; i++)\\n\\t\\t\\tdp[i,i] = 1;\\n\\n\\t\\tfor (int len = 2; len <= n; len++)\\n\\t\\t{\\n\\t\\t\\tfor (int i = 0; i + len - 1 < n; i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint j = i + len - 1;\\n\\t\\t\\t\\tdp[i,j] = dp[i,j - 1] + 1;\\n\\t\\t\\t\\tfor (int k = i; k < j; k++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (s[k] == s[j])\\n\\t\\t\\t\\t\\t\\tdp[i,j] = Math.Min(dp[i,j], dp[i,k] + dp[k + 1,j - 1]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn dp[0,n - 1];\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 2592402,
                "title": "c-using-merge-dp-85-less-t-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        s.erase(unique(s.begin(), s.end()), s.end());\\n        int n = s.length();\\n        \\n        int dp[n][n+1];\\n        memset(dp,0,sizeof(dp));\\n        for(int i = 0;i<n;i++)\\n            dp[i][i+1] = 1;\\n        \\n        for(int k = 2;k<=n;k++)\\n        {\\n            for(int l = 0;l<=(n-k);l++)\\n            {\\n                int r = l+k;\\n                dp[l][r] = INT_MAX;\\n                \\n                if(s[l]==s[r-1])\\n                    dp[l][r] = min(dp[l][r],dp[l+1][r-1]+1);\\n                \\n                for(int m = l+1;m<r;m++)\\n                {\\n                    dp[l][r] = min(dp[l][r],dp[l][m]+dp[m][r]);\\n                    \\n                    if(s[l]==s[m]&&s[m]==s[r-1])\\n                        dp[l][r] = min(dp[l][r],dp[l][m]+dp[m][r]-1);\\n                }\\n            }\\n        }\\n        \\n        return dp[0][n];\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        s.erase(unique(s.begin(), s.end()), s.end());\\n        int n = s.length();\\n        \\n        int dp[n][n+1];\\n        memset(dp,0,sizeof(dp));\\n        for(int i = 0;i<n;i++)\\n            dp[i][i+1] = 1;\\n        \\n        for(int k = 2;k<=n;k++)\\n        {\\n            for(int l = 0;l<=(n-k);l++)\\n            {\\n                int r = l+k;\\n                dp[l][r] = INT_MAX;\\n                \\n                if(s[l]==s[r-1])\\n                    dp[l][r] = min(dp[l][r],dp[l+1][r-1]+1);\\n                \\n                for(int m = l+1;m<r;m++)\\n                {\\n                    dp[l][r] = min(dp[l][r],dp[l][m]+dp[m][r]);\\n                    \\n                    if(s[l]==s[m]&&s[m]==s[r-1])\\n                        dp[l][r] = min(dp[l][r],dp[l][m]+dp[m][r]-1);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2463351,
                "title": "same-as-remove-boxes-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int dp[101][101][101];\\n    int solve(int l, int r, int k, string &s){\\n        if(l>r) return 0;\\n        if(dp[l][r][k]!=-1) return dp[l][r][k];\\n        dp[l][r][k] = solve(l,r-1,0,s) + 1;\\n        for(int i=r-1;i>=l; i--){\\n            if(s[i]==s[r]){\\n                dp[l][r][k] = min(dp[l][r][k], solve(i+1,r-1,0,s)+solve(l,i,k+1,s));\\n            }\\n        }\\n        return dp[l][r][k];\\n    }\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        memset(dp,-1,sizeof(dp));\\n        return solve(0,n-1,0,s);\\n    }\\n};\\n```\\nIt\\'s the same as this question\\n[https://leetcode.com/problems/remove-boxes/](http://)",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int dp[101][101][101];\\n    int solve(int l, int r, int k, string &s){\\n        if(l>r) return 0;\\n        if(dp[l][r][k]!=-1) return dp[l][r][k];\\n        dp[l][r][k] = solve(l,r-1,0,s) + 1;\\n        for(int i=r-1;i>=l; i--){\\n            if(s[i]==s[r]){\\n                dp[l][r][k] = min(dp[l][r][k], solve(i+1,r-1,0,s)+solve(l,i,k+1,s));\\n            }\\n        }\\n        return dp[l][r][k];\\n    }\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        memset(dp,-1,sizeof(dp));\\n        return solve(0,n-1,0,s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2435236,
                "title": "c-simplest-memoization-easy-to-understand",
                "content": "class Solution {\\npublic:\\n\\n    int n;\\n\\t\\n    vector<vector<int>> dp;\\n\\t\\n    int fun(int l, int h, string& s){\\n        if(l == h)                                   // single element\\n            return 1;\\n        else if(l > h)                          // no string\\n            return 0;\\n        if(dp[l][h] != -1)                     // if already solved, return\\n            return dp[l][h];\\n        \\n        \\n        int i = l+1;\\n        while(i <= h && s[i] == s[l])i++;                 // get the first index with different character\\n        \\n        if(i == h+1)                                 // if all characters are same, we reach end of the string\\n            return 1;                                // hence can be printed in 1 move\\n        \\n        int normal = 1 + fun(i,h,s);              // print current same characters in one step and get answer for remaining string\\n\\t\\t\\n        int continue = INT_MAX;               // continue the streak, with possible same characters\\n\\t\\t\\n        for(int j = i; j <= h; j++){\\n            if(s[l] == s[j]){\\n                int x = fun(i,j-1,s) + fun(j,h,s);\\n                cont = min(cont, x);\\n            }\\n        }\\n        \\n        return dp[l][h] = min(cont,normal);              // memoize and return minimum of both options\\n    }\\n    \\n    int strangePrinter(string s) {\\n        n = s.length() ;\\n        dp = vector<vector<int>>(n,vector<int>(n, -1));\\n        return fun(0, n-1, s);\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int n;\\n\\t\\n    vector<vector<int>> dp;\\n\\t\\n    int fun(int l, int h, string& s){\\n        if(l == h)                                   // single element\\n            return 1;\\n        else if(l > h)                          // no string\\n            return 0;\\n        if(dp[l][h] != -1)                     // if already solved, return\\n            return dp[l][h];\\n        \\n        \\n        int i = l+1;\\n        while(i <= h && s[i] == s[l])i++;                 // get the first index with different character\\n        \\n        if(i == h+1)                                 // if all characters are same, we reach end of the string\\n            return 1;                                // hence can be printed in 1 move\\n        \\n        int normal = 1 + fun(i,h,s);              // print current same characters in one step and get answer for remaining string\\n\\t\\t\\n        int continue = INT_MAX;               // continue the streak, with possible same characters\\n\\t\\t\\n        for(int j = i; j <= h; j++){\\n            if(s[l] == s[j]){\\n                int x = fun(i,j-1,s) + fun(j,h,s);\\n                cont = min(cont, x);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2148750,
                "title": "python-solution-with-explanations-and-examples-aimed-at-better-understanding",
                "content": "When I approached this problem, of course I got stuck by the recurrence relation. Worse part is in the testcases, the expected answer is often off by 1 from what you calculate, and the testcase are often long and hard to troubleshoot. When I referred to the forum and explanations on Youtube, I rarely see one with clear explanation. Many went right away to the formula. In the end, I found one word explanation online which gave some simple and understandable examples, and it becomes clear that this problem is not as hard as it appears (at least compared with Leetcode 546 Remove boxes) although both required O(N^3) time.\\n\\nBefore discussing the examples and the recurrence formula, let\\'s get the simpler question out of the way:\\nWhy need the k cuts?\\nWhen I started tackling this problem, I was naive and thought we just need consider whether the end of substring matches the start, with dp relation like this: \\n```\\ndp[i][j] = dp[i+1][j-1] + 1 if s[i] == s[j]\\n```\\n(similar to palindrome problems). This of course is incorrect because when we consider cases which the ends do not match, we might print less if consider what is inside, like in this example:\\n```\\n\"abcacb\"\\n```\\nIn here the best strategy is first print one \"a\", then \"bbbbb\", then \"ccc\" and finally \"a\". 4 steps.\\nI can assure you will see more monstrous cases in the online judge. Note that in the case above, we separately print \"a\" two times, not \"aaaa\" first. This k cuts are exactly for this purpose, to look for the optimal consecutive repeat letter to print\\n\\nNow get to the recurrence relation. A lot of people (including me) are confused about why need a -1 or why not use 1 + dp(i+1,k) +.. etc. in the discussion forum. Instead of complicated notations, I have included two simple examples and explanation in the comments of the code for your reference. I hope this explanation can save you some time and understand the scenario.\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        # First remove repeating characters because they are not relevant\\n        string = \"\"\\n        for c in s:\\n            if not string or c != string[-1]:\\n                string += c\\n        # Then DP:\\n        # base case: single character will be 1\\n        # two characters: will be always 2 in our case\\n        # For the rest, an example is like this:\\n        # abcbac\\n        # we can try to break it down:\\n        # a + bcbac; ab + cbac; abc + bac; abcb + ac; abcba + c\\n        # 1 + 4 = 5, 2 + 3 = 5, 3 + 3 = 6, 3 + 2 = 5, 3 + 1 =  4\\n        # We see that we would be benefited from splitting the word into substring having the same character between i and k\\n        # To construct the dp, we see that dp[\"abcbac\"] = dp[\"bcb\"] + dp[\"ac\"]\\n        # i.e. dp[i][j] = dp[i+1][k-1] + dp[k][j]        \\n        # Before going to the code, let\\'s add another a after the last example:\\n        # abcbaca\\n        # Let\\'s skip the substring splits with ends not being \"a\"\\n        # abcba + ca, abcbaca\\n        # dp[bcb] + dp[aca] = 2 + 2 = 4; dp[bcbac] + dp[\"\"] = 4 + 0 = 4\\n\\t\\t\\n        # So our recursion relation works fine.\\n        dp = [[0 for i in range(len(string))] for j in range(len(string))]\\n        for j in range(len(string)):\\n            for i in range(j,-1,-1):\\n                if i == j:\\n                    dp[i][j] = 1\\n                elif i == j - 1:\\n                    dp[i][j] = 2\\n                else:\\n                    # Base case: string[i] does not appear in string[i+1:j]\\n                    dp[i][j] = 1 + dp[i+1][j]\\n                    # look for all possibilities of using repeats  of i between i+1 and j\\n                    for k in range(i+1,j+1):\\n                        if string[i] == string[k]:\\n                            dp[i][j] = min(dp[i][j], dp[i+1][k-1] + dp[k][j])\\n        return dp[0][len(string)-1]\\n```",
                "solutionTags": [],
                "code": "```\\ndp[i][j] = dp[i+1][j-1] + 1 if s[i] == s[j]\\n```\n```\\n\"abcacb\"\\n```\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        # First remove repeating characters because they are not relevant\\n        string = \"\"\\n        for c in s:\\n            if not string or c != string[-1]:\\n                string += c\\n        # Then DP:\\n        # base case: single character will be 1\\n        # two characters: will be always 2 in our case\\n        # For the rest, an example is like this:\\n        # abcbac\\n        # we can try to break it down:\\n        # a + bcbac; ab + cbac; abc + bac; abcb + ac; abcba + c\\n        # 1 + 4 = 5, 2 + 3 = 5, 3 + 3 = 6, 3 + 2 = 5, 3 + 1 =  4\\n        # We see that we would be benefited from splitting the word into substring having the same character between i and k\\n        # To construct the dp, we see that dp[\"abcbac\"] = dp[\"bcb\"] + dp[\"ac\"]\\n        # i.e. dp[i][j] = dp[i+1][k-1] + dp[k][j]        \\n        # Before going to the code, let\\'s add another a after the last example:\\n        # abcbaca\\n        # Let\\'s skip the substring splits with ends not being \"a\"\\n        # abcba + ca, abcbaca\\n        # dp[bcb] + dp[aca] = 2 + 2 = 4; dp[bcbac] + dp[\"\"] = 4 + 0 = 4\\n\\t\\t\\n        # So our recursion relation works fine.\\n        dp = [[0 for i in range(len(string))] for j in range(len(string))]\\n        for j in range(len(string)):\\n            for i in range(j,-1,-1):\\n                if i == j:\\n                    dp[i][j] = 1\\n                elif i == j - 1:\\n                    dp[i][j] = 2\\n                else:\\n                    # Base case: string[i] does not appear in string[i+1:j]\\n                    dp[i][j] = 1 + dp[i+1][j]\\n                    # look for all possibilities of using repeats  of i between i+1 and j\\n                    for k in range(i+1,j+1):\\n                        if string[i] == string[k]:\\n                            dp[i][j] = min(dp[i][j], dp[i+1][k-1] + dp[k][j])\\n        return dp[0][len(string)-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2059780,
                "title": "python-dp-beat-100-with-detailed-comment",
                "content": "```\\nclass Solution(object):\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        # remove duplicate letters from s.\\n        tmp = []\\n        for c in s:\\n            if len(tmp) == 0 or tmp[-1] != c:\\n                tmp.append(c)\\n        s = \"\".join(tmp)\\n\\n        _m = {}\\n        def _dp(i, j, background):\\n            if j < i:\\n                return 0\\n            elif i == j:\\n                return 1 if background != s[i] else 0\\n            elif (i, j, background) in _m:\\n                return _m[(i, j, background)]\\n            \\n            ans = len(s)\\n            \\n            # shrink s[i:j+1] to s[i_:j_+1] according to the background letter\\n            i_ = i + 1 if s[i] == background else i\\n            j_ = j - 1 if s[j] == background else j\\n            \\n            \\n            if s[i_] == s[j_]:\\n                #  case \"AxxxA\" => best strategy is printing A first\\n                ans = _dp(i_ + 1, j_ - 1, s[i_]) + 1\\n            else:\\n                # otherwise, print first letter, try every possible print length \\n                for p in range(i_, j_ + 1):\\n                    # searching is needed only if s[p] == s[i_]\\n                    # e.g. s=\"ABCDEA\"\\uFF0Cprint \\'A\\' on s[0:1] is equivalent to s[0:5]\\n                    if s[p] != s[i_]:\\n                        continue\\n                    l = _dp(i_, p, s[i_])\\n                    r = _dp(p + 1, j_, background)\\n                    ans = min(ans, l + r + 1)\\n            _m[(i, j, background)] = ans\\n            return ans\\n\\n        return _dp(0, len(s) - 1, \\'\\')\\n```",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution(object):\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        # remove duplicate letters from s.\\n        tmp = []\\n        for c in s:\\n            if len(tmp) == 0 or tmp[-1] != c:\\n                tmp.append(c)\\n        s = \"\".join(tmp)\\n\\n        _m = {}\\n        def _dp(i, j, background):\\n            if j < i:\\n                return 0\\n            elif i == j:\\n                return 1 if background != s[i] else 0\\n            elif (i, j, background) in _m:\\n                return _m[(i, j, background)]\\n            \\n            ans = len(s)\\n            \\n            # shrink s[i:j+1] to s[i_:j_+1] according to the background letter\\n            i_ = i + 1 if s[i] == background else i\\n            j_ = j - 1 if s[j] == background else j\\n            \\n            \\n            if s[i_] == s[j_]:\\n                #  case \"AxxxA\" => best strategy is printing A first\\n                ans = _dp(i_ + 1, j_ - 1, s[i_]) + 1\\n            else:\\n                # otherwise, print first letter, try every possible print length \\n                for p in range(i_, j_ + 1):\\n                    # searching is needed only if s[p] == s[i_]\\n                    # e.g. s=\"ABCDEA\"\\uFF0Cprint \\'A\\' on s[0:1] is equivalent to s[0:5]\\n                    if s[p] != s[i_]:\\n                        continue\\n                    l = _dp(i_, p, s[i_])\\n                    r = _dp(p + 1, j_, background)\\n                    ans = min(ans, l + r + 1)\\n            _m[(i, j, background)] = ans\\n            return ans\\n\\n        return _dp(0, len(s) - 1, \\'\\')\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2012722,
                "title": "c-dp-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    int solve(string s,int i,int j)\\n    {\\n        if(i>j)\\n            return 0;\\n        if(dp[i][j]!=-1)\\n            return dp[i][j];\\n        int ans=0;\\n        while(i<j && s[i+1]==s[i])\\n            i++;\\n        while(i<j && s[j]==s[j-1])\\n        {\\n            j--;\\n        }\\n        ans=1+solve(s,i+1,j);\\n        for(int k=i+1;k<=j;k++)\\n        {\\n            if(s[k]==s[i])\\n            {\\n                int cnt=solve(s,i+1,k-1)+solve(s,k,j);\\n                ans=min(ans,cnt);\\n            }\\n        }\\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s)\\n    {\\n        memset(dp,-1,sizeof(dp));\\n         return solve(s,0,s.size()-1);  \\n    }\\n};\\n// if you like the solution plz upvote.",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "class Solution {\\npublic:\\n    int dp[101][101];\\n    int solve(string s,int i,int j)\\n    {\\n        if(i>j)\\n            return 0;\\n        if(dp[i][j]!=-1)\\n            return dp[i][j];\\n        int ans=0;\\n        while(i<j && s[i+1]==s[i])\\n            i++;\\n        while(i<j && s[j]==s[j-1])\\n        {\\n            j--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1928729,
                "title": "c-dp-solution-with-clean-code",
                "content": "```\\nint strangePrinter(string s) {\\n        int n = s.length();\\n        int dp[n][n];\\n        for(int i=0;i<n;i++) dp[i][i] = 1;\\n        \\n        for(int len=2; len<=n; len++) {\\n            for(int i=0;i<n-len+1;i++) {\\n                int j = i+len-1;\\n                dp[i][j] = INT_MAX;\\n                for(int r=i+1;r<=j;r++)\\n                    dp[i][j] = min(dp[i][j], dp[i][r-1] + dp[r][j] - ((s[i] == s[j]) ? 1 : 0));\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nint strangePrinter(string s) {\\n        int n = s.length();\\n        int dp[n][n];\\n        for(int i=0;i<n;i++) dp[i][i] = 1;\\n        \\n        for(int len=2; len<=n; len++) {\\n            for(int i=0;i<n-len+1;i++) {\\n                int j = i+len-1;\\n                dp[i][j] = INT_MAX;\\n                for(int r=i+1;r<=j;r++)\\n                    dp[i][j] = min(dp[i][j], dp[i][r-1] + dp[r][j] - ((s[i] == s[j]) ? 1 : 0));\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1890066,
                "title": "python-3-solution-dfs-with-memo",
                "content": "Basic Idea:\\ndp is memo, dp[low][high] indicates how many print need from low to high\\nStarting with 0, definitely need 1 print, then this is, as well as swtiching between chars\\ndp[low][high] = 1 + helper(s, low + 1, high)\\nmid = low + 1, then check every same char from low. If same, then find the min between current low-high and (low,mid-1) + (mid+1,high)\\ndp[low][high] = min(dp[low][high], (helper(s, low, mid-1) + helper(s, mid+1, high)))\\nSince s[mid] == s[low], no need to +1 in the equation above.\\nWe only print one more time when chars are different.\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        \\'\\'\\'\\n        Time: O(n^3)\\n        Space: O(n^2)\\n        \\'\\'\\'\\n        n = len(s)\\n        dp = [[float(\\'inf\\')] * n for _ in range(n)]\\n        \\n        \\n        def helper(s, low, high):\\n            if low > high:\\n                return 0\\n            if dp[low][high] != float(\\'inf\\'):\\n                return dp[low][high]\\n            \\n            dp[low][high] = 1 + helper(s, low + 1, high)\\n\\t\\t\\t#high is n-1, so here it has to be high + 1\\n            for mid in range(low + 1, high + 1):\\n                if s[low] == s[mid]:\\n                    dp[low][high] = min(dp[low][high], (helper(s, low, mid-1) + helper(s, mid+1, high)))\\n            return dp[low][high]\\n        \\n        res = helper(s, 0, n-1)\\n        #print(dp)\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        \\'\\'\\'\\n        Time: O(n^3)\\n        Space: O(n^2)\\n        \\'\\'\\'\\n        n = len(s)\\n        dp = [[float(\\'inf\\')] * n for _ in range(n)]\\n        \\n        \\n        def helper(s, low, high):\\n            if low > high:\\n                return 0\\n            if dp[low][high] != float(\\'inf\\'):\\n                return dp[low][high]\\n            \\n            dp[low][high] = 1 + helper(s, low + 1, high)\\n\\t\\t\\t#high is n-1, so here it has to be high + 1\\n            for mid in range(low + 1, high + 1):\\n                if s[low] == s[mid]:\\n                    dp[low][high] = min(dp[low][high], (helper(s, low, mid-1) + helper(s, mid+1, high)))\\n            return dp[low][high]\\n        \\n        res = helper(s, 0, n-1)\\n        #print(dp)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1874654,
                "title": "python-dp-with-tabulation-method-and-explanation",
                "content": "```\\n# iterative Solution\\n# Assume the original input string is S.\\n# assume we initiate a diagonal matrix D like following:\\n#\\n# 0 0\\n# a 0 1\\n# b 0 1 2\\n# c 0 1 2 3\\n# d 0 1 2 3 4\\n# e 0 1 2 3 4 5\\n# (this is the result after calculation. Every position is 0 during initialization)\\n#\\n# at each position D[i][j], the number means the minimum paint needed for substring S[i-j:i]\\n# in other words, S[m:n] need D[n][n-m] minimum paint\\n# Obviously, empty substring \\'\\' needs 0 paint.\\n# \\n# Value at position D[i][j] can be calculate with the following rule:\\n# the character we are considering in the input string is s = S[i-1], compare s to substring\\n# S[i-j:i-1] (the string immediately before s). \\n# If at a position m (m is the enumerate position in substring, starting from 0. \\n# the corresponding substring position is S[i-j:i - j + m + 1]); \\n# We find s == S[i-j:i-1][m], \\n# then the painting can be done by first paint the left part, and connect to the i-1 position, then paint the right \\n# part. The paint needed for left part is: (the left part substring is S[i-j:i-j + m + 1])\\n# D[i - j + m + 1][i - j + m + 1 - (i - j)] = D[i-j+m+1][m+1] (recal S[m:n] needs D[n][n-m] paint)\\n# The right part substring is S[i-j+m+1:i-1], thus paint needed for right part is\\n# D[i-1][i-1 -(i-j+m+1)] = D[i-1][j - m - 2]\\n# So if we paint this way, the total paint needed is left part + right part.\\n# We calculate each possibilities and find the minimum value.\\n# Then update D[i][j] with the minimum value.\\n```\\n\\nCode:\\n```python\\nclass Solution:    \\n    def strangePrinter(self, s: str) -> int:\\n        N = len(s)\\n        dp = [[0]*(i+1) for i in range(N + 1)]        \\n        for i in range(1, N + 1):\\n            cur = s[i - 1] # current char\\n            for j in range(1,i+1):\\n                # at lease, we can paint all the previous string, then paint the last 1 character.\\n                minNum = dp[i-1][j-1] + 1\\n                for m, char in enumerate(s[i-j:i-1]):\\n                    if char == cur:\\n                        leftPart = dp[i-j + m + 1][m + 1]\\n                        rightPart = dp[i-1][j - m - 2]\\n                        numCombine = leftPart + rightPart\\n                        minNum = min(minNum, numCombine)\\n                dp[i][j] = minNum        \\n        return dp[N][-1]\\n```\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming"
                ],
                "code": "```\\n# iterative Solution\\n# Assume the original input string is S.\\n# assume we initiate a diagonal matrix D like following:\\n#\\n# 0 0\\n# a 0 1\\n# b 0 1 2\\n# c 0 1 2 3\\n# d 0 1 2 3 4\\n# e 0 1 2 3 4 5\\n# (this is the result after calculation. Every position is 0 during initialization)\\n#\\n# at each position D[i][j], the number means the minimum paint needed for substring S[i-j:i]\\n# in other words, S[m:n] need D[n][n-m] minimum paint\\n# Obviously, empty substring \\'\\' needs 0 paint.\\n# \\n# Value at position D[i][j] can be calculate with the following rule:\\n# the character we are considering in the input string is s = S[i-1], compare s to substring\\n# S[i-j:i-1] (the string immediately before s). \\n# If at a position m (m is the enumerate position in substring, starting from 0. \\n# the corresponding substring position is S[i-j:i - j + m + 1]); \\n# We find s == S[i-j:i-1][m], \\n# then the painting can be done by first paint the left part, and connect to the i-1 position, then paint the right \\n# part. The paint needed for left part is: (the left part substring is S[i-j:i-j + m + 1])\\n# D[i - j + m + 1][i - j + m + 1 - (i - j)] = D[i-j+m+1][m+1] (recal S[m:n] needs D[n][n-m] paint)\\n# The right part substring is S[i-j+m+1:i-1], thus paint needed for right part is\\n# D[i-1][i-1 -(i-j+m+1)] = D[i-1][j - m - 2]\\n# So if we paint this way, the total paint needed is left part + right part.\\n# We calculate each possibilities and find the minimum value.\\n# Then update D[i][j] with the minimum value.\\n```\n```python\\nclass Solution:    \\n    def strangePrinter(self, s: str) -> int:\\n        N = len(s)\\n        dp = [[0]*(i+1) for i in range(N + 1)]        \\n        for i in range(1, N + 1):\\n            cur = s[i - 1] # current char\\n            for j in range(1,i+1):\\n                # at lease, we can paint all the previous string, then paint the last 1 character.\\n                minNum = dp[i-1][j-1] + 1\\n                for m, char in enumerate(s[i-j:i-1]):\\n                    if char == cur:\\n                        leftPart = dp[i-j + m + 1][m + 1]\\n                        rightPart = dp[i-1][j - m - 2]\\n                        numCombine = leftPart + rightPart\\n                        minNum = min(minNum, numCombine)\\n                dp[i][j] = minNum        \\n        return dp[N][-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1851397,
                "title": "dp-memoization",
                "content": "```\\nclass Solution {\\npublic:\\n    int dp[103][103];\\n    int solve(int i , int j , string s){\\n        if(i==j) return 1;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        int res=INT_MAX;\\n        for(int k=i;k<j;k++){\\n            res=min(res,solve(i,k,s)+solve(k+1,j,s));\\n        }\\n        return  dp[i][j]=s[i]==s[j] ? res-1 : res;\\n    }\\n    int strangePrinter(string s) {\\n        s.erase(unique(s.begin(), s.end()), s.end());// converting aaabbb -> ab\\n        memset (dp,-1,sizeof dp);\\n        int n=s.size();\\n        return solve(0,n-1,s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int dp[103][103];\\n    int solve(int i , int j , string s){\\n        if(i==j) return 1;\\n        if(dp[i][j]!=-1) return dp[i][j];\\n        int res=INT_MAX;\\n        for(int k=i;k<j;k++){\\n            res=min(res,solve(i,k,s)+solve(k+1,j,s));\\n        }\\n        return  dp[i][j]=s[i]==s[j] ? res-1 : res;\\n    }\\n    int strangePrinter(string s) {\\n        s.erase(unique(s.begin(), s.end()), s.end());// converting aaabbb -> ab\\n        memset (dp,-1,sizeof dp);\\n        int n=s.size();\\n        return solve(0,n-1,s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1090801,
                "title": "very-simple-cpp-recursion-memoization",
                "content": "```\\nint dp[101][101][27],n,a[101];\\nclass Solution {\\npublic:\\n    int solve(int l,int r,int clr){\\n        if(l>r)return 0;\\n        if(l==r)return clr!=a[l];\\n        int &res=dp[l][r][clr];\\n        if(res!=-1)return res;\\n        if(a[l]==clr)return solve(l+1,r,clr);\\n        res=1000;\\n        for(int j=l;j<=r;j++){\\n            res=min(res,1+solve(l,j,a[l])+solve(j+1,r,clr));\\n        }\\n        return res;\\n    }\\n    int strangePrinter(string s) {\\n        memset(dp,-1,sizeof(dp));\\n        n=s.size();\\n        for(int i=0;i<n;i++)a[i]=s[i]-\\'a\\'+1;\\n        return solve(0,n-1,0);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nint dp[101][101][27],n,a[101];\\nclass Solution {\\npublic:\\n    int solve(int l,int r,int clr){\\n        if(l>r)return 0;\\n        if(l==r)return clr!=a[l];\\n        int &res=dp[l][r][clr];\\n        if(res!=-1)return res;\\n        if(a[l]==clr)return solve(l+1,r,clr);\\n        res=1000;\\n        for(int j=l;j<=r;j++){\\n            res=min(res,1+solve(l,j,a[l])+solve(j+1,r,clr));\\n        }\\n        return res;\\n    }\\n    int strangePrinter(string s) {\\n        memset(dp,-1,sizeof(dp));\\n        n=s.size();\\n        for(int i=0;i<n;i++)a[i]=s[i]-\\'a\\'+1;\\n        return solve(0,n-1,0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 850170,
                "title": "java-dp-memo-same-as-remove-boxes",
                "content": "\\n```\\npublic int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        return dfs(s, dp, 0, n - 1);\\n    }\\n    \\n    private int dfs(String s, int[][] dp, int start, int end) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        if (start == end) {\\n            dp[start][end] = 1;\\n            return 1;\\n        }\\n        \\n        if (dp[start][end] != 0) {\\n            return dp[start][end];\\n        }\\n        \\n        dp[start][end] = dfs(s, dp, start + 1, end) + 1;\\n        for (int i = start + 1; i <= end; i++) {\\n            if (s.charAt(i) == s.charAt(start)) {\\n                dp[start][end] = Math.min(dp[start][end], dfs(s, dp, start + 1, i - 1) + dfs(s, dp, i, end));\\n            }\\n        }\\n        return dp[start][end];\\n    }",
                "solutionTags": [],
                "code": "\\n```\\npublic int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        return dfs(s, dp, 0, n - 1);\\n    }\\n    \\n    private int dfs(String s, int[][] dp, int start, int end) {\\n        if (start > end) {\\n            return 0;\\n        }\\n        if (start == end) {\\n            dp[start][end] = 1;\\n            return 1;\\n        }\\n        \\n        if (dp[start][end] != 0) {\\n            return dp[start][end];\\n        }\\n        \\n        dp[start][end] = dfs(s, dp, start + 1, end) + 1;\\n        for (int i = start + 1; i <= end; i++) {\\n            if (s.charAt(i) == s.charAt(start)) {\\n                dp[start][end] = Math.min(dp[start][end], dfs(s, dp, start + 1, i - 1) + dfs(s, dp, i, end));\\n            }\\n        }\\n        return dp[start][end];\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 754589,
                "title": "dp-solution-java-o-n3",
                "content": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if(s.length() == 0)\\n            return 0;\\n        int [][] dp  =new int [s.length()][s.length()];\\n        for(int i = s.length()-1 ;i>=0;i--){\\n            for(int j = i; j< s.length();j++){\\n                if(i == j)\\n                    dp[i][j] =1;\\n                else if(s.charAt(i) == s.charAt(i+1))\\n                    dp[i][j] = dp[i+1][j];\\n                else{\\n                    dp[i][j] = dp[i+1][j]+1;\\n                    for(int k = i+1;k<=j;k++){\\n                        if(s.charAt(k) == s.charAt(i))\\n                            dp[i][j] = Math.min(dp[i][j], dp[i+1][k-1] + dp[k][j]);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][s.length()-1];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        if(s.length() == 0)\\n            return 0;\\n        int [][] dp  =new int [s.length()][s.length()];\\n        for(int i = s.length()-1 ;i>=0;i--){\\n            for(int j = i; j< s.length();j++){\\n                if(i == j)\\n                    dp[i][j] =1;\\n                else if(s.charAt(i) == s.charAt(i+1))\\n                    dp[i][j] = dp[i+1][j];\\n                else{\\n                    dp[i][j] = dp[i+1][j]+1;\\n                    for(int k = i+1;k<=j;k++){\\n                        if(s.charAt(k) == s.charAt(i))\\n                            dp[i][j] = Math.min(dp[i][j], dp[i+1][k-1] + dp[k][j]);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][s.length()-1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 537336,
                "title": "java-dp-sol",
                "content": "```\\nclass Solution {\\n    int dp[][][];\\n    boolean visit[][][];\\n    public int strangePrinter(String s) {\\n        int n=s.length();\\n        visit=new boolean[n][n][n];\\n        dp=new int[n][n][n];\\n        int nums[]=new int[n];\\n        for(int i=0;i<s.length();i++)nums[i]=s.charAt(i)-\\'a\\';\\n        return dfs(nums,0,nums.length-1,0);\\n    }\\n    \\n    public int dfs(int nums[],int left,int right,int n){\\n        if(left>right)return 0;\\n        if(left==right){\\n            return (1);\\n        }\\n        int min=Integer.MAX_VALUE;\\n        for(int i=left+1;i<=right;i++){\\n            if(nums[i]==nums[left]){\\n                if(!visit[i][right][1+n]){\\n                    dp[i][right][1+n]=dfs(nums,i,right,1+n);\\n                    visit[i][right][1+n]=true;\\n                }\\n                if(!visit[left+1][i-1][0]){\\n                    dp[left+1][i-1][0]=dfs(nums,left+1,i-1,0);\\n                    visit[left+1][i-1][0]=true;\\n                }\\n                min=Math.min(min,dp[i][right][1+n]+dp[left+1][i-1][0]);\\n            }\\n        }\\n        if(!visit[left+1][right][0]){\\n            dp[left+1][right][0]=dfs(nums,left+1,right,0);\\n            visit[left+1][right][0]=true;\\n        }\\n        min=Math.min(min,(1)+dp[left+1][right][0]);\\n        return min;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    int dp[][][];\\n    boolean visit[][][];\\n    public int strangePrinter(String s) {\\n        int n=s.length();\\n        visit=new boolean[n][n][n];\\n        dp=new int[n][n][n];\\n        int nums[]=new int[n];\\n        for(int i=0;i<s.length();i++)nums[i]=s.charAt(i)-\\'a\\';\\n        return dfs(nums,0,nums.length-1,0);\\n    }\\n    \\n    public int dfs(int nums[],int left,int right,int n){\\n        if(left>right)return 0;\\n        if(left==right){\\n            return (1);\\n        }\\n        int min=Integer.MAX_VALUE;\\n        for(int i=left+1;i<=right;i++){\\n            if(nums[i]==nums[left]){\\n                if(!visit[i][right][1+n]){\\n                    dp[i][right][1+n]=dfs(nums,i,right,1+n);\\n                    visit[i][right][1+n]=true;\\n                }\\n                if(!visit[left+1][i-1][0]){\\n                    dp[left+1][i-1][0]=dfs(nums,left+1,i-1,0);\\n                    visit[left+1][i-1][0]=true;\\n                }\\n                min=Math.min(min,dp[i][right][1+n]+dp[left+1][i-1][0]);\\n            }\\n        }\\n        if(!visit[left+1][right][0]){\\n            dp[left+1][right][0]=dfs(nums,left+1,right,0);\\n            visit[left+1][right][0]=true;\\n        }\\n        min=Math.min(min,(1)+dp[left+1][right][0]);\\n        return min;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 472653,
                "title": "c-solution-dfs-memo",
                "content": "```\\n    public int StrangePrinter(string s) {\\n        if(string.IsNullOrEmpty(s))return 0;\\n        int[][] memo=new int[s.Length][];\\n        for(int i=0;i<memo.Length;i++)\\n            memo[i]=new int[s.Length];\\n        helper(memo,s,0,s.Length-1);\\n        return memo[0][s.Length-1];\\n    }\\n    int helper(int[][] memo,string s,int i,int j)\\n    {\\n        if(i>j)return 0;\\n        if(memo[i][j]>0)return memo[i][j];\\n        int ans=helper(memo,s,i+1,j)+1;\\n        for(int k=i+1;k<=j;k++)\\n        {\\n            if(s[k]==s[i])\\n            {\\n                ans=Math.Min(ans,helper(memo,s,i,k-1)+helper(memo,s,k+1,j));\\n            }\\n        }\\n        memo[i][j]=ans;\\n        return ans;\\n    }\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\n    public int StrangePrinter(string s) {\\n        if(string.IsNullOrEmpty(s))return 0;\\n        int[][] memo=new int[s.Length][];\\n        for(int i=0;i<memo.Length;i++)\\n            memo[i]=new int[s.Length];\\n        helper(memo,s,0,s.Length-1);\\n        return memo[0][s.Length-1];\\n    }\\n    int helper(int[][] memo,string s,int i,int j)\\n    {\\n        if(i>j)return 0;\\n        if(memo[i][j]>0)return memo[i][j];\\n        int ans=helper(memo,s,i+1,j)+1;\\n        for(int k=i+1;k<=j;k++)\\n        {\\n            if(s[k]==s[i])\\n            {\\n                ans=Math.Min(ans,helper(memo,s,i,k-1)+helper(memo,s,k+1,j));\\n            }\\n        }\\n        memo[i][j]=ans;\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 350087,
                "title": "dp-n-3-move-diagonal-wise-c",
                "content": "Dynamics by substring starting at `i` and ending at `j` inclusive.\\nThe general formula for such problems is `dp(i,j) = min(dp[i][k] + dp[k+1][j] - f(..), where k <- [i,j-1])`.\\nWhat is the meaning of this `f` for this particula problem?\\n`f` should return a compensation for going one level deeper. So if we consider substring `aaba` and go one level down to substrings `aa` and `ba` we miss the opportunuty to paint the whole range from `a` to `a`. The cost of this operation is 1.\\n\\n```C++\\n    int compensation(int i, int j, int k, string& s) {\\n        return int(s[i] == s[j]);\\n    }\\n    \\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        if (n == 0) return 0;\\n        // dp[ileft][iright] - answer for substring \\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        for (int d1 = 0; d1 < n; ++d1) {\\n            for (int d2 = 0; d2 + d1 < n; ++d2) {\\n                // move by diagonals from the main one up\\n                // due to the structure of formula\\n                int i = d2;\\n                int j = d2 + d1;\\n                if (i == j) dp[i][j] = 1;\\n                else dp[i][j] = 1e6;\\n                for (int k = i; k < j; ++k)\\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] - compensation(i,j,k, s));\\n            }\\n        }\\n        return dp[0].back();\\n    }\\n```",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```C++\\n    int compensation(int i, int j, int k, string& s) {\\n        return int(s[i] == s[j]);\\n    }\\n    \\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        if (n == 0) return 0;\\n        // dp[ileft][iright] - answer for substring \\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        for (int d1 = 0; d1 < n; ++d1) {\\n            for (int d2 = 0; d2 + d1 < n; ++d2) {\\n                // move by diagonals from the main one up\\n                // due to the structure of formula\\n                int i = d2;\\n                int j = d2 + d1;\\n                if (i == j) dp[i][j] = 1;\\n                else dp[i][j] = 1e6;\\n                for (int k = i; k < j; ++k)\\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] - compensation(i,j,k, s));\\n            }\\n        }\\n        return dp[0].back();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 200601,
                "title": "my-c-o-n-2-solution",
                "content": "```\\npublic class Solution \\n{\\n    public int StrangePrinter(string s) \\n    {\\n        if(s.Length < 2) return s.Length;\\n        var dp = new int [s.Length, s.Length];\\n        \\n        return this.Print(dp, 0, s.Length - 1, s);        \\n    }\\n    \\n    private int Print(int[,] dp, int lo, int hi, string s)\\n    {\\n        if(lo > hi) return 0;\\n        if(dp[lo, hi] == 0)\\n        {\\n            \\n            // initializing with the worst case, \\n            // which is that the char does not exist\\n            // so abcd == print(\"abc\") + 1\\n            dp[lo, hi] = this.Print(dp, lo, hi - 1, s) + 1;\\n            \\n            // now check if the s[hi] exists in from s[lo..hi-1] \\n            for(int i = lo; i < hi; i++)\\n            {\\n                if(s[hi] == s[i])\\n                {\\n                    // eg (cbcaab)\\n                    // check the value of the print(c) + print(bcaa) \\n                    // with the current minimum\\n                    dp[lo, hi] = Math.Min(dp[lo, hi], this.Print(dp, lo, i - 1, s) + this.Print(dp, i, hi - 1, s));\\n                }\\n            }\\n        }\\n        \\n        return dp[lo, hi];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{\\n    public int StrangePrinter(string s) \\n    {\\n        if(s.Length < 2) return s.Length;\\n        var dp = new int [s.Length, s.Length];\\n        \\n        return this.Print(dp, 0, s.Length - 1, s);        \\n    }\\n    \\n    private int Print(int[,] dp, int lo, int hi, string s)\\n    {\\n        if(lo > hi) return 0;\\n        if(dp[lo, hi] == 0)\\n        {\\n            \\n            // initializing with the worst case, \\n            // which is that the char does not exist\\n            // so abcd == print(\"abc\") + 1\\n            dp[lo, hi] = this.Print(dp, lo, hi - 1, s) + 1;\\n            \\n            // now check if the s[hi] exists in from s[lo..hi-1] \\n            for(int i = lo; i < hi; i++)\\n            {\\n                if(s[hi] == s[i])\\n                {\\n                    // eg (cbcaab)\\n                    // check the value of the print(c) + print(bcaa) \\n                    // with the current minimum\\n                    dp[lo, hi] = Math.Min(dp[lo, hi], this.Print(dp, lo, i - 1, s) + this.Print(dp, i, hi - 1, s));\\n                }\\n            }\\n        }\\n        \\n        return dp[lo, hi];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 171837,
                "title": "bottom-up-dp-solution-in-c-29ms",
                "content": "        const int n = s.length(); if (n == 0) {return 0;}\\n        \\n        vector<vector<int>> memo(n, vector<int>(n, INT_MAX));\\n        for (int i = n-1; i >= 0; i--) {\\n            memo[i][i] = 1;\\n            for (int j = i+1; j < n; j++) {\\n                for (int k = i; k < j; k++) {\\n                    memo[i][j] = min(memo[i][j], memo[i][k] + memo[k+1][j]);\\n                }\\n                \\n                if (s[i] == s[j]) {\\n                    memo[i][j] = min(memo[i][j], min(memo[i][j-1], memo[i+1][j]));\\n                }\\n            }\\n        }\\n        \\n        return memo[0][n-1];\\n\\t\\t\\t\\t\\nWe consider substrings starting at index i and ending at index j included. We traverse this substring by decomposing it into two substrings and finding the optimal subdivision. This is what the loop with index k does. Outside the loop, we check whether the characters at the two ends of the substring are the same - if so, we could have generated the substring by first printing a big block, like in the first example, and then printing over it. ",
                "solutionTags": [],
                "code": "        const int n = s.length(); if (n == 0) {return 0;}\\n        \\n        vector<vector<int>> memo(n, vector<int>(n, INT_MAX));\\n        for (int i = n-1; i >= 0; i--) {\\n            memo[i][i] = 1;\\n            for (int j = i+1; j < n; j++) {\\n                for (int k = i; k < j; k++) {\\n                    memo[i][j] = min(memo[i][j], memo[i][k] + memo[k+1][j]);\\n                }\\n                \\n                if (s[i] == s[j]) {\\n                    memo[i][j] = min(memo[i][j], min(memo[i][j-1], memo[i+1][j]));\\n                }\\n            }\\n        }\\n        \\n        return memo[0][n-1];\\n\\t\\t\\t\\t\\nWe consider substrings starting at index i and ending at index j included. We traverse this substring by decomposing it into two substrings and finding the optimal subdivision. This is what the loop with index k does. Outside the loop, we check whether the characters at the two ends of the substring are the same - if so, we could have generated the substring by first printing a big block, like in the first example, and then printing over it. ",
                "codeTag": "Unknown"
            },
            {
                "id": 168121,
                "title": "546-remove-boxes-and-664-strange-printer-see-the-similarity",
                "content": "\\n546. Remove Boxes and 664. Strange Printer are very similar :\\n  We want to maximize the number and length of continuous subsequences of the same value. If  dp(l, r) represents the optimal value for array[ l : r+1 ],  If there is a point array[m] in 1< m < r that is the same as array[r], it will improve the result.  Then we recur on array[l : m + 1] and array[ m + 1 : r - 1].\\n\\t\\nThe following recursions for the two problems are almost the same. Once you realize that a problem is actually asking you to optimize the number and length of continuous subsequence, you can just use the formula.\\n```\\n546\\n    for k in range(l+1, r-1):\\n        if boxes[k] == boxes[r]:\\n            res = max(res, dfs(l, k, k+1) + dfs(k+1, r-1, 0))\\n664\\n      for k in range(l, r):\\n            if s[k] == s[r]:\\n                result = min(result, dp(l, k) + dp(k + 1, r - 1))\\n```\\nawice\\'s solution\\nhttps://leetcode.com/problems/strange-printer/discuss/106795/Python-Straightforward-DP-with-Explanation\\n```\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        memo = {}\\n        def dp(i, j):\\n            if i > j:\\n                return 0\\n            if (i, j) not in memo:\\n                result = dp(i, j - 1) + 1\\n                for k in range(i, j):\\n                    if s[k] == s[j]:\\n                        result = min(result, dp(i, k) + dp(k + 1, j - 1))\\n                memo[(i, j)] = result\\n            return memo[(i, j)]\\n        return dp(0, len(s) - 1)\\n```\\n\\t\\n546. Remove Boxes\\nhttps://leetcode.com/problems/remove-boxes/discuss/168101/108ms-Python-top-down-DP-+-DFS\\n```\\n    def removeBoxes(self, boxes):\\n        def dfs(l, r, k):\\n            if l > r:\\n                return 0\\n            if (l, r, k) not in memo:\\n                while r > l and boxes[r] == boxes[r-1]:\\n                    k += 1\\n                    r -= 1\\n                while l < r and boxes[l] == boxes[r]:\\n                    k += 1\\n                    l += 1\\n                res = (k+1)**2 + dfs(l, r-1, 0)\\n                for i in range(l+1, r-1):\\n                    if boxes[i] == boxes[r]:\\n                        res = max(res, dfs(l, i, k+1) + dfs(i+1, r-1, 0))\\n                memo[l, r, k] = res\\n            return memo[l, r, k]\\n        memo = {}\\n        return dfs(0, len(boxes) - 1, 0)\\n```\\n\\t",
                "solutionTags": [],
                "code": "```\\n546\\n    for k in range(l+1, r-1):\\n        if boxes[k] == boxes[r]:\\n            res = max(res, dfs(l, k, k+1) + dfs(k+1, r-1, 0))\\n664\\n      for k in range(l, r):\\n            if s[k] == s[r]:\\n                result = min(result, dp(l, k) + dp(k + 1, r - 1))\\n```\n```\\n    def strangePrinter(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        memo = {}\\n        def dp(i, j):\\n            if i > j:\\n                return 0\\n            if (i, j) not in memo:\\n                result = dp(i, j - 1) + 1\\n                for k in range(i, j):\\n                    if s[k] == s[j]:\\n                        result = min(result, dp(i, k) + dp(k + 1, j - 1))\\n                memo[(i, j)] = result\\n            return memo[(i, j)]\\n        return dp(0, len(s) - 1)\\n```\n```\\n    def removeBoxes(self, boxes):\\n        def dfs(l, r, k):\\n            if l > r:\\n                return 0\\n            if (l, r, k) not in memo:\\n                while r > l and boxes[r] == boxes[r-1]:\\n                    k += 1\\n                    r -= 1\\n                while l < r and boxes[l] == boxes[r]:\\n                    k += 1\\n                    l += 1\\n                res = (k+1)**2 + dfs(l, r-1, 0)\\n                for i in range(l+1, r-1):\\n                    if boxes[i] == boxes[r]:\\n                        res = max(res, dfs(l, i, k+1) + dfs(i+1, r-1, 0))\\n                memo[l, r, k] = res\\n            return memo[l, r, k]\\n        memo = {}\\n        return dfs(0, len(boxes) - 1, 0)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 129082,
                "title": "c-solution-compare-with-546-remove-boxes",
                "content": "#### Feel the similarity\\n```\\n    int strangePrinter(string s) {\\n         if(s.empty()) return 0;\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n,0));    \\n        function<int(int, int)> dfs =[&](int i, int j){           \\n            if (i > j) return 0; \\n             if (dp[i][j]) return dp[i][j];\\n            dp[i][j] = dfs(i, j - 1)+1;     \\n            for (int pos = i; pos < j; pos++) {\\n                if (s[pos] == s[j]) dp[i][j]= min(dp[i][j], dfs(i, pos) + dfs(pos+1, j-1));\\n            }\\n            return dp[i][j]; \\n        };\\n        \\n      return dfs(0, n-1);\\n    }\\n```\\n\\n#### 546 Remove Boxes\\n```\\n    int removeBoxes(vector<int>& s) {     \\n       if(s.empty()) return 0;       \\n \\n        int dp[100][100][100] = {0};\\n        function<int(int, int , int)> dfs =[&](int i, int j, int k){           \\n            if (i > j) return 0; \\n            if (dp[i][j][k]) return dp[i][j][k];\\n            while(j>i&&s[j]==s[j-1]) j--,k++;            \\n            dp[i][j][k] = dfs(i, j - 1, 0) + (1 + k) * (1 + k);\\n            for (int pos = i; pos < j; pos++) {\\n                if (s[pos] == s[j]) dp[i][j][k] = max(dp[i][j][k], dfs(i, pos, k+1) + dfs(pos + 1, j - 1, 0));\\n            }\\n            return dp[i][j][k];\\n        };  \\n        return dfs(0, s.size()-1, 0);\\n    }\\n``` \\n\\n\\n",
                "solutionTags": [],
                "code": "```\\n    int strangePrinter(string s) {\\n         if(s.empty()) return 0;\\n        int n = s.size();\\n        vector<vector<int>> dp(n, vector<int>(n,0));    \\n        function<int(int, int)> dfs =[&](int i, int j){           \\n            if (i > j) return 0; \\n             if (dp[i][j]) return dp[i][j];\\n            dp[i][j] = dfs(i, j - 1)+1;     \\n            for (int pos = i; pos < j; pos++) {\\n                if (s[pos] == s[j]) dp[i][j]= min(dp[i][j], dfs(i, pos) + dfs(pos+1, j-1));\\n            }\\n            return dp[i][j]; \\n        };\\n        \\n      return dfs(0, n-1);\\n    }\\n```\n```\\n    int removeBoxes(vector<int>& s) {     \\n       if(s.empty()) return 0;       \\n \\n        int dp[100][100][100] = {0};\\n        function<int(int, int , int)> dfs =[&](int i, int j, int k){           \\n            if (i > j) return 0; \\n            if (dp[i][j][k]) return dp[i][j][k];\\n            while(j>i&&s[j]==s[j-1]) j--,k++;            \\n            dp[i][j][k] = dfs(i, j - 1, 0) + (1 + k) * (1 + k);\\n            for (int pos = i; pos < j; pos++) {\\n                if (s[pos] == s[j]) dp[i][j][k] = max(dp[i][j][k], dfs(i, pos, k+1) + dfs(pos + 1, j - 1, 0));\\n            }\\n            return dp[i][j][k];\\n        };  \\n        return dfs(0, s.size()-1, 0);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 106789,
                "title": "most-posts-are-wrong-or-am-i-wrong-uff1f",
                "content": "**I think most of the solutions posted here using 2-dimensional dp are wrong, but accidentally pass all the test cases:**\\nMost of the solutions are using:\\n```dp[i][j]``` : minimum print for the interval ```[i, j]``` or ```[i, j)```, and use that to do recursion. But I think this is incorrect: since it also depend on the printing of the previous time. For example, if the ```[i,j]``` has been printed by ```'a'``` for the last time, then it is no longer the same as the initial state, since we do not need to print ```'a'``` within this interval again. \\nHere is my solution:\\nI use a 3D array ```dp[i][j][k]``` do denote the minimum print need for the interval ```[j, k)``` if this interval was printed by ```char('a' + i -1)``` (```i = 0``` if this it has not being printed).\\nThen during the recursion, not only we need to consider about indices ```t``` s.t. ```s[t] == s[j]``` but also need to consider ```t``` s.t. ```s[t] == char('a' + i -1)```.\\nAm I wrong? (*Maybe I am wrong.*)\\nBelow is my solution:\\n```\\ntypedef vector<int> vi;\\nclass Solution {\\n    int dp [27][105][105], pos[27][105]; \\n    string st;\\n    int n;\\n    int cnt(int ic,int i,int j){\\n        if(i>j) return 0;\\n        if(dp[ic][i][j] >= 0) return dp[ic][i][j];\\n        if(ic == (int)(st[i]-'a' + 1)) return dp[ic][i][j] = cnt(ic,i+1,j);\\n        if(ic == (int)(st[j]-'a' + 1)) return dp[ic][i][j] = cnt(ic,i,j-1);\\n        int kc = (int)(st[i]-'a' + 1), k = min(pos[kc][i],  pos[ic][i]);\\n        dp[ic][i][j] = n;\\n        while(true){\\n            k = min(j+1, k);\\n            dp[ic][i][j] = min(dp[ic][i][j], 1 + cnt(kc,i+1,k-1) + cnt(ic,k+1,j));\\n            if(k >= j) break;\\n            k = min(pos[kc][k],  pos[ic][k]);\\n        }\\n        \\n        return dp[ic][i][j];\\n        \\n    }\\npublic:\\n    int strangePrinter(string s) {\\n        if(s.empty()) return 0;\\n        st += s[0];\\n        for(int i=1;i<s.size();++i) if(s[i]!=s[i-1]) st+=s[i];\\n        n = st.size();\\n        memset(dp,-1,sizeof(dp));\\n        memset(pos,0,sizeof(pos));\\n        map<char,int> mp;\\n        for(int i=0;i<27;++i) pos[i][n-1] = n;\\n        for(int j=n-2;j>=0;--j) for(int i=0;i<27;++i){\\n            if(i == (int)(st[j+1]- 'a' + 1)) pos[i][j] = j+1;\\n            else pos[i][j] = pos[i][j+1];\\n        }\\n        return cnt(0,0,n-1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```dp[i][j]```\n```[i, j]```\n```[i, j)```\n```[i,j]```\n```'a'```\n```'a'```\n```dp[i][j][k]```\n```[j, k)```\n```char('a' + i -1)```\n```i = 0```\n```t```\n```s[t] == s[j]```\n```t```\n```s[t] == char('a' + i -1)```\n```\\ntypedef vector<int> vi;\\nclass Solution {\\n    int dp [27][105][105], pos[27][105]; \\n    string st;\\n    int n;\\n    int cnt(int ic,int i,int j){\\n        if(i>j) return 0;\\n        if(dp[ic][i][j] >= 0) return dp[ic][i][j];\\n        if(ic == (int)(st[i]-'a' + 1)) return dp[ic][i][j] = cnt(ic,i+1,j);\\n        if(ic == (int)(st[j]-'a' + 1)) return dp[ic][i][j] = cnt(ic,i,j-1);\\n        int kc = (int)(st[i]-'a' + 1), k = min(pos[kc][i],  pos[ic][i]);\\n        dp[ic][i][j] = n;\\n        while(true){\\n            k = min(j+1, k);\\n            dp[ic][i][j] = min(dp[ic][i][j], 1 + cnt(kc,i+1,k-1) + cnt(ic,k+1,j));\\n            if(k >= j) break;\\n            k = min(pos[kc][k],  pos[ic][k]);\\n        }\\n        \\n        return dp[ic][i][j];\\n        \\n    }\\npublic:\\n    int strangePrinter(string s) {\\n        if(s.empty()) return 0;\\n        st += s[0];\\n        for(int i=1;i<s.size();++i) if(s[i]!=s[i-1]) st+=s[i];\\n        n = st.size();\\n        memset(dp,-1,sizeof(dp));\\n        memset(pos,0,sizeof(pos));\\n        map<char,int> mp;\\n        for(int i=0;i<27;++i) pos[i][n-1] = n;\\n        for(int j=n-2;j>=0;--j) for(int i=0;i<27;++i){\\n            if(i == (int)(st[j+1]- 'a' + 1)) pos[i][j] = j+1;\\n            else pos[i][j] = pos[i][j+1];\\n        }\\n        return cnt(0,0,n-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 106799,
                "title": "c-16ms-short-dp-with-a-simple-optimization-and-an-open-question",
                "content": "```\\n//Open question: I think if there only 2 letters, not 26. \\n//There is a O(n) solution.\\n//Can anyone prove it?\\n\\nclass Solution {\\n\\t\\npublic:\\n\\tint strangePrinter(string s) {\\n\\t\\tif (s.empty()) return 0;\\n\\n\\t\\t//remove consecutive duplicates\\n\\t\\tstring t(1, s[0]);\\n\\t\\tfor (int i = 1; i < s.size(); ++i)\\n\\t\\t\\tif (s[i] != t.back()) t.push_back(s[i]);\\n\\n\\t\\t//dp[j][i] is the result for [i, j] of the input string. Yes, it is dp[j][i], NOT dp[i][j]\\n\\t\\tint N = t.size();\\n\\t\\tvector<vector<int>> dp(N, vector<int>(N, 0));\\n\\t\\tdp[0][0] = 1;\\n\\n\\t\\tfor (int i = 1; i < N; ++i)\\n\\t\\t{\\n\\t\\t\\tfor (int j =i; j>=0; --j) //walk backwards\\n\\t\\t\\t{\\n\\t\\t\\t\\tdp[i][j] = dp[i - 1][j] + 1;\\n\\n\\t\\t\\t\\tfor (int k = j; k < i; k++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (t[k] == t[i])\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tdp[i][j] = min(dp[i][j], dp[k][j] + dp[i-1][k+1]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t    }\\n\\t\\t}\\n\\n\\t\\treturn dp[N - 1][0];\\n\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\n//Open question: I think if there only 2 letters, not 26. \\n//There is a O(n) solution.\\n//Can anyone prove it?\\n\\nclass Solution {\\n\\t\\npublic:\\n\\tint strangePrinter(string s) {\\n\\t\\tif (s.empty()) return 0;\\n\\n\\t\\t//remove consecutive duplicates\\n\\t\\tstring t(1, s[0]);\\n\\t\\tfor (int i = 1; i < s.size(); ++i)\\n\\t\\t\\tif (s[i] != t.back()) t.push_back(s[i]);\\n\\n\\t\\t//dp[j][i] is the result for [i, j] of the input string. Yes, it is dp[j][i], NOT dp[i][j]\\n\\t\\tint N = t.size();\\n\\t\\tvector<vector<int>> dp(N, vector<int>(N, 0));\\n\\t\\tdp[0][0] = 1;\\n\\n\\t\\tfor (int i = 1; i < N; ++i)\\n\\t\\t{\\n\\t\\t\\tfor (int j =i; j>=0; --j) //walk backwards\\n\\t\\t\\t{\\n\\t\\t\\t\\tdp[i][j] = dp[i - 1][j] + 1;\\n\\n\\t\\t\\t\\tfor (int k = j; k < i; k++)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tif (t[k] == t[i])\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tdp[i][j] = min(dp[i][j], dp[k][j] + dp[i-1][k+1]);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t    }\\n\\t\\t}\\n\\n\\t\\treturn dp[N - 1][0];\\n\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4094904,
                "title": "super-straightforward-pure-recursion",
                "content": "# Intuition\\nInspired by https://leetcode.com/problems/strange-printer/solutions/233067/python-recursive-approach-with-memorization/, with a bit clean up.\\n\\n> For each character at the end of the string, lets consider 2 cases:\\n\\n> It was simply inserted with the cost of 1\\nIt was free from some previous step to the left that printed this character already (we can print extra character all the way till the end)\\n\\n# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        \\n        @cache\\n        def recur(s):\\n            if not s:\\n                return 0\\n            \\n            cost = recur(s[:-1]) + 1\\n            last_ch = s[-1]\\n            for i,c in enumerate(s[:-1]):\\n                if c == last_ch:\\n                    cost = min(cost, recur(s[0:i+1])+ recur(s[i+1:-1]))\\n            return cost\\n        \\n        return recur(s)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        \\n        @cache\\n        def recur(s):\\n            if not s:\\n                return 0\\n            \\n            cost = recur(s[:-1]) + 1\\n            last_ch = s[-1]\\n            for i,c in enumerate(s[:-1]):\\n                if c == last_ch:\\n                    cost = min(cost, recur(s[0:i+1])+ recur(s[i+1:-1]))\\n            return cost\\n        \\n        return recur(s)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933834,
                "title": "simple-java-easy-to-understand-solution-with-explaination-top-down",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\napproach : using recursive with divided and conquer + memoization\\n\\nhttps://leetcode.com/problems/strange-printer/solutions/233067/python-recursive-approach-with-memorization/ \\n   \\n\\n- take CABBA \\n- if you start from end, then there two possibilities for A \\n    - A has cost of 1 and then print CABB \\n    - A has cost of 0 due to previous A, so then it is based on cost of CA + BB \\n\\n```\\n    result[i] = min (\\n\\n            1 + getMinCost(0 -> i-1), // 1 + CABB\\n\\n            getMinCost(left -> i) + getMinCost(i + 1 -> right)) \\n                                    if s.charAt(j) == s.charAt(i) // CA + BB\\n\\n        )\\n```\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n\\n# Code\\n```\\n/*\\n\\n\\n\\n*/\\n\\n\\nclass Solution {\\n\\n    int[][] cache;\\n\\n    public int strangePrinter(String s) {\\n        cache = new int[s.length()][s.length()];\\n        for(int[] row : cache){\\n            Arrays.fill(row, -1);\\n        }\\n        return getMinCostRecursive(s, 0, s.length()-1);       \\n    }\\n\\n    public int getMinCostRecursive(String s, int left, int right) {\\n\\n        \\n        if(left > right) {\\n            return 0;\\n        }\\n\\n        if(cache[left][right] != -1) {\\n            return cache[left][right];\\n        }\\n\\n\\n        int ch = s.charAt(right);\\n\\n        // with cost of 1\\n        int minCost = 1 + getMinCostRecursive(s, left, right - 1);\\n\\n        for(int i = left; i < right; i++) {\\n            if(s.charAt(i) == ch) {\\n                // piggy back on previous cost \\n                minCost = Math.min(minCost, getMinCostRecursive(s, left, i) + getMinCostRecursive(s,i + 1, right-1));\\n            }\\n        }\\n\\n        cache[left][right] = minCost;\\n\\n        return minCost;\\n\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    result[i] = min (\\n\\n            1 + getMinCost(0 -> i-1), // 1 + CABB\\n\\n            getMinCost(left -> i) + getMinCost(i + 1 -> right)) \\n                                    if s.charAt(j) == s.charAt(i) // CA + BB\\n\\n        )\\n```\n```\\n/*\\n\\n\\n\\n*/\\n\\n\\nclass Solution {\\n\\n    int[][] cache;\\n\\n    public int strangePrinter(String s) {\\n        cache = new int[s.length()][s.length()];\\n        for(int[] row : cache){\\n            Arrays.fill(row, -1);\\n        }\\n        return getMinCostRecursive(s, 0, s.length()-1);       \\n    }\\n\\n    public int getMinCostRecursive(String s, int left, int right) {\\n\\n        \\n        if(left > right) {\\n            return 0;\\n        }\\n\\n        if(cache[left][right] != -1) {\\n            return cache[left][right];\\n        }\\n\\n\\n        int ch = s.charAt(right);\\n\\n        // with cost of 1\\n        int minCost = 1 + getMinCostRecursive(s, left, right - 1);\\n\\n        for(int i = left; i < right; i++) {\\n            if(s.charAt(i) == ch) {\\n                // piggy back on previous cost \\n                minCost = Math.min(minCost, getMinCostRecursive(s, left, i) + getMinCostRecursive(s,i + 1, right-1));\\n            }\\n        }\\n\\n        cache[left][right] = minCost;\\n\\n        return minCost;\\n\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3925972,
                "title": "c-dp-solution",
                "content": "# Intuition(?)\\n```\\nHere\\'s a bright idea:JUST BUY A NEW PRINTER!\\n```\\n# Code\\n```\\nint getCount(char* s,int** dp,int r,int l){\\n    if(dp[r][l] != -1){\\n        return dp[r][l];\\n    }\\n    else{\\n        int i = r;\\n        while(i<l && s[i]==s[l]){\\n            i++;\\n        }\\n        int min = l-i;\\n        for(int j = i;j < l;j++){\\n            if(getCount(s,dp,i,j)+getCount(s,dp,j+1,l)+1 < min){\\n                min = getCount(s,dp,i,j)+getCount(s,dp,j+1,l)+1;\\n            }\\n        }\\n        dp[r][l] = min;\\n        return dp[r][l];\\n    }\\n}\\n\\nint strangePrinter(char * s){\\n    int len = strlen(s);\\n    int** dp = (int**)malloc(sizeof(int*)*len);\\n    for(int i = 0;i < len;i++){\\n        dp[i] = (int*)malloc(sizeof(int)*len);\\n        dp[i][i] = 0;\\n        for(int j = i+1;j < len;j++){\\n            dp[i][j] = -1;\\n        }\\n    }\\n    return getCount(s,dp,0,len-1)+1;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nHere\\'s a bright idea:JUST BUY A NEW PRINTER!\\n```\n```\\nint getCount(char* s,int** dp,int r,int l){\\n    if(dp[r][l] != -1){\\n        return dp[r][l];\\n    }\\n    else{\\n        int i = r;\\n        while(i<l && s[i]==s[l]){\\n            i++;\\n        }\\n        int min = l-i;\\n        for(int j = i;j < l;j++){\\n            if(getCount(s,dp,i,j)+getCount(s,dp,j+1,l)+1 < min){\\n                min = getCount(s,dp,i,j)+getCount(s,dp,j+1,l)+1;\\n            }\\n        }\\n        dp[r][l] = min;\\n        return dp[r][l];\\n    }\\n}\\n\\nint strangePrinter(char * s){\\n    int len = strlen(s);\\n    int** dp = (int**)malloc(sizeof(int*)*len);\\n    for(int i = 0;i < len;i++){\\n        dp[i] = (int*)malloc(sizeof(int)*len);\\n        dp[i][i] = 0;\\n        for(int j = i+1;j < len;j++){\\n            dp[i][j] = -1;\\n        }\\n    }\\n    return getCount(s,dp,0,len-1)+1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916129,
                "title": "c-dp-matrix-chain-multiplication",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> dp;\\n    int solve(int i, int j, string& s) {\\n        if(i == j) return 1;\\n        if(dp[i][j] != -1) return dp[i][j];\\n        int out = INT_MAX;\\n        for(int k=i;k<j;k++) {\\n            out = min(out, solve(i, k, s)+solve(k+1, j, s));\\n        }\\n        if(s[i] == s[j])\\n            out--;\\n        dp[i][j] = out;\\n        return dp[i][j];\\n    }\\n    int strangePrinter(string s) {\\n        int j = s.size()-1;\\n        int i = 0;\\n        dp = vector<vector<int>>(j+1, vector<int>(j+1, -1));\\n        return solve(i, j, s);\\n    }\\n};\\n// Please consider upvoting if the solution helped! Thank you :)\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> dp;\\n    int solve(int i, int j, string& s) {\\n        if(i == j) return 1;\\n        if(dp[i][j] != -1) return dp[i][j];\\n        int out = INT_MAX;\\n        for(int k=i;k<j;k++) {\\n            out = min(out, solve(i, k, s)+solve(k+1, j, s));\\n        }\\n        if(s[i] == s[j])\\n            out--;\\n        dp[i][j] = out;\\n        return dp[i][j];\\n    }\\n    int strangePrinter(string s) {\\n        int j = s.size()-1;\\n        int i = 0;\\n        dp = vector<vector<int>>(j+1, vector<int>(j+1, -1));\\n        return solve(i, j, s);\\n    }\\n};\\n// Please consider upvoting if the solution helped! Thank you :)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905070,
                "title": "c-solution-recursive-memoized-solution-faster",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int helper(int l, int r, string& s,vector<vector<int>>&dp){ \\n        if (l == r) return 1;   \\n        if(l > r) return 0;   \\n        if (dp[l][r]!=-1) return dp[l][r];\\n\\n        int i = l+1;\\n        while(i<=r && s[i]==s[l]) i++;\\n\\n        if(i == r+1) return 1;\\n\\n        int basic = 1 + helper(i,r,s,dp);\\n        int greedy = INT_MAX;\\n\\n        for(int j=i;j<=r;j++){\\n            if(s[j] == s[l]){\\n                int res = helper(i,j-1,s,dp) + helper(j,r,s,dp);\\n                greedy = min(greedy,res);\\n            }\\n        }\\n\\n        return dp[l][r] = min(basic,greedy);\\n    }\\n\\n    int strangePrinter(string s) {\\n        int n=s.size();\\n        vector<vector<int>>dp(n,vector<int>(n,-1));\\n        return helper(0, n-1,s,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int helper(int l, int r, string& s,vector<vector<int>>&dp){ \\n        if (l == r) return 1;   \\n        if(l > r) return 0;   \\n        if (dp[l][r]!=-1) return dp[l][r];\\n\\n        int i = l+1;\\n        while(i<=r && s[i]==s[l]) i++;\\n\\n        if(i == r+1) return 1;\\n\\n        int basic = 1 + helper(i,r,s,dp);\\n        int greedy = INT_MAX;\\n\\n        for(int j=i;j<=r;j++){\\n            if(s[j] == s[l]){\\n                int res = helper(i,j-1,s,dp) + helper(j,r,s,dp);\\n                greedy = min(greedy,res);\\n            }\\n        }\\n\\n        return dp[l][r] = min(basic,greedy);\\n    }\\n\\n    int strangePrinter(string s) {\\n        int n=s.size();\\n        vector<vector<int>>dp(n,vector<int>(n,-1));\\n        return helper(0, n-1,s,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894541,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n public:\\n  int strangePrinter(string s) {\\n    const int n = s.length();\\n    // dp[i][j] := min # of turns to print s[i..j]\\n    dp.resize(n, vector<int>(n));\\n    return strangePrinter(s, 0, n - 1);\\n  }\\n\\n private:\\n  vector<vector<int>> dp;\\n\\n  int strangePrinter(const string& s, int i, int j) {\\n    if (i > j)\\n      return 0;\\n    if (dp[i][j] > 0)\\n      return dp[i][j];\\n\\n    // Print s[i]\\n    dp[i][j] = strangePrinter(s, i + 1, j) + 1;\\n\\n    for (int k = i + 1; k <= j; ++k)\\n      if (s[k] == s[i])\\n        dp[i][j] = min(dp[i][j], strangePrinter(s, i, k - 1) +\\n                                     strangePrinter(s, k + 1, j));\\n\\n    return dp[i][j];\\n  }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n public:\\n  int strangePrinter(string s) {\\n    const int n = s.length();\\n    // dp[i][j] := min # of turns to print s[i..j]\\n    dp.resize(n, vector<int>(n));\\n    return strangePrinter(s, 0, n - 1);\\n  }\\n\\n private:\\n  vector<vector<int>> dp;\\n\\n  int strangePrinter(const string& s, int i, int j) {\\n    if (i > j)\\n      return 0;\\n    if (dp[i][j] > 0)\\n      return dp[i][j];\\n\\n    // Print s[i]\\n    dp[i][j] = strangePrinter(s, i + 1, j) + 1;\\n\\n    for (int k = i + 1; k <= j; ++k)\\n      if (s[k] == s[i])\\n        dp[i][j] = min(dp[i][j], strangePrinter(s, i, k - 1) +\\n                                     strangePrinter(s, k + 1, j));\\n\\n    return dp[i][j];\\n  }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3887825,
                "title": "easy-commented-self-explanatory-bottom-up-dp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBreaking down the problem into subproblems, basically converting it into a bottom up DP approach.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nChecking for different smaller substrings and further cummulatuing to find answer for the bigger substring taking into consideration that it always is the last char that needs to be printed first.\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        \\n        vector<vector<int>> dp(n, vector<int>(n, n));   //default = n, as we need min and \\'n\\' can be the max turns\\n\\n        for(int len=1; len<=n; len++){                  //iterate over the length\\n            for(int l=0; l<=n-len; l++){                //iterating for left\\n                int r = l + len - 1;                    //calculating right\\n                int j = -1;                             //initialize j (to check for flag)\\n                for(int i=l; i<r; i++){                 //iterate for i to check for pivot\\n                    if(s[i] != s[r] && j == -1)         //found first char != last char\\n                        j=i;\\n                    if(j!=-1)                           //find the min value from the recurrence   \\n                        dp[l][r] = min(dp[l][r], dp[j][i] + dp[i+1][r] + 1);\\n                }\\n                if(j == -1)                             //if j remains -1, it means the substr contains same chars\\n                    dp[l][r] = 0;                       //set dp for printing same chars as 0  \\n            }\\n        }                                               //return for l=0, r=n-1 and +1 for the step\\n        return dp[0][n-1]+1;                             //making all the chars as the last occuring char \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        \\n        vector<vector<int>> dp(n, vector<int>(n, n));   //default = n, as we need min and \\'n\\' can be the max turns\\n\\n        for(int len=1; len<=n; len++){                  //iterate over the length\\n            for(int l=0; l<=n-len; l++){                //iterating for left\\n                int r = l + len - 1;                    //calculating right\\n                int j = -1;                             //initialize j (to check for flag)\\n                for(int i=l; i<r; i++){                 //iterate for i to check for pivot\\n                    if(s[i] != s[r] && j == -1)         //found first char != last char\\n                        j=i;\\n                    if(j!=-1)                           //find the min value from the recurrence   \\n                        dp[l][r] = min(dp[l][r], dp[j][i] + dp[i+1][r] + 1);\\n                }\\n                if(j == -1)                             //if j remains -1, it means the substr contains same chars\\n                    dp[l][r] = 0;                       //set dp for printing same chars as 0  \\n            }\\n        }                                               //return for l=0, r=n-1 and +1 for the step\\n        return dp[0][n-1]+1;                             //making all the chars as the last occuring char \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3876321,
                "title": "dp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe string \"cabc\" will have the same answer as \"cab\". Similarly, for the string \"dcabc\" the answer should be same as \"dcab\".\\n\\nNow, considering the string \"cabca\", here you need to check whether the cost for \"cabc\" + \"a\" is lesser or cost for \"c\" + \"abca\" \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. dp i,i will be 1 i.e. the cost for printing single letters like \"c\"\\n2. While iterating through the length of the string, we will consider each segment of the string i...j\\n3. For these segments we will check if dp[i][j] which is originally kept as dp[i][j-1] +1 (i.e., for \"abca\" cost will be cost of \"abc\" + 1 initially) is less or dp[i][k-1]+dp[k][j-1] (these are the subproblems for the current string)\\n4. finally we return dp[0][n-1] which is the cost of printing our string.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        vector<vector<int>> dp;\\n        int n = s.size();\\n        dp.resize(n, vector<int>(n, 0));\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n\\n        for(int len=1; len<n; len++){\\n            for(int i=0; (i+len)<n; i++){\\n                int j = i+len;\\n               // cout<<i<<\" \"<<j<<endl;\\n                dp[i][j] = dp[i][j-1] +1;\\n                for(int k=i; k<j; k++){\\n                    if(s[k] == s[j]){\\n                        int temp;\\n                        if(k-1 < i)\\n                            temp = 0;\\n                        else\\n                            temp = dp[i][k-1];\\n                        dp[i][j] = min(dp[i][j], temp+dp[k][j-1]);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n\\n/*\\n\\ncabcadddda  consider freq & dist\\n\\n*/\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        vector<vector<int>> dp;\\n        int n = s.size();\\n        dp.resize(n, vector<int>(n, 0));\\n        for(int i=0; i<n; i++)\\n            dp[i][i] = 1;\\n\\n        for(int len=1; len<n; len++){\\n            for(int i=0; (i+len)<n; i++){\\n                int j = i+len;\\n               // cout<<i<<\" \"<<j<<endl;\\n                dp[i][j] = dp[i][j-1] +1;\\n                for(int k=i; k<j; k++){\\n                    if(s[k] == s[j]){\\n                        int temp;\\n                        if(k-1 < i)\\n                            temp = 0;\\n                        else\\n                            temp = dp[i][k-1];\\n                        dp[i][j] = min(dp[i][j], temp+dp[k][j-1]);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n};\\n\\n/*\\n\\ncabcadddda  consider freq & dist\\n\\n*/\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3872568,
                "title": "83ms-96-49-46-86mb-65-79",
                "content": "\\n# Code\\n```\\nfunction strangePrinter(s: string): number {\\n\\tconst n: number = s.length;\\n\\tconst memo = [...Array(n)].map(() => Array(n).fill(0));\\n\\tfor (let i = n - 1; i >= 0; i--) {\\n\\t\\tmemo[i][i] = 1;\\n\\t\\tfor (let j = i + 1; j < n; j++) {\\n\\t\\t\\tif (s[i] === s[j]) {\\n\\t\\t\\t\\tmemo[i][j] = memo[i][j - 1];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlet min = Number.MAX_SAFE_INTEGER;\\n\\t\\t\\t\\tfor (let k = i; k < j; k++) {\\n\\t\\t\\t\\t\\tmin = Math.min(min, memo[i][k] + memo[k + 1][j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmemo[i][j] = min;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn memo[0][n - 1];\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction strangePrinter(s: string): number {\\n\\tconst n: number = s.length;\\n\\tconst memo = [...Array(n)].map(() => Array(n).fill(0));\\n\\tfor (let i = n - 1; i >= 0; i--) {\\n\\t\\tmemo[i][i] = 1;\\n\\t\\tfor (let j = i + 1; j < n; j++) {\\n\\t\\t\\tif (s[i] === s[j]) {\\n\\t\\t\\t\\tmemo[i][j] = memo[i][j - 1];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlet min = Number.MAX_SAFE_INTEGER;\\n\\t\\t\\t\\tfor (let k = i; k < j; k++) {\\n\\t\\t\\t\\t\\tmin = Math.min(min, memo[i][k] + memo[k + 1][j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tmemo[i][j] = min;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn memo[0][n - 1];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3863673,
                "title": "efficient-strange-printer",
                "content": "\\n\\n## Intuition\\nThe problem requires finding the minimum number of turns the printer needed to print the given string with specific properties. We can use dynamic programming to efficiently solve this problem.\\n\\n## Approach\\n1. Define a recursive function `f(i, j, s)` that returns the minimum number of turns needed to print the substring from index `i` to `j` in the string `s`.\\n2. Use memoization to store the results of overlapping subproblems in a 2D `dp` array.\\n3. If `i == j`, return 1 as it represents printing a single character.\\n4. If `s[i] == s[j]` or `s[j-1] == s[j]`, call the recursive function with the substring excluding the last character (`f(i, j-1, s)`).\\n5. If `s[i] == s[i+1]`, call the recursive function with the substring excluding the first character (`f(i+1, j, s)`).\\n6. Otherwise, find the minimum number of turns by considering the following cases:\\n   a. Printing all characters from `i` to `j-1` first and then the character at `j` (`f(i, j-1, s) + 1`).\\n   b. If there exists a character `s[k]` from `i+1` to `j-1` such that `s[k] == s[j]`, then calculate the minimum turns by printing the substrings `i` to `k-1` and `k` to `j-1` separately (`f(i, k-1, s) + f(k, j-1, s)`).\\n7. Update the `dp[i][j]` with the minimum number of turns calculated in step 6.\\n8. Return the final result `f(0, n-1, s)`.\\n\\n## Complexity\\n- Time complexity: O(n^3) where n is the length of the string `s`. The function `f(i, j, s)` takes O(n) time, and there can be at most O(n^2) unique subproblems.\\n- Space complexity: O(n^2) for the `dp` array used for memoization.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    int f(int i, int j, string& s){       \\n        if (dp[i][j]!=-1) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int ans;\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        else{\\n            ans=f(i,j-1, s)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        n=s.size();\\n        dp.assign(n, vector<int>(n, -1));\\n        return f(0, n-1, s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int n;\\n    vector<vector<int>> dp;\\n    int f(int i, int j, string& s){       \\n        if (dp[i][j]!=-1) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int ans;\\n        if (s[i]==s[j]||s[j-1]==s[j]) ans=f(i, j-1, s);\\n        else if (s[i]==s[i+1]) ans=f(i+1, j, s);\\n        else{\\n            ans=f(i,j-1, s)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    ans=min(ans, f(i, k-1, s)+f(k, j-1, s));\\n            }\\n        }\\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        n=s.size();\\n        dp.assign(n, vector<int>(n, -1));\\n        return f(0, n-1, s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851111,
                "title": "c-using-partition-dp-meomoization-tabulation-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\no( n*n)\\n\\n- Space complexity:\\no( n*n)\\n\\n# Code\\n```\\n// Tabulation ( Bottom-Up)\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int i,j,n=s.length();\\n        vector<vector<int>> dp(n+1,vector<int>(n+1,0));\\n        for(i=0;i<=n;i++) dp[i][i]=1;\\n        for(j=0;j<n;j++)\\n        {\\n            for(i=j-1;i>=0;i--)\\n            {\\n                \\n                int k,ans=INT_MAX,tmp;\\n                for(k=i;k<j;k++)\\n                ans=min(ans,dp[i][k]+dp[k+1][j]);\\n                if(s[i]==s[j]) dp[i][j]=dp[i][j-1];\\n                else dp[i][j]=ans;\\n            }\\n        }   \\n        return dp[0][n-1];   \\n    }\\n};\\n\\n// Memoization (Top Down)\\nclass Solution {\\npublic:\\nint f(int i,int j,string &s,vector<vector<int>> &dp)\\n{\\n    if(i==j) return 1;\\n    if(i>j) return 0;\\n    if(dp[i][j]!=-1) return dp[i][j];\\n    if(s[i]==s[j]) return dp[i][j]=f(i,j-1,s,dp);\\n    int k,ans=INT_MAX;\\n    for(k=i;k<j;k++)\\n    {\\n        int tmp=f(i,k,s,dp)+f(k+1,j,s,dp);\\n        ans=min(ans,tmp);\\n    }\\n    return dp[i][j]=ans;\\n}\\n    int strangePrinter(string s) {\\n        int i,n=s.length();\\n        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));\\n        return f(0,n-1,s,dp);        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "```\\n// Tabulation ( Bottom-Up)\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int i,j,n=s.length();\\n        vector<vector<int>> dp(n+1,vector<int>(n+1,0));\\n        for(i=0;i<=n;i++) dp[i][i]=1;\\n        for(j=0;j<n;j++)\\n        {\\n            for(i=j-1;i>=0;i--)\\n            {\\n                \\n                int k,ans=INT_MAX,tmp;\\n                for(k=i;k<j;k++)\\n                ans=min(ans,dp[i][k]+dp[k+1][j]);\\n                if(s[i]==s[j]) dp[i][j]=dp[i][j-1];\\n                else dp[i][j]=ans;\\n            }\\n        }   \\n        return dp[0][n-1];   \\n    }\\n};\\n\\n// Memoization (Top Down)\\nclass Solution {\\npublic:\\nint f(int i,int j,string &s,vector<vector<int>> &dp)\\n{\\n    if(i==j) return 1;\\n    if(i>j) return 0;\\n    if(dp[i][j]!=-1) return dp[i][j];\\n    if(s[i]==s[j]) return dp[i][j]=f(i,j-1,s,dp);\\n    int k,ans=INT_MAX;\\n    for(k=i;k<j;k++)\\n    {\\n        int tmp=f(i,k,s,dp)+f(k+1,j,s,dp);\\n        ans=min(ans,tmp);\\n    }\\n    return dp[i][j]=ans;\\n}\\n    int strangePrinter(string s) {\\n        int i,n=s.length();\\n        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));\\n        return f(0,n-1,s,dp);        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3847155,
                "title": "strange-printer-implementation-chatgpt-code-snippet",
                "content": "## Intuition\\n\\nWe are given a \"strange printer\" that can only print a sequence of the same character each time, and it can cover the original existing characters. The problem requires us to find the minimum number of turns the printer needs to print a given string `s`.\\n\\nTo solve this problem, we can use dynamic programming. We will define a 2D array `dp`, where `dp[i][j]` represents the minimum number of turns needed to print the substring `s[i:j+1]`.\\n\\nThe base case for `dp[i][i]` is 1, as we can always print a single character in one turn.\\n\\nWe can then build the `dp` array by considering all possible substrings of `s` with lengths ranging from 2 to `n` (where `n` is the length of the input string `s`). For each substring `s[i:j+1]`, we can try all possible splits and calculate the minimum number of turns needed by considering different combinations of subproblems.\\n\\nThe transition function for `dp[i][j]` is as follows:\\n1. If `s[i] == s[j]`, we can reduce the problem to `dp[i][j-1]`, as we can cover the last character with the one we print at `s[j]`.\\n2. Otherwise, we need to try all possible splits and take the minimum turns needed for each split. We can do this by iterating over all possible `k` between `i` and `j-1`, inclusive, and calculating the number of turns needed for `dp[i][k]` and `dp[k+1][j]`.\\n\\nFinally, the result will be stored in `dp[0][n-1]`, where `n` is the length of the input string `s`.\\n\\n## Approach\\n\\n1. Initialize a 2D array `dp` of size `n` \\xD7 `n` to store the minimum number of turns needed for each substring.\\n2. Set the base case `dp[i][i] = 1` for all `i` from 0 to `n-1`.\\n3. Loop over the length of substrings (`len`) from 2 to `n`:\\n   - Loop over the starting index `i` from 0 to `n-len`.\\n   - Calculate the ending index `j = i + len - 1`.\\n   - If `s[i]` is equal to `s[j]`, set `dp[i][j] = dp[i][j-1]`.\\n   - Otherwise, initialize `dp[i][j]` to the maximum length (worst case).\\n   - Loop over the split index `k` from `i` to `j-1`:\\n     - Update `dp[i][j]` to the minimum value of `dp[i][j]` and `dp[i][k] + dp[k+1][j]`.\\n4. The result will be stored in `dp[0][n-1]`.\\n\\n## Complexity Analysis\\n\\nThe time complexity of this approach is O(n^3) due to the nested loops, where `n` is the length of the input string `s`. For each length `len`, we have `O(n)` possible substrings, and for each substring, we consider all possible splits, which also takes `O(n)` time. So the total time complexity is O(n^3).\\n\\nThe space complexity is O(n^2) to store the `dp` array.\\n\\n## Code\\n\\n```java\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n\\n        for (int i = 0; i < n; i++) {\\n            dp[i][i] = 1;\\n        }\\n\\n        for (int len = 2; len <= n; len++) {\\n            for (int i = 0; i < n - len + 1; i++) {\\n                int j = i + len - 1;\\n\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    dp[i][j] = dp[i][j - 1];\\n                } else {\\n                    dp[i][j] = len; // Initialize to worst case\\n                    for (int k = i; k < j; k++) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j]);\\n                    }\\n                }\\n            }\\n        }\\n\\n        return dp[0][n - 1];\\n    }\\n}\\n```\\n\\nThe provided code implements the approach described above to find the minimum number of turns needed by the strange printer to print the given string `s`. The time complexity can be further optimized using memoization or other techniques.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n\\n        for (int i = 0; i < n; i++) {\\n            dp[i][i] = 1;\\n        }\\n\\n        for (int len = 2; len <= n; len++) {\\n            for (int i = 0; i < n - len + 1; i++) {\\n                int j = i + len - 1;\\n\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    dp[i][j] = dp[i][j - 1];\\n                } else {\\n                    dp[i][j] = len; // Initialize to worst case\\n                    for (int k = i; k < j; k++) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j]);\\n                    }\\n                }\\n            }\\n        }\\n\\n        return dp[0][n - 1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3846740,
                "title": "interval-dp-c-easy-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nabba, in this case we know we can make aaaa, and then make bb to cover on it, it only cost 2step, in this pattern we know when a char show up before, we can consider use the previous result to optimize the answer.\\nso if in a specific range, lets say f[i][j], which f is the previous result, if s[i] == s[j], our answer updated answer could be min(f[i + 1][j], f[i][j - 1]).\\nif s[i] != s[j], we consider transfer the previous result in all combinations. min(dp[i][k] + dp[k + 1][j]).\\n\\nwe start the interval from 2 to n, and dp[0][0], dp[1][1] should be 1, because make single char, must cost 1. \\nas we take min each time, to ensure we can update the dp in initial state, we set the default value of dp to be infinite\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^3)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int dp[101][101]{};\\n        memset(dp, 0x3f3f3f3f, sizeof(dp));\\n        const int n = s.size();\\n        for(int i = 0; i < n; i++)dp[i][i] = 1;\\n\\n        for(int len = 2; len <= n; len++){\\n            for(int lft = 0, rght = len - 1; rght < n; lft++, rght++){\\n                if(s[lft] == s[rght]){\\n                    dp[lft][rght] = min(dp[lft + 1][rght], dp[lft][rght - 1]);\\n                    continue;\\n                }\\n                for(int p = lft; p < rght; p++){\\n                    dp[lft][rght] = min(dp[lft][rght], dp[lft][p] + dp[p + 1][rght]);\\n                }\\n            }\\n        }\\n        return dp[0][n - 1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int dp[101][101]{};\\n        memset(dp, 0x3f3f3f3f, sizeof(dp));\\n        const int n = s.size();\\n        for(int i = 0; i < n; i++)dp[i][i] = 1;\\n\\n        for(int len = 2; len <= n; len++){\\n            for(int lft = 0, rght = len - 1; rght < n; lft++, rght++){\\n                if(s[lft] == s[rght]){\\n                    dp[lft][rght] = min(dp[lft + 1][rght], dp[lft][rght - 1]);\\n                    continue;\\n                }\\n                for(int p = lft; p < rght; p++){\\n                    dp[lft][rght] = min(dp[lft][rght], dp[lft][p] + dp[p + 1][rght]);\\n                }\\n            }\\n        }\\n        return dp[0][n - 1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845673,
                "title": "c-easy-dp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> dp;\\n    int func(string& s,int i,int j){\\n        if(i>j) return 0;\\n        if(dp[i][j]!=0) return dp[i][j];\\n        int x=i;\\n        \\n        while(x+1<=j && s[x]==s[x+1]) x++;\\n        while(x+1<=j && s[x]==s[j]) j--;\\n        int ans=1+func(s,x+1,j);\\n        for(int k=x+1;k<=j;k++){\\n            if(s[k]==s[i]){\\n                ans=min(ans,func(s,k,j)+func(s,x+1,k-1));\\n            }\\n        }   \\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        dp=vector<vector<int>>(s.size(),vector<int>(s.size(),0));\\n        return func(s,0,s.size()-1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<vector<int>> dp;\\n    int func(string& s,int i,int j){\\n        if(i>j) return 0;\\n        if(dp[i][j]!=0) return dp[i][j];\\n        int x=i;\\n        \\n        while(x+1<=j && s[x]==s[x+1]) x++;\\n        while(x+1<=j && s[x]==s[j]) j--;\\n        int ans=1+func(s,x+1,j);\\n        for(int k=x+1;k<=j;k++){\\n            if(s[k]==s[i]){\\n                ans=min(ans,func(s,k,j)+func(s,x+1,k-1));\\n            }\\n        }   \\n        return dp[i][j]=ans;\\n    }\\n    int strangePrinter(string s) {\\n        dp=vector<vector<int>>(s.size(),vector<int>(s.size(),0));\\n        return func(s,0,s.size()-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3842502,
                "title": "dp-top-down-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- **This problem can be subdevided -> using recusive**\\n- Description substring by using start and stop index of string\\n- Note that can be two other turns in a turn, ex: aaabaaaaddaaaa (1 turn a and 1 turn b and 1 turn d), so in this example, the subdevided problem can be: f(aaabaaaaddaaa) = f(abada) = f(aba) + f(ada) - 1.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Using dp to memoization\\n\\n# Complexity\\n- Time complexity: O(N2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N2)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s0) {\\n        string s;\\n        for(int i=0; i<s0.size(); i++) {\\n            if(s.size()==0 || s.back()!=s0[i]) s.push_back(s0[i]);\\n        }\\n        int n=s.size();\\n        vector<vector<int>> dp(n+2, vector<int>(n+2, -1));\\n        function<int(int,int)> f=[&](int start, int stop) {\\n            if(start>stop) return 0;\\n            if(start==stop) return 1;\\n            int& res = dp[start][stop];\\n            if(res!=-1) return res;\\n            res = 1e9;\\n            for(int i=start; i<n; i++) {\\n                if(s[i]==s[start]) res = min(res, 1+f(start+1, i-1)+min(f(i+1,stop), f(i,stop)-1));\\n            }\\n            return res;\\n        };\\n        return f(0, n-1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s0) {\\n        string s;\\n        for(int i=0; i<s0.size(); i++) {\\n            if(s.size()==0 || s.back()!=s0[i]) s.push_back(s0[i]);\\n        }\\n        int n=s.size();\\n        vector<vector<int>> dp(n+2, vector<int>(n+2, -1));\\n        function<int(int,int)> f=[&](int start, int stop) {\\n            if(start>stop) return 0;\\n            if(start==stop) return 1;\\n            int& res = dp[start][stop];\\n            if(res!=-1) return res;\\n            res = 1e9;\\n            for(int i=start; i<n; i++) {\\n                if(s[i]==s[start]) res = min(res, 1+f(start+1, i-1)+min(f(i+1,stop), f(i,stop)-1));\\n            }\\n            return res;\\n        };\\n        return f(0, n-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3842395,
                "title": "minimum-operations-to-print-a-string-with-a-strange-printer",
                "content": "# Intuition\\nThe problem is asking to find the minimum number of operations required to print a given string using a strange printer. The strange printer can print a character over another character if they are the same. The objective is to minimize the number of operations to print the entire string.\\n\\n# Approach\\nTo solve this problem, we can use dynamic programming. We\\'ll define a 2D array dp, where dp[i][j] represents the minimum number of operations required to print the substring s[i...j]. We will start from the end of the string and work our way towards the beginning, filling up the dp array.\\n\\nInitialize the dp array with zeros.\\nIterate over the string from the end (index n-1) to the beginning (index 0).\\nFor each i, we set dp[i][i] to 1 since a single character requires one operation to be printed.\\nThen, we iterate from i+1 to j to cover substrings of different lengths.\\nFor each i and j, we calculate the minimum number of operations to print s[i...j].\\nWe try to find an index k such that s[k] == s[j], which means we can combine the characters at positions k and j to save one operation. We consider all possible k between i and j and take the minimum value among them.\\nThe final answer will be stored in dp[0][n-1], which represents the minimum number of operations required to print the entire string.\\n\\n# Complexity\\n- Time complexity:\\n\\nO(n^3)\\n- Space complexity:\\nO(n^2)\\n\\n# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841797,
                "title": "beats-95",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nint solve(int l , int r , string &s , vector<vector<int>> &dp){\\n    // means single charecter....\\n    if(l == r) return 1;\\n\\n    if(l > r) return 0;\\n\\n    if(dp[l][r] != -1) return dp[l][r];\\n    int i = l + 1;\\n    while(i <= r && s[i] == s[l]) i++;\\n\\n    // means all charechter are same...\\n    if(i == r + 1) return 1;\\n\\n    int basic = 1 + solve(i , r , s , dp);\\n\\n    int lalach = INT_MAX;\\n    for(int j = i; j <= r; j++){\\n        if(s[j] == s[l]){\\n            int ans = solve(i, j - 1, s, dp) + solve(j , r , s , dp);\\n            lalach = min(lalach , ans);\\n        }\\n    }\\n    return dp[l][r] = min(basic , lalach);    \\n}\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n,vector<int>(n,-1));\\n        return solve(0,n-1,s,dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint solve(int l , int r , string &s , vector<vector<int>> &dp){\\n    // means single charecter....\\n    if(l == r) return 1;\\n\\n    if(l > r) return 0;\\n\\n    if(dp[l][r] != -1) return dp[l][r];\\n    int i = l + 1;\\n    while(i <= r && s[i] == s[l]) i++;\\n\\n    // means all charechter are same...\\n    if(i == r + 1) return 1;\\n\\n    int basic = 1 + solve(i , r , s , dp);\\n\\n    int lalach = INT_MAX;\\n    for(int j = i; j <= r; j++){\\n        if(s[j] == s[l]){\\n            int ans = solve(i, j - 1, s, dp) + solve(j , r , s , dp);\\n            lalach = min(lalach , ans);\\n        }\\n    }\\n    return dp[l][r] = min(basic , lalach);    \\n}\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> dp(n,vector<int>(n,-1));\\n        return solve(0,n-1,s,dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841612,
                "title": "dp-matrix-chain-multiplication-c",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    int getans(int l,int r,string &s){\\n        \\n        if(l>r) return 0;\\n        if(l==r) return 1;\\n        if(dp[l][r] != -1) return dp[l][r];\\n        int ans = 1000; \\n        for(int i = l;i < r;i++){\\n            int ll = getans(l,i,s);\\n            int rr = getans(i+1,r,s);\\n            int tot = ll + rr;\\n            if(s[l] == s[r]) tot--;\\n            ans = min(ans,tot);\\n        }\\n        return dp[l][r] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        memset(dp,-1,sizeof(dp));\\n        return getans(0,n-1,s);\\n    }\\n};\\n\\n\\n\\n```",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int dp[101][101];\\n    int getans(int l,int r,string &s){\\n        \\n        if(l>r) return 0;\\n        if(l==r) return 1;\\n        if(dp[l][r] != -1) return dp[l][r];\\n        int ans = 1000; \\n        for(int i = l;i < r;i++){\\n            int ll = getans(l,i,s);\\n            int rr = getans(i+1,r,s);\\n            int tot = ll + rr;\\n            if(s[l] == s[r]) tot--;\\n            ans = min(ans,tot);\\n        }\\n        return dp[l][r] = ans;\\n    }\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        memset(dp,-1,sizeof(dp));\\n        return getans(0,n-1,s);\\n    }\\n};\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3841012,
                "title": "java-memoization-explained",
                "content": "**Method 1:** Brute force DFS. Gets TLE\\n* Have two pointers left (L) and right (R) which track the turns print string s[L, R]\\n* Starting from `L + 1`, find the first char which is not s[L]. Let its index be i \\n* Let f(x, y) denote minimum turns required to print s[x, y]\\n* There are two possible ways of achieving the final result\\n\\t* Case 1: Print s[L, i] in 1 turn, then print s[i + 1, R] recursively, so turns T = 1 + f(i + 1, R)\\n\\t* Case 2: \\n\\t\\t* This is greedy case, where we have another pointer `j` moving from i to R to find the next occurence of s[L], say at index j\\n\\t\\t* When such an index is found, then s can be printed in 2 parts: s[i, j- 1] and s[j, R]\\n\\t\\t* so T = f(i, j - 1) + f(j, R)\\n\\t\\t* Notice that the turns to print s[L, i - 1] will be covered in s[j, R] because s[L, i - 1] comprise of the same character repeatedly which is the same as s[j]\\n* Minimum turns = min(turns for case 1, turns for case 2)\\n* This can better explained with an example, will do it later when I have spare time.\\n* IMO, this is a tough problem and is labelled hard for good reason. Pat yourself in the back if you understood any solution, let alone solving it by yourself\\n```\\npublic int strangePrinter(String s) {\\n\\treturn minTurns(s, 0, s.length() - 1);\\n}\\n\\nprivate int minTurns(String s, int left, int right) {\\n\\tif (left == right)\\n\\t\\treturn 1;\\n\\n\\tvar i = left + 1;\\n\\tfor (; i <= right && s.charAt(i) == s.charAt(left); i++);\\n\\n\\tif (i == right + 1)\\n\\t\\treturn 1;\\n\\n\\tvar turns = 1 + minTurns(s, i, right);\\n\\n\\tfor (var j = i; j <= right; j++)\\n\\t\\tif (s.charAt(j) == s.charAt(left)) \\n\\t\\t\\tturns = Math.min(turns, minTurns(s, i, j - 1) + minTurns(s, j, right));\\n\\n\\treturn turns;\\n}\\n```\\n**Method 2:** Inject memoization in method 1\\n>**T/S:** O(n\\xB3)/O(n\\xB2), where n = size(s)\\n```\\npublic int strangePrinter(String s) {\\n\\treturn minTurns(s, 0, s.length() - 1, new HashMap<>());\\n}\\n\\nprivate int minTurns(String s, int left, int right, Map<Pair, Integer> memo) {\\n\\tif (left == right)\\n\\t\\treturn 1;\\n\\n\\tvar key = new Pair(left, right);\\n\\tif (memo.containsKey(key))\\n\\t\\treturn memo.get(key);\\n\\n\\tvar i = left + 1;\\n\\tfor (; i <= right && s.charAt(i) == s.charAt(left); i++);\\n\\n\\tif (i == right + 1)\\n\\t\\treturn 1;\\n\\n\\tvar turns = 1 + minTurns(s, i, right, memo);\\n\\n\\tfor (var j = i; j <= right; j++)\\n\\t\\tif (s.charAt(j) == s.charAt(left)) \\n\\t\\t\\tturns = Math.min(turns, minTurns(s, i, j - 1, memo) + minTurns(s, j, right, memo));\\n\\n\\tmemo.put(key, turns);\\n\\treturn turns;\\n}\\n```\\n ***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int strangePrinter(String s) {\\n\\treturn minTurns(s, 0, s.length() - 1);\\n}\\n\\nprivate int minTurns(String s, int left, int right) {\\n\\tif (left == right)\\n\\t\\treturn 1;\\n\\n\\tvar i = left + 1;\\n\\tfor (; i <= right && s.charAt(i) == s.charAt(left); i++);\\n\\n\\tif (i == right + 1)\\n\\t\\treturn 1;\\n\\n\\tvar turns = 1 + minTurns(s, i, right);\\n\\n\\tfor (var j = i; j <= right; j++)\\n\\t\\tif (s.charAt(j) == s.charAt(left)) \\n\\t\\t\\tturns = Math.min(turns, minTurns(s, i, j - 1) + minTurns(s, j, right));\\n\\n\\treturn turns;\\n}\\n```\n```\\npublic int strangePrinter(String s) {\\n\\treturn minTurns(s, 0, s.length() - 1, new HashMap<>());\\n}\\n\\nprivate int minTurns(String s, int left, int right, Map<Pair, Integer> memo) {\\n\\tif (left == right)\\n\\t\\treturn 1;\\n\\n\\tvar key = new Pair(left, right);\\n\\tif (memo.containsKey(key))\\n\\t\\treturn memo.get(key);\\n\\n\\tvar i = left + 1;\\n\\tfor (; i <= right && s.charAt(i) == s.charAt(left); i++);\\n\\n\\tif (i == right + 1)\\n\\t\\treturn 1;\\n\\n\\tvar turns = 1 + minTurns(s, i, right, memo);\\n\\n\\tfor (var j = i; j <= right; j++)\\n\\t\\tif (s.charAt(j) == s.charAt(left)) \\n\\t\\t\\tturns = Math.min(turns, minTurns(s, i, j - 1, memo) + minTurns(s, j, right, memo));\\n\\n\\tmemo.put(key, turns);\\n\\treturn turns;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3840776,
                "title": "python3-easy-and-clearly-explained-bottom-up-dp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe first set a 2-D table, row, col means the left, right index of the substring. `dp[i][j]` represents the minimum number of operations needed to print the substring `s[i:j+1]`. Becasue we\\'re finding minimum case, we assign infinity value to dp table, and use dp method to update smaller number of methods.\\n\\n**DP formula: `dp[l][r] = min(dp[l][r], dp[l][k] + dp[k+1][r])`**\\n\\nUse bottom-up dp to fill in the minimum methods to turn printer. Because of bottom-up method, we start from base cases to all possible substrings of increasing lengths.\\n\\nFor more related explanation, please see below code comment. Please upvote if it helps. Thank you :)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBottom-up DP\\n\\n# Complexity\\n- Time complexity: $$O(N^3)$$, N: length of s, \\n    1. Because we iterate every combinations of the `s`, which costs $$O(N^2)$$\\n    2. For every combination of `s`, we spend $$O(N)$$ to find if we can get smaller number of methods among the split in `s`.\\n\\n    So, overall is $$O(N^3)$$.\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(N^2)$$, N: length of s, because the 2-D `dp` table\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        if n < 2: # n==0, return 0; n==1, return 1\\n            return n\\n        # Create a DP table initialized with infinity values.\\n        dp = [[float(\\'inf\\')]*n for _ in range(n)]\\n\\n        # base case: A single character requires one operation.\\n        for i in range(n):\\n            dp[i][i] = 1\\n\\n        # Bottom-up DP to find the minimum operations for substrings of increasing lengths.\\n        for diff in range(1, n):\\n            for l in range(n-diff):\\n                r = l + diff\\n                for k in range(l, r):\\n                    # Try all possible splits and find the minimum number of operations required for each split.\\n                    dp[l][r] = min(dp[l][r], dp[l][k] + dp[k+1][r])\\n                # If the leftmost and rightmost characters are the same, reduce the operation count.\\n                # Ex: s=\\'aba\\', we can split it into \\'a\\' and \\'ba\\' or \\'ab\\' and \\'a\\'.\\n                # However, both of these split methods would give us 3 as the total number of operations.\\n                # But the reality is we can print \\'aaa\\' and then add the character at index 1 (\\'b\\') in just 2 operations to get \\'aba\\'.\\n                if s[l] == s[r]:\\n                    dp[l][r] -= 1\\n        \\n        # Return the minimum number of operations needed to print the entire string.\\n        return dp[0][n-1]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        n = len(s)\\n        if n < 2: # n==0, return 0; n==1, return 1\\n            return n\\n        # Create a DP table initialized with infinity values.\\n        dp = [[float(\\'inf\\')]*n for _ in range(n)]\\n\\n        # base case: A single character requires one operation.\\n        for i in range(n):\\n            dp[i][i] = 1\\n\\n        # Bottom-up DP to find the minimum operations for substrings of increasing lengths.\\n        for diff in range(1, n):\\n            for l in range(n-diff):\\n                r = l + diff\\n                for k in range(l, r):\\n                    # Try all possible splits and find the minimum number of operations required for each split.\\n                    dp[l][r] = min(dp[l][r], dp[l][k] + dp[k+1][r])\\n                # If the leftmost and rightmost characters are the same, reduce the operation count.\\n                # Ex: s=\\'aba\\', we can split it into \\'a\\' and \\'ba\\' or \\'ab\\' and \\'a\\'.\\n                # However, both of these split methods would give us 3 as the total number of operations.\\n                # But the reality is we can print \\'aaa\\' and then add the character at index 1 (\\'b\\') in just 2 operations to get \\'aba\\'.\\n                if s[l] == s[r]:\\n                    dp[l][r] -= 1\\n        \\n        # Return the minimum number of operations needed to print the entire string.\\n        return dp[0][n-1]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840647,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int strangePrinter(String s) {\\n    final int n = s.length();\\n    // dp[i][j] := min # of turns to print s[i..j]\\n    dp = new int[n][n];\\n    return strangePrinter(s, 0, n - 1);\\n  }\\n\\n  private int[][] dp;\\n\\n  private int strangePrinter(final String s, int i, int j) {\\n    if (i > j)\\n      return 0;\\n    if (dp[i][j] > 0)\\n      return dp[i][j];\\n\\n    // Print s[i]\\n    dp[i][j] = strangePrinter(s, i + 1, j) + 1;\\n\\n    for (int k = i + 1; k <= j; ++k)\\n      if (s.charAt(k) == s.charAt(i))\\n        dp[i][j] = Math.min(dp[i][j], strangePrinter(s, i, k - 1) + strangePrinter(s, k + 1, j));\\n\\n    return dp[i][j];\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int strangePrinter(String s) {\\n    final int n = s.length();\\n    // dp[i][j] := min # of turns to print s[i..j]\\n    dp = new int[n][n];\\n    return strangePrinter(s, 0, n - 1);\\n  }\\n\\n  private int[][] dp;\\n\\n  private int strangePrinter(final String s, int i, int j) {\\n    if (i > j)\\n      return 0;\\n    if (dp[i][j] > 0)\\n      return dp[i][j];\\n\\n    // Print s[i]\\n    dp[i][j] = strangePrinter(s, i + 1, j) + 1;\\n\\n    for (int k = i + 1; k <= j; ++k)\\n      if (s.charAt(k) == s.charAt(i))\\n        dp[i][j] = Math.min(dp[i][j], strangePrinter(s, i, k - 1) + strangePrinter(s, k + 1, j));\\n\\n    return dp[i][j];\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840503,
                "title": "recursion-with-memoization-beats-100-o-n-o-n",
                "content": "# Complexity\\n\\nn - is the length of string\\n\\n- Time complexity: O( n\\xB2 )\\n\\n- Space complexity: O( n\\xB2 )\\n\\n# Code\\n```\\nfunction strangePrinter(s: string): number {\\n    const memo = new Map<string, number>(),\\n        removeDuplicates = ( s: string ): string => {\\n            let res = \\'\\', i = 0;\\n            while ( i < s.length - 1 ) {\\n                if ( s[ i ] !== s[ i + 1 ] ) res += s[ i ];\\n                i++;\\n            }\\n            return res + s[ i ];\\n        },\\n        solve = ( l: number, r: number ): number => {\\n            if ( l === r ) return 1;\\n            const key = l + \\':\\' + r;\\n            if ( memo.has( key ) ) return memo.get( key ) as number;\\n            let res = solve( l, r - 1 ) + 1;\\n            for ( let i = l; i < r; i++ )\\n                if ( s[ i ] === s[ r ] ) {\\n                    const tmp = solve( l, i ) + solve( i + 1, r - 1 );\\n                    if ( tmp < res ) res = tmp;\\n                }\\n            memo.set( key, res );\\n            return res;\\n        }\\n    s = removeDuplicates( s );\\n    return solve( 0, s.length - 1 );\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "String",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nfunction strangePrinter(s: string): number {\\n    const memo = new Map<string, number>(),\\n        removeDuplicates = ( s: string ): string => {\\n            let res = \\'\\', i = 0;\\n            while ( i < s.length - 1 ) {\\n                if ( s[ i ] !== s[ i + 1 ] ) res += s[ i ];\\n                i++;\\n            }\\n            return res + s[ i ];\\n        },\\n        solve = ( l: number, r: number ): number => {\\n            if ( l === r ) return 1;\\n            const key = l + \\':\\' + r;\\n            if ( memo.has( key ) ) return memo.get( key ) as number;\\n            let res = solve( l, r - 1 ) + 1;\\n            for ( let i = l; i < r; i++ )\\n                if ( s[ i ] === s[ r ] ) {\\n                    const tmp = solve( l, i ) + solve( i + 1, r - 1 );\\n                    if ( tmp < res ) res = tmp;\\n                }\\n            memo.set( key, res );\\n            return res;\\n        }\\n    s = removeDuplicates( s );\\n    return solve( 0, s.length - 1 );\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3840463,
                "title": "rust-9ms-python",
                "content": "# Complexity\\n- Time complexity: $O(n^3)$\\n- Space complexity: $O(n^2)$\\n\\n# Code\\n```Rust []\\nimpl Solution {\\n  pub fn strange_printer(s: String) -> i32 {\\n    let n = s.len();\\n    let s: Vec<_> = s.chars().collect();\\n    let mut dp = vec![vec![0; n]; n];\\n\\n    for i in (0 .. n).rev() {\\n      dp[i][i] = 1;\\n\\n      for j in i + 1 .. n {\\n        dp[i][j] = dp[i][j - 1] + 1;\\n        for k in i .. j {\\n          if s[k] == s[j] {\\n            let mut add = 0;\\n            if k <= j - 2 {\\n              add = dp[k + 1][j - 1];\\n            }\\n            dp[i][j] = dp[i][j].min(dp[i][k] + add);\\n          }\\n        }\\n      }\\n    }\\n\\n    return dp[0][n - 1];\\n  }\\n}\\n```\\n```python []\\nclass Solution:\\n  def strangePrinter(self, s: str) -> int:\\n    s = \\'\\'.join(a for a, b in zip(s, \\'#\\' + s) if a != b)\\n    n = len(s)\\n    dp = [[0] * n for _ in range(n)]\\n    \\n    for i in range(n - 1, -1, -1):\\n      dp[i][i] = 1\\n      for j in range(i + 1, n):\\n        dp[i][j] = dp[i][j - 1] + 1\\n        for k in range(i, j):\\n          if s[k] == s[j]:\\n            dp[i][j] = min(dp[i][j], dp[i][k] + (dp[k + 1][j - 1] if k + 1 <= j - 1 else 0))\\n\\n    return dp[0][n-1]\\n```\\n",
                "solutionTags": [
                    "Python3",
                    "Rust"
                ],
                "code": "```Rust []\\nimpl Solution {\\n  pub fn strange_printer(s: String) -> i32 {\\n    let n = s.len();\\n    let s: Vec<_> = s.chars().collect();\\n    let mut dp = vec![vec![0; n]; n];\\n\\n    for i in (0 .. n).rev() {\\n      dp[i][i] = 1;\\n\\n      for j in i + 1 .. n {\\n        dp[i][j] = dp[i][j - 1] + 1;\\n        for k in i .. j {\\n          if s[k] == s[j] {\\n            let mut add = 0;\\n            if k <= j - 2 {\\n              add = dp[k + 1][j - 1];\\n            }\\n            dp[i][j] = dp[i][j].min(dp[i][k] + add);\\n          }\\n        }\\n      }\\n    }\\n\\n    return dp[0][n - 1];\\n  }\\n}\\n```\n```python []\\nclass Solution:\\n  def strangePrinter(self, s: str) -> int:\\n    s = \\'\\'.join(a for a, b in zip(s, \\'#\\' + s) if a != b)\\n    n = len(s)\\n    dp = [[0] * n for _ in range(n)]\\n    \\n    for i in range(n - 1, -1, -1):\\n      dp[i][i] = 1\\n      for j in range(i + 1, n):\\n        dp[i][j] = dp[i][j - 1] + 1\\n        for k in range(i, j):\\n          if s[k] == s[j]:\\n            dp[i][j] = min(dp[i][j], dp[i][k] + (dp[k + 1][j - 1] if k + 1 <= j - 1 else 0))\\n\\n    return dp[0][n-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840423,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#include <stdio.h>\\n#include <string.h>\\n\\n#define MAX_N 100\\n\\nint dp[MAX_N][MAX_N];\\n\\nint strangePrinter(char *s) {\\n    int n = strlen(s);\\n    \\n    // Initialize the dp array with -1\\n    for (int i = 0; i < n; i++) {\\n        for (int j = 0; j < n; j++) {\\n            dp[i][j] = -1;\\n        }\\n    }\\n    \\n    // Call the recursive function to find the minimum number of turns\\n    return findMinTurns(s, 0, n - 1);\\n}\\n\\nint findMinTurns(char *s, int start, int end) {\\n    // Base case\\n    if (start > end) {\\n        return 0;\\n    }\\n    \\n    // If the result is already computed, return it\\n    if (dp[start][end] != -1) {\\n        return dp[start][end];\\n    }\\n    \\n    // Initialize the result with the length of the substring\\n    int res = 1 + findMinTurns(s, start + 1, end);\\n    \\n    // Try to find a better option for the result\\n    for (int k = start + 1; k <= end; k++) {\\n        if (s[k] == s[start]) {\\n            int temp = findMinTurns(s, start, k - 1) + findMinTurns(s, k + 1, end);\\n            res = (temp < res) ? temp : res;\\n        }\\n    }\\n    \\n    // Cache the result and return it\\n    dp[start][end] = res;\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n#include <stdio.h>\\n#include <string.h>\\n\\n#define MAX_N 100\\n\\nint dp[MAX_N][MAX_N];\\n\\nint strangePrinter(char *s) {\\n    int n = strlen(s);\\n    \\n    // Initialize the dp array with -1\\n    for (int i = 0; i < n; i++) {\\n        for (int j = 0; j < n; j++) {\\n            dp[i][j] = -1;\\n        }\\n    }\\n    \\n    // Call the recursive function to find the minimum number of turns\\n    return findMinTurns(s, 0, n - 1);\\n}\\n\\nint findMinTurns(char *s, int start, int end) {\\n    // Base case\\n    if (start > end) {\\n        return 0;\\n    }\\n    \\n    // If the result is already computed, return it\\n    if (dp[start][end] != -1) {\\n        return dp[start][end];\\n    }\\n    \\n    // Initialize the result with the length of the substring\\n    int res = 1 + findMinTurns(s, start + 1, end);\\n    \\n    // Try to find a better option for the result\\n    for (int k = start + 1; k <= end; k++) {\\n        if (s[k] == s[start]) {\\n            int temp = findMinTurns(s, start, k - 1) + findMinTurns(s, k + 1, end);\\n            res = (temp < res) ? temp : res;\\n        }\\n    }\\n    \\n    // Cache the result and return it\\n    dp[start][end] = res;\\n    return res;\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3840336,
                "title": "c-dp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^3)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int f(int i, int j, string& s, vector<vector<int>>& dp){       \\n        if (dp[i][j]) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int minPrint = 0;\\n        if (s[i]==s[j]) minPrint=f(i, j-1, s, dp);\\n        else{\\n            minPrint=f(i,j-1, s, dp)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    minPrint=min(minPrint, f(i, k-1, s, dp)+f(k, j-1, s, dp));\\n            }\\n        }\\n        return dp[i][j]=minPrint;\\n    }\\n    int strangePrinter(string s) {\\n       string sNew(1, s[0]);\\n       for(auto ch : s)\\n            if(ch != sNew.back())\\n                sNew.push_back(ch);\\n        int n = sNew.length();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        return f(0, n-1, sNew, dp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int f(int i, int j, string& s, vector<vector<int>>& dp){       \\n        if (dp[i][j]) return dp[i][j];\\n        if (i==j) return dp[i][j]=1;\\n        int minPrint = 0;\\n        if (s[i]==s[j]) minPrint=f(i, j-1, s, dp);\\n        else{\\n            minPrint=f(i,j-1, s, dp)+1;\\n            for(int k=i+1; k<j; k++){\\n                if(s[k]==s[j])\\n                    minPrint=min(minPrint, f(i, k-1, s, dp)+f(k, j-1, s, dp));\\n            }\\n        }\\n        return dp[i][j]=minPrint;\\n    }\\n    int strangePrinter(string s) {\\n       string sNew(1, s[0]);\\n       for(auto ch : s)\\n            if(ch != sNew.back())\\n                sNew.push_back(ch);\\n        int n = sNew.length();\\n        vector<vector<int>> dp(n, vector<int>(n, 0));\\n        return f(0, n-1, sNew, dp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840179,
                "title": "ruby-dp-no-recursion",
                "content": "\\n# Code\\n```ruby\\nclass Numeric\\n    def min(v) = self > v ? v : self\\nend\\n\\ndef strange_printer(s)\\n    dp = Array.new(s.size) {|_| Array.new(s.size, 0) }\\n    (1...s.size).each {|d|\\n        (s.size - d).times {|l|\\n            r = l + d\\n            dp[l][r] = (s[l] == s[l+1]) ? \\n                dp[l+1][r] :\\n                (l+1..r).inject(dp[l+1][r] + 1) {|res, i|\\n                    ((s[l] == s[i]) ? res.min(dp[l][i-1] + dp[i][r]) : res)\\n                }\\n        }\\n    }\\n    dp.first.last + 1\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\nclass Numeric\\n    def min(v) = self > v ? v : self\\nend\\n\\ndef strange_printer(s)\\n    dp = Array.new(s.size) {|_| Array.new(s.size, 0) }\\n    (1...s.size).each {|d|\\n        (s.size - d).times {|l|\\n            r = l + d\\n            dp[l][r] = (s[l] == s[l+1]) ? \\n                dp[l+1][r] :\\n                (l+1..r).inject(dp[l+1][r] + 1) {|res, i|\\n                    ((s[l] == s[i]) ? res.min(dp[l][i-1] + dp[i][r]) : res)\\n                }\\n        }\\n    }\\n    dp.first.last + 1\\nend\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840044,
                "title": "python-recursive-solution-with-hashmap",
                "content": "# Code\\n```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        dic = {}\\n        def helper(i,j):\\n            if i == j:\\n                return 1\\n            if i > j:\\n                return 0\\n            if (i,j) in dic:\\n                return dic[(i,j)]\\n            minTurns = float(\"inf\")\\n            for k in range(i,j):\\n                a = helper(i,k)\\n                b = helper(k+1, j)\\n                minTurns = min(minTurns, a+b)\\n            dic[(i,j)] = minTurns -1 if s[i] == s[j] else minTurns\\n            return dic[(i,j)]\\n        return helper(0,len(s)-1)\\n```\\n\\n# Complexity\\n- Time complexity:\\nO(n^3)\\n\\n- Space complexity:\\nO(n^2)",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution:\\n    def strangePrinter(self, s: str) -> int:\\n        dic = {}\\n        def helper(i,j):\\n            if i == j:\\n                return 1\\n            if i > j:\\n                return 0\\n            if (i,j) in dic:\\n                return dic[(i,j)]\\n            minTurns = float(\"inf\")\\n            for k in range(i,j):\\n                a = helper(i,k)\\n                b = helper(k+1, j)\\n                minTurns = min(minTurns, a+b)\\n            dic[(i,j)] = minTurns -1 if s[i] == s[j] else minTurns\\n            return dic[(i,j)]\\n        return helper(0,len(s)-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839948,
                "title": "java-solution-dp",
                "content": "# Complexity\\n- Time complexity:O(n^3)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n^2)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n=s.length();\\n        int[][] dp=new int[n][n];\\n        for(int i=0;i<n;i++) Arrays.fill(dp[i],-1);\\n        return solve(0,n-1,dp,s);\\n        \\n    }\\n\\n    private int solve(int i,int j,int[][] dp,String s){\\n     if(i==j) return 1;\\n     if(dp[i][j]!=-1) return dp[i][j];\\n     int ans=Integer.MAX_VALUE;\\n     for(int k=i;k<j;k++){\\n         ans=Math.min(ans,solve(i,k,dp,s)+solve(k+1,j,dp,s));\\n     }\\n     return dp[i][j]=s.charAt(i)==s.charAt(j)?ans-1:ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n=s.length();\\n        int[][] dp=new int[n][n];\\n        for(int i=0;i<n;i++) Arrays.fill(dp[i],-1);\\n        return solve(0,n-1,dp,s);\\n        \\n    }\\n\\n    private int solve(int i,int j,int[][] dp,String s){\\n     if(i==j) return 1;\\n     if(dp[i][j]!=-1) return dp[i][j];\\n     int ans=Integer.MAX_VALUE;\\n     for(int k=i;k<j;k++){\\n         ans=Math.min(ans,solve(i,k,dp,s)+solve(k+1,j,dp,s));\\n     }\\n     return dp[i][j]=s.charAt(i)==s.charAt(j)?ans-1:ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839827,
                "title": "java-easy-dp-memorization",
                "content": "# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n        \\n        for (int i = n-1; i >= 0; --i) {\\n            dp[i][i] = 1;\\n            for (int j = i+1; j < n; ++j) {\\n                dp[i][j] = dp[i][j-1] + 1;\\n                for (int k = i; k < j; ++k) {\\n                    if (s.charAt(k) == s.charAt(j)) {\\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n                    }\\n                }\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839755,
                "title": "beats-93",
                "content": "\\n# Code\\n```\\nclass Solution:\\n\\n    def strangePrinter(self, s: str) -> int:\\n        # Get rid of duplicates and convert the string to a list for easy indexing\\n        l = [s[0]]\\n        for c in s:\\n            if c != l[-1]: l.append(c)\\n        s = l\\n        \\n        n = len(s)\\n        memo = [[0] * n for _ in range(n)]\\n\\n        # The new function for dynamic programming with memoization\\n        def dp(l, r):\\n            if l > r:\\n                return 0\\n            if memo[l][r] != 0:\\n                return memo[l][r]\\n\\n            ans = 1 + dp(l + 1, r)  # Start by printing the current character\\n\\n            for i in range(l + 1, r + 1):\\n                if s[l] == s[i]:\\n                    ans = min(ans, dp(l, i - 1) + dp(i + 1, r))\\n                    \\n            memo[l][r] = ans\\n            return ans\\n\\n        return dp(0, len(s) - 1)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n\\n    def strangePrinter(self, s: str) -> int:\\n        # Get rid of duplicates and convert the string to a list for easy indexing\\n        l = [s[0]]\\n        for c in s:\\n            if c != l[-1]: l.append(c)\\n        s = l\\n        \\n        n = len(s)\\n        memo = [[0] * n for _ in range(n)]\\n\\n        # The new function for dynamic programming with memoization\\n        def dp(l, r):\\n            if l > r:\\n                return 0\\n            if memo[l][r] != 0:\\n                return memo[l][r]\\n\\n            ans = 1 + dp(l + 1, r)  # Start by printing the current character\\n\\n            for i in range(l + 1, r + 1):\\n                if s[l] == s[i]:\\n                    ans = min(ans, dp(l, i - 1) + dp(i + 1, r))\\n                    \\n            memo[l][r] = ans\\n            return ans\\n\\n        return dp(0, len(s) - 1)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839748,
                "title": "beat-100-of-java-strange-printer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length(); // string banai\\n        char[] sChar = s.toCharArray(); // string s converted into character array\\n        int[][] dp = new int[n][n]; //2d array \\n        for(int[] in : dp) Arrays.fill(in, -1);\\n        return Util(0, n - 1, sChar, dp);// array staring from 0 to n-1\\n    }\\n    public int Util(int i, int j, char[] sChar, int[][] dp) {\\n        if (i > j) {\\n            return 0;\\n        }\\n\\n        if(dp[i][j] != -1) {\\n            return dp[i][j];}\\n        \\n        int firstLetter = sChar[i];\\n       \\n        int answer = 1 + Util(i + 1, j, sChar, dp);\\n        for (int k = i + 1; k <= j; k++) {\\n           \\n            if (sChar[k] == firstLetter) {   \\n                           \\n                int betterAnswer = Util(i, k - 1, sChar, dp) + Util(k + 1, j, sChar, dp);\\n                answer = Math.min(answer, betterAnswer);\\n            }\\n        }\\n        return dp[i][j] = answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n        int n = s.length(); // string banai\\n        char[] sChar = s.toCharArray(); // string s converted into character array\\n        int[][] dp = new int[n][n]; //2d array \\n        for(int[] in : dp) Arrays.fill(in, -1);\\n        return Util(0, n - 1, sChar, dp);// array staring from 0 to n-1\\n    }\\n    public int Util(int i, int j, char[] sChar, int[][] dp) {\\n        if (i > j) {\\n            return 0;\\n        }\\n\\n        if(dp[i][j] != -1) {\\n            return dp[i][j];}\\n        \\n        int firstLetter = sChar[i];\\n       \\n        int answer = 1 + Util(i + 1, j, sChar, dp);\\n        for (int k = i + 1; k <= j; k++) {\\n           \\n            if (sChar[k] == firstLetter) {   \\n                           \\n                int betterAnswer = Util(i, k - 1, sChar, dp) + Util(k + 1, j, sChar, dp);\\n                answer = Math.min(answer, betterAnswer);\\n            }\\n        }\\n        return dp[i][j] = answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839666,
                "title": "100-beats-java-solution",
                "content": "### The main idea is to build a table dp[i][j] that stores the minimum number of turns needed to print the substring from index i to index j. The table is filled in recursively, starting from the bottom up.\\n\\nThe base case is when i > j. In this case, the printer can print the empty string in 0 turns.\\n\\nFor other cases, the code considers two possible ways to print the substring:\\n\\nThe printer prints a sequence of the same character from index i to index j. The number of turns needed for this is 1 + minTurns(i, j - 1).\\nThe printer prints two or more sequences of the same character. The number of turns needed for this is minTurns(i, k) + minTurns(k + 1, j), where k is the index of the last character that is the same as the character at index j.\\nThe minimum of these two values is stored in dp[i][j].\\n\\nThe code returns dp[0][n - 1], which is the minimum number of turns needed to print the entire string.\\n\\n# Code\\n```\\nclass Solution {\\n   public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n\\n        return minTurns(0, n - 1, s, dp);\\n    }\\n\\n    private int minTurns(int start, int end,String s,int[][] dp) {\\n        if (start > end) {\\n            return 0;\\n        }\\n\\n        if (dp[start][end] != 0) {\\n            return dp[start][end];\\n        }\\n\\n        int res = minTurns(start, end - 1, s,dp) + 1;\\n\\n        for (int i = start; i < end; i++) {\\n            if (s.charAt(i) == s.charAt(end)) {\\n                res = Math.min(res, minTurns(start, i, s, dp) + minTurns(i + 1, end - 1, s, dp));\\n            }\\n        }\\n\\n        dp[start][end] = res;\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n   public int strangePrinter(String s) {\\n        int n = s.length();\\n        int[][] dp = new int[n][n];\\n\\n        return minTurns(0, n - 1, s, dp);\\n    }\\n\\n    private int minTurns(int start, int end,String s,int[][] dp) {\\n        if (start > end) {\\n            return 0;\\n        }\\n\\n        if (dp[start][end] != 0) {\\n            return dp[start][end];\\n        }\\n\\n        int res = minTurns(start, end - 1, s,dp) + 1;\\n\\n        for (int i = start; i < end; i++) {\\n            if (s.charAt(i) == s.charAt(end)) {\\n                res = Math.min(res, minTurns(start, i, s, dp) + minTurns(i + 1, end - 1, s, dp));\\n            }\\n        }\\n\\n        dp[start][end] = res;\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839627,
                "title": "ruby-solution",
                "content": "# Code\\n```ruby []\\n# @param {String} s\\n# @return {Integer}\\ndef strange_printer(s)\\n  @s = s.gsub(/(.)\\\\1*/, \\'\\\\1\\').chars\\n  \\n  @memo = {}\\n  @indices = {}\\n  @s.each_with_index do |char, index|\\n    (@indices[char] ||= []) << index\\n  end\\n  \\n  check_str(0, @s.size - 1)\\nend\\n\\ndef check_str(start_index, end_index)\\n  return @memo[[start_index, end_index]] if @memo[[start_index, end_index]]\\n  return 0 if start_index > end_index\\n  \\n  char = @s[start_index]\\n  \\n  suitable_indices = @indices[char].select {|char_index| char_index.between?(start_index + 1, end_index) }\\n  sub_results = suitable_indices.map! do |char_index|\\n                  check_str(start_index + 1, char_index - 1) + check_str(char_index, end_index)\\n                end\\n\\n  sub_results << ( check_str(start_index + 1, end_index) + 1 )\\n  @memo[[start_index, end_index]] = sub_results.min\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby []\\n# @param {String} s\\n# @return {Integer}\\ndef strange_printer(s)\\n  @s = s.gsub(/(.)\\\\1*/, \\'\\\\1\\').chars\\n  \\n  @memo = {}\\n  @indices = {}\\n  @s.each_with_index do |char, index|\\n    (@indices[char] ||= []) << index\\n  end\\n  \\n  check_str(0, @s.size - 1)\\nend\\n\\ndef check_str(start_index, end_index)\\n  return @memo[[start_index, end_index]] if @memo[[start_index, end_index]]\\n  return 0 if start_index > end_index\\n  \\n  char = @s[start_index]\\n  \\n  suitable_indices = @indices[char].select {|char_index| char_index.between?(start_index + 1, end_index) }\\n  sub_results = suitable_indices.map! do |char_index|\\n                  check_str(start_index + 1, char_index - 1) + check_str(char_index, end_index)\\n                end\\n\\n  sub_results << ( check_str(start_index + 1, end_index) + 1 )\\n  @memo[[start_index, end_index]] = sub_results.min\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3839474,
                "title": "simple-c-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nint solve(int i,int j,const string &s,vector<vector<int>>&dp){\\n    if(i==j){\\n        return 1;\\n    }\\n    if(dp[i][j]!=-1){\\n        return dp[i][j];\\n    }\\n    int minTurns=INT_MAX;\\n    for(int k=i;k<j;k++){\\n        minTurns=min(minTurns,solve(i,k,s,dp)+solve(k+1,j,s,dp));\\n    }\\n    return dp[i][j]=(s[i]==s[j]) ?minTurns-1:minTurns;\\n}\\n    int strangePrinter(string s) {\\n        int n=s.length();\\n        vector<vector<int>>dp(n,vector<int>(n,-1));\\n        return solve(0,n-1,s,dp);\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nint solve(int i,int j,const string &s,vector<vector<int>>&dp){\\n    if(i==j){\\n        return 1;\\n    }\\n    if(dp[i][j]!=-1){\\n        return dp[i][j];\\n    }\\n    int minTurns=INT_MAX;\\n    for(int k=i;k<j;k++){\\n        minTurns=min(minTurns,solve(i,k,s,dp)+solve(k+1,j,s,dp));\\n    }\\n    return dp[i][j]=(s[i]==s[j]) ?minTurns-1:minTurns;\\n}\\n    int strangePrinter(string s) {\\n        int n=s.length();\\n        vector<vector<int>>dp(n,vector<int>(n,-1));\\n        return solve(0,n-1,s,dp);\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839431,
                "title": "java-tabulation-solution",
                "content": "# Code\\n```\\nclass Solution \\n{\\n    public int strangePrinter(String s) \\n    {\\n        int n=s.length();\\n        if(s==null || n==0)\\n        return 0;\\n        char c[]=s.toCharArray();\\n        int dp[][]=new int[n][n];\\n        for(int i=0;i<n;i++)\\n        dp[i][i]=1;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            for(int j=i+1;j<n;j++)\\n            {\\n                int min=Integer.MAX_VALUE;\\n                for(int k=i;k<j;k++)\\n                    min=Math.min(min,dp[i][k]+dp[k+1][j]);\\n                if(c[i]==c[j])\\n                    min--;\\n                dp[i][j]=min;\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int strangePrinter(String s) \\n    {\\n        int n=s.length();\\n        if(s==null || n==0)\\n        return 0;\\n        char c[]=s.toCharArray();\\n        int dp[][]=new int[n][n];\\n        for(int i=0;i<n;i++)\\n        dp[i][i]=1;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            for(int j=i+1;j<n;j++)\\n            {\\n                int min=Integer.MAX_VALUE;\\n                for(int k=i;k<j;k++)\\n                    min=Math.min(min,dp[i][k]+dp[k+1][j]);\\n                if(c[i]==c[j])\\n                    min--;\\n                dp[i][j]=min;\\n            }\\n        }\\n        return dp[0][n-1];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839416,
                "title": "664-strange-printer",
                "content": "# Intuition\\nThe \"strange\" behavior of the printer (being able to print on top of existing characters and only printing the same character at a time) suggests that we can benefit from considering smaller subproblems. This is because if we know the best way to print a substring, then we can use that information to help us print the next substring.\\n\\n# Approach\\nThe solution to this problem is to use a dynamic programming (DP) table. The DP table is a 2D array, where each cell represents the minimum number of turns the printer needs to print the substring from one index to another.\\n1- Initialization: We start by initializing the diagonal of the DP table with 1, because the printer only needs one turn to print a single character.\\n2- Filling the DP Table: We then fill in the DP table from the bottom up. For each cell in the DP table, we first set the value to the number of turns needed to print the substring from that cell to the end of the string. Then, we consider all of the overlapping characters in the substring. If we can print a longer substring in fewer turns by overlapping characters, then we update the value of the cell to reflect that.\\n3- Final Output: After filling in the DP table, we can find the minimum number of turns needed to print the entire string at the cell in the top left corner of the table.\\n\\n# Complexity\\n- Time complexity:\\n(O(n^3))\\n\\n- Space complexity:\\n(O(n^2))\\n\\n# Code\\n```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n      int n=s.length();\\n      int[][] dp = new int[n][n];\\n      for(int i=n-1;i>=0;i--){\\n        dp[i][i]=1;\\n        for(int j=i+1;j<n;j++){\\n          dp[i][j]=dp[i][j-1]+1;\\n          for(int k=i;k<j;k++){\\n            if(s.charAt(k)==s.charAt(j)){\\n              dp[i][j]=Math.min(dp[i][j], dp[i][k] + \\n              (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n             }\\n           }\\n         }\\n       } \\n       return dp[0][n-1];\\n    }\\n}\\nplease upvote if you like the solution\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\n    public int strangePrinter(String s) {\\n      int n=s.length();\\n      int[][] dp = new int[n][n];\\n      for(int i=n-1;i>=0;i--){\\n        dp[i][i]=1;\\n        for(int j=i+1;j<n;j++){\\n          dp[i][j]=dp[i][j-1]+1;\\n          for(int k=i;k<j;k++){\\n            if(s.charAt(k)==s.charAt(j)){\\n              dp[i][j]=Math.min(dp[i][j], dp[i][k] + \\n              (k+1<=j-1 ? dp[k+1][j-1] : 0));\\n             }\\n           }\\n         }\\n       } \\n       return dp[0][n-1];\\n    }\\n}\\nplease upvote if you like the solution\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839405,
                "title": "dynamic-programming-video-youtube-link",
                "content": "https://youtu.be/A327CWvzFcs\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> m(n,vector<int>(n,1));\\n        for(int i = n-1;i>=0;i--){\\n            for(int d=1;d<n-i;d++){\\n                int j = i+d;\\n                if(d==1){\\n                    if(s[i]==s[j]){\\n                        m[i][j] = 1;\\n                    }else{\\n                        m[i][j] = 2;\\n                    }\\n                    continue;\\n                }\\n                m[i][j] = INT_MAX;\\n                for(int k=i;k<j;k++){\\n                    m[i][j] = min(m[i][k]+m[k+1][j],m[i][j]);\\n                }\\n                if(s[i]==s[j]){\\n                    m[i][j] -= 1;\\n                }\\n            }\\n        }\\n        return m[0][n-1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int strangePrinter(string s) {\\n        int n = s.size();\\n        vector<vector<int>> m(n,vector<int>(n,1));\\n        for(int i = n-1;i>=0;i--){\\n            for(int d=1;d<n-i;d++){\\n                int j = i+d;\\n                if(d==1){\\n                    if(s[i]==s[j]){\\n                        m[i][j] = 1;\\n                    }else{\\n                        m[i][j] = 2;\\n                    }\\n                    continue;\\n                }\\n                m[i][j] = INT_MAX;\\n                for(int k=i;k<j;k++){\\n                    m[i][j] = min(m[i][k]+m[k+1][j],m[i][j]);\\n                }\\n                if(s[i]==s[j]){\\n                    m[i][j] -= 1;\\n                }\\n            }\\n        }\\n        return m[0][n-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839399,
                "title": "664-strange-printer",
                "content": "# Intuition\\nThe \"strange\" behavior of the printer (being able to print on top of existing characters and only printing the same character at a time) suggests that we can benefit from considering smaller subproblems. This is because if we know the best way to print a substring, then we can use that information to help us print the next substring.\\n\\n# Approach\\nThe solution to this problem is to use a dynamic programming (DP) table. The DP table is a 2D array, where each cell represents the minimum number of turns the printer needs to print the substring from one index to another.\\n1- Initialization: We start by initializing the diagonal of the DP table with 1, because the printer only needs one turn to print a single character.\\n2- Filling the DP Table: We then fill in the DP table from the bottom up. For each cell in the DP table, we first set the value to the number of turns needed to print the substring from that cell to the end of the string. Then, we consider all of the overlapping characters in the substring. If we can print a longer substring in fewer turns by overlapping characters, then we update the value of the cell to reflect that.\\n3- Final Output: After filling in the DP table, we can find the minimum number of turns needed to print the entire string at the cell in the top left corner of the table.\\n\\n# Complexity\\n- Time complexity:\\n(O(n^3))\\n\\n- Space complexity:\\n(O(n^2))\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  int strangePrinter(string s) {\\n    int n=s.size();\\n    vector<vector<int>> dp(n, vector<int>(n,0));\\n    for(int i=n-1;i>=0;i--){\\n    dp[i][i]=1;\\n    for(int j=i+1;j<n;j++){\\n      dp[i][j]=dp[i][j-1]+1;\\n      for(int k=i;k<j;k++){\\n        if(s[k]==s[j]){\\n         dp[i][j]=min(dp[i][j], dp[i][k]+\\n           (k+1<=j-1 ? dp[k+1][j-1]: 0));\\n          }\\n        }\\n      }\\n    } \\n    return dp[0][n-1];\\n  }\\n};\\nplease upvote if you like the solution\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int strangePrinter(string s) {\\n    int n=s.size();\\n    vector<vector<int>> dp(n, vector<int>(n,0));\\n    for(int i=n-1;i>=0;i--){\\n    dp[i][i]=1;\\n    for(int j=i+1;j<n;j++){\\n      dp[i][j]=dp[i][j-1]+1;\\n      for(int k=i;k<j;k++){\\n        if(s[k]==s[j]){\\n         dp[i][j]=min(dp[i][j], dp[i][k]+\\n           (k+1<=j-1 ? dp[k+1][j-1]: 0));\\n          }\\n        }\\n      }\\n    } \\n    return dp[0][n-1];\\n  }\\n};\\nplease upvote if you like the solution\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1992723,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992151,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992146,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992149,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1565206,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1568615,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992148,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992139,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1566519,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992396,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992723,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992151,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992146,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992149,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1565206,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1568615,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992148,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992139,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1566519,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992396,
                "content": [
                    {
                        "username": "wangchenmeng09",
                        "content": "For Christ\\'s sake, just toss this printer out of the window and buy a new one."
                    },
                    {
                        "username": "hero080",
                        "content": "Maybe I can\\'t afford a new one and picked up the one you just tossed."
                    },
                    {
                        "username": "halfengineer",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "_pragya_bansal1212",
                        "content": "lol!\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "nah man they won\\'t they expect us to fix it cause we are doing computer engineering"
                    },
                    {
                        "username": "aDDyy",
                        "content": "Strange Question as its name suggest😂🙃 + Leetcode please always try to give valuable TestCases for a problem🙂, this TC was not at all enough🥲"
                    },
                    {
                        "username": "anwendeng",
                        "content": "That is a strange question. I don\\'t figure out what the true meaning of the question is!"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "So glad I did this one already, if you\\'re doing this for the first time, don\\'t worry if you cannot figure it out. This is a VERY hard DP problem. IMO one of the hardest problems on the site unless you\\'ve done lots of dp."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "[@SahilNikam](/SahilNikam) If you just started with DP, do easier questions first. Eventually, these types of recurrence relationships build up naturally, but you should start with easier subsequence questions."
                    },
                    {
                        "username": "SahilNikam",
                        "content": "how to continue doing dp after seeing such terrible types of questions. I have just started with dp."
                    },
                    {
                        "username": "NaoJoeMiao",
                        "content": "checkout 546. Remove Boxes, it is almost the same question"
                    },
                    {
                        "username": "Abhinavhaldiya",
                        "content": "If consistency has a face ,it\\'s you."
                    },
                    {
                        "username": "savecancel",
                        "content": "http://www.usaco.org/index.php?page=viewproblem2&cpid=1114"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Examples don\\'t help too much with understanding the problem "
                    },
                    {
                        "username": "Ashwini_Tiwari",
                        "content": "weekend is hard"
                    },
                    {
                        "username": "thrivikramaa",
                        "content": "This might be a dumb question. But I can't seem to understand the constraints of the question:\\n\\n* The printer can only print a sequence of the same character each time.\\n  \\n*  At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.\\n\\nFor example:\\nFor the string \"abcabc\", the answer is 5\\nWhy can't we print \"aaaa\" covering 'a' to 'a', then \"bbbb\" covering 'b' to 'b' and then \"cccc\" covering 'c' to 'c'. making  it 3.\\n\\nTrivially the answer will end up to be the # of unique chars in the string, which obviously is not the case!\\n\\nCan someone please reword the question?"
                    },
                    {
                        "username": "user2418K",
                        "content": "[@bscnrb446619](/bscnrb446619) \\'bbbbbb\\' -> \\'bbgggb\\' -> \\'tbgggb\\' -> \\'tbgtgb\\'"
                    },
                    {
                        "username": "bscnrb446619",
                        "content": "[@shivamguptacoder](/shivamguptacoder) ... How would you explain:\\n# s = \\'tbgtgb\\' -> 4"
                    },
                    {
                        "username": "shivamguptacoder",
                        "content": "[@sumitdarshanala](/sumitdarshanala)  \\nMy method is different for abcabc\\n1] aaaa            //print a from 0-3\\n2] abbbb         //print b from 1-4\\n3] abcccc         //print c from 2-5\\n4] abcacc         //print a at 3\\n5] abcabc        //print b at 4\\n"
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "bro,\\nwhen u do a->a  1.] aaaa\\nthen b - > b         2.]abbbb\\nthen c - > c          3.]abcccc\\nthis is what happen when u do what u have suggested\\n\\nthe 5 step are as\\naaaa\\nabaa                  \\nabca\\nabcabb\\nabcabc\\nhope this helps !!\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "The printer has two rules:\\n\\n1. The printer can only print a sequence of the same character each time: This means that if the printer starts printing, it can only print the same character until it stops. For instance, it can print \"aaaa\" or \"bbbb\", but it can\\'t print \"abab\" in one go.\\n\\n2. At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters: This rule is a bit trickier. It allows the printer to start and stop printing at any places in the string, and if it prints over already printed characters, the new characters replace the old ones.\\n\\nHere is where the confusion seems to come in. When the printer prints a character, it \"covers\" any existing characters in that range. This is why the printer can\\'t just print all \\'a\\'s, then all \\'b\\'s, then all \\'c\\'s in your example.\\n\\nLet\\'s take your example \"abcabc\". If the printer first prints \"aaaaaa\" (replacing \\'a\\' to \\'a\\'), then the string becomes \"aaaaaa\". Now, if the printer tries to print \"bbbb\" covering \\'b\\' to \\'b\\', there are no \\'b\\'s left in the string, so the printer actually can\\'t do this in one turn. Instead, it would have to print one \\'b\\' at a time, at two different places, which would take two turns, not one. \\n\\nSo, the strategy of printing all of each character at once doesn\\'t work, because as soon as you print the first character, you cover all the positions where the next character would go.\\n\\nThat\\'s why we need a more sophisticated strategy to minimize the number of turns. For example, in \"abcabc\", a good strategy might be to print \"aaaaaa\", then print \"bb\" in the middle, then \"cc\" in the middle of that. This would take only three turns."
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "while printing \"bbbb\" over \"aaaa\" from \\'b\\' to \\'b\\' the string will become \"abbbb\" after \"cccc\" it will end up like \"abcccc\" and not \"abcabc\"\\n\\nfor the correct answer print \"aaaa\" then \"b\" at the first \"abaa\" then again at last \"abaab\" now print the remaining \\'c\\' at middle \"abcab\" then last \"abcabc\"\\n\\nHope it Helps!!!"
                    },
                    {
                        "username": "Dhairya_Vardhan_Chauhan",
                        "content": "Even after solving 92 dp problems I was not even able to think this on \\uD83E\\uDD71\\uD83D\\uDE1E"
                    },
                    {
                        "username": "shikr02",
                        "content": "same here brother!"
                    },
                    {
                        "username": "codeMonarch",
                        "content": "can feel you :-("
                    }
                ]
            },
            {
                "id": 1992138,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1993073,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1992917,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1992757,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1992850,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1992564,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1832202,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1571799,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1993157,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1993106,
                "content": [
                    {
                        "username": "Jeetaksh",
                        "content": "Follow-up:\\nPrint \"helloworld\" in minimum turns using this printer."
                    },
                    {
                        "username": "raghav2130",
                        "content": "is 7 correct for this \\n"
                    },
                    {
                        "username": "VMAtm",
                        "content": "Really nice TC here )"
                    },
                    {
                        "username": "trashw1n",
                        "content": "never buying HP printers again "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "### For those who didnt get the question :\\n\\nSuppose we want to print the the string `abcdbca`. Then the printer can do it in the following way :\\n`a` : a\\n`b` : a b\\n`c` : a b c\\n`d` : a b c d\\n`b` : a b c d b\\n`c` : a b c\\n`a` : a\\n\\nwhere each column represents one turn of the printer, as it can only print the same characters in one turn. Here it took 5 turns for the printer to print the string `abcdbca`. You have to find a way to print the string using this strange printer with minimum possible turns. I hope I am to explain."
                    },
                    {
                        "username": "The_Laughing_Storm",
                        "content": "guys notice that the max length of the string is 100, that mean O(n^3) and O(n^4 ) are allowed"
                    },
                    {
                        "username": "swnsma",
                        "content": "If you had a hard time to understand the question,\\nconsider at some moment of time you had string \\u201Cabc\\u201D and from here you have 2 operations:\\n1) Print a sequence of same letter to the end of the string. e.g. we want to print 5 \\u201Cd\\u201D, which will result in \\u201Cabcddddd\\u201D.\\n2) Print some sequence of the same letter OVER already available in the string. E.g. for the string from point 1 we are printing \\u201Ceee\\u201D from position 5: \\u201Cabcdeeed\\u201D.\\n\\nSo, for string \\u201Cabcabc\\u201D we could:\\n\\n1) Print \\u201Caaaa\\u201D\\n2) Print-over \\u201Cb\\u201D: \\u201Cabaa\\u201D\\n3) Print-over \\u201Cc\\u201D \\u201Cabca\\u201D\\n4) Print \\u201Cb\\u201D: \\u201Cabcab\\u201D\\n5) Print \\u201Cc\\u201D: \\u201Cabcabc\\u201D\\nThis is not the only way to print this string, but the minimum answer is 5."
                    },
                    {
                        "username": "fli033",
                        "content": "I dont even understand the solution. FK this bs"
                    },
                    {
                        "username": "neeshumaini55",
                        "content": "s = \\'tbgtgb\\' \\nwhy is answer 4 for this test case it should be 5\\n"
                    },
                    {
                        "username": "AndriiRubtsov",
                        "content": "[@bparanj](/bparanj) Sorry, but \"2.\" is incorrect. The printer cannot print at different positions in one go. The other examples here are correct 4-step solutions."
                    },
                    {
                        "username": "sumitdarshanala",
                        "content": "4 are as \\nt\\ntbbbbb\\ntbgggb\\ntbgtgb"
                    },
                    {
                        "username": "bparanj",
                        "content": "In the problem, the printer can only print a sequence of the same character each time but it can start and end printing at any place, covering the original existing characters. Given the string \\'tbgtgb\\', we can achieve this in 4 steps.\\n\\nHere are the steps:\\n1. Print \\'t\\' at positions 1 and 6. The resulting string becomes \\'t___t_\\'.\\n2. Print \\'b\\' at positions 2 and 5. The resulting string becomes \\'tb__tb\\'.\\n3. Print \\'g\\' at position 3. The resulting string becomes \\'tbg_tb\\'.\\n4. Print \\'g\\' at position 4. The resulting string becomes \\'tbgtgb\\'.\\n\\nHence the minimum number of turns required to print the string \\'tbgtgb\\' is 4, not 5. The strategy here is to print all occurrences of the same character in the string in a single turn. This strategy leads to the minimum number of turns needed to print the string."
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'tttttt\\'\\n\\'tbbbbb\\'\\n\\'tbgggb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "CodingMasterP",
                        "content": "\\'bbbbbb\\'\\n\\'bbgggb\\'\\n\\'bbgtgb\\'\\n\\'tbgtgb\\'"
                    },
                    {
                        "username": "rohit_adithya",
                        "content": "firstly print b\\'s to get \"bbbbb\"\\nthen g\\'s to get \"bgggb\"\\nthen the t\\'s \"bgtgb\" and \"tbgtgb\"\\nmaking total steps as 4 [<5]"
                    },
                    {
                        "username": "lionel",
                        "content": "\"abcabccb\"\\nexpected: 5 \\nOJ's answer is 4"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "abcabccb\\n\\n1. bbbbbbb\\n2. bbbbccb\\n3. bcbbbbb\\n4. abcbbbbb\\n5. abcabbbb\\n\\nhow is this 4?"
                    },
                    {
                        "username": "manraj_singh_16447",
                        "content": "An explanation for those who didn't got the question : \n\nYou can only print consecutive set of characters in one go :\nExample : abcab is given\n\nBegin\nStep1 : if we remove 'c' string will become : abab , ans = 1\nStep2 : if we remove 'a' string will become : abb , ans = 2\nStep 3 : now we can remove bb in one go: a , ans = 3\nStep 4 : Remove a : \" \" , ans = 4\n\nEnd\n\nExample 2 : abcabc\n\nBegin\nStep1 : if we remove 'c' string will become : ababc , ans = 1\nStep2 : if we remove 'a' string will become : abbc , ans = 2\nStep 3 : now we can remove bb in one go: ac , ans = 3\nStep 4 : Remove 'a' : c , ans = 4\nStep 5 : Remove 'c' : \" \" , ans = 5\nEnd\n\nupvote if helps !"
                    },
                    {
                        "username": "mehta183",
                        "content": "is printer ki mkb..."
                    }
                ]
            },
            {
                "id": 1993017,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1992930,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1992783,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1992628,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1992479,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1992166,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1574114,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1992477,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 2075687,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 2009350,
                "content": [
                    {
                        "username": "Minamikaze392",
                        "content": "\"What do you usually do on the weekends?\"\n\"LeetCode.\"\n\"That's cool. What else?\"\n\"Nothing else.\"\n\"Huh, why?\"\n\"It usually takes my whole weekend.\""
                    },
                    {
                        "username": "joshithmurthy",
                        "content": "can some body explain this , while caluclating dp[i][j] for some perticular k,\\nwe are printing s[i......k] and , when the char s[k] is printed we keep printing the same char till j , so that makes changes on string s[k+1......j-1] to the char s[j],\\nand then we print the required s[k+1......j-1] over it optimally ( since we are adding dp[k+1][j-1] )\\n\\n\\nif that is the case , then we are missing a crucial point.\\nsay s[j] was \\'a\\' , that means we print s[i......k] and print \"aa....aaa\" till kth index.\\n\\nand if while printing s[k+1 ......j-1] , printing \"aa...aaa\" was the first optimal step then we should adding   (dp[k+1][j-1] - 1) instead of dp[k+1][j-1] .\\n\\n"
                    },
                    {
                        "username": "gauravbisht126",
                        "content": "just hit it with a hammer once and it will start working why bother to put it as a question."
                    },
                    {
                        "username": "nirajthakare",
                        "content": "at first we make all the character  same we do it for all small letter then if the recursion if character become different than this we add 1 (mark it as previous) and if in upcoming recursive calls character of string is different from the original one and previous one the we again add 1 and mark it as one will it work ??"
                    },
                    {
                        "username": "michaelniki",
                        "content": "I am curious about is there any applications of this problem? If yes, I will be more motivated to dig into it."
                    },
                    {
                        "username": "serkora",
                        "content": "[@psionl0](/psionl0) Unless you were making a joke I missed, it\\'s not about a printer. It\\'s about the algorithm required to solve such problem, whether it can be applied to anything actually useful, since a printer is obviously not a viable use of it."
                    },
                    {
                        "username": "psionl0",
                        "content": "I doubt it. In the real world, when a printer prints over a letter, the original letter is still there so you just have one letter over another. In the limit, when the printer prints over the same letter enough times, you will be left with a solid block."
                    },
                    {
                        "username": "suren-yeager",
                        "content": "It\\'s hard to understand what we are supposed to do in problems like these without looking at the discussion. I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better"
                    },
                    {
                        "username": "Ebad1001",
                        "content": "\"I dunno if I\\'m very poor at understanding problem statements or whether the problem could have been worded better\"\\n\\nI would say both. The problem is worded very bad, I agree. But it is still somewhat understandable. "
                    },
                    {
                        "username": "bubu0321",
                        "content": "Anyone has idea if this question is expanded to 2D ?  \\nThe sequnce now becomes a matrix.\\nThe printer can accept the cmd as : (x1,x2, y1, y2, a), which means  it will set the matrix where x >= x1, x <= x2, y >= y1, y <= y2 to the charactor a.\\nThe question is how many prints needed to print the target ?\\nE.g.:\\nTarget = [[a,a,b,b,a],[a,a,b,b,a]]\\nat least 2, \\nstep 1\\uFF1A\\uFF080\\uFF0C1\\uFF0C0\\uFF0C4\\uFF0Ca\\uFF09,\\nstep 2\\uFF1A\\uFF080\\uFF0C1\\uFF0C2\\uFF0C3\\uFF0Cb\\uFF09\\n\\nThe only thoughts I have is cascade all the rows which are same to be 1 row. Then calculate the how many distinct rows in target, and do the same dp algorithm in 1D for each row, and sum all the results.\\n\\nBut I don\\'t know whether this will be the minimum.\\n\\nThanks.\\n\\n"
                    },
                    {
                        "username": "bparanj",
                        "content": "Expanding this problem to a 2D matrix adds significant complexity because there are more degrees of freedom in a matrix than in a 1D string. Your current approach assumes the printer operates row by row, but that may not always yield the minimum number of operations. In some cases, it might be more efficient to print multiple rows or columns at the same time, or even rectangular sections of the matrix.\\n\\nHere is a high-level idea for a potential approach:\\n\\n1. Segment the matrix: First, divide the matrix into segments of contiguous cells with the same value. You can use a technique similar to the flood-fill algorithm to find these segments.\\n\\n2. Build a graph: Next, build a graph where each node represents a segment from step 1, and each edge represents a possible print operation that can cover one segment with another. The weight of the edge can be calculated based on the size of the print operation.\\n\\n3. Solve the Steiner Tree problem: Finally, find the minimum Steiner Tree in the graph. The Steiner Tree problem is to find a tree of minimum total length that spans a given set of points in a graph. This represents the minimum set of print operations needed to create all the segments.\\n\\nHowever, the Steiner Tree problem is NP-hard, meaning there is no known polynomial-time solution. So while this approach might yield optimal results, it could be prohibitively slow for large matrices. Practical solutions might require heuristics or approximation algorithms.\\n\\nIt\\'s worth noting that this problem is significantly more difficult than the original 1D version. It\\'s not just a matter of applying the same DP algorithm to each row. You also need to account for the relationships between rows, which requires a more sophisticated approach.\\n\\nIf you\\'re interested in tackling this kind of problem, I\\'d recommend looking into research on image segmentation and graph-based optimization algorithms."
                    },
                    {
                        "username": "mrb15",
                        "content": "        unordered_map<char,int>us;\\n        for(auto st : s)\\n        {\\n            us[st]=1;\\n        }\\n        return us.size();\\nstill passed 36 test cases out of 200!\\n"
                    },
                    {
                        "username": "Shubham_Raj22",
                        "content": "so?"
                    },
                    {
                        "username": "Meher6124",
                        "content": "exact similar to the  Remove Boxes problem https://leetcode.com/problems/remove-boxes\nit can be solved using just 2d dp as compare to Remove Boxes problem (3d)"
                    },
                    {
                        "username": "isusel",
                        "content": "This is a very hard, yet interesting problem.\\nOne good way to boost the performance (once you figured out hot to use DP here) is to modify the initial string by removing consecutive letters.\\n\"aaabbbcccaa\" is equivalent to \"abca\"."
                    }
                ]
            },
            {
                "id": 1995457,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1995156,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1994100,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993652,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993588,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993504,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993382,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993248,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993243,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993107,
                "content": [
                    {
                        "username": "cpcdevar",
                        "content": "Can anyone explain why output of \"bhjdfbdj\" is 6 and not 7?"
                    },
                    {
                        "username": "darkfiredragonz",
                        "content": "bhjdfbdj\\n\\n1. jjjjjj\\n2.jddddj\\n3.jdffdj\\n4.jdfbdj\\n5.hjdfbdj\\n6.bhjdfbdj"
                    },
                    {
                        "username": "user1922Iv",
                        "content": "the question is badly described "
                    },
                    {
                        "username": "strangeranda",
                        "content": "Ok, I might be getting this wrong, but here\\u2019s what I\\u2019m getting:\\n\\n`abcabcabc` \\n\\n1 -> aaaaaaabc\\n2 -> abbbbbbbc\\n3 -> abccccccc\\n4 -> abcaaaabc\\n5 -> abcabbbbc\\n6 -> abcabcccc\\n7 -> abcabcacc\\n8 -> abcabcabc\\n\\nexpected is 7 steps. Am I not understanding this correctly? I thought we should iteratively fix the bad indices once we finish all the stream  of indices."
                    },
                    {
                        "username": "hero080",
                        "content": "Is there a solution with sub-cubic TC?"
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "no there is not"
                    },
                    {
                        "username": "sumitkamble",
                        "content": "really hard questions leave you confused \\uD83D\\uDE42"
                    },
                    {
                        "username": "julkar9",
                        "content": "RIP 35 days streak"
                    },
                    {
                        "username": "MS98",
                        "content": "For Those Who want to understand Ques \\uD83D\\uDC3B\\u200D\\u2744\\uFE0F\\n ```\\n         s = \\'tbgtgb\\'\\n        \\n        0 1 2 3 4 5    Char  Range  Count\\n        t t t t t t     t    [0-5]   1\\n        t b b b b b     b    [1-5]   2\\n        t b g g g b     g    [2-4]   3\\n        t b h t g b     t    [3,3]   4\\n        \\n        ans = 4\\n```"
                    },
                    {
                        "username": "pkjha0102",
                        "content": "What is meant by \\'200/200 testcases passed and still Time Limit Exceeded in last testcase which eventually is empty string?\\' Somebody please clarify."
                    },
                    {
                        "username": "prudhvirajch",
                        "content": "Is this Right?\\n\\n\"aaabbb\"\\n-> aaaaaa\\n-> aaabbb\\n\\n\"aba\"\\n-> aaa\\n-> aba\\n\\n\"abcabc\"\\n-> aaaaaa\\n-> abbaaa\\n-> abcaaa\\n-> abcabb\\n-> abcabc"
                    },
                    {
                        "username": "strangeranda",
                        "content": "To my understanding, no. \\nsince `aaa` and `bbb` are a sequence in the original string, it just prints those, hence 2\\n\\nand for `aba`, it prints `aaa` in one stream and corrects the `b` since its the only occurrence of `b` \\n\\nand for `abcabc`, it prints \\n1 -> `aaaabc`\\n2 -> `abbbbc`\\n3 -> `abcccc`\\n4 -> `abcacc`\\n5 -> `abcabc`"
                    },
                    {
                        "username": "nickshpil",
                        "content": "Input: \"tbgtgb\"\n\nIn my solution, it takes 5 steps:\n1) tttt\n2) tbtt\n3) tbgt\n4) tbgtg\n5) tbgtgb\n\nAny ideas why it expects 4? Did I misread anything?\n\nUpdated:\n\nI got it.\n1) bbbbb\n2) bgggb\n3) bgtgb\n4) tbgtgb\n\nI missed the part where the printer can write at any position, including the beginning."
                    }
                ]
            },
            {
                "id": 1993063,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1993004,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992955,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992855,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992731,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992726,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992698,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992687,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992548,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            },
            {
                "id": 1992486,
                "content": [
                    {
                        "username": "saumya2002",
                        "content": "I am struggling to understand why we did not return no of unique characters.\\nWhat is the process behind the intuition that we need to use dp"
                    },
                    {
                        "username": "maheshwarreddyracham44",
                        "content": "If there are multiple ways of getting answer then you can think of partition dp ,then find best among them\\n"
                    },
                    {
                        "username": "praby",
                        "content": "## Never use a \\uD83D\\uDDA8 over a weekend \\n\\nThis strange printer wasted few pages of my weekend. The problem statement and the examples are not sufficient, move on to the next one guys."
                    },
                    {
                        "username": "nishant_singh_",
                        "content": "Strange question like its Test cases "
                    },
                    {
                        "username": "piyushagrawal886",
                        "content": "i don\\'t get the question. someone please explain me what the question says.\\n"
                    },
                    {
                        "username": "anishgupta675",
                        "content": "Off-topic, but this is essentially the same problem as \"Clear the String\" from Educational Codeforces Round 61: https://codeforces.com/contest/1132/problem/F"
                    },
                    {
                        "username": "xxossoo96",
                        "content": "rage to the machine"
                    },
                    {
                        "username": "m_karthik_7",
                        "content": "if any one understood help me understanding too plzz."
                    },
                    {
                        "username": "Anurag_mishra_08",
                        "content": "2nd property of this strange printer is really strange !!"
                    },
                    {
                        "username": "Msey",
                        "content": "hard times"
                    }
                ]
            }
        ]
    }
]