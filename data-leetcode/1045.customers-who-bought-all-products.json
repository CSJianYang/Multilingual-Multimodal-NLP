[
    {
        "title": "Customers Who Bought All Products",
        "question_content": "Table: Customer\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| customer_id | int     |\n| product_key | int     |\n+-------------+---------+\nThis table may contain duplicates rows. \ncustomer_id is not NULL.\nproduct_key is a foreign key (reference column) to Product table.\n&nbsp;\nTable: Product\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_key | int     |\n+-------------+---------+\nproduct_key is the primary key (column with unique values) for this table.\n&nbsp;\nWrite a solution to report the customer ids from the Customer table that bought all the products in the Product table.\nReturn the result table in any order.\nThe&nbsp;result format is in the following example.\n&nbsp;\nExample 1:\nInput: \nCustomer table:\n+-------------+-------------+\n| customer_id | product_key |\n+-------------+-------------+\n| 1           | 5           |\n| 2           | 6           |\n| 3           | 5           |\n| 3           | 6           |\n| 1           | 6           |\n+-------------+-------------+\nProduct table:\n+-------------+\n| product_key |\n+-------------+\n| 5           |\n| 6           |\n+-------------+\nOutput: \n+-------------+\n| customer_id |\n+-------------+\n| 1           |\n| 3           |\n+-------------+\nExplanation: \nThe customers who bought all the products (5 and 6) are customers with IDs 1 and 3.",
        "solutions": [
            {
                "id": 294748,
                "title": "mysql-subquery",
                "content": "```\\nselect customer_id\\nfrom customer c\\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect customer_id\\nfrom customer c\\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3608247,
                "title": "simple-solution-with-two-line-query",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nTo find the customers who have bought all the products, we need to compare the distinct products bought by each customer with the total number of products available. If the counts match, it means the customer has bought all the products.\\n\\n# Approach\\n1. Select the customer_id from the Customer table.\\n1. Group the results by customer_id.\\n1. Apply a HAVING clause to filter out customers who have not bought all the products.\\n1. In the HAVING clause, use ***COUNT(DISTINCT product_key)*** to count the number of distinct product keys for each customer.\\n1. Compare this count with the total count of product keys in the Product table obtained through a subquery.\\n1. If the counts match, it means the customer has bought all the products.\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution depends on the size of the Customer and Product tables. Let\\'s assume there are n customers and m products. The counting of distinct product keys for each customer takes $$O(n)$$ time, and the subquery to count the total number of products takes $$O(m)$$ time. Therefore, the overall time complexity can be approximated as $$O(n + m)$$.\\n\\n- Space complexity:\\nThe space complexity of this solution is considered $$O(1)$$ or constant. It only requires a constant amount of additional space for storing intermediate results and the subquery. The space usage does not depend on the size of the input tables.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\'SELECT  customer_id FROM Customer GROUP BY customer_id\\nHAVING COUNT(distinct product_key) = (SELECT COUNT(product_key) FROM Product)\\'\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/9b775724-1c6b-46bb-8e7b-5f6f8be29f1c_1686125409.4786477.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\'SELECT  customer_id FROM Customer GROUP BY customer_id\\nHAVING COUNT(distinct product_key) = (SELECT COUNT(product_key) FROM Product)\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3865452,
                "title": "100-easy-fast-clean-solution",
                "content": "IF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING \\n\\nCOUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/8277a962-a3d0-44d3-b441-e4bbae047a8b_1691212838.5783477.jpeg)\\n",
                "solutionTags": [
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING \\n\\nCOUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 454314,
                "title": "most-posted-solutions-are-wrong",
                "content": "**Ignore my post if you only interested in getting your code pass the leetcode test, but not interested in how to do things right!!!**\\n\\n\\nMost solutions posted here have used \\'count distinct product_key\\'. However, this method **should NOT be considered as the correct answer**. For example, if the **Product** table contains **5 & 7** instead of **5 & 6**, using \\'count distinct product_key\\', you will still get results of customer_id **1 & 3**, which is definitely **WRONG!!!**\\n\\n![image](https://assets.leetcode.com/users/sophiesu0827/image_1576613740.png)\\n\\n**The correct procedures should be:**\\n1. do a **cartesian product** (**cross join** in MySQL) on all customer_id eg.1,2,3 from table Customer and all product_key from table \"Product \". \\n![image](https://assets.leetcode.com/users/sophiesu0827/image_1576613877.png)\\n\\n\\n2. find difference between table **Customer** and the **cartesian product**\\n![image](https://assets.leetcode.com/users/sophiesu0827/image_1576613041.png)\\n\\n3. list all customer_id not in the difference set (red row in the above table)\\n![image](https://assets.leetcode.com/users/sophiesu0827/image_1576614001.png)\\n\\n\\n\\n**MySQL code:**\\n\\n```\\nSELECT DISTINCT customer_id FROM Customer WHERE customer_id NOT IN (\\nSELECT customer_id FROM (\\nSELECT DISTINCT * FROM \\n(SELECT DISTINCT customer_id FROM Customer) C\\nCROSS JOIN Product P) C2\\nWHERE (customer_id,product_key) NOT IN (SELECT customer_id,product_key FROM Customer));\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT DISTINCT customer_id FROM Customer WHERE customer_id NOT IN (\\nSELECT customer_id FROM (\\nSELECT DISTINCT * FROM \\n(SELECT DISTINCT customer_id FROM Customer) C\\nCROSS JOIN Product P) C2\\nWHERE (customer_id,product_key) NOT IN (SELECT customer_id,product_key FROM Customer));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3582358,
                "title": "sql-easy-to-understand-group-by-sum-distinct-subquery",
                "content": "# Intuition\\r\\nWe can first group by customer_ids and then check them with having.\\r\\n\\r\\nThe pass shows 2 different ways to achieve the two solutions.\\r\\n\\r\\n![image.png](https://assets.leetcode.com/users/images/8ebca5a0-4abf-40f7-b5e2-ea062298ee6a_1685536566.1817262.png)\\r\\n\\r\\n\\r\\n# First Solution\\r\\n```\\r\\nSELECT                                      \\r\\n    customer_id\\r\\nFROM Customer\\r\\nGROUP BY customer_id\\r\\nHAVING SUM(DISTINCT product_key) = (\\r\\n    SELECT\\r\\n        SUM(product_key)\\r\\n    FROM Product\\r\\n); \\r\\n```\\r\\n# Second Solution\\r\\n```\\r\\nselect \\r\\ncustomer_id\\r\\n#SubQuery Begin -->\\r\\nfrom (select \\r\\ncase \\r\\n     when count(distinct product_key) = (select count(product_key) from Product)\\r\\n         then  customer_id end as customer_id\\r\\nfrom Customer c\\r\\ngroup by customer_id)  as subquery\\r\\n# SubQuery --> End\\r\\nwhere customer_id is not null\\r\\n\\r\\n); \\r\\n```\\r\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\r\\nSELECT                                      \\r\\n    customer_id\\r\\nFROM Customer\\r\\nGROUP BY customer_id\\r\\nHAVING SUM(DISTINCT product_key) = (\\r\\n    SELECT\\r\\n        SUM(product_key)\\r\\n    FROM Product\\r\\n); \\r\\n```\n```\\r\\nselect \\r\\ncustomer_id\\r\\n#SubQuery Begin -->\\r\\nfrom (select \\r\\ncase \\r\\n     when count(distinct product_key) = (select count(product_key) from Product)\\r\\n         then  customer_id end as customer_id\\r\\nfrom Customer c\\r\\ngroup by customer_id)  as subquery\\r\\n# SubQuery --> End\\r\\nwhere customer_id is not null\\r\\n\\r\\n); \\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 294657,
                "title": "simple-mysql-solution",
                "content": "Simple join and group by, followed by selecting customers whose unique(distinct) product bought count is equal to total number of products in product table.\\n\\n```\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct(product_key)) = (select count(product_key) from Product)\\n```",
                "solutionTags": [],
                "code": "```\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct(product_key)) = (select count(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 349171,
                "title": "robust-simple-answer",
                "content": "```sql\\nselect customer_id\\nfrom Customer \\nwhere product_key in (select distinct product_key from Product)\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from product);\\n```",
                "solutionTags": [],
                "code": "```sql\\nselect customer_id\\nfrom Customer \\nwhere product_key in (select distinct product_key from Product)\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1940533,
                "title": "i-don-t-like-joins-so-here-you-go-4-liner-having-solution",
                "content": "select customer_id\\nfrom Customer\\ngroup by 1\\nhaving count(distinct product_key) = (select count(distinct product_key)  from Product)",
                "solutionTags": [],
                "code": "select customer_id\\nfrom Customer\\ngroup by 1\\nhaving count(distinct product_key) = (select count(distinct product_key)  from Product)",
                "codeTag": "Unknown"
            },
            {
                "id": 1097414,
                "title": "using-group-concat-from-accurate-results",
                "content": "```\\nWITH c as (SELECT customer_id, \\nGROUP_CONCAT(DISTINCT product_key \\n                     order by product_key\\n                     separator \\',\\') as products\\nFROM Customer\\nGROUP BY customer_id),\\np as (\\nSELECT \\nGROUP_CONCAT(DISTINCT product_key \\n\\t\\t\\t\\torder by product_key\\n                 separator \\',\\') as uni_product\\nFROM Product)\\n\\nSELECT customer_id \\nFROM c, p\\nWHERE c.products = p.uni_product\\n```",
                "solutionTags": [],
                "code": "```\\nWITH c as (SELECT customer_id, \\nGROUP_CONCAT(DISTINCT product_key \\n                     order by product_key\\n                     separator \\',\\') as products\\nFROM Customer\\nGROUP BY customer_id),\\np as (\\nSELECT \\nGROUP_CONCAT(DISTINCT product_key \\n\\t\\t\\t\\torder by product_key\\n                 separator \\',\\') as uni_product\\nFROM Product)\\n\\nSELECT customer_id \\nFROM c, p\\nWHERE c.products = p.uni_product\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3601333,
                "title": "super-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT customer_id \\nFROM Customer C\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (SELECT COUNT(DISTINCT(product_key)) FROM Product)\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT customer_id \\nFROM Customer C\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (SELECT COUNT(DISTINCT(product_key)) FROM Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3572214,
                "title": "a-simple-and-easy-solution-using-group-by-distinct-and-count-beginner-level",
                "content": "# Explanation\\n\\nWe use group by customer_id to disinguish each customer_id and check the number of distinct products they have bought.\\n\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(DISTINCT product_key)\\n\\nAnd then we check if this count matches with the count of available products in the product table.\\n\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n\\nIF the count matches, then it is believed that customer has in fact purchased all the available products \\uD83D\\uDC4D.\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2328936,
                "title": "easy-mysql",
                "content": "\\tSELECT customer_id\\n\\tFROM Customer\\n\\tGROUP BY customer_id\\n\\tHAVING count(DISTINCT product_key) = (SELECT count(*) FROM Product)",
                "solutionTags": [],
                "code": "\\tSELECT customer_id\\n\\tFROM Customer\\n\\tGROUP BY customer_id\\n\\tHAVING count(DISTINCT product_key) = (SELECT count(*) FROM Product)",
                "codeTag": "Unknown"
            },
            {
                "id": 1569711,
                "title": "simple-4-line-solution",
                "content": "select customer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from product)",
                "solutionTags": [],
                "code": "select customer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from product)",
                "codeTag": "Unknown"
            },
            {
                "id": 679875,
                "title": "easy-to-understand-solution-no-cartesian-join-needed",
                "content": "Select customer_id from (select distinct \\n                         customer_id,product_key from customer) g group by customer_id\\nhaving count(*) = (select count( product_key) from product)\\n\\n1- Use the inner query to get rid of dups ( one customer purchasing same product more than once)\\n2- Then get the number of times each customerid appears in the customer table.\\n3- The records with the count equal to number of products should be in our answer.",
                "solutionTags": [],
                "code": "Select customer_id from (select distinct \\n                         customer_id,product_key from customer) g group by customer_id\\nhaving count(*) = (select count( product_key) from product)\\n\\n1- Use the inner query to get rid of dups ( one customer purchasing same product more than once)\\n2- Then get the number of times each customerid appears in the customer table.\\n3- The records with the count equal to number of products should be in our answer.",
                "codeTag": "Unknown"
            },
            {
                "id": 455370,
                "title": "mssql-answer",
                "content": "```\\nSELECT   customer_id\\nFROM     Customer\\nGROUP BY customer_id\\nHAVING   COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key)FROM Product)\\n```\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT   customer_id\\nFROM     Customer\\nGROUP BY customer_id\\nHAVING   COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key)FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 436889,
                "title": "super-easy-solution",
                "content": "```\\nselect \\ncustomer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)\\n;\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\ncustomer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3877362,
                "title": "easy-solution-mysql-having-clause-100-fast",
                "content": "# Intuition \\uD83E\\uDDE0\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to count the distinct product keys for each customers and then check if it matches with all the types of products in the product table.\\n# Approach \\uD83D\\uDEE4\\uFE0F\\n<!-- Describe your approach to solving the problem. -->\\nTo check that the count of distinct product keys of a customer is equal to the total types of products in Products table. We will just check if the count distinct of product key in Customer table is equal to count of Product Key in Products Table. So for that we have to add the condition in having clause.\\n\\n# Code \\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB\\n```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from Product)\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/d72c738f-2795-4c86-9fad-3e746bf42661_1691419489.5374012.png)\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3536635,
                "title": "mysql-solution-for-customers-who-brought-all-products-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the given solution is to find customer IDs that have purchased all distinct products available in the Product table. The approach involves grouping the Customer table by customer_id and then applying a condition in the HAVING clause to compare the sum of distinct product_key values for each customer with the total sum of product_key values in the Product table.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Group the rows in the Customer table by customer_id.\\n1. For each group, calculate the sum of distinct product_key values.\\n1. Compare the sum of distinct product_key values for each group with the total sum of product_key values in the Product table.\\n1. Return the customer_id values that satisfy the condition.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution depends on the size of the Customer and Product tables. The grouping operation requires scanning the Customer table, which has a time complexity of O(n), where n is the number of rows in the Customer table. Additionally, calculating the sum of distinct product_key values involves aggregating and comparing values, which also has a time complexity of O(n).\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this solution depends on the number of distinct customer_id values and the number of distinct product_key values. The query requires storing the grouped customer_id values and the distinct product_key values temporarily, so the space complexity is determined by the cardinality of these values.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id from Customer group by customer_id\\nhaving sum(distinct product_key) = \\n(select sum(product_key) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id from Customer group by customer_id\\nhaving sum(distinct product_key) = \\n(select sum(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1467737,
                "title": "easy-solution",
                "content": "```\\nselect customer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct(product_key)) = (select count(product_key) from product)\\n```",
                "solutionTags": [],
                "code": "```\\nselect customer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct(product_key)) = (select count(product_key) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1083035,
                "title": "one-subquery",
                "content": "Select the customers who purchased the as many distinct product_key as the count of all product in product table    \\n\\t\\n\\tselect customer_id\\n    from customer\\n    group by customer_id\\n    having count(distinct product_key) = (select count(*) from product);",
                "solutionTags": [],
                "code": "Select the customers who purchased the as many distinct product_key as the count of all product in product table    \\n\\t\\n\\tselect customer_id\\n    from customer\\n    group by customer_id\\n    having count(distinct product_key) = (select count(*) from product);",
                "codeTag": "Unknown"
            },
            {
                "id": 4056405,
                "title": "mysql-solution-with-complete-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe query aims to find customer IDs who have purchased all the products from the Customer table. It does so by counting the distinct product keys purchased by each customer and comparing that count to the total number of products in the `Product` table.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The inner subquery groups the customers by their IDs and counts the distinct product keys purchased by each customer using `COUNT(DISTINCT product_key)`.\\n\\n2. The `HAVING` clause filters out only those customers who have purchased as many distinct products as the total number of products in the `Product` table. This ensures that the customer has bought all the available products.\\n\\n3. The outer query selects the `customer_id` from the result of the inner subquery, which gives us the customer IDs who meet the criteria.\\n\\n\\n# Complexity\\n## Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- The time complexity of this query depends on the size of the `Customer` table and the `Product` table.\\n\\n- The inner subquery involves grouping and counting for each customer, which can be considered O(N), where N is the number of rows in the `Customer` table.\\n- The subquery `(SELECT COUNT(*) FROM Product)` is a constant-time operation, as it calculates the total number of products, which doesn\\'t depend on the size of the tables.\\n\\nSo, the overall time complexity is approximately **`O(N)`**, where N is the **number of customers**.\\n\\n## Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- The space complexity is primarily determined by the temporary result set created by the inner subquery. This result set stores the `customer_id` and the count of distinct product keys for each customer.\\n\\n- **Assuming M is the number of distinct customers who meet the criteria (those who have bought all products), the space complexity is `O(M)`**.\\n\\nIn terms of space complexity, it\\'s essential to consider the size of the result set that needs to be stored in memory.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id \\nFROM(\\n    SELECT customer_id , COUNT(DISTINCT product_key) AS cnt\\n    FROM Customer\\n    GROUP BY customer_id\\n    HAVING cnt = (SELECT COUNT(*) FROM Product)\\n) Temp;\\n```\\n\\n## Do Upvote if you got it! :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id \\nFROM(\\n    SELECT customer_id , COUNT(DISTINCT product_key) AS cnt\\n    FROM Customer\\n    GROUP BY customer_id\\n    HAVING cnt = (SELECT COUNT(*) FROM Product)\\n) Temp;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501467,
                "title": "group-by",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGroup by\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. GROUP BY customer_id\\n2. Set the condition in HAVING clause. If count of distinct product key in Customer table grouped with customer_id is equal to Count of product key in Product table then it will determine that if customer has all the distinct product id with it.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\\\\\nSELECT customer_id\\nFROM Customer \\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\\\\\nSELECT customer_id\\nFROM Customer \\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2498688,
                "title": "mysql-simple-solution-without-subquery-and-cte",
                "content": "select customer_id\\nfrom Customer\\ngroup by 1\\nhaving count(distinct product_key) = (select count(*) from Product);",
                "solutionTags": [],
                "code": "select customer_id\\nfrom Customer\\ngroup by 1\\nhaving count(distinct product_key) = (select count(*) from Product);",
                "codeTag": "Unknown"
            },
            {
                "id": 2466026,
                "title": "mysql-having-count-distinct-group-by-good-luck",
                "content": "```\\n# Write your MySQL query statement below\\n\\n/**\\nTwo Tables: Customer/Product\\n\\nThere is no primary key for Customer table. It may contain duplicates.\\nproduct_key is a foreign key to Product table.\\n\\nproduct_key is the primary key column for Product table.\\n\\nPROBLEM:  report the customer ids from the Customer table that bought all the products in the Product table.\\n\\nSTEPS\\n    HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n\\n*/\\n\\nSELECT\\n    customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n/**\\nTwo Tables: Customer/Product\\n\\nThere is no primary key for Customer table. It may contain duplicates.\\nproduct_key is a foreign key to Product table.\\n\\nproduct_key is the primary key column for Product table.\\n\\nPROBLEM:  report the customer ids from the Customer table that bought all the products in the Product table.\\n\\nSTEPS\\n    HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n\\n*/\\n\\nSELECT\\n    customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2425149,
                "title": "mysql-not-exists-where-not-in-cte",
                "content": "WITH cte as(\\nSELECT distinct customer_id as customer_id\\nFROM Customer)\\n\\nSELECT cte.customer_id\\nFROM cte\\nWHERE NOT EXISTS(\\nSELECT product_key FROM Product\\nWHERE product_key NOT IN(\\nSELECT product_key FROM Customer c\\nWHERE c.customer_id = cte.customer_id)\\n)",
                "solutionTags": [],
                "code": "WITH cte as(\\nSELECT distinct customer_id as customer_id\\nFROM Customer)\\n\\nSELECT cte.customer_id\\nFROM cte\\nWHERE NOT EXISTS(\\nSELECT product_key FROM Product\\nWHERE product_key NOT IN(\\nSELECT product_key FROM Customer c\\nWHERE c.customer_id = cte.customer_id)\\n)",
                "codeTag": "Unknown"
            },
            {
                "id": 2111687,
                "title": "oracle-easy-solution",
                "content": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from Product)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2091361,
                "title": "simple-mysql-solution",
                "content": "select customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product);",
                "solutionTags": [],
                "code": "select customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product);",
                "codeTag": "Unknown"
            },
            {
                "id": 1608012,
                "title": "using-ctes-faster-than-90",
                "content": "```\\n# Write your MySQL query statement below\\n\\nwith cte1 as (\\n    select count(product_key) as \\'total_products\\' from Product\\n), cte2 as (\\n    select customer_id, count(distinct product_key) as \\'total\\' from Customer\\n    group by customer_id\\n)\\n\\nselect customer_id from cte2\\nwhere total = (select * from cte1)\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nwith cte1 as (\\n    select count(product_key) as \\'total_products\\' from Product\\n), cte2 as (\\n    select customer_id, count(distinct product_key) as \\'total\\' from Customer\\n    group by customer_id\\n)\\n\\nselect customer_id from cte2\\nwhere total = (select * from cte1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1513965,
                "title": "faster-than-100",
                "content": "\\'\\'\\'\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product);\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product);\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1351923,
                "title": "faster-than-98",
                "content": "```\\n\\nSELECT\\n    customer_id\\nFROM\\n    (SELECT \\n        customer_id,\\n        COUNT(DISTINCT(product_key)) AS c\\n    FROM Customer\\n        GROUP BY customer_id) A\\nWHERE c = (SELECT COUNT(*) FROM product)\\n```",
                "solutionTags": [],
                "code": "```\\n\\nSELECT\\n    customer_id\\nFROM\\n    (SELECT \\n        customer_id,\\n        COUNT(DISTINCT(product_key)) AS c\\n    FROM Customer\\n        GROUP BY customer_id) A\\nWHERE c = (SELECT COUNT(*) FROM product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1237239,
                "title": "my-simple-mysql-solution",
                "content": "```\\nSELECT c.customer_id\\nFROM Customer c\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product p)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT c.customer_id\\nFROM Customer c\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product p)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1191649,
                "title": "mysql-easy-understanding-solution",
                "content": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1166721,
                "title": "no-subquery-simple-mysql-solution-count-distinct",
                "content": "```\\nselect customer_id\\nfrom customer \\ngroup by customer_id \\nhaving count(distinct product_key) = (select count(distinct product_key) from product)\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\nselect customer_id\\nfrom customer \\ngroup by customer_id \\nhaving count(distinct product_key) = (select count(distinct product_key) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1002235,
                "title": "mysql-group-concat",
                "content": "This solution handles for the edge case when the Product table has different set of product_key than in the Customer table\\n```\\nWITH prods AS (\\n    SELECT customer_id,\\n        GROUP_CONCAT(DISTINCT product_key) as prods\\n    FROM Customer\\n    GROUP BY 1)\\n    \\nSELECT customer_id\\nFROM prods\\nWHERE prods = (SELECT GROUP_CONCAT(DISTINCT product_key) FROM Product)\\n```",
                "solutionTags": [],
                "code": "```\\nWITH prods AS (\\n    SELECT customer_id,\\n        GROUP_CONCAT(DISTINCT product_key) as prods\\n    FROM Customer\\n    GROUP BY 1)\\n    \\nSELECT customer_id\\nFROM prods\\nWHERE prods = (SELECT GROUP_CONCAT(DISTINCT product_key) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 880983,
                "title": "not-a-simple-comparison-between-the-two-count",
                "content": "#My solution cover the situation that the product_keys in customer table are out of those in product #table\\n\\nselect customer_id\\nfrom ( \\n    select p.product_key, c.customer_id\\n    from product p\\n    left join customer c on c.product_key = p.product_key ) t\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)",
                "solutionTags": [],
                "code": "#My solution cover the situation that the product_keys in customer table are out of those in product #table\\n\\nselect customer_id\\nfrom ( \\n    select p.product_key, c.customer_id\\n    from product p\\n    left join customer c on c.product_key = p.product_key ) t\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)",
                "codeTag": "Unknown"
            },
            {
                "id": 860166,
                "title": "ms-sql-server",
                "content": "```\\nselect customer_id from Customer group by customer_id\\nhaving count(distinct product_key)=(select count(1) from Product)\\n```",
                "solutionTags": [],
                "code": "```\\nselect customer_id from Customer group by customer_id\\nhaving count(distinct product_key)=(select count(1) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 302299,
                "title": "simple-solution",
                "content": "```\\nSELECT customer_id from Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(\\nselect count(distinct product_key) from Product\\n)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT customer_id from Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(\\nselect count(distinct product_key) from Product\\n)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 294612,
                "title": "my-mysql-ms-sql-answers",
                "content": "My MySQL solution: Firstly, you need exclude the products which are not in the product list. Secondly, you need to delete the duplicates, which means one customer buy the same product multiple times. Then you just need to make sure the number of distinct product each customer buys is equal to the number of distinct product on the list. \\n\\nMySQL:\\n```\\nSELECT customer_id\\nFROM (\\nSELECT DISTINCT *\\nFROM Customer\\nWHERE product_key IN (SELECT DISTINCT product_key FROM Product)) AS temp\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product)\\n```\\n\\nMS SQL:\\n```\\n\\nSELECT DISTINCT customer_id\\nFROM (\\n    \\nSELECT *, MAX(CT) OVER(PARTITION BY customer_id) AS MX\\n    \\nFROM (  \\nSELECT *, DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY product_key) AS CT\\nFROM Customer\\nWHERE product_key IN (SELECT DISTINCT product_key FROM Product)) AS temp1\\n    \\n ) AS temp2\\nWHERE MX = (SELECT COUNT(DISTINCT product_key) FROM Product)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT customer_id\\nFROM (\\nSELECT DISTINCT *\\nFROM Customer\\nWHERE product_key IN (SELECT DISTINCT product_key FROM Product)) AS temp\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product)\\n```\n```\\n\\nSELECT DISTINCT customer_id\\nFROM (\\n    \\nSELECT *, MAX(CT) OVER(PARTITION BY customer_id) AS MX\\n    \\nFROM (  \\nSELECT *, DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY product_key) AS CT\\nFROM Customer\\nWHERE product_key IN (SELECT DISTINCT product_key FROM Product)) AS temp1\\n    \\n ) AS temp2\\nWHERE MX = (SELECT COUNT(DISTINCT product_key) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3926385,
                "title": "pandas-one-liner-f-string-inside-query",
                "content": "# Intuition\\nWe just want to count how many unique products customer bought and check if this is the number of all products (in this question we dont have to worry for products that were bought but are not included in product list, and dont have to worry about duplicates in product list)\\n\\n# Approach\\nGroup by customer and count number of unique products. Then compare it with length of product list and if they are the same, we got customer who bought all products.\\n\\nwhat is worth noticing - we can use f-string as our query. Then inside such query, we can directly specify expression calculating length of product list.\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customer: pd.DataFrame, product: pd.DataFrame) -> pd.DataFrame:\\n    return customer.groupby(\\'customer_id\\',as_index = False).product_key.nunique().query(f\"product_key == {len(product)}\")[[\\'customer_id\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customer: pd.DataFrame, product: pd.DataFrame) -> pd.DataFrame:\\n    return customer.groupby(\\'customer_id\\',as_index = False).product_key.nunique().query(f\"product_key == {len(product)}\")[[\\'customer_id\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3909919,
                "title": "2-lines-very-easy-to-understand-explained-solution-mysql",
                "content": "# Intuition\\n**Use first table (Customer) and count all from (Product) second table.**\\n# Approach\\n1. We\\'re selecting the customer_id from the Customer table.\\n\\n2. The GROUP BY c.customer_id groups the results by customer ID.\\n\\n3. The HAVING clause filters the results to include only those customers who have purchased all the distinct products.\\n\\n4. COUNT(DISTINCT c.product_key) counts the distinct products bought by each customer.\\n\\n5. (SELECT COUNT(*) FROM Product) gets the total count of distinct products available in the Product table.\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT c.customer_id FROM Customer c GROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT c.customer_id FROM Customer c GROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3801097,
                "title": "mysql-simple-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id from customer group by customer_id \\nhaving count(distinct product_key)=(\\n    select count(*) from product\\n)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id from customer group by customer_id \\nhaving count(distinct product_key)=(\\n    select count(*) from product\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3607512,
                "title": "easy-mysql-solution-with-very-simple-and-detailed-explanation-best-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- The question asks us to **find the customers who bought all the products**.\\n- To find the customers, we group the customers using GROUP BY so that we can get the **products bought by each customer**.\\n- Now, we must make sure that the **number of distinct products bought by a single customer is equal to the number of products in Product table**(All the product_keys in Product table are different)\\n- For that, we use the following code-\\n#### GROUP BY customer_id\\n#### HAVING COUNT(DISTINCT product_key)=(SELECT COUNT(*) FROM Product)\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. In the SELECT statement, we retrieve the **customer_id**.\\n2. In the FROM statement, we write the table name **Customer**.\\n3. The **GROUP BY** clause groups the query according to the **customer_id**.\\n4. The **HAVING keyword** filters the query such that the **number of distinct products bought by a single customer is equal to the number of products in Product table**. \\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key)=(SELECT COUNT(*) FROM Product)\\n```\\n# Note\\nPlease upvote if you find my solution helpful. If you have any doubts, suggestion or want to discuss any solution, comment it. If you wish to discuss other related topics, feel free to message me on LinkedIn, https://leetcode.com/prathams29/",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key)=(SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3557112,
                "title": "simple-code-using-having",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(DISTINCT product_key) = (SELECT COUNT( DISTINCT product_key) FROM Product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(DISTINCT product_key) = (SELECT COUNT( DISTINCT product_key) FROM Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3548063,
                "title": "having-clause-beats-76",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from product)\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3438523,
                "title": "solution-with-simple-join-sql-server",
                "content": "# Intuition\\r\\n<!-- Describe your first thoughts on how to solve this problem. -->\\r\\n\\r\\n# Approach\\r\\n<!-- Describe your approach to solving the problem. -->\\r\\n\\r\\n# Complexity\\r\\n- Time complexity:\\r\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n- Space complexity:\\r\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\r\\n\\r\\n# Code\\r\\n```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n\\r\\n\\r\\n    SELECT \\r\\n        T2.customer_id\\r\\n    FROM\\r\\n        product T1 \\r\\n    INNER JOIN\\r\\n        (\\r\\n            SELECT\\r\\n                DISTINCT *\\r\\n            FROM\\r\\n                Customer\\r\\n         ) T2 ON T2.product_key = T1.product_key\\r\\n    GROUP BY\\r\\n        T2.customer_id\\r\\n    HAVING  COUNT(T1.product_key) = (SELECT COUNT(product_key) FROM Product)\\r\\n\\r\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\r\\n/* Write your T-SQL query statement below */\\r\\n\\r\\n\\r\\n\\r\\n    SELECT \\r\\n        T2.customer_id\\r\\n    FROM\\r\\n        product T1 \\r\\n    INNER JOIN\\r\\n        (\\r\\n            SELECT\\r\\n                DISTINCT *\\r\\n            FROM\\r\\n                Customer\\r\\n         ) T2 ON T2.product_key = T1.product_key\\r\\n    GROUP BY\\r\\n        T2.customer_id\\r\\n    HAVING  COUNT(T1.product_key) = (SELECT COUNT(product_key) FROM Product)\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3408195,
                "title": "mysql-solution-beats-43-72-sub-query",
                "content": "# Code\\n```\\nSELECT                                      \\n    customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING SUM(DISTINCT product_key) = (\\n    SELECT\\n        SUM(product_key)\\n    FROM Product\\n); \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT                                      \\n    customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING SUM(DISTINCT product_key) = (\\n    SELECT\\n        SUM(product_key)\\n    FROM Product\\n); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2608856,
                "title": "noob-mysql-dpm07",
                "content": "```\\nselect customer_id\\nfrom (\\n    select customer_id, group_concat(distinct product_key order by product_key) as \\'all_product\\'\\n    from Customer\\n    group by customer_id) temp1\\n    where all_product = (\\n        select group_concat(product_key order by product_key) as \\'all_product\\' \\n        from Product\\n)\\n\\n```\\n\\n\\nPRO: Thanks to David\\n```\\nSELECT\\ncustomer_id\\nFROM customer c \\nGROUP BY customer_id\\nHAVING count(DISTINCT(c.product_key)) = (SELECT count(distinct(product_key)) FROM product)\\n```",
                "solutionTags": [],
                "code": "```\\nselect customer_id\\nfrom (\\n    select customer_id, group_concat(distinct product_key order by product_key) as \\'all_product\\'\\n    from Customer\\n    group by customer_id) temp1\\n    where all_product = (\\n        select group_concat(product_key order by product_key) as \\'all_product\\' \\n        from Product\\n)\\n\\n```\n```\\nSELECT\\ncustomer_id\\nFROM customer c \\nGROUP BY customer_id\\nHAVING count(DISTINCT(c.product_key)) = (SELECT count(distinct(product_key)) FROM product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2221898,
                "title": "mysql-properly-styled-group-having-rt-438-ms-ft-96-94",
                "content": "```\\nSELECT\\n    customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2185255,
                "title": "easy-solution",
                "content": "```\\n# count unique number of product from each customer and if that matches with total \\n# number of products from the product table then we found our customers \\nwith base as \\n(\\n    select customer_id, count(distinct product_key) as n_product\\n    from Customer\\n    group by 1\\n)\\n\\nselect customer_id from base\\nwhere n_product = (select count(distinct product_key) from Product)\\n```",
                "solutionTags": [],
                "code": "```\\n# count unique number of product from each customer and if that matches with total \\n# number of products from the product table then we found our customers \\nwith base as \\n(\\n    select customer_id, count(distinct product_key) as n_product\\n    from Customer\\n    group by 1\\n)\\n\\nselect customer_id from base\\nwhere n_product = (select count(distinct product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2181642,
                "title": "cte-doesn-t-work-but-inline-select-does-why",
                "content": "Why doesn\\'t this work? \\n```\\nwith pcnt as \\n( \\n    select count(*) as num from Product\\n)\\nselect customer_id from \\n(\\n    select \\n        customer_id , count(distinct product_key) as cnt \\n    from Customer  \\n    group by customer_id \\n) x \\nwhere  \\n    x.cnt =pcnt.num \\n```\\n\\t\\nBut this works...\\n\\t\\n```\\nselect customer_id from \\n(\\n    select \\n        customer_id , count(distinct product_key) as cnt \\n    from Customer  \\n    group by customer_id \\n) x \\nwhere  \\n    x.cnt in (select count(*) as num from Product)\\n```",
                "solutionTags": [],
                "code": "```\\nwith pcnt as \\n( \\n    select count(*) as num from Product\\n)\\nselect customer_id from \\n(\\n    select \\n        customer_id , count(distinct product_key) as cnt \\n    from Customer  \\n    group by customer_id \\n) x \\nwhere  \\n    x.cnt =pcnt.num \\n```\n```\\nselect customer_id from \\n(\\n    select \\n        customer_id , count(distinct product_key) as cnt \\n    from Customer  \\n    group by customer_id \\n) x \\nwhere  \\n    x.cnt in (select count(*) as num from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1958020,
                "title": "easy-way",
                "content": "```\\nselect customer_id from customer group by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)\\n```\\n\\nBe careful about the count(distinct product_key) since there are customers buying the same product for many times.\\nIf we forget about this condition, we will get the same result when we run the code but pass the test case when we submit.",
                "solutionTags": [],
                "code": "```\\nselect customer_id from customer group by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1894778,
                "title": "4-line-very-simple-mysql-solution",
                "content": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1823201,
                "title": "in-clause-and-sub-queries",
                "content": "```\\nselect distinct customer_id from \\n(\\nselect customer_id ,count(distinct product_key) as \"num\",product_key\\nfrom Customer\\nwhere product_key \\nin \\n(select distinct product_key from product)\\ngroup by customer_id ) a\\nwhere num= (select count(distinct product_key) from product)\\n```",
                "solutionTags": [],
                "code": "```\\nselect distinct customer_id from \\n(\\nselect customer_id ,count(distinct product_key) as \"num\",product_key\\nfrom Customer\\nwhere product_key \\nin \\n(select distinct product_key from product)\\ngroup by customer_id ) a\\nwhere num= (select count(distinct product_key) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1806986,
                "title": "single-select",
                "content": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) >= (select count(*) from Product)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) >= (select count(*) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1726681,
                "title": "simple-soultion",
                "content": "SELECT customer_id \\nFROM Customer \\ngroup by 1\\nhaving  COUNT(distinct product_key) = (SELECT COUNT(DISTINCT product_key) as tot_items FROM Product)",
                "solutionTags": [],
                "code": "SELECT customer_id \\nFROM Customer \\ngroup by 1\\nhaving  COUNT(distinct product_key) = (SELECT COUNT(DISTINCT product_key) as tot_items FROM Product)",
                "codeTag": "Unknown"
            },
            {
                "id": 1651012,
                "title": "simplest-mysql-solution",
                "content": "```\\nSELECT customer_id FROM Customer c\\nJOIN Product p\\nON c.product_key = p.product_key\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT customer_id FROM Customer c\\nJOIN Product p\\nON c.product_key = p.product_key\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1629268,
                "title": "inefficient-solution-cross-join",
                "content": "```\\n# Write your MySQL query statement below\\nselect distinct customer_id from Customer where customer_id not in (\\n\\tselect customer_id from \\n    (select customer_id, product_key from (select distinct customer_id from Customer) a cross join Product) t\\nwhere (customer_id, product_key) not in (select * from Customer)\\n)\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect distinct customer_id from Customer where customer_id not in (\\n\\tselect customer_id from \\n    (select customer_id, product_key from (select distinct customer_id from Customer) a cross join Product) t\\nwhere (customer_id, product_key) not in (select * from Customer)\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1567201,
                "title": "simple-mysql",
                "content": "SELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(distinct product_key) in (SELECT count(distinct product_key) FROM Product)",
                "solutionTags": [],
                "code": "SELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(distinct product_key) in (SELECT count(distinct product_key) FROM Product)",
                "codeTag": "Unknown"
            },
            {
                "id": 1550365,
                "title": "mysql-subquery-and-groupby",
                "content": "select distinct customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product)\\n",
                "solutionTags": [],
                "code": "select distinct customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1544441,
                "title": "faster-than-95",
                "content": "select customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct(product_key))=(select count(*) from product)",
                "solutionTags": [],
                "code": "select customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct(product_key))=(select count(*) from product)",
                "codeTag": "Unknown"
            },
            {
                "id": 1487935,
                "title": "oracle-fast",
                "content": "```\\n-- distinct product count for given customer must match the number of products in product table\\nselect customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from customer)\\norder by 1;\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n-- distinct product count for given customer must match the number of products in product table\\nselect customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(distinct product_key) from customer)\\norder by 1;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1426603,
                "title": "ms-sql-right-join-group-by",
                "content": "```\\nSELECT CUSTOMER_ID\\nFROM CUSTOMER C\\nRIGHT JOIN PRODUCT P\\nON C.PRODUCT_KEY = P.PRODUCT_KEY\\nGROUP BY CUSTOMER_ID \\nHAVING COUNT(DISTINCT C.PRODUCT_KEY) = (SELECT COUNT(DISTINCT PRODUCT_KEY) FROM PRODUCT)\\n```\\nHello guys! Please do comment and let me know if you have a better approach in MS SQL. Thanks!!",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT CUSTOMER_ID\\nFROM CUSTOMER C\\nRIGHT JOIN PRODUCT P\\nON C.PRODUCT_KEY = P.PRODUCT_KEY\\nGROUP BY CUSTOMER_ID \\nHAVING COUNT(DISTINCT C.PRODUCT_KEY) = (SELECT COUNT(DISTINCT PRODUCT_KEY) FROM PRODUCT)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1343475,
                "title": "simple-mysql-solution-beats-87",
                "content": "```\\n\\nSELECT c.customer_id  \\nFROM Customer c \\nJOIN product p\\n    ON c.product_key = p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM product)\\n```\\n",
                "solutionTags": [],
                "code": "```\\n\\nSELECT c.customer_id  \\nFROM Customer c \\nJOIN product p\\n    ON c.product_key = p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1323445,
                "title": "group-by-with-having",
                "content": "Having Disticnt is important in for produdct_key from customer table, do not need it for product\\n\\n```\\nSELECT customer_id\\nFROM customer c\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(product_key) FROM product)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT customer_id\\nFROM customer c\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(product_key) FROM product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1284617,
                "title": "simple-three-lines-mysql-solution",
                "content": "select distinct customer_id from customer\\ngroup by customer_id \\nhaving count(distinct product_key) = (select count(distinct product_key) from product);",
                "solutionTags": [],
                "code": "select distinct customer_id from customer\\ngroup by customer_id \\nhaving count(distinct product_key) = (select count(distinct product_key) from product);",
                "codeTag": "Unknown"
            },
            {
                "id": 1075725,
                "title": "easy-peasy",
                "content": "```\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT customer_id FROM Customer GROUP BY customer_id HAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 991394,
                "title": "mysql-4-lines-super-easy-to-understand",
                "content": "```\\nSELECT customer_id\\nFROM customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(product_key) FROM product)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT customer_id\\nFROM customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(product_key) FROM product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 874339,
                "title": "easiest-mssql-solution",
                "content": "```\\nselect customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(*) from product)\\n```",
                "solutionTags": [],
                "code": "```\\nselect customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(*) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 845869,
                "title": "simple-mysql-faster-than-99-49",
                "content": "```\\nSelect customer_id\\nFrom Customer \\nGroup by customer_id\\nHaving count(distinct product_key) = (\\nSelect count(distinct product_key)\\nFrom Product)\\n```",
                "solutionTags": [],
                "code": "```\\nSelect customer_id\\nFrom Customer \\nGroup by customer_id\\nHaving count(distinct product_key) = (\\nSelect count(distinct product_key)\\nFrom Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 836864,
                "title": "mysql-simple-approach-solution",
                "content": "```select customer_id from customer group by customer_id having count(distinct product_key) = (select count(*) from product);```",
                "solutionTags": [],
                "code": "```select customer_id from customer group by customer_id having count(distinct product_key) = (select count(*) from product);```",
                "codeTag": "Unknown"
            },
            {
                "id": 575466,
                "title": "easy-mysql-solution-beats-over-90",
                "content": "```\\n# Write your MySQL query statement below\\nselect\\n    customer_id\\nfrom\\n    (select\\n        c.customer_id\\n        , count(distinct(p.product_key)) as cnt\\n    from\\n        Customer as c\\n    left join\\n        Product as p\\n    on\\n        p.product_key =c.product_key\\n    group by\\n        c.customer_id\\n    ) t\\nwhere\\n    t.cnt = (select count(*) from Product)\\norder by\\n    customer_id\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    customer_id\\nfrom\\n    (select\\n        c.customer_id\\n        , count(distinct(p.product_key)) as cnt\\n    from\\n        Customer as c\\n    left join\\n        Product as p\\n    on\\n        p.product_key =c.product_key\\n    group by\\n        c.customer_id\\n    ) t\\nwhere\\n    t.cnt = (select count(*) from Product)\\norder by\\n    customer_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 543962,
                "title": "mysql-solutions-using-double-not-exists-compare-counts-is-not-accurate",
                "content": "select customer_id from Customer c1\\nwhere not exists\\n\\t(select * from Product p\\n\\twhere not exists\\n\\t\\t(select * from Customer c2\\n\\t\\twhere c2.product_key = p.product_key\\n\\t\\tand c2.customer_id = c1.customer_id))\\ngroup by customer_id",
                "solutionTags": [],
                "code": "select customer_id from Customer c1\\nwhere not exists\\n\\t(select * from Product p\\n\\twhere not exists\\n\\t\\t(select * from Customer c2\\n\\t\\twhere c2.product_key = p.product_key\\n\\t\\tand c2.customer_id = c1.customer_id))\\ngroup by customer_id",
                "codeTag": "Unknown"
            },
            {
                "id": 517201,
                "title": "mysql-beat-99-having",
                "content": "```\\nselect customer_id \\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from product)\\n```",
                "solutionTags": [],
                "code": "```\\nselect customer_id \\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 500598,
                "title": "mysql-compare-products-bought-to-products-available",
                "content": "The customer who bought all products bought the same number of unique products as there are available. \\n\\n(448ms, 90.25%): \\n```\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product); \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product); \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 389644,
                "title": "mysql-no-subquery-easy-to-understand",
                "content": "```\\nSELECT customer_id\\nFROM customer\\nGROUP BY customer_id\\nHAVING count(distinct product_key) = (SELECT COUNT(DISTINCT product_key) FROM product);\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT customer_id\\nFROM customer\\nGROUP BY customer_id\\nHAVING count(distinct product_key) = (SELECT COUNT(DISTINCT product_key) FROM product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 334460,
                "title": "faster-than-100",
                "content": "Faster Than 100%:\\n\\n```\\nWITH \\ncus_pro\\nAS\\n(\\n  SELECT c.customer_id, c.product_key, dense_rank() over (partition by c.customer_id order by c.product_key) as rn\\n  FROM customer c inner join product p on c.product_key = p.product_key\\n)\\nSELECT  \\n  distinct c.customer_id\\nFROM\\n  cus_pro c\\nWHERE\\n  c.rn = (SELECT count(*) from Product)\\n```",
                "solutionTags": [],
                "code": "```\\nWITH \\ncus_pro\\nAS\\n(\\n  SELECT c.customer_id, c.product_key, dense_rank() over (partition by c.customer_id order by c.product_key) as rn\\n  FROM customer c inner join product p on c.product_key = p.product_key\\n)\\nSELECT  \\n  distinct c.customer_id\\nFROM\\n  cus_pro c\\nWHERE\\n  c.rn = (SELECT count(*) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 319791,
                "title": "easy-to-understand-solution",
                "content": "```\\nSELECT\\n    c.customer_id\\nFROM\\n    Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    c.customer_id\\nFROM\\n    Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 311903,
                "title": "mysql-refined-solution",
                "content": "```\\nselect ifnull(customer_id, null) as customer_id\\nfrom customer\\ngroup by customer_id \\nhaving count(distinct product_key) = (select count(*) from product )\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect ifnull(customer_id, null) as customer_id\\nfrom customer\\ngroup by customer_id \\nhaving count(distinct product_key) = (select count(*) from product )\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 294402,
                "title": "my-solution-with-explanation",
                "content": "```\\n1\\t\\t\\tselect customer_id\\n2\\t\\t\\tfrom\\n3\\t\\t\\t(\\n4\\t\\t\\t\\tselect customer_id, product_key\\n5\\t\\t\\t\\tfrom customer\\n6\\t\\t\\t\\tgroup by customer_id, product_key\\n7\\t\\t\\t) as temp\\n8\\t\\t\\tgroup by customer_id\\n9\\t\\t\\thaving count(*) = \\n10\\t\\t\\t(\\n11\\t\\t\\t  select count(*)\\n12\\t\\t\\t  from product\\n13\\t\\t\\t)\\n```\\n\\nIt is not stated in the question whether the customer_id is a primary key of customer table. Therefore, my solution is a bit longer than others, because I consider the situation where we have duplicates, which is a person can buy the same products more than 1 time (results in two or more rows that are exactly the same).\\n\\nIn order to get rid of the duplicates, I have line 4-6.\\n\\nFeel free to ask if you have any questions.\\n",
                "solutionTags": [],
                "code": "```\\n1\\t\\t\\tselect customer_id\\n2\\t\\t\\tfrom\\n3\\t\\t\\t(\\n4\\t\\t\\t\\tselect customer_id, product_key\\n5\\t\\t\\t\\tfrom customer\\n6\\t\\t\\t\\tgroup by customer_id, product_key\\n7\\t\\t\\t) as temp\\n8\\t\\t\\tgroup by customer_id\\n9\\t\\t\\thaving count(*) = \\n10\\t\\t\\t(\\n11\\t\\t\\t  select count(*)\\n12\\t\\t\\t  from product\\n13\\t\\t\\t)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4106923,
                "title": "simple-subquery-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT CUSTOMER_ID FROM \\n(SELECT CUSTOMER_ID,COUNT(DISTINCT CUSTOMER_ID,PRODUCT_KEY) F FROM CUSTOMER GROUP BY CUSTOMER_ID) B\\nWHERE F=(SELECT COUNT(PRODUCT_KEY) FROM PRODUCT)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT CUSTOMER_ID FROM \\n(SELECT CUSTOMER_ID,COUNT(DISTINCT CUSTOMER_ID,PRODUCT_KEY) F FROM CUSTOMER GROUP BY CUSTOMER_ID) B\\nWHERE F=(SELECT COUNT(PRODUCT_KEY) FROM PRODUCT)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4104503,
                "title": "simple-sql-server-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nDECLARE @products INT;\\nSELECT @products = (SELECT COUNT(*) FROM Product);\\n\\nWITH Customers AS (SELECT customer_id, COUNT( DISTINCT product_key) as co\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT( DISTINCT product_key) = @products)\\n\\nSELECT customer_id FROM Customers\\n \\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nDECLARE @products INT;\\nSELECT @products = (SELECT COUNT(*) FROM Product);\\n\\nWITH Customers AS (SELECT customer_id, COUNT( DISTINCT product_key) as co\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT( DISTINCT product_key) = @products)\\n\\nSELECT customer_id FROM Customers\\n \\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4103626,
                "title": "beats-51-68-of-users-with-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect cus.customer_id from Customer cus\\ngroup by cus.customer_id\\nhaving count( distinct product_key) = (\\n    Select count(distinct product_key) from Product p\\n) order by cus.customer_id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect cus.customer_id from Customer cus\\ngroup by cus.customer_id\\nhaving count( distinct product_key) = (\\n    Select count(distinct product_key) from Product p\\n) order by cus.customer_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4102124,
                "title": "sql-basic-optimal-sol-beats-70-group-by-count-having",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect c.customer_id\\nfrom customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = (select count(1) from product)\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect c.customer_id\\nfrom customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = (select count(1) from product)\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097833,
                "title": "simple-two-liner-mysql",
                "content": "# Explanation\\nWe first select the customer id since that will be the only column that we are returning. Then we select only the ones whose distinct product keys are equal in number to the total amount of product keys in the product table. **Like if this was useful!!!**\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id FROM Customer GROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(product_key) FROM Product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id FROM Customer GROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(product_key) FROM Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094261,
                "title": "simple-mysql-query",
                "content": "# Intuition\\nSimple use of having with sub query count\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id\\n  from customer\\n  group by customer_id\\n  having count(distinct product_key) = (select count(product_key) from product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id\\n  from customer\\n  group by customer_id\\n  having count(distinct product_key) = (select count(product_key) from product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091791,
                "title": "sql-simple-solution",
                "content": "# Code\\n\\n```\\nSELECT\\n  customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(DISTINCT product_key) = (SELECT count(*) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT\\n  customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(DISTINCT product_key) = (SELECT count(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091078,
                "title": "beats-93-97-distinct-cte-easy-to-grasp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nWith uniq as (\\nSelect\\ncustomer_id,\\nCount(Distinct(product_key)) as unique_count\\nFrom Customer\\ngroup by customer_id)\\n\\nselect\\ncustomer_id\\nFrom uniq\\nwhere unique_count = (select count(*) From Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nWith uniq as (\\nSelect\\ncustomer_id,\\nCount(Distinct(product_key)) as unique_count\\nFrom Customer\\ngroup by customer_id)\\n\\nselect\\ncustomer_id\\nFrom uniq\\nwhere unique_count = (select count(*) From Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085688,
                "title": "mysql-using-group-by-and-subquery",
                "content": "# Approach\\n<!-- Find the count of distinct product_key for each customer. Compare it with total count of product_key available in Product table -->\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id FROM Customer \\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id FROM Customer \\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085428,
                "title": "easy-cpp-solution-beats-89-56-in-runtime-using-subquery",
                "content": "![image.png](https://assets.leetcode.com/users/images/d6aacbc9-57db-425f-93ef-d3e9c1f10428_1695572039.825931.png)\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\nSELECT customer_id FROM customer GROUP BY customer_id HAVING \\n    COUNT(DISTINCT product_key) \\n    = \\n    (SELECT COUNT(DISTINCT product_key) FROM product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\nSELECT customer_id FROM customer GROUP BY customer_id HAVING \\n    COUNT(DISTINCT product_key) \\n    = \\n    (SELECT COUNT(DISTINCT product_key) FROM product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085423,
                "title": "easy-cpp-solution-beats-89-56-in-runtime-using-subquery",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\nSELECT customer_id FROM customer GROUP BY customer_id HAVING \\n    COUNT(DISTINCT product_key) \\n    = \\n    (SELECT COUNT(DISTINCT product_key) FROM product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\nSELECT customer_id FROM customer GROUP BY customer_id HAVING \\n    COUNT(DISTINCT product_key) \\n    = \\n    (SELECT COUNT(DISTINCT product_key) FROM product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082030,
                "title": "oracle-solution-beats-98-92",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect \\n    customer_id\\nfrom \\n    (select \\n        customer_id, \\n        count(distinct product_key) p_num\\n    from Customer \\n    group by customer_id) c\\nwhere p_num = (select count (product_key) from Product)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect \\n    customer_id\\nfrom \\n    (select \\n        customer_id, \\n        count(distinct product_key) p_num\\n    from Customer \\n    group by customer_id) c\\nwhere p_num = (select count (product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4081826,
                "title": "easy-approach",
                "content": "with table1 as(\\nselect customer_id , count(distinct product_key) as cnt from (\\nselect customer_id , c.product_key\\nfrom customer c join product p\\non c.product_key = p.product_key) as x \\ngroup by customer_id)\\nselect customer_id from table1 where cnt = (select count(product_key) from product)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "with table1 as(\\nselect customer_id , count(distinct product_key) as cnt from (\\nselect customer_id , c.product_key\\nfrom customer c join product p\\non c.product_key = p.product_key) as x \\ngroup by customer_id)\\nselect customer_id from table1 where cnt = (select count(product_key) from product)",
                "codeTag": "Unknown"
            },
            {
                "id": 4080527,
                "title": "mysql-cte-and-subquery-beats-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSelect customer_id from \\n(Select distinct c.customer_id, count(distinct c.product_key) as ct \\nfrom customer c join product p on c.product_key = p.product_key\\ngroup by c.customer_id ) src where ct = (Select count(product_key) from product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSelect customer_id from \\n(Select distinct c.customer_id, count(distinct c.product_key) as ct \\nfrom customer c join product p on c.product_key = p.product_key\\ngroup by c.customer_id ) src where ct = (Select count(product_key) from product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4078258,
                "title": "using-cte",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as (select count(distinct(product_key)) as pNo, customer_id from Customer  group by customer_id)\\n\\nselect distinct(customer_id) from cte as c join Product as p on c.pNo = (select count(*) from Product);\\n \\n\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/9aa017d9-f7f5-49d2-b069-cadf406c9870_1695414069.4510965.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as (select count(distinct(product_key)) as pNo, customer_id from Customer  group by customer_id)\\n\\nselect distinct(customer_id) from cte as c join Product as p on c.pNo = (select count(*) from Product);\\n \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077369,
                "title": "group-by-sub-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    If total unique pruduct purchased by customer is equal to number of pruduct .\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n*m)\\n    n = number of customer \\n    m = number of pruduct \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    \\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077368,
                "title": "group-by-sub-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    If total unique pruduct purchased by customer is equal to number of pruduct .\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n*m)\\n    n = number of customer \\n    m = number of pruduct \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    \\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077367,
                "title": "group-by-sub-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n    If total unique pruduct purchased by customer is equal to number of pruduct .\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n*m)\\n    n = number of customer \\n    m = number of pruduct \\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    \\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom Customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076340,
                "title": "mssql",
                "content": "# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect\\n    customer_id\\nfrom Customer  \\ngroup by customer_id\\nhaving(count(distinct product_key))=(select count(*) from product)\\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect\\n    customer_id\\nfrom Customer  \\ngroup by customer_id\\nhaving(count(distinct product_key))=(select count(*) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076275,
                "title": "simple-solution-with-with-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nwith Q as(\\nselect customer_id ,count(distinct product_key) as cnt from customer  group by customer_id)\\nselect customer_id from q where cnt = (select count(distinct product_key  ) from product);\\n\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nwith Q as(\\nselect customer_id ,count(distinct product_key) as cnt from customer  group by customer_id)\\nselect customer_id from q where cnt = (select count(distinct product_key  ) from product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073918,
                "title": "beats-89-91-of-users-with-mysql",
                "content": "# Code\\n```\\nSELECT customer_id \\nFROM Customer \\nGROUP BY customer_id \\nHAVING COUNT(DISTINCT product_key)=(SELECT COUNT(product_key) FROM Product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT customer_id \\nFROM Customer \\nGROUP BY customer_id \\nHAVING COUNT(DISTINCT product_key)=(SELECT COUNT(product_key) FROM Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073638,
                "title": "easy-approach-using-having-group-by",
                "content": "\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT customer_id\\nFROM Customer C \\nGROUP BY customer_id\\nHAVING count(DISTINCT C.product_key) = (SELECT count(product_key) FROM Product);\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT customer_id\\nFROM Customer C \\nGROUP BY customer_id\\nHAVING count(DISTINCT C.product_key) = (SELECT count(product_key) FROM Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073280,
                "title": "simple-solution-beats-97",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect customer_id \\nfrom Customer\\ngroup by customer_id \\nhaving count(distinct product_key) = (\\n    select count(distinct product_key) \\n    from Product\\n);\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect customer_id \\nfrom Customer\\ngroup by customer_id \\nhaving count(distinct product_key) = (\\n    select count(distinct product_key) \\n    from Product\\n);\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072744,
                "title": "best-approach-group-by-having-clause-all-test-passed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id\\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072627,
                "title": "pandas-straight-forward",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAll values of `product_key` in the customer table exist in the product key, so we only need to calculate the length of the products.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_customers(customer: pd.DataFrame, product: pd.DataFrame) -> pd.DataFrame:\\n    bought_all = (customer.groupby(\\'customer_id\\').nunique() == len(product)).reset_index()\\n    return bought_all[bought_all[\\'product_key\\']][[\\'customer_id\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_customers(customer: pd.DataFrame, product: pd.DataFrame) -> pd.DataFrame:\\n    bought_all = (customer.groupby(\\'customer_id\\').nunique() == len(product)).reset_index()\\n    return bought_all[bought_all[\\'product_key\\']][[\\'customer_id\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4071661,
                "title": "easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n#SELECT c.customer_id from Customer c join Product p on c.product_key = p.product_key group by c.customer_id having count(distinct c.product_key) = count(p.product_key);\\nselect customer_id from Customer group by customer_id having count(distinct product_key) = (select count(product_key) from Product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n#SELECT c.customer_id from Customer c join Product p on c.product_key = p.product_key group by c.customer_id having count(distinct c.product_key) = count(p.product_key);\\nselect customer_id from Customer group by customer_id having count(distinct product_key) = (select count(product_key) from Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066087,
                "title": "distinct-count-group-by",
                "content": "# Code\\n```\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065743,
                "title": "simple-conceptual-solution-using-ctes",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nwith cte as (\\n  select customer_id, count(distinct(product_key)) as \\'custcount\\' from customer\\n  group by customer_id\\n), cte2 as (\\n\\nselect *, (if(custcount = (select count(distinct product_key) from product),1,0)) as \\'flag\\' from cte\\n)\\nSelect customer_id from cte2 where flag = 1\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nwith cte as (\\n  select customer_id, count(distinct(product_key)) as \\'custcount\\' from customer\\n  group by customer_id\\n), cte2 as (\\n\\nselect *, (if(custcount = (select count(distinct product_key) from product),1,0)) as \\'flag\\' from cte\\n)\\nSelect customer_id from cte2 where flag = 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065437,
                "title": "aggregate-functions-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id from Customer\\ngroup by customer_id\\nhaving sum(distinct product_key) = \\n(select sum(product_key) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id from Customer\\ngroup by customer_id\\nhaving sum(distinct product_key) = \\n(select sum(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061184,
                "title": "solution-includes-comparing-max-value-and-min-value",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\n\\nselect customer_id #,max(Product_key), min(Product_key), count(*) \\nfrom Customer c\\ngroup by customer_id\\nhaving max(Product_key) = (select max(Product_key) from Product)\\nand min(Product_key) = (select min(Product_key) from Product)\\nand count(distinct product_key) = (select count(product_key) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n\\nselect customer_id #,max(Product_key), min(Product_key), count(*) \\nfrom Customer c\\ngroup by customer_id\\nhaving max(Product_key) = (select max(Product_key) from Product)\\nand min(Product_key) = (select min(Product_key) from Product)\\nand count(distinct product_key) = (select count(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059523,
                "title": "beats-100-in-both-speed-and-memory",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nWITH CTE AS (\\nSELECT  CUSTOMER_ID,COUNT(DISTINCT PRODUCT_KEY) AS CNT FROM CUSTOMER A GROUP BY CUSTOMER_ID)\\n\\nSELECT CUSTOMER_ID FROM CTE WHERE CTE.CNT = (SELECT COUNT(DISTINCT PRODUCT_KEY) FROM PRODUCT )\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nWITH CTE AS (\\nSELECT  CUSTOMER_ID,COUNT(DISTINCT PRODUCT_KEY) AS CNT FROM CUSTOMER A GROUP BY CUSTOMER_ID)\\n\\nSELECT CUSTOMER_ID FROM CTE WHERE CTE.CNT = (SELECT COUNT(DISTINCT PRODUCT_KEY) FROM PRODUCT )\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059305,
                "title": "customers-who-bought-all-products-simple-sql-server-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect customer_id\\nfrom Customer C \\ngroup by customer_id\\nhaving count(distinct C.product_key) = (select count(product_key) from Product)\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect customer_id\\nfrom Customer C \\ngroup by customer_id\\nhaving count(distinct C.product_key) = (select count(product_key) from Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4059259,
                "title": "simple-and-beginner-friendly-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirst count all the products \\nthen choose the customers having the same distinct count of products\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\ndeclare @totProducts int = (select count(product_key) from product)\\n\\nselect customer_id \\nfrom (select customer_id, count(distinct product_key) NumOfProducts from customer \\ngroup by customer_id) as productsCount\\nwhere NumOfProducts = @totProducts\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\ndeclare @totProducts int = (select count(product_key) from product)\\n\\nselect customer_id \\nfrom (select customer_id, count(distinct product_key) NumOfProducts from customer \\ngroup by customer_id) as productsCount\\nwhere NumOfProducts = @totProducts\\n\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057323,
                "title": "beats-92-50-of-users-with-mysql-simple-solution-using-group-by-having",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT customer_id\\nFROM customer\\nGROUP BY 1\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT customer_id\\nFROM customer\\nGROUP BY 1\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4054535,
                "title": "mysql-simple-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMy initial thought is that we want to identify customers who have purchased every distinct product available. This means the count of distinct products associated with a customer must match the total count of distinct products in the product table\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSubquery for Total Products: Use a subquery to determine the total count of distinct products from the product table.\\nGrouping and Filtering: Group the customer table by customer_id and filter out customers whose count of distinct product_key values doesn\\'t match the total count from the subquery.\\nFinal Selection: Select the customer_id of customers who meet the above criteria, indicating they have purchased every available product.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe main query will group by customer_id and count the distinct product_key for each customer. In the worst case, this will have a time complexity of  O(c\\xD7p), where \\nc is the number of customers and \\np is the number of products a customer has purchased.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(product_key) from product);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(product_key) from product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049334,
                "title": "1045-mysql-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING SUM(DISTINCT product_key) = (SELECT SUM(product_key) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING SUM(DISTINCT product_key) = (SELECT SUM(product_key) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047956,
                "title": "using-groupby-having-and-subquery",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\n\\nSelect distinct customer_id\\nFrom Customer \\nGroup by customer_id\\nhaving count(distinct product_key) = (\\n    Select count(product_key)\\n    From Product\\n)\\nOrder by customer_id;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSelect distinct customer_id\\nFrom Customer \\nGroup by customer_id\\nhaving count(distinct product_key) = (\\n    Select count(product_key)\\n    From Product\\n)\\nOrder by customer_id;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047641,
                "title": "super-easy-using-having-clause-mssql-server",
                "content": "\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT c.customer_id \\nFROM Customer c \\nGROUP BY c.customer_id \\nHAVING COUNT(DISTINCT(c.product_key)) = (SELECT COUNT(*) FROM Product)\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT c.customer_id \\nFROM Customer c \\nGROUP BY c.customer_id \\nHAVING COUNT(DISTINCT(c.product_key)) = (SELECT COUNT(*) FROM Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046769,
                "title": "best-and-easy-to-get-solution",
                "content": "\\n\\n# Code\\n```\\nSelect customer_id \\nfrom customer\\ngroup by customer_id\\nhaving count(Distinct product_key) = (Select count(distinct product_key) \\n                                      from product)\\n\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSelect customer_id \\nfrom customer\\ngroup by customer_id\\nhaving count(Distinct product_key) = (Select count(distinct product_key) \\n                                      from product)\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045816,
                "title": "subquery-count-distinct",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id \\nFROM\\n(SELECT customer_id,\\nCOUNT(DISTINCT(product_key)) as cnt \\nFROM Customer \\nGROUP BY customer_id) as t\\nWHERE t.cnt = (SELECT COUNT(product_key) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id \\nFROM\\n(SELECT customer_id,\\nCOUNT(DISTINCT(product_key)) as cnt \\nFROM Customer \\nGROUP BY customer_id) as t\\nWHERE t.cnt = (SELECT COUNT(product_key) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045475,
                "title": "quick",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect  customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key)from Product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect  customer_id\\nfrom customer\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key)from Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045134,
                "title": "mysql-solution",
                "content": "# Code\\n```\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044434,
                "title": "easy-solution-group-by-having",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse count clause to check if all products have been bought by a single customer.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirstly group all data by the customer id then use having clause to count which one of them have bought all products\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect c.customer_id\\nfrom Customer c\\ngroup by c.customer_id\\nhaving count(distinct(c.product_key)) = (select count(p.product_key) from Product p);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect c.customer_id\\nfrom Customer c\\ngroup by c.customer_id\\nhaving count(distinct(c.product_key)) = (select count(p.product_key) from Product p);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044252,
                "title": "oracle-group-by-having",
                "content": "# Code\\n```\\n/* Write your PL/SQL query statement below */\\nselect c.customer_id\\nfrom customer c\\ngroup by c.customer_id\\nhaving count(distinct c.product_key)=(select count(*) as pcnt from product)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect c.customer_id\\nfrom customer c\\ngroup by c.customer_id\\nhaving count(distinct c.product_key)=(select count(*) as pcnt from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038338,
                "title": "simple-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038174,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> \\nI thought I could do it by grouping the customer_id and using the HAVING clause I could do the comparison with the total products.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI did not need to specify in the HAVING clause that the IDs were distinct because the statement mentions that some rows are repeated.\\n\\n# Complexity\\n- Time complexity: 30 min\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> \\n\\n\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (SELECT COUNT(product_key) FROM Product)\\n \\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (SELECT COUNT(product_key) FROM Product)\\n \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035623,
                "title": "my-solution",
                "content": "\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect distinct a.customer_id  from Customer a\\nwhere (select count( distinct product_key ) from Customer b \\nwhere b.customer_id  = a.customer_id )\\n = \\n(select count( * )  from Product ) \\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect distinct a.customer_id  from Customer a\\nwhere (select count( distinct product_key ) from Customer b \\nwhere b.customer_id  = a.customer_id )\\n = \\n(select count( * )  from Product ) \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034603,
                "title": "mysql-1045-customers-who-bought-all-products-easy-understandable-solution-using-sub-query",
                "content": "```Approach []\\nThe problem was asked to find all the customer_id who bought all the products with `product_key` that are available in `Product` table.\\nSo In order to do go through the following steps:\\n 1. First count the total number of distinct product_id in Product table as a sub-query.\\n        \"(SELECT count(DISTINCT product_key) FROM Product)\"\\n 2. Then retrive the customer_id from `Customer` table by grouping the rows based on customer_id.\\n        \"SELECT customer_id FROM Customer GROUP BY customer_id\"\\n 3. Now pass the condition in HAVING clause to check whether the total number of distinct \\n    product_key in Customer table matches with total number of distinct product_id in Product table.\\n        \"HAVING count(DISTINCT product_id) = (SELECT count(DISTINCT product_key) FROM Product)\"\\n```\\n\\n# Code\\n```MySQL []\\n\\nSELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(DISTINCT product_key) = (SELECT count(DISTINCT product_key) FROM Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```Approach []\\nThe problem was asked to find all the customer_id who bought all the products with `product_key` that are available in `Product` table.\\nSo In order to do go through the following steps:\\n 1. First count the total number of distinct product_id in Product table as a sub-query.\\n        \"(SELECT count(DISTINCT product_key) FROM Product)\"\\n 2. Then retrive the customer_id from `Customer` table by grouping the rows based on customer_id.\\n        \"SELECT customer_id FROM Customer GROUP BY customer_id\"\\n 3. Now pass the condition in HAVING clause to check whether the total number of distinct \\n    product_key in Customer table matches with total number of distinct product_id in Product table.\\n        \"HAVING count(DISTINCT product_id) = (SELECT count(DISTINCT product_key) FROM Product)\"\\n```\n```MySQL []\\n\\nSELECT customer_id \\nFROM Customer\\nGROUP BY customer_id\\nHAVING count(DISTINCT product_key) = (SELECT count(DISTINCT product_key) FROM Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4030731,
                "title": "really-straight-forward-subquery-approach-mysql-without-joins",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id from Customer \\ngroup by customer_id \\nhaving count(distinct product_key)=(select count(product_key) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id from Customer \\ngroup by customer_id \\nhaving count(distinct product_key)=(select count(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4028284,
                "title": "beats-100-easy-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect customer_id From Customer\\nGroup by customer_id\\nHaving count(distinct product_key) = (select count(product_key) from Product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect customer_id From Customer\\nGroup by customer_id\\nHaving count(distinct product_key) = (select count(product_key) from Product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027783,
                "title": "simple-solutin-which-beats-65",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT c.customer_id FROM Customer c LEFT JOIN Product p\\nON c.product_key =p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key)=(SELECT COUNT(product_key) FROM Product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT c.customer_id FROM Customer c LEFT JOIN Product p\\nON c.product_key =p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key)=(SELECT COUNT(product_key) FROM Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027072,
                "title": "with-cte-count-any-case",
                "content": "```\\nwith b as \\n(\\nwith a \\nas\\n(\\n    # Write your MySQL query statement below\\nselect  c.customer_id  , case when p.product_key = c.product_key then 1 end as key_search , c.product_key  from customer c  , product p\\n#left join product p \\n#on p.product_key = c.product_key \\n)\\nselect customer_id , count(distinct product_key) as cnt from a \\nwhere case when key_search = 0 then 0 else 1 end \\ngroup by customer_id  , key_search\\n)\\nselect distinct customer_id from  b\\nwhere cnt >=  any (select count(distinct product_key) from product)\\n```",
                "solutionTags": [],
                "code": "```\\nwith b as \\n(\\nwith a \\nas\\n(\\n    # Write your MySQL query statement below\\nselect  c.customer_id  , case when p.product_key = c.product_key then 1 end as key_search , c.product_key  from customer c  , product p\\n#left join product p \\n#on p.product_key = c.product_key \\n)\\nselect customer_id , count(distinct product_key) as cnt from a \\nwhere case when key_search = 0 then 0 else 1 end \\ngroup by customer_id  , key_search\\n)\\nselect distinct customer_id from  b\\nwhere cnt >=  any (select count(distinct product_key) from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4023592,
                "title": "simeple-easy-solution-query-ran-in-650-ms",
                "content": "# Code\\n```\\n/* Write your PL/SQL query statement below \\nwith cte1 as (\\n        select distinct * from product\\n    )\\n    ,cte2 as (\\n        select distinct * from customer\\n    )\\nselect customer_id \\nfrom cte2 \\ngroup by customer_id \\nhaving count(product_key) = (select count(product_key) from cte1)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below \\nwith cte1 as (\\n        select distinct * from product\\n    )\\n    ,cte2 as (\\n        select distinct * from customer\\n    )\\nselect customer_id \\nfrom cte2 \\ngroup by customer_id \\nhaving count(product_key) = (select count(product_key) from cte1)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4018330,
                "title": "self-explanatory-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct(product_key)) = (\\n  select count(*)\\n  from product\\n)\\norder by customer_id ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect customer_id\\nfrom customer \\ngroup by customer_id\\nhaving count(distinct(product_key)) = (\\n  select count(*)\\n  from product\\n)\\norder by customer_id ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4015489,
                "title": "2-mysql-solution-using-joins-count-and-having",
                "content": "# Code\\n### using joins gave better runtime\\n\\n```mysql []\\nSELECT c.customer_id\\nFROM Customer c\\nLEFT JOIN Product p ON c.product_key = p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT p.product_key) = (SELECT COUNT(*) FROM Product);\\n```\\n\\nWithout Joins\\n\\n```\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```mysql []\\nSELECT c.customer_id\\nFROM Customer c\\nLEFT JOIN Product p ON c.product_key = p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT p.product_key) = (SELECT COUNT(*) FROM Product);\\n```\n```\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(*) FROM Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013596,
                "title": "simple-solution-using-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1) Join\\n2) Group by\\n3) compare count\\'s\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect c.customer_id from Customer c join Product p on c.product_key=p.product_key  group by c.customer_id having count(distinct c.product_key)=(SELECT COUNT(*) FROM Product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect c.customer_id from Customer c join Product p on c.product_key=p.product_key  group by c.customer_id having count(distinct c.product_key)=(SELECT COUNT(*) FROM Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013249,
                "title": "beats-90-solutions-and-easy-to-understand-using-join-count",
                "content": "\\n\\n# Code\\n```\\nSELECT\\n    c.customer_id\\nFROM\\n    Customer c\\nJOIN\\n    Product p\\nON\\n    c.product_key = p.product_key\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    c.customer_id\\nFROM\\n    Customer c\\nJOIN\\n    Product p\\nON\\n    c.product_key = p.product_key\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4011409,
                "title": "easy-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect customer_id from customer group by customer_id having count(distinct product_key) = (select count(*) from product) ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect customer_id from customer group by customer_id having count(distinct product_key) = (select count(*) from product) ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008198,
                "title": "simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n Having usually works after the aggregation operation  \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect customer_id \\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct(product_key)) = (select count(product_key) from Product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect customer_id \\nfrom Customer\\ngroup by customer_id\\nhaving count(distinct(product_key)) = (select count(product_key) from Product)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4007850,
                "title": "easy-to-understand-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id\\nfrom (\\n  select customer_id, count(distinct(product_key)) as product_count\\n  from Customer\\n  group by customer_id\\n) as t\\nwhere t.product_count = (\\n  select count(*)\\n  from Product\\n)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id\\nfrom (\\n  select customer_id, count(distinct(product_key)) as product_count\\n  from Customer\\n  group by customer_id\\n) as t\\nwhere t.product_count = (\\n  select count(*)\\n  from Product\\n)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4003818,
                "title": "70-beats-mysql-solution-no-join-using-subquery",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT c.Customer_id\\nFROM Customer c\\nGROUP BY c.customer_id\\nHAVING COUNT( distinct product_key) = (\\n  SELECT count(product_key)\\n  FROM product\\n)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT c.Customer_id\\nFROM Customer c\\nGROUP BY c.customer_id\\nHAVING COUNT( distinct product_key) = (\\n  SELECT count(product_key)\\n  FROM product\\n)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4002548,
                "title": "mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect customer_id from Customer group by customer_id having count(distinct product_key)=(Select count(product_key)from product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect customer_id from Customer group by customer_id having count(distinct product_key)=(Select count(product_key)from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4001571,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect customer_id \\nfrom customer\\ngroup by customer_id\\nhaving  count(distinct product_key) = (select count(product_key) as total from product)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect customer_id \\nfrom customer\\ngroup by customer_id\\nhaving  count(distinct product_key) = (select count(product_key) as total from product)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3999127,
                "title": "complicate-solution",
                "content": "\\n# Code\\n```\\nSELECT a.customer_id FROM \\n(SELECT customer_id,GROUP_CONCAT(distinct product_key ORDER BY product_key) AS pk FROM customer GROUP BY customer_id) AS a\\nINNER JOIN\\n(SELECT GROUP_CONCAT(product_key ORDER BY product_key) AS pk FROM product) AS b \\nON a.pk=b.pk;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT a.customer_id FROM \\n(SELECT customer_id,GROUP_CONCAT(distinct product_key ORDER BY product_key) AS pk FROM customer GROUP BY customer_id) AS a\\nINNER JOIN\\n(SELECT GROUP_CONCAT(product_key ORDER BY product_key) AS pk FROM product) AS b \\nON a.pk=b.pk;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3998107,
                "title": "subquery-clear-easy-sql-step-by-step-correct-formatting-comprehensive-explanation",
                "content": "# \\u2757 Upvote \\u2B06 if you found this useful \\u2714\\n\\n# \\uD83D\\uDCA1 Intuition (hint)\\n\\nCan be solved with subquery inside easy main query with aggregating functions. \\n\\n# \\uD83C\\uDFAF Approach (solution)\\n\\nLets divide the solution into 2 steps:\\n1. First step\\n```sql\\n(SELECT COUNT(DISTINCT product_key) FROM Product)\\n```\\n- This subquery finds the total amount of distinct products\\n\\n2. Second step\\n```sql\\nSELECT DISTINCT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) =\\n```\\n- This subquery returns a list of DISTINCT *customer_id* for all clients that bought COUNTed amount of distinct products equal to the result of first step subquery\\n\\n# \\uD83D\\uDCC8 Complexity\\n\\n- \\u23F1 Time complexity:\\nBeats 82% of solutions with MySQL (at the time of submission)\\n\\n- \\uD83D\\uDCBE Space complexity:\\nBeats 100% of solutions with MySQL (space complexity in case of this problem is constant for all solutions)\\n\\n# \\uD83D\\uDD25 Code\\n\\n```sql\\nSELECT DISTINCT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product);\\n```\\n# \\u2757 Upvote \\u2B06 if you found this useful \\u2714",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\n(SELECT COUNT(DISTINCT product_key) FROM Product)\\n```\n```sql\\nSELECT DISTINCT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) =\\n```\n```sql\\nSELECT DISTINCT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT product_key) = (SELECT COUNT(DISTINCT product_key) FROM Product);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994849,
                "title": "beats-80",
                "content": "\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect customer_id \\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product )\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect customer_id \\nfrom customer \\ngroup by customer_id\\nhaving count(distinct product_key) = (select count(*) from product )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994599,
                "title": "100-easy-explain-fast-clean",
                "content": "# Intuition\\n\\nIn the HAVING clause, we compare two counts:\\n\\nCOUNT(DISTINCT c.product_key) counts the distinct products each customer has purchased.\\nCOUNT(DISTINCT p.product_key) counts the distinct products available in the entire product table.\\nIf the count of distinct products purchased by a customer equals the count of distinct products available, that customer is included in the result set.\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nselect c.customer_id \\nfrom customer as c, product as p\\ngroup by c.customer_id \\nhaving count(distinct c.product_key) = count(distinct p.product_key);\\n```\\n\\n\\n![4i88GgaV8qiGEw1xifwYz2xp7RJEnNpBZq7dn2K62dyucR1bKCQQP3oJkTQN1CtPmpu1MeKqPh9TVeVMTj9qvJMVzGQMPgTQYFYBh8Uj21b7rmMLxNytGKJ1C2.jpeg](https://assets.leetcode.com/users/images/70dc8293-3453-4a90-bf58-9e8e2c21991a_1693704925.576871.jpeg)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect c.customer_id \\nfrom customer as c, product as p\\ngroup by c.customer_id \\nhaving count(distinct c.product_key) = count(distinct p.product_key);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990681,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\nSELECT c.customer_id \\nFROM Customer c\\nINNER JOIN Product p ON c.product_key = p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT c.customer_id \\nFROM Customer c\\nINNER JOIN Product p ON c.product_key = p.product_key\\nGROUP BY c.customer_id\\nHAVING COUNT(DISTINCT c.product_key) = (SELECT COUNT(*) FROM Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990234,
                "title": "sql-customers-who-bought-all-products",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(distinct(product_key))=(SELECT COUNT(*) FROM Product);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(distinct(product_key))=(SELECT COUNT(*) FROM Product);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989951,
                "title": "ms-sql-server-explication",
                "content": "\\n# Approach\\n\\n1. We need to find the number of products for all customer_id\\n2. Count all products\\n\\n\\nWe will transform (point 1) in our first sub-query from code, i used in finding all customers that have all the n products\\n\\nWith the second point force the table customers to show up with all customers that have the n products\\n\\n\\n# Code\\n```\\n\\nSelect distinct customer_id FROM Customer c\\nJOIN (Select c1.customer_id c , count(distinct c1.product_key ) n FROM Customer c1 Group by customer_id) c2\\nON c.customer_id = c2.c\\nWhere c2.n = (Select count(*) FROM Product )\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n\\nSelect distinct customer_id FROM Customer c\\nJOIN (Select c1.customer_id c , count(distinct c1.product_key ) n FROM Customer c1 Group by customer_id) c2\\nON c.customer_id = c2.c\\nWhere c2.n = (Select count(*) FROM Product )\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3988353,
                "title": "fast-easy-sql-solution-using-sum",
                "content": "# Intuition\\nAs long as we have key value of int type, we can simply calculate sum of all uniqe products bought by each customer and sum of keys of Product table, then compare these two sums.\\n\\n# Approach\\nFirst, I fetched only unique pairs of *customer_id* and *product_key*, the summarized them *over partition by customer_id*. Calculated sum of *product_key* from Product table as well. Then comaped above sums and provided as a result *customer_id*s where they are equal.\\n\\n# Complexity\\n- Time complexity: 1133ms\\n\\n- Space complexity: 0.00MB\\n\\n# Code\\n```\\nselect\\n  customer_id\\nfrom (select distinct customer_id, sum(product_key) over (partition by customer_id) as keys_sum\\n      from (select distinct customer_id, product_key from Customer) t) t1\\nwhere keys_sum = (select sum(product_key) from Product)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n  customer_id\\nfrom (select distinct customer_id, sum(product_key) over (partition by customer_id) as keys_sum\\n      from (select distinct customer_id, product_key from Customer) t) t1\\nwhere keys_sum = (select sum(product_key) from Product)\\n\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1575825,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1565547,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1576381,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1887401,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1732920,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1935858,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1574812,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1572901,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1885021,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1872325,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1575825,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1565547,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1576381,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1887401,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1732920,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1935858,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1574812,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1572901,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1885021,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            },
            {
                "id": 1872325,
                "content": [
                    {
                        "username": "trex88",
                        "content": "\\n\\n-- number of products \\n-- customer id who bought all the distinct products \\n\\n\\n\\n\\tselect customer_id from customer \\n\\tgroup by \\n\\tcustomer_id\\n\\thaving count(distinct product_key ) = (select count(product_key ) from product)"
                    },
                    {
                        "username": "kirakira1992",
                        "content": "---The other solutions only count the numbers and check if the same, but if the customer buys product from not the second table, that solution is incorrect.\\n\\nselect customer_id\\nfrom\\n(\\nselect c.customer_id,p.product_key\\nfrom\\ncustomer c inner join product p\\non c.product_key = p.product_key\\n\\n) c_p\\ngroup by customer_id\\nhaving count(distinct product_key) = \\n(select count(distinct product_key) from product)"
                    },
                    {
                        "username": "aarcot100",
                        "content": "product key is a foreign key to Product table so this is impossible"
                    },
                    {
                        "username": "sumitsingh2415",
                        "content": "\\nselect customer_id from customer group by customer_id having count(distinct product_key)=(select count(*) from product)"
                    },
                    {
                        "username": "shivamj11",
                        "content": "Group by customer_id and set condition in having clause as if count of distinct product_key is equal to count of product_key in product tablle.\\n[Solution](https://leetcode.com/problems/customers-who-bought-all-products/solutions/3501467/group-by/)"
                    },
                    {
                        "username": "vaibh_1406",
                        "content": "EASY_Solution in MS-SQL \\n\\nSELECT c.customer_id FROM  Customer c\\nGROUP BY\\n    c.customer_id\\nHAVING\\n    count(DISTINCT product_key) = (SELECT count(*) FROM Product);"
                    },
                    {
                        "username": "MrAu11",
                        "content": "SELECT  c.customer_id\\nFROM Customer c  JOIN Product p \\nON c.product_key = p.product_key \\nGROUP BY 1\\nHAVING  COUNT(DISTINCT p.product_key) = (SELECT COUNT(product_key) FROM Product);"
                    },
                    {
                        "username": "yelian",
                        "content": "I came up a solution to match count(customer.product_key) = product.product_key,i works for test data but when I submit, it doesn\\'t work\\n\\nelect customer_id\\nfrom customer\\ngroup by  customer_id\\nhaving count(product_key) = (\\nselect count (distinct product_key)\\nfrom product)\\n\\n"
                    },
                    {
                        "username": "xr2129",
                        "content": "Hi,\\nI am just wondering if someone accidentally enter a wrong product_key for a customer in the CUSTOMER table, is there any way to solve it?\\nLet say for Customer 1 in the example, someone enter another entry whose product_key is 100. It\\'s clear the Customer 1 still bought product 5 and 6 so we should select him for the question. However, using count() won\\'t work because there is the third wrong product_key. \\n\\nAnyone can think of a solution for this scenario?\\n"
                    },
                    {
                        "username": "Egisess",
                        "content": "You\\'re welcome\\n\\nWITH\\nall_prod_concat as\\n(\\n    SELECT LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM product\\n),\\n\\ndistinct_customer as\\n(\\n    SELECT distinct customer_id, product_key FROM Customer\\n),\\n\\nbought_items as\\n(\\n    SELECT customer_id, LISTAGG(product_key, \\'\\') WITHIN GROUP (ORDER BY product_key) as id\\n    FROM distinct_customer \\n    GROUP BY customer_id\\n)\\n\\nSELECT customer_id\\nFROM bought_items join all_prod_concat on bought_items.id = all_prod_concat.id\\n"
                    },
                    {
                        "username": "lucasschnee",
                        "content": "Select customer_id\\nFROM Customer\\nGROUP BY customer_id\\nHAVING COUNT(DISTINCT(product_key)) = (\\n  SELECT Count(*)\\n  FROM Product\\n) "
                    },
                    {
                        "username": "bhakti_234",
                        "content": "select customer_id from customer \\ngroup by customer_id\\nhaving count(distinct product_key)=(select count(distinct product_key) from product)\\n\\n"
                    }
                ]
            }
        ]
    }
]