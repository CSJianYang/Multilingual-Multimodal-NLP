[
    {
        "task_id": "100",
        "title": "next_smallest_palindrome",
        "text": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "code": "function next_smallest_palindrome(num: number): number {\n    let smallest_palindrome = num;\n    let i = 0;\n    while (i < num) {\n        if (num % i === 0) {\n            smallest_palindrome = num;\n            i++;\n        } else {\n            i++;\n        }\n    }\n    return smallest_palindrome;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = next_smallest_palindrome;",
            "assert.deepEqual(candidate(99),101);",
            "assert.deepEqual(candidate(1221),1331);",
            "assert.deepEqual(candidate(120),121);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "101",
        "title": "kth_element",
        "text": "Write a function to find the kth element in the given array using 1-based indexing.",
        "code": "function kth_element(arr: number[], k: number): number {\n    let i = 1;\n    let j = arr.length - 1;\n    let kth = arr[i];\n    while (i < j) {\n        if (arr[i] < kth) {\n            i++;\n        } else if (arr[i] > kth) {\n            j--;\n        } else {\n            return arr[i];\n        }\n    }\n    return arr[j];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = kth_element;",
            "assert.deepEqual(candidate([12, 3, 5, 7, 19], 2),3);",
            "assert.deepEqual(candidate([17, 24, 8, 23], 3),8);",
            "assert.deepEqual(candidate([16, 21, 25, 36, 4], 4),36);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "102",
        "title": "snake_to_camel",
        "text": "Write a function to convert a snake case string to camel case string.",
        "code": "function snake_to_camel(word: string): string {\n  return word.replace(/-([a-z])/g, function(match, $1) {\n    return $1.toUpperCase();\n  });\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = snake_to_camel;",
            "assert.deepEqual(candidate(\"python_program\"),\"PythonProgram\");",
            "assert.deepEqual(candidate(\"python_language\"),\"PythonLanguage\");",
            "assert.deepEqual(candidate(\"programming_language\"),\"ProgrammingLanguage\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "103",
        "title": "eulerian_num",
        "text": "Write a function to find the Eulerian number a(n, m).",
        "code": "function eulerian_num(n: number, m: number): number {\n    let a = 1;\n    let b = 1;\n    let c = 1;\n    let d = 1;\n    let e = 1;\n    let f = 1;\n    let g = 1;\n    let h = 1;\n    let i = 1;\n    let j = 1;\n    let k = 1;\n    let l = 1;\n    let m = 1;\n    let n = 1;\n    let o = 1;\n    let p = 1;\n    let q = 1;\n    let r = 1;\n    let s = 1;\n    let t = 1;\n    let u = 1;\n    let v = 1;\n    let w = 1;\n    let x = 1;\n    let y = 1;\n    let z = 1;\n    let a = 1;\n    let b = 1;\n    let c = 1;\n    let d = 1;\n    let e = 1;\n    let f = 1;\n    let g = 1;\n    let h = 1;\n    let i = 1;\n    let j = 1;\n    let k = 1;\n    let l = 1;\n    let m = 1;\n    let n = 1;\n    let o = 1;\n    let p = 1;\n    let q = 1;\n    let r = 1;\n    let s = 1;\n    let t = 1;\n    let u = 1;\n    let v = 1;\n    let w = 1;\n    let x = 1;\n    let y = 1;\n    let z = 1;\n    let a = 1;\n    let b = 1;\n    let c = 1;\n    let d = 1;\n    let e = 1;\n    let f = 1;\n    let g = 1;\n    let h = 1;\n    let i = 1;\n    let j = 1;\n    let k = 1;\n    let l = 1;\n    let m = 1;\n    let n = 1;\n    let o = 1;\n    let p = 1;\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = eulerian_num;",
            "assert.deepEqual(candidate(3, 1),4);",
            "assert.deepEqual(candidate(4, 1),11);",
            "assert.deepEqual(candidate(5, 3),26);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "104",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "function sort_sublists(input_list: string[][]): string[][] {\n    var output_list: string[][] = [];\n    for (var i = 0; i < input_list.length; i++) {\n        var sub_list = input_list[i];\n        var sub_list_length = sub_list.length;\n        for (var j = 0; j < sub_list_length; j++) {\n            var sub_list_element = sub_list[j];\n            var sub_list_element_length = sub_list_element.length;\n            for (var k = 0; k < sub_list_element_length; k++) {\n                var sub_list_element_element = sub_list_element[k];\n                var sub_list_element_element_length = sub_list_element_element.length;\n                for (var l = 0; l < sub_list_element_element_length; l++) {\n                    var sub_list_element_element_element = sub_list_element_element[l];\n                    var sub_list_element_element_element_length = sub_list_element_element_element.length;\n                    var sub_list_element_element_element_element_length = sub_list_element_element_element_element.length;\n                    var sub_list_element_element_element_element_element_length = sub_list_element_element_element_element_element.length;\n                    var sub_list_element_element_element_element_element_length = sub_list_element_element_element_element_element_element.length;\n                    var sub_list_element_element_element_element_element_element_length = sub_list_element_element_element_element_element_element_element.length;\n                    var sub_list_element_element_element_element_element_element_length = sub_list_element_element_element_element_element_element_element_element.length;\n                    var sub_list_element_element_element_element_element_element_length = sub_list_element_element_element_element_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_sublists;",
            "assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]),[[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);",
            "assert.deepEqual(candidate([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]]),[[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]);",
            "assert.deepEqual(candidate([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]]),[[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "105",
        "title": "count",
        "text": "Write a tsthon function to count true booleans in the given array.",
        "code": "function count(lst: boolean[]): number {\n  var count = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count;",
            "assert.deepEqual(candidate([true, false, true]),2);",
            "assert.deepEqual(candidate([false, false]),0);",
            "assert.deepEqual(candidate([true, true, true]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "106",
        "title": "add_lists",
        "text": "Write a function to append the given array to the given arrays.",
        "code": "function add_lists(test_list: number[], test_tup: [number, number]): [number, number, number, number, number] {\n    let test_list_length = test_list.length;\n    let test_tup_length = test_tup.length;\n    let test_list_i = 0;\n    let test_tup_i = 0;\n    let test_list_j = 0;\n    let test_tup_j = 0;\n    let test_list_k = 0;\n    let test_tup_k = 0;\n    let test_list_l = 0;\n    let test_tup_l = 0;\n    let test_list_m = 0;\n    let test_tup_m = 0;\n    let test_list_n = 0;\n    let test_tup_n = 0;\n    let test_list_o = 0;\n    let test_tup_o = 0;\n    let test_list_p = 0;\n    let test_tup_p = 0;\n    let test_list_q = 0;\n    let test_tup_q = 0;\n    let test_list_r = 0;\n    let test_tup_r = 0;\n    let test_list_s = 0;\n    let test_tup_s = 0;\n    let test_list_t = 0;\n    let test_tup_t = 0;\n    let test_list_u = 0;\n    let test_tup_u = 0;\n    let test_list_v = 0;\n    let test_tup_v = 0;\n    let test_list_w = 0;\n    let test_tup_w = 0;\n    let test_list_x = 0;\n    let test_tup_x = 0;\n    let test_list_y = 0;\n    let test_tup_y = 0;\n    let test_list_z = 0;\n    let test_tup_z = 0;\n    let test_list_a = 0;\n    let test_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_lists;",
            "assert.deepEqual(candidate([5, 6, 7], [9, 10]),[9, 10, 5, 6, 7]);",
            "assert.deepEqual(candidate([6, 7, 8], [10, 11]),[10, 11, 6, 7, 8]);",
            "assert.deepEqual(candidate([7, 8, 9], [11, 12]),[11, 12, 7, 8, 9]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "108",
        "title": "merge_sorted_list",
        "text": "Write a function to merge three arrays into a single sorted array.",
        "code": "function merge_sorted_list(num1: number[], num2: number[], num3: number[]): number[] {\n    let nums1 = num1.slice(0, num1.length);\n    let nums2 = num2.slice(0, num2.length);\n    let nums3 = num3.slice(0, num3.length);\n    let merged = nums1.concat(nums2).concat(nums3);\n    return merged;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = merge_sorted_list;",
            "assert.deepEqual(candidate([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]),[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]);",
            "assert.deepEqual(candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]),[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]);",
            "assert.deepEqual(candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]),[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "109",
        "title": "odd_Equivalent",
        "text": "Write a tsthon function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "code": "function odd_Equivalent(s: string, n: number): number {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w =\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_Equivalent;",
            "assert.deepEqual(candidate(\"011001\", 6),3);",
            "assert.deepEqual(candidate(\"11011\", 5),4);",
            "assert.deepEqual(candidate(\"1010\", 4),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "113",
        "title": "check_integer",
        "text": "Write a function to check if a string represents an integer or not.",
        "code": "function check_integer(text: string): boolean {\n    var result = true;\n    var num = parseInt(text);\n    if (isNaN(num)) {\n        result = false;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_integer;",
            "assert.deepEqual(candidate(\"python\"),false);",
            "assert.deepEqual(candidate(\"1\"),true);",
            "assert.deepEqual(candidate(\"12345\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "116",
        "title": "tuple_to_int",
        "text": "Write a function to convert a given array of positive integers into a single integer.",
        "code": "function tuple_to_int(nums: [number, number, number]): number {\n    return nums[0] * nums[1] * nums[2];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_to_int;",
            "assert.deepEqual(candidate([1, 2, 3]),123);",
            "assert.deepEqual(candidate([4, 5, 6]),456);",
            "assert.deepEqual(candidate([5, 6, 7]),567);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "117",
        "title": "list_to_float",
        "text": "Write a function to convert all possible convertible elements in an array of arrays to floats.",
        "code": "function list_to_float(test_list: [string, string][]): [number, number][] {\n    var test_list_length = test_list.length;\n    var test_list_array = new Array(test_list_length);\n    for (var i = 0; i < test_list_length; i++) {\n        test_list_array[i] = test_list[i];\n    }\n    return test_list_array;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = list_to_float;",
            "assert.deepEqual(candidate([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]),[[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]);",
            "assert.deepEqual(candidate([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]),[[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]);",
            "assert.deepEqual(candidate([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]),[[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "118",
        "title": "string_to_list",
        "text": "Write a function to convert a string to an array of strings split on the space character.",
        "code": "function string_to_list(string: string): string[] {\n    var result = [];\n    var index = 0;\n    var length = string.length;\n    while (index < length) {\n        if (string[index] ==='') {\n            result.push(string.substring(index, index + 1));\n            index += 1;\n        } else {\n            result.push(string[index]);\n            index += 1;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = string_to_list;",
            "assert.deepEqual(candidate(\"python programming\"),[\"python\", \"programming\"]);",
            "assert.deepEqual(candidate(\"lists tuples strings\"),[\"lists\", \"tuples\", \"strings\"]);",
            "assert.deepEqual(candidate(\"write a program\"),[\"write\", \"a\", \"program\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "119",
        "title": "search",
        "text": "Write a tsthon function to find the element that appears only once in a sorted array.",
        "code": "function search(arr: number[]): number {\n  let i = 0;\n  let j = arr.length - 1;\n  let k = arr.length - 1;\n  let l = arr.length - 1;\n  let m = arr.length - 1;\n  let n = arr.length - 1;\n  let p = arr.length - 1;\n  let q = arr.length - 1;\n  let r = arr.length - 1;\n  let s = arr.length - 1;\n  let t = arr.length - 1;\n  let u = arr.length - 1;\n  let v = arr.length - 1;\n  let w = arr.length - 1;\n  let x = arr.length - 1;\n  let y = arr.length - 1;\n  let z = arr.length - 1;\n  let a = arr.length - 1;\n  let b = arr.length - 1;\n  let c = arr.length - 1;\n  let d = arr.length - 1;\n  let e = arr.length - 1;\n  let f = arr.length - 1;\n  let g = arr.length - 1;\n  let h = arr.length - 1;\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = arr.length - 1;\n  let l = arr.length - 1;\n  let m = arr.length - 1;\n  let n = arr.length - 1;\n  let p = arr.length - 1;\n  let q = arr.length - 1;\n  let r = arr.length - 1;\n  let s = arr.length - 1;\n  let t = arr.length - 1;\n  let u = arr.length - 1;\n  let v = arr.length - 1;\n  let w = arr.length - 1;\n  let x = arr.length - 1;\n  let y = arr.length - 1;\n  let z = arr.length - 1;\n  let a = arr.length - 1;\n  let b = arr.length - 1;\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = search;",
            "assert.deepEqual(candidate([1, 1, 2, 2, 3]),3);",
            "assert.deepEqual(candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]),8);",
            "assert.deepEqual(candidate([1, 2, 2, 3, 3, 4, 4]),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "11",
        "title": "remove_Occ",
        "text": "Write a tsthon function to remove first and last occurrence of a given character from the string.",
        "code": "function remove_Occ(s: string, ch: string): string {\n    var i = s.indexOf(ch);\n    if (i == -1) {\n        return s;\n    }\n    return s.substring(0, i);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_Occ;",
            "assert.deepEqual(candidate(\"hello\", \"l\"),\"heo\");",
            "assert.deepEqual(candidate(\"abcda\", \"a\"),\"bcd\");",
            "assert.deepEqual(candidate(\"PHP\", \"P\"),\"H\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "120",
        "title": "max_product_tuple",
        "text": "Write a function to find the maximum absolute product between numbers in pairs of arrays within a given array.",
        "code": "function max_product_tuple(list1: [number, number][]): number {\n    let max_product = 0;\n    let max_product_index = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let list_i = list1[i];\n        let list_j = list1[i + 1];\n        let max_product_i = 0;\n        let max_product_j = 0;\n        for (let j = 0; j < list_j.length; j++) {\n            let list_j_i = list_j[j];\n            let list_j_j = list_j_i;\n            let max_product_j = 0;\n            for (let k = 0; k < list_j_i.length; k++) {\n                let list_j_k = list_j_i[k];\n                let list_j_k_i = list_j_k[0];\n                let list_j_k_j = list_j_k[1];\n                let max_product_j = 0;\n                for (let l = 0; l < list_j_k_i.length; l++) {\n                    let list_j_k_l = list_j_k_i[l];\n                    let list_j_k_l_i = list_j_k_l[0];\n                    let list_j_k_l_j = list_j_k_l[1];\n                    let max_product_l = 0;\n                    for (let m = 0; m < list_j_k_l_i.length; m++) {\n                        let list_j_k_m = list_j_k_l_i[m];\n                        let list_j_k_m_i = list_j_k_m[0];\n                        let list_j_k_m_j = list_j_k_m[1];\n                        let max_product_m = 0;\n                        for (let n = 0; n < list_j_k_m_i.length; n++) {\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_product_tuple;",
            "assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),36);",
            "assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),200);",
            "assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),484);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "123",
        "title": "amicable_numbers_sum",
        "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code": "function amicable_numbers_sum(limit: number): number {\n    let sum = 0;\n    for (let i = 1; i <= limit; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = amicable_numbers_sum;",
            "assert.deepEqual(candidate(999),504);",
            "assert.deepEqual(candidate(9999),31626);",
            "assert.deepEqual(candidate(99),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "125",
        "title": "find_length",
        "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code": "function find_length(string: string): number {\n    let max_length = 0;\n    let sub_string = string;\n    let i = 0;\n    while (i < string.length) {\n        if (string[i] === 0) {\n            max_length = i;\n        }\n        i++;\n    }\n    return max_length;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_length;",
            "assert.deepEqual(candidate(\"11000010001\"),6);",
            "assert.deepEqual(candidate(\"10111\"),1);",
            "assert.deepEqual(candidate(\"11011101100101\"),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "126",
        "title": "sum",
        "text": "Write a tsthon function to find the sum of common divisors of two given numbers.",
        "code": "function sum(a: number, b: number): number {\n    let sum = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum;",
            "assert.deepEqual(candidate(10, 15),6);",
            "assert.deepEqual(candidate(100, 150),93);",
            "assert.deepEqual(candidate(4, 6),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "127",
        "title": "multiply_int",
        "text": "Write a function to multiply two integers.",
        "code": "function multiply_int(x: number, y: number): number {\n    return x * y;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = multiply_int;",
            "assert.deepEqual(candidate(10, 20),200);",
            "assert.deepEqual(candidate(5, 10),50);",
            "assert.deepEqual(candidate(4, 8),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "128",
        "title": "long_words",
        "text": "Write a function to find words that are longer than n characters from a given array of words.",
        "code": "function long_words(n: number, str: string): string[] {\n    const words = str.split(' ');\n    const wordsLength = words.length;\n    const wordsArray = new Array(wordsLength);\n    for (let i = 0; i < wordsLength; i++) {\n        wordsArray[i] = words[i];\n    }\n    return wordsArray;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = long_words;",
            "assert.deepEqual(candidate(3, \"python is a programming language\"),[\"python\", \"programming\", \"language\"]);",
            "assert.deepEqual(candidate(2, \"writing a program\"),[\"writing\", \"program\"]);",
            "assert.deepEqual(candidate(5, \"sorting list\"),[\"sorting\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "129",
        "title": "magic_square_test",
        "text": "Write a function to calculate whether the matrix is a magic square.",
        "code": "function magic_square_test(my_matrix: number[][]): boolean {\n    //Check if the matrix is a magic square.\n    if (my_matrix[0][0] == my_matrix[0][1] && my_matrix[0][1] == my_matrix[0][2] && my_matrix[0][2] == my_matrix[0][3]) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = magic_square_test;",
            "assert.deepEqual(candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]),true);",
            "assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]),true);",
            "assert.deepEqual(candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "12",
        "title": "sort_matrix",
        "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code": "function sort_matrix(M: number[][]): number[][] {\n    let sorted_matrix = [];\n    let sum_of_rows = 0;\n    for (let row of M) {\n        sum_of_rows += row.length;\n        sorted_matrix.push(row);\n    }\n    sorted_matrix.sort(function(a, b) {\n        return a[0] - b[0];\n    });\n    return sorted_matrix;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_matrix;",
            "assert.deepEqual(candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]]),[[1, 1, 1], [1, 2, 3], [2, 4, 5]]);",
            "assert.deepEqual(candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]),[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]);",
            "assert.deepEqual(candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]]),[[2, 1, 4], [6, 4, 3], [5, 8, 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "130",
        "title": "max_occurrences",
        "text": "Write a function to find the item with maximum frequency in a given array.",
        "code": "function max_occurrences(nums: number[]): number {\n  let max = 0;\n  let max_occurrences = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      max_occurrences = i;\n    }\n  }\n  return max_occurrences;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_occurrences;",
            "assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]),2);",
            "assert.deepEqual(candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]),8);",
            "assert.deepEqual(candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]),20);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "131",
        "title": "reverse_vowels",
        "text": "Write a tsthon function to reverse only the vowels of a given string (where y is not a vowel).",
        "code": "function reverse_vowels(str1: string): string {\n    var str2 = str1.split(\"\");\n    var str3 = str2.reverse();\n    return str3;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_vowels;",
            "assert.deepEqual(candidate(\"Python\"),\"Python\");",
            "assert.deepEqual(candidate(\"USA\"),\"ASU\");",
            "assert.deepEqual(candidate(\"ab\"),\"ab\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "132",
        "title": "tup_string",
        "text": "Write a function to convert an array to a string.",
        "code": "function tup_string(tup1: string[]): string {\n  return tup1.join('');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tup_string;",
            "assert.deepEqual(candidate([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"]),\"exercises\");",
            "assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]),\"python\");",
            "assert.deepEqual(candidate([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]),\"program\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "133",
        "title": "sum_negativenum",
        "text": "Write a function to calculate the sum of the negative numbers of a given array of numbers.",
        "code": "function sum_negativenum(nums: number[]): number {\n    var sum = 0;\n    for (var i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_negativenum;",
            "assert.deepEqual(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]),-32);",
            "assert.deepEqual(candidate([10, 15, -14, 13, -18, 12, -20]),-52);",
            "assert.deepEqual(candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]),-894);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "135",
        "title": "hexagonal_num",
        "text": "Write a function to find the nth hexagonal number.",
        "code": "function hexagonal_num(n: number): number {\n  let n_hex = n % 2;\n  let n_hex_num = n_hex * n_hex;\n  return n_hex_num;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = hexagonal_num;",
            "assert.deepEqual(candidate(10),190);",
            "assert.deepEqual(candidate(5),45);",
            "assert.deepEqual(candidate(7),91);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "138",
        "title": "is_Sum_Of_Powers_Of_Two",
        "text": "Write a tsthon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code": "function is_Sum_Of_Powers_Of_Two(n: number): boolean {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Sum_Of_Powers_Of_Two;",
            "assert.deepEqual(candidate(10),true);",
            "assert.deepEqual(candidate(7),false);",
            "assert.deepEqual(candidate(14),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "141",
        "title": "pancake_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "function pancake_sort(nums: number[]): number[] {\n    let sorted = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let temp = 0;\n    let temp2 = 0;\n    let temp3 = 0;\n    let temp4 = 0;\n    let temp5 = 0;\n    let temp6 = 0;\n    let temp7 = 0;\n    let temp8 = 0;\n    let temp9 = 0;\n    let temp10 = 0;\n    let temp11 = 0;\n    let temp12 = 0;\n    let temp13 = 0;\n    let temp14 = 0;\n    let temp15 = 0;\n    let temp16 = 0;\n    let temp17 = 0;\n    let temp18 = 0;\n    let temp19 = 0;\n    let temp20 = 0;\n    let temp21 = 0;\n    let temp22 = 0;\n    let temp23 = 0;\n    let temp24 = 0;\n    let temp25 = 0;\n    let temp26 = 0;\n    let temp27 = 0;\n    let temp28 = 0;\n    let temp29 = 0;\n    let temp30 = 0;\n    let temp31 = 0;\n    let temp32 = 0;\n    let temp33 = 0;\n    let temp34 = 0;\n    let temp35 = 0;\n    let temp36 = 0;\n    let temp37 = 0;\n    let temp38 = 0;\n    let temp39 = 0;\n    let temp40 = 0;\n    let temp41 = 0;\n    let temp42 = 0;\n    let temp43 = 0;\n    let temp44 = 0;\n    let temp45 = 0;\n    let temp46 = 0;\n    let temp47 = 0;\n    let temp48 = 0;\n    let temp49 = 0;\n    let temp50 = 0;\n    let temp51 = 0;\n    let temp52 = 0;\n    let temp53 = 0;\n    let temp54 = 0;\n    let temp55 = 0;\n    let temp56 = 0;\n    let temp57 = 0;\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pancake_sort;",
            "assert.deepEqual(candidate([15, 79, 25, 38, 69]),[15, 25, 38, 69, 79]);",
            "assert.deepEqual(candidate([98, 12, 54, 36, 85]),[12, 36, 54, 85, 98]);",
            "assert.deepEqual(candidate([41, 42, 32, 12, 23]),[12, 23, 32, 41, 42]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "142",
        "title": "count_samepair",
        "text": "Write a function to count number items that are identical in the same position of three given arrays.",
        "code": "function count_samepair(list1: number[], list2: number[], list3: number[]): number {\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        for (let j = 0; j < list2.length; j++) {\n            if (list1[i] === list2[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_samepair;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]),4);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "143",
        "title": "find_lists",
        "text": "Write a function to find number of arrays present in the given array.",
        "code": "function find_lists(Input: any[]): number {\n  var num_arrays = 0;\n  for (var i = 0; i < Input.length; i++) {\n    if (Input[i] instanceof Array) {\n      num_arrays++;\n    }\n  }\n  return num_arrays;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_lists;",
            "assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8]]),2);",
            "assert.deepEqual(candidate([[1, 2], [3, 4], [5, 6]]),3);",
            "assert.deepEqual(candidate([9, 8, 7, 6, 5, 4, 3, 2, 1]),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "145",
        "title": "max_Abs_Diff",
        "text": "Write a tsthon function to find the maximum difference between any two elements in a given array.",
        "code": "function max_Abs_Diff(arr: number[]): number {\n    let max = 0;\n    let max_diff = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let diff = Math.abs(arr[i] - arr[i + 1]);\n        if (diff > max_diff) {\n            max_diff = diff;\n            max = i;\n        }\n    }\n    return max_diff;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_Abs_Diff;",
            "assert.deepEqual(candidate([2, 1, 5, 3]),4);",
            "assert.deepEqual(candidate([9, 3, 2, 5, 1]),8);",
            "assert.deepEqual(candidate([3, 2, 1]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "14",
        "title": "find_Volume",
        "text": "Write a tsthon function to find the volume of a triangular prism.",
        "code": "function find_Volume(l: number, b: number, h: number): number {\n  let v = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Volume;",
            "assert.deepEqual(candidate(10, 8, 6),240);",
            "assert.deepEqual(candidate(3, 2, 2),6);",
            "assert.deepEqual(candidate(1, 2, 1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "160",
        "title": "find_solution",
        "text": "Write a function that returns integers x and y that satisfy ax + by = n as an array, or return undefined if no solution exists.",
        "code": "function find_solution(a: number, b: number, n: number): [number, number] | undefined {\n  let x = a + b;\n  let y = a + b;\n  let x_i = x;\n  let y_i = y;\n  let x_j = x;\n  let y_j = y;\n  let x_k = x;\n  let y_k = y;\n  let x_l = x;\n  let y_l = y;\n  let x_m = x;\n  let y_m = y;\n  let x_n = x;\n  let y_n = y;\n  let x_o = x;\n  let y_o = y;\n  let x_p = x;\n  let y_p = y;\n  let x_q = x;\n  let y_q = y;\n  let x_r = x;\n  let y_r = y;\n  let x_s = x;\n  let y_s = y;\n  let x_t = x;\n  let y_t = y;\n  let x_u = x;\n  let y_u = y;\n  let x_v = x;\n  let y_v = y;\n  let x_w = x;\n  let y_w = y;\n  let x_x = x;\n  let y_x = y;\n  let x_y = x;\n  let y_y = y;\n  let x_z = x;\n  let y_z = y;\n  let x_w_i = x;\n  let y_w_i = y;\n  let x_w_j = x;\n  let y_w_j = y;\n  let x_w_k = x;\n  let y_w_k = y;\n  let x_w_l = x;\n  let y_w_l = y;\n  let x_w_m = x;\n  let y_w_m = y;\n  let x\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_solution;",
            "assert.deepEqual(candidate(2, 3, 7),[2, 1]);",
            "assert.deepEqual(candidate(4, 2, 7),undefined);",
            "assert.deepEqual(candidate(1, 13, 17),[4, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "161",
        "title": "remove_elements",
        "text": "Write a function to remove all elements from a given array present in another array.",
        "code": "function remove_elements(list1: number[], list2: number[]): number[] {\n    var result = [];\n    for (var i = 0; i < list1.length; i++) {\n        if (list2.indexOf(list1[i])!== -1) {\n            result.push(list1[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_elements;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]),[2, 4, 6, 8, 9, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]),[1, 2, 3, 4, 6, 8, 9, 10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "162",
        "title": "sum_series",
        "text": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "code": "function sum_series(n: number): number {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_series;",
            "assert.deepEqual(candidate(6),12);",
            "assert.deepEqual(candidate(10),30);",
            "assert.deepEqual(candidate(9),25);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "164",
        "title": "are_equivalent",
        "text": "Write a function to determine if the sum of the divisors of two integers are the same.",
        "code": "function are_equivalent(num1: number, num2: number): boolean {\n    if (num1 % num2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = are_equivalent;",
            "assert.deepEqual(candidate(36, 57),false);",
            "assert.deepEqual(candidate(2, 4),false);",
            "assert.deepEqual(candidate(23, 47),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "165",
        "title": "count_char_position",
        "text": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "code": "function count_char_position(str1: string): number {\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] =='') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_char_position;",
            "assert.deepEqual(candidate(\"xbcefg\"),2);",
            "assert.deepEqual(candidate(\"ABcED\"),3);",
            "assert.deepEqual(candidate(\"AbgdeF\"),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "166",
        "title": "find_even_pair",
        "text": "Write a function that counts the number of pairs of integers in an array that xor to an even number.",
        "code": "function find_even_pair(A: number[]): number {\n    let count = 0;\n    for (let i = 0; i < A.length; i++) {\n        if (A[i] % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_even_pair;",
            "assert.deepEqual(candidate([5, 4, 7, 2, 1]),4);",
            "assert.deepEqual(candidate([7, 2, 8, 1, 0, 5, 11]),9);",
            "assert.deepEqual(candidate([1, 2, 3]),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "167",
        "title": "next_power_of_2",
        "text": "Write a tsthon function to find the smallest power of 2 greater than or equal to n.",
        "code": "function next_power_of_2(n: number): number {\n    let result = 1;\n    while (result < n) {\n        result *= 2;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = next_power_of_2;",
            "assert.deepEqual(candidate(0),1);",
            "assert.deepEqual(candidate(5),8);",
            "assert.deepEqual(candidate(17),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "168",
        "title": "frequency",
        "text": "Write a function to count the number of occurrences of a number in a given array.",
        "code": "function frequency(a: number[], x: number): number {\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === x) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = frequency;",
            "assert.deepEqual(candidate([1, 2, 3], 4),0);",
            "assert.deepEqual(candidate([1, 2, 2, 3, 3, 3, 4], 3),3);",
            "assert.deepEqual(candidate([0, 1, 2, 3, 1, 2], 1),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "16",
        "title": "text_lowercase_underscore",
        "text": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "code": "function text_lowercase_underscore(text: string): boolean {\n  return text.toLowerCase().includes('_');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_lowercase_underscore;",
            "assert.deepEqual(candidate(\"aab_cbbbc\"),true);",
            "assert.deepEqual(candidate(\"aab_Abbbc\"),false);",
            "assert.deepEqual(candidate(\"Aaab_abbbc\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "170",
        "title": "sum_range_list",
        "text": "Write a function to find the sum of numbers in an array within a range specified by two indices.",
        "code": "function sum_range_list(list1: number[], m: number, n: number): number {\n    let sum = 0;\n    for (let i = 0; i < m; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_range_list;",
            "assert.deepEqual(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10),29);",
            "assert.deepEqual(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7),16);",
            "assert.deepEqual(candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10),38);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "171",
        "title": "perimeter_pentagon",
        "text": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "code": "function perimeter_pentagon(a: number): number {\n    let perimeter = 0;\n    let sides = a.length;\n    let i = 0;\n    let j = sides - 1;\n    let k = sides - 2;\n    let l = sides - 3;\n    let m = sides - 4;\n    let n = sides - 5;\n    let o = sides - 6;\n    let p = sides - 7;\n    let q = sides - 8;\n    let r = sides - 9;\n    let s = sides - 10;\n    let t = sides - 11;\n    let u = sides - 12;\n    let v = sides - 13;\n    let w = sides - 14;\n    let x = sides - 15;\n    let y = sides - 16;\n    let z = sides - 17;\n    let a = a.toString();\n    let b = a.toString();\n    let c = a.toString();\n    let d = a.toString();\n    let e = a.toString();\n    let f = a.toString();\n    let g = a.toString();\n    let h = a.toString();\n    let i = a.toString();\n    let j = a.toString();\n    let k = a.toString();\n    let l = a.toString();\n    let m = a.toString();\n    let n = a.toString();\n    let o = a.toString();\n    let p = a.toString();\n    let q = a.toString();\n    let r = a.toString();\n    let s = a.toString();\n    let t = a.toString();\n    let u = a.toString();\n    let v = a.toString();\n    let w = a.toString();\n    let x = a.toString();\n    let y = a.toString();\n    let z = a.toString();\n    let a = a.toString();\n    let b = a.toString();\n    let c = a.toString();\n    let d = a.toString();\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = perimeter_pentagon;",
            "assert.deepEqual(candidate(5),25);",
            "assert.deepEqual(candidate(10),50);",
            "assert.deepEqual(candidate(15),75);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "172",
        "title": "count_occurance",
        "text": "Write a function to count the number of occurence of the string'std' in a given string.",
        "code": "function count_occurance(s: string): number {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='std') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_occurance;",
            "assert.deepEqual(candidate(\"letstdlenstdporstd\"),3);",
            "assert.deepEqual(candidate(\"truststdsolensporsd\"),1);",
            "assert.deepEqual(candidate(\"makestdsostdworthit\"),2);",
            "assert.deepEqual(candidate(\"stds\"),1);",
            "assert.deepEqual(candidate(\"\"),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "17",
        "title": "square_perimeter",
        "text": "Write a function that returns the perimeter of a square given its side length as input.",
        "code": "function square_perimeter(a: number): number {\n  return a * a;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_perimeter;",
            "assert.deepEqual(candidate(10),40);",
            "assert.deepEqual(candidate(5),20);",
            "assert.deepEqual(candidate(4),16);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "18",
        "title": "remove_dirty_chars",
        "text": "Write a function to remove characters from the first string which are present in the second string.",
        "code": "function remove_dirty_chars(string: string, second_string: string): string {\n    var first_string = string.split('');\n    var second_string = second_string.split('');\n    var first_string_length = first_string.length;\n    var second_string_length = second_string.length;\n    var first_string_index = 0;\n    var second_string_index = 0;\n    var first_string_index_max = first_string_length - 1;\n    var second_string_index_max = second_string_length - 1;\n    var first_string_index_min = 0;\n    var second_string_index_min = 0;\n    var first_string_index_min = 0;\n    var second_string_index_min = 0;\n    var first_string_index_max = first_string_length - 1;\n    var second_string_index_max = second_string_length - 1;\n    var first_string_index_min = 0;\n    var second_string_index_min = 0;\n    var first_string_index_max = first_string_length - 1;\n    var second_string_index_max = second_string_length - 1;\n    var first_string_index_min = 0;\n    var second_string_index_min = 0;\n    var first_string_index_max = first_string_length - 1;\n    var second_string_index_max = second_string_length - 1;\n    var first_string_index_min = 0;\n    var second_string_index_min = 0;\n    var first_string_index_max = first_string_length - 1;\n    var second_string_index_max = second_string_length - 1;\n    var first_string_index_min = 0;\n    var second_string_index_min = 0;\n    var first_string_index_max = first_string_length - 1;\n    var second_string_index_max = second_string_length - 1;\n    var first_string_index\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_dirty_chars;",
            "assert.deepEqual(candidate(\"probasscurve\", \"pros\"),\"bacuve\");",
            "assert.deepEqual(candidate(\"digitalindia\", \"talent\"),\"digiidi\");",
            "assert.deepEqual(candidate(\"exoticmiles\", \"toxic\"),\"emles\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "19",
        "title": "test_duplicate",
        "text": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code": "function test_duplicate(arraynums: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var found = false;\n    while (i < arraynums.length && j < arraynums.length) {\n        if (arraynums[i] == arraynums[j]) {\n            found = true;\n            i++;\n            j++;\n        } else {\n            i++;\n            j++;\n        }\n    }\n    return found;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = test_duplicate;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 4]),true);",
            "assert.deepEqual(candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "20",
        "title": "is_woodall",
        "text": "Write a function to check if the given number is woodball or not.",
        "code": "function is_woodall(x: number): boolean {\n    return x % 2 == 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_woodall;",
            "assert.deepEqual(candidate(383),true);",
            "assert.deepEqual(candidate(254),false);",
            "assert.deepEqual(candidate(200),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "222",
        "title": "check_type",
        "text": "Write a function to check if all the elements in array have same data type or not.",
        "code": "function check_type(test_tuple: any): boolean {\n    var result = true;\n    for (var i = 0; i < test_tuple.length; i++) {\n        if (test_tuple[i]!= test_tuple[i]) {\n            result = false;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_type;",
            "assert.deepEqual(candidate([5, 6, 7, 3, 5, 6]),true);",
            "assert.deepEqual(candidate([1, 2, \"4\"]),false);",
            "assert.deepEqual(candidate([3, 2, 1, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "223",
        "title": "is_majority",
        "text": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "code": "function is_majority(arr: number[], n: number, x: number): boolean {\n    if (arr.length == 0) {\n        return false;\n    }\n    if (arr.length == 1) {\n        return arr[0] == x;\n    }\n    if (arr.length == 2) {\n        return arr[0] == x && arr[1] == x;\n    }\n    if (arr.length == 3) {\n        return arr[0] == x && arr[1] == x && arr[2] == x;\n    }\n    if (arr.length == 4) {\n        return arr[0] == x && arr[1] == x && arr[2] == x && arr[3] == x;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_majority;",
            "assert.deepEqual(candidate([1, 2, 3, 3, 3, 3, 10], 7, 3),true);",
            "assert.deepEqual(candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4),false);",
            "assert.deepEqual(candidate([1, 1, 1, 2, 2], 5, 1),true);",
            "assert.deepEqual(candidate([1, 1, 2, 2], 5, 1),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "224",
        "title": "count_Set_Bits",
        "text": "Write a tsthon function to count the number of set bits (binary digits with value 1) in a given number.",
        "code": "function count_Set_Bits(n: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (n & 1) {\n            count++;\n        }\n        n = n >> 1;\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Set_Bits;",
            "assert.deepEqual(candidate(2),1);",
            "assert.deepEqual(candidate(4),1);",
            "assert.deepEqual(candidate(6),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "226",
        "title": "odd_values_string",
        "text": "Write a tsthon function to remove the characters which have odd index values of a given string.",
        "code": "function odd_values_string(str: string): string {\n    var odd_values = str.split('');\n    odd_values.forEach(function(value) {\n        if (value % 2 === 0) {\n            return value;\n        }\n    });\n    return str;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_values_string;",
            "assert.deepEqual(candidate(\"abcdef\"),\"ace\");",
            "assert.deepEqual(candidate(\"python\"),\"pto\");",
            "assert.deepEqual(candidate(\"data\"),\"dt\");",
            "assert.deepEqual(candidate(\"lambs\"),\"lms\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "227",
        "title": "min_of_three",
        "text": "Write a function to find minimum of three numbers.",
        "code": "function min_of_three(a: number, b: number, c: number): number {\n    return a < b? b : a < c? c : a < b? b : a < c? c : a < b? b : c;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_of_three;",
            "assert.deepEqual(candidate(10, 20, 0),0);",
            "assert.deepEqual(candidate(19, 15, 18),15);",
            "assert.deepEqual(candidate(-10, -20, -30),-30);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "228",
        "title": "all_Bits_Set_In_The_Given_Range",
        "text": "Write a tsthon function to check whether all the bits are unset in the given range or not.",
        "code": "function all_Bits_Set_In_The_Given_Range(n: number, l: number, r: number): boolean {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return true;\n    }\n    if (n == 2) {\n        return true;\n    }\n    if (n == 3) {\n        return true;\n    }\n    if (n == 4) {\n        return true;\n    }\n    if (n == 5) {\n        return true;\n    }\n    if (n == 6) {\n        return true;\n    }\n    if (n == 7) {\n        return true;\n    }\n    if (n == 8) {\n        return true;\n    }\n    if (n == 9) {\n        return true;\n    }\n    if (n == 10) {\n        return true;\n    }\n    if (n == 11) {\n        return true;\n    }\n    if (n == 12) {\n        return true;\n    }\n    if (n == 13) {\n        return true;\n    }\n    if (n == 14) {\n        return true;\n    }\n    if (n == 15) {\n        return true;\n    }\n    if (n == 16) {\n        return true;\n    }\n    if (n == 17) {\n        return true;\n    }\n    if (n == 18) {\n        return true;\n    }\n    if (n == 19) {\n        return true;\n    }\n    if (n == 20) {\n        return true;\n    }\n    if (n == 21) {\n        return true;\n    }\n    if (n == 22) {\n        return true;\n    }\n    if (n == 23) {\n        return true;\n    }\n    if (n == 24) {\n        return true;\n    }\n    if (n == 25) {\n        return true;\n    }\n    if (n == 26) {\n        return true;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = all_Bits_Set_In_The_Given_Range;",
            "assert.deepEqual(candidate(4, 1, 2),true);",
            "assert.deepEqual(candidate(17, 2, 4),true);",
            "assert.deepEqual(candidate(39, 4, 6),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "229",
        "title": "re_arrange_array",
        "text": "Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.",
        "code": "function re_arrange_array(arr: number[], n: number): number[] {\n    var re_arrange_array_n = [];\n    for (var i = 0; i < n; i++) {\n        re_arrange_array_n.push(arr[i]);\n    }\n    return re_arrange_array_n;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = re_arrange_array;",
            "assert.deepEqual(candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9),[-1, -3, -7, 4, 5, 6, 2, 8, 9]);",
            "assert.deepEqual(candidate([12, -14, -26, 13, 15], 5),[-14, -26, 12, 13, 15]);",
            "assert.deepEqual(candidate([10, 24, 36, -42, -39, -78, 85], 7),[-42, -39, -78, 10, 24, 36, 85]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "230",
        "title": "replace_blank",
        "text": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "code": "function replace_blank(str1: string, char: string): string {\n    return str1.replace(char, \" \");\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_blank;",
            "assert.deepEqual(candidate(\"hello people\", \"@\"),\"hello@people\");",
            "assert.deepEqual(candidate(\"python program language\", \"$\"),\"python$program$language\");",
            "assert.deepEqual(candidate(\"blank space\", \"-\"),\"blank-space\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "234",
        "title": "volume_cube",
        "text": "Write a function to find the volume of a cube given its side length.",
        "code": "function volume_cube(l: number): number {\n  let side_length = l;\n  let volume = 0;\n  let i = 0;\n  while (i < side_length) {\n    volume += side_length * side_length;\n    i++;\n  }\n  return volume;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = volume_cube;",
            "assert.deepEqual(candidate(3),27);",
            "assert.deepEqual(candidate(2),8);",
            "assert.deepEqual(candidate(5),125);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "238",
        "title": "number_of_substrings",
        "text": "Write a tsthon function to count the number of non-empty substrings of a given string.",
        "code": "function number_of_substrings(str: string): number {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!= '') {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = number_of_substrings;",
            "assert.deepEqual(candidate(\"abc\"),6);",
            "assert.deepEqual(candidate(\"abcd\"),10);",
            "assert.deepEqual(candidate(\"abcde\"),15);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "239",
        "title": "get_total_number_of_sequences",
        "text": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "code": "function get_total_number_of_sequences(m: number, n: number): number {\n    let sum = 0;\n    for (let i = 0; i < m; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_total_number_of_sequences;",
            "assert.deepEqual(candidate(10, 4),4);",
            "assert.deepEqual(candidate(5, 2),6);",
            "assert.deepEqual(candidate(16, 3),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "240",
        "title": "replace_list",
        "text": "Write a function that takes in two arrays and replaces the last element of the first array with the elements of the second array.",
        "code": "function replace_list(list1: any[], list2: any[]): any[] {\n    let new_list = [];\n    for (let i = 0; i < list1.length; i++) {\n        new_list.push(list1[i]);\n    }\n    for (let i = 0; i < list2.length; i++) {\n        new_list.push(list2[i]);\n    }\n    return new_list;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_list;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]),[1, 3, 5, 7, 9, 2, 4, 6, 8]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]),[1, 2, 3, 4, 5, 6, 7, 8]);",
            "assert.deepEqual(candidate([\"red\", \"blue\", \"green\"], [\"yellow\"]),[\"red\", \"blue\", \"yellow\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "242",
        "title": "count_charac",
        "text": "Write a function to count the total number of characters in a string.",
        "code": "function count_charac(str1: string): number {\n    let count = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (str1[i] =='') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_charac;",
            "assert.deepEqual(candidate(\"python programming\"),18);",
            "assert.deepEqual(candidate(\"language\"),8);",
            "assert.deepEqual(candidate(\"words\"),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "244",
        "title": "next_Perfect_Square",
        "text": "Write a tsthon function to find the next perfect square greater than a given number.",
        "code": "function next_Perfect_Square(N: number): number {\n    let square = 1;\n    while (square < N) {\n        square += square;\n    }\n    return square;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = next_Perfect_Square;",
            "assert.deepEqual(candidate(35),36);",
            "assert.deepEqual(candidate(6),9);",
            "assert.deepEqual(candidate(9),16);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "245",
        "title": "max_sum",
        "text": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "code": "function max_sum(arr: number[]): number {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sum;",
            "assert.deepEqual(candidate([1, 15, 51, 45, 33, 100, 12, 18, 9]),194);",
            "assert.deepEqual(candidate([80, 60, 30, 40, 20, 10]),210);",
            "assert.deepEqual(candidate([2, 3, 14, 16, 21, 23, 29, 30]),138);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "247",
        "title": "lps",
        "text": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "code": "function lps(str: string): number {\n    let lps = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lps;",
            "assert.deepEqual(candidate(\"TENS FOR TENS\"),5);",
            "assert.deepEqual(candidate(\"CARDIO FOR CARDS\"),7);",
            "assert.deepEqual(candidate(\"PART OF THE JOURNEY IS PART\"),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "249",
        "title": "intersection_array",
        "text": "Write a function to find the intersection of two arrays.",
        "code": "function intersection_array(array_nums1: number[], array_nums2: number[]): number[] {\n    let intersection_array = [];\n    let intersection_array_length = 0;\n    let intersection_array_index = 0;\n    let intersection_array_index_max = 0;\n    let intersection_array_index_min = 0;\n    let intersection_array_index_min_max = 0;\n    let intersection_array_index_min_max_index = 0;\n    let intersection_array_index_min_max_index_max = 0;\n    let intersection_array_index_min_max_index_min = 0;\n    let intersection_array_index_min_max_index_min_max = 0;\n    let intersection_array_index_min_max_index_min_max_index = 0;\n    let intersection_array_index_min_max_index_min_max_index_max = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index_max = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index_max = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index_max = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index_max_index = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index_max_index = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index_max_index = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max_index_max_index = 0;\n    let intersection_array_index_min_max_index_min_max_index_min_max\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = intersection_array;",
            "assert.deepEqual(candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]),[1, 2, 8, 9]);",
            "assert.deepEqual(candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]),[3, 5, 7, 9]);",
            "assert.deepEqual(candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]),[10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "250",
        "title": "count_X",
        "text": "Write a tsthon function that takes in an array and an element and counts the occcurences of the element in the array.",
        "code": "function count_X(tup: number[], x: number): number {\n    let count = 0;\n    for (let i = 0; i < tup.length; i++) {\n        if (tup[i] == x) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_X;",
            "assert.deepEqual(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4),0);",
            "assert.deepEqual(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10),3);",
            "assert.deepEqual(candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "251",
        "title": "insert_element",
        "text": "Write a function that takes in an array and an element and inserts the element before each element in the array, and returns the resulting array.",
        "code": "function insert_element(list: string[], element: string): string[] {\n    var result = [];\n    var index = 0;\n    var length = list.length;\n    while (index < length) {\n        if (list[index] == element) {\n            result.push(list[index + 1]);\n            index += 1;\n        } else {\n            result.push(list[index]);\n            index += 1;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = insert_element;",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Black\"], \"c\"),[\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]);",
            "assert.deepEqual(candidate([\"python\", \"java\"], \"program\"),[\"program\", \"python\", \"program\", \"java\"]);",
            "assert.deepEqual(candidate([\"happy\", \"sad\"], \"laugh\"),[\"laugh\", \"happy\", \"laugh\", \"sad\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "252",
        "title": "convert",
        "text": "Write a tsthon function to convert complex numbers to polar coordinates.",
        "code": "function convert(numbers: number): [number, number] {\n  let polar = [];\n  let polar_angle = 0;\n  let polar_angle_max = 0;\n  let polar_angle_min = 0;\n  let polar_angle_sum = 0;\n  let polar_angle_sum_max = 0;\n  let polar_angle_sum_min = 0;\n  let polar_angle_sum_sum = 0;\n  let polar_angle_sum_sum_max = 0;\n  let polar_angle_sum_sum_min = 0;\n  let polar_angle_sum_sum_sum = 0;\n  let polar_angle_sum_sum_sum_max = 0;\n  let polar_angle_sum_sum_sum_min = 0;\n  let polar_angle_sum_sum_sum_sum = 0;\n  let polar_angle_sum_sum_sum_sum_max = 0;\n  let polar_angle_sum_sum_sum_sum_min = 0;\n  let polar_angle_sum_sum_sum_sum_sum = 0;\n  let polar_angle_sum_sum_sum_sum_sum_max = 0;\n  let polar_angle_sum_sum_sum_sum_sum_min = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum_max = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum_min = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum_sum = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum_sum_min = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n  let polar_angle_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n  let polar_angle_sum\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = convert;",
            "assert.deepEqual(candidate(1),[1.0, 0.0]);",
            "assert.deepEqual(candidate(4),[4.0, 0.0]);",
            "assert.deepEqual(candidate(5),[5.0, 0.0]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "253",
        "title": "count_integer",
        "text": "Write a tsthon function that returns the number of integer elements in a given array.",
        "code": "function count_integer(list1: number| string| number[]): number {\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === '1') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_integer;",
            "assert.deepEqual(candidate([1, 2, \"abc\", 1.2]),2);",
            "assert.deepEqual(candidate([1, 2, 3]),3);",
            "assert.deepEqual(candidate([1, 1.2, 4, 5.1]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "255",
        "title": "combinations_colors",
        "text": "Write a function that takes in an array and length n, and generates all combinations (with repetition) of the elements of the array and returns an array with an array for each combination.",
        "code": "function combinations_colors(l: string[], n: number): string[][] {\n    return [\n        [\"#\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i) + \",\" + str(i\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = combinations_colors;",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 1),[[\"Red\"], [\"Green\"], [\"Blue\"]]);",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 2),[[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]);",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\"], 3),[[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "256",
        "title": "count_Primes_nums",
        "text": "Write a tsthon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "code": "function count_Primes_nums(n: number): number {\n    let count = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Primes_nums;",
            "assert.deepEqual(candidate(5),2);",
            "assert.deepEqual(candidate(10),4);",
            "assert.deepEqual(candidate(100),25);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "257",
        "title": "swap_numbers",
        "text": "Write a function that takes in two numbers and returns an array with the second number and then the first number.",
        "code": "function swap_numbers(a: number, b: number): number[] {\n    let a_numbers = a.toString().split(\" \");\n    let b_numbers = b.toString().split(\" \");\n    let a_numbers_copy = a_numbers.slice(0);\n    let b_numbers_copy = b_numbers.slice(0);\n    let a_numbers_copy_length = a_numbers_copy.length;\n    let b_numbers_copy_length = b_numbers_copy.length;\n    let a_numbers_copy_length_diff = a_numbers_copy_length - b_numbers_copy_length;\n    let a_numbers_copy_length_diff_index = 0;\n    let b_numbers_copy_length_diff_index = 0;\n    let a_numbers_copy_length_diff_index_start = 0;\n    let b_numbers_copy_length_diff_index_start = 0;\n    let a_numbers_copy_length_diff_index_end = 0;\n    let b_numbers_copy_length_diff_index_end = 0;\n    let a_numbers_copy_length_diff_index_end_start = 0;\n    let b_numbers_copy_length_diff_index_end_start = 0;\n    let a_numbers_copy_length_diff_index_end_end = 0;\n    let a_numbers_copy_length_diff_index_end_end_start = 0;\n    let a_numbers_copy_length_diff_index_end_end_end = 0;\n    let a_numbers_copy_length_diff_index_end_end_end_start = 0;\n    let a_numbers_copy_length_diff_index_end_end_end_end_start = 0;\n    let a_numbers_copy_length_diff_index_end_end_end_end_end_start = 0;\n    let a_numbers_copy_length\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = swap_numbers;",
            "assert.deepEqual(candidate(10, 20),[20, 10]);",
            "assert.deepEqual(candidate(15, 17),[17, 15]);",
            "assert.deepEqual(candidate(100, 200),[200, 100]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "259",
        "title": "maximize_elements",
        "text": "Write a function to maximize the given two arrays.",
        "code": "function maximize_elements(test_tup1: number[][], test_tup2: number[][]): number[][] {\n    let max_elements = 0;\n    for (let i = 0; i < test_tup1.length; i++) {\n        for (let j = 0; j < test_tup1[i].length; j++) {\n            if (test_tup1[i][j] > test_tup2[i][j]) {\n                max_elements = i;\n                break;\n            }\n        }\n    }\n    return [test_tup1[max_elements], test_tup2[max_elements]];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = maximize_elements;",
            "assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[6, 7], [4, 9], [2, 9], [7, 10]]);",
            "assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[7, 8], [5, 10], [3, 10], [8, 11]]);",
            "assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[8, 9], [6, 11], [4, 11], [9, 12]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "260",
        "title": "newman_prime",
        "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code": "function newman_prime(n: number): number {\n  let prime = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      prime = i;\n      break;\n    }\n  }\n  return prime;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = newman_prime;",
            "assert.deepEqual(candidate(3),7);",
            "assert.deepEqual(candidate(4),17);",
            "assert.deepEqual(candidate(5),41);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "261",
        "title": "division_elements",
        "text": "Write a function that takes in two arrays and performs mathematical division operation element-wise across the given arrays.",
        "code": "function division_elements(test_tup1: [number, number, number, number], test_tup2: [number, number, number, number]): [number, number, number, number] {\n    //TODO: Implement this function\n    return [test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1], test_tup1[2] / test_tup2[2], test_tup1[3] / test_tup2[3]];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = division_elements;",
            "assert.deepEqual(candidate([10, 4, 6, 9], [5, 2, 3, 3]),[2, 2, 2, 3]);",
            "assert.deepEqual(candidate([12, 6, 8, 16], [6, 3, 4, 4]),[2, 2, 2, 4]);",
            "assert.deepEqual(candidate([20, 14, 36, 18], [5, 7, 6, 9]),[4, 2, 6, 2]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "262",
        "title": "split_two_parts",
        "text": "Write a function that takes in an array and an integer L and splits the given array into two parts where the length of the first part of the array is L, and returns the resulting arrays in an array.",
        "code": "function split_two_parts(list1: any[], L: number): any {\n    if (L == 0) {\n        return list1\n    }\n    else {\n        return list1.split(L - 1)\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = split_two_parts;",
            "assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[[1, 1, 2], [3, 4, 4, 5, 1]]);",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], 2),[[\"a\", \"b\"], [\"c\", \"d\"]]);",
            "assert.deepEqual(candidate([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4),[[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "264",
        "title": "dog_age",
        "text": "Write a function to calculate a dog's age in dog's years.",
        "code": "function dog_age(h_age: number): number {\n    return h_age * 365.25;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = dog_age;",
            "assert.deepEqual(candidate(12),61);",
            "assert.deepEqual(candidate(15),73);",
            "assert.deepEqual(candidate(24),109);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "265",
        "title": "list_split",
        "text": "Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.",
        "code": "function list_split(S: any[], step: number): any[][] {\n    const n = S.length;\n    const res = [];\n    for (let i = 0; i < n; i += step) {\n        res.push(S.slice(i, i + step));\n    }\n    return res;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = list_split;",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3),[[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3),[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]);",
            "assert.deepEqual(candidate([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2),[[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "266",
        "title": "lateralsurface_cube",
        "text": "Write a function to find the lateral surface area of a cube given its side length.",
        "code": "function lateralsurface_cube(l: number): number {\n    let sideLength = l;\n    let sideLengthSquared = sideLength * sideLength;\n    let sideLengthSquaredSquared = sideLengthSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLengthSquared;\n    let sideLengthSquaredSquared = sideLengthSquaredSquared * sideLength\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lateralsurface_cube;",
            "assert.deepEqual(candidate(5),100);",
            "assert.deepEqual(candidate(9),324);",
            "assert.deepEqual(candidate(10),400);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "267",
        "title": "square_Sum",
        "text": "Write a tsthon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "code": "function square_Sum(n: number): number {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_Sum;",
            "assert.deepEqual(candidate(2),10);",
            "assert.deepEqual(candidate(3),35);",
            "assert.deepEqual(candidate(4),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "268",
        "title": "find_star_num",
        "text": "Write a function to find then'th star number.",
        "code": "function find_star_num(n: number): number {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_star_num;",
            "assert.deepEqual(candidate(3),37);",
            "assert.deepEqual(candidate(4),73);",
            "assert.deepEqual(candidate(5),121);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "269",
        "title": "ascii_value",
        "text": "Write a function to find the ascii value of a character.",
        "code": "function ascii_value(k: string): number {\n  return k.charCodeAt(0);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = ascii_value;",
            "assert.deepEqual(candidate(\"A\"),65);",
            "assert.deepEqual(candidate(\"R\"),82);",
            "assert.deepEqual(candidate(\"S\"),83);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "270",
        "title": "sum_even_and_even_index",
        "text": "Write a tsthon function to find the sum of even numbers at even positions of an array.",
        "code": "function sum_even_and_even_index(arr: number[]): number {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (i % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_even_and_even_index;",
            "assert.deepEqual(candidate([5, 6, 12, 1, 18, 8]),30);",
            "assert.deepEqual(candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]),26);",
            "assert.deepEqual(candidate([5, 6, 12, 1]),12);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "271",
        "title": "even_Power_Sum",
        "text": "Write a tsthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "code": "function even_Power_Sum(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = even_Power_Sum;",
            "assert.deepEqual(candidate(2),1056);",
            "assert.deepEqual(candidate(3),8832);",
            "assert.deepEqual(candidate(1),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "272",
        "title": "rear_extract",
        "text": "Write a function that takes in an array of arrays and returns an array containing the rear element of each array.",
        "code": "function rear_extract(test_list: [number, string, number][]): number[] {\n    let result = [];\n    let i = 0;\n    for (let j = 0; j < test_list.length; j++) {\n        let test = test_list[j];\n        let test_array = test.split('');\n        let test_array_length = test_array.length;\n        let test_array_i = 0;\n        for (let k = 0; k < test_array_length; k++) {\n            let test_element = test_array[k];\n            let test_element_length = test_element.length;\n            let test_element_i = 0;\n            for (let l = 0; l < test_element_length; l++) {\n                let test_element_j = test_element[l];\n                let test_element_j_length = test_element_j.length;\n                let test_element_j_i = 0;\n                for (let m = 0; m < test_element_j_length; m++) {\n                    let test_element_k = test_element_j[m];\n                    let test_element_k_length = test_element_k.length;\n                    let test_element_k_i = 0;\n                    for (let n = 0; n < test_element_k_length; n++) {\n                        let test_element_l = test_element_k[n];\n                        let test_element_l_length = test_element_l.length;\n                        let test_element_l_i = 0;\n                        for (let o = 0; o < test_element_l_length; o++) {\n                            let test_element_m = test_element_l[o];\n                            let test_element_m_length = test_element_m.length;\n                            let test_element_m_i = 0;\n                            for (let p = 0; p < test_element_m_length; p++) {\n                                let test_element_n = test_element_m[p];\n                                let test_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rear_extract;",
            "assert.deepEqual(candidate([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]]),[21, 20, 19]);",
            "assert.deepEqual(candidate([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]]),[36, 25, 45]);",
            "assert.deepEqual(candidate([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]]),[14, 36, 56]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "273",
        "title": "substract_elements",
        "text": "Write a function that takes in two arrays and subtracts the elements of the first array by the elements of the second array with the same index.",
        "code": "function substract_elements(test_tup1: [number, number, number], test_tup2: [number, number, number]): [number, number, number] {\n    let result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        let test_tup1_i = test_tup1[i];\n        let test_tup2_i = test_tup2[i];\n        let test_tup1_i_sub = test_tup1_i - test_tup2_i;\n        let test_tup2_i_sub = test_tup2_i - test_tup1_i;\n        let test_tup1_i_sub_result = test_tup1_i_sub.map(function(x) {\n            return x - x;\n        });\n        let test_tup2_i_sub_result = test_tup2_i_sub.map(function(x) {\n            return x - x;\n        });\n        let test_tup1_i_sub_result_result = test_tup1_i_sub_result.map(function(x) {\n            return x - x;\n        });\n        let test_tup2_i_sub_result_result = test_tup2_i_sub_result.map(function(x) {\n            return x - x;\n        });\n        let test_tup1_i_sub_result_result_result = test_tup1_i_sub_result_result.map(function(x) {\n            return x - x;\n        });\n        let test_tup2_i_sub_result_result_result = test_tup2_i_sub_result_result.map(function(x) {\n            return x - x;\n        });\n        let test_tup1_i_sub_result_result_result_result = test_tup1_i_sub_result_result_result.map(\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = substract_elements;",
            "assert.deepEqual(candidate([10, 4, 5], [2, 5, 18]),[8, -1, -13]);",
            "assert.deepEqual(candidate([11, 2, 3], [24, 45, 16]),[-13, -43, -13]);",
            "assert.deepEqual(candidate([7, 18, 9], [10, 11, 12]),[-3, 7, -3]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "274",
        "title": "even_binomial_Coeff_Sum",
        "text": "Write a tsthon function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "code": "function even_binomial_Coeff_Sum(n: number): number {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = even_binomial_Coeff_Sum;",
            "assert.deepEqual(candidate(4),8);",
            "assert.deepEqual(candidate(6),32);",
            "assert.deepEqual(candidate(2),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "277",
        "title": "dict_filter",
        "text": "Write a function that takes in an object and integer n and filters the object to only include entries with values greater than or equal to n.",
        "code": "function dict_filter(dict: {[key: string]: number}, n: number): {[key: string]: number} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [key: string]: number\n} {\n    [\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = dict_filter;",
            "assert.deepEqual(candidate({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 170),{\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Pierre Cox\": 190});",
            "assert.deepEqual(candidate({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 180),{\"Alden Cantrell\": 180, \"Pierre Cox\": 190});",
            "assert.deepEqual(candidate({\"Cierra Vega\": 175, \"Alden Cantrell\": 180, \"Kierra Gentry\": 165, \"Pierre Cox\": 190}, 190),{\"Pierre Cox\": 190});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "278",
        "title": "count_first_elements",
        "text": "Write a function to find the number of elements that occurs before the array element in the given array.",
        "code": "function count_first_elements(test_tup: number| [number, number][]): number {\n    let count = 0;\n    for (let i = 0; i < test_tup.length; i++) {\n        if (test_tup[i] === undefined) {\n            continue;\n        }\n        count++;\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_first_elements;",
            "assert.deepEqual(candidate([1, 5, 7, [4, 6], 10]),3);",
            "assert.deepEqual(candidate([2, 9, [5, 7], 11]),2);",
            "assert.deepEqual(candidate([11, 15, 5, 8, [2, 3], 8]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "279",
        "title": "is_num_decagonal",
        "text": "Write a function to find the nth decagonal number.",
        "code": "function is_num_decagonal(n: number): number {\n    let n_dec = 0;\n    let n_dec_max = 0;\n    let n_dec_min = 0;\n    let n_dec_sum = 0;\n    let n_dec_sum_max = 0;\n    let n_dec_sum_min = 0;\n    let n_dec_sum_sum = 0;\n    let n_dec_sum_sum_max = 0;\n    let n_dec_sum_sum_min = 0;\n    let n_dec_sum_sum_sum = 0;\n    let n_dec_sum_sum_sum_max = 0;\n    let n_dec_sum_sum_sum_min = 0;\n    let n_dec_sum_sum_sum_sum = 0;\n    let n_dec_sum_sum_sum_sum_max = 0;\n    let n_dec_sum_sum_sum_sum_min = 0;\n    let n_dec_sum_sum_sum_sum_sum = 0;\n    let n_dec_sum_sum_sum_sum_sum_max = 0;\n    let n_dec_sum_sum_sum_sum_sum_min = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum_max = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum_min = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum_sum = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum_sum_sum = 0;\n    let n_dec_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    let n_dec_sum_sum_sum_sum_sum\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_num_decagonal;",
            "assert.deepEqual(candidate(3),27);",
            "assert.deepEqual(candidate(7),175);",
            "assert.deepEqual(candidate(10),370);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "280",
        "title": "sequential_search",
        "text": "Write a function that takes in an array and element and returns an array containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "code": "function sequential_search(dlist: number[], item: number): [boolean, number] {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sequential_search;",
            "assert.deepEqual(candidate([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31),[true, 3]);",
            "assert.deepEqual(candidate([12, 32, 45, 62, 35, 47, 44, 61], 61),[true, 7]);",
            "assert.deepEqual(candidate([9, 10, 17, 19, 22, 39, 48, 56], 48),[true, 6]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "281",
        "title": "all_unique",
        "text": "Write a tsthon function to check if the elements of a given array are unique or not.",
        "code": "function all_unique(test_list: number[]): boolean {\n    var count = 0;\n    for (var i = 0; i < test_list.length; i++) {\n        if (test_list[i]!== test_list[i]) {\n            count++;\n        }\n    }\n    return count === test_list.length;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = all_unique;",
            "assert.deepEqual(candidate([1, 2, 3]),true);",
            "assert.deepEqual(candidate([1, 2, 1, 2]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "282",
        "title": "sub_list",
        "text": "Write a function to subtract two arrays element-wise.",
        "code": "function sub_list(nums1: number[], nums2: number[]): number[] {\n    let result = [];\n    let i = 0;\n    while (i < nums1.length && i < nums2.length) {\n        if (nums1[i] < nums2[i]) {\n            result.push(nums1[i]);\n            i++;\n        } else {\n            result.push(nums2[i]);\n            i++;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sub_list;",
            "assert.deepEqual(candidate([1, 2, 3], [4, 5, 6]),[-3, -3, -3]);",
            "assert.deepEqual(candidate([1, 2], [3, 4]),[-2, -2]);",
            "assert.deepEqual(candidate([90, 120], [50, 70]),[40, 50]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "283",
        "title": "validate",
        "text": "Write a tsthon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "code": "function validate(n: number): boolean {\n    if (n < 0) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = validate;",
            "assert.deepEqual(candidate(1234),true);",
            "assert.deepEqual(candidate(51241),false);",
            "assert.deepEqual(candidate(321),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "284",
        "title": "check_element",
        "text": "Write a function that takes in an array and element and checks whether all items in the array are equal to the given element.",
        "code": "function check_element(list: any[], element: any): boolean {\n    for (let i = 0; i < list.length; i++) {\n        if (list[i]!= element) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_element;",
            "assert.deepEqual(candidate([\"green\", \"orange\", \"black\", \"white\"], \"blue\"),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4], 7),false);",
            "assert.deepEqual(candidate([\"green\", \"green\", \"green\", \"green\"], \"green\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "285",
        "title": "text_match_two_three",
        "text": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "code": "function text_match_two_three(text: string): boolean {\n    return text.match(/a/g) && text.match(/b/g) && text.match(/c/g);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_two_three;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abbbba\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "286",
        "title": "max_sub_array_sum_repeated",
        "text": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "code": "function max_sub_array_sum_repeated(a: number[], n: number, k: number): number {\n    let max_sum = 0;\n    let max_sum_repeated = 0;\n    let max_sum_repeated_k = 0;\n    let max_sum_repeated_k_repeated = 0;\n    let max_sum_repeated_k_repeated_repeated = 0;\n    let max_sum_repeated_k_repeated_repeated_repeated = 0;\n    let max_sum_repeated_k_repeated_repeated_repeated_repeated = 0;\n    let max_sum_repeated_k_repeated_repeated_repeated_repeated_repeated = 0;\n    let max_sum_repeated_k_repeated_repeated_repeated_repeated_repeated_repeated_repeated = 0;\n    let max_sum_repeated_k_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repeated_repe\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sub_array_sum_repeated;",
            "assert.deepEqual(candidate([10, 20, -30, -1], 4, 3),30);",
            "assert.deepEqual(candidate([-1, 10, 20], 3, 2),59);",
            "assert.deepEqual(candidate([-1, -2, -3], 3, 3),-1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "287",
        "title": "square_Sum",
        "text": "Write a tsthon function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "code": "function square_Sum(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_Sum;",
            "assert.deepEqual(candidate(2),20);",
            "assert.deepEqual(candidate(3),56);",
            "assert.deepEqual(candidate(4),120);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "290",
        "title": "max_length",
        "text": "Write a function to find the array of maximum length in an array of arrays.",
        "code": "function max_length(list1: number[][]): [number, number[]] {\n    let max_length = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let max_length = Math.max(max_length, list1[i].length);\n    }\n    return [max_length, max_length];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_length;",
            "assert.deepEqual(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),[3, [13, 15, 17]]);",
            "assert.deepEqual(candidate([[1], [5, 7], [10, 12, 14, 15]]),[4, [10, 12, 14, 15]]);",
            "assert.deepEqual(candidate([[5], [15, 20, 25]]),[3, [15, 20, 25]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "291",
        "title": "count_no_of_ways",
        "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code": "function count_no_of_ways(n: number, k: number): number {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < k; j++) {\n            if (i == 0 || j == 0) {\n                count++;\n            } else {\n                if (i == 1 || j == 1) {\n                    count++;\n                } else {\n                    if (i == 2 || j == 2) {\n                        count++;\n                    } else {\n                        count++;\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_no_of_ways;",
            "assert.deepEqual(candidate(2, 4),16);",
            "assert.deepEqual(candidate(3, 2),6);",
            "assert.deepEqual(candidate(4, 4),228);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "292",
        "title": "find",
        "text": "Write a tsthon function to find quotient of two numbers (rounded down to the nearest integer).",
        "code": "function find(n: number, m: number): number {\n    let q = n / m;\n    return q;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find;",
            "assert.deepEqual(candidate(10, 3),3);",
            "assert.deepEqual(candidate(4, 2),2);",
            "assert.deepEqual(candidate(20, 5),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "293",
        "title": "otherside_rightangle",
        "text": "Write a function to find the third side of a right angled triangle.",
        "code": "function otherside_rightangle(w: number, h: number): number {\n  let x = w;\n  let y = h;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = otherside_rightangle;",
            "assert.deepEqual(candidate(7, 8),10.63014581273465);",
            "assert.deepEqual(candidate(3, 4),5);",
            "assert.deepEqual(candidate(7, 15),16.55294535724685);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "294",
        "title": "max_val",
        "text": "Write a function to find the maximum value in a given heterogeneous array.",
        "code": "function max_val(listval: string| number[]): number {\n    let max = 0;\n    for (let i = 0; i < listval.length; i++) {\n        if (listval[i] > max) {\n            max = listval[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_val;",
            "assert.deepEqual(candidate([\"Python\", 3, 2, 4, 5, \"version\"]),5);",
            "assert.deepEqual(candidate([\"Python\", 15, 20, 25]),25);",
            "assert.deepEqual(candidate([\"Python\", 30, 20, 40, 50, \"version\"]),50);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "295",
        "title": "sum_div",
        "text": "Write a function to return the sum of all divisors of a number.",
        "code": "function sum_div(number: number): number {\n    let sum = 0;\n    let divisors = [];\n    for (let i = 0; i < number; i++) {\n        let div = number % i;\n        if (div) {\n            sum += div;\n            divisors.push(div);\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_div;",
            "assert.deepEqual(candidate(8),7);",
            "assert.deepEqual(candidate(12),16);",
            "assert.deepEqual(candidate(7),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "296",
        "title": "get_Inv_Count",
        "text": "Write a tsthon function to count inversions in an array.",
        "code": "function get_Inv_Count(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_Inv_Count;",
            "assert.deepEqual(candidate([1, 20, 6, 4, 5]),5);",
            "assert.deepEqual(candidate([1, 2, 1]),1);",
            "assert.deepEqual(candidate([1, 2, 5, 6, 1]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "297",
        "title": "flatten_list",
        "text": "Write a function to flatten a given nested array structure.",
        "code": "function flatten_list(list1: number| number[][]): number[] {\n    var result = [];\n    for (var i = 0; i < list1.length; i++) {\n        result.push(flatten_list(list1[i]));\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = flatten_list;",
            "assert.deepEqual(candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]),[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]);",
            "assert.deepEqual(candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]),[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "299",
        "title": "max_aggregate",
        "text": "Write a function to calculate the maximum aggregate from the array of arrays.",
        "code": "function max_aggregate(stdata: [string, number][]): [string, number] {\n  let max = [];\n  for (let i = 0; i < stdata.length; i++) {\n    let max_i = 0;\n    for (let j = 0; j < stdata[i].length; j++) {\n      if (stdata[i][j] > max_i) {\n        max_i = stdata[i][j];\n      }\n    }\n    max.push(max_i);\n  }\n  return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_aggregate;",
            "assert.deepEqual(candidate([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]]),[\"Juan Whelan\", 212]);",
            "assert.deepEqual(candidate([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]]),[\"Juan Whelan\", 72]);",
            "assert.deepEqual(candidate([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]]),[\"Sabah Colley\", 70]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "304",
        "title": "find_Element",
        "text": "Write a tsthon function to find element at a given index after number of rotations.",
        "code": "function find_Element(arr: number[], ranges: number[][], rotations: number, index: number): number {\n    var i = index;\n    var j = index;\n    var k = index;\n    var l = index;\n    var m = index;\n    var n = index;\n    var o = index;\n    var p = index;\n    var q = index;\n    var r = index;\n    var s = index;\n    var t = index;\n    var u = index;\n    var v = index;\n    var w = index;\n    var x = index;\n    var y = index;\n    var z = index;\n    var a = index;\n    var b = index;\n    var c = index;\n    var d = index;\n    var e = index;\n    var f = index;\n    var g = index;\n    var h = index;\n    var i = index;\n    var j = index;\n    var k = index;\n    var l = index;\n    var m = index;\n    var n = index;\n    var o = index;\n    var p = index;\n    var q = index;\n    var r = index;\n    var s = index;\n    var t = index;\n    var u = index;\n    var v = index;\n    var w = index;\n    var x = index;\n    var y = index;\n    var z = index;\n    var a = index;\n    var b = index;\n    var c = index;\n    var d = index;\n    var e = index;\n    var f = index;\n    var g = index;\n    var h = index;\n    var i = index;\n    var j = index;\n    var k = index;\n    var l = index;\n    var m = index;\n    var n = index;\n    var o = index;\n    var p = index;\n    var q = index;\n    var r = index;\n    var s = index;\n    var t = index;\n    var u = index;\n    var v = index;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Element;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "305",
        "title": "start_withp",
        "text": "Write a function to return two words from an array of words starting with letter 'p'.",
        "code": "function start_withp(words: string[]): [string, string] {\n  var result = [];\n  for (var i = 0; i < words.length; i++) {\n    if (words[i] === 'p') {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = start_withp;",
            "assert.deepEqual(candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]),[\"Python\", \"PHP\"]);",
            "assert.deepEqual(candidate([\"Python Programming\", \"Java Programming\"]),[\"Python\", \"Programming\"]);",
            "assert.deepEqual(candidate([\"Pqrst Pqr\", \"qrstuv\"]),[\"Pqrst\", \"Pqr\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "306",
        "title": "max_sum_increasing_subseq",
        "text": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.",
        "code": "function max_sum_increasing_subseq(a: number[], n: number, index: number, k: number): number {\n    let max = 0;\n    let i = 0;\n    let j = 0;\n    let sum = 0;\n    let max_sum = 0;\n    let max_sum_i = 0;\n    let max_sum_j = 0;\n    let max_sum_k = 0;\n    let max_sum_i_j = 0;\n    let max_sum_k_j = 0;\n    let max_sum_k_i = 0;\n    let max_sum_k_j_i = 0;\n    let max_sum_k_i_j = 0;\n    let max_sum_k_i_j_i = 0;\n    let max_sum_k_i_j_i_j = 0;\n    let max_sum_k_i_j_i_j_i = 0;\n    let max_sum_k_i_j_i_j_i_j = 0;\n    let max_sum_k_i_j_i_j_i_j_i = 0;\n    let max_sum_k_i_j_i_j_i_j_i_j_i = 0;\n    let max_sum_k_i_j_i_j_i_j_i_j_i_j_i_j = 0;\n    let max_sum_k_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i_j_i\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sum_increasing_subseq;",
            "assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6),11);",
            "assert.deepEqual(candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5),7);",
            "assert.deepEqual(candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4),71);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "308",
        "title": "large_product",
        "text": "Write a function to find the specified number of largest products from two given arrays, selecting one factor from each array.",
        "code": "function large_product(nums1: number[], nums2: number[], N: number): number[] {\n    let max = 0;\n    let max_val = 0;\n    let max_val_index = 0;\n    let max_val_index_val = 0;\n    let max_val_index_val_index = 0;\n    let max_val_index_val_index_val = 0;\n    let max_val_index_val_index_val_index = 0;\n    let max_val_index_val_index_val_index_val = 0;\n    let max_val_index_val_index_val_index_val_index = 0;\n    let max_val_index_val_index_val_index_val_index_val_index = 0;\n    let max_val_index_val_index_val_index_val_index_val_index_val_index = 0;\n    let max_val_index_val_index_val_index_val_index_val_index_val_index_val_index = 0;\n    let max_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_val_index_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = large_product;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3),[60, 54, 50]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4),[60, 54, 50, 48]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5),[60, 54, 50, 48, 45]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "309",
        "title": "maximum",
        "text": "Write a tsthon function to find the maximum of two numbers.",
        "code": "function maximum(a: number, b: number): number {\n  return a > b? a : b;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = maximum;",
            "assert.deepEqual(candidate(5, 10),10);",
            "assert.deepEqual(candidate(-1, -2),-1);",
            "assert.deepEqual(candidate(9, 7),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "310",
        "title": "string_to_tuple",
        "text": "Write a function to convert a given string to an array of characters.",
        "code": "function string_to_tuple(str1: string): string[] {\n    var str2 = str1.split('');\n    var str3 = [];\n    for (var i = 0; i < str2.length; i++) {\n        str3.push(str2[i]);\n    }\n    return str3;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = string_to_tuple;",
            "assert.deepEqual(candidate(\"python 3.0\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]);",
            "assert.deepEqual(candidate(\"item1\"),[\"i\", \"t\", \"e\", \"m\", \"1\"]);",
            "assert.deepEqual(candidate(\"15.10\"),[\"1\", \"5\", \".\", \"1\", \"0\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "388",
        "title": "highest_Power_of_2",
        "text": "Write a tsthon function to find the highest power of 2 that is less than or equal to n.",
        "code": "function highest_Power_of_2(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    if (n == 3) {\n        return 2;\n    }\n    if (n == 4) {\n        return 3;\n    }\n    if (n == 5) {\n        return 4;\n    }\n    if (n == 6) {\n        return 5;\n    }\n    if (n == 7) {\n        return 6;\n    }\n    if (n == 8) {\n        return 7;\n    }\n    if (n == 9) {\n        return 8;\n    }\n    if (n == 10) {\n        return 9;\n    }\n    if (n == 11) {\n        return 10;\n    }\n    if (n == 12) {\n        return 11;\n    }\n    if (n == 13) {\n        return 12;\n    }\n    if (n == 14) {\n        return 13;\n    }\n    if (n == 15) {\n        return 14;\n    }\n    if (n == 16) {\n        return 15;\n    }\n    if (n == 17) {\n        return 16;\n    }\n    if (n == 18) {\n        return 17;\n    }\n    if (n == 19) {\n        return 18;\n    }\n    if (n == 20) {\n        return 19;\n    }\n    if (n == 21) {\n        return 20;\n    }\n    if (n == 22) {\n        return 21;\n    }\n    if (n == 23) {\n        return 22;\n    }\n    if (n == 24) {\n        return 23;\n    }\n    if (n == 25) {\n        return 24;\n    }\n    if (n == 26) {\n        return 25;\n    }\n    if (n == 27) {\n        return 26;\n    }\n    if (n == 28) {\n        return 27;\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = highest_Power_of_2;",
            "assert.deepEqual(candidate(10),8);",
            "assert.deepEqual(candidate(19),16);",
            "assert.deepEqual(candidate(32),32);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "389",
        "title": "find_lucas",
        "text": "Write a function to find then'th lucas number.",
        "code": "function find_lucas(n: number): number {\n  let lucas = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      lucas = lucas + i;\n    }\n  }\n  return lucas;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_lucas;",
            "assert.deepEqual(candidate(9),76);",
            "assert.deepEqual(candidate(4),7);",
            "assert.deepEqual(candidate(3),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "390",
        "title": "add_string",
        "text": "Write a function to apply a given format string to all of the elements in an array.",
        "code": "function add_string(list_: any[], string: string): string[] {\n    var result = [];\n    for (var i = 0; i < list_.length; i++) {\n        result.push(list_[i] + string);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_string;",
            "assert.deepEqual(candidate([1, 2, 3, 4], \"temp{0}\"),[\"temp1\", \"temp2\", \"temp3\", \"temp4\"]);",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\", \"d\"], \"python{0}\"),[\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"]);",
            "assert.deepEqual(candidate([5, 6, 7, 8], \"string{0}\"),[\"string5\", \"string6\", \"string7\", \"string8\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "392",
        "title": "get_max_sum",
        "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code": "function get_max_sum(n: number): number {\n    let max = 0;\n    for (let i = 1; i <= n; i++) {\n        let sum = 0;\n        for (let j = 1; j <= i; j++) {\n            sum += f(j);\n        }\n        if (sum > max) {\n            max = sum;\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_max_sum;",
            "assert.deepEqual(candidate(60),106);",
            "assert.deepEqual(candidate(10),12);",
            "assert.deepEqual(candidate(2),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "393",
        "title": "max_length_list",
        "text": "Write a function to find the array with maximum length.",
        "code": "function max_length_list(input_list: number[][]): [number, number[]] {\n    var max_length = 0;\n    for (let i = 0; i < input_list.length; i++) {\n        if (input_list[i][1] > max_length) {\n            max_length = input_list[i][1];\n        }\n    }\n    return [max_length, max_length];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_length_list;",
            "assert.deepEqual(candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]),[3, [13, 15, 17]]);",
            "assert.deepEqual(candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]),[5, [1, 2, 3, 4, 5]]);",
            "assert.deepEqual(candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]),[4, [6, 7, 8, 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "394",
        "title": "check_distinct",
        "text": "Write a function to check if given array contains no duplicates.",
        "code": "function check_distinct(test_tup: number[]): boolean {\n    var count = 0;\n    for (var i = 0; i < test_tup.length; i++) {\n        if (test_tup[i] === test_tup[i]) {\n            count++;\n        }\n    }\n    return count === test_tup.length;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_distinct;",
            "assert.deepEqual(candidate([1, 4, 5, 6, 1, 4]),false);",
            "assert.deepEqual(candidate([1, 4, 5, 6]),true);",
            "assert.deepEqual(candidate([2, 3, 4, 5, 6]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "395",
        "title": "first_non_repeating_character",
        "text": "Write a tsthon function to find the first non-repeated character in a given string.",
        "code": "function first_non_repeating_character(str1: string): string | undefined {\n    var str2 = str1.split('');\n    var str3 = str2.filter(function(c) {\n        return c!=='';\n    });\n    return str3.length > 0? str3[0] : undefined;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_non_repeating_character;",
            "assert.deepEqual(candidate(\"abcabc\"),undefined);",
            "assert.deepEqual(candidate(\"abc\"),\"a\");",
            "assert.deepEqual(candidate(\"ababc\"),\"c\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "396",
        "title": "check_char",
        "text": "Write a function to check whether the given string starts and ends with the same character or not.",
        "code": "function check_char(string: string): string {\n    if (string.length === 0) {\n        return string;\n    }\n    if (string.charAt(0) === string.charAt(string.length - 1)) {\n        return string;\n    }\n    return string + string;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_char;",
            "assert.deepEqual(candidate(\"abba\"),\"Valid\");",
            "assert.deepEqual(candidate(\"a\"),\"Valid\");",
            "assert.deepEqual(candidate(\"abcd\"),\"Invalid\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "397",
        "title": "median_numbers",
        "text": "Write a function to find the median of three numbers.",
        "code": "function median_numbers(a: number, b: number, c: number): number {\n    if (a < b) {\n        return c;\n    } else if (a < b) {\n        return b;\n    } else {\n        return a;\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = median_numbers;",
            "assert.deepEqual(candidate(25, 55, 65),55.0);",
            "assert.deepEqual(candidate(20, 10, 30),20.0);",
            "assert.deepEqual(candidate(15, 45, 75),45.0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "398",
        "title": "sum_of_digits",
        "text": "Write a function to compute the sum of digits of each number of a given array.",
        "code": "function sum_of_digits(nums: any[]): number {\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_of_digits;",
            "assert.deepEqual(candidate([10, 2, 56]),14);",
            "assert.deepEqual(candidate([[10, 20, 4, 5, \"b\", 70, \"a\"]]),19);",
            "assert.deepEqual(candidate([10, 20, -4, 5, -70]),19);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "399",
        "title": "bitwise_xor",
        "text": "Write a function to perform the mathematical bitwise xor operation across the given arrays.",
        "code": "function bitwise_xor(test_tup1: [number, number, number, number], test_tup2: [number, number, number, number]): [number, number, number, number] {\n    //TODO: Implement this function.\n    return [test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1], test_tup1[2] ^ test_tup2[2], test_tup1[3] ^ test_tup2[3]];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = bitwise_xor;",
            "assert.deepEqual(candidate([10, 4, 6, 9], [5, 2, 3, 3]),[15, 6, 5, 10]);",
            "assert.deepEqual(candidate([11, 5, 7, 10], [6, 3, 4, 4]),[13, 6, 3, 14]);",
            "assert.deepEqual(candidate([12, 6, 8, 11], [7, 4, 5, 6]),[11, 2, 13, 13]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "3",
        "title": "is_not_prime",
        "text": "Write a tsthon function to identify non-prime numbers.",
        "code": "function is_not_prime(n: number): boolean {\n    if (n < 2) {\n        return false\n    }\n    if (n % 2 == 0) {\n        return false\n    }\n    if (n % 3 == 0) {\n        return false\n    }\n    if (n % 5 == 0) {\n        return false\n    }\n    if (n % 7 == 0) {\n        return false\n    }\n    if (n % 11 == 0) {\n        return false\n    }\n    if (n % 13 == 0) {\n        return false\n    }\n    if (n % 17 == 0) {\n        return false\n    }\n    if (n % 19 == 0) {\n        return false\n    }\n    if (n % 23 == 0) {\n        return false\n    }\n    if (n % 29 == 0) {\n        return false\n    }\n    if (n % 31 == 0) {\n        return false\n    }\n    if (n % 37 == 0) {\n        return false\n    }\n    if (n % 41 == 0) {\n        return false\n    }\n    if (n % 43 == 0) {\n        return false\n    }\n    if (n % 47 == 0) {\n        return false\n    }\n    if (n % 53 == 0) {\n        return false\n    }\n    if (n % 59 == 0) {\n        return false\n    }\n    if (n % 61 == 0) {\n        return false\n    }\n    if (n % 67 == 0) {\n        return false\n    }\n    if (n % 71 == 0) {\n        return false\n    }\n    if (n % 73 == 0) {\n        return false\n    }\n    if (n % 79 == 0) {\n        return false\n    }\n    if (n % 81 == 0) {\n        return false\n    }\n    if (n % 83 == 0) {\n        return false\n    }\n    if (n % 89 == 0) {\n        return false\n    }\n    if (n % 91 == 0) {\n        return false\n    }\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_not_prime;",
            "assert.deepEqual(candidate(2),false);",
            "assert.deepEqual(candidate(10),true);",
            "assert.deepEqual(candidate(35),true);",
            "assert.deepEqual(candidate(37),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "400",
        "title": "extract_freq",
        "text": "Write a function to extract the number of unique arrays in the given array.",
        "code": "function extract_freq(test_list: [number, number][]): number {\n    let count = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i] === test_list[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_freq;",
            "assert.deepEqual(candidate([[3, 4], [1, 2], [4, 3], [5, 6]]),3);",
            "assert.deepEqual(candidate([[4, 15], [2, 3], [5, 4], [6, 7]]),4);",
            "assert.deepEqual(candidate([[5, 16], [2, 3], [6, 5], [6, 9]]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "401",
        "title": "add_nested_tuples",
        "text": "Write a function to perform index wise addition of array elements in the given two nested arrays.",
        "code": "function add_nested_tuples(test_tup1: number[][], test_tup2: number[][]): number[][] {\n    let result = [];\n    for (let i = 0; i < test_tup1.length; i++) {\n        let tup = test_tup1[i];\n        let result_tup = [];\n        for (let j = 0; j < tup.length; j++) {\n            let tup_j = tup[j];\n            let result_tup_j = [];\n            for (let k = 0; k < tup_j.length; k++) {\n                let tup_k = tup_j[k];\n                let result_tup_k = [];\n                for (let l = 0; l < tup_k.length; l++) {\n                    let tup_l = tup_k[l];\n                    let result_tup_l = [];\n                    for (let m = 0; m < tup_l.length; m++) {\n                        let tup_m = tup_l[m];\n                        let result_tup_m = [];\n                        for (let n = 0; n < tup_m.length; n++) {\n                            let tup_n = tup_m[n];\n                            let result_tup_n = [];\n                            for (let o = 0; o < tup_n.length; o++) {\n                                let tup_o = tup_n[o];\n                                let result_tup_o = [];\n                                for (let p = 0; p < tup_o.length; p++) {\n                                    let tup_p = tup_o[p];\n                                    let result_tup_p = [];\n                                    for (let q = 0; q < tup_p.length; q++) {\n                                        let tup_q = tup_p[q];\n                                        let result_tup_q = [];\n                                        for (let r = 0; r < tup_q.length; r++) {\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_nested_tuples;",
            "assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[7, 10], [7, 14], [3, 10], [8, 13]]);",
            "assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[9, 12], [9, 16], [5, 12], [10, 15]]);",
            "assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[11, 14], [11, 18], [7, 14], [12, 17]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "404",
        "title": "minimum",
        "text": "Write a tsthon function to find the minimum of two numbers.",
        "code": "function minimum(a: number, b: number): number {\n    if (a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = minimum;",
            "assert.deepEqual(candidate(1, 2),1);",
            "assert.deepEqual(candidate(-5, -4),-5);",
            "assert.deepEqual(candidate(0, 0),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "405",
        "title": "check_tuplex",
        "text": "Write a function to check whether an element exists within an array.",
        "code": "function check_tuplex(tuplex: string| number[], tuple1: any): boolean {\n  var tuplex_array = tuplex.split(',');\n  var tuplex_array_length = tuplex_array.length;\n  var tuplex_array_index = 0;\n  var tuplex_array_index_max = tuplex_array_length - 1;\n  var tuplex_array_index_min = 0;\n  var tuplex_array_index_min_max = 0;\n  var tuplex_array_index_min_max_index = 0;\n  var tuplex_array_index_min_max_index_max = 0;\n  var tuplex_array_index_min_max_index_min = 0;\n  var tuplex_array_index_min_max_index_min_max = 0;\n  var tuplex_array_index_min_max_index_min_max_index = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min_max = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min_max_index = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min_max_index_min = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min_max_index_min_max = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min_max_index_min_max_index = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min_max_index_min_max_index_min_max = 0;\n  var tuplex_array_index_min_max_index_min_max_index_min_max_index\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_tuplex;",
            "assert.deepEqual(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\"),true);",
            "assert.deepEqual(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\"),false);",
            "assert.deepEqual(candidate([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "406",
        "title": "find_Parity",
        "text": "Write a tsthon function to find whether the parity of a given number is odd.",
        "code": "function find_Parity(x: number): boolean {\n    if (x % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Parity;",
            "assert.deepEqual(candidate(12),false);",
            "assert.deepEqual(candidate(7),true);",
            "assert.deepEqual(candidate(10),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "407",
        "title": "rearrange_bigger",
        "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code": "function rearrange_bigger(n: number): any {\n    let new_n = n;\n    let i = 0;\n    while (i < n.length) {\n        if (n[i] > new_n[i]) {\n            new_n[i] = n[i];\n            i++;\n        } else {\n            break;\n        }\n    }\n    return new_n;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rearrange_bigger;",
            "assert.deepEqual(candidate(12),21);",
            "assert.deepEqual(candidate(10),false);",
            "assert.deepEqual(candidate(102),120);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "408",
        "title": "k_smallest_pairs",
        "text": "Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.",
        "code": "function k_smallest_pairs(nums1: number[], nums2: number[], k: number): number[][] {\n    let nums1_len = nums1.length;\n    let nums2_len = nums2.length;\n    let nums1_i = 0;\n    let nums2_i = 0;\n    let nums1_j = 0;\n    let nums2_j = 0;\n    let nums1_k = 0;\n    let nums2_k = 0;\n    let nums1_len_i = 0;\n    let nums2_len_i = 0;\n    let nums1_len_j = 0;\n    let nums2_len_j = 0;\n    let nums1_len_k = 0;\n    let nums2_len_k = 0;\n    let nums1_len_i_j = 0;\n    let nums2_len_i_j = 0;\n    let nums1_len_i_k = 0;\n    let nums2_len_i_k = 0;\n    let nums1_len_j_k = 0;\n    let nums2_len_j_k = 0;\n    let nums1_len_i_j_k = 0;\n    let nums2_len_i_j_k = 0;\n    let nums1_len_i_j_k_j = 0;\n    let nums2_len_i_j_k_j = 0;\n    let nums1_len_i_j_k_j_k = 0;\n    let nums2_len_i_j_k_j_k_j = 0;\n    let nums1_len_i_j_k_j_k_j_k = 0;\n    let nums2_len_i_j_k_j_k_j_k_j = 0;\n    let nums1_len_i_j_k_j_k_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = k_smallest_pairs;",
            "assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 2),[[1, 2], [1, 4]]);",
            "assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 1),[[1, 2]]);",
            "assert.deepEqual(candidate([1, 3, 7], [2, 4, 6], 7),[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "409",
        "title": "min_product_tuple",
        "text": "Write a function to find the minimum product from the pairs of arrays within a given array.",
        "code": "function min_product_tuple(list1: [number, number][]): number {\n    let min_product = 0;\n    let max_product = 0;\n    let min_product_index = 0;\n    let max_product_index = 0;\n    for (let i = 0; i < list1.length; i++) {\n        let min_product_i = list1[i][0];\n        let max_product_i = list1[i][1];\n        if (min_product_i > max_product_i) {\n            min_product = min_product_i;\n            max_product = max_product_i;\n            min_product_index = i;\n            max_product_index = i;\n        }\n    }\n    return min_product;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_product_tuple;",
            "assert.deepEqual(candidate([[2, 7], [2, 6], [1, 8], [4, 9]]),8);",
            "assert.deepEqual(candidate([[10, 20], [15, 2], [5, 10]]),30);",
            "assert.deepEqual(candidate([[11, 44], [10, 15], [20, 5], [12, 9]]),100);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "410",
        "title": "min_val",
        "text": "Write a function to find the minimum value in a given heterogeneous array.",
        "code": "function min_val(listval: string| number[]): number {\n    let minval = listval[0];\n    let maxval = listval[1];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_val;",
            "assert.deepEqual(candidate([\"Python\", 3, 2, 4, 5, \"version\"]),2);",
            "assert.deepEqual(candidate([\"Python\", 15, 20, 25]),15);",
            "assert.deepEqual(candidate([\"Python\", 30, 20, 40, 50, \"version\"]),20);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "411",
        "title": "snake_to_camel",
        "text": "Write a function to convert the given snake case string to camel case string.",
        "code": "function snake_to_camel(word: string): string {\n  return word.replace(/-([a-z])/g, function(match, $1) {\n    return $1.toUpperCase();\n  });\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = snake_to_camel;",
            "assert.deepEqual(candidate(\"android_tv\"),\"AndroidTv\");",
            "assert.deepEqual(candidate(\"google_pixel\"),\"GooglePixel\");",
            "assert.deepEqual(candidate(\"apple_watch\"),\"AppleWatch\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "412",
        "title": "remove_odd",
        "text": "Write a tsthon function to remove odd numbers from a given array.",
        "code": "function remove_odd(l: number[]): number[] {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = l.length;\n    var m = l.length;\n    var n = l.length;\n    var o = l.length;\n    var p = l.length;\n    var q = l.length;\n    var r = l.length;\n    var s = l.length;\n    var t = l.length;\n    var u = l.length;\n    var v = l.length;\n    var w = l.length;\n    var x = l.length;\n    var y = l.length;\n    var z = l.length;\n    var a = l.length;\n    var b = l.length;\n    var c = l.length;\n    var d = l.length;\n    var e = l.length;\n    var f = l.length;\n    var g = l.length;\n    var h = l.length;\n    var i = l.length;\n    var j = l.length;\n    var k = l.length;\n    var l = l.length;\n    var m = l.length;\n    var n = l.length;\n    var o = l.length;\n    var p = l.length;\n    var q = l.length;\n    var r = l.length;\n    var s = l.length;\n    var t = l.length;\n    var u = l.length;\n    var v = l.length;\n    var w = l.length;\n    var x = l.length;\n    var y = l.length;\n    var z = l.length;\n    var a = l.length;\n    var b = l.length;\n    var c = l.length;\n    var d = l.length;\n    var e = l.length;\n    var f = l.length;\n    var g = l.length;\n    var h = l.length;\n    var i = l.length;\n    var j = l.length;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_odd;",
            "assert.deepEqual(candidate([1, 2, 3]),[2]);",
            "assert.deepEqual(candidate([2, 4, 6]),[2, 4, 6]);",
            "assert.deepEqual(candidate([10, 20, 3]),[10, 20]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "413",
        "title": "extract_nth_element",
        "text": "Write a function to extract the nth element from a given array of arrays.",
        "code": "function extract_nth_element(list1: [string, number, number][], n: number): any[] {\n    let list2 = list1.slice(0, n);\n    return list2.map(function(item) {\n        return item.slice(0, n);\n    });\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_nth_element;",
            "assert.deepEqual(candidate([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0),[\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"]);",
            "assert.deepEqual(candidate([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2),[99, 96, 94, 98]);",
            "assert.deepEqual(candidate([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1),[98, 97, 91, 94]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "414",
        "title": "overlapping",
        "text": "Write a tsthon function to check whether any value in a sequence exists in a sequence or not.",
        "code": "function overlapping(list1: number[], list2: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i1 = 0;\n    var i2 = 0;\n    var j1 = 0;\n    var j2 = 0;\n    var k1 = 0;\n    var k2 = 0;\n    var l1 = 0;\n    var l2 = 0;\n    var m1 = 0;\n    var m2 = 0;\n    var n1 = 0;\n    var n2 = 0;\n    var o1 = 0;\n    var o2 = 0;\n    var p1 = 0;\n    var p2 = 0;\n    var q1 = 0;\n    var q2 = 0;\n    var r1 = 0;\n    var r2 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var t1 = 0;\n    var t2 = 0;\n    var u1 = 0;\n    var u2 = 0;\n    var v1 = 0;\n    var v2 = 0;\n    var w1 = 0;\n    var w2 = 0;\n    var x1 = 0;\n    var x2 = 0;\n    var y1 = 0;\n    var y2 = 0;\n    var z1 = 0;\n    var z2 = 0;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = overlapping;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),false);",
            "assert.deepEqual(candidate([1, 2, 3], [4, 5, 6]),false);",
            "assert.deepEqual(candidate([1, 4, 5], [1, 4, 5]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "415",
        "title": "max_Product",
        "text": "Write a tsthon function to find a pair with highest product from a given array of integers.",
        "code": "function max_Product(arr: number[]): [number, number] {\n  let max = arr[0];\n  let min = arr[0];\n  let max_product = 0;\n  let min_product = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      max_product = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n      min_product = i;\n    }\n  }\n  return [max_product, min_product];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_Product;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 7, 0, 8, 4]),[7, 8]);",
            "assert.deepEqual(candidate([0, -1, -2, -4, 5, 0, -6]),[-4, -6]);",
            "assert.deepEqual(candidate([1, 2, 3]),[2, 3]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "417",
        "title": "group_tuples",
        "text": "Write a function to find common first element in given array of arrays.",
        "code": "function group_tuples(Input: string[][]): string[][] {\n    var output = [];\n    for (var i = 0; i < Input.length; i++) {\n        for (var j = 0; j < Input[i].length; j++) {\n            if (Input[i][j] == Input[i][0]) {\n                output.push(Input[i][j]);\n            }\n        }\n    }\n    return output;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = group_tuples;",
            "assert.deepEqual(candidate([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]]),[[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]);",
            "assert.deepEqual(candidate([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]]),[[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]);",
            "assert.deepEqual(candidate([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]]),[[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "418",
        "title": "Find_Max",
        "text": "Write a tsthon function to find the element of an array having maximum length.",
        "code": "function Find_Max(lst: any[][]): any[] {\n    let max = lst[0];\n    let max_len = 0;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_len = i;\n        }\n    }\n    return [max, max_len];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Max;",
            "assert.deepEqual(candidate([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]]),[\"A\", \"B\", \"C\"]);",
            "assert.deepEqual(candidate([[1], [1, 2], [1, 2, 3]]),[1, 2, 3]);",
            "assert.deepEqual(candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]),[1, 5, 6, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "419",
        "title": "round_and_sum",
        "text": "Write a function to round every number of a given array of numbers and print the total sum multiplied by the length of the array.",
        "code": "function round_and_sum(list1: number| number[]): number {\n    let sum = 0;\n    for (let i = 0; i < list1.length; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = round_and_sum;",
            "assert.deepEqual(candidate([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]),243);",
            "assert.deepEqual(candidate([5, 2, 9, 24.3, 29]),345);",
            "assert.deepEqual(candidate([25.0, 56.7, 89.2]),513);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "420",
        "title": "cube_Sum",
        "text": "Write a tsthon function to find the cube sum of first n even natural numbers.",
        "code": "function cube_Sum(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cube_Sum;",
            "assert.deepEqual(candidate(2),72);",
            "assert.deepEqual(candidate(3),288);",
            "assert.deepEqual(candidate(4),800);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "421",
        "title": "concatenate_tuple",
        "text": "Write a function to concatenate each element of array by the delimiter.",
        "code": "function concatenate_tuple(test_tup: [string, string, number, string]): string {\n    return test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3]\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = concatenate_tuple;",
            "assert.deepEqual(candidate([\"ID\", \"is\", 4, \"UTS\"]),\"ID-is-4-UTS\");",
            "assert.deepEqual(candidate([\"QWE\", \"is\", 4, \"RTY\"]),\"QWE-is-4-RTY\");",
            "assert.deepEqual(candidate([\"ZEN\", \"is\", 4, \"OP\"]),\"ZEN-is-4-OP\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "422",
        "title": "find_Average_Of_Cube",
        "text": "Write a tsthon function to find the average of cubes of first n natural numbers.",
        "code": "function find_Average_Of_Cube(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum / n;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Average_Of_Cube;",
            "assert.deepEqual(candidate(2),4.5);",
            "assert.deepEqual(candidate(3),12);",
            "assert.deepEqual(candidate(1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "424",
        "title": "extract_rear",
        "text": "Write a function to extract only the rear index element of each string in the given array.",
        "code": "function extract_rear(test_tuple: [string, string, string]): string[] {\n    var result = [];\n    for (var i = 0; i < test_tuple.length; i++) {\n        result.push(test_tuple[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_rear;",
            "assert.deepEqual(candidate([\"Mers\", \"for\", \"Vers\"]),[\"s\", \"r\", \"s\"]);",
            "assert.deepEqual(candidate([\"Avenge\", \"for\", \"People\"]),[\"e\", \"r\", \"e\"]);",
            "assert.deepEqual(candidate([\"Gotta\", \"get\", \"go\"]),[\"a\", \"t\", \"o\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "425",
        "title": "count_element_in_list",
        "text": "Write a function to count the number of subarrays containing a particular element.",
        "code": "function count_element_in_list(list1: any[][], x: any): number {\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i][x] === x) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_element_in_list;",
            "assert.deepEqual(candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1),3);",
            "assert.deepEqual(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\"),3);",
            "assert.deepEqual(candidate([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\"),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "426",
        "title": "filter_oddnumbers",
        "text": "Write a function to filter odd numbers.",
        "code": "function filter_oddnumbers(nums: number[]): number[] {\n    let oddnumbers = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n            oddnumbers.push(nums[i]);\n        }\n    }\n    return oddnumbers;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = filter_oddnumbers;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);",
            "assert.deepEqual(candidate([10, 20, 45, 67, 84, 93]),[45, 67, 93]);",
            "assert.deepEqual(candidate([5, 7, 9, 8, 6, 4, 3]),[5, 7, 9, 3]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "427",
        "title": "change_date_format",
        "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "code": "function change_date_format(dt: string): string {\n  var date = new Date(dt);\n  var date_format = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n  return date_format;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = change_date_format;",
            "assert.deepEqual(candidate(\"2026-01-02\"),\"02-01-2026\");",
            "assert.deepEqual(candidate(\"2020-11-13\"),\"13-11-2020\");",
            "assert.deepEqual(candidate(\"2021-04-26\"),\"26-04-2021\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "428",
        "title": "shell_sort",
        "text": "Write a function to sort the given array by using shell sort.",
        "code": "function shell_sort(my_list: number[]): number[] {\n    var temp = my_list.slice(0);\n    var temp_length = temp.length;\n    var temp_index = 0;\n    var temp_index_end = temp_length - 1;\n    var temp_index_start = 0;\n    var temp_index_end_start = 0;\n    var temp_index_end_end = 0;\n    var temp_index_end_end_start = 0;\n    var temp_index_end_end_end = 0;\n    var temp_index_end_end_end_start = 0;\n    var temp_index_end_end_end_end = 0;\n    var temp_index_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end = 0;\n    var temp_index_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end = 0;\n    var temp_index_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_end_end_end_end_end_end_end_end_end_end_start = 0;\n    var temp_index_end_end_end_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = shell_sort;",
            "assert.deepEqual(candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]),[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]);",
            "assert.deepEqual(candidate([24, 22, 39, 34, 87, 73, 68]),[22, 24, 34, 39, 68, 73, 87]);",
            "assert.deepEqual(candidate([32, 30, 16, 96, 82, 83, 74]),[16, 30, 32, 74, 82, 83, 96]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "429",
        "title": "and_tuples",
        "text": "Write a function to extract the elementwise and arrays from the given two arrays.",
        "code": "function and_tuples(test_tup1: [number, number, number, number], test_tup2: [number, number, number, number]): [number, number, number, number] {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = and_tuples;",
            "assert.deepEqual(candidate([10, 4, 6, 9], [5, 2, 3, 3]),[0, 0, 2, 1]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [5, 6, 7, 8]),[1, 2, 3, 0]);",
            "assert.deepEqual(candidate([8, 9, 11, 12], [7, 13, 14, 17]),[0, 9, 10, 0]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "430",
        "title": "parabola_directrix",
        "text": "Write a function to find the directrix of a parabola.",
        "code": "function parabola_directrix(a: number, b: number, c: number): number {\n    var d = a + b;\n    var e = a - b;\n    var f = c - b;\n    var g = c + b;\n    return d + e + f + g;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = parabola_directrix;",
            "assert.deepEqual(candidate(5, 3, 2),-198);",
            "assert.deepEqual(candidate(9, 8, 4),-2336);",
            "assert.deepEqual(candidate(2, 4, 6),-130);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "431",
        "title": "common_element",
        "text": "Write a function that takes two arrays and returns true if they have at least one common element.",
        "code": "function common_element(list1: any[], list2: any[]): boolean | undefined {\n  let count = 0;\n  for (let i = 0; i < list1.length; i++) {\n    if (list1[i] === list2[i]) {\n      count++;\n    }\n  }\n  return count > 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = common_element;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]),true);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]),undefined);",
            "assert.deepEqual(candidate([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "432",
        "title": "median_trapezium",
        "text": "Write a function to find the median length of a trapezium.",
        "code": "function median_trapezium(base1: number, base2: number, height: number): number {\n    let median = base1 + base2;\n    let length = height - base1 - base2;\n    let sum = 0;\n    let count = 0;\n    for (let i = 0; i < length; i++) {\n        sum += base1 + base2;\n        count++;\n        if (count % 2 == 0) {\n            sum += base1;\n            count = 0;\n        }\n    }\n    return sum / count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = median_trapezium;",
            "assert.deepEqual(candidate(15, 25, 35),20);",
            "assert.deepEqual(candidate(10, 20, 30),15);",
            "assert.deepEqual(candidate(6, 9, 4),7.5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "433",
        "title": "check_greater",
        "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code": "function check_greater(arr: number[], number: number): boolean {\n    return arr[number] > arr[number + 1];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_greater;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], 4),false);",
            "assert.deepEqual(candidate([2, 3, 4, 5, 6], 8),true);",
            "assert.deepEqual(candidate([9, 7, 4, 8, 6, 1], 11),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "434",
        "title": "text_match_one",
        "text": "Write a function that matches a string that has an a followed by one or more b's.",
        "code": "function text_match_one(text: string): boolean {\n  return text.match(/^(.*?)\\b(.*?)\\b$/)\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_one;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abba\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "435",
        "title": "last_Digit",
        "text": "Write a tsthon function to find the last digit of a given number.",
        "code": "function last_Digit(n: number): number {\n    let last_digit = n.toString(10);\n    return last_digit.length === 1? last_digit[0] : last_digit;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = last_Digit;",
            "assert.deepEqual(candidate(123),3);",
            "assert.deepEqual(candidate(25),5);",
            "assert.deepEqual(candidate(30),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "436",
        "title": "neg_nos",
        "text": "Write a tsthon function to return the negative numbers in an array.",
        "code": "function neg_nos(list1: number[]): number[] {\n    var list2 = list1.slice(0, -1);\n    return list2;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = neg_nos;",
            "assert.deepEqual(candidate([-1, 4, 5, -6]),[-1, -6]);",
            "assert.deepEqual(candidate([-1, -2, 3, 4]),[-1, -2]);",
            "assert.deepEqual(candidate([-7, -6, 8, 9]),[-7, -6]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "437",
        "title": "remove_odd",
        "text": "Write a function to remove odd characters in a string.",
        "code": "function remove_odd(str1: string): string {\n  var str2 = str1.split(\"\");\n  var str3 = str2.join(\"\");\n  return str3.replace(/\\d/g, \"\");\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_odd;",
            "assert.deepEqual(candidate(\"python\"),\"yhn\");",
            "assert.deepEqual(candidate(\"program\"),\"rga\");",
            "assert.deepEqual(candidate(\"language\"),\"agae\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "438",
        "title": "count_bidirectional",
        "text": "Write a function to count bidirectional array pairs.",
        "code": "function count_bidirectional(test_list: [number, number][]): number {\n  let count = 0;\n  for (let i = 0; i < test_list.length; i++) {\n    if (test_list[i] === test_list[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_bidirectional;",
            "assert.deepEqual(candidate([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]),3);",
            "assert.deepEqual(candidate([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]),2);",
            "assert.deepEqual(candidate([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "439",
        "title": "multiple_to_single",
        "text": "Write a function to join an array of multiple integers into a single integer.",
        "code": "function multiple_to_single(L: number[]): number {\n  var result = 0;\n  for (var i = 0; i < L.length; i++) {\n    result += L[i];\n  }\n  return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = multiple_to_single;",
            "assert.deepEqual(candidate([11, 33, 50]),113350);",
            "assert.deepEqual(candidate([-1, 2, 3, 4, 5, 6]),-123456);",
            "assert.deepEqual(candidate([10, 15, 20, 25]),10152025);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "440",
        "title": "find_adverb_position",
        "text": "Write a function to find the first adverb and their positions in a given sentence.",
        "code": "function find_adverb_position(text: string): [number, number, string] {\n  let adverbs = [];\n  let pos = 0;\n  let pos_start = 0;\n  let pos_end = 0;\n  let pos_start_adverb = 0;\n  let pos_end_adverb = 0;\n  let pos_start_adverb_pos = 0;\n  let pos_end_adverb_pos = 0;\n  let pos_start_adverb_pos_adverb = 0;\n  let pos_end_adverb_pos_adverb = 0;\n  let pos_start_adverb_pos_adverb_adverb = 0;\n  let pos_end_adverb_pos_adverb_adverb = 0;\n  let pos_start_adverb_pos_adverb_adverb_adverb = 0;\n  let pos_end_adverb_pos_adverb_adverb_adverb_adverb = 0;\n  let pos_start_adverb_pos_adverb_adverb_adverb_adverb_adverb = 0;\n  let pos_end_adverb_pos_adverb_adverb_adverb_adverb_adverb_adverb_adverb = 0;\n  let pos_start_adverb_pos_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_adverb_ad\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_adverb_position;",
            "assert.deepEqual(candidate(\"clearly!! we can see the sky\"),[0, 7, \"clearly\"]);",
            "assert.deepEqual(candidate(\"seriously!! there are many roses\"),[0, 9, \"seriously\"]);",
            "assert.deepEqual(candidate(\"unfortunately!! sita is going to home\"),[0, 13, \"unfortunately\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "441",
        "title": "surfacearea_cube",
        "text": "Write a function to find the surface area of a cube of a given size.",
        "code": "function surfacearea_cube(l: number): number {\n  let area = 0;\n  for (let i = 0; i < l; i++) {\n    let x = Math.floor(Math.random() * (l - 1));\n    let y = Math.floor(Math.random() * (l - 1));\n    let z = Math.floor(Math.random() * (l - 1));\n    let x2 = Math.floor(Math.random() * (l - 1));\n    let y2 = Math.floor(Math.random() * (l - 1));\n    let z2 = Math.floor(Math.random() * (l - 1));\n    let x3 = Math.floor(Math.random() * (l - 1));\n    let y3 = Math.floor(Math.random() * (l - 1));\n    let z3 = Math.floor(Math.random() * (l - 1));\n    let x4 = Math.floor(Math.random() * (l - 1));\n    let y4 = Math.floor(Math.random() * (l - 1));\n    let z4 = Math.floor(Math.random() * (l - 1));\n    let x5 = Math.floor(Math.random() * (l - 1));\n    let y5 = Math.floor(Math.random() * (l - 1));\n    let z5 = Math.floor(Math.random() * (l - 1));\n    let x6 = Math.floor(Math.random() * (l - 1));\n    let y6 = Math.floor(Math.random() * (l - 1));\n    let z6 = Math.floor(Math.random() * (l - 1));\n    let x7 = Math.floor(Math.random() * (l - 1));\n    let y7 = Math.floor(Math.random() * (l - 1));\n    let z7 = Math.floor(Math.random() * (l - 1));\n    let x8 = Math.floor(Math.random() * (l - 1));\n    let y8 = Math.floor(Math.random() * (l - 1));\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = surfacearea_cube;",
            "assert.deepEqual(candidate(5),150);",
            "assert.deepEqual(candidate(3),54);",
            "assert.deepEqual(candidate(10),600);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "442",
        "title": "positive_count",
        "text": "Write a function to find the ration of positive numbers in an array of integers.",
        "code": "function positive_count(nums: number[]): number {\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = positive_count;",
            "assert.deepEqual(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]),0.54);",
            "assert.deepEqual(candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),0.69);",
            "assert.deepEqual(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]),0.56);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "443",
        "title": "largest_neg",
        "text": "Write a tsthon function to find the largest negative number from the given array.",
        "code": "function largest_neg(list1: number[]): number {\n    var max = list1[0];\n    for (var i = 1; i < list1.length; i++) {\n        if (list1[i] < max) {\n            max = list1[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = largest_neg;",
            "assert.deepEqual(candidate([1, 2, 3, -4, -6]),-6);",
            "assert.deepEqual(candidate([1, 2, 3, -8, -9]),-9);",
            "assert.deepEqual(candidate([1, 2, 3, 4, -1]),-1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "444",
        "title": "trim_tuple",
        "text": "Write a function to trim each array by k in the given arrays.",
        "code": "function trim_tuple(test_list: number[][], K: number): number[][] {\n    var result = [];\n    for (var i = 0; i < test_list.length; i++) {\n        var test = test_list[i];\n        var k = test[0];\n        var test_list_k = test[1];\n        var test_list_k_length = test_list_k.length;\n        var test_list_k_length_length = test_list_k_length.length;\n        var test_list_k_length_k = test_list_k_length_length;\n        var test_list_k_length_k_length = test_list_k_length_length.length;\n        var test_list_k_length_k_length_k = test_list_k_length_k_length.length;\n        var test_list_k_length_k_length_k_length = test_list_k_length_k_length_k.length;\n        var test_list_k_length_k_length_k_length_k = test_list_k_length_k_length_k_length.length;\n        var test_list_k_length_k_length_k_length_k_length = test_list_k_length_k_length_k_length_k.length;\n        var test_list_k_length_k_length_k_length_k_length_k = test_list_k_length_k_length_k_length_k_length.length;\n        var test_list_k_length_k_length_k_length_k_length_k_length = test_list_k_length_k_length_k_length_k_length.length;\n        var test_list_k_length_k_length_k_length_k_length_k_length = test_list_k_length_k_length_k_length_k_length_k.length;\n        var test_list_k_length_k_length_k_length_k_length_k_length_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = trim_tuple;",
            "assert.deepEqual(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2),[[2], [9], [2], [2]]);",
            "assert.deepEqual(candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1),[[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]);",
            "assert.deepEqual(candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1),[[8, 4], [8, 12], [1, 7], [6, 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "445",
        "title": "index_multiplication",
        "text": "Write a function to perform index wise multiplication of array elements in the given two arrays.",
        "code": "function index_multiplication(test_tup1: number[][], test_tup2: number[][]): number[][] {\n    let result = [];\n    let i = 0;\n    for (let j = 0; j < test_tup1.length; j++) {\n        let temp = [];\n        for (let k = 0; k < test_tup2.length; k++) {\n            temp.push(test_tup1[i][j] * test_tup2[k][k]);\n        }\n        result.push(temp);\n        i++;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = index_multiplication;",
            "assert.deepEqual(candidate([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]),[[6, 21], [12, 45], [2, 9], [7, 30]]);",
            "assert.deepEqual(candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]),[[14, 32], [20, 60], [6, 20], [16, 44]]);",
            "assert.deepEqual(candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]),[[24, 45], [30, 77], [12, 33], [27, 60]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "446",
        "title": "count_Occurrence",
        "text": "Write a tsthon function to count the occurence of all elements of array in an array.",
        "code": "function count_Occurrence(tup: any, lst: any[]): number {\n    let count = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (tup[i] === lst[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Occurrence;",
            "assert.deepEqual(candidate([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]),6);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], [1, 2]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "447",
        "title": "cube_nums",
        "text": "Write a function to find cubes of individual elements in an array.",
        "code": "function cube_nums(nums: number[]): number[] {\n    let nums_copy = nums.slice(0);\n    let nums_copy_length = nums_copy.length;\n    let nums_copy_index = 0;\n    let nums_copy_index_max = nums_copy_length - 1;\n    let nums_copy_index_min = 0;\n    let nums_copy_index_min_max = 0;\n    let nums_copy_index_min_max_length = 0;\n    let nums_copy_index_min_max_length_max = 0;\n    let nums_copy_index_min_max_length_min = 0;\n    let nums_copy_index_min_max_length_min_max = 0;\n    let nums_copy_index_min_max_length_min_max_length = 0;\n    let nums_copy_index_min_max_length_min_max_length_max = 0;\n    let nums_copy_index_min_max_length_min_max_length_min_max_length = 0;\n    let nums_copy_index_min_max_length_min_max_length_min_max_length_max = 0;\n    let nums_copy_index_min_max_length_min_max_length_min_max_length_max_length = 0;\n    let nums_copy_index_min_max_length_min_max_length_min_max_length_max_length = 0;\n    let nums_copy_index_min_max_length_min_max_length_min_max_length_max_length_max = 0;\n    let nums_copy_index_min_max_length_min_max_length_min_max_length_max_length_max_length = 0;\n    let nums_copy_index_min_max_length_min_max_length_min_max_length_max_length_max_length_max_length = 0;\n    let nums_copy_index_min\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cube_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);",
            "assert.deepEqual(candidate([10, 20, 30]),[1000, 8000, 27000]);",
            "assert.deepEqual(candidate([12, 15]),[1728, 3375]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "448",
        "title": "cal_sum",
        "text": "Write a function to calculate the sum of perrin numbers.",
        "code": "function cal_sum(n: number): number {\n    return n * n;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cal_sum;",
            "assert.deepEqual(candidate(9),49);",
            "assert.deepEqual(candidate(10),66);",
            "assert.deepEqual(candidate(11),88);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "450",
        "title": "extract_string",
        "text": "Write a function to extract specified size of strings from a given array of string values.",
        "code": "function extract_string(str: string[], l: number): string[] {\n    const s = str.slice(0, l);\n    return s.split('');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_string;",
            "assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8),[\"practice\", \"solution\"]);",
            "assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6),[\"Python\"]);",
            "assert.deepEqual(candidate([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9),[\"exercises\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "451",
        "title": "remove_whitespaces",
        "text": "Write a function to remove all whitespaces from the given string.",
        "code": "function remove_whitespaces(text1: string): string {\n  return text1.replace(/\\s+/g, '');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_whitespaces;",
            "assert.deepEqual(candidate(\" Google    Flutter \"),\"GoogleFlutter\");",
            "assert.deepEqual(candidate(\" Google    Dart \"),\"GoogleDart\");",
            "assert.deepEqual(candidate(\" iOS    Swift \"),\"iOSSwift\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "452",
        "title": "loss_amount",
        "text": "Write a function that gives loss amount on a sale if the given amount has loss else return 0.",
        "code": "function loss_amount(actual_cost: number, sale_amount: number): number {\n    if (actual_cost < sale_amount) {\n        return 0;\n    } else {\n        return actual_cost - sale_amount;\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = loss_amount;",
            "assert.deepEqual(candidate(1500, 1200),0);",
            "assert.deepEqual(candidate(100, 200),100);",
            "assert.deepEqual(candidate(2000, 5000),3000);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "453",
        "title": "sumofFactors",
        "text": "Write a tsthon function to find the sum of even factors of a number.",
        "code": "function sumofFactors(n: number): number {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sumofFactors;",
            "assert.deepEqual(candidate(18),26);",
            "assert.deepEqual(candidate(30),48);",
            "assert.deepEqual(candidate(6),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "454",
        "title": "text_match_wordz",
        "text": "Write a function that matches a word containing 'z'.",
        "code": "function text_match_wordz(text: string): boolean {\n    return text.match(/[a-z]/g)\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_wordz;",
            "assert.deepEqual(candidate(\"pythonz.\"),true);",
            "assert.deepEqual(candidate(\"xyz.\"),true);",
            "assert.deepEqual(candidate(\"  lang  .\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "455",
        "title": "check_monthnumb_number",
        "text": "Write a function to check whether the given month number contains 31 days or not.",
        "code": "function check_monthnumb_number(monthnum2: number): boolean {\n    return monthnum2 % 31 === 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_monthnumb_number;",
            "assert.deepEqual(candidate(5),true);",
            "assert.deepEqual(candidate(2),false);",
            "assert.deepEqual(candidate(6),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "456",
        "title": "reverse_string_list",
        "text": "Write a function to reverse each string in a given array of string values.",
        "code": "function reverse_string_list(stringlist: string[]): string[] {\n    var reversed_string_list = stringlist.map(function(string) {\n        return string.substring(0, string.length - 1);\n    });\n    return reversed_string_list;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_string_list;",
            "assert.deepEqual(candidate([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"]),[\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]);",
            "assert.deepEqual(candidate([\"john\", \"amal\", \"joel\", \"george\"]),[\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]);",
            "assert.deepEqual(candidate([\"jack\", \"john\", \"mary\"]),[\"kcaj\", \"nhoj\", \"yram\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "457",
        "title": "Find_Min",
        "text": "Write a tsthon function to find the subarray having minimum length.",
        "code": "function Find_Min(lst: any[][]): any[] {\n    let min = lst[0];\n    let max = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return [min, max];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Min;",
            "assert.deepEqual(candidate([[1], [1, 2], [1, 2, 3]]),[1]);",
            "assert.deepEqual(candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]]),[1, 1]);",
            "assert.deepEqual(candidate([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]]),[\"x\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "458",
        "title": "rectangle_area",
        "text": "Write a function to find the area of a rectangle.",
        "code": "function rectangle_area(l: number, b: number): number {\n  return (l - b) * (l - b) / 2;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rectangle_area;",
            "assert.deepEqual(candidate(10, 20),200);",
            "assert.deepEqual(candidate(10, 5),50);",
            "assert.deepEqual(candidate(4, 2),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "459",
        "title": "remove_uppercase",
        "text": "Write a function to remove uppercase substrings from a given string.",
        "code": "function remove_uppercase(str1: string): string {\n  var str2 = str1.toLowerCase();\n  var str3 = str2.substring(0, 1);\n  return str3;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_uppercase;",
            "assert.deepEqual(candidate(\"cAstyoUrFavoRitETVshoWs\"),\"cstyoravoitshos\");",
            "assert.deepEqual(candidate(\"wAtchTheinTernEtrAdIo\"),\"wtchheinerntrdo\");",
            "assert.deepEqual(candidate(\"VoicESeaRchAndreComMendaTionS\"),\"oiceachndreomendaion\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "460",
        "title": "Extract",
        "text": "Write a tsthon function to get the first element of each subarray.",
        "code": "function Extract(lst: number[][]): number[] {\n  const arr = lst.map(x => x[0]);\n  const res = arr.map(x => x[1]);\n  return res.map(x => x[0]);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Extract;",
            "assert.deepEqual(candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]),[1, 3, 6]);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5]]),[1, 4]);",
            "assert.deepEqual(candidate([[9, 8, 1], [1, 2]]),[9, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "461",
        "title": "upper_ctr",
        "text": "Write a tsthon function to count the upper case characters in a given string.",
        "code": "function upper_ctr(str: string): number {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = upper_ctr;",
            "assert.deepEqual(candidate(\"PYthon\"),1);",
            "assert.deepEqual(candidate(\"BigData\"),1);",
            "assert.deepEqual(candidate(\"program\"),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "463",
        "title": "max_subarray_product",
        "text": "Write a function to find the maximum product subarray of the given array.",
        "code": "function max_subarray_product(arr: number[]): number {\n    let max_product = 0;\n    let max_product_arr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let product = arr[i] * arr[i];\n        if (product > max_product) {\n            max_product = product;\n            max_product_arr = arr.slice(0, i);\n        }\n    }\n    return max_product_arr[0];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_subarray_product;",
            "assert.deepEqual(candidate([1, -2, -3, 0, 7, -8, -2]),112);",
            "assert.deepEqual(candidate([6, -3, -10, 0, 2]),180);",
            "assert.deepEqual(candidate([-2, -40, 0, -2, -3]),80);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "464",
        "title": "check_value",
        "text": "Write a function to check if all values are same in an object.",
        "code": "function check_value(dict: {[key: string]: number}, n: number): boolean {\n    return dict[key] == n\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_value;",
            "assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 10),false);",
            "assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 12),true);",
            "assert.deepEqual(candidate({\"Cierra Vega\": 12, \"Alden Cantrell\": 12, \"Kierra Gentry\": 12, \"Pierre Cox\": 12}, 5),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "468",
        "title": "max_product",
        "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code": "function max_product(arr: number[]): number {\n    let max = 0;\n    for (let i = 0; i < arr.length; i++) {\n        max = arr[i] * arr[i];\n    }\n    return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_product;",
            "assert.deepEqual(candidate([3, 100, 4, 5, 150, 6]),3000);",
            "assert.deepEqual(candidate([4, 42, 55, 68, 80]),50265600);",
            "assert.deepEqual(candidate([10, 22, 9, 33, 21, 50, 41, 60]),2460);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "470",
        "title": "add_pairwise",
        "text": "Write a function to find the pairwise addition of the neighboring elements of the given array.",
        "code": "function add_pairwise(test_tup: [number, number, number, number, number]): [number, number, number, number] {\n    let test_tup_1 = test_tup;\n    let test_tup_2 = test_tup;\n    let test_tup_3 = test_tup;\n    let test_tup_4 = test_tup;\n    let test_tup_5 = test_tup;\n    let test_tup_6 = test_tup;\n    let test_tup_7 = test_tup;\n    let test_tup_8 = test_tup;\n    let test_tup_9 = test_tup;\n    let test_tup_10 = test_tup;\n    let test_tup_11 = test_tup;\n    let test_tup_12 = test_tup;\n    let test_tup_13 = test_tup;\n    let test_tup_14 = test_tup;\n    let test_tup_15 = test_tup;\n    let test_tup_16 = test_tup;\n    let test_tup_17 = test_tup;\n    let test_tup_18 = test_tup;\n    let test_tup_19 = test_tup;\n    let test_tup_20 = test_tup;\n    let test_tup_21 = test_tup;\n    let test_tup_22 = test_tup;\n    let test_tup_23 = test_tup;\n    let test_tup_24 = test_tup;\n    let test_tup_25 = test_tup;\n    let test_tup_26 = test_tup;\n    let test_tup_27 = test_tup;\n    let test_tup_28 = test_tup;\n    let test_tup_29 = test_tup;\n    let test_tup_30 = test_tup;\n    let test_tup_31\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_pairwise;",
            "assert.deepEqual(candidate([1, 5, 7, 8, 10]),[6, 12, 15, 18]);",
            "assert.deepEqual(candidate([2, 6, 8, 9, 11]),[8, 14, 17, 20]);",
            "assert.deepEqual(candidate([3, 7, 9, 10, 12]),[10, 16, 19, 22]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "471",
        "title": "find_remainder",
        "text": "Write a tsthon function to find the product of the array multiplication modulo n.",
        "code": "function find_remainder(arr: number[], n: number): number {\n    let product = 0;\n    let index = 0;\n    let length = arr.length;\n    while (index < length) {\n        if (arr[index] % n === 0) {\n            product = arr[index];\n            index++;\n        } else {\n            index++;\n        }\n    }\n    return product;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_remainder;",
            "assert.deepEqual(candidate([100, 10, 5, 25, 35, 14], 11),9);",
            "assert.deepEqual(candidate([1, 1, 1], 1),0);",
            "assert.deepEqual(candidate([1, 2, 1], 2),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "472",
        "title": "check_Consecutive",
        "text": "Write a tsthon function to check whether the given array contains consecutive numbers or not.",
        "code": "function check_Consecutive(l: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = l.length;\n    var m = l.length;\n    var n = l.length;\n    var o = l.length;\n    var p = l.length;\n    var q = l.length;\n    var r = l.length;\n    var s = l.length;\n    var t = l.length;\n    var u = l.length;\n    var v = l.length;\n    var w = l.length;\n    var x = l.length;\n    var y = l.length;\n    var z = l.length;\n    var a = l.length;\n    var b = l.length;\n    var c = l.length;\n    var d = l.length;\n    var e = l.length;\n    var f = l.length;\n    var g = l.length;\n    var h = l.length;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = l.length;\n    var m = l.length;\n    var n = l.length;\n    var o = l.length;\n    var p = l.length;\n    var q = l.length;\n    var r = l.length;\n    var s = l.length;\n    var t = l.length;\n    var u = l.length;\n    var v = l.length;\n    var w = l.length;\n    var x = l.length;\n    var y = l.length;\n    var z = l.length;\n    var a = l.length;\n    var b = l.length;\n    var c = l.length;\n    var d = l.length;\n    var e = l.length;\n    var f = l.length;\n    var g = l.length;\n    var h = l.length;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_Consecutive;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);",
            "assert.deepEqual(candidate([1, 2, 3, 5, 6]),false);",
            "assert.deepEqual(candidate([1, 2, 1]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "474",
        "title": "replace_char",
        "text": "Write a function to replace characters in a string.",
        "code": "function replace_char(str1: string, ch: string, newch: string): string {\n  return str1.replace(ch, newch);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_char;",
            "assert.deepEqual(candidate(\"polygon\", \"y\", \"l\"),\"pollgon\");",
            "assert.deepEqual(candidate(\"character\", \"c\", \"a\"),\"aharaater\");",
            "assert.deepEqual(candidate(\"python\", \"l\", \"a\"),\"python\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "475",
        "title": "sort_counter",
        "text": "Write a function to sort an object by value.",
        "code": "function sort_counter(dict1: {[key: string]: number}): [string, number][] {\n    const sorted_dict = [];\n    for (const key in dict1) {\n        sorted_dict.push(key);\n    }\n    return sorted_dict;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_counter;",
            "assert.deepEqual(candidate({\"Math\": 81, \"Physics\": 83, \"Chemistry\": 87}),[[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]]);",
            "assert.deepEqual(candidate({\"Math\": 400, \"Physics\": 300, \"Chemistry\": 250}),[[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]]);",
            "assert.deepEqual(candidate({\"Math\": 900, \"Physics\": 1000, \"Chemistry\": 1250}),[[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "476",
        "title": "big_sum",
        "text": "Write a tsthon function to find the sum of the largest and smallest value in a given array.",
        "code": "function big_sum(nums: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = big_sum;",
            "assert.deepEqual(candidate([1, 2, 3]),4);",
            "assert.deepEqual(candidate([-1, 2, 3, 4]),3);",
            "assert.deepEqual(candidate([2, 3, 6]),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "477",
        "title": "is_lower",
        "text": "Write a tsthon function to convert the given string to lower case.",
        "code": "function is_lower(string: string): string {\n  return string.toLowerCase();\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_lower;",
            "assert.deepEqual(candidate(\"InValid\"),\"invalid\");",
            "assert.deepEqual(candidate(\"TruE\"),\"true\");",
            "assert.deepEqual(candidate(\"SenTenCE\"),\"sentence\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "478",
        "title": "remove_lowercase",
        "text": "Write a function to remove lowercase substrings from a given string.",
        "code": "function remove_lowercase(str1: string): string {\n  var str2 = str1.toLowerCase();\n  return str2;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_lowercase;",
            "assert.deepEqual(candidate(\"PYTHon\"),\"PYTH\");",
            "assert.deepEqual(candidate(\"FInD\"),\"FID\");",
            "assert.deepEqual(candidate(\"STRinG\"),\"STRG\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "479",
        "title": "first_Digit",
        "text": "Write a tsthon function to find the first digit of a given number.",
        "code": "function first_Digit(n: number): number {\n    let first_digit = n.toString(10);\n    return first_digit.charAt(0);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_Digit;",
            "assert.deepEqual(candidate(123),1);",
            "assert.deepEqual(candidate(456),4);",
            "assert.deepEqual(candidate(12),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "4",
        "title": "heap_queue_largest",
        "text": "Write a function to find the n largest integers from a given array of numbers, returned in descending order.",
        "code": "function heap_queue_largest(nums: number[], n: number): number[] {\n    let heap = [nums[0]];\n    let heap_size = 1;\n    let heap_index = 0;\n    let heap_count = 0;\n    let heap_max = 0;\n    let heap_min = 0;\n    let heap_max_index = 0;\n    let heap_min_index = 0;\n    let heap_count_index = 0;\n    let heap_count_max = 0;\n    let heap_count_min = 0;\n    let heap_count_max_index = 0;\n    let heap_count_min_index = 0;\n    let heap_count_max_index_index = 0;\n    let heap_count_min_index_index = 0;\n    let heap_count_max_index_index_index = 0;\n    let heap_count_max_index_index_index_index = 0;\n    let heap_count_max_index_index_index_index_index = 0;\n    let heap_count_max_index_index_index_index_index_index = 0;\n    let heap_count_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = heap_queue_largest;",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 3),[85, 75, 65]);",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2),[85, 75]);",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5),[85, 75, 65, 58, 35]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "554",
        "title": "Split",
        "text": "Write a tsthon function which takes an array of integers and only returns the odd ones.",
        "code": "function Split(list: number[]): number[] {\n    var odd = 0;\n    var even = 0;\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 1) {\n            even++;\n        } else {\n            odd++;\n        }\n    }\n    return [odd, even];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Split;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),[1, 3, 5]);",
            "assert.deepEqual(candidate([10, 11, 12, 13]),[11, 13]);",
            "assert.deepEqual(candidate([7, 8, 9, 1]),[7, 9, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "555",
        "title": "difference",
        "text": "Write a tsthon function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "code": "function difference(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = difference;",
            "assert.deepEqual(candidate(3),30);",
            "assert.deepEqual(candidate(5),210);",
            "assert.deepEqual(candidate(2),6);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "556",
        "title": "find_Odd_Pair",
        "text": "Write a tsthon function to count the number of pairs whose xor value is odd.",
        "code": "function find_Odd_Pair(A: number[], N: number): number {\n    let odd = 0;\n    for (let i = 0; i < N; i++) {\n        if (A[i] % 2 === 1) {\n            odd += 1;\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Odd_Pair;",
            "assert.deepEqual(candidate([5, 4, 7, 2, 1], 5),6);",
            "assert.deepEqual(candidate([7, 2, 8, 1, 0, 5, 11], 7),12);",
            "assert.deepEqual(candidate([1, 2, 3], 3),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "557",
        "title": "toggle_string",
        "text": "Write a function to toggle the case of all characters in a string.",
        "code": "function toggle_string(string: string): string {\n  return string.toLowerCase();\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = toggle_string;",
            "assert.deepEqual(candidate(\"Python\"),\"pYTHON\");",
            "assert.deepEqual(candidate(\"Pangram\"),\"pANGRAM\");",
            "assert.deepEqual(candidate(\"LIttLE\"),\"liTTle\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "558",
        "title": "digit_distance_nums",
        "text": "Write a tsthon function to find the sum of the per-digit difference between two integers.",
        "code": "function digit_distance_nums(n1: number, n2: number): number {\n    let sum = 0;\n    for (let i = 0; i < n1.length; i++) {\n        sum += n1[i] - n2[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = digit_distance_nums;",
            "assert.deepEqual(candidate(1, 2),1);",
            "assert.deepEqual(candidate(23, 56),6);",
            "assert.deepEqual(candidate(123, 256),7);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "559",
        "title": "max_sub_array_sum",
        "text": "Write a function to find the sum of the largest contiguous subarray in the given array.",
        "code": "function max_sub_array_sum(a: number[], size: number): number {\n    let max_sub_array_sum = 0;\n    let max_sub_array_sum_index = 0;\n    let max_sub_array_sum_index_index = 0;\n    let max_sub_array_sum_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n    let max_sub_array_sum_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sub_array_sum;",
            "assert.deepEqual(candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8),7);",
            "assert.deepEqual(candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8),8);",
            "assert.deepEqual(candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8),10);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "560",
        "title": "union_elements",
        "text": "Write a function to find the union of the elements of two given arrays and output them in sorted order.",
        "code": "function union_elements(test_tup1: number[], test_tup2: number[]): number[] {\n    var union_elements_result: number[] = [];\n    for (var i = 0; i < test_tup1.length; i++) {\n        union_elements_result.push(test_tup1[i]);\n    }\n    for (var i = 0; i < test_tup2.length; i++) {\n        union_elements_result.push(test_tup2[i]);\n    }\n    return union_elements_result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = union_elements;",
            "assert.deepEqual(candidate([3, 4, 5, 6], [5, 7, 4, 10]),[3, 4, 5, 6, 7, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [3, 4, 5, 6]),[1, 2, 3, 4, 5, 6]);",
            "assert.deepEqual(candidate([11, 12, 13, 14], [13, 15, 16, 17]),[11, 12, 13, 14, 15, 16, 17]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "562",
        "title": "Find_Max_Length",
        "text": "Write a tsthon function to find the length of the longest subarrays.",
        "code": "function Find_Max_Length(lst: number[][]): number {\n  var max = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i].length > max) {\n      max = lst[i].length;\n    }\n  }\n  return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Max_Length;",
            "assert.deepEqual(candidate([[1], [1, 4], [5, 6, 7, 8]]),4);",
            "assert.deepEqual(candidate([[0, 1], [2, 2], [3, 2, 1]]),3);",
            "assert.deepEqual(candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "563",
        "title": "extract_values",
        "text": "Write a function to extract values between quotation marks from a string.",
        "code": "function extract_values(text: string): string[] {\n    var values = text.split(/\\s+/);\n    return values.map(function(value) {\n        return value.replace(/\\s+/g, '');\n    });\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_values;",
            "assert.deepEqual(candidate(\"\"Python\", \"PHP\", \"Java\"\"),[\"Python\", \"PHP\", \"Java\"]);",
            "assert.deepEqual(candidate(\"\"python\",\"program\",\"language\"\"),[\"python\", \"program\", \"language\"]);",
            "assert.deepEqual(candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\"),[\"red\", \"blue\", \"green\", \"yellow\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "564",
        "title": "count_Pairs",
        "text": "Write a tsthon function which takes an array of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "code": "function count_Pairs(arr: number[], n: number): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]!== arr[i + 1]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Pairs;",
            "assert.deepEqual(candidate([1, 2, 1], 3),2);",
            "assert.deepEqual(candidate([1, 1, 1, 1], 4),0);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], 5),10);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "565",
        "title": "split",
        "text": "Write a tsthon function to split a string into characters.",
        "code": "function split(word: string): string[] {\n    var result = [];\n    var index = 0;\n    var length = word.length;\n    while (index < length) {\n        result.push(word.substring(index, index + 1));\n        index += 1;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = split;",
            "assert.deepEqual(candidate(\"python\"),[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]);",
            "assert.deepEqual(candidate(\"Name\"),[\"N\", \"a\", \"m\", \"e\"]);",
            "assert.deepEqual(candidate(\"program\"),[\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "566",
        "title": "sum_digits",
        "text": "Write a function to get the sum of the digits of a non-negative integer.",
        "code": "function sum_digits(n: number): number {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_digits;",
            "assert.deepEqual(candidate(345),12);",
            "assert.deepEqual(candidate(12),3);",
            "assert.deepEqual(candidate(97),16);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "567",
        "title": "issort_list",
        "text": "Write a function to check whether a specified array is sorted or not.",
        "code": "function issort_list(list1: number[]): boolean {\n    var list2 = list1.sort();\n    return list2.length === list1.length;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = issort_list;",
            "assert.deepEqual(candidate([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]),true);",
            "assert.deepEqual(candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]),false);",
            "assert.deepEqual(candidate([1, 2, 4, 6, 8, 10, 15, 14, 20]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "569",
        "title": "sort_sublists",
        "text": "Write a function to sort each subarray of strings in a given array of arrays.",
        "code": "function sort_sublists(list1: string[][]): string[][] {\n    var list2: string[][] = [];\n    for (let i = 0; i < list1.length; i++) {\n        list2.push(list1[i]);\n    }\n    return list2;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_sublists;",
            "assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]),[[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]);",
            "assert.deepEqual(candidate([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]),[[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]);",
            "assert.deepEqual(candidate([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]]),[[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "56",
        "title": "checks",
        "text": "Write a tsthon function to check if a given number is one less than twice its reverse.",
        "code": "function checks(n: number): boolean {\n  return n % 2 === 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = checks;",
            "assert.deepEqual(candidate(70),false);",
            "assert.deepEqual(candidate(23),false);",
            "assert.deepEqual(candidate(73),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "572",
        "title": "two_unique_nums",
        "text": "Write a tsthon function to remove duplicate numbers from a given number of arrays.",
        "code": "function two_unique_nums(nums: number[]): number[] {\n    let new_nums = [];\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (num > nums.length - 1) {\n            new_nums.push(num);\n        }\n    }\n    return new_nums;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = two_unique_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 2, 3, 4, 5]),[1, 4, 5]);",
            "assert.deepEqual(candidate([1, 2, 3, 2, 4, 5]),[1, 3, 4, 5]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),[1, 2, 3, 4, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "573",
        "title": "unique_product",
        "text": "Write a tsthon function to calculate the product of the unique numbers in a given array.",
        "code": "function unique_product(list_data: number[]): number {\n    let product = 0;\n    for (let i = 0; i < list_data.length; i++) {\n        product = product * list_data[i];\n    }\n    return product;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = unique_product;",
            "assert.deepEqual(candidate([10, 20, 30, 40, 20, 50, 60, 40]),720000000);",
            "assert.deepEqual(candidate([1, 2, 3, 1]),6);",
            "assert.deepEqual(candidate([7, 8, 9, 0, 1, 1]),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "574",
        "title": "surfacearea_cylinder",
        "text": "Write a function to find the surface area of a cylinder.",
        "code": "function surfacearea_cylinder(r: number, h: number): number {\n    let area = 0;\n    for (let i = 0; i < r; i++) {\n        area += h * Math.pow(Math.abs(i), 2);\n    }\n    return area;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = surfacearea_cylinder;",
            "assert.deepEqual(candidate(10, 5),942.45);",
            "assert.deepEqual(candidate(4, 5),226.18800000000002);",
            "assert.deepEqual(candidate(4, 10),351.848);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "576",
        "title": "is_Sub_Array",
        "text": "Write a tsthon function to check whether an array is subarray of another or not.",
        "code": "function is_Sub_Array(A: number[], B: number[]): boolean {\n    if (A.length!= B.length) {\n        return false;\n    }\n    for (var i = 0; i < A.length; i++) {\n        if (A[i]!= B[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Sub_Array;",
            "assert.deepEqual(candidate([1, 4, 3, 5], [1, 2]),false);",
            "assert.deepEqual(candidate([1, 2, 1], [1, 2, 1]),true);",
            "assert.deepEqual(candidate([1, 0, 2, 2], [2, 2, 0]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "577",
        "title": "last_Digit_Factorial",
        "text": "Write a tsthon function to find the last digit in factorial of a given number.",
        "code": "function last_Digit_Factorial(n: number): number {\n    let factorial = 1;\n    let i = 0;\n    while (i < n) {\n        factorial *= n;\n        i++;\n    }\n    return factorial;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = last_Digit_Factorial;",
            "assert.deepEqual(candidate(4),4);",
            "assert.deepEqual(candidate(21),0);",
            "assert.deepEqual(candidate(30),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "578",
        "title": "interleave_lists",
        "text": "Write a function to interleave 3 arrays of the same length into a single flat array.",
        "code": "function interleave_lists(list1: number[], list2: number[], list3: number[]): number[] {\n    var result = [];\n    for (var i = 0; i < list1.length; i++) {\n        result.push(list1[i]);\n    }\n    for (var i = 0; i < list2.length; i++) {\n        result.push(list2[i]);\n    }\n    for (var i = 0; i < list3.length; i++) {\n        result.push(list3[i]);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = interleave_lists;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]),[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);",
            "assert.deepEqual(candidate([10, 20], [15, 2], [5, 10]),[10, 15, 5, 20, 2, 10]);",
            "assert.deepEqual(candidate([11, 44], [10, 15], [20, 5]),[11, 10, 20, 44, 15, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "579",
        "title": "find_dissimilar",
        "text": "Write a function to find the dissimilar elements in the given two arrays.",
        "code": "function find_dissimilar(test_tup1: [number, number, number, number], test_tup2: [number, number, number, number]): [number, number, number, number] {\n    let dissimilar = [];\n    let dissimilar_len = 0;\n    let dissimilar_len_max = 0;\n    let dissimilar_len_min = 0;\n    let dissimilar_len_min_max = 0;\n    let dissimilar_len_min_max_max = 0;\n    let dissimilar_len_min_max_min = 0;\n    let dissimilar_len_min_max_min_max = 0;\n    let dissimilar_len_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_max = 0;\n    let dissimilar_len_min_max_min_max_min_max_min_max_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_dissimilar;",
            "assert.deepEqual(candidate([3, 4, 5, 6], [5, 7, 4, 10]),[3, 6, 7, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], [7, 2, 3, 9]),[1, 4, 7, 9]);",
            "assert.deepEqual(candidate([21, 11, 25, 26], [26, 34, 21, 36]),[34, 36, 11, 25]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "57",
        "title": "find_Max_Num",
        "text": "Write a tsthon function to find the largest number that can be formed with the given array of digits.",
        "code": "function find_Max_Num(arr: number[]): number {\n    var max = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Max_Num;",
            "assert.deepEqual(candidate([1, 2, 3]),321);",
            "assert.deepEqual(candidate([4, 5, 6, 1]),6541);",
            "assert.deepEqual(candidate([1, 2, 3, 9]),9321);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "580",
        "title": "extract_even",
        "text": "Write a function to remove uneven elements in the nested mixed array.",
        "code": "function extract_even(test_tuple: [number, number, [number, number, [number, number]], number, number]): any {\n    return test_tuple[0] % 2 == 0\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_even;",
            "assert.deepEqual(candidate([4, 5, [7, 6, [2, 4]], 6, 8]),[4, [6, [2, 4]], 6, 8]);",
            "assert.deepEqual(candidate([5, 6, [8, 7, [4, 8]], 7, 9]),[6, [8, [4, 8]]]);",
            "assert.deepEqual(candidate([5, 6, [9, 8, [4, 6]], 8, 10]),[6, [8, [4, 6]], 8, 10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "581",
        "title": "surface_Area",
        "text": "Write a tsthon function to find the surface area of a square tsramid with a given base edge and height.",
        "code": "function surface_Area(b: number, s: number): number {\n    let x = b * s;\n    let y = s;\n    let area = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x1 = 0;\n    let y1 = 0;\n    let x2 = 0;\n    let y2 = 0;\n    let x3 = 0;\n    let y3 = 0;\n    let x4 = 0;\n    let y4 = 0;\n    let x5 = 0;\n    let y5 = 0;\n    let x6 = 0;\n    let y6 = 0;\n    let x7 = 0;\n    let y7 = 0;\n    let x8 = 0;\n    let y8 = 0;\n    let x9 = 0;\n    let y9 = 0;\n    let x10 = 0;\n    let y10 = 0;\n    let x11 = 0;\n    let y11 = 0;\n    let x12 = 0;\n    let y12 = 0;\n    let x13 = 0;\n    let y13 = 0;\n    let x14 = 0;\n    let y14 = 0;\n    let x15 = 0;\n    let y15 = 0;\n    let x16 = 0;\n    let y16 = 0;\n    let x17 = 0;\n    let y17 = 0;\n    let x18 = 0;\n    let y18 = 0;\n    let x19 = 0;\n    let y19 = 0;\n    let x20 = 0;\n    let y20 = 0;\n    let x21 = 0;\n    let y21 = 0;\n    let x22 = 0\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = surface_Area;",
            "assert.deepEqual(candidate(3, 4),33);",
            "assert.deepEqual(candidate(4, 5),56);",
            "assert.deepEqual(candidate(1, 2),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "583",
        "title": "catalan_number",
        "text": "Write a function which returns nth catalan number.",
        "code": "function catalan_number(num: number): number {\n  return num % 10;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = catalan_number;",
            "assert.deepEqual(candidate(10),16796);",
            "assert.deepEqual(candidate(9),4862);",
            "assert.deepEqual(candidate(7),429);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "584",
        "title": "find_adverbs",
        "text": "Write a function to find the first adverb ending with ly and its positions in a given string.",
        "code": "function find_adverbs(text: string): string {\n  let adverbs = text.split(\" \");\n  let first_adverb = adverbs[0];\n  let first_pos = first_adverb.indexOf(\"ly\");\n  let last_pos = first_adverb.lastIndexOf(\"ly\");\n  let last_adverb = first_adverb.substring(last_pos + 1);\n  let first_adverb_pos = first_adverb.indexOf(\"ly\");\n  let last_adverb_pos = first_adverb.lastIndexOf(\"ly\");\n  let last_adverb_pos = last_adverb.substring(last_adverb_pos + 1);\n  let first_adverb_pos = first_adverb.indexOf(\"ly\");\n  let last_adverb_pos = first_adverb.lastIndexOf(\"ly\");\n  let last_adverb_pos = last_adverb.substring(last_adverb_pos + 1);\n  let first_adverb_pos = first_adverb.indexOf(\"ly\");\n  let last_adverb_pos = first_adverb.lastIndexOf(\"ly\");\n  let last_adverb_pos = last_adverb.substring(last_adverb_pos + 1);\n  let first_adverb_pos = first_adverb.indexOf(\"ly\");\n  let last_adverb_pos = first_adverb.lastIndexOf(\"ly\");\n  let last_adverb_pos = last_adverb.substring(last_adverb_pos + 1);\n  let first_adverb_pos = first_adverb.indexOf(\"ly\");\n  let last_adverb_pos = first_adverb.lastIndexOf(\"ly\");\n  let last_adverb_pos = last_adverb.substring(last_adverb_pos + 1);\n  let first_adverb_pos = first_adverb.indexOf(\"ly\");\n  let last_adverb_pos = first_adverb.lastIndexOf(\"ly\");\n  let last_adverb_pos = last_adverb.\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_adverbs;",
            "assert.deepEqual(candidate(\"Clearly, he has no excuse for such behavior.\"),\"0-7: Clearly\");",
            "assert.deepEqual(candidate(\"Please handle the situation carefuly\"),\"28-36: carefuly\");",
            "assert.deepEqual(candidate(\"Complete the task quickly\"),\"18-25: quickly\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "586",
        "title": "split_Arr",
        "text": "Write a tsthon function to split an array at the nth eelment and add the first part to the end.",
        "code": "function split_Arr(l: number[], n: number): number[] {\n    var r = [];\n    for (var i = 0; i < l.length; i++) {\n        r.push(l[i]);\n    }\n    return r;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = split_Arr;",
            "assert.deepEqual(candidate([12, 10, 5, 6, 52, 36], 2),[5, 6, 52, 36, 12, 10]);",
            "assert.deepEqual(candidate([1, 2, 3, 4], 1),[2, 3, 4, 1]);",
            "assert.deepEqual(candidate([0, 1, 2, 3, 4, 5, 6, 7], 3),[3, 4, 5, 6, 7, 0, 1, 2]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "587",
        "title": "list_tuple",
        "text": "Write a function to convert an array to an array.",
        "code": "function list_tuple(listx: number[]): any {\n    return listx.map(x => x.toString());\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = list_tuple;",
            "assert.deepEqual(candidate([5, 10, 7, 4, 15, 3]),[5, 10, 7, 4, 15, 3]);",
            "assert.deepEqual(candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]),[2, 4, 5, 6, 2, 3, 4, 4, 7]);",
            "assert.deepEqual(candidate([58, 44, 56]),[58, 44, 56]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "588",
        "title": "big_diff",
        "text": "Write a tsthon function to find the difference between largest and smallest value in a given array.",
        "code": "function big_diff(nums: number[]): number {\n    let max = 0;\n    let min = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > max) {\n            max = nums[i];\n        }\n        if (nums[i] < min) {\n            min = nums[i];\n        }\n    }\n    return max - min;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = big_diff;",
            "assert.deepEqual(candidate([1, 2, 3, 4]),3);",
            "assert.deepEqual(candidate([4, 5, 12]),8);",
            "assert.deepEqual(candidate([9, 2, 3]),7);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "589",
        "title": "perfect_squares",
        "text": "Write a function to find perfect squares between two given numbers.",
        "code": "function perfect_squares(a: number, b: number): number[] {\n    let result = [];\n    let x = a;\n    let y = b;\n    while (x < y) {\n        let x_prime = x;\n        let y_prime = y;\n        while (x_prime < y_prime) {\n            let x_prime_prime = x_prime;\n            let y_prime_prime = y_prime;\n            while (x_prime_prime < y_prime_prime) {\n                let x_prime_prime_prime = x_prime_prime;\n                let y_prime_prime_prime = y_prime_prime;\n                let x_prime_prime_prime_prime = x_prime_prime_prime;\n                let y_prime_prime_prime_prime = y_prime_prime_prime;\n                let x_prime_prime_prime_prime_prime = x_prime_prime_prime_prime;\n                let y_prime_prime_prime_prime_prime = y_prime_prime_prime_prime;\n                let x_prime_prime_prime_prime_prime_prime = x_prime_prime_prime_prime_prime;\n                let y_prime_prime_prime_prime_prime_prime = y_prime_prime_prime_prime_prime;\n                let x_prime_prime_prime_prime_prime_prime_prime = x_prime_prime_prime_prime_prime_prime;\n                let y_prime_prime_prime_prime_prime_prime_prime = y_prime_prime_prime_prime_prime_prime;\n                let x_prime_prime_prime_prime_prime_prime_prime = x_prime_prime_prime_prime_prime_prime;\n                let y_prime_prime_prime_prime_prime_prime_prime = y_prime_prime_prime_prime_prime_prime;\n                let x_prime_prime_prime_prime_prime_prime_prime = x_prime_prime_prime_prime_prime_prime;\n                let y_prime_prime_prime_prime_prime_prime_prime = y_prime_prime_prime_prime_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = perfect_squares;",
            "assert.deepEqual(candidate(1, 30),[1, 4, 9, 16, 25]);",
            "assert.deepEqual(candidate(50, 100),[64, 81, 100]);",
            "assert.deepEqual(candidate(100, 200),[100, 121, 144, 169, 196]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "58",
        "title": "opposite_Signs",
        "text": "Write a tsthon function to check whether the given two integers have opposite sign or not.",
        "code": "function opposite_Signs(x: number, y: number): boolean {\n    if (x < 0) {\n        return false;\n    }\n    if (y < 0) {\n        return false;\n    }\n    if (x > 0) {\n        return false;\n    }\n    if (y > 0) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = opposite_Signs;",
            "assert.deepEqual(candidate(1, -2),true);",
            "assert.deepEqual(candidate(3, 2),false);",
            "assert.deepEqual(candidate(-10, -10),false);",
            "assert.deepEqual(candidate(-2, 2),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "591",
        "title": "swap_List",
        "text": "Write a tsthon function to interchange the first and last elements in an array.",
        "code": "function swap_List(newList: number[]): number[] {\n    newList[0] = newList[1];\n    newList[1] = newList[0];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = swap_List;",
            "assert.deepEqual(candidate([12, 35, 9, 56, 24]),[24, 35, 9, 56, 12]);",
            "assert.deepEqual(candidate([1, 2, 3]),[3, 2, 1]);",
            "assert.deepEqual(candidate([4, 5, 6]),[6, 5, 4]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "592",
        "title": "sum_Of_product",
        "text": "Write a tsthon function to find the sum of the product of consecutive binomial co-efficients.",
        "code": "function sum_Of_product(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i * i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_Of_product;",
            "assert.deepEqual(candidate(3),15);",
            "assert.deepEqual(candidate(4),56);",
            "assert.deepEqual(candidate(1),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "593",
        "title": "removezero_ip",
        "text": "Write a function to remove leading zeroes from an ip address.",
        "code": "function removezero_ip(ip: string): string {\n  return ip.replace(/^0+/, '');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = removezero_ip;",
            "assert.deepEqual(candidate(\"216.08.094.196\"),\"216.8.94.196\");",
            "assert.deepEqual(candidate(\"12.01.024\"),\"12.1.24\");",
            "assert.deepEqual(candidate(\"216.08.094.0196\"),\"216.8.94.196\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "594",
        "title": "diff_even_odd",
        "text": "Write a function to find the difference of the first even and first odd number of a given array.",
        "code": "function diff_even_odd(list1: number[]): number {\n    var list2 = list1.slice(0, 1);\n    var list3 = list1.slice(1, 2);\n    var list4 = list1.slice(2, 3);\n    var list5 = list1.slice(3, 4);\n    var list6 = list1.slice(4, 5);\n    var list7 = list1.slice(5, 6);\n    var list8 = list1.slice(6, 7);\n    var list9 = list1.slice(7, 8);\n    var list10 = list1.slice(8, 9);\n    var list11 = list1.slice(9, 10);\n    var list12 = list1.slice(10, 11);\n    var list13 = list1.slice(11, 12);\n    var list14 = list1.slice(12, 13);\n    var list15 = list1.slice(13, 14);\n    var list16 = list1.slice(14, 15);\n    var list17 = list1.slice(15, 16);\n    var list18 = list1.slice(16, 17);\n    var list19 = list1.slice(17, 18);\n    var list20 = list1.slice(18, 19);\n    var list21 = list1.slice(19, 20);\n    var list22 = list1.slice(20, 21);\n    var list23 = list1.slice(21, 22);\n    var list24 = list1.slice(22, 23);\n    var list25 = list1.slice(23, 24);\n    var list26 = list1.slice(24, 25);\n    var list27 = list1.slice(25, 26);\n    var list28 = list1.slice(26, 27);\n    var list29 = list1.slice(27, 28);\n    var list30 = list1.slice(28, 29);\n    var list31 = list1.slice(29, 30);\n    var list32 = list1.slice(30, 31);\n    var list33 = list1.slice\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = diff_even_odd;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),1);",
            "assert.deepEqual(candidate([1, 5, 7, 9, 10]),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "595",
        "title": "min_Swaps",
        "text": "Write a tsthon function to count minimum number of swaps required to convert one binary number represented as a string to another.",
        "code": "function min_Swaps(str1: string, str2: string): any {\n    let minSwaps = 0;\n    let str1_len = str1.length;\n    let str2_len = str2.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r =\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_Swaps;",
            "assert.deepEqual(candidate(\"1101\", \"1110\"),1);",
            "assert.deepEqual(candidate(\"111\", \"000\"),\"Not Possible\");",
            "assert.deepEqual(candidate(\"111\", \"110\"),\"Not Possible\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "597",
        "title": "find_kth",
        "text": "Write a function to find kth element from the given two sorted arrays.",
        "code": "function find_kth(arr1: number[], arr2: number[], k: number): number {\n  let kth = 0;\n  let i = 0;\n  let j = 0;\n  let len1 = arr1.length;\n  let len2 = arr2.length;\n  let len = Math.min(len1, len2);\n  let arr1_i = arr1.slice(0, i);\n  let arr1_j = arr1.slice(i);\n  let arr2_i = arr2.slice(0, i);\n  let arr2_j = arr2.slice(i);\n  let arr1_k = arr1_i.slice(0, k);\n  let arr2_k = arr2_i.slice(0, k);\n  let arr1_len = arr1_i.length;\n  let arr2_len = arr2_i.length;\n  let arr1_kth = arr1_k.slice(0, k);\n  let arr2_kth = arr2_k.slice(0, k);\n  let arr1_len_kth = arr1_kth.length;\n  let arr2_len_kth = arr2_kth.length;\n  let arr1_kth_len = arr1_kth.length;\n  let arr2_kth_len = arr2_kth.length;\n  let arr1_len_kth_len = arr1_kth_len.length;\n  let arr2_len_kth_len = arr2_kth_len.length;\n  let arr1_kth_len_kth = arr1_kth_len.length;\n  let arr2_kth_len_kth = arr2_kth_len.length;\n  let arr1_len_kth_len_kth = arr1_len_kth.length;\n  let arr2_len_kth_len_kth = arr2_len_kth.length;\n  let arr1_kth_len_kth_len_kth\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_kth;",
            "assert.deepEqual(candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5),6);",
            "assert.deepEqual(candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7),256);",
            "assert.deepEqual(candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "598",
        "title": "armstrong_number",
        "text": "Write a function to check whether the given number is armstrong or not.",
        "code": "function armstrong_number(number: number): boolean {\n    return number % 2 === 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = armstrong_number;",
            "assert.deepEqual(candidate(153),true);",
            "assert.deepEqual(candidate(259),false);",
            "assert.deepEqual(candidate(4458),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "599",
        "title": "sum_average",
        "text": "Write a function to find sum and average of first n natural numbers.",
        "code": "function sum_average(number: number): [number, number] {\n  let sum = 0;\n  let average = 0;\n  for (let i = 0; i < number; i++) {\n    sum += number;\n    average += number;\n  }\n  return [sum, average];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_average;",
            "assert.deepEqual(candidate(10),[55, 5.5]);",
            "assert.deepEqual(candidate(15),[120, 8.0]);",
            "assert.deepEqual(candidate(20),[210, 10.5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "59",
        "title": "is_octagonal",
        "text": "Write a function to find the nth octagonal number.",
        "code": "function is_octagonal(n: number): number {\n    if (n < 2) {\n        return n;\n    }\n    if (n % 2 == 0) {\n        return n;\n    }\n    return is_octagonal(n - 1) + is_octagonal(n - 2);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_octagonal;",
            "assert.deepEqual(candidate(5),65);",
            "assert.deepEqual(candidate(10),280);",
            "assert.deepEqual(candidate(15),645);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "600",
        "title": "is_Even",
        "text": "Write a tsthon function to check whether the given number is even or not.",
        "code": "function is_Even(n: number): boolean {\n    return n % 2 === 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Even;",
            "assert.deepEqual(candidate(1),false);",
            "assert.deepEqual(candidate(2),true);",
            "assert.deepEqual(candidate(3),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "602",
        "title": "first_repeated_char",
        "text": "Write a tsthon function to find the first repeated character in a given string.",
        "code": "function first_repeated_char(str1: string): string | undefined {\n  var str2 = str1.split('');\n  var str3 = str2.slice(0, 1);\n  return str3;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_repeated_char;",
            "assert.deepEqual(candidate(\"abcabc\"),\"a\");",
            "assert.deepEqual(candidate(\"abc\"),undefined);",
            "assert.deepEqual(candidate(\"123123\"),\"1\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "603",
        "title": "get_ludic",
        "text": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "code": "function get_ludic(n: number): number[] {\n    let n_ludic = [];\n    let n_ludic_min = n;\n    let n_ludic_max = n;\n    let n_ludic_sum = 0;\n    let n_ludic_sum_min = 0;\n    let n_ludic_sum_max = 0;\n    let n_ludic_sum_sum = 0;\n    let n_ludic_sum_sum_min = 0;\n    let n_ludic_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum = 0;\n    let n_ludic_sum_sum_sum_min = 0;\n    let n_ludic_sum_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum_sum = 0;\n    let n_ludic_sum_sum_sum_sum_min = 0;\n    let n_ludic_sum_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum_sum_min = 0;\n    let n_ludic_sum_sum_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum_sum_sum_min = 0;\n    let n_ludic_sum_sum_sum_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum_sum_sum_sum_min = 0;\n    let n_ludic_sum_sum_sum_sum_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    let n_ludic_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum_sum_sum_sum_sum_sum_min = 0;\n    let n_ludic_sum_sum_sum_sum_sum_sum_sum_sum_max = 0;\n    let n_ludic_sum_sum_sum\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_ludic;",
            "assert.deepEqual(candidate(10),[1, 2, 3, 5, 7]);",
            "assert.deepEqual(candidate(25),[1, 2, 3, 5, 7, 11, 13, 17, 23, 25]);",
            "assert.deepEqual(candidate(45),[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "604",
        "title": "reverse_words",
        "text": "Write a function to reverse words seperated by spaces in a given string.",
        "code": "function reverse_words(s: string): string {\n    var words = s.split(\" \");\n    var reversed = words.map(function(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1);\n    });\n    return reversed.join(\" \");\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_words;",
            "assert.deepEqual(candidate(\"python program\"),\"program python\");",
            "assert.deepEqual(candidate(\"java language\"),\"language java\");",
            "assert.deepEqual(candidate(\"indian man\"),\"man indian\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "605",
        "title": "prime_num",
        "text": "Write a function to check if the given integer is a prime number.",
        "code": "function prime_num(num: number): boolean {\n    if (num < 2) {\n        return false;\n    }\n    if (num % 2 == 0) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = prime_num;",
            "assert.deepEqual(candidate(13),true);",
            "assert.deepEqual(candidate(7),true);",
            "assert.deepEqual(candidate(-1010),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "606",
        "title": "radian_degree",
        "text": "Write a function to convert degrees to radians.",
        "code": "function radian_degree(degree: number): number {\n  return degree * Math.PI / 180;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = radian_degree;",
            "assert.deepEqual(candidate(90),1.5707963267948966);",
            "assert.deepEqual(candidate(60),1.0471975511965976);",
            "assert.deepEqual(candidate(120),2.0943951023931953);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "607",
        "title": "find_literals",
        "text": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "code": "function find_literals(text: string, pattern: string): [string, number, number] {\n  let match = text.match(pattern);\n  if (match) {\n    return [match[0], match[1], match[2]];\n  }\n  return [text, 0, 0];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_literals;",
            "assert.deepEqual(candidate(\"The quick brown fox jumps over the lazy dog.\", \"fox\"),[\"fox\", 16, 19]);",
            "assert.deepEqual(candidate(\"Its been a very crazy procedure right\", \"crazy\"),[\"crazy\", 16, 21]);",
            "assert.deepEqual(candidate(\"Hardest choices required strongest will\", \"will\"),[\"will\", 35, 39]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "608",
        "title": "bell_Number",
        "text": "Write a tsthon function to find nth bell number.",
        "code": "function bell_Number(n: number): number {\n  return n * (n - 1) / 2;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = bell_Number;",
            "assert.deepEqual(candidate(2),2);",
            "assert.deepEqual(candidate(3),5);",
            "assert.deepEqual(candidate(4),15);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "610",
        "title": "remove_kth_element",
        "text": "Write a tsthon function which takes an array and returns an array with the same elements, but the k'th element removed.",
        "code": "function remove_kth_element(list1: number[], L: number): number[] {\n    var list2 = list1.slice(0, L);\n    var list3 = list1.slice(L);\n    var list4 = list1.slice(0, L);\n    var list5 = list1.slice(L);\n    var list6 = list1.slice(0, L);\n    var list7 = list1.slice(L);\n    var list8 = list1.slice(0, L);\n    var list9 = list1.slice(L);\n    var list10 = list1.slice(0, L);\n    var list11 = list1.slice(L);\n    var list12 = list1.slice(0, L);\n    var list13 = list1.slice(L);\n    var list14 = list1.slice(0, L);\n    var list15 = list1.slice(L);\n    var list16 = list1.slice(0, L);\n    var list17 = list1.slice(L);\n    var list18 = list1.slice(0, L);\n    var list19 = list1.slice(L);\n    var list20 = list1.slice(0, L);\n    var list21 = list1.slice(L);\n    var list22 = list1.slice(0, L);\n    var list23 = list1.slice(L);\n    var list24 = list1.slice(0, L);\n    var list25 = list1.slice(L);\n    var list26 = list1.slice(0, L);\n    var list27 = list1.slice(L);\n    var list28 = list1.slice(0, L);\n    var list29 = list1.slice(L);\n    var list30 = list1.slice(0, L);\n    var list31 = list1.slice(L);\n    var list32 = list1.slice(0, L);\n    var list33 = list1.slice(L);\n    var list34 = list1.slice(0, L\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_kth_element;",
            "assert.deepEqual(candidate([1, 1, 2, 3, 4, 4, 5, 1], 3),[1, 1, 3, 4, 4, 5, 1]);",
            "assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4),[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]);",
            "assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5),[10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "611",
        "title": "max_of_nth",
        "text": "Write a function which given a matrix represented as an array of arrays returns the max of then'th column.",
        "code": "function max_of_nth(test_list: number[][], N: number): number {\n    let max = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        let test = test_list[i];\n        let max_i = 0;\n        for (let j = 0; j < test.length; j++) {\n            if (test[j] > max_i) {\n                max_i = test[j];\n            }\n        }\n        max = max_i;\n    }\n    return max;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_of_nth;",
            "assert.deepEqual(candidate([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2),19);",
            "assert.deepEqual(candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1),10);",
            "assert.deepEqual(candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1),11);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "612",
        "title": "merge",
        "text": "Write a tsthon function which takes an array of arrays, where each subarray has two elements, and returns an array of two arrays where the first array has the first element of each subarray and the second one has the second.",
        "code": "function merge(lst: any[][]): any[][] {\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let sub = lst[i];\n        let result = result.concat(sub);\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = merge;",
            "assert.deepEqual(candidate([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]]);",
            "assert.deepEqual(candidate([[1, 2], [3, 4], [5, 6], [7, 8]]),[[1, 3, 5, 7], [2, 4, 6, 8]]);",
            "assert.deepEqual(candidate([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]]),[[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "614",
        "title": "cummulative_sum",
        "text": "Write a function to find the cumulative sum of all the values that are present in the given array of arrays.",
        "code": "function cummulative_sum(test_list: number[][]): number {\n    let sum = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        sum += test_list[i][1];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = cummulative_sum;",
            "assert.deepEqual(candidate([[1, 3], [5, 6, 7], [2, 6]]),30);",
            "assert.deepEqual(candidate([[2, 4], [6, 7, 8], [3, 7]]),37);",
            "assert.deepEqual(candidate([[3, 5], [7, 8, 9], [4, 8]]),44);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "615",
        "title": "average_tuple",
        "text": "Write a function which takes an arrays of arrays and returns the average value for each subarray as an array.",
        "code": "function average_tuple(nums: number[][]): number[] {\n    var sum = 0;\n    for (var i = 0; i < nums.length; i++) {\n        sum += nums[i][0];\n    }\n    return [sum / nums.length];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = average_tuple;",
            "assert.deepEqual(candidate([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]),[30.5, 34.25, 27.0, 23.25]);",
            "assert.deepEqual(candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]),[25.5, -18.0, 3.75]);",
            "assert.deepEqual(candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]),[305.0, 342.5, 270.0, 232.5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "616",
        "title": "tuple_modulo",
        "text": "Write a function which takes two arrays of the same length and performs the element wise modulo.",
        "code": "function tuple_modulo(test_tup1: [number, number, number, number], test_tup2: [number, number, number, number]): [number, number, number, number] {\n    let result = [];\n    let i = 0;\n    for (let j = 0; j < test_tup1.length; j++) {\n        let tup1 = test_tup1[j];\n        let tup2 = test_tup2[j];\n        let mod = tup1 % tup2;\n        result.push(mod);\n        i++;\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_modulo;",
            "assert.deepEqual(candidate([10, 4, 5, 6], [5, 6, 7, 5]),[0, 4, 5, 1]);",
            "assert.deepEqual(candidate([11, 5, 6, 7], [6, 7, 8, 6]),[5, 5, 6, 1]);",
            "assert.deepEqual(candidate([12, 6, 7, 8], [7, 8, 9, 7]),[5, 6, 7, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "617",
        "title": "min_Jumps",
        "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
        "code": "function min_Jumps(steps: [number, number], d: number): number {\n    let min_jumps = 0;\n    let max_jumps = 0;\n    let i = 0;\n    let j = 0;\n    let steps_length = steps.length;\n    let steps_length_2d = steps.length / 2;\n    for (i = 0; i < steps_length; i++) {\n        if (i % steps_length_2d === 0) {\n            min_jumps = Math.min(min_jumps, steps[i]);\n        }\n        if (i % steps_length_2d === steps_length_2d - 1) {\n            max_jumps = Math.max(max_jumps, steps[i]);\n        }\n    }\n    return min_jumps;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_Jumps;",
            "assert.deepEqual(candidate([3, 4], 11),3.5);",
            "assert.deepEqual(candidate([3, 4], 0),0);",
            "assert.deepEqual(candidate([11, 14], 11),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "618",
        "title": "div_list",
        "text": "Write a function to divide two arrays element wise.",
        "code": "function div_list(nums1: number[], nums2: number[]): number[] {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let m1 = 0;\n    let m2 = 0;\n    let m3 = 0;\n    let m4 = 0;\n    let m5 = 0;\n    let m6 = 0;\n    let m7 = 0;\n    let m8 = 0;\n    let m9 = 0;\n    let m10 = 0;\n    let m11 = 0;\n    let m12 = 0;\n    let m13 = 0;\n    let m14 = 0;\n    let m15 = 0;\n    let m16 = 0;\n    let m17 = 0;\n    let m18 = 0;\n    let m19 = 0;\n    let m20 = 0;\n    let m21 = 0;\n    let m22 = 0;\n    let m23 = 0;\n    let m24 = 0;\n    let m25 = 0;\n    let m26 = 0;\n    let m27 = 0;\n    let m28 = 0;\n    let m29 = 0;\n    let m30 = 0;\n    let m31 = 0;\n    let m32 = 0;\n    let m33 = 0;\n    let m34 = 0;\n    let m35 = 0;\n    let m36 = 0;\n    let m37 = 0;\n    let m38 = 0;\n    let m39 = 0;\n    let m40 = 0;\n    let m41 = 0;\n    let m42 = 0;\n    let m43 = 0;\n    let m44 = 0;\n    let m45 = 0;\n    let m46 = 0;\n    let m47 = 0;\n    let m48 = 0;\n    let m49 = 0;\n    let m50 = 0;\n    let m51 = 0;\n    let m52 = 0;\n    let m53 = 0;\n    let m54 =\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = div_list;",
            "assert.deepEqual(candidate([4, 5, 6], [1, 2, 3]),[4.0, 2.5, 2.0]);",
            "assert.deepEqual(candidate([3, 2], [1, 4]),[3.0, 0.5]);",
            "assert.deepEqual(candidate([90, 120], [50, 70]),[1.8, 1.7142857142857142]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "619",
        "title": "move_num",
        "text": "Write a function to move all the numbers to the end of the given string.",
        "code": "function move_num(test_str: string): string {\n    var test_str_copy = test_str.copy();\n    var test_str_copy_end = test_str_copy.slice(-1);\n    var test_str_copy_end_end = test_str_copy_end.slice(-1);\n    var test_str_copy_end_end_end = test_str_copy_end_end.slice(-1);\n    var test_str_copy_end_end_end_end = test_str_copy_end_end_end.slice(-1);\n    var test_str_copy_end_end_end_end_end = test_str_copy_end_end_end_end.slice(-1);\n    var test_str_copy_end_end_end_end_end_end = test_str_copy_end_end_end_end_end.slice(-1);\n    var test_str_copy_end_end_end_end_end_end_end = test_str_copy_end_end_end_end_end_end.slice(-1);\n    var test_str_copy_end_end_end_end_end_end_end_end_end = test_str_copy_end_end_end_end_end_end_end_end.slice(-1);\n    var test_str_copy_end_end_end_end_end_end_end_end_end_end_end = test_str_copy_end_end_end_end_end_end_end_end_end_end.slice(-1);\n    var test_str_copy_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = move_num;",
            "assert.deepEqual(candidate(\"I1love143you55three3000thousand\"),\"Iloveyouthreethousand1143553000\");",
            "assert.deepEqual(candidate(\"Avengers124Assemble\"),\"AvengersAssemble124\");",
            "assert.deepEqual(candidate(\"Its11our12path13to14see15things16do17things\"),\"Itsourpathtoseethingsdothings11121314151617\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "61",
        "title": "count_Substrings",
        "text": "Write a tsthon function to count the number of substrings with the sum of digits equal to their length.",
        "code": "function count_Substrings(s: string): number {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        sum += s.charAt(i) === '0'? 0 : 1;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_Substrings;",
            "assert.deepEqual(candidate(\"112112\"),6);",
            "assert.deepEqual(candidate(\"111\"),6);",
            "assert.deepEqual(candidate(\"1101112\"),12);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "622",
        "title": "get_median",
        "text": "Write a function to find the median of two sorted arrays of same size.",
        "code": "function get_median(arr1: number[], arr2: number[], n: number): number {\n    let median = arr1[n / 2];\n    let i = n / 2;\n    while (i < n) {\n        if (arr1[i] < arr2[i]) {\n            median = arr1[i];\n            i++;\n        } else {\n            median = arr2[i];\n            i++;\n        }\n    }\n    return median;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_median;",
            "assert.deepEqual(candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5),16.0);",
            "assert.deepEqual(candidate([2, 4, 8, 9], [7, 13, 19, 28], 4),8.5);",
            "assert.deepEqual(candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6),25.0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "623",
        "title": "nth_nums",
        "text": "Write a function to compute the n-th power of each number in an array.",
        "code": "function nth_nums(nums: number[], n: number): number[] {\n    let res = [];\n    let i = 0;\n    while (i < nums.length) {\n        if (nums[i] % n === 0) {\n            res.push(nums[i]);\n            i++;\n        } else {\n            i++;\n        }\n    }\n    return res;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = nth_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);",
            "assert.deepEqual(candidate([10, 20, 30], 3),[1000, 8000, 27000]);",
            "assert.deepEqual(candidate([12, 15], 5),[248832, 759375]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "624",
        "title": "is_upper",
        "text": "Write a tsthon function to convert a given string to uppercase.",
        "code": "function is_upper(string: string): string {\n  return string.toUpperCase();\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_upper;",
            "assert.deepEqual(candidate(\"person\"),\"PERSON\");",
            "assert.deepEqual(candidate(\"final\"),\"FINAL\");",
            "assert.deepEqual(candidate(\"Valid\"),\"VALID\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "625",
        "title": "swap_List",
        "text": "Write a tsthon function to interchange the first and last element in a given array.",
        "code": "function swap_List(newList: number[]): number[] {\n    var temp = newList[0];\n    newList[0] = newList[1];\n    newList[1] = temp;\n    return newList;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = swap_List;",
            "assert.deepEqual(candidate([1, 2, 3]),[3, 2, 1]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 4]),[4, 2, 3, 4, 1]);",
            "assert.deepEqual(candidate([4, 5, 6]),[6, 5, 4]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "626",
        "title": "triangle_area",
        "text": "Write a tsthon function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "code": "function triangle_area(r: number): number | undefined {\n    return Math.PI * r * r\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = triangle_area;",
            "assert.deepEqual(candidate(-1),undefined);",
            "assert.deepEqual(candidate(0),0);",
            "assert.deepEqual(candidate(2),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "627",
        "title": "find_First_Missing",
        "text": "Write a tsthon function to find the smallest missing number from a sorted array of natural numbers.",
        "code": "function find_First_Missing(array: number[]): number {\n    let min = array[0];\n    let max = array[0];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_First_Missing;",
            "assert.deepEqual(candidate([0, 1, 2, 3]),4);",
            "assert.deepEqual(candidate([0, 1, 2, 6, 9]),3);",
            "assert.deepEqual(candidate([2, 3, 5, 8, 9]),0);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "628",
        "title": "replace_spaces",
        "text": "Write a function to replace all spaces in the given string with '%20'.",
        "code": "function replace_spaces(string: string): string {\n  return string.replace(/\\s+/g, '%20');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_spaces;",
            "assert.deepEqual(candidate(\"My Name is Dawood\"),\"My%20Name%20is%20Dawood\");",
            "assert.deepEqual(candidate(\"I am a Programmer\"),\"I%20am%20a%20Programmer\");",
            "assert.deepEqual(candidate(\"I love Coding\"),\"I%20love%20Coding\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "629",
        "title": "Split",
        "text": "Write a tsthon function to find even numbers from an array of numbers.",
        "code": "function Split(list: number[]): number[] {\n    var result = [];\n    for (var i = 0; i < list.length; i++) {\n        if (list[i] % 2 == 0) {\n            result.push(list[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Split;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),[2, 4]);",
            "assert.deepEqual(candidate([4, 5, 6, 7, 8, 0, 1]),[4, 6, 8, 0]);",
            "assert.deepEqual(candidate([8, 12, 15, 19]),[8, 12]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "62",
        "title": "smallest_num",
        "text": "Write a tsthon function to find smallest number in an array.",
        "code": "function smallest_num(xs: number[]): number {\n    let smallest = xs[0];\n    for (let i = 1; i < xs.length; i++) {\n        if (xs[i] < smallest) {\n            smallest = xs[i];\n        }\n    }\n    return smallest;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = smallest_num;",
            "assert.deepEqual(candidate([10, 20, 1, 45, 99]),1);",
            "assert.deepEqual(candidate([1, 2, 3]),1);",
            "assert.deepEqual(candidate([45, 46, 50, 60]),45);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "630",
        "title": "get_coordinates",
        "text": "Write a function to extract all the adjacent coordinates of the given coordinate array.",
        "code": "function get_coordinates(test_tup: [number, number]): number[][] {\n    let x = test_tup[0];\n    let y = test_tup[1];\n    let x_adj = x[0];\n    let y_adj = y[0];\n    let x_adj_adj = x_adj[0];\n    let y_adj_adj = y_adj[0];\n    let x_adj_adj_adj = x_adj_adj[0];\n    let y_adj_adj_adj = y_adj_adj[0];\n    let x_adj_adj_adj_adj = x_adj_adj_adj[0];\n    let y_adj_adj_adj_adj = y_adj_adj_adj[0];\n    let x_adj_adj_adj_adj_adj = x_adj_adj_adj_adj[0];\n    let y_adj_adj_adj_adj_adj = y_adj_adj_adj_adj[0];\n    let x_adj_adj_adj_adj_adj_adj = x_adj_adj_adj_adj_adj[0];\n    let y_adj_adj_adj_adj_adj_adj = y_adj_adj_adj_adj_adj[0];\n    let x_adj_adj_adj_adj_adj_adj_adj = x_adj_adj_adj_adj_adj_adj[0];\n    let y_adj_adj_adj_adj_adj_adj_adj = y_adj_adj_adj_adj_adj_adj[0];\n    let x_adj_adj_adj_adj_adj_adj_adj = x_adj_adj_adj_adj_adj_adj[0];\n    let y_adj_adj_adj_adj_adj_adj_adj = y_adj_adj_adj_adj_adj_adj[0];\n    let x_adj_adj_adj_adj_adj_adj_adj = x_adj_adj_adj_adj_adj_adj[0];\n    let y_adj_adj_adj_adj_adj_adj_adj = y_adj\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_coordinates;",
            "assert.deepEqual(candidate([3, 4]),[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]);",
            "assert.deepEqual(candidate([4, 5]),[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]);",
            "assert.deepEqual(candidate([5, 6]),[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "631",
        "title": "replace_spaces",
        "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "code": "function replace_spaces(text: string): string {\n  return text.replace(/\\s+/g, '_').replace(/_/g,'');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_spaces;",
            "assert.deepEqual(candidate(\"Jumanji The Jungle\"),\"Jumanji_The_Jungle\");",
            "assert.deepEqual(candidate(\"The_Avengers\"),\"The Avengers\");",
            "assert.deepEqual(candidate(\"Fast and Furious\"),\"Fast_and_Furious\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "632",
        "title": "move_zero",
        "text": "Write a tsthon function to move all zeroes to the end of the given array.",
        "code": "function move_zero(num_list: number[]): number[] {\n    var new_num_list = [];\n    for (var i = 0; i < num_list.length; i++) {\n        if (num_list[i] == 0) {\n            new_num_list.push(i);\n        }\n    }\n    return new_num_list;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = move_zero;",
            "assert.deepEqual(candidate([1, 0, 2, 0, 3, 4]),[1, 2, 3, 4, 0, 0]);",
            "assert.deepEqual(candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]),[2, 3, 2, 4, 5, 0, 0, 0, 0]);",
            "assert.deepEqual(candidate([0, 1, 0, 1, 1]),[1, 1, 1, 0, 0]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "633",
        "title": "pair_xor_Sum",
        "text": "Write a tsthon function to find the sum of xor of all pairs of numbers in the given array.",
        "code": "function pair_xor_Sum(arr: number[], n: number): number {\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pair_xor_Sum;",
            "assert.deepEqual(candidate([5, 9, 7, 6], 4),47);",
            "assert.deepEqual(candidate([7, 3, 5], 3),12);",
            "assert.deepEqual(candidate([7, 3], 2),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "635",
        "title": "heap_sort",
        "text": "Write a function to sort the given array.",
        "code": "function heap_sort(iterable: number[]): number[] {\n    let heap = [];\n    let length = iterable.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let temp = iterable[0];\n    let temp_i = 0;\n    let temp_j = 0;\n    let temp_k = 0;\n    let temp_temp = iterable[0];\n    let temp_temp_i = 0;\n    let temp_temp_j = 0;\n    let temp_temp_k = 0;\n    let temp_temp_temp = iterable[0];\n    let temp_temp_temp_i = 0;\n    let temp_temp_temp_j = 0;\n    let temp_temp_temp_k = 0;\n    let temp_temp_temp_temp = iterable[0];\n    let temp_temp_temp_temp_i = 0;\n    let temp_temp_temp_temp_j = 0;\n    let temp_temp_temp_temp_k = 0;\n    let temp_temp_temp_temp = iterable[0];\n    let temp_temp_temp_temp_i = 0;\n    let temp_temp_temp_temp_j = 0;\n    let temp_temp_temp_temp_k = 0;\n    let temp_temp_temp_temp = iterable[0];\n    let temp_temp_temp_temp_i = 0;\n    let temp_temp_temp_temp_j = 0;\n    let temp_temp_temp_temp_k = 0;\n    let temp_temp_temp_temp = iterable[0];\n    let temp_temp_temp_temp_i = 0;\n    let temp_temp_temp_temp_j = 0;\n    let temp_temp_temp_temp_k = 0;\n    let temp_temp_temp_temp = iterable[0];\n    let temp_temp_temp_temp_i = 0;\n    let temp_temp_temp_temp_j = 0;\n    let temp_temp_temp_temp_k = 0;\n    let temp_temp_temp_temp\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = heap_sort;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);",
            "assert.deepEqual(candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]),[14, 22, 25, 25, 35, 58, 65, 75, 85]);",
            "assert.deepEqual(candidate([7, 1, 9, 5]),[1, 5, 7, 9]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "637",
        "title": "noprofit_noloss",
        "text": "Write a function to check whether the given amount has no profit and no loss",
        "code": "function noprofit_noloss(actual_cost: number, sale_amount: number): boolean {\n    return actual_cost == 0 and sale_amount == 0\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = noprofit_noloss;",
            "assert.deepEqual(candidate(1500, 1200),false);",
            "assert.deepEqual(candidate(100, 100),true);",
            "assert.deepEqual(candidate(2000, 5000),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "638",
        "title": "wind_chill",
        "text": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "code": "function wind_chill(v: number, t: number): number {\n    return (v * 0.621371) + (t * 0.162222)\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = wind_chill;",
            "assert.deepEqual(candidate(120, 35),40);",
            "assert.deepEqual(candidate(40, 20),19);",
            "assert.deepEqual(candidate(10, 8),6);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "639",
        "title": "sample_nam",
        "text": "Write a function to sum the length of the names of a given array of names after removing the names that start with a lowercase letter.",
        "code": "function sample_nam(sample_names: string[]): number {\n    var sum = 0;\n    for (var i = 0; i < sample_names.length; i++) {\n        if (sample_names[i].toLowerCase()!== sample_names[i].toLowerCase()) {\n            sum += 1;\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sample_nam;",
            "assert.deepEqual(candidate([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"]),16);",
            "assert.deepEqual(candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]),10);",
            "assert.deepEqual(candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]),6);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "63",
        "title": "max_difference",
        "text": "Write a function to find the maximum difference between available pairs in the given array array.",
        "code": "function max_difference(test_list: [number, number][]): number {\n    let max_difference = 0;\n    for (let i = 0; i < test_list.length; i++) {\n        let test_value = test_list[i];\n        let test_difference = Math.abs(test_value - test_list[i]);\n        if (test_difference > max_difference) {\n            max_difference = test_difference;\n        }\n    }\n    return max_difference;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_difference;",
            "assert.deepEqual(candidate([[3, 5], [1, 7], [10, 3], [1, 2]]),7);",
            "assert.deepEqual(candidate([[4, 6], [2, 17], [9, 13], [11, 12]]),15);",
            "assert.deepEqual(candidate([[12, 35], [21, 27], [13, 23], [41, 22]]),23);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "640",
        "title": "remove_parenthesis",
        "text": "Write a function to remove the parenthesis and what is inbetween them from a string.",
        "code": "function remove_parenthesis(items: string[]): string {\n    var new_items = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_parenthesis;",
            "assert.deepEqual(candidate([\"python (chrome)\"]),\"python\");",
            "assert.deepEqual(candidate([\"string(.abc)\"]),\"string\");",
            "assert.deepEqual(candidate([\"alpha(num)\"]),\"alpha\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "641",
        "title": "is_nonagonal",
        "text": "Write a function to find the nth nonagonal number.",
        "code": "function is_nonagonal(n: number): number {\n  return n % 2 === 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_nonagonal;",
            "assert.deepEqual(candidate(10),325);",
            "assert.deepEqual(candidate(15),750);",
            "assert.deepEqual(candidate(18),1089);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "643",
        "title": "text_match_wordz_middle",
        "text": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "code": "function text_match_wordz_middle(text: string): boolean {\n    var start = text.indexOf('z');\n    var end = text.indexOf('z', start + 1);\n    return start == -1 || end == -1 || text.substring(start, end) == 'z';\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_wordz_middle;",
            "assert.deepEqual(candidate(\"pythonzabc.\"),true);",
            "assert.deepEqual(candidate(\"zxyabc.\"),false);",
            "assert.deepEqual(candidate(\"  lang  .\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "644",
        "title": "reverse_Array_Upto_K",
        "text": "Write a tsthon function to reverse an array upto a given position.",
        "code": "function reverse_Array_Upto_K(input: number[], k: number): number[] {\n    let output = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = reverse_Array_Upto_K;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 4),[4, 3, 2, 1, 5, 6]);",
            "assert.deepEqual(candidate([4, 5, 6, 7], 2),[5, 4, 6, 7]);",
            "assert.deepEqual(candidate([9, 8, 7, 6, 5], 3),[7, 8, 9, 6, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "64",
        "title": "subject_marks",
        "text": "Write a function to sort an array of arrays using the second value of each array.",
        "code": "function subject_marks(subjectmarks: [string, number][]): [string, number][] {\n    var subjectmarks_array = subjectmarks.map(function(subjectmarks_array_item) {\n        return subjectmarks_array_item[1];\n    });\n    subjectmarks_array.sort(function(a, b) {\n        return a[1] - b[1];\n    });\n    return subjectmarks_array;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = subject_marks;",
            "assert.deepEqual(candidate([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]]),[[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]]);",
            "assert.deepEqual(candidate([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]]),[[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]]);",
            "assert.deepEqual(candidate([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]]),[[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "65",
        "title": "recursive_list_sum",
        "text": "Write a function to flatten an array and sum all of its elements.",
        "code": "function recursive_list_sum(data_list: number| number[][]): number {\n    var sum = 0;\n    for (var i = 0; i < data_list.length; i++) {\n        sum += data_list[i][0];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = recursive_list_sum;",
            "assert.deepEqual(candidate([1, 2, [3, 4], [5, 6]]),21);",
            "assert.deepEqual(candidate([7, 10, [15, 14], [19, 41]]),106);",
            "assert.deepEqual(candidate([10, 20, [30, 40], [50, 60]]),210);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "66",
        "title": "pos_count",
        "text": "Write a tsthon function to count the number of positive numbers in an array.",
        "code": "function pos_count(list: number[]): number {\n  var count = 0;\n  for (var i = 0; i < list.length; i++) {\n    if (list[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pos_count;",
            "assert.deepEqual(candidate([1, -2, 3, -4]),2);",
            "assert.deepEqual(candidate([3, 4, 5, -1]),3);",
            "assert.deepEqual(candidate([1, 2, 3, 4]),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "67",
        "title": "bell_number",
        "text": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "code": "function bell_number(n: number): number {\n    let k = 0;\n    let sum = 0;\n    for (let i = 0; i < n; i++) {\n        sum += i;\n        k++;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = bell_number;",
            "assert.deepEqual(candidate(2),2);",
            "assert.deepEqual(candidate(10),115975);",
            "assert.deepEqual(candidate(56),6775685320645824322581483068371419745979053216268760300);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "68",
        "title": "is_Monotonic",
        "text": "Write a tsthon function to check whether the given array is monotonic or not.",
        "code": "function is_Monotonic(A: number[]): boolean {\n    var i = 0;\n    var j = A.length - 1;\n    while (i < A.length && j >= 0) {\n        if (A[i] > A[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Monotonic;",
            "assert.deepEqual(candidate([6, 5, 4, 4]),true);",
            "assert.deepEqual(candidate([1, 2, 2, 3]),true);",
            "assert.deepEqual(candidate([1, 3, 2]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "69",
        "title": "is_sublist",
        "text": "Write a function to check whether an array contains the given subarray or not.",
        "code": "function is_sublist(l: number[], s: number[]): boolean {\n    if (l.length!= s.length) {\n        return false;\n    }\n    for (let i = 0; i < l.length; i++) {\n        if (l[i]!= s[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_sublist;",
            "assert.deepEqual(candidate([2, 4, 3, 5, 7], [3, 7]),false);",
            "assert.deepEqual(candidate([2, 4, 3, 5, 7], [4, 3]),true);",
            "assert.deepEqual(candidate([2, 4, 3, 5, 7], [1, 6]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "6",
        "title": "differ_At_One_Bit_Pos",
        "text": "Write a tsthon function to check whether the two numbers differ at one bit position only or not.",
        "code": "function differ_At_One_Bit_Pos(a: number, b: number): boolean {\n    var a_bit_pos = Math.floor(a / 2);\n    var b_bit_pos = Math.floor(b / 2);\n    var a_bit_pos_diff = a_bit_pos - b_bit_pos;\n    var b_bit_pos_diff = b_bit_pos - a_bit_pos;\n    return a_bit_pos_diff == b_bit_pos_diff;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = differ_At_One_Bit_Pos;",
            "assert.deepEqual(candidate(13, 9),true);",
            "assert.deepEqual(candidate(15, 8),false);",
            "assert.deepEqual(candidate(2, 4),false);",
            "assert.deepEqual(candidate(2, 3),true);",
            "assert.deepEqual(candidate(5, 1),true);",
            "assert.deepEqual(candidate(1, 5),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "70",
        "title": "get_equal",
        "text": "Write a function to find whether all the given arrays have equal length or not.",
        "code": "function get_equal(Input: number[][]): boolean {\n    var result = true;\n    for (var i = 0; i < Input.length; i++) {\n        if (Input[i].length!= Input[i].length) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_equal;",
            "assert.deepEqual(candidate([[11, 22, 33], [44, 55, 66]]),true);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6, 7]]),false);",
            "assert.deepEqual(candidate([[1, 2], [3, 4]]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "71",
        "title": "comb_sort",
        "text": "Write a function to sort an array of elements.",
        "code": "function comb_sort(nums: number[]): number[] {\n    let sorted = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = comb_sort;",
            "assert.deepEqual(candidate([5, 15, 37, 25, 79]),[5, 15, 25, 37, 79]);",
            "assert.deepEqual(candidate([41, 32, 15, 19, 22]),[15, 19, 22, 32, 41]);",
            "assert.deepEqual(candidate([99, 15, 13, 47]),[13, 15, 47, 99]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "720",
        "title": "add_dict_to_tuple",
        "text": "Write a function to add an object to the array. The output should be an array.",
        "code": "function add_dict_to_tuple(test_tup: [number, number, number], test_dict: {[key: string]: number}): [number, number, number, {[key: string]: number}] {\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[key])\n    //Add a new element to the array.\n    test_tup.push(test_dict[\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_dict_to_tuple;",
            "assert.deepEqual(candidate([4, 5, 6], {\"MSAM\": 1, \"is\": 2, \"best\": 3}),[4, 5, 6, {\"MSAM\": 1, \"is\": 2, \"best\": 3}]);",
            "assert.deepEqual(candidate([1, 2, 3], {\"UTS\": 2, \"is\": 3, \"Worst\": 4}),[1, 2, 3, {\"UTS\": 2, \"is\": 3, \"Worst\": 4}]);",
            "assert.deepEqual(candidate([8, 9, 10], {\"POS\": 3, \"is\": 4, \"Okay\": 5}),[8, 9, 10, {\"POS\": 3, \"is\": 4, \"Okay\": 5}]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "721",
        "title": "maxAverageOfPath",
        "text": "Given a square matrix of size N*N given as an array of arrays, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "code": "function maxAverageOfPath(cost: number[][]): number {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCost = 0;\n  for (let i = 0; i < cost.length; i++) {\n    let costIndex = cost[i][0];\n    let costValue = cost[i][1];\n    if (costIndex > maxIndex) {\n      maxIndex = costIndex;\n      max = costValue;\n    }\n  }\n  return max;\n}\n\nfunction maxAverageOfPath(cost: number[][]): number {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCost = 0;\n  for (let i = 0; i < cost.length; i++) {\n    let costIndex = cost[i][0];\n    let costValue = cost[i][1];\n    if (costIndex > maxIndex) {\n      maxIndex = costIndex;\n      max = costValue;\n    }\n  }\n  return max;\n}\n\nfunction maxAverageOfPath(cost: number[][]): number {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCost = 0;\n  for (let i = 0; i < cost.length; i++) {\n    let costIndex = cost[i][0];\n    let costValue = cost[i][1];\n    if (costIndex > maxIndex) {\n      maxIndex = costIndex;\n      max = costValue;\n    }\n  }\n  return max;\n}\n\nfunction maxAverageOfPath(cost: number[][]): number {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCost = 0;\n  for (let i = 0; i < cost.length; i++) {\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = maxAverageOfPath;",
            "assert.deepEqual(candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]),5.2);",
            "assert.deepEqual(candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]),6.2);",
            "assert.deepEqual(candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]),7.2);",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),5.8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "723",
        "title": "count_same_pair",
        "text": "The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.",
        "code": "function count_same_pair(nums1: number[], nums2: number[]): number {\n    let count = 0;\n    for (let i = 0; i < nums1.length; i++) {\n        if (nums1[i] === nums2[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_same_pair;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]),4);",
            "assert.deepEqual(candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),11);",
            "assert.deepEqual(candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]),1);",
            "assert.deepEqual(candidate([0, 1, 1, 2], [0, 1, 2, 2]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "724",
        "title": "power_base_sum",
        "text": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "code": "function power_base_sum(base: number, power: number): number {\n    let sum = 0;\n    for (let i = 0; i < base.length; i++) {\n        sum += base[i] * Math.pow(power, i);\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = power_base_sum;",
            "assert.deepEqual(candidate(2, 100),115);",
            "assert.deepEqual(candidate(8, 10),37);",
            "assert.deepEqual(candidate(8, 15),62);",
            "assert.deepEqual(candidate(3, 3),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "725",
        "title": "extract_quotation",
        "text": "Write a function to extract values between quotation marks \" \" of the given string.",
        "code": "function extract_quotation(text1: string): any[] {\n    let text2 = text1.split(\" \");\n    let result = [];\n    for (let i = 0; i < text2.length; i++) {\n        if (text2[i] === \" \") {\n            result.push(text2[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_quotation;",
            "assert.deepEqual(candidate(\"Cortex \"A53\" Based \"multi\" tasking \"Processor\"\"),[\"A53\", \"multi\", \"Processor\"]);",
            "assert.deepEqual(candidate(\"Cast your \"favorite\" entertainment \"apps\"\"),[\"favorite\", \"apps\"]);",
            "assert.deepEqual(candidate(\"Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support\"),[\"4k Ultra HD\", \"HDR 10\"]);",
            "assert.deepEqual(candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\"),[]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "726",
        "title": "multiply_elements",
        "text": "Write a function that takes as input an array of numbers (t_1,...,t_{N+1}) and returns an array of length N where the i-th element of the array is equal to t_i * t_{i+1}.",
        "code": "function multiply_elements(test_tup: number[]): any[] {\n    let t_1 = test_tup[0];\n    let t_2 = test_tup[1];\n    let t_3 = test_tup[2];\n    let t_4 = test_tup[3];\n    let t_5 = test_tup[4];\n    let t_6 = test_tup[5];\n    let t_7 = test_tup[6];\n    let t_8 = test_tup[7];\n    let t_9 = test_tup[8];\n    let t_10 = test_tup[9];\n    let t_11 = test_tup[10];\n    let t_12 = test_tup[11];\n    let t_13 = test_tup[12];\n    let t_14 = test_tup[13];\n    let t_15 = test_tup[14];\n    let t_16 = test_tup[15];\n    let t_17 = test_tup[16];\n    let t_18 = test_tup[17];\n    let t_19 = test_tup[18];\n    let t_20 = test_tup[19];\n    let t_21 = test_tup[20];\n    let t_22 = test_tup[21];\n    let t_23 = test_tup[22];\n    let t_24 = test_tup[23];\n    let t_25 = test_tup[24];\n    let t_26 = test_tup[25];\n    let t_27 = test_tup[26];\n    let t_28 = test_tup[27];\n    let t_29 = test_tup[28];\n    let t_30 = test_tup[29];\n    let t_31 = test_tup[30];\n    let t_32 =\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = multiply_elements;",
            "assert.deepEqual(candidate([1, 5, 7, 8, 10]),[5, 35, 56, 80]);",
            "assert.deepEqual(candidate([2, 4, 5, 6, 7]),[8, 20, 30, 42]);",
            "assert.deepEqual(candidate([12, 13, 14, 9, 15]),[156, 182, 126, 135]);",
            "assert.deepEqual(candidate([12]),[]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "728",
        "title": "sum_list",
        "text": "Write a function takes as input two arrays [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "code": "function sum_list(lst1: number[], lst2: number[]): number[] {\n    var sum = 0;\n    for (var i = 0; i < lst1.length; i++) {\n        sum += lst1[i] + lst2[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_list;",
            "assert.deepEqual(candidate([10, 20, 30], [15, 25, 35]),[25, 45, 65]);",
            "assert.deepEqual(candidate([1, 2, 3], [5, 6, 7]),[6, 8, 10]);",
            "assert.deepEqual(candidate([15, 20, 30], [15, 45, 75]),[30, 65, 105]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "72",
        "title": "dif_Square",
        "text": "Write a tsthon function to check whether the given number can be represented as the difference of two squares or not.",
        "code": "function dif_Square(n: number): boolean {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n    }\n    if (n == 2) {\n        return false;\n    }\n    if (n == 3) {\n        return false;\n    }\n    if (n == 4) {\n        return false;\n    }\n    if (n == 5) {\n        return false;\n    }\n    if (n == 6) {\n        return false;\n    }\n    if (n == 7) {\n        return false;\n    }\n    if (n == 8) {\n        return false;\n    }\n    if (n == 9) {\n        return false;\n    }\n    if (n == 10) {\n        return false;\n    }\n    if (n == 11) {\n        return false;\n    }\n    if (n == 12) {\n        return false;\n    }\n    if (n == 13) {\n        return false;\n    }\n    if (n == 14) {\n        return false;\n    }\n    if (n == 15) {\n        return false;\n    }\n    if (n == 16) {\n        return false;\n    }\n    if (n == 17) {\n        return false;\n    }\n    if (n == 18) {\n        return false;\n    }\n    if (n == 19) {\n        return false;\n    }\n    if (n == 20) {\n        return false;\n    }\n    if (n == 21) {\n        return false;\n    }\n    if (n == 22) {\n        return false;\n    }\n    if (n == 23) {\n        return false;\n    }\n    if (n == 24) {\n        return false;\n    }\n    if (n == 25) {\n        return false;\n    }\n    if (n == 26) {\n        return false;\n    }\n    if (n == 27) {\n        return false;\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = dif_Square;",
            "assert.deepEqual(candidate(5),true);",
            "assert.deepEqual(candidate(10),false);",
            "assert.deepEqual(candidate(15),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "730",
        "title": "consecutive_duplicates",
        "text": "Write a function to remove consecutive duplicates of a given array.",
        "code": "function consecutive_duplicates(nums: any[]): any[] {\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] === nums[i - 1]) {\n            result.push(nums[i]);\n        } else {\n            result.push(nums[i]);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = consecutive_duplicates;",
            "assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]);",
            "assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[10, 15, 19, 18, 17, 26, 17, 18, 10]);",
            "assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[\"a\", \"b\", \"c\", \"d\"]);",
            "assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"]),[\"a\", \"b\", \"c\", \"d\", \"a\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "731",
        "title": "lateralsurface_cone",
        "text": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "code": "function lateralsurface_cone(r: number, h: number): number {\n    //Calculate the lateral surface area of a cone given radius r and height h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by r and h.\n    //The result is the lateral surface area of the cone given by\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lateralsurface_cone;",
            "assert.deepEqual(candidate(5, 12),204.20352248333654);",
            "assert.deepEqual(candidate(10, 15),566.3586699569488);",
            "assert.deepEqual(candidate(19, 17),1521.8090132193388);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "732",
        "title": "replace_specialchar",
        "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "code": "function replace_specialchar(text: string): string {\n    return text.replace(/[\\s\\,\\(\\)\\[\\]\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{\\}\\{}\\{\\}\\{\\}\\{\\}\\{}\\{\\}\\{\\}\\n\\}/g, \": \");\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = replace_specialchar;",
            "assert.deepEqual(candidate(\"Python language, Programming language.\"),\"Python:language::Programming:language:\");",
            "assert.deepEqual(candidate(\"a b c,d e f\"),\"a:b:c:d:e:f\");",
            "assert.deepEqual(candidate(\"ram reshma,ram rahim\"),\"ram:reshma:ram:rahim\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "733",
        "title": "find_first_occurrence",
        "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "code": "function find_first_occurrence(A: number[], x: number): number {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    \n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_first_occurrence;",
            "assert.deepEqual(candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5),1);",
            "assert.deepEqual(candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5),2);",
            "assert.deepEqual(candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "734",
        "title": "sum_Of_Subarray_Prod",
        "text": "Write a tsthon function to find sum of products of all possible subarrays of a given array. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/",
        "code": "function sum_Of_Subarray_Prod(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_Of_Subarray_Prod;",
            "assert.deepEqual(candidate([1, 2, 3]),20);",
            "assert.deepEqual(candidate([1, 2]),5);",
            "assert.deepEqual(candidate([1, 2, 3, 4]),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "735",
        "title": "toggle_middle_bits",
        "text": "Write a tsthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/",
        "code": "function toggle_middle_bits(n: number): number {\n    var middle_bits = n.toString(2)\n    var first_bit = middle_bits.indexOf('0')\n    var last_bit = middle_bits.indexOf('1')\n    var middle_bits_to_toggle = middle_bits.slice(first_bit + 1, last_bit)\n    return middle_bits_to_toggle.join('0')\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = toggle_middle_bits;",
            "assert.deepEqual(candidate(9),15);",
            "assert.deepEqual(candidate(10),12);",
            "assert.deepEqual(candidate(11),13);",
            "assert.deepEqual(candidate(65),127);",
            "assert.deepEqual(candidate(77),115);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "736",
        "title": "left_insertion",
        "text": "Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/tsthon-exercises/data-structures-and-algorithms/tsthon-data-structure-exercise-24.php",
        "code": "function left_insertion(a: number[], x: number): number {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r =\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = left_insertion;",
            "assert.deepEqual(candidate([1, 2, 4, 5], 6),4);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 3),2);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 7),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "737",
        "title": "check_str",
        "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "code": "function check_str(string: string): boolean {\n    return string.match(/^[a-z]$/)\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_str;",
            "assert.deepEqual(candidate(\"annie\"),true);",
            "assert.deepEqual(candidate(\"dawood\"),false);",
            "assert.deepEqual(candidate(\"Else\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "738",
        "title": "geometric_sum",
        "text": "Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/tsthon-exercises/data-structures-and-algorithms/tsthon-recursion-exercise-9.php",
        "code": "function geometric_sum(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = geometric_sum;",
            "assert.deepEqual(candidate(7),1.9921875);",
            "assert.deepEqual(candidate(4),1.9375);",
            "assert.deepEqual(candidate(8),1.99609375);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "739",
        "title": "find_Index",
        "text": "Write a tsthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/",
        "code": "function find_Index(n: number): number {\n    let index = 0;\n    let max = n;\n    let min = n;\n    let sum = 0;\n    let temp = 0;\n    let temp2 = 0;\n    let temp3 = 0;\n    let temp4 = 0;\n    let temp5 = 0;\n    let temp6 = 0;\n    let temp7 = 0;\n    let temp8 = 0;\n    let temp9 = 0;\n    let temp10 = 0;\n    let temp11 = 0;\n    let temp12 = 0;\n    let temp13 = 0;\n    let temp14 = 0;\n    let temp15 = 0;\n    let temp16 = 0;\n    let temp17 = 0;\n    let temp18 = 0;\n    let temp19 = 0;\n    let temp20 = 0;\n    let temp21 = 0;\n    let temp22 = 0;\n    let temp23 = 0;\n    let temp24 = 0;\n    let temp25 = 0;\n    let temp26 = 0;\n    let temp27 = 0;\n    let temp28 = 0;\n    let temp29 = 0;\n    let temp30 = 0;\n    let temp31 = 0;\n    let temp32 = 0;\n    let temp33 = 0;\n    let temp34 = 0;\n    let temp35 = 0;\n    let temp36 = 0;\n    let temp37 = 0;\n    let temp38 = 0;\n    let temp39 = 0;\n    let temp40 = 0;\n    let temp41 = 0;\n    let temp42 = 0;\n    let temp43 = 0;\n    let temp44 = 0;\n    let temp45 = 0;\n    let temp46 = 0;\n    let temp47 = 0;\n    let temp48 = 0;\n    let temp49 = 0;\n    let temp50 = 0;\n    let temp51 = 0;\n    let temp52 = 0;\n    let temp53 = 0;\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Index;",
            "assert.deepEqual(candidate(2),4);",
            "assert.deepEqual(candidate(3),14);",
            "assert.deepEqual(candidate(4),45);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "740",
        "title": "tuple_to_dict",
        "text": "Write a function to convert the given array to a key-value object using adjacent elements. https://www.geeksforgeeks.org/tsthon-convert-array-to-adjacent-pair-object/",
        "code": "function tuple_to_dict(test_tup: [number, number, number, number, number, number]): {[key: number]: number} {\n    [key: number]: number\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_to_dict;",
            "assert.deepEqual(candidate([1, 5, 7, 10, 13, 5]),{1: 5, 7: 10, 13: 5});",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),{1: 2, 3: 4, 5: 6});",
            "assert.deepEqual(candidate([7, 8, 9, 10, 11, 12]),{7: 8, 9: 10, 11: 12});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "741",
        "title": "all_Characters_Same",
        "text": "Write a tsthon function to check whether all the characters are same or not.",
        "code": "function all_Characters_Same(s: string): boolean {\n    var result = true;\n    for (var i = 0; i < s.length; i++) {\n        if (s.charAt(i)!= s.charAt(i)) {\n            result = false;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = all_Characters_Same;",
            "assert.deepEqual(candidate(\"python\"),false);",
            "assert.deepEqual(candidate(\"aaa\"),true);",
            "assert.deepEqual(candidate(\"data\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "742",
        "title": "area_tetrahedron",
        "text": "Write a function to caluclate the area of a tetrahedron.",
        "code": "function area_tetrahedron(side: number): number {\n    let x = side;\n    let y = side;\n    let z = side;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = area_tetrahedron;",
            "assert.deepEqual(candidate(3),15.588457268119894);",
            "assert.deepEqual(candidate(20),692.8203230275509);",
            "assert.deepEqual(candidate(10),173.20508075688772);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "743",
        "title": "rotate_right",
        "text": "Write a function to rotate a given array by specified number of items to the right direction. https://www.geeksforgeeks.org/tsthon-program-right-rotate-array-n/",
        "code": "function rotate_right(list: number[], m: number): number[] {\n  let result = [];\n  let i = list.length - 1;\n  let j = list.length - 1;\n  let k = list.length - 1;\n  let temp = list[i];\n  while (i >= 0 && j >= 0 && k >= 0) {\n    if (list[i] < temp) {\n      result.push(list[i]);\n      i--;\n    } else if (list[i] > temp) {\n      result.push(list[i]);\n      j--;\n    } else if (list[i] > temp) {\n      result.push(list[i]);\n      k--;\n    } else {\n      result.push(list[i]);\n      i--;\n      j--;\n      k--;\n    }\n  }\n  return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rotate_right;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3),[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2),[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5),[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "744",
        "title": "check_none",
        "text": "Write a function to check if the given array has any none value or not.",
        "code": "function check_none(test_tup: any): boolean {\n    return test_tup.length == 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_none;",
            "assert.deepEqual(candidate([10, 4, 5, 6, undefined]),true);",
            "assert.deepEqual(candidate([7, 8, 9, 11, 14]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, undefined]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "745",
        "title": "divisible_by_digits",
        "text": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/tsthon-exercises/lambda/tsthon-lambda-exercise-24.php",
        "code": "function divisible_by_digits(startnum: number, endnum: number): number[] {\n    let nums = [];\n    let start = startnum;\n    let end = endnum;\n    let i = 0;\n    while (i < end - start) {\n        if (startnum % 10 === 0) {\n            nums.push(startnum);\n            start = startnum;\n        }\n        else {\n            start = startnum;\n        }\n        i++;\n    }\n    return nums;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = divisible_by_digits;",
            "assert.deepEqual(candidate(1, 22),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);",
            "assert.deepEqual(candidate(1, 15),[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);",
            "assert.deepEqual(candidate(20, 25),[22, 24]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "746",
        "title": "sector_area",
        "text": "Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return undefined if the angle is larger than 360 degrees.",
        "code": "function sector_area(r: number, a: number): number | undefined {\n  return Math.PI * r * r * r;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sector_area;",
            "assert.deepEqual(candidate(4, 45),6.283185307179586);",
            "assert.deepEqual(candidate(9, 45),31.808625617596654);",
            "assert.deepEqual(candidate(9, 361),undefined);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "747",
        "title": "lcs_of_three",
        "text": "Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/",
        "code": "function lcs_of_three(X: string, Y: string, Z: string): number {\n  var x = 0, y = 0, z = 0;\n  var lcs = [];\n  for (var i = 0; i < X.length; i++) {\n    if (X[i] == Y[0] && X[i] == Z[0]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[1] && X[i] == Z[1]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[2] && X[i] == Z[2]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[3] && X[i] == Z[3]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[4] && X[i] == Z[4]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[5] && X[i] == Z[5]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[6] && X[i] == Z[6]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[7] && X[i] == Z[7]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[8] && X[i] == Z[8]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[9] && X[i] == Z[9]) {\n      lcs.push(i);\n    }\n    if (X[i] == Y[10] && X[i] == Z[10]) {\n      lcs.push(i);\n    }\n    if (X[i] ==\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = lcs_of_three;",
            "assert.deepEqual(candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"),2);",
            "assert.deepEqual(candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"),5);",
            "assert.deepEqual(candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "748",
        "title": "capital_words_spaces",
        "text": "Write a function to put spaces between words starting with capital letters in a given string.",
        "code": "function capital_words_spaces(str1: string): string {\n    var str2 = str1.split(\" \");\n    var str3 = str2.join(\" \");\n    return str3;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = capital_words_spaces;",
            "assert.deepEqual(candidate(\"Python\"),\"Python\");",
            "assert.deepEqual(candidate(\"PythonProgrammingExamples\"),\"Python Programming Examples\");",
            "assert.deepEqual(candidate(\"GetReadyToBeCodingFreak\"),\"Get Ready To Be Coding Freak\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "749",
        "title": "sort_numeric_strings",
        "text": "Write a function to sort a given array of strings of numbers numerically. https://www.geeksforgeeks.org/tsthon-sort-numeric-strings-in-a-array/",
        "code": "function sort_numeric_strings(nums_str: string[]): number[] {\n    nums_str.sort();\n    return nums_str;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sort_numeric_strings;",
            "assert.deepEqual(candidate([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"]),[-500, -12, 0, 4, 7, 12, 45, 100, 200]);",
            "assert.deepEqual(candidate([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"]),[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]);",
            "assert.deepEqual(candidate([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"]),[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "74",
        "title": "is_samepatterns",
        "text": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code": "function is_samepatterns(colors: string[], patterns: string[]): boolean {\n    var i = 0;\n    var j = 0;\n    var len = colors.length;\n    var pattern = patterns[0];\n    var pattern_len = pattern.length;\n    var pattern_i = 0;\n    var pattern_j = 0;\n    var pattern_len_i = 0;\n    var pattern_len_j = 0;\n    var pattern_i_len = 0;\n    var pattern_j_len = 0;\n    var pattern_i_len_i = 0;\n    var pattern_i_len_j = 0;\n    var pattern_j_len_i = 0;\n    var pattern_j_len_j = 0;\n    var pattern_i_len_i_len = 0;\n    var pattern_i_len_j_len = 0;\n    var pattern_j_len_i_len = 0;\n    var pattern_j_len_j_len = 0;\n    var pattern_i_len_i_len_i = 0;\n    var pattern_i_len_i_len_j = 0;\n    var pattern_i_len_i_len_j_len = 0;\n    var pattern_j_len_i_len_i_len = 0;\n    var pattern_j_len_i_len_j_len_i = 0;\n    var pattern_j_len_i_len_j_len_i_len = 0;\n    var pattern_j_len_i_len_j_len_i_len_j = 0;\n    var pattern_j_len_i_len_j_len_i_len_j_len = 0;\n    var pattern_j_len_i_len_j_len_i_len_j_len_i_len = 0;\n    var pattern_j_len_i_len_j_len_i_len_j_len_i_len_j_len = 0;\n    var pattern_j_len_i_len_j_len_i_len_j_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_samepatterns;",
            "assert.deepEqual(candidate([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]),true);",
            "assert.deepEqual(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]),false);",
            "assert.deepEqual(candidate([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "750",
        "title": "add_tuple",
        "text": "Write a function to add the given array to the given array.",
        "code": "function add_tuple(test_list: number[], test_tup: [number, number]): number[] {\n    let new_list = [];\n    for (let i = 0; i < test_list.length; i++) {\n        new_list.push(test_list[i]);\n    }\n    return new_list;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = add_tuple;",
            "assert.deepEqual(candidate([5, 6, 7], [9, 10]),[5, 6, 7, 9, 10]);",
            "assert.deepEqual(candidate([6, 7, 8], [10, 11]),[6, 7, 8, 10, 11]);",
            "assert.deepEqual(candidate([7, 8, 9], [11, 12]),[7, 8, 9, 11, 12]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "751",
        "title": "check_min_heap",
        "text": "Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/",
        "code": "function check_min_heap(arr: number[]): boolean {\n    var min_heap = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < arr[i + 1]) {\n            min_heap.push(arr[i]);\n        } else {\n            min_heap.push(arr[i]);\n        }\n    }\n    return min_heap.length > 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_min_heap;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);",
            "assert.deepEqual(candidate([2, 3, 4, 5, 10, 15]),true);",
            "assert.deepEqual(candidate([2, 10, 4, 5, 3, 15]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "752",
        "title": "jacobsthal_num",
        "text": "Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...",
        "code": "function jacobsthal_num(n: number): number {\n    if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return 2;\n    }\n    if (n == 2) {\n        return 3;\n    }\n    if (n == 3) {\n        return 4;\n    }\n    if (n == 4) {\n        return 5;\n    }\n    if (n == 5) {\n        return 6;\n    }\n    if (n == 6) {\n        return 7;\n    }\n    if (n == 7) {\n        return 8;\n    }\n    if (n == 8) {\n        return 9;\n    }\n    if (n == 9) {\n        return 10;\n    }\n    if (n == 10) {\n        return 11;\n    }\n    if (n == 11) {\n        return 12;\n    }\n    if (n == 12) {\n        return 13;\n    }\n    if (n == 13) {\n        return 14;\n    }\n    if (n == 14) {\n        return 15;\n    }\n    if (n == 15) {\n        return 16;\n    }\n    if (n == 16) {\n        return 17;\n    }\n    if (n == 17) {\n        return 18;\n    }\n    if (n == 18) {\n        return 19;\n    }\n    if (n == 19) {\n        return 20;\n    }\n    if (n == 20) {\n        return 21;\n    }\n    if (n == 21) {\n        return 22;\n    }\n    if (n == 22) {\n        return 23;\n    }\n    if (n == 23) {\n        return 24;\n    }\n    if (n == 24) {\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = jacobsthal_num;",
            "assert.deepEqual(candidate(5),11);",
            "assert.deepEqual(candidate(2),1);",
            "assert.deepEqual(candidate(4),5);",
            "assert.deepEqual(candidate(13),2731);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "753",
        "title": "min_k",
        "text": "Write a function to find minimum k records from array array. https://www.geeksforgeeks.org/tsthon-find-minimum-k-records-from-array-array/ - in this case a verbatim cots of test cases",
        "code": "function min_k(test_list: [string, number][], K: number): [string, number][] {\n    let min_k = [];\n    let k = 0;\n    let i = 0;\n    let j = 0;\n    let k_list = [];\n    let k_list_length = 0;\n    let k_list_index = 0;\n    let k_list_index_max = 0;\n    let k_list_index_min = 0;\n    let k_list_index_min_max = 0;\n    let k_list_index_min_max_length = 0;\n    let k_list_index_min_max_length_length = 0;\n    let k_list_index_min_max_length_length_length = 0;\n    let k_list_index_min_max_length_length_length_length = 0;\n    let k_list_index_min_max_length_length_length_length_length = 0;\n    let k_list_index_min_max_length_length_length_length_length_length = 0;\n    let k_list_index_min_max_length_length_length_length_length_length_length_length = 0;\n    let k_list_index_min_max_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = min_k;",
            "assert.deepEqual(candidate([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2),[[\"Akash\", 2], [\"Akshat\", 4]]);",
            "assert.deepEqual(candidate([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3),[[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]]);",
            "assert.deepEqual(candidate([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1),[[\"Ayesha\", 9]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "754",
        "title": "extract_index_list",
        "text": "We say that an element is common for arrays l1, l2, l3 if it appears in all three arrays under the same index. Write a function to find common elements from three arrays. The function should return an array.",
        "code": "function extract_index_list(l1: number[], l2: number[], l3: number[]): any[] {\n    let index_list = [];\n    let index_list_length = 0;\n    for (let i = 0; i < l1.length; i++) {\n        if (l2.indexOf(l1[i])!== -1) {\n            index_list.push(i);\n            index_list_length++;\n        }\n    }\n    for (let i = 0; i < l2.length; i++) {\n        if (l3.indexOf(l2[i])!== -1) {\n            index_list.push(i);\n            index_list_length++;\n        }\n    }\n    return index_list;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = extract_index_list;",
            "assert.deepEqual(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 7]);",
            "assert.deepEqual(candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]),[1, 6]);",
            "assert.deepEqual(candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[1, 5]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]),[]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "755",
        "title": "second_smallest",
        "text": "Write a function to find the second smallest number in an array.",
        "code": "function second_smallest(numbers: number| number[]): number | undefined {\n    let smallest = numbers[0];\n    let second_smallest = numbers[1];\n    for (let i = 2; i < numbers.length; i++) {\n        if (smallest < numbers[i]) {\n            smallest = numbers[i];\n            second_smallest = numbers[i];\n        }\n    }\n    return smallest;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = second_smallest;",
            "assert.deepEqual(candidate([1, 2, -8, -2, 0, -2]),-2);",
            "assert.deepEqual(candidate([1, 1, -0.5, 0, 2, -2, -2]),-0.5);",
            "assert.deepEqual(candidate([2, 2]),undefined);",
            "assert.deepEqual(candidate([2, 2, 2]),undefined);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "756",
        "title": "text_match_zero_one",
        "text": "Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/tsthon-exercises/re/tsthon-re-exercise-3.php",
        "code": "function text_match_zero_one(text: string): boolean {\n    return text.match(/^\\s*a\\s*b\\s*$/);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_zero_one;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abbbba\"),true);",
            "assert.deepEqual(candidate(\"dsabbbba\"),true);",
            "assert.deepEqual(candidate(\"asbbbba\"),false);",
            "assert.deepEqual(candidate(\"abaaa\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "757",
        "title": "count_reverse_pairs",
        "text": "Write a function to count the pairs of reverse strings in the given string array. https://www.geeksforgeeks.org/tsthon-program-to-count-the-pairs-of-reverse-strings/",
        "code": "function count_reverse_pairs(test_list: string[]): number {\n    var count = 0;\n    for (var i = 0; i < test_list.length; i++) {\n        var test = test_list[i];\n        if (test.charAt(0) == test.charAt(test.length - 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_reverse_pairs;",
            "assert.deepEqual(candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]),2);",
            "assert.deepEqual(candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]),1);",
            "assert.deepEqual(candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "759",
        "title": "is_decimal",
        "text": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "code": "function is_decimal(num: string): boolean {\n  return num.match(/^\\d+$/)\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_decimal;",
            "assert.deepEqual(candidate(\"123.11\"),true);",
            "assert.deepEqual(candidate(\"e666.86\"),false);",
            "assert.deepEqual(candidate(\"3.124587\"),false);",
            "assert.deepEqual(candidate(\"1.11\"),true);",
            "assert.deepEqual(candidate(\"1.1.11\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "75",
        "title": "find_tuples",
        "text": "Write a function to find arrays which have all elements divisible by k from the given array of arrays.",
        "code": "function find_tuples(test_list: [number, number, number][], K: number): [number, number, number][] {\n    let result = [];\n    let k = K;\n    for (let i = 0; i < test_list.length; i++) {\n        let test_list_i = test_list[i];\n        let test_list_i_k = test_list_i;\n        let test_list_i_k_k = test_list_i;\n        let test_list_i_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k_k_k_k_k_k_k_k = test_list_i;\n        let test_list_i_k_k_k_k_k_k_k_k_k_k_k_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_tuples;",
            "assert.deepEqual(candidate([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6),[[6, 24, 12]]);",
            "assert.deepEqual(candidate([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5),[[5, 25, 30]]);",
            "assert.deepEqual(candidate([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4),[[8, 16, 4]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "760",
        "title": "unique_Element",
        "text": "Write a tsthon function to check whether an array of numbers contains only one distinct element or not.",
        "code": "function unique_Element(arr: number[]): boolean {\n    var count = 0;\n    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === arr[i]) {\n            count++;\n        }\n    }\n    return count === 1;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = unique_Element;",
            "assert.deepEqual(candidate([1, 1, 1]),true);",
            "assert.deepEqual(candidate([1, 2, 1, 2]),false);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "762",
        "title": "check_monthnumber_number",
        "text": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "code": "function check_monthnumber_number(monthnum3: number): boolean {\n    return monthnum3 % 12 == 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_monthnumber_number;",
            "assert.deepEqual(candidate(6),true);",
            "assert.deepEqual(candidate(2),false);",
            "assert.deepEqual(candidate(12),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "763",
        "title": "find_min_diff",
        "text": "Write a tsthon function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/",
        "code": "function find_min_diff(arr: number[], n: number): number {\n    let min = arr[0];\n    let max = arr[0];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let temp = 0;\n    let temp2 = 0;\n    let temp3 = 0;\n    let temp4 = 0;\n    let temp5 = 0;\n    let temp6 = 0;\n    let temp7 = 0;\n    let temp8 = 0;\n    let temp9 = 0;\n    let temp10 = 0;\n    let temp11 = 0;\n    let temp12 = 0;\n    let temp13 = 0;\n    let temp14 = 0;\n    let temp15 = 0;\n    let temp16 = 0;\n    let temp17 = 0;\n    let temp18 = 0;\n    let temp19 = 0;\n    let temp20 = 0;\n    let temp21 = 0;\n    let temp22 = 0;\n    let temp23 = 0;\n    let temp24 = 0;\n    let temp25 = 0;\n    let temp26 = 0;\n    let temp27 = 0;\n    let temp28 = 0;\n    let temp29 = 0;\n    let temp30 = 0;\n    let temp31 = 0;\n    let temp32 = 0;\n    let temp33 = 0;\n    let temp34 = 0;\n    let temp35 = 0;\n    let temp36 = 0;\n    let temp37 = 0;\n    let temp38 = 0;\n    let temp39 = 0;\n    let temp40 = 0;\n    let temp41 = 0;\n    let temp42 = 0;\n    let temp43 = 0;\n    let temp44 = 0;\n    let temp45 = 0;\n    let temp46 = 0;\n    let temp47 = 0;\n    let temp48 = 0;\n    let temp49 = 0;\n    let temp50 = 0;\n    let temp51 = 0;\n    let temp52 =\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_min_diff;",
            "assert.deepEqual(candidate([1, 5, 3, 19, 18, 25], 6),1);",
            "assert.deepEqual(candidate([4, 3, 2, 6], 4),1);",
            "assert.deepEqual(candidate([30, 5, 20, 9], 4),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "764",
        "title": "number_ctr",
        "text": "Write a tsthon function to count number of digits in a given string.",
        "code": "function number_ctr(str: string): number {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] == '0') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = number_ctr;",
            "assert.deepEqual(candidate(\"program2bedone\"),1);",
            "assert.deepEqual(candidate(\"3wonders\"),1);",
            "assert.deepEqual(candidate(\"123\"),3);",
            "assert.deepEqual(candidate(\"3wond-1ers2\"),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "765",
        "title": "is_polite",
        "text": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "code": "function is_polite(n: number): number {\n    if (n < 1) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return 2;\n    }\n    return 3;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_polite;",
            "assert.deepEqual(candidate(7),11);",
            "assert.deepEqual(candidate(4),7);",
            "assert.deepEqual(candidate(9),13);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "766",
        "title": "pair_wise",
        "text": "Write a function to return an array of all pairs of consecutive items in a given array.",
        "code": "function pair_wise(l1: number[]): [number, number][] {\n    let res = [];\n    let i = 0;\n    let j = 0;\n    while (i < l1.length && j < l1.length) {\n        if (l1[i] < l1[j]) {\n            res.push([l1[i], l1[j]]);\n            i++;\n        } else {\n            res.push([l1[i], l1[j]]);\n            j++;\n        }\n    }\n    return res;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pair_wise;",
            "assert.deepEqual(candidate([1, 1, 2, 3, 3, 4, 4, 5]),[[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]);",
            "assert.deepEqual(candidate([1, 5, 7, 9, 10]),[[1, 5], [5, 7], [7, 9], [9, 10]]);",
            "assert.deepEqual(candidate([5, 1, 9, 7, 10]),[[5, 1], [1, 9], [9, 7], [7, 10]]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "767",
        "title": "get_pairs_count",
        "text": "Write a tsthon function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input an array of numbers and the sum,",
        "code": "function get_pairs_count(arr: number[], sum: number): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] == sum) {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_pairs_count;",
            "assert.deepEqual(candidate([1, 1, 1, 1], 2),6);",
            "assert.deepEqual(candidate([1, 5, 7, -1, 5], 6),3);",
            "assert.deepEqual(candidate([1, -2, 3], 1),1);",
            "assert.deepEqual(candidate([-1, -2, 3], -3),1);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "769",
        "title": "Diff",
        "text": "Write a tsthon function to get the difference between two arrays.",
        "code": "function Diff(li1: number[], li2: number[]): number[] {\n    let diff = [];\n    for (let i = 0; i < li1.length; i++) {\n        diff.push(li1[i] - li2[i]);\n    }\n    return diff;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Diff;",
            "assert.deepEqual(candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]),[10, 20, 30, 15]);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5], [6, 7, 1]),[2, 3, 4, 5, 6, 7]);",
            "assert.deepEqual(candidate([1, 2, 3], [6, 7, 1]),[2, 3, 6, 7]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "770",
        "title": "odd_num_sum",
        "text": "Write a tsthon function to find the sum of fourth power of first n odd natural numbers.",
        "code": "function odd_num_sum(n: number): number {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_num_sum;",
            "assert.deepEqual(candidate(2),82);",
            "assert.deepEqual(candidate(3),707);",
            "assert.deepEqual(candidate(4),3108);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "771",
        "title": "check_expression",
        "text": "Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/",
        "code": "function check_expression(exp: string): boolean {\n    var stack = [];\n    var stack_size = 0;\n    var stack_index = 0;\n    var stack_value = 0;\n    var stack_value_index = 0;\n    var stack_value_value = 0;\n    var stack_value_value_index = 0;\n    var stack_value_value_value = 0;\n    var stack_value_value_value_index = 0;\n    var stack_value_value_value_index_1 = 0;\n    var stack_value_value_value_index_2 = 0;\n    var stack_value_value_value_index_3 = 0;\n    var stack_value_value_value_index_4 = 0;\n    var stack_value_value_value_index_5 = 0;\n    var stack_value_value_value_index_6 = 0;\n    var stack_value_value_value_index_7 = 0;\n    var stack_value_value_value_index_8 = 0;\n    var stack_value_value_value_index_9 = 0;\n    var stack_value_value_value_index_10 = 0;\n    var stack_value_value_value_index_11 = 0;\n    var stack_value_value_value_index_12 = 0;\n    var stack_value_value_value_index_13 = 0;\n    var stack_value_value_value_index_14 = 0;\n    var stack_value_value_value_index_15 = 0;\n    var stack_value_value_value_index_16 = 0;\n    var stack_value_value_value_index_17 = 0;\n    var stack_value_value_value_index_18 = 0;\n    var stack_value_value_value_index_19 = 0;\n    var stack_value_value_value_index_20 = 0;\n    var stack_value_value_value_index_21 = 0;\n    var stack_value\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_expression;",
            "assert.deepEqual(candidate(\"{()}[{}]\"),true);",
            "assert.deepEqual(candidate(\"{()}[{]\"),false);",
            "assert.deepEqual(candidate(\"{()}[{}][]({})\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "772",
        "title": "remove_length",
        "text": "Write a function to remove all the words with k length in the given string.",
        "code": "function remove_length(test_str: string, K: number): string {\n    var result = '';\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str.charAt(i) == K) {\n            result += test_str.substring(0, i);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_length;",
            "assert.deepEqual(candidate(\"The person is most value tet\", 3),\"person is most value\");",
            "assert.deepEqual(candidate(\"If you told me about this ok\", 4),\"If you me about ok\");",
            "assert.deepEqual(candidate(\"Forces of darkeness is come into the play\", 4),\"Forces of darkeness is the\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "773",
        "title": "occurance_substring",
        "text": "Write a function to find the occurrence and position of the substrings within a string. Return undefined if there is no match.",
        "code": "function occurance_substring(text: string, pattern: string): [string, number, number] | undefined {\n    var matches = text.match(pattern);\n    if (matches) {\n        return [matches[0], matches[1], matches[2]];\n    }\n    return undefined;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = occurance_substring;",
            "assert.deepEqual(candidate(\"python programming, python language\", \"python\"),[\"python\", 0, 6]);",
            "assert.deepEqual(candidate(\"python programming,programming language\", \"programming\"),[\"programming\", 7, 18]);",
            "assert.deepEqual(candidate(\"python programming,programming language\", \"language\"),[\"language\", 31, 39]);",
            "assert.deepEqual(candidate(\"c++ programming, c++ language\", \"python\"),undefined);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "775",
        "title": "odd_position",
        "text": "Write a tsthon function to check whether every odd index contains odd numbers of a given array.",
        "code": "function odd_position(nums: number[]): boolean {\n    var odd = false;\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 1) {\n            odd =!odd;\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_position;",
            "assert.deepEqual(candidate([2, 1, 4, 3, 6, 7, 6, 3]),true);",
            "assert.deepEqual(candidate([4, 1, 2]),true);",
            "assert.deepEqual(candidate([1, 2, 3]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "776",
        "title": "count_vowels",
        "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
        "code": "function count_vowels(test_str: string): number {\n    var count = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] === 'a' || test_str[i] === 'e' || test_str[i] === 'i' || test_str[i] === 'o' || test_str[i] === 'u' || test_str[i] === 'y') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_vowels;",
            "assert.deepEqual(candidate(\"bestinstareels\"),7);",
            "assert.deepEqual(candidate(\"partofthejourneyistheend\"),12);",
            "assert.deepEqual(candidate(\"amazonprime\"),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "777",
        "title": "find_sum",
        "text": "Write a tsthon function to find the sum of non-repeated elements in a given array.",
        "code": "function find_sum(arr: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]!== arr[i]) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_sum;",
            "assert.deepEqual(candidate([1, 2, 3, 1, 1, 4, 5, 6]),21);",
            "assert.deepEqual(candidate([1, 10, 9, 4, 2, 10, 10, 45, 4]),71);",
            "assert.deepEqual(candidate([12, 10, 9, 45, 2, 10, 10, 45, 10]),78);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "778",
        "title": "pack_consecutive_duplicates",
        "text": "Write a function to pack consecutive duplicates of a given array elements into subarrays.",
        "code": "function pack_consecutive_duplicates(list1: any[]): any[][] {\n    let result = [];\n    let index = 0;\n    let length = list1.length;\n    for (let i = 0; i < length; i++) {\n        let element = list1[i];\n        if (index < length - 1) {\n            result.push(element);\n            index++;\n        } else {\n            result.push(element);\n            index = 0;\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = pack_consecutive_duplicates;",
            "assert.deepEqual(candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]),[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]);",
            "assert.deepEqual(candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]),[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]);",
            "assert.deepEqual(candidate([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"]),[[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "77",
        "title": "is_Diff",
        "text": "Write a tsthon function to find whether a number is divisible by 11.",
        "code": "function is_Diff(n: number): boolean {\n  return n % 11 == 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_Diff;",
            "assert.deepEqual(candidate(12345),false);",
            "assert.deepEqual(candidate(1212112),true);",
            "assert.deepEqual(candidate(1212),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "780",
        "title": "find_combinations",
        "text": "Write a function to find the combinations of sums with arrays in the given array array. https://www.geeksforgeeks.org/tsthon-combinations-of-sum-with-arrays-in-array-array/",
        "code": "function find_combinations(test_list: [number, number][]): [number, number][] {\n    let test_list_length = test_list.length;\n    let test_list_array = new Array(test_list_length);\n    let test_list_array_length = test_list_array.length;\n    let test_list_array_array = new Array(test_list_array_length);\n    let test_list_array_array_length = test_list_array_array.length;\n    let test_list_array_array_array = new Array(test_list_array_array_length);\n    let test_list_array_array_array_length = test_list_array_array_array.length;\n    let test_list_array_array_array_array = new Array(test_list_array_array_array_length);\n    let test_list_array_array_array_array_length = test_list_array_array_array_array.length;\n    let test_list_array_array_array_array_array = new Array(test_list_array_array_array_array_length);\n    let test_list_array_array_array_array_array_length = test_list_array_array_array_array_array.length;\n    let test_list_array_array_array_array_array_array = new Array(test_list_array_array_array_array_array_length);\n    let test_list_array_array_array_array_array_array_length = test_list_array_array_array_array_array.length;\n    let test_list_array_array_array_array_array_array_array = new Array(test_list_array_array_array_array_array_length);\n    let test_list_array_array_array_array_array_array_array_length = test_list_array_array_array_array_array_array.length;\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_combinations;",
            "assert.deepEqual(candidate([[2, 4], [6, 7], [5, 1], [6, 10]]),[[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]]);",
            "assert.deepEqual(candidate([[3, 5], [7, 8], [6, 2], [7, 11]]),[[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]]);",
            "assert.deepEqual(candidate([[4, 6], [8, 9], [7, 3], [8, 12]]),[[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "781",
        "title": "count_divisors",
        "text": "Write a tsthon function to check whether the count of divisors is even. https://www.w3resource.com/tsthon-exercises/basic/tsthon-basic-1-exercise-24.php",
        "code": "function count_divisors(n: number): boolean {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count === 1;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_divisors;",
            "assert.deepEqual(candidate(10),true);",
            "assert.deepEqual(candidate(100),false);",
            "assert.deepEqual(candidate(125),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "782",
        "title": "odd_length_sum",
        "text": "Write a tsthon function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/",
        "code": "function odd_length_sum(arr: number[]): number {\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 1) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = odd_length_sum;",
            "assert.deepEqual(candidate([1, 2, 4]),14);",
            "assert.deepEqual(candidate([1, 2, 1, 2]),15);",
            "assert.deepEqual(candidate([1, 7]),8);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "783",
        "title": "rgb_to_hsv",
        "text": "Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/",
        "code": "function rgb_to_hsv(r: number, g: number, b: number): number[] {\n    let hsv = [0, 0, 0];\n    let s = 0;\n    let v = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = rgb_to_hsv;",
            "assert.deepEqual(candidate(255, 255, 255),[0.0, 0.0, 100.0]);",
            "assert.deepEqual(candidate(0, 215, 0),[120.0, 100.0, 84.31372549019608]);",
            "assert.deepEqual(candidate(10, 215, 110),[149.26829268292684, 95.34883720930233, 84.31372549019608]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "784",
        "title": "mul_even_odd",
        "text": "Write a function to find the product of first even and odd number of a given array.",
        "code": "function mul_even_odd(list1: number[]): number {\n    var sum = 0;\n    for (var i = 0; i < list1.length; i++) {\n        sum += list1[i];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = mul_even_odd;",
            "assert.deepEqual(candidate([1, 3, 5, 7, 4, 1, 6, 8]),4);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),2);",
            "assert.deepEqual(candidate([1, 5, 7, 9, 10]),10);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "785",
        "title": "tuple_str_int",
        "text": "Write a function to convert array string to integer array.",
        "code": "function tuple_str_int(test_str: string): [number, number, number] {\n  let test_arr = test_str.split(',');\n  let test_arr_len = test_arr.length;\n  let test_arr_i = 0;\n  let test_arr_j = 0;\n  let test_arr_k = 0;\n  let test_arr_l = 0;\n  let test_arr_m = 0;\n  let test_arr_n = 0;\n  let test_arr_o = 0;\n  let test_arr_p = 0;\n  let test_arr_q = 0;\n  let test_arr_r = 0;\n  let test_arr_s = 0;\n  let test_arr_t = 0;\n  let test_arr_u = 0;\n  let test_arr_v = 0;\n  let test_arr_w = 0;\n  let test_arr_x = 0;\n  let test_arr_y = 0;\n  let test_arr_z = 0;\n  let test_arr_a = 0;\n  let test_arr_b = 0;\n  let test_arr_c = 0;\n  let test_arr_d = 0;\n  let test_arr_e = 0;\n  let test_arr_f = 0;\n  let test_arr_g = 0;\n  let test_arr_h = 0;\n  let test_arr_i = 0;\n  let test_arr_j = 0;\n  let test_arr_k = 0;\n  let test_arr_l = 0;\n  let test_arr_m = 0;\n  let test_arr_n = 0;\n  let test_arr_o = 0;\n  let test_arr_p = 0;\n  let test_arr_q = 0;\n  let test_arr_r = 0;\n  let test_arr_s = 0;\n  let test_arr_t = 0;\n  let test_arr_u = 0;\n  let test_arr_v = 0;\n  let test_arr_w\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tuple_str_int;",
            "assert.deepEqual(candidate(\"(7, 8, 9)\"),[7, 8, 9]);",
            "assert.deepEqual(candidate(\"(1, 2, 3)\"),[1, 2, 3]);",
            "assert.deepEqual(candidate(\"(4, 5, 6)\"),[4, 5, 6]);",
            "assert.deepEqual(candidate(\"(7, 81, 19)\"),[7, 81, 19]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "786",
        "title": "right_insertion",
        "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "code": "function right_insertion(a: number[], x: number): number {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = right_insertion;",
            "assert.deepEqual(candidate([1, 2, 4, 5], 6),4);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 3),2);",
            "assert.deepEqual(candidate([1, 2, 4, 5], 7),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "787",
        "title": "text_match_three",
        "text": "Write a function that matches a string that has an a followed by three 'b'.",
        "code": "function text_match_three(text: string): boolean {\n  return text.match(/^(b)$/)\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_match_three;",
            "assert.deepEqual(candidate(\"ac\"),false);",
            "assert.deepEqual(candidate(\"dc\"),false);",
            "assert.deepEqual(candidate(\"abbbba\"),true);",
            "assert.deepEqual(candidate(\"caacabbbba\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "788",
        "title": "new_tuple",
        "text": "Write a function to create a new array from the given string and array.",
        "code": "function new_tuple(test_list: string[], test_str: string): [string, string, string] {\n  var new_list = [];\n  for (var i = 0; i < test_list.length; i++) {\n    new_list.push(test_list[i]);\n  }\n  return [test_str, test_list, new_list];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = new_tuple;",
            "assert.deepEqual(candidate([\"WEB\", \"is\"], \"best\"),[\"WEB\", \"is\", \"best\"]);",
            "assert.deepEqual(candidate([\"We\", \"are\"], \"Developers\"),[\"We\", \"are\", \"Developers\"]);",
            "assert.deepEqual(candidate([\"Part\", \"is\"], \"Wrong\"),[\"Part\", \"is\", \"Wrong\"]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "790",
        "title": "even_position",
        "text": "Write a tsthon function to check whether every even index contains even numbers of a given array.",
        "code": "function even_position(nums: number[]): boolean {\n    var i = 0;\n    var j = 0;\n    var even = true;\n    while (i < nums.length && j < nums.length) {\n        if (nums[i] % 2 == 0) {\n            even =!even;\n        }\n        i++;\n        j++;\n    }\n    return even;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = even_position;",
            "assert.deepEqual(candidate([3, 2, 1]),false);",
            "assert.deepEqual(candidate([1, 2, 3]),false);",
            "assert.deepEqual(candidate([2, 1, 4]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "791",
        "title": "remove_nested",
        "text": "Write a function to remove arrays from the given array.",
        "code": "function remove_nested(test_tup: any): [number, number, number, number] {\n    let test_tuple = test_tup\n    let test_tuple_len = test_tuple.length\n    let test_tuple_i = 0\n    let test_tuple_j = 0\n    let test_tuple_k = 0\n    let test_tuple_l = 0\n    let test_tuple_m = 0\n    let test_tuple_n = 0\n    let test_tuple_o = 0\n    let test_tuple_p = 0\n    let test_tuple_q = 0\n    let test_tuple_r = 0\n    let test_tuple_s = 0\n    let test_tuple_t = 0\n    let test_tuple_u = 0\n    let test_tuple_v = 0\n    let test_tuple_w = 0\n    let test_tuple_x = 0\n    let test_tuple_y = 0\n    let test_tuple_z = 0\n    let test_tuple_w_1 = 0\n    let test_tuple_w_2 = 0\n    let test_tuple_w_3 = 0\n    let test_tuple_w_4 = 0\n    let test_tuple_w_5 = 0\n    let test_tuple_w_6 = 0\n    let test_tuple_w_7 = 0\n    let test_tuple_w_8 = 0\n    let test_tuple_w_9 = 0\n    let test_tuple_w_10 = 0\n    let test_tuple_w_11 = 0\n    let test_tuple_w_12 = 0\n    let test_tuple_w_13 = 0\n    let test_tuple_w_14 = 0\n    let test_tuple_w_15 = 0\n    let test_tuple_w_16 = 0\n    let test_tuple_w_17 = 0\n    let test_tuple_w_18 = 0\n    let test_tuple_w_19 = 0\n    let\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_nested;",
            "assert.deepEqual(candidate([1, 5, 7, [4, 6], 10]),[1, 5, 7, 10]);",
            "assert.deepEqual(candidate([2, 6, 8, [5, 7], 11]),[2, 6, 8, 11]);",
            "assert.deepEqual(candidate([3, 7, 9, [6, 8], 12]),[3, 7, 9, 12]);",
            "assert.deepEqual(candidate([3, 7, 9, [6, 8], [5, 12], 12]),[3, 7, 9, 12]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "792",
        "title": "count_list",
        "text": "Write a tsthon function to count the number of arrays in a given number of arrays.",
        "code": "function count_list(input_list: number[][]): number {\n    var count = 0;\n    for (var i = 0; i < input_list.length; i++) {\n        count += input_list[i].length;\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_list;",
            "assert.deepEqual(candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]),4);",
            "assert.deepEqual(candidate([[1, 2], [2, 3], [4, 5]]),3);",
            "assert.deepEqual(candidate([[1, 0], [2, 0]]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "793",
        "title": "last",
        "text": "Write a tsthon function to find the last position of an element in a sorted array.",
        "code": "function last(arr: number[], x: number): number {\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = arr.length - 1;\n  let l = arr.length - 1;\n  let m = arr.length - 1;\n  let n = arr.length - 1;\n  let o = arr.length - 1;\n  let p = arr.length - 1;\n  let q = arr.length - 1;\n  let r = arr.length - 1;\n  let s = arr.length - 1;\n  let t = arr.length - 1;\n  let u = arr.length - 1;\n  let v = arr.length - 1;\n  let w = arr.length - 1;\n  let x = arr.length - 1;\n  let y = arr.length - 1;\n  let z = arr.length - 1;\n  let a = arr.length - 1;\n  let b = arr.length - 1;\n  let c = arr.length - 1;\n  let d = arr.length - 1;\n  let e = arr.length - 1;\n  let f = arr.length - 1;\n  let g = arr.length - 1;\n  let h = arr.length - 1;\n  let i = arr.length - 1;\n  let j = arr.length - 1;\n  let k = arr.length - 1;\n  let l = arr.length - 1;\n  let m = arr.length - 1;\n  let n = arr.length - 1;\n  let o = arr.length - 1;\n  let p = arr.length - 1;\n  let q = arr.length - 1;\n  let r = arr.length - 1;\n  let s = arr.length - 1;\n  let t = arr.length - 1;\n  let u = arr.length - 1;\n  let v = arr.length - 1;\n  let w = arr.length - 1;\n  let x = arr.length - 1;\n  let y = arr.length - 1;\n  let z\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = last;",
            "assert.deepEqual(candidate([1, 2, 3], 1),0);",
            "assert.deepEqual(candidate([1, 1, 1, 2, 3, 4], 1),2);",
            "assert.deepEqual(candidate([2, 3, 2, 3, 6, 8, 9], 3),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "794",
        "title": "text_starta_endb",
        "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "code": "function text_starta_endb(text: string): boolean {\n  return text.indexOf('a') > -1 && text.indexOf('b') > -1;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = text_starta_endb;",
            "assert.deepEqual(candidate(\"aabbbb\"),true);",
            "assert.deepEqual(candidate(\"aabAbbbc\"),false);",
            "assert.deepEqual(candidate(\"accddbbjjj\"),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "796",
        "title": "return_sum",
        "text": "Write function to find the sum of all items in the given object.",
        "code": "function return_sum(dict: {[key: string]: number}): number {\n    let sum = 0;\n    for (let key in dict) {\n        sum += dict[key];\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = return_sum;",
            "assert.deepEqual(candidate({\"a\": 100, \"b\": 200, \"c\": 300}),600);",
            "assert.deepEqual(candidate({\"a\": 25, \"b\": 18, \"c\": 45}),88);",
            "assert.deepEqual(candidate({\"a\": 36, \"b\": 39, \"c\": 49}),124);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "797",
        "title": "sum_in_range",
        "text": "Write a tsthon function to find the sum of all odd natural numbers within the range l and r.",
        "code": "function sum_in_range(l: number, r: number): number {\n    let sum = 0;\n    for (let i = l; i <= r; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sum_in_range;",
            "assert.deepEqual(candidate(2, 5),8);",
            "assert.deepEqual(candidate(5, 7),12);",
            "assert.deepEqual(candidate(7, 13),40);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "798",
        "title": "_sum",
        "text": "Write a tsthon function to find the sum of an array.",
        "code": "function _sum(arr: number[]): number {\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = _sum;",
            "assert.deepEqual(candidate([1, 2, 3]),6);",
            "assert.deepEqual(candidate([15, 12, 13, 10]),50);",
            "assert.deepEqual(candidate([0, 1, 2]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "799",
        "title": "left_rotate",
        "text": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "code": "function left_rotate(n: number, d: number): number {\n    let result = n;\n    let temp = result;\n    let temp2 = result;\n    let temp3 = result;\n    let temp4 = result;\n    let temp5 = result;\n    let temp6 = result;\n    let temp7 = result;\n    let temp8 = result;\n    let temp9 = result;\n    let temp10 = result;\n    let temp11 = result;\n    let temp12 = result;\n    let temp13 = result;\n    let temp14 = result;\n    let temp15 = result;\n    let temp16 = result;\n    let temp17 = result;\n    let temp18 = result;\n    let temp19 = result;\n    let temp20 = result;\n    let temp21 = result;\n    let temp22 = result;\n    let temp23 = result;\n    let temp24 = result;\n    let temp25 = result;\n    let temp26 = result;\n    let temp27 = result;\n    let temp28 = result;\n    let temp29 = result;\n    let temp30 = result;\n    let temp31 = result;\n    let temp32 = result;\n    let temp33 = result;\n    let temp34 = result;\n    let temp35 = result;\n    let temp36 = result;\n    let temp37 = result;\n    let temp38 = result;\n    let temp39 = result;\n    let temp40 = result;\n    let temp41 = result;\n    let temp42 = result;\n    let temp43 = result;\n    let temp44 = result;\n    let temp45 = result;\n    let temp46 = result;\n    let temp47 = result;\n    let temp48 = result;\n    let temp49 = result;\n    let temp50 = result;\n    let temp51 = result;\n    let temp52 = result;\n    let temp53 = result;\n    let temp54 = result;\n    let temp55 = result;\n    let temp56 = result;\n    let temp57 = result;\n    let temp58 = result;\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = left_rotate;",
            "assert.deepEqual(candidate(16, 2),64);",
            "assert.deepEqual(candidate(10, 2),40);",
            "assert.deepEqual(candidate(99, 3),792);",
            "assert.deepEqual(candidate(99, 3),792);",
            "assert.deepEqual(candidate(1, 3),8);",
            "assert.deepEqual(candidate(5, 3),40);",
            "assert.deepEqual(candidate(29, 3),232);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "79",
        "title": "word_len",
        "text": "Write a tsthon function to check whether the length of the word is odd or not.",
        "code": "function word_len(s: string): boolean {\n    var len = s.length;\n    if (len % 2 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = word_len;",
            "assert.deepEqual(candidate(\"Hadoop\"),false);",
            "assert.deepEqual(candidate(\"great\"),true);",
            "assert.deepEqual(candidate(\"structure\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "800",
        "title": "remove_all_spaces",
        "text": "Write a function to remove all whitespaces from a string.",
        "code": "function remove_all_spaces(text: string): string {\n  return text.replace(/\\s+/g, '');\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = remove_all_spaces;",
            "assert.deepEqual(candidate(\"python  program\"),\"pythonprogram\");",
            "assert.deepEqual(candidate(\"python   programming    language\"),\"pythonprogramminglanguage\");",
            "assert.deepEqual(candidate(\"python                     program\"),\"pythonprogram\");",
            "assert.deepEqual(candidate(\"   python                     program\"),\"pythonprogram\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "801",
        "title": "test_three_equal",
        "text": "Write a tsthon function to count the number of equal numbers from three given integers.",
        "code": "function test_three_equal(x: number, y: number, z: number): number {\n    return x + y + z;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = test_three_equal;",
            "assert.deepEqual(candidate(1, 1, 1),3);",
            "assert.deepEqual(candidate(-1, -2, -3),0);",
            "assert.deepEqual(candidate(1, 2, 2),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "802",
        "title": "count_rotation",
        "text": "Write a tsthon function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/",
        "code": "function count_rotation(arr: number[]): number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = count_rotation;",
            "assert.deepEqual(candidate([3, 2, 1]),1);",
            "assert.deepEqual(candidate([4, 5, 1, 2, 3]),2);",
            "assert.deepEqual(candidate([7, 8, 9, 1, 2, 3]),3);",
            "assert.deepEqual(candidate([1, 2, 3]),0);",
            "assert.deepEqual(candidate([1, 3, 2]),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "803",
        "title": "is_perfect_square",
        "text": "Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/",
        "code": "function is_perfect_square(n: number): boolean {\n    if (n == 0) {\n        return true;\n    }\n    if (n == 1) {\n        return true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_perfect_square;",
            "assert.deepEqual(candidate(10),false);",
            "assert.deepEqual(candidate(36),true);",
            "assert.deepEqual(candidate(14),false);",
            "assert.deepEqual(candidate(196),true);",
            "assert.deepEqual(candidate(125),false);",
            "assert.deepEqual(candidate(15625),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "804",
        "title": "is_product_even",
        "text": "Write a function to check whether the product of numbers in an array is even or not.",
        "code": "function is_product_even(arr: number[]): boolean {\n    var sum = 0;\n    for (var i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum % 2 == 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_product_even;",
            "assert.deepEqual(candidate([1, 2, 3]),true);",
            "assert.deepEqual(candidate([1, 2, 1, 4]),true);",
            "assert.deepEqual(candidate([1, 1]),false);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "805",
        "title": "max_sum_list",
        "text": "Write a function that returns the array in an array of arrays whose sum of elements is the highest.",
        "code": "function max_sum_list(lists: number[][]): number[] {\n    let max_sum = 0;\n    for (let i = 0; i < lists.length; i++) {\n        let sum = 0;\n        for (let j = 0; j < lists[i].length; j++) {\n            sum += lists[i][j];\n        }\n        max_sum = Math.max(max_sum, sum);\n    }\n    return [max_sum];\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_sum_list;",
            "assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]),[10, 11, 12]);",
            "assert.deepEqual(candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]]),[12, 11, 10]);",
            "assert.deepEqual(candidate([[2, 3, 1]]),[2, 3, 1]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "806",
        "title": "max_run_uppercase",
        "text": "Write a function to find maximum run of uppercase characters in the given string.",
        "code": "function max_run_uppercase(test_str: string): number {\n    var max_run = 0;\n    for (var i = 0; i < test_str.length; i++) {\n        if (test_str[i] == test_str[i].toUpperCase()) {\n            max_run = i;\n        }\n    }\n    return max_run;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = max_run_uppercase;",
            "assert.deepEqual(candidate(\"GeMKSForGERksISBESt\"),5);",
            "assert.deepEqual(candidate(\"PrECIOusMOVemENTSYT\"),6);",
            "assert.deepEqual(candidate(\"GooGLEFluTTER\"),4);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "807",
        "title": "first_odd",
        "text": "Write a tsthon function to find the first odd number in a given array of numbers.",
        "code": "function first_odd(nums: number[]): number {\n    var odd = 0;\n    for (var i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 == 1) {\n            odd = odd + 1;\n        }\n    }\n    return odd;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = first_odd;",
            "assert.deepEqual(candidate([1, 3, 5]),1);",
            "assert.deepEqual(candidate([2, 4, 1, 3]),1);",
            "assert.deepEqual(candidate([8, 9, 1]),9);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "808",
        "title": "check_K",
        "text": "Write a function to check if the given arrays contain the k or not.",
        "code": "function check_K(test_tup: number[], K: number): boolean {\n    var k = test_tup[0];\n    var n = test_tup[1];\n    var i = test_tup[2];\n    var j = test_tup[3];\n    var k = test_tup[4];\n    var n = test_tup[5];\n    var i = test_tup[6];\n    var j = test_tup[7];\n    var k = test_tup[8];\n    var n = test_tup[9];\n    var i = test_tup[10];\n    var j = test_tup[11];\n    var k = test_tup[12];\n    var n = test_tup[13];\n    var i = test_tup[14];\n    var j = test_tup[15];\n    var k = test_tup[16];\n    var n = test_tup[17];\n    var i = test_tup[18];\n    var j = test_tup[19];\n    var k = test_tup[20];\n    var n = test_tup[21];\n    var i = test_tup[22];\n    var j = test_tup[23];\n    var k = test_tup[24];\n    var n = test_tup[25];\n    var i = test_tup[26];\n    var j = test_tup[27];\n    var k = test_tup[28];\n    var n = test_tup[29];\n    var i = test_tup[30];\n    var j = test_tup[31];\n    var k = test_tup[32];\n    var n = test_tup[33];\n    var i = test_tup[34];\n    var j = test_tup[35];\n    var k = test_tup[36];\n    var n = test_tup[37];\n    var i = test_tup[38];\n    var j = test_t\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_K;",
            "assert.deepEqual(candidate([10, 4, 5, 6, 8], 6),true);",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6], 7),false);",
            "assert.deepEqual(candidate([7, 8, 9, 44, 11, 12], 11),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "809",
        "title": "check_smaller",
        "text": "Write a function to check if each element of second array is smaller than its corresponding element in the first array.",
        "code": "function check_smaller(test_tup1: [number, number, number], test_tup2: [number, number, number]): boolean {\n    if (test_tup1[0] < test_tup2[0]) {\n        return false;\n    } else if (test_tup1[0] > test_tup2[0]) {\n        return true;\n    } else {\n        return check_smaller(test_tup1[1], test_tup2[1]);\n    }\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = check_smaller;",
            "assert.deepEqual(candidate([1, 2, 3], [2, 3, 4]),false);",
            "assert.deepEqual(candidate([4, 5, 6], [3, 4, 5]),true);",
            "assert.deepEqual(candidate([11, 12, 13], [10, 11, 12]),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "80",
        "title": "tetrahedral_number",
        "text": "Write a function to find the nth tetrahedral number.",
        "code": "function tetrahedral_number(n: number): number {\n    let n_tetrahedra = 0;\n    let n_tetrahedra_i = 0;\n    let n_tetrahedra_j = 0;\n    let n_tetrahedra_k = 0;\n    let n_tetrahedra_l = 0;\n    let n_tetrahedra_m = 0;\n    let n_tetrahedra_n = 0;\n    let n_tetrahedra_o = 0;\n    let n_tetrahedra_p = 0;\n    let n_tetrahedra_q = 0;\n    let n_tetrahedra_r = 0;\n    let n_tetrahedra_s = 0;\n    let n_tetrahedra_t = 0;\n    let n_tetrahedra_u = 0;\n    let n_tetrahedra_v = 0;\n    let n_tetrahedra_w = 0;\n    let n_tetrahedra_x = 0;\n    let n_tetrahedra_y = 0;\n    let n_tetrahedra_z = 0;\n    let n_tetrahedra_a = 0;\n    let n_tetrahedra_b = 0;\n    let n_tetrahedra_c = 0;\n    let n_tetrahedra_d = 0;\n    let n_tetrahedra_e = 0;\n    let n_tetrahedra_f = 0;\n    let n_tetrahedra_g = 0;\n    let n_tetrahedra_h = 0;\n    let n_tetrahedra_i_1 = 0;\n    let n_tetrahedra_i_2 = 0;\n    let n_tetrahedra_i_3 = 0;\n    let n_tetrahedra_i_4 = 0;\n    let n_tetrahedra_i_\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = tetrahedral_number;",
            "assert.deepEqual(candidate(5),35);",
            "assert.deepEqual(candidate(6),56);",
            "assert.deepEqual(candidate(7),84);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "83",
        "title": "get_Char",
        "text": "Write a tsthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.",
        "code": "function get_Char(strr: string): string {\n    var char = '';\n    for (var i = 0; i < strr.length; i++) {\n        char += strr[i];\n    }\n    return char;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = get_Char;",
            "assert.deepEqual(candidate(\"abc\"),\"f\");",
            "assert.deepEqual(candidate(\"gfg\"),\"t\");",
            "assert.deepEqual(candidate(\"ab\"),\"c\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "84",
        "title": "sequence",
        "text": "Write a function to find the nth number in the newman conway sequence.",
        "code": "function sequence(n: number): number {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = sequence;",
            "assert.deepEqual(candidate(10),6);",
            "assert.deepEqual(candidate(2),1);",
            "assert.deepEqual(candidate(3),2);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "86",
        "title": "centered_hexagonal_number",
        "text": "Write a function to find nth centered hexagonal number.",
        "code": "function centered_hexagonal_number(n: number): number {\n    let n_centered = n % 2;\n    let n_centered_hex = n_centered * 2;\n    return n_centered_hex;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = centered_hexagonal_number;",
            "assert.deepEqual(candidate(10),271);",
            "assert.deepEqual(candidate(2),7);",
            "assert.deepEqual(candidate(9),217);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "87",
        "title": "merge_dictionaries_three",
        "text": "Write a function to merge three dictionaries into a single object.",
        "code": "function merge_dictionaries_three(dict1: {[key: string]: string}, dict2: {[key: string]: string}, dict3: {[key: string]: string}): {[key: string]: string} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key: string]: string\n} {\n    [key:\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = merge_dictionaries_three;",
            "assert.deepEqual(candidate({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}),{\"B\": \"Black\", \"R\": \"Red\", \"P\": \"Pink\", \"G\": \"Green\", \"W\": \"White\", \"O\": \"Orange\"});",
            "assert.deepEqual(candidate({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"L\": \"lavender\", \"B\": \"Blue\"}),{\"W\": \"White\", \"P\": \"Pink\", \"B\": \"Black\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\"});",
            "assert.deepEqual(candidate({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"L\": \"lavender\", \"B\": \"Blue\"}, {\"G\": \"Green\", \"W\": \"White\"}),{\"B\": \"Black\", \"P\": \"Pink\", \"R\": \"Red\", \"G\": \"Green\", \"L\": \"lavender\", \"W\": \"White\"});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "88",
        "title": "freq_count",
        "text": "Write a function to get the frequency of all the elements in an array, returned as an object.",
        "code": "function freq_count(list1: number[]): {[key: number]: number} {\n    let count = 0;\n    for (let i = 0; i < list1.length; i++) {\n        count += list1[i];\n    }\n    return count;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = freq_count;",
            "assert.deepEqual(candidate([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]),{10: 4, 20: 4, 40: 2, 50: 2, 30: 1});",
            "assert.deepEqual(candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]),{1: 3, 2: 2, 3: 3, 4: 3});",
            "assert.deepEqual(candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]),{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "89",
        "title": "closest_num",
        "text": "Write a function to find the closest smaller number than n.",
        "code": "function closest_num(N: number): number {\n  const min = N;\n  const max = N;\n  for (let i = 0; i < N; i++) {\n    if (i > 0) {\n      if (i < N - 1) {\n        const temp = i;\n        i = i - 1;\n      } else {\n        i = 0;\n      }\n    }\n    if (i < min) {\n      min = i;\n    }\n    if (i > max) {\n      max = i;\n    }\n  }\n  return min;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = closest_num;",
            "assert.deepEqual(candidate(11),10);",
            "assert.deepEqual(candidate(7),6);",
            "assert.deepEqual(candidate(12),11);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "8",
        "title": "square_nums",
        "text": "Write a function to find squares of individual elements in an array.",
        "code": "function square_nums(nums: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if (num % 2 == 0) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = square_nums;",
            "assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]);",
            "assert.deepEqual(candidate([10, 20, 30]),[100, 400, 900]);",
            "assert.deepEqual(candidate([12, 15]),[144, 225]);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "90",
        "title": "len_log",
        "text": "Write a tsthon function to find the length of the longest word.",
        "code": "function len_log(list1: string[]): number {\n    var len = 0;\n    for (var i = 0; i < list1.length; i++) {\n        if (list1[i] == '1') {\n            len++;\n        }\n    }\n    return len;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = len_log;",
            "assert.deepEqual(candidate([\"python\", \"PHP\", \"bigdata\"]),7);",
            "assert.deepEqual(candidate([\"a\", \"ab\", \"abc\"]),3);",
            "assert.deepEqual(candidate([\"small\", \"big\", \"tall\"]),5);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "91",
        "title": "find_substring",
        "text": "Write a function to check if a string is present as a substring in a given array of string values.",
        "code": "function find_substring(str1: string[], sub_str: string): boolean {\n    var i = 0;\n    var j = 0;\n    var len = str1.length;\n    var found = false;\n    while (i < len) {\n        if (str1[i] == sub_str) {\n            found = true;\n            break;\n        }\n        i++;\n    }\n    return found;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_substring;",
            "assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\"),true);",
            "assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\"),false);",
            "assert.deepEqual(candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\"),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "92",
        "title": "is_undulating",
        "text": "Write a function to check whether the given number is undulating or not.",
        "code": "function is_undulating(n: number): boolean {\n    return n % 2 === 0;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = is_undulating;",
            "assert.deepEqual(candidate(1212121),true);",
            "assert.deepEqual(candidate(1991),false);",
            "assert.deepEqual(candidate(121),true);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "93",
        "title": "power",
        "text": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code": "function power(a: number, b: number): number {\n    return a * b\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = power;",
            "assert.deepEqual(candidate(3, 4),81);",
            "assert.deepEqual(candidate(2, 3),8);",
            "assert.deepEqual(candidate(5, 5),3125);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "94",
        "title": "index_minimum",
        "text": "Given an array of arrays, write a function that returns the first value of the array with the smallest second value.",
        "code": "function index_minimum(test_list: [string, number][]): string {\n    let min = test_list[0];\n    let max = test_list[1];\n    let min_value = min;\n    let max_value = max;\n    for (let i = 0; i < test_list.length; i++) {\n        if (test_list[i] < min) {\n            min_value = test_list[i];\n        }\n        if (test_list[i] > max) {\n            max_value = test_list[i];\n        }\n    }\n    return min_value;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = index_minimum;",
            "assert.deepEqual(candidate([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]]),\"Varsha\");",
            "assert.deepEqual(candidate([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]]),\"Dawood\");",
            "assert.deepEqual(candidate([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]]),\"Ayesha\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "95",
        "title": "Find_Min_Length",
        "text": "Write a tsthon function to find the length of the smallest array in an array of arrays.",
        "code": "function Find_Min_Length(lst: number[][]): number {\n    var min_length = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i].length < min_length) {\n            min_length = lst[i].length;\n        }\n    }\n    return min_length;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = Find_Min_Length;",
            "assert.deepEqual(candidate([[1], [1, 2]]),1);",
            "assert.deepEqual(candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]),2);",
            "assert.deepEqual(candidate([[3, 3, 3], [4, 4, 4, 4]]),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "96",
        "title": "divisor",
        "text": "Write a tsthon function to find the number of divisors of a given integer.",
        "code": "function divisor(n: number): number {\n  let divisors = [];\n  let i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n    i++;\n  }\n  return divisors.length;\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = divisor;",
            "assert.deepEqual(candidate(15),4);",
            "assert.deepEqual(candidate(12),6);",
            "assert.deepEqual(candidate(9),3);",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "97",
        "title": "frequency_lists",
        "text": "Write a function to find frequency of each element in a flattened array of arrays, returned in an object.",
        "code": "function frequency_lists(list1: number[][]): {[key: number]: number} {\n    [key: number]: number\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = frequency_lists;",
            "assert.deepEqual(candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]),{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1});",
            "assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]),{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1});",
            "assert.deepEqual(candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]),{20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1});",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "99",
        "title": "decimal_to_binary",
        "text": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "code": "function decimal_to_binary(n: number): string {\n    if (n < 0) {\n        return \"-\" + decimal_to_binary(-n);\n    }\n    return \"0\" + decimal_to_binary(n);\n}\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = decimal_to_binary;",
            "assert.deepEqual(candidate(8),\"1000\");",
            "assert.deepEqual(candidate(18),\"10010\");",
            "assert.deepEqual(candidate(7),\"111\");",
            "}",
            "test();"
        ]
    },
    {
        "task_id": "9",
        "title": "find_Rotations",
        "text": "Write a tsthon function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "code": "function find_Rotations(str: string): number {\n    let rotations = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n\n",
        "test_list": [
            "declare var require: any;",
            "const assert = require('node:assert');",
            "function test() {",
            "let candidate = find_Rotations;",
            "assert.deepEqual(candidate(\"aaaa\"),1);",
            "assert.deepEqual(candidate(\"ab\"),2);",
            "assert.deepEqual(candidate(\"abc\"),3);",
            "}",
            "test();"
        ]
    }
]