[
    {
        "title": "Number of Distinct Averages",
        "question_content": "You are given a 0-indexed integer array nums of even length.\nAs long as nums is not empty, you must repetitively:\n\n\tFind the minimum number in nums and remove it.\n\tFind the maximum number in nums and remove it.\n\tCalculate the average of the two removed numbers.\n\nThe average of two numbers a and b is (a + b) / 2.\n\n\tFor example, the average of 2 and 3 is (2 + 3) / 2 = 2.5.\n\nReturn the number of distinct averages calculated using the above process.\nNote that when there is a tie for a minimum or maximum number, any can be removed.\n&nbsp;\nExample 1:\n\nInput: nums = [4,1,4,0,3,5]\nOutput: 2\nExplanation:\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n\nExample 2:\n\nInput: nums = [1,100]\nOutput: 1\nExplanation:\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\n\n&nbsp;\nConstraints:\n\n\t2 <= nums.length <= 100\n\tnums.length is even.\n\t0 <= nums[i] <= 100",
        "solutions": [
            {
                "id": 2807138,
                "title": "python-c-java-sort-then-converge-to-the-middle-explained",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs sorting and the use of converging pointers. Time complexity is log-linear: **O(N\\\\*logN)**. Space complexity is linear: **O(N)**.\\n\\n**Comment.** Sorting places maximum and minimum values in a way accessible for the double-sided (with converging pointers/indices) linear scan. Then we should count unique averages of them for which HashSet/dict suffices.\\n\\n**Python.**\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        n, u = len(nums), set()\\n\\n        for i in range(0, n//2):\\n            u.add((nums[i]+nums[n-i-1]) / 2)\\n            \\n        return len(u)\\n```\\n\\n<iframe src=\"https://leetcode.com/playground/h8orjbhe/shared\" frameBorder=\"0\" width=\"800\" height=\"380\"></iframe>",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        n, u = len(nums), set()\\n\\n        for i in range(0, n//2):\\n            u.add((nums[i]+nums[n-i-1]) / 2)\\n            \\n        return len(u)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807175,
                "title": "java-python-3-put-into-hashset-int-instead-of-double-float",
                "content": "Essentially a two pointers algorithm is impelemented.\\n```java\\n    public int distinctAverages(int[] nums) {\\n        Set<Integer> seen = new HashSet<>();\\n        Arrays.sort(nums);\\n        for (int i = 0, n = nums.length; i < n / 2; ++i) {\\n            seen.add(nums[i] + nums[n - 1 - i]);\\n        }\\n        return seen.size();\\n    }\\n```\\n\\nNote: when `i` iterates from `0` to `n - 1`, `~i` iterates for `-1` to `-n` at the same time.\\n\\n\\n```python\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        a, n = sorted(nums), len(nums) // 2\\n        return len({a[i] + a[~i] for i in range(n)})\\n```\\n\\nUse Deque.\\n```java\\n    public int distinctAverages(int[] nums) {\\n        Set<Integer> seen = new HashSet<>();\\n        Arrays.sort(nums);\\n        Deque<Integer> dq = new ArrayDeque<>();\\n        for (int n : nums) {\\n            dq.offer(n);\\n        }\\n        while (!dq.isEmpty()) {\\n            seen.add(dq.poll() + dq.pollLast());\\n        }\\n        return seen.size();\\n    }\\n```\\n\\n\\n**Analysis:**\\n\\nSorting is the major part of the time cost.\\n\\nTime: `O(nlogn)`, space: `O(n)`, where `n = nums.length`.",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```java\\n    public int distinctAverages(int[] nums) {\\n        Set<Integer> seen = new HashSet<>();\\n        Arrays.sort(nums);\\n        for (int i = 0, n = nums.length; i < n / 2; ++i) {\\n            seen.add(nums[i] + nums[n - 1 - i]);\\n        }\\n        return seen.size();\\n    }\\n```\n```python\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        a, n = sorted(nums), len(nums) // 2\\n        return len({a[i] + a[~i] for i in range(n)})\\n```\n```java\\n    public int distinctAverages(int[] nums) {\\n        Set<Integer> seen = new HashSet<>();\\n        Arrays.sort(nums);\\n        Deque<Integer> dq = new ArrayDeque<>();\\n        for (int n : nums) {\\n            dq.offer(n);\\n        }\\n        while (!dq.isEmpty()) {\\n            seen.add(dq.poll() + dq.pollLast());\\n        }\\n        return seen.size();\\n    }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2807181,
                "title": "c-set-two-pointers",
                "content": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        int i=0,j=n-1;\\n        \\n        set<double> st;\\n        \\n        sort(nums.begin(),nums.end());\\n            \\n        while(n > 0){\\n            double average = (nums[i]+nums[j])/2.0;\\n            st.insert(average);\\n            i++;\\n            j--;\\n            n--;\\n        }\\n        \\n        return st.size();\\n    }\\n};\\n```\\n**Please upvote if it was helpful for you, thank you!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int n = nums.size();\\n        \\n        int i=0,j=n-1;\\n        \\n        set<double> st;\\n        \\n        sort(nums.begin(),nums.end());\\n            \\n        while(n > 0){\\n            double average = (nums[i]+nums[j])/2.0;\\n            st.insert(average);\\n            i++;\\n            j--;\\n            n--;\\n        }\\n        \\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807140,
                "title": "c-solution-only-4-line-explained-very-simple-and-easy-to-understand",
                "content": "<b>Up Vote if you like the solution\\n```\\n/*\\n1. first sort the array, as we need to find the smallest and largest at each step\\n2. Now itterate from start and end to fetch smallest and larget \\n3. take average and put it in a set ( as we need to store unique avg value)\\nNote : No need to to devide avg by 2, as we just to need to evaluate no of unique values\\n*/\\nint distinctAverages(vector<int>& nums) {\\n    sort(nums.begin(), nums.end());\\n    unordered_set<int> st;\\n    for(int i = 0; i < nums.size()/2; ++i) st.insert(nums[i] + nums[nums.size()-i-1]);\\n    return st.size();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\n1. first sort the array, as we need to find the smallest and largest at each step\\n2. Now itterate from start and end to fetch smallest and larget \\n3. take average and put it in a set ( as we need to store unique avg value)\\nNote : No need to to devide avg by 2, as we just to need to evaluate no of unique values\\n*/\\nint distinctAverages(vector<int>& nums) {\\n    sort(nums.begin(), nums.end());\\n    unordered_set<int> st;\\n    for(int i = 0; i < nums.size()/2; ++i) st.insert(nums[i] + nums[nums.size()-i-1]);\\n    return st.size();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2807282,
                "title": "avg-not-compulsory-sum-will-also-do",
                "content": "1. sort the array\\n2. begin from first and last element and add the sum to a set.  Now increase the first index for next smaller element and  decrease the lastindex to get next smaller greater element till we finish all elements\\n3. return the size of the set\\n\\n```\\nclass Solution {\\n    public int distinctAverages(int[] a) {\\n        Arrays.sort(a);\\n        Set<Integer> set =new HashSet<>();\\n        int i=0,j= a.length-1;\\n        while (i<j)\\n{\\n            set.add(a[i]+a[j]);\\n            i++;\\n            j--;\\n        }\\n        return set.size();\\n        \\n        }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] a) {\\n        Arrays.sort(a);\\n        Set<Integer> set =new HashSet<>();\\n        int i=0,j= a.length-1;\\n        while (i<j)\\n{\\n            set.add(a[i]+a[j]);\\n            i++;\\n            j--;\\n        }\\n        return set.size();\\n        \\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807778,
                "title": "python-3-3-lines-w-example-t-m-19ms-13-8-mb",
                "content": "Note that finding the number of distinct pair-sums is equivalent to finding the number of distinct pair-averages.\\n```\\nclass Solution:                                                 \\n\\n    def distinctAverages(self, nums: List[int]) -> int:         #   Ex: nums = [4,1,4,0,3,5]\\n                                                                \\n        nums.sort()                                             #   nums = [0,1,3,4,4,5]\\n                                                                #        i: 0 1 2 3 4 5\\n                                                                #\\n        n = len(nums)                                           #   ans = len({0+5,1+4,3+4})\\n                                                                #       = len({5,5,7})\\n        return len({nums[i]+nums[n-i-1] for i in range(n//2)})  #       = len({5,7}) = 2 <-- answer\\n```\\n[https://leetcode.com/submissions/detail/842124889/](http://)\\n\\nI could be wrong, but I think it\\'s *O*(*N*log*N*) / O(*N*).",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:                                                 \\n\\n    def distinctAverages(self, nums: List[int]) -> int:         #   Ex: nums = [4,1,4,0,3,5]\\n                                                                \\n        nums.sort()                                             #   nums = [0,1,3,4,4,5]\\n                                                                #        i: 0 1 2 3 4 5\\n                                                                #\\n        n = len(nums)                                           #   ans = len({0+5,1+4,3+4})\\n                                                                #       = len({5,5,7})\\n        return len({nums[i]+nums[n-i-1] for i in range(n//2)})  #       = len({5,7}) = 2 <-- answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3424286,
                "title": "c-and-c-very-easy-solution-beats-100",
                "content": "![photo_2023-04-16_22-23-21.jpg](https://assets.leetcode.com/users/images/4fc63dd9-8f53-40d9-a5b7-89fe35421730_1681665990.0599346.jpeg)\\n![photo_2023-04-16_22-23-27.jpg](https://assets.leetcode.com/users/images/0117c6ce-5264-42a9-a9ca-f51a2390f3ff_1681665996.2460003.jpeg)\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n         sort(nums.begin(),nums.end());\\n        set<double> my;\\n        for(int i=0;i<nums.size()/2;i++)\\n        my.insert((double)(nums[i]+nums[nums.size()-i-1])/2);\\n        return my.size(); \\n    }\\n};\\n```\\n```C# []\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        Array.Sort(nums);\\n        HashSet<double> my=new();\\n        for(int i=0;i<nums.Length/2;i++)\\n            my.Add((double)(nums[i]+nums[nums.Length-i-1])/2);\\n        return my.Count;\\n    }\\n}\\n```\\n![Vote.png](https://assets.leetcode.com/users/images/2b17598e-cd10-4402-a8d2-22a819e38316_1681666006.8601475.png)\\n\\n",
                "solutionTags": [
                    "C++",
                    "C#",
                    "Array",
                    "Sorting"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n         sort(nums.begin(),nums.end());\\n        set<double> my;\\n        for(int i=0;i<nums.size()/2;i++)\\n        my.insert((double)(nums[i]+nums[nums.size()-i-1])/2);\\n        return my.size(); \\n    }\\n};\\n```\n```C# []\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        Array.Sort(nums);\\n        HashSet<double> my=new();\\n        for(int i=0;i<nums.Length/2;i++)\\n            my.Add((double)(nums[i]+nums[nums.Length-i-1])/2);\\n        return my.Count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2816588,
                "title": "two-pointers",
                "content": "We sort the array, and move pointers `i` and `j` from both sides till they meet in the middle.\\n\\nFor each pair, we mark `nums[i] + nums[j]` as discovered in the `sum` array.\\n\\nIn the end, we return the number of discovered sums.\\n\\n**C++**\\n```cpp\\nint distinctAverages(vector<int>& nums) {\\n    bool sum[201] = {};\\n    sort(begin(nums), end(nums));\\n    for (int i = 0, j = nums.size() - 1; i < j;)\\n        sum[nums[i++] + nums[j--]] = true;\\n    return count(begin(sum), end(sum), true);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nint distinctAverages(vector<int>& nums) {\\n    bool sum[201] = {};\\n    sort(begin(nums), end(nums));\\n    for (int i = 0, j = nums.size() - 1; i < j;)\\n        sum[nums[i++] + nums[j--]] = true;\\n    return count(begin(sum), end(sum), true);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3777785,
                "title": "javascript-simple-and-easy-to-understand",
                "content": "```\\nvar distinctAverages = function(nums) {\\n    nums.sort((a,b) => a-b);\\n    let res = new Set();\\n    while(nums.length>0){\\n        res.add((nums.pop()+nums.shift())/2);\\n    }\\n    return res.size;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\nvar distinctAverages = function(nums) {\\n    nums.sort((a,b) => a-b);\\n    let res = new Set();\\n    while(nums.length>0){\\n        res.add((nums.pop()+nums.shift())/2);\\n    }\\n    return res.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2998013,
                "title": "c-super-easy-and-short-explained-solution-o-n-log-n-tc-o-1-sc",
                "content": "# Intuition\\nWhat\\'s the easiest way to access minimum and maximum?\\nWe can run through the array again and again, but that will cost a lot of time complexity.\\n\\n# Approach\\nIf we sort the array, we don\\'t even have to remove elements, just use pointers!\\n\\n# Complexity\\n- Time complexity:\\nO(n log n) for sorting.\\n\\n- Space complexity:\\nO(1) - no extra space used (not taking result into consideration).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<float> res;\\n\\n        for (int i=0; i<nums.size(); i++) {\\n            res.insert((nums[i] + nums[nums.size()-i-1])/2.0);\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<float> res;\\n\\n        for (int i=0; i<nums.size(); i++) {\\n            res.insert((nums[i] + nums[nums.size()-i-1])/2.0);\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2997990,
                "title": "pyhton-two-simple-and-clear-solutions",
                "content": "Two python simple solutions:\\n\\n# Approach 1 - the intuitive solution\\nSimply go through the array, each iteration pick the min element and the max.\\nCalaulate the average and add it to set.\\nReturn the number of elements in the set.\\n\\n# Complexity\\n- Time complexity:\\nO(n * n) - looping the array and calaulating the min md max each iteration.\\n\\n- Space complexity:\\nO(1) - no extra space\\n\\n# Solution \\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avg = set()\\n        while nums:\\n            curr_min = min(nums)\\n            curr_max = max(nums)\\n            avg.add((curr_min + curr_max) / 2)\\n            nums.remove(curr_min)\\n            nums.remove(curr_max)\\n\\n        return len(avg)\\n\\n```\\n\\n\\n# Approach 2 - the efficient solution\\nSort the array, use pointes to the start and end of the array and calaulate the average.\\n\\n# Complexity\\n- Time complexity:\\nO(n log n) - sorting complexity\\n\\n- Space complexity:\\nO(1) - no extra space\\n\\n# Solution\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avg = set()\\n        nums  = sorted(nums)\\n        l = len(nums)\\n\\n        for i in range(len(nums)):\\n            avg.add((nums[i] + nums[l - i - 1]) / 2)\\n\\n        return len(avg)\\n\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avg = set()\\n        while nums:\\n            curr_min = min(nums)\\n            curr_max = max(nums)\\n            avg.add((curr_min + curr_max) / 2)\\n            nums.remove(curr_min)\\n            nums.remove(curr_max)\\n\\n        return len(avg)\\n\\n```\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avg = set()\\n        nums  = sorted(nums)\\n        l = len(nums)\\n\\n        for i in range(len(nums)):\\n            avg.add((nums[i] + nums[l - i - 1]) / 2)\\n\\n        return len(avg)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2814072,
                "title": "c-very-easy-solution",
                "content": "```\\n// Sets are a type of associative container in which each element has to be unique because the value of the \\n//element identifies it. The values are stored in a specific sorted order i.e. either ascending or descending.\\n\\n// Thus we simply store our average in a set and return the size of our set in the end. We don\\'t have \\n// to find or calculate unique elements which we have to do if we choose to store our result in a vector \\n\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        set<float>s;\\n        int i=0;\\n        int j=nums.size()-1;\\n        while(i<j){\\n                s.insert((nums[i]+nums[j])/2.0);\\n                i++;\\n                j--;\\n        }\\n        return s.size();\\n    }\\n};\\n\\n//  PLS PLS DO UPVOTE IF YOU FOUND THIS SOLUTION HELPFUL :-) <3",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "class Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        set<float>s;\\n        int i=0;\\n        int j=nums.size()-1;\\n        while(i<j){\\n                s.insert((nums[i]+nums[j])/2.0);\\n                i++;\\n                j--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3150539,
                "title": "python-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        distinct = set()\\n        while len(nums) != 0:\\n            nums = sorted(nums)\\n            avg = (nums.pop(0) + nums.pop(len(nums)-1))/2\\n            distinct.add(avg)\\n        return len(distinct)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        distinct = set()\\n        while len(nums) != 0:\\n            nums = sorted(nums)\\n            avg = (nums.pop(0) + nums.pop(len(nums)-1))/2\\n            distinct.add(avg)\\n        return len(distinct)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2817811,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        av=[]\\n        nums.sort()\\n        while nums:\\n            av.append((nums[-1]+nums[0])/2)\\n            nums.pop(-1)\\n            nums.pop(0)\\n        return len(set(av))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        av=[]\\n        nums.sort()\\n        while nums:\\n            av.append((nums[-1]+nums[0])/2)\\n            nums.pop(-1)\\n            nums.pop(0)\\n        return len(set(av))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807617,
                "title": "100-faster-c-and-javascript-solution",
                "content": "# 100% faster C++ and JS solution\\n\\n# JS Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    nums = nums.sort((a, b) => a - b);\\n    let s = new Set();\\n    let len = nums.length, i = 0;\\n    while(i < len) {\\n        let del = (nums[i] + nums[len - 1 - i]) / 2;\\n        s.add(del);\\n        ++i;\\n    }\\n    return s.size;\\n};\\n```\\n\\n# C++ Solution\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums, set<int> st = {0}) {\\n        sort(begin(nums), end(nums));\\n        int len = size(nums);\\n        set<int>onlyRequireForZero;\\n\\n        for(auto i: nums) onlyRequireForZero.insert(i);\\n        if(size(onlyRequireForZero) == 1) {\\n            for(auto& i : onlyRequireForZero) if(i == 0) return 1;\\n        }\\n        for(int i = 0; i < len/2; ++i) {\\n            // cout << nums[i] << \" \" << nums[len - i -1] << \"__\";\\n            st.insert(nums[i] + nums[len - i -1]);\\n        }\\n        return size(st)-1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    nums = nums.sort((a, b) => a - b);\\n    let s = new Set();\\n    let len = nums.length, i = 0;\\n    while(i < len) {\\n        let del = (nums[i] + nums[len - 1 - i]) / 2;\\n        s.add(del);\\n        ++i;\\n    }\\n    return s.size;\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums, set<int> st = {0}) {\\n        sort(begin(nums), end(nums));\\n        int len = size(nums);\\n        set<int>onlyRequireForZero;\\n\\n        for(auto i: nums) onlyRequireForZero.insert(i);\\n        if(size(onlyRequireForZero) == 1) {\\n            for(auto& i : onlyRequireForZero) if(i == 0) return 1;\\n        }\\n        for(int i = 0; i < len/2; ++i) {\\n            // cout << nums[i] << \" \" << nums[len - i -1] << \"__\";\\n            st.insert(nums[i] + nums[len - i -1]);\\n        }\\n        return size(st)-1;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2807353,
                "title": "two-pointers",
                "content": "The idea is super simple just sort the numbers then maintain two pointers \\nand keep a set to store averages. \\n\\n```c++\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin() , nums.end());\\n        int i = 0, j = nums.size() - 1;\\n        unordered_set<float> ht;\\n        while(i <= j){\\n            float avg = (nums[i] + nums[j]) / 2.0;\\n            ht.insert(avg);\\n            i++ , j--;\\n        }\\n        return ht.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "Ordered Set"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin() , nums.end());\\n        int i = 0, j = nums.size() - 1;\\n        unordered_set<float> ht;\\n        while(i <= j){\\n            float avg = (nums[i] + nums[j]) / 2.0;\\n            ht.insert(avg);\\n            i++ , j--;\\n        }\\n        return ht.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807206,
                "title": "python-sorting-two-pointers-set",
                "content": "\\n\\t\\tdef distinctAverages(self, nums: List[int]) -> int:\\n\\t\\t\\tn = len(nums)\\n\\t\\t\\tnums.sort()\\n\\t\\t\\tr = n-1\\n\\t\\t\\tres = set()\\n\\t\\t\\tfor l in range(n//2) :\\n\\t\\t\\t\\tavg = (nums[l]+nums[r])/2\\n\\t\\t\\t\\tres.add(avg)\\n\\t\\t\\t\\tr -= 1\\n\\t\\t\\treturn len(res)",
                "solutionTags": [
                    "Python",
                    "Two Pointers",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "\\n\\t\\tdef distinctAverages(self, nums: List[int]) -> int:\\n\\t\\t\\tn = len(nums)\\n\\t\\t\\tnums.sort()\\n\\t\\t\\tr = n-1\\n\\t\\t\\tres = set()\\n\\t\\t\\tfor l in range(n//2) :\\n\\t\\t\\t\\tavg = (nums[l]+nums[r])/2\\n\\t\\t\\t\\tres.add(avg)\\n\\t\\t\\t\\tr -= 1\\n\\t\\t\\treturn len(res)",
                "codeTag": "Python3"
            },
            {
                "id": 2807160,
                "title": "c-use-two-pointer-approach",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    int distinctAverages(vector<int>& nums) \\n    {\\n        sort(nums.begin(), nums.end());\\n        \\n        int l=0, h=nums.size()-1;\\n        unordered_map<double, int> mp; \\n        \\n        while(l<h)\\n        {\\n            double avg = (nums[l]+nums[h])/2.0;\\n            mp[avg]++;\\n            l++;\\n            h--;\\n        }\\n        return mp.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int distinctAverages(vector<int>& nums) \\n    {\\n        sort(nums.begin(), nums.end());\\n        \\n        int l=0, h=nums.size()-1;\\n        unordered_map<double, int> mp; \\n        \\n        while(l<h)\\n        {\\n            double avg = (nums[l]+nums[h])/2.0;\\n            mp[avg]++;\\n            l++;\\n            h--;\\n        }\\n        return mp.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807136,
                "title": "c-2-pointer-with-set-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        if(n==2) return 1;\\n        \\n        set<double> s;                   // using set because it will take distinct value\\n        \\n        sort(nums.begin(),nums.end());\\n        \\n\\t\\t// array is sorted\\n        int i=0;               // pointing to min\\n        int j=n-1;           // pointing to max\\n        \\n        while(i<j)\\n        {\\n\\t\\t    // each time move the pointers\\n            double avg = (nums[i++]+nums[j--])/2.0;\\n            cout<<avg<<\" \";\\n            s.insert(avg);\\n        }\\n        \\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        if(n==2) return 1;\\n        \\n        set<double> s;                   // using set because it will take distinct value\\n        \\n        sort(nums.begin(),nums.end());\\n        \\n\\t\\t// array is sorted\\n        int i=0;               // pointing to min\\n        int j=n-1;           // pointing to max\\n        \\n        while(i<j)\\n        {\\n\\t\\t    // each time move the pointers\\n            double avg = (nums[i++]+nums[j--])/2.0;\\n            cout<<avg<<\" \";\\n            s.insert(avg);\\n        }\\n        \\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3669836,
                "title": "98-beats-java-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int n = nums.length;\\n        HashSet<Float> set = new HashSet<>();\\n        float a =0;\\n        int  i =0;\\n     while(i!=n/2){\\n          a  = ((float)(nums[i]+nums[n-1-i]))/2.0f;\\n          i++;\\n          set.add(a);\\n         }\\n         return set.size();   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int n = nums.length;\\n        HashSet<Float> set = new HashSet<>();\\n        float a =0;\\n        int  i =0;\\n     while(i!=n/2){\\n          a  = ((float)(nums[i]+nums[n-1-i]))/2.0f;\\n          i++;\\n          set.add(a);\\n         }\\n         return set.size();   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3304488,
                "title": "easy-python-solution-using-two-pointers-99-80-runtime",
                "content": "![image.png](https://assets.leetcode.com/users/images/42c71244-0764-42d3-b7da-92312e5594d3_1678981018.924244.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        i=0\\n        j=len(nums)-1\\n        l=[]\\n        while i<j:\\n            l.append((nums[i]+nums[j])/2)\\n            i+=1\\n            j-=1\\n        return len(set(l))\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Hash Table",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        i=0\\n        j=len(nums)-1\\n        l=[]\\n        while i<j:\\n            l.append((nums[i]+nums[j])/2)\\n            i+=1\\n            j-=1\\n        return len(set(l))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3258442,
                "title": "easy-set-solution",
                "content": "It\\'s no need to divide the sum by 2, the sum is enough for distinct\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    nums.sort((a, b) => a - b);\\n    const set = new Set();\\n    for (let i = 0; i < nums.length / 2; i++) {\\n        set.add(nums[i] + nums.at(-(i + 1)));\\n    }\\n    return set.size;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    nums.sort((a, b) => a - b);\\n    const set = new Set();\\n    for (let i = 0; i < nums.length / 2; i++) {\\n        set.add(nums[i] + nums.at(-(i + 1)));\\n    }\\n    return set.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2865225,
                "title": "java-from-5ms-to-2ms-2-solutions",
                "content": "# Solution 1 | 5ms\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Float> set = new HashSet<>();\\n        int half = nums.length / 2;\\n        for (int i = 0; i < half; i++) {\\n            set.add((nums[i] + nums[nums.length - 1 - i]) / 2.0F);\\n        }\\n        return set.size();\\n    }\\n}\\n```\\n\\n# Solution 2 | 2ms\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        List<Float> list = new ArrayList<>();\\n        int half = nums.length / 2;\\n        for (int i = 0; i < half; i++) {\\n            list.add((nums[i] + nums[nums.length - 1 - i]) / 2.0F);\\n        }\\n        return (int) list.stream().distinct().count();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Float> set = new HashSet<>();\\n        int half = nums.length / 2;\\n        for (int i = 0; i < half; i++) {\\n            set.add((nums[i] + nums[nums.length - 1 - i]) / 2.0F);\\n        }\\n        return set.size();\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        List<Float> list = new ArrayList<>();\\n        int half = nums.length / 2;\\n        for (int i = 0; i < half; i++) {\\n            list.add((nums[i] + nums[nums.length - 1 - i]) / 2.0F);\\n        }\\n        return (int) list.stream().distinct().count();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2863883,
                "title": "java-o-n-logn-solution",
                "content": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Double> average = new HashSet<>();\\n\\t\\tint n = nums.length;\\n\\n\\t\\tfor(int i = 0; i < n / 2; i++){\\n\\t\\t\\taverage.add((nums[i] + nums[n - i - 1]) / 2.0);\\n\\t\\t}\\n\\t\\treturn average.size();\\n    }\\n}\\n```\\n\\nThe time complexity is O(n * logn) as we are using `Arrays.sort()` function. The other logic runs in O(n) but since O(n * logn) > O(n) the final time complexity is O(n * logn).",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Double> average = new HashSet<>();\\n\\t\\tint n = nums.length;\\n\\n\\t\\tfor(int i = 0; i < n / 2; i++){\\n\\t\\t\\taverage.add((nums[i] + nums[n - i - 1]) / 2.0);\\n\\t\\t}\\n\\t\\treturn average.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2844969,
                "title": "java-easy-short-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirstly Sort the array, then pop numbers from front and end, get avarage of that two numbers and add to set. Repeat this until to reach mid.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(nLog(n))$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        \\n        Set<Double> u = new HashSet<>();\\n        int n = nums.length;\\n        \\n        for(int i = 0; i < n/2; ++i)\\n            u.add((nums[i] + nums[n-i-1]) / 2.0);\\n\\n        return u.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        \\n        Set<Double> u = new HashSet<>();\\n        int n = nums.length;\\n        \\n        for(int i = 0; i < n/2; ++i)\\n            u.add((nums[i] + nums[n-i-1]) / 2.0);\\n\\n        return u.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2837066,
                "title": "start-and-end",
                "content": "# Intuition\\nAfter Sorting the nums calculate average of first and last and then pop them.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nSort the array `nums`.\\nUsing two pointers for `first` and `last` int `nums` and on calculating the `average` we add it to a set.\\nAt the end we return set size.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: *`O(nlogn)`*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: *`O(n)`*\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<double> dist;\\n        double avg;\\n        for(int i = 0, j = nums.size() - 1; j - i >= 1; i++, j--) {\\n            avg = nums[i] + nums[j];\\n            avg /= 2;\\n            dist.insert(avg);\\n        }\\n        return dist.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<double> dist;\\n        double avg;\\n        for(int i = 0, j = nums.size() - 1; j - i >= 1; i++, j--) {\\n            avg = nums[i] + nums[j];\\n            avg /= 2;\\n            dist.insert(avg);\\n        }\\n        return dist.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2824967,
                "title": "java-two-pointer-solution",
                "content": "```\\npublic int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int n= nums.length;\\n        HashSet<Integer> hs = new HashSet<>();\\n        int i=0;\\n        int j=n-1;\\n        while(i<j){\\n            hs.add(nums[i]+nums[j]);\\n            i++;\\n            j--;\\n        }\\n        return hs.size();\\n        \\n    }",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\npublic int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int n= nums.length;\\n        HashSet<Integer> hs = new HashSet<>();\\n        int i=0;\\n        int j=n-1;\\n        while(i<j){\\n            hs.add(nums[i]+nums[j]);\\n            i++;\\n            j--;\\n        }\\n        return hs.size();\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2811215,
                "title": "c-set-two-pointers-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double> s;\\n        sort(nums.begin(),nums.end());\\n        int st=0;\\n        int e=nums.size()-1;\\n        double avg=0;\\n        while(st<e){\\n           \\n               avg=(nums[st]+nums[e])/2.0;\\n               s.insert(avg);\\n              \\n               st++;\\n               e--;\\n        }\\n        return s.size();\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double> s;\\n        sort(nums.begin(),nums.end());\\n        int st=0;\\n        int e=nums.size()-1;\\n        double avg=0;\\n        while(st<e){\\n           \\n               avg=(nums[st]+nums[e])/2.0;\\n               s.insert(avg);\\n              \\n               st++;\\n               e--;\\n        }\\n        return s.size();\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807784,
                "title": "c-very-easy-using-map",
                "content": "// tc - O(n)  sc - O(n)\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums)\\n    {\\n        sort(nums.begin(),nums.end()); // for finding the maximum and minimum\\n        int s=0;// minimum\\n        int e=nums.size()-1;//maximum\\n        map<float,int>mp;// for storing the non repeating values\\n        while(s<e)// works untill the array is fully covered\\n        {\\n            mp[float(nums[s++]+nums[e--])/2]++;// stores in map and increment s and decrement e\\n        }\\n        return mp.size();// return the total number of non repeated values\\n    }\\n};\\n```\\n//rather than map we can use set also \\n// syntax\\n```\\nset<float>st;\\nst.insert(float(nums[s++]+nums[e--])/2);\\nreturn st.size();\\n```\\n\\n//if any doubt can contact me on my instagram",
                "solutionTags": [
                    "Array",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums)\\n    {\\n        sort(nums.begin(),nums.end()); // for finding the maximum and minimum\\n        int s=0;// minimum\\n        int e=nums.size()-1;//maximum\\n        map<float,int>mp;// for storing the non repeating values\\n        while(s<e)// works untill the array is fully covered\\n        {\\n            mp[float(nums[s++]+nums[e--])/2]++;// stores in map and increment s and decrement e\\n        }\\n        return mp.size();// return the total number of non repeated values\\n    }\\n};\\n```\n```\\nset<float>st;\\nst.insert(float(nums[s++]+nums[e--])/2);\\nreturn st.size();\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807319,
                "title": "easy-solution-with-100-beats-set-two-pointer-o-n-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double>st;\\n        sort(nums.begin(),nums.end());\\n        int n=nums.size();\\n        int i=0,j=n-1;\\n        while(i<j)\\n        {\\n            double res=(nums[i++]+nums[j--])/2.0;\\n            st.insert(res);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double>st;\\n        sort(nums.begin(),nums.end());\\n        int n=nums.size();\\n        int i=0,j=n-1;\\n        while(i<j)\\n        {\\n            double res=(nums[i++]+nums[j--])/2.0;\\n            st.insert(res);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807294,
                "title": "c",
                "content": "```\\npublic int DistinctAverages(int[] nums) \\n{\\n\\tArray.Sort(nums);\\n\\tvar s = new HashSet<double>();\\n\\tvar l = 0;\\n\\tvar r = nums.Length - 1;\\n\\twhile(l < r)\\n\\t{\\n\\t\\tvar d = (nums[l] + nums[r]) / 2.0;\\n\\t\\ts.Add(d);\\n\\t\\tl ++;\\n\\t\\tr--;\\n\\t}\\n\\treturn s.Count;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int DistinctAverages(int[] nums) \\n{\\n\\tArray.Sort(nums);\\n\\tvar s = new HashSet<double>();\\n\\tvar l = 0;\\n\\tvar r = nums.Length - 1;\\n\\twhile(l < r)\\n\\t{\\n\\t\\tvar d = (nums[l] + nums[r]) / 2.0;\\n\\t\\ts.Add(d);\\n\\t\\tl ++;\\n\\t\\tr--;\\n\\t}\\n\\treturn s.Count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2807287,
                "title": "javascript-solution-with-comments-100-faster",
                "content": "```var distinctAverages = function(nums) {\\n    //Sort the array from min to max number\\n    nums = nums.sort((a, b) => a - b);\\n    //Create set to store only distint averages\\n    let s = new Set();\\n    //Loop from 0 to middle and calculate average of min element and max (at the end of the sorted array), then add it to the set\\n    for (let i = 0; i < (nums.length / 2); i++) {\\n        s.add((nums[i] + nums[nums.length - i - 1]) / 2);\\n    } return s.size; //the size of the set is the answer (distinct averages)  \\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```var distinctAverages = function(nums) {\\n    //Sort the array from min to max number\\n    nums = nums.sort((a, b) => a - b);\\n    //Create set to store only distint averages\\n    let s = new Set();\\n    //Loop from 0 to middle and calculate average of min element and max (at the end of the sorted array), then add it to the set\\n    for (let i = 0; i < (nums.length / 2); i++) {\\n        s.add((nums[i] + nums[nums.length - i - 1]) / 2);\\n    } return s.size; //the size of the set is the answer (distinct averages)  \\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 2807237,
                "title": "python-very-easy-to-understand-straight-forward-approach",
                "content": ">> As asked in the problem, we find average of min and max values, store average in a list and remove min and max elements.\\n>> Then we return the count of distinct elements in the list using set.\\n>> Do upvote if found helpful :)\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        l = []\\n        while(nums):\\n            a = min(nums)\\n            b = max(nums)\\n            avg = (a+b)/2\\n            l.append(avg)\\n            nums.remove(a)\\n            nums.remove(b)\\n        return (len(set(l)))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        l = []\\n        while(nums):\\n            a = min(nums)\\n            b = max(nums)\\n            avg = (a+b)/2\\n            l.append(avg)\\n            nums.remove(a)\\n            nums.remove(b)\\n        return (len(set(l)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807164,
                "title": "c-sort-easy-to-understand",
                "content": "\\n# Complexity\\n- Time complexity: O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\n    #1\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<float> s;\\n        sort(nums.begin(), nums.end()); \\n        \\n        int i = 0, j = size(nums)-1;\\n        while (i < j) \\n            s.insert((float)(nums[i++] + nums[j--])/2);\\n        \\n        return size(s);\\n    }\\n    \\n    #2\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<string> s;\\n        sort(nums.begin(), nums.end());\\n        \\n        int i = 0, j = size(nums)-1;\\n        while (i < j) \\n            s.insert(to_string( (float)(nums[i++] + nums[j--])/2 ));\\n        \\n        return size(s);\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Sort",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\n\\n    #1\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<float> s;\\n        sort(nums.begin(), nums.end()); \\n        \\n        int i = 0, j = size(nums)-1;\\n        while (i < j) \\n            s.insert((float)(nums[i++] + nums[j--])/2);\\n        \\n        return size(s);\\n    }\\n    \\n    #2\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<string> s;\\n        sort(nums.begin(), nums.end());\\n        \\n        int i = 0, j = size(nums)-1;\\n        while (i < j) \\n            s.insert(to_string( (float)(nums[i++] + nums[j--])/2 ));\\n        \\n        return size(s);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2807152,
                "title": "2-pointer-c-simple",
                "content": "**Approach**- if we sort the elements then smaller element will be at 0th position and max element will be at last position. from here just point 2 pointer i and j and keep on extracting avg of them.\\n\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double> st;        //unique\\n        int i= 0, j= nums.size()-1;\\n        \\n        sort(nums.begin(), nums.end());\\n        while(i<j){\\n            // cout<<double (nums[i]+nums[j])/2<<endl;\\n            st.insert(double (nums[i]+nums[j])/2);\\n            i++; j--;\\n        }\\n        \\n        return st.size();\\n        \\n    }\\n};\\n```\\n\\n**please do upvote if you like the solution:)**\\n",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double> st;        //unique\\n        int i= 0, j= nums.size()-1;\\n        \\n        sort(nums.begin(), nums.end());\\n        while(i<j){\\n            // cout<<double (nums[i]+nums[j])/2<<endl;\\n            st.insert(double (nums[i]+nums[j])/2);\\n            i++; j--;\\n        }\\n        \\n        return st.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2807145,
                "title": "cpp-easy-solution-using-set",
                "content": "# Approach\\nTwo Pointers\\n\\n# Complexity\\n- Time complexity:\\n(for sorting) O(NLogN) + for traversing O(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        // since it is said in the question to only count distinct average so we will use a set to remove duplicates.\\n        set<int>st;\\n        //Sort the vector so that the 1st and last element of the vector will be the maximm and minimum\\n        sort(nums.begin(),nums.end());\\n        \\n        while(nums.size()){\\n            int n=nums.size();\\n            \\n            int mn=nums[0];\\n            nums.erase(nums.begin());\\n            \\n            int mx=nums[n-1];\\n            nums.pop_back();\\n            \\n            //we don\\'t need to calculate the average just store the sum of max and min if their sum is distinct then it will increase the count\\n            st.insert(mn+mx);\\n        }\\n        return st.size();\\n    }\\n};\\n```\\n\\nShorted Shorted the above code \\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        //In this I have used two pointer approach \\n        int i=0,j=nums.size()-1;\\n         // since it is said in the question to only count distinct average so we will use a set to remove duplicates.\\n        unordered_set<int>st;\\n          //Sort the vector so that the 1st and last element of the vector will be the maximm and minimum\\n        sort(nums.begin(),nums.end());\\n        //run a loop until i and j are not equal.\\n        while(i<j){\\n            //we don\\'t need to calculate the average just store the sum of max and min if their sum is distinct then it will                   increase the count\\n            st.insert(nums[i]+nums[j]);\\n            i++,j--;\\n        }\\n        return st.size();\\n    }\\n};\\n```\\n\\nplease Upvote if you find it helpful",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        // since it is said in the question to only count distinct average so we will use a set to remove duplicates.\\n        set<int>st;\\n        //Sort the vector so that the 1st and last element of the vector will be the maximm and minimum\\n        sort(nums.begin(),nums.end());\\n        \\n        while(nums.size()){\\n            int n=nums.size();\\n            \\n            int mn=nums[0];\\n            nums.erase(nums.begin());\\n            \\n            int mx=nums[n-1];\\n            nums.pop_back();\\n            \\n            //we don\\'t need to calculate the average just store the sum of max and min if their sum is distinct then it will increase the count\\n            st.insert(mn+mx);\\n        }\\n        return st.size();\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        //In this I have used two pointer approach \\n        int i=0,j=nums.size()-1;\\n         // since it is said in the question to only count distinct average so we will use a set to remove duplicates.\\n        unordered_set<int>st;\\n          //Sort the vector so that the 1st and last element of the vector will be the maximm and minimum\\n        sort(nums.begin(),nums.end());\\n        //run a loop until i and j are not equal.\\n        while(i<j){\\n            //we don\\'t need to calculate the average just store the sum of max and min if their sum is distinct then it will                   increase the count\\n            st.insert(nums[i]+nums[j]);\\n            i++,j--;\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456254,
                "title": "c-aesthetic-solution-using-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSort the array and use two pointers to get min & max\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Use set to keep unique average sums of min and max.\\n2. Do not use average numbers at all. If 2 different averages is equal, their sum is equial too. Avoid using floating numbers and divisions.\\n3. Use unordered set instead of usual. It gives constant compexity VS logarithmic.\\n\\n# Complexity\\n- Time complexity: $$O(n*log(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n\\n        unordered_set<int> us;\\n        int l = 0, r = nums.size();\\n\\n        while (l < r) {\\n            us.insert(nums[l++] + nums[--r]);\\n        }\\n\\n        return us.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n\\n        unordered_set<int> us;\\n        int l = 0, r = nums.size();\\n\\n        while (l < r) {\\n            us.insert(nums[l++] + nums[--r]);\\n        }\\n\\n        return us.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3445141,
                "title": "easy-c-solution-beat-100",
                "content": "\\n\\n![image.png](https://assets.leetcode.com/users/images/dda3419b-54e3-4ff8-8294-38d8d08f0bfa_1682194137.6907969.png)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        int min=INT_MAX;\\n        int i=0,j=nums.size()-1;\\n        set<double> a;\\n        while(i<j){\\n            double div=(nums[j]+nums[i])/2.0;\\n            cout<<nums[j]<<nums[i]<<div<<endl;\\n            a.insert(div);\\n            i++;\\n            j--;\\n            if(i>j)\\n            break;\\n        }\\n        return a.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        int min=INT_MAX;\\n        int i=0,j=nums.size()-1;\\n        set<double> a;\\n        while(i<j){\\n            double div=(nums[j]+nums[i])/2.0;\\n            cout<<nums[j]<<nums[i]<<div<<endl;\\n            a.insert(div);\\n            i++;\\n            j--;\\n            if(i>j)\\n            break;\\n        }\\n        return a.size();\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3412906,
                "title": "number-of-distinct-averages-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(nlogn)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        float avg;\\n        unordered_set<float> set;\\n        sort(nums.begin(), nums.end());\\n        while(nums.size()>0)\\n        {\\n            avg = (float)(nums[0]+nums[nums.size()-1])/2;\\n            set.insert(avg);\\n            nums.erase(nums.begin()+nums.size()-1);\\n            nums.erase(nums.begin()+0);\\n        }\\n        return set.size();\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/792a2ee3-fa92-4936-9a87-216cd9a9ac02_1682613207.1269994.jpeg)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        float avg;\\n        unordered_set<float> set;\\n        sort(nums.begin(), nums.end());\\n        while(nums.size()>0)\\n        {\\n            avg = (float)(nums[0]+nums[nums.size()-1])/2;\\n            set.insert(avg);\\n            nums.erase(nums.begin()+nums.size()-1);\\n            nums.erase(nums.begin()+0);\\n        }\\n        return set.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232582,
                "title": "typescript-best-and-easy-solution-100-runtime-100-memory",
                "content": "# Intuition\\n\\n* Number of distinct values has to be returned, this means that it may be wise to use a `Set` type as a storage for collected average values.\\n* Minimum and maximum values have to be removed upon each operation, so it may be wise to sort the original array in ascending or descending order to make use of `Array.prototype.shift()` and `Array.prototype.pop()` methods for convenience.\\n\\n# Approach\\n\\n1. Initialize `distAvgs` which is going to store the averages.\\n2. Sort the `nums` array in ascending order.\\n3. Until the `nums` array is empty, loop over the sorted array:\\n    * Compute averages and `shift()`, `pop()` the values used in the computation.\\n    * Add the averages to `distAvgs`.\\n4. Return the size of `distAvgs`.\\n\\n# Complexity\\n- Time complexity: $$o(n)$$\\n\\n    For `n` elements in the original array of even size, `n / 2` loops are needed. So time complexity is always less than `O(n)`, hence why it is `o(n)`.\\n\\n- Space complexity: $$o(n)$$\\n\\n    Only one `Set` data structure is used. For `n` elements in the original array, it would need `n / 2` slots for storage. So space complexity is also always less than `O(n)`, hence why it is also `o(n)`.\\n\\n# Code\\n```\\nfunction distinctAverages(nums: number[]): number {\\n    let distAvgs: Set<number> = new Set<number>();\\n\\n    nums.sort((a, b) => a - b);\\n\\n    while (nums.length > 0) {\\n        distAvgs.add((nums.shift() + nums.pop()) / 2);\\n    }\\n\\n    return distAvgs.size;\\n};\\n```\\n\\n# Submission\\n\\nOriginal submission is [here.](https://leetcode.com/problems/number-of-distinct-averages/submissions/905268337/)\\n\\n![image.png](https://assets.leetcode.com/users/images/e61211b4-56ba-4d09-9a0a-c6824a8f7b2b_1677416405.3095136.png)\\n\\n",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction distinctAverages(nums: number[]): number {\\n    let distAvgs: Set<number> = new Set<number>();\\n\\n    nums.sort((a, b) => a - b);\\n\\n    while (nums.length > 0) {\\n        distAvgs.add((nums.shift() + nums.pop()) / 2);\\n    }\\n\\n    return distAvgs.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3200389,
                "title": "c-0-ms-unordered-set-easy-approach-clean-code",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<double> s;\\n        sort(nums.begin(),nums.end());\\n        int n = nums.size();\\n        for(int i=0;i<n/2;++i){\\n            double avg = (double)(nums[i] + nums[n-i-1])/2;\\n            s.insert(avg);\\n        }\\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<double> s;\\n        sort(nums.begin(),nums.end());\\n        int n = nums.size();\\n        for(int i=0;i<n/2;++i){\\n            double avg = (double)(nums[i] + nums[n-i-1])/2;\\n            s.insert(avg);\\n        }\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3019437,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n        \\n        var ds = Set<Double>()\\n        var ns = nums.sorted()\\n        \\n        for i in 0...(ns.count / 2) {\\n            ds.insert(Double(ns[i] + ns[ns.count - i - 1]) / 2)\\n        }\\n        \\n        return ds.count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n        \\n        var ds = Set<Double>()\\n        var ns = nums.sorted()\\n        \\n        for i in 0...(ns.count / 2) {\\n            ds.insert(Double(ns[i] + ns[ns.count - i - 1]) / 2)\\n        }\\n        \\n        return ds.count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2942336,
                "title": "c-sorting-two-pointer-faster-easy-to-understand",
                "content": "* ***Using Sorting && Two Pointers***\\n\\n* ***Time Complexity :- O(NlogN)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        \\n        // sort the array\\n        \\n        sort(nums.begin(), nums.end());\\n        \\n        // declare a set\\n        \\n        unordered_set<double> s;\\n        \\n        // i will keep track of minimum of every steps and j will keep track of maximum of every steps\\n        \\n        int i = 0;\\n        \\n        int j = n - 1;\\n        \\n        while(i < j)\\n        {\\n            // take out minimum from array\\n            \\n            int mini = nums[i];\\n            \\n            // take out maximum from array\\n            \\n            int maxi = nums[j];\\n            \\n            // find avg.\\n            \\n            double avg = (mini + maxi) / 2.0;\\n            \\n            // insert the avg. into set\\n            \\n            s.insert(avg);\\n            \\n            // update pointers\\n            \\n            i++;\\n            \\n            j--;\\n        }\\n        \\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        \\n        int n = nums.size();\\n        \\n        // sort the array\\n        \\n        sort(nums.begin(), nums.end());\\n        \\n        // declare a set\\n        \\n        unordered_set<double> s;\\n        \\n        // i will keep track of minimum of every steps and j will keep track of maximum of every steps\\n        \\n        int i = 0;\\n        \\n        int j = n - 1;\\n        \\n        while(i < j)\\n        {\\n            // take out minimum from array\\n            \\n            int mini = nums[i];\\n            \\n            // take out maximum from array\\n            \\n            int maxi = nums[j];\\n            \\n            // find avg.\\n            \\n            double avg = (mini + maxi) / 2.0;\\n            \\n            // insert the avg. into set\\n            \\n            s.insert(avg);\\n            \\n            // update pointers\\n            \\n            i++;\\n            \\n            j--;\\n        }\\n        \\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2925106,
                "title": "swift-easy-to-understand",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(default sorting)\\n\\n- Space complexity:\\nO(n) for extra set\\n\\n# Code\\n```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n        var averages = Set<Double>()\\n        let sorted = nums.sorted()\\n        for i in stride(from: 0, to: nums.count/2, by: 1) {\\n            averages.insert(Double(sorted[i] + sorted[sorted.count - 1 - i])/2.0)\\n        }\\n        return averages.count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n        var averages = Set<Double>()\\n        let sorted = nums.sorted()\\n        for i in stride(from: 0, to: nums.count/2, by: 1) {\\n            averages.insert(Double(sorted[i] + sorted[sorted.count - 1 - i])/2.0)\\n        }\\n        return averages.count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2861370,
                "title": "python-sorted-and-set",
                "content": "https://leetcode.com/submissions/detail/852071843/\\n```\\nRuntime: 35 ms\\nMemory Usage: 13.8 MB\\n```\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avgs = set()\\n        nums_sorted = sorted(nums)\\n        for i in range(len(nums)//2):\\n            avgs.add((nums_sorted[i] + nums_sorted[-1-i])/2)\\n        return len(avgs)    \\n```",
                "solutionTags": [
                    "Python",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\nRuntime: 35 ms\\nMemory Usage: 13.8 MB\\n```\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avgs = set()\\n        nums_sorted = sorted(nums)\\n        for i in range(len(nums)//2):\\n            avgs.add((nums_sorted[i] + nums_sorted[-1-i])/2)\\n        return len(avgs)    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2854494,
                "title": "faster-optimised-c-solution",
                "content": "# Approach\\nFirst of all sort the given vector so that in every iteration we are able to fetch the minimum most and maximum element from the modified vector.\\n\\nBy using unordered_set , go on inserting the averages of the extreme elements of the given vector (using Two pointer method).\\n\\n As set contains unique occurences of elements , the final size of the set after insertion would be your answer . \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        /*declared an unordered_set of float datatype(since we are    storing average which are decimal values )*/\\n        unordered_set<float> s;\\n\\n        // sort the given vector nums\\n        sort(nums.begin(),nums.end());\\n\\n        /* Using 2 pointer method find the average of the \\n         extreme elements and go on inserting into the set */\\n        int i=0;\\n        int j=nums.size()-1;\\n        while(i<j){\\n            s.insert((float)(nums[i++]+nums[j--])/2);\\n        }\\n\\n        //return size of the set\\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        /*declared an unordered_set of float datatype(since we are    storing average which are decimal values )*/\\n        unordered_set<float> s;\\n\\n        // sort the given vector nums\\n        sort(nums.begin(),nums.end());\\n\\n        /* Using 2 pointer method find the average of the \\n         extreme elements and go on inserting into the set */\\n        int i=0;\\n        int j=nums.size()-1;\\n        while(i<j){\\n            s.insert((float)(nums[i++]+nums[j--])/2);\\n        }\\n\\n        //return size of the set\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2838562,
                "title": "cpp-two-pointer-s-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) \\n    {\\n    unordered_set<float>st;\\n    sort(nums.begin(),nums.end());\\n    \\n    int start=0;\\n    int end =nums.size()-1;\\n    \\n    while(start<end)\\n    {\\n        int nums1 = nums[start];\\n        int nums2 = nums[end];\\n        \\n        float avg = (nums1+nums2+0.00)/2.0;\\n        \\n        st.insert(avg);\\n        \\n        start++;\\n        end--;\\n    }         \\n    return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) \\n    {\\n    unordered_set<float>st;\\n    sort(nums.begin(),nums.end());\\n    \\n    int start=0;\\n    int end =nums.size()-1;\\n    \\n    while(start<end)\\n    {\\n        int nums1 = nums[start];\\n        int nums2 = nums[end];\\n        \\n        float avg = (nums1+nums2+0.00)/2.0;\\n        \\n        st.insert(avg);\\n        \\n        start++;\\n        end--;\\n    }         \\n    return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2836068,
                "title": "2ms-two-pointers-technique-java",
                "content": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        List<Double> list = new ArrayList<>();\\n        for(double x : nums){list.add(x);}\\n        int left = 0;\\n        int right = list.size() - 1;\\n        Collections.sort(list);\\n        List<Double> average = new ArrayList<>();\\n        while(left < right){\\n            average.add(((list.get(left) + list.get(right))) / 2);\\n            left++;\\n            right--;\\n        }\\n       Set<Double> set = new HashSet<>(average);\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        List<Double> list = new ArrayList<>();\\n        for(double x : nums){list.add(x);}\\n        int left = 0;\\n        int right = list.size() - 1;\\n        Collections.sort(list);\\n        List<Double> average = new ArrayList<>();\\n        while(left < right){\\n            average.add(((list.get(left) + list.get(right))) / 2);\\n            left++;\\n            right--;\\n        }\\n       Set<Double> set = new HashSet<>(average);\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2831078,
                "title": "python3-set",
                "content": "Please pull this [commit](https://github.com/gaosanyong/leetcode/commit/e8b87d04cc192c5227286692921910fe93fee05d) for solutions of biweekly 91. \\n\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        seen = set()\\n        for i in range(len(nums)//2): \\n            seen.add((nums[i] + nums[~i])/2)\\n        return len(seen)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        seen = set()\\n        for i in range(len(nums)//2): \\n            seen.add((nums[i] + nums[~i])/2)\\n        return len(seen)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2820477,
                "title": "5-types-of-solution-easy-fast-solutions-in-java",
                "content": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```\\n```\\n//1.        // 1ms.t.c.\\n        Arrays.sort(nums);\\n\\n        int i = 0, j = nums.length - 1;\\n        int count = 0;\\n        int[] map =  new int[201];\\n\\n        while (i < j){\\n            if ( (map[ nums[i++] + nums[j--] ])++ == 0){\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n        \\n        \\n        \\n//2.        // 99.72% 1ms t.c.\\n//         Arrays.sort(nums);\\n        \\n//         int i = 0, j = nums.length - 1;\\n//         Map<Integer, Integer> map = new HashMap<>();\\n\\n//         while (i < j) map.put(nums[i++] + nums[j--], 1);\\n\\n//         return map.size();\\n      \\n\\t  \\n    \\n//3.        \\n//         int max = 0;\\n//         for(int i: nums)max = Math.max(max, i);\\n\\n//         int[] a = new int[max+1];\\n//         for(int i : nums) a[i]++;\\n        \\n//         int i = 0, j = max;\\n//         Set<Double> set = new HashSet<>();\\n\\n//         while (i <= j){\\n//             if (a[i] == 0) i++;\\n//             else if (a[j] == 0) j--;\\n//             else {\\n//                 set.add(( i + j ) / 2.0);\\n//                 a[i]--;\\n//                 a[j]--;\\n//             }\\n//         }\\n\\n//         return set.size();    \\n    \\n        \\n        \\n//4.        // 2ms t.c.\\n//         int len = nums.length;\\n//         int[] a = new int[101];\\n\\n//         for(int i : nums) a[i]++;\\n\\n//         int i = 0, j = 100;\\n//         Set<Double> set = new HashSet<>();\\n\\n//         while (i <= j){\\n//             if (a[i] == 0) i++;\\n//             else if (a[j] == 0) j--;\\n//             else {\\n//                 double avg = ( i + j ) / 2.0;\\n//                 set.add(avg);\\n//                 a[i]--;\\n//                 a[j]--;\\n//             }\\n//         }\\n\\n//         return set.size();\\n        \\n        \\n\\t\\t\\n//5.        // 2-3 ms  t.c.\\n//         Arrays.sort(nums);\\n//         Set<Integer> set = new HashSet<>();\\n\\n//         int i = 0, j = nums.length - 1;\\n\\n//         while (i < j){\\n//             set.add(nums[i++] + nums[j--]);\\n//         }\\n\\n//         return set.size();",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2818793,
                "title": "python-easy-sorting-o-nlogn-solution",
                "content": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        n=len(nums)\\n        i=0\\n        j=n-1\\n        s=set()\\n        nums.sort()\\n        while i<=j:\\n            s.add((nums[i]+nums[j])/2)\\n            i+=1\\n            j-=1\\n        return len(s)\\n```\\n\\n**Upvote if you like the solution or ask if there is any query**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        n=len(nums)\\n        i=0\\n        j=n-1\\n        s=set()\\n        nums.sort()\\n        while i<=j:\\n            s.add((nums[i]+nums[j])/2)\\n            i+=1\\n            j-=1\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2808569,
                "title": "2465-number-of-distinct-averages-java",
                "content": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Double> hs=new HashSet<>();\\n        int i=0,j=nums.length-1;\\n        while(i<j)\\n        {\\n            double sum=nums[i]+nums[j];\\n            sum/=2.0;\\n            hs.add(sum);\\n            i++;\\n            j--;\\n        }\\n        return hs.size();\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Double> hs=new HashSet<>();\\n        int i=0,j=nums.length-1;\\n        while(i<j)\\n        {\\n            double sum=nums[i]+nums[j];\\n            sum/=2.0;\\n            hs.add(sum);\\n            i++;\\n            j--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2808563,
                "title": "go-golang-solution",
                "content": "```go\\nfunc distinctAverages(nums []int) int {\\n    sort.Ints(nums)\\n    tmp := make(map[int]bool)\\n    for l, r := 0, len(nums) - 1; l < r; l, r = l + 1, r - 1 {\\n        tmp[nums[l] + nums[r]] = true\\n    }\\n    return len(tmp)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc distinctAverages(nums []int) int {\\n    sort.Ints(nums)\\n    tmp := make(map[int]bool)\\n    for l, r := 0, len(nums) - 1; l < r; l, r = l + 1, r - 1 {\\n        tmp[nums[l] + nums[r]] = true\\n    }\\n    return len(tmp)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2808413,
                "title": "c-simple-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nLet\\'s sort the array and pick items from each end\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\na simple `for` loop will do the thing.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n`O(n * log(n))`\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n`O(n)` in the worst case\\n\\n# Code\\n```\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        Array.Sort(nums);\\n\\n        HashSet<int> unique = new();\\n\\n        for (int i = 0; i < nums.Length / 2; ++i)\\n            unique.Add(nums[i] + nums[nums.Length - 1 - i]);\\n\\n        return unique.Count;    \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        Array.Sort(nums);\\n\\n        HashSet<int> unique = new();\\n\\n        for (int i = 0; i < nums.Length / 2; ++i)\\n            unique.Add(nums[i] + nums[nums.Length - 1 - i]);\\n\\n        return unique.Count;    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2808296,
                "title": "java-1-ms-100-explanations",
                "content": "# Intuition\\n\\n\\n# Approach\\n1. Sort the numbers and to use 2 points: left(0), right(n).\\nYou don\\'t need to calculate the average but simply mark the sums of left and right. (1 and 7 will have the same average as 3 + 5; the only thing that matters is the sum of the two)\\n2. Mark/store the sums of left/right in an array of type boolean[201]. If sums[left+right] == false, then this average is unique. Count it and mark it with true.\\n3. Return the number of unique sums (which will lead to unique averages)\\n\\n# Complexity\\n- Time complexity: $$O(nlogn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(201)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        boolean[] sums =  new boolean[201];\\n        int distinct = 0;\\n        Arrays.sort(nums);\\n        for (int i = 0, j = nums.length -1; i < j; i++, j--) {\\n            if (!sums[nums[i] + nums[j]]) {\\n                distinct++;\\n            }\\n            sums[nums[i] + nums[j]] = true;\\n        }\\n        return distinct;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        boolean[] sums =  new boolean[201];\\n        int distinct = 0;\\n        Arrays.sort(nums);\\n        for (int i = 0, j = nums.length -1; i < j; i++, j--) {\\n            if (!sums[nums[i] + nums[j]]) {\\n                distinct++;\\n            }\\n            sums[nums[i] + nums[j]] = true;\\n        }\\n        return distinct;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2808058,
                "title": "python-simple-python-solution",
                "content": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        a=[]\\n        for i in range(len(nums)//2):\\n            a.append((max(nums)+min(nums))/2)\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n            b=set(a)\\n        print(a)\\n        print(b)\\n        return len(b)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        a=[]\\n        for i in range(len(nums)//2):\\n            a.append((max(nums)+min(nums))/2)\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n            b=set(a)\\n        print(a)\\n        print(b)\\n        return len(b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2808031,
                "title": "python-easiest-solution",
                "content": "\\tclass Solution:\\n\\t\\t\\tdef distinctAverages(self, nums: List[int]) -> int:\\n\\t\\t\\t\\tnums.sort()\\n\\t\\t\\t\\tavg=0\\n\\t\\t\\t\\tans=set()\\n\\t\\t\\t\\twhile nums:\\n\\t\\t\\t\\t\\tavg= (nums.pop(0)+nums.pop())/2\\n\\t\\t\\t\\t\\tans.add(avg)\\n\\t\\t\\t\\treturn len(ans)\\n\\n\\n\\n\\n",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\t\\tdef distinctAverages(self, nums: List[int]) -> int:\\n\\t\\t\\t\\tnums.sort()\\n\\t\\t\\t\\tavg=0\\n\\t\\t\\t\\tans=set()\\n\\t\\t\\t\\twhile nums:\\n\\t\\t\\t\\t\\tavg= (nums.pop(0)+nums.pop())/2\\n\\t\\t\\t\\t\\tans.add(avg)\\n\\t\\t\\t\\treturn len(ans)\\n\\n\\n\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 2807918,
                "title": "python-answer-heap-and-set-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse a heap to remember the highest and lowest values\\nUse a set to remember the averages\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(nlogn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        \\n        h1 = nums.copy()\\n        \\n        h2 = [-i for i in nums.copy()]\\n        \\n        ans = set()\\n        \\n        heapify(h1)\\n        heapify(h2)\\n        \\n        while h1 and h2:\\n            \\n            n1 = heappop(h1)\\n            n2= - heappop(h2)\\n\\n            ans.add(mean([n2,n1]))\\n\\n        return len(ans)\\n```",
                "solutionTags": [
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        \\n        h1 = nums.copy()\\n        \\n        h2 = [-i for i in nums.copy()]\\n        \\n        ans = set()\\n        \\n        heapify(h1)\\n        heapify(h2)\\n        \\n        while h1 and h2:\\n            \\n            n1 = heappop(h1)\\n            n2= - heappop(h2)\\n\\n            ans.add(mean([n2,n1]))\\n\\n        return len(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807367,
                "title": "java-easy",
                "content": "### **Please Upvote** :D\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Set<Double> set = new HashSet<>();\\n        List<Integer> list = new ArrayList<>();\\n        for (int i : nums) list.add(i);\\n\\n        while (!list.isEmpty()) {\\n            int max = Collections.max(list);\\n            int min = Collections.min(list);\\n\\n            double avg = (max + min) / 2.0;\\n            set.add(avg);\\n\\n            list.remove(Integer.valueOf(max));\\n            list.remove(Integer.valueOf(min));\\n        }\\n\\n        return set.size();\\n    }\\n}\\n\\n// TC: O(n ^ 2), SC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Set<Double> set = new HashSet<>();\\n        List<Integer> list = new ArrayList<>();\\n        for (int i : nums) list.add(i);\\n\\n        while (!list.isEmpty()) {\\n            int max = Collections.max(list);\\n            int min = Collections.min(list);\\n\\n            double avg = (max + min) / 2.0;\\n            set.add(avg);\\n\\n            list.remove(Integer.valueOf(max));\\n            list.remove(Integer.valueOf(min));\\n        }\\n\\n        return set.size();\\n    }\\n}\\n\\n// TC: O(n ^ 2), SC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807357,
                "title": "easy-c-solution-sets-two-pointers",
                "content": "Here is my C++ Solution :-\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        set<double> st;\\n        int n= nums.size(); int j= n-1;\\n        for (int i=0; i<(n/2); i++){\\n            double x= (1.0)*((double)(nums[i])+(double)(nums[j]))/2;\\n            j--;\\n            st.insert(x);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        set<double> st;\\n        int n= nums.size(); int j= n-1;\\n        for (int i=0; i<(n/2); i++){\\n            double x= (1.0)*((double)(nums[i])+(double)(nums[j]))/2;\\n            j--;\\n            st.insert(x);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807262,
                "title": "c-solution-with-o-n-using-unordered-set-and-by-using-start-and-end-pointers",
                "content": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<double> st;\\n        int start=0, end=nums.size()-1;\\n        while(start<=end)\\n        {\\n            double temp=(nums[start]+nums[end])/2.0;\\n            st.insert(temp);\\n            start++;\\n            end--;\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "Array",
                    "Two Pointers",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<double> st;\\n        int start=0, end=nums.size()-1;\\n        while(start<=end)\\n        {\\n            double temp=(nums[start]+nums[end])/2.0;\\n            st.insert(temp);\\n            start++;\\n            end--;\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807193,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<float> res;\\n        \\n        deque<int> num(nums.begin(), nums.end());\\n        sort(num.begin(), num.end());\\n        \\n        while(!num.empty()) {\\n            int first = num.front();\\n            int last = num.back();\\n            \\n            num.pop_front();\\n            num.pop_back();\\n            \\n            float avg = (float)((first + last) / (float)2);\\n            \\n            res.insert(avg);\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<float> res;\\n        \\n        deque<int> num(nums.begin(), nums.end());\\n        sort(num.begin(), num.end());\\n        \\n        while(!num.empty()) {\\n            int first = num.front();\\n            int last = num.back();\\n            \\n            num.pop_front();\\n            num.pop_back();\\n            \\n            float avg = (float)((first + last) / (float)2);\\n            \\n            res.insert(avg);\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807189,
                "title": "easy-python-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        lis = []\\n \\n        while nums!=[]:\\n            if (min(nums)+max(nums))/2 not in lis:\\n                lis.append((min(nums)+max(nums))/2)\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n        return len(lis)\\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        lis = []\\n \\n        while nums!=[]:\\n            if (min(nums)+max(nums))/2 not in lis:\\n                lis.append((min(nums)+max(nums))/2)\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n        return len(lis)\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807178,
                "title": "java-solution-using-sorting-two-pointer-concept-set",
                "content": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n\\t\\tSet<Double> s=new TreeSet<>();\\n\\t\\tfor(int i=0,j=nums.length-1;i<j;i++,j--) {\\n\\t\\t\\tdouble avg=(double)(nums[i]+nums[j])/2;\\n\\t\\t\\ts.add(avg);\\n\\t\\t}\\n\\t\\treturn s.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n\\t\\tSet<Double> s=new TreeSet<>();\\n\\t\\tfor(int i=0,j=nums.length-1;i<j;i++,j--) {\\n\\t\\t\\tdouble avg=(double)(nums[i]+nums[j])/2;\\n\\t\\t\\ts.add(avg);\\n\\t\\t}\\n\\t\\treturn s.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807173,
                "title": "c-min-heap-max-heap-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\'\\'\\'\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint distinctAverages(vector<int>& nums) {\\n\\t\\t\\tset<double>s;\\n\\t\\t\\tpriority_queue<int>q1;\\n\\t\\t\\tpriority_queue<int, vector<int>, greater<int>>q2;\\n\\t\\t\\tfor(int i=0; i<nums.size(); i++){\\n\\t\\t\\t\\tq1.push(nums[i]);\\n\\t\\t\\t\\tq2.push(nums[i]);\\n\\t\\t\\t}\\n\\t\\t\\twhile(!q1.empty() && !q2.empty()){\\n\\t\\t\\t\\tdouble x=(q1.top()*1.0+q2.top()*1.0)/(2*1.0);\\n\\t\\t\\t\\ts.insert(x);\\n\\t\\t\\t\\tq1.pop(); q2.pop();\\n\\t\\t\\t}\\n\\t\\t\\t// for(auto it: s){\\n\\t\\t\\t//     cout<<it<<endl;\\n\\t\\t\\t// }\\n\\t\\t\\treturn s.size();\\n\\t\\t}\\n\\t};\\n\\'\\'\\'",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)",
                    "Ordered Set"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint distinctAverages(vector<int>& nums) {\\n\\t\\t\\tset<double>s;\\n\\t\\t\\tpriority_queue<int>q1;\\n\\t\\t\\tpriority_queue<int, vector<int>, greater<int>>q2;\\n\\t\\t\\tfor(int i=0; i<nums.size(); i++){\\n\\t\\t\\t\\tq1.push(nums[i]);\\n\\t\\t\\t\\tq2.push(nums[i]);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2807171,
                "title": "java-code-with-detail-explanation-sorting-and-hashset",
                "content": "# Clean Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        HashSet<Double> hs = new HashSet<>();\\n        int start = 0, end = nums.length - 1;\\n        while (start < end) {\\n            double avg = ((double)nums[start] + nums[end]) / 2;\\n            hs.add(avg);\\n            start++;\\n            end--;\\n        }\\n        return hs.size();\\n    }\\n}\\n \\n```\\n\\n# Code with explanation\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        // Sorting the array will give you the easy access of the\\n        // minimum and maximum value by using two pointers \\n        // starting from the start and end of the array.\\n        Arrays.sort(nums);\\n\\n        // HashSet will help to store only distinct average\\n        HashSet<Double> hs = new HashSet<>();\\n\\n        int start = 0, end = nums.length - 1;\\n        while (start < end) {\\n\\n            // (double)nums[start] -> Typecasting is required to\\n            // make the output result of double type or else if \\n            // we devide (2 + 3) / 2 then it will give 2.0 and not 2.5\\n            double avg = ((double)nums[start] + nums[end]) / 2;\\n            hs.add(avg);\\n            start++;\\n            end--;\\n        }\\n\\n        // Finally return the Hashset size since all the values \\n        // present in the hashset are distinct and are the required result\\n        return hs.size();\\n    }\\n}\\n \\n```\\n\\n**Time Complexity: O(nlogn)**\\n**Space Complexity: O(n)**\\n\\n\\n\\n",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        HashSet<Double> hs = new HashSet<>();\\n        int start = 0, end = nums.length - 1;\\n        while (start < end) {\\n            double avg = ((double)nums[start] + nums[end]) / 2;\\n            hs.add(avg);\\n            start++;\\n            end--;\\n        }\\n        return hs.size();\\n    }\\n}\\n \\n```\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        // Sorting the array will give you the easy access of the\\n        // minimum and maximum value by using two pointers \\n        // starting from the start and end of the array.\\n        Arrays.sort(nums);\\n\\n        // HashSet will help to store only distinct average\\n        HashSet<Double> hs = new HashSet<>();\\n\\n        int start = 0, end = nums.length - 1;\\n        while (start < end) {\\n\\n            // (double)nums[start] -> Typecasting is required to\\n            // make the output result of double type or else if \\n            // we devide (2 + 3) / 2 then it will give 2.0 and not 2.5\\n            double avg = ((double)nums[start] + nums[end]) / 2;\\n            hs.add(avg);\\n            start++;\\n            end--;\\n        }\\n\\n        // Finally return the Hashset size since all the values \\n        // present in the hashset are distinct and are the required result\\n        return hs.size();\\n    }\\n}\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807163,
                "title": "java-simple-solution-sorting-and-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Set<Integer> set = new HashSet<>();\\n        Arrays.sort(nums);\\n        int i = 0, j = nums.length-1;\\n        \\n        while (i < j) {\\n            int ave = nums[i++]+nums[j--];\\n            set.add(ave);\\n        }\\n        \\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Set<Integer> set = new HashSet<>();\\n        Arrays.sort(nums);\\n        int i = 0, j = nums.length-1;\\n        \\n        while (i < j) {\\n            int ave = nums[i++]+nums[j--];\\n            set.add(ave);\\n        }\\n        \\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807158,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\ntypedef long long ll;\\ntypedef long double ld;\\npublic:\\n    int distinctAverages(vector<int>&v) {\\n        sort(begin(v), end(v));\\n        ll l=0, r=v.size()-1;\\n        unordered_set<ld>ust;\\n        while(l<r){\\n            ust.insert((ld(v[l++])+ld(v[r--]))/ld(2));\\n        }\\n        return ust.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\ntypedef long long ll;\\ntypedef long double ld;\\npublic:\\n    int distinctAverages(vector<int>&v) {\\n        sort(begin(v), end(v));\\n        ll l=0, r=v.size()-1;\\n        unordered_set<ld>ust;\\n        while(l<r){\\n            ust.insert((ld(v[l++])+ld(v[r--]))/ld(2));\\n        }\\n        return ust.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807148,
                "title": "java-sort-and-count",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSort and count distinct sum.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse boolean array to count distinct sum.\\n\\n# Complexity\\n- Time complexity: $$O(N*logN)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int distinctAverages(int[] nums) {\\n    final int n = nums.length;\\n    boolean[] count = new boolean[201];\\n    Arrays.sort(nums);\\n    for (int i = 0, j = n - 1; i < j; ) {\\n      count[nums[i++] + nums[j--]] = true;\\n    }\\n\\n    int result = 0;\\n    for (boolean a : count) {\\n      if (a) {\\n        result++;\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Sort",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n  public int distinctAverages(int[] nums) {\\n    final int n = nums.length;\\n    boolean[] count = new boolean[201];\\n    Arrays.sort(nums);\\n    for (int i = 0, j = n - 1; i < j; ) {\\n      count[nums[i++] + nums[j--]] = true;\\n    }\\n\\n    int result = 0;\\n    for (boolean a : count) {\\n      if (a) {\\n        result++;\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807137,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int i = 0;\\n        int j = nums.length-1;\\n\\t\\t//  If there will be duplicates, set will not add it. Hence, we will get unique values.\\n        HashSet<Double> set = new HashSet<>();\\n\\n        while(i < j){\\n            double avg = (nums[i]+nums[j])/2.0;\\n            set.add(avg);\\n            i++;\\n            j--;\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int i = 0;\\n        int j = nums.length-1;\\n\\t\\t//  If there will be duplicates, set will not add it. Hence, we will get unique values.\\n        HashSet<Double> set = new HashSet<>();\\n\\n        while(i < j){\\n            double avg = (nums[i]+nums[j])/2.0;\\n            set.add(avg);\\n            i++;\\n            j--;\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2807135,
                "title": "two-pointer-set-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        set<double> st;\\n        int left = 0, right= nums.size() -1 ;\\n        while(left < right){\\n            double num1 = nums[left++];\\n            double num2 =nums[right--];\\n            st.insert((num1 + num2)/2);\\n        };\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        set<double> st;\\n        int left = 0, right= nums.size() -1 ;\\n        while(left < right){\\n            double num1 = nums[left++];\\n            double num2 =nums[right--];\\n            st.insert((num1 + num2)/2);\\n        };\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097605,
                "title": "simple-solution",
                "content": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int: \\n        nums.sort()\\n        n = len(nums)\\n        return len({nums[i]+nums[n-i-1] for i in range(n//2)})\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int: \\n        nums.sort()\\n        n = len(nums)\\n        return len({nums[i]+nums[n-i-1] for i in range(n//2)})\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087948,
                "title": "easy-to-understand-java-solution-using-sorting-and-hashset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Float> set = new HashSet<Float>();\\n        int low =0;\\n        int high = nums.length-1;\\n        //System.out.println(Arrays.toString(nums));\\n        while(low<high){\\n            float avg = (nums[low]+nums[high])/2.0f;\\n            set.add(avg);\\n            low++;\\n            high--;\\n        }\\n        //System.out.println(set);\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Float> set = new HashSet<Float>();\\n        int low =0;\\n        int high = nums.length-1;\\n        //System.out.println(Arrays.toString(nums));\\n        while(low<high){\\n            float avg = (nums[low]+nums[high])/2.0f;\\n            set.add(avg);\\n            low++;\\n            high--;\\n        }\\n        //System.out.println(set);\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076789,
                "title": "solution-through-recursion",
                "content": "# Approach\\nSolution through sorting, recursive function for going through list and saving average of Min&Max, finaly getting length of set.\\n\\n# Code\\n```\\nclass Solution:\\n    def all_averages(self, L):\\n        allA = []\\n        def extract(L):\\n            ixvar = [L[0],L[-1]]\\n            for i in ixvar:\\n                L.remove(i)\\n            allA.append(sum(ixvar)/2)\\n            while L:\\n                extract(L)\\n        extract(L)\\n        return allA\\n        \\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nList = list(nums)\\n        nList.sort()\\n        return len(set(self.all_averages(nList)))\\n```",
                "solutionTags": [
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def all_averages(self, L):\\n        allA = []\\n        def extract(L):\\n            ixvar = [L[0],L[-1]]\\n            for i in ixvar:\\n                L.remove(i)\\n            allA.append(sum(ixvar)/2)\\n            while L:\\n                extract(L)\\n        extract(L)\\n        return allA\\n        \\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nList = list(nums)\\n        nList.sort()\\n        return len(set(self.all_averages(nList)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4065530,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(std::vector<int>& nums) {\\n    std::unordered_set<double> s;\\n\\n    while (!nums.empty()) {\\n        int maximum = *std::max_element(nums.begin(), nums.end());\\n        int minimum = *std::min_element(nums.begin(), nums.end());\\n\\n        auto it1 = std::find(nums.begin(), nums.end(), maximum);\\n        nums.erase(it1);\\n        auto it2 = std::find(nums.begin(), nums.end(), minimum);\\n        nums.erase(it2);\\n\\n        double avg = double(maximum + minimum) / 2.0;  // Use double division for accurate average\\n        std::cout << maximum << \",\" << minimum << \"    \";\\n        s.insert(avg);\\n    }\\n\\n    return s.size();\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(std::vector<int>& nums) {\\n    std::unordered_set<double> s;\\n\\n    while (!nums.empty()) {\\n        int maximum = *std::max_element(nums.begin(), nums.end());\\n        int minimum = *std::min_element(nums.begin(), nums.end());\\n\\n        auto it1 = std::find(nums.begin(), nums.end(), maximum);\\n        nums.erase(it1);\\n        auto it2 = std::find(nums.begin(), nums.end(), minimum);\\n        nums.erase(it2);\\n\\n        double avg = double(maximum + minimum) / 2.0;  // Use double division for accurate average\\n        std::cout << maximum << \",\" << minimum << \"    \";\\n        s.insert(avg);\\n    }\\n\\n    return s.size();\\n}\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4049333,
                "title": "1ms-fast-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n\\n        for (int i = 1; i < nums.length; i++) {\\n            for (int j = i; j > 0 && nums[j - 1] > nums[j]; j--) {\\n                int swp = nums[j];\\n                nums[j] = nums[j - 1];\\n                nums[j - 1] = swp;\\n            }\\n        }\\n\\n        int left = 0;\\n        int right = nums.length - 1;\\n\\n        Set<Double> avgs = new HashSet<>();\\n\\n        while (true) {\\n            avgs.add((double) (nums[left++] + nums[right]) / 2);\\n\\n            if (nums[left] != nums[right]) {\\n                right--;\\n            }\\n\\n            if (left >= right) {\\n                break;\\n            }\\n        }\\n\\n        return avgs.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n\\n        for (int i = 1; i < nums.length; i++) {\\n            for (int j = i; j > 0 && nums[j - 1] > nums[j]; j--) {\\n                int swp = nums[j];\\n                nums[j] = nums[j - 1];\\n                nums[j - 1] = swp;\\n            }\\n        }\\n\\n        int left = 0;\\n        int right = nums.length - 1;\\n\\n        Set<Double> avgs = new HashSet<>();\\n\\n        while (true) {\\n            avgs.add((double) (nums[left++] + nums[right]) / 2);\\n\\n            if (nums[left] != nums[right]) {\\n                right--;\\n            }\\n\\n            if (left >= right) {\\n                break;\\n            }\\n        }\\n\\n        return avgs.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042301,
                "title": "two-pointer-approch-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {/*\\n        if(nums.length<=2){\\n            return 1;\\n        }\\n        Arrays.sort(nums);\\n        int left = 0;\\n        int right = nums.length-1;\\n        long total=0;\\n        while(left<right){\\n            long sum = nums[left]+nums[right];\\n            total+= sum/2.0;\\n            left++;\\n            right--;\\n        }\\n        return (int)(total/(nums.length/2));*/\\n\\n        Arrays.sort(nums);\\n        Set<Double> set = new TreeSet<>();\\n        for(int i=0, j=nums.length-1; i<j; i++, j--){\\n            double avg = (double)(nums[i]+nums[j])/2;\\n            set.add(avg);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {/*\\n        if(nums.length<=2){\\n            return 1;\\n        }\\n        Arrays.sort(nums);\\n        int left = 0;\\n        int right = nums.length-1;\\n        long total=0;\\n        while(left<right){\\n            long sum = nums[left]+nums[right];\\n            total+= sum/2.0;\\n            left++;\\n            right--;\\n        }\\n        return (int)(total/(nums.length/2));*/\\n\\n        Arrays.sort(nums);\\n        Set<Double> set = new TreeSet<>();\\n        for(int i=0, j=nums.length-1; i<j; i++, j--){\\n            double avg = (double)(nums[i]+nums[j])/2;\\n            set.add(avg);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042291,
                "title": "easy-optimize-4-line-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {/*\\n        if(nums.length<=2){\\n            return 1;\\n        }\\n        Arrays.sort(nums);\\n        int left = 0;\\n        int right = nums.length-1;\\n        long total=0;\\n        while(left<right){\\n            long sum = nums[left]+nums[right];\\n            total+= sum/2.0;\\n            left++;\\n            right--;\\n        }\\n        return (int)(total/(nums.length/2));*/\\n\\n        Arrays.sort(nums);\\n        Set<Double> set = new TreeSet<>();\\n        for(int i=0, j=nums.length-1; i<j; i++, j--){\\n            double avg = (double)(nums[i]+nums[j])/2;\\n            set.add(avg);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {/*\\n        if(nums.length<=2){\\n            return 1;\\n        }\\n        Arrays.sort(nums);\\n        int left = 0;\\n        int right = nums.length-1;\\n        long total=0;\\n        while(left<right){\\n            long sum = nums[left]+nums[right];\\n            total+= sum/2.0;\\n            left++;\\n            right--;\\n        }\\n        return (int)(total/(nums.length/2));*/\\n\\n        Arrays.sort(nums);\\n        Set<Double> set = new TreeSet<>();\\n        for(int i=0, j=nums.length-1; i<j; i++, j--){\\n            double avg = (double)(nums[i]+nums[j])/2;\\n            set.add(avg);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040579,
                "title": "nice-and-elegant-solution-in-java-beats-100-rt-and-98-memory",
                "content": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Double> arr = new HashSet<>();\\n        for (int i = 0, j = nums.length - 1; i < nums.length / 2; i++, j--) {\\n            arr.add((nums[i] + nums[j]) / 2.0);\\n        }\\n        return arr.size();        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Double> arr = new HashSet<>();\\n        for (int i = 0, j = nums.length - 1; i < nums.length / 2; i++, j--) {\\n            arr.add((nums[i] + nums[j]) / 2.0);\\n        }\\n        return arr.size();        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4024433,
                "title": "0ms-rust-solution",
                "content": "Sort list, iterate from front and back to middle to get min/max pairs, calculate averages, sort again just to use dedup method, then get length of resulting collection.\\n\\nO(nlogn) time complexity because of the sort calls I think.\\n\\n```\\nimpl Solution {\\n    pub fn distinct_averages(mut nums: Vec<i32>) -> i32 {\\n        nums.sort();\\n        let mut v = nums.iter().enumerate().zip(nums.iter().enumerate().rev())\\n            .map_while(|((ind1, &min), (ind2, &max))| if ind1 < ind2 { Some((min as f32 + max as f32) / 2.) } else { None })\\n            .collect::<Vec<f32>>();\\n        v.sort_by(|a, b| a.partial_cmp(b).unwrap());\\n        v.dedup();\\n        v.len() as i32\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn distinct_averages(mut nums: Vec<i32>) -> i32 {\\n        nums.sort();\\n        let mut v = nums.iter().enumerate().zip(nums.iter().enumerate().rev())\\n            .map_while(|((ind1, &min), (ind2, &max))| if ind1 < ind2 { Some((min as f32 + max as f32) / 2.) } else { None })\\n            .collect::<Vec<f32>>();\\n        v.sort_by(|a, b| a.partial_cmp(b).unwrap());\\n        v.dedup();\\n        v.len() as i32\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4023902,
                "title": "simple-and-easy-to-understand-solution-in-c-beats-100-users-of-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n\\n        // sort the given vector\\n        sort(nums.begin(),nums.end());\\n        int i,p1,p2;\\n        double average;\\n        vector<double> avg;\\n\\n        // Iterate the vector with two pointers p1 and p2 p1 points the starting or smallest element and p2 points the end or largest element of the vector\\n        for(p1=0,p2=nums.size()-1;p1<p2;p1++,p2--)\\n        {\\n            average=(double)(nums[p1]+nums[p2])/2;\\n            if(avg.size()==0)\\n            {\\n                avg.push_back(average);\\n            }\\n            else\\n            {\\n                // This for loop is used to avoid the duplicate values in avg vector if the averages are same then avoid it and if they are distinct then push it into avg vector\\n                for(i=avg.size()-1;i>=0;i--)\\n                {\\n                    if(avg[i]==average)\\n                    {\\n                        break;\\n                    }\\n                }\\n                if(i<0)\\n                {\\n                    avg.push_back(average);\\n                }\\n            }\\n        }\\n\\n        // Now the size of the avg vector is the number of distinct averages\\n        return avg.size();;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n\\n        // sort the given vector\\n        sort(nums.begin(),nums.end());\\n        int i,p1,p2;\\n        double average;\\n        vector<double> avg;\\n\\n        // Iterate the vector with two pointers p1 and p2 p1 points the starting or smallest element and p2 points the end or largest element of the vector\\n        for(p1=0,p2=nums.size()-1;p1<p2;p1++,p2--)\\n        {\\n            average=(double)(nums[p1]+nums[p2])/2;\\n            if(avg.size()==0)\\n            {\\n                avg.push_back(average);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4019787,
                "title": "simple-java-solution-1-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        ArrayList<Float> list=new ArrayList<>();\\n        Arrays.sort(nums);\\n        int j=1;\\n        for(int i=0;i<nums.length/2;i++){\\n            float avg=(float)(nums[i]+nums[nums.length-j])/2;\\n            if(!list.contains(avg))\\n                list.add(avg);\\n            j++;\\n        }\\n        return list.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        ArrayList<Float> list=new ArrayList<>();\\n        Arrays.sort(nums);\\n        int j=1;\\n        for(int i=0;i<nums.length/2;i++){\\n            float avg=(float)(nums[i]+nums[nums.length-j])/2;\\n            if(!list.contains(avg))\\n                list.add(avg);\\n            j++;\\n        }\\n        return list.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4016353,
                "title": "simple-javascript-solution-using-hashset-o-n-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/*\\n2465. Number of Distinct Averages\\nhttps://leetcode.com/problems/number-of-distinct-averages/\\n\\nYou are given a 0-indexed integer array nums of even length.\\n\\nAs long as nums is not empty, you must repetitively:\\n\\nFind the minimum number in nums and remove it.\\nFind the maximum number in nums and remove it.\\nCalculate the average of the two removed numbers.\\nThe average of two numbers a and b is (a + b) / 2.\\n\\nFor example, the average of 2 and 3 is (2 + 3) / 2 = 2.5.\\nReturn the number of distinct averages calculated using the above process.\\n\\nNote that when there is a tie for a minimum or maximum number, any can be removed.\\n\\nExample 1:\\n\\nInput: nums = [4,1,4,0,3,5]\\nOutput: 2\\nExplanation:\\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\\n\\nExample 2:\\n\\nInput: nums = [1,100]\\nOutput: 1\\nExplanation:\\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\\n\\nConstraints:\\n\\n2 <= nums.length <= 100\\nnums.length is even.\\n0 <= nums[i] <= 100\\n\\nData Structures:\\ninput: Array of integers\\noutput: Integer\\n\\nAlgorithm:\\n0. Edge case - If nums.length is equal to 2, then return 1.\\n1. Declare and Create a variable named set and initialize it to an empty set. \\n2. Run a while loop as long as the nums.length is greater than 0.\\n  - Declare and Create a variable named minValue and assign it to minimum value of nums array. \\n  - Declare and Create a variable named maxValue and assign it to the maximum value of nums array.\\n  - Remove the minValue from the nums array.\\n  - Remove the maxValue from the nums array.\\n  - Declare and Create a variable named average and assign it to the average value between minValue and maxValue. \\n  - Add the value of `average` to the set. \\n3. Return the size of the hashset, set to the calling function. \\n\\nComplexity Analysis:\\n1. Time Complexity = O(N ^ 2)\\n2. Space Complexity = O(N)\\n\\n*/\\n\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    if (nums.length === 2) {\\n    return 1;\\n  }\\n\\n  const set = new Set();\\n\\n  while (nums.length > 0) {\\n    let minValue = Math.min(...nums);\\n    let maxValue = Math.max(...nums);\\n    let average = (minValue + maxValue) / 2;\\n    nums.splice(nums.indexOf(minValue), 1);\\n    nums.splice(nums.indexOf(maxValue), 1);\\n    set.add(average);\\n  }\\n  // console.log(set);\\n\\n  return set.size;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/*\\n2465. Number of Distinct Averages\\nhttps://leetcode.com/problems/number-of-distinct-averages/\\n\\nYou are given a 0-indexed integer array nums of even length.\\n\\nAs long as nums is not empty, you must repetitively:\\n\\nFind the minimum number in nums and remove it.\\nFind the maximum number in nums and remove it.\\nCalculate the average of the two removed numbers.\\nThe average of two numbers a and b is (a + b) / 2.\\n\\nFor example, the average of 2 and 3 is (2 + 3) / 2 = 2.5.\\nReturn the number of distinct averages calculated using the above process.\\n\\nNote that when there is a tie for a minimum or maximum number, any can be removed.\\n\\nExample 1:\\n\\nInput: nums = [4,1,4,0,3,5]\\nOutput: 2\\nExplanation:\\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\\n\\nExample 2:\\n\\nInput: nums = [1,100]\\nOutput: 1\\nExplanation:\\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\\n\\nConstraints:\\n\\n2 <= nums.length <= 100\\nnums.length is even.\\n0 <= nums[i] <= 100\\n\\nData Structures:\\ninput: Array of integers\\noutput: Integer\\n\\nAlgorithm:\\n0. Edge case - If nums.length is equal to 2, then return 1.\\n1. Declare and Create a variable named set and initialize it to an empty set. \\n2. Run a while loop as long as the nums.length is greater than 0.\\n  - Declare and Create a variable named minValue and assign it to minimum value of nums array. \\n  - Declare and Create a variable named maxValue and assign it to the maximum value of nums array.\\n  - Remove the minValue from the nums array.\\n  - Remove the maxValue from the nums array.\\n  - Declare and Create a variable named average and assign it to the average value between minValue and maxValue. \\n  - Add the value of `average` to the set. \\n3. Return the size of the hashset, set to the calling function. \\n\\nComplexity Analysis:\\n1. Time Complexity = O(N ^ 2)\\n2. Space Complexity = O(N)\\n\\n*/\\n\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    if (nums.length === 2) {\\n    return 1;\\n  }\\n\\n  const set = new Set();\\n\\n  while (nums.length > 0) {\\n    let minValue = Math.min(...nums);\\n    let maxValue = Math.max(...nums);\\n    let average = (minValue + maxValue) / 2;\\n    nums.splice(nums.indexOf(minValue), 1);\\n    nums.splice(nums.indexOf(maxValue), 1);\\n    set.add(average);\\n  }\\n  // console.log(set);\\n\\n  return set.size;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4016093,
                "title": "easy-approach",
                "content": "# Intuition\\n1- first of all sort the array.\\n2- after getting the average of two pair (min value , max value), find another pair  \\n\\n# Approach\\n1- Get the variable for the loop e.g i am using left and right for the ease\\n2- Compare both variable in terms of indexes and extract indexes values to get average\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n  const res = new Set(); \\n  nums.sort((left, right)=> left-right);\\n  let left=0;\\n  let right = nums.length-1;\\n   \\n  while (left < right){\\n     res.add((nums[left] + nums[right]) / 2)\\n     left +=1;\\n     right -=1;\\n  }\\n  return res.size\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n  const res = new Set(); \\n  nums.sort((left, right)=> left-right);\\n  let left=0;\\n  let right = nums.length-1;\\n   \\n  while (left < right){\\n     res.add((nums[left] + nums[right]) / 2)\\n     left +=1;\\n     right -=1;\\n  }\\n  return res.size\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012656,
                "title": "easy-approch-in-c-by-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& n) {\\n        sort(n.begin(),n.end());\\n        set<double>a;\\n        for(int i=0;i<n.size()/2;i++){\\n            a.insert(((double)n[i]+n[n.size()-1-i])/2);\\n            \\n        }\\n        return a.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& n) {\\n        sort(n.begin(),n.end());\\n        set<double>a;\\n        for(int i=0;i<n.size()/2;i++){\\n            a.insert(((double)n[i]+n[n.size()-1-i])/2);\\n            \\n        }\\n        return a.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4000964,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        HashSet<Double>a1=new HashSet<>();\\n        int i=0;\\n        int j=nums.length-1;\\n        while(i<=j)\\n        {\\n            double dif=(nums[i]+nums[j])/2.0;\\n            a1.add(dif);\\n            i++;\\n            j--;\\n        }\\n        return a1.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        HashSet<Double>a1=new HashSet<>();\\n        int i=0;\\n        int j=nums.length-1;\\n        while(i<=j)\\n        {\\n            double dif=(nums[i]+nums[j])/2.0;\\n            a1.add(dif);\\n            i++;\\n            j--;\\n        }\\n        return a1.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3990635,
                "title": "simple-easy-to-understand-solution",
                "content": "# Intuition\\nDo not remove the element from array as it will increase the time complexity.\\n# Approach\\nSort the array so that minimum and maximum are at extreme end of array. get the average of these two and increase/decrease index of both end and keep inserting averages on unordered set. return the set size once the loop ends.\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<double> avgSet;\\n        double average=0;\\n        int idx=0;\\n        sort(nums.begin(),nums.end());\\n        int last =nums.size()-1;\\n\\n        idx=0;\\n        while(idx<last)\\n        {\\n            average = ((double)nums[idx] + (double)nums[last]) /2;\\n            avgSet.insert(average);\\n \\n                idx++;\\n                last--;\\n        }\\n\\n        return avgSet.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        unordered_set<double> avgSet;\\n        double average=0;\\n        int idx=0;\\n        sort(nums.begin(),nums.end());\\n        int last =nums.size()-1;\\n\\n        idx=0;\\n        while(idx<last)\\n        {\\n            average = ((double)nums[idx] + (double)nums[last]) /2;\\n            avgSet.insert(average);\\n \\n                idx++;\\n                last--;\\n        }\\n\\n        return avgSet.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983053,
                "title": "very-easy-simple-for-beginners-beats-90-percent",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        a=[]\\n        nums.sort()\\n        while True:\\n            if len(nums)==0:\\n                break\\n            else:\\n                x=(nums[0]+nums[len(nums)-1])/2 \\n                nums.remove(nums[0])\\n                nums.remove(nums[len(nums)-1])\\n                if x not in a:\\n                    a.append(x)\\n               \\n        return len(a)\\n                \\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        a=[]\\n        nums.sort()\\n        while True:\\n            if len(nums)==0:\\n                break\\n            else:\\n                x=(nums[0]+nums[len(nums)-1])/2 \\n                nums.remove(nums[0])\\n                nums.remove(nums[len(nums)-1])\\n                if x not in a:\\n                    a.append(x)\\n               \\n        return len(a)\\n                \\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978695,
                "title": "easy-java-solution-for-newbie",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n  \\n        \\n    Arrays.sort(nums);\\n    \\n    int start=0;\\n    int end=nums.length-1;\\n    \\n    double sum=0;\\n    int count=0;\\n    int k=0;\\n    double array[]=new double[nums.length/2];\\n    while(start<end){\\n     \\n      sum=(double)(nums[start]+nums[end])/2;\\n      array[k]=sum;\\n      start++;\\n      end--;\\n      k++;\\n    }\\n    \\n    Arrays.sort(array);\\n    \\n    for(int i=0;i<array.length-1;i++){\\n      for(int j=i+1;j<array.length;j++){\\n        if(array[i]==array[j]){\\n          count++;\\n          break;\\n        }\\n      }\\n    }\\n     return (array.length-count);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n  \\n        \\n    Arrays.sort(nums);\\n    \\n    int start=0;\\n    int end=nums.length-1;\\n    \\n    double sum=0;\\n    int count=0;\\n    int k=0;\\n    double array[]=new double[nums.length/2];\\n    while(start<end){\\n     \\n      sum=(double)(nums[start]+nums[end])/2;\\n      array[k]=sum;\\n      start++;\\n      end--;\\n      k++;\\n    }\\n    \\n    Arrays.sort(array);\\n    \\n    for(int i=0;i<array.length-1;i++){\\n      for(int j=i+1;j<array.length;j++){\\n        if(array[i]==array[j]){\\n          count++;\\n          break;\\n        }\\n      }\\n    }\\n     return (array.length-count);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3977629,
                "title": "very-basic-java-soln-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Integer> set=new HashSet<>();\\n        for(int i=0;i<nums.length;i++){\\n            set.add(nums[i]+nums[nums.length-i-1]);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        Set<Integer> set=new HashSet<>();\\n        for(int i=0;i<nums.length;i++){\\n            set.add(nums[i]+nums[nums.length-i-1]);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976200,
                "title": "easy-to-understand-python3-solution-tc-o-n-sc-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        res = set()\\n\\n        while nums:\\n            nums.sort()\\n            avg = (nums[0] + nums[-1]) / 2\\n            res.add(avg)\\n            nums = nums[1:-1]\\n        \\n        return len(res)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        res = set()\\n\\n        while nums:\\n            nums.sort()\\n            avg = (nums[0] + nums[-1]) / 2\\n            res.add(avg)\\n            nums = nums[1:-1]\\n        \\n        return len(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3967528,
                "title": "1ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSort the array.\\nTwo pointer left(from starting) and right(from ending).\\nleft points to smallest element.\\nright points to largest element.\\nTake average of them((nums[left]+nums[right])/2)\\nStore the average in a ArrayList.\\nIncrement left and Decrement right(left++ , right--).\\nNow do this till left < right.\\nReturn list.size() as no of different averages.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        List<Double> list=new ArrayList<>();\\n        Arrays.sort(nums);\\n        int left=0;\\n        int right=nums.length-1;\\n        while(left<right)\\n        {\\n            double avg=(double)(nums[left]+nums[right])/2;\\n            if(!list.contains(avg))\\n            {\\n                list.add(avg);\\n            }\\n            left++;\\n            right--;\\n        }\\n        return list.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        List<Double> list=new ArrayList<>();\\n        Arrays.sort(nums);\\n        int left=0;\\n        int right=nums.length-1;\\n        while(left<right)\\n        {\\n            double avg=(double)(nums[left]+nums[right])/2;\\n            if(!list.contains(avg))\\n            {\\n                list.add(avg);\\n            }\\n            left++;\\n            right--;\\n        }\\n        return list.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3967033,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        ArrayList<Integer> list = new ArrayList<>();\\n        ArrayList<Double> list1 = new ArrayList<>();\\n        for(int i:nums){\\n            list.add(i);\\n        }\\n\\n        while(list.size()!=0){\\n            int x = list.get(0);\\n            int y = list.get(list.size()-1);\\n            double diff = (x+y)/2.0;\\n            if(list1.contains(diff)){\\n\\n            }\\n            else{\\n                list1.add(diff);\\n            }\\n            list.remove(0);\\n            list.remove(list.size()-1);\\n        }\\n        return list1.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        ArrayList<Integer> list = new ArrayList<>();\\n        ArrayList<Double> list1 = new ArrayList<>();\\n        for(int i:nums){\\n            list.add(i);\\n        }\\n\\n        while(list.size()!=0){\\n            int x = list.get(0);\\n            int y = list.get(list.size()-1);\\n            double diff = (x+y)/2.0;\\n            if(list1.contains(diff)){\\n\\n            }\\n            else{\\n                list1.add(diff);\\n            }\\n            list.remove(0);\\n            list.remove(list.size()-1);\\n        }\\n        return list1.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3966731,
                "title": "swift-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n        \\n        var numsCopy = nums, averageValues = [Double]()\\n\\n        while !numsCopy.isEmpty {\\n            numsCopy = numsCopy.sorted()\\n            let min = numsCopy.removeFirst(), max = numsCopy.removeLast()\\n            averageValues.append((Double(min) + Double(max)) / 2)\\n        }\\n        \\n        return Set(averageValues).count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "Hash Table",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n        \\n        var numsCopy = nums, averageValues = [Double]()\\n\\n        while !numsCopy.isEmpty {\\n            numsCopy = numsCopy.sorted()\\n            let min = numsCopy.removeFirst(), max = numsCopy.removeLast()\\n            averageValues.append((Double(min) + Double(max)) / 2)\\n        }\\n        \\n        return Set(averageValues).count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959576,
                "title": "c-solution-beginner-s-friendly-full-explanation",
                "content": "# Intuition\\nCan be solve using Vector predefined functions.\\n\\n# Approach\\n1. Iterate till the nums size becomes zero.\\n2. Now sort the nums vector so that smallest comes ast beginning and largest go at the back.\\n3. Calculate the average of first and last element and store the float value to another vector.\\n4. Remove first and last element from the vector.\\n5. It keeps on iterate till the nums size become zero.\\n6. Once it come out of loop. find th eunique element from the vector and delete the repeated element and return the count.\\n\\n**Thanks. Happy Coding!!**\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        \\n        \\n        vector<float> ans;\\n        while(nums.size()!=0){\\n            \\n        sort(nums.begin(),nums.end());\\n        \\n        ans.push_back(float(nums[0]+nums[nums.size()-1])/2); //avg no.\\n        \\n        nums.erase(nums.begin());  //delete first element(smallest)\\n        nums.pop_back();          //delete last element(largest)\\n        }\\n        \\n        sort(ans.begin(),ans.end());\\n        ans.erase( unique( ans.begin(), ans.end() ), ans.end() );\\n\\n        return ans.size();\\n   \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        \\n        \\n        vector<float> ans;\\n        while(nums.size()!=0){\\n            \\n        sort(nums.begin(),nums.end());\\n        \\n        ans.push_back(float(nums[0]+nums[nums.size()-1])/2); //avg no.\\n        \\n        nums.erase(nums.begin());  //delete first element(smallest)\\n        nums.pop_back();          //delete last element(largest)\\n        }\\n        \\n        sort(ans.begin(),ans.end());\\n        ans.erase( unique( ans.begin(), ans.end() ), ans.end() );\\n\\n        return ans.size();\\n   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959478,
                "title": "golang-1ms",
                "content": "```\\nfunc distinctAverages(nums []int) int {\\n    ans := 0\\n    mp := make(map[int]int, 0)\\n    sort.Ints(nums)\\n    for i:=0;i<len(nums)/2;i++ {\\n        tmp := nums[i] + nums[len(nums)-1-i]\\n        if mp[tmp] == 0 {\\n            mp[tmp] += 1\\n            ans += 1\\n        }\\n    }\\n    return ans\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc distinctAverages(nums []int) int {\\n    ans := 0\\n    mp := make(map[int]int, 0)\\n    sort.Ints(nums)\\n    for i:=0;i<len(nums)/2;i++ {\\n        tmp := nums[i] + nums[len(nums)-1-i]\\n        if mp[tmp] == 0 {\\n            mp[tmp] += 1\\n            ans += 1\\n        }\\n    }\\n    return ans\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3958967,
                "title": "easy-solution-swift",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n         guard nums.count != 2 else { return 1 }\\n    \\n        var result = Set<Double>()\\n        var copyNums = nums.sorted().map { Double($0) }\\n    \\n        while !copyNums.isEmpty {\\n            let ave = (copyNums.removeFirst() + copyNums.removeLast()) / 2\\n            result.insert(ave)\\n        }\\n    \\n        return result.count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func distinctAverages(_ nums: [Int]) -> Int {\\n         guard nums.count != 2 else { return 1 }\\n    \\n        var result = Set<Double>()\\n        var copyNums = nums.sorted().map { Double($0) }\\n    \\n        while !copyNums.isEmpty {\\n            let ave = (copyNums.removeFirst() + copyNums.removeLast()) / 2\\n            result.insert(ave)\\n        }\\n    \\n        return result.count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949924,
                "title": "python-easy-to-understand-2-lines-only",
                "content": "# Approach\\nWe can fill-up set right inside and return its length.\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        return len({(nums[i]+nums[-i-1])/2 for i in range(len(nums))})\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        return len({(nums[i]+nums[-i-1])/2 for i in range(len(nums))})\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939829,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());int n=nums.size();\\n        int i=0;\\n        int e=n-1;\\n        set<double>s;\\n        while(i<e)\\n        {\\n            double avg=(nums[i]+nums[e])/2.0;\\n            s.insert(avg);\\n            i++;\\n            e--;\\n        }\\n        return s.size();\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());int n=nums.size();\\n        int i=0;\\n        int e=n-1;\\n        set<double>s;\\n        while(i<e)\\n        {\\n            double avg=(nums[i]+nums[e])/2.0;\\n            s.insert(avg);\\n            i++;\\n            e--;\\n        }\\n        return s.size();\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3926708,
                "title": "scala-beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport scala.collection.mutable.Map\\nobject Solution {\\n    def distinctAverages(nums: Array[Int]): Int = {\\n              var arr =nums.toBuffer.sorted\\n      var data_store: Map[Int,Int] =   Map.empty[Int,Int]\\n    while (arr.length > 0)\\n      {\\n        arr.sorted\\n        var maxno = arr.last\\n        var minno=arr.head\\n        arr.remove(0)\\n        arr.remove(arr.length - 1)\\n        var temp = maxno + minno\\n        var avg_val= temp//2\\n\\n        if (data_store.contains(avg_val))\\n          {\\n            data_store(avg_val)=data_store(avg_val)+1\\n\\n          }\\n        else\\n          {\\n            data_store(avg_val)=1\\n          }\\n      }\\n    return data_store.size\\n    }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nimport scala.collection.mutable.Map\\nobject Solution {\\n    def distinctAverages(nums: Array[Int]): Int = {\\n              var arr =nums.toBuffer.sorted\\n      var data_store: Map[Int,Int] =   Map.empty[Int,Int]\\n    while (arr.length > 0)\\n      {\\n        arr.sorted\\n        var maxno = arr.last\\n        var minno=arr.head\\n        arr.remove(0)\\n        arr.remove(arr.length - 1)\\n        var temp = maxno + minno\\n        var avg_val= temp//2\\n\\n        if (data_store.contains(avg_val))\\n          {\\n            data_store(avg_val)=data_store(avg_val)+1\\n\\n          }\\n        else\\n          {\\n            data_store(avg_val)=1\\n          }\\n      }\\n    return data_store.size\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3926598,
                "title": "java-solution-sort-then-two-pointers",
                "content": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int l = 0;\\n        int r = nums.length - 1;\\n        Set<Double> set = new HashSet<>();\\n        while (l < r) {\\n            set.add((double)(nums[l] + nums[r]) / 2);\\n            l++;\\n            r--;\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        int l = 0;\\n        int r = nums.length - 1;\\n        Set<Double> set = new HashSet<>();\\n        while (l < r) {\\n            set.add((double)(nums[l] + nums[r]) / 2);\\n            l++;\\n            r--;\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921694,
                "title": "two-pointer-approach-beats-100-c",
                "content": "# Intuition\\nThe idea behind this approach is to systematically go through pairs of numbers, calculate their averages, and store the unique averages in the unordered_set. The set takes care of eliminating duplicates automatically. By the end of the loop, you have the count of distinct averages that can be obtained from the array.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\n\\n1. Sort the input array `nums` in ascending order. Sorting helps in identifying pairs of numbers that can contribute to distinct averages.\\n\\n2. Initialize an `unordered_set<double>` named `s`. This set will store the distinct averages we find.\\n\\n3. Initialize two pointers, `l` and `r`, initially pointing to the start and end of the sorted array.\\n\\n4. Use a while loop to iterate while `l` is less than or equal to `r`.\\n\\n5. Calculate the average of the numbers at indices `l` and `r` using the formula: `avg = (nums[l] + nums[r]) / 2.0`. The use of `2.0` ensures that the division is done in floating-point arithmetic, preserving decimal values.\\n\\n6. Insert the calculated `avg` into the `unordered_set` `s`.\\n\\n7. Increment `l` and decrement `r`, effectively moving the pointers towards the center of the array. This step ensures that all possible pairs are considered.\\n\\n8. After the loop, return the size of the `unordered_set` `s`. This will give you the number of distinct averages that can be formed using pairs of numbers from the array.\\n\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- O(n*logn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int n = nums.size();\\n        sort(nums.begin(),nums.end());\\n        unordered_set<double> s;\\n        int l = 0;\\n        int r = n-1;\\n        while(l<=r){\\n            double avg = (nums[l]+nums[r])/2.0;\\n            s.insert(avg);\\n            l++;\\n            r--;\\n        }\\n\\n        return s.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int n = nums.size();\\n        sort(nums.begin(),nums.end());\\n        unordered_set<double> s;\\n        int l = 0;\\n        int r = n-1;\\n        while(l<=r){\\n            double avg = (nums[l]+nums[r])/2.0;\\n            s.insert(avg);\\n            l++;\\n            r--;\\n        }\\n\\n        return s.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3920117,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        \\n        Arrays.sort(nums);\\n        Set<Double> set = new HashSet<>();\\n        ArrayList<Integer> al = new ArrayList<>();\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            al.add(nums[i]);\\n        }\\n        while (!al.isEmpty())\\n        {\\n            int min = al.get(0);\\n            int max= al.get(al.size()-1);\\n            double avg = (min+max)/2d;\\n            set.add(avg);\\n            al.remove(al.get(0));\\n            al.remove(al.get(al.size()-1));\\n        }\\n        return set.size();\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        \\n        Arrays.sort(nums);\\n        Set<Double> set = new HashSet<>();\\n        ArrayList<Integer> al = new ArrayList<>();\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            al.add(nums[i]);\\n        }\\n        while (!al.isEmpty())\\n        {\\n            int min = al.get(0);\\n            int max= al.get(al.size()-1);\\n            double avg = (min+max)/2d;\\n            set.add(avg);\\n            al.remove(al.get(0));\\n            al.remove(al.get(al.size()-1));\\n        }\\n        return set.size();\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3915139,
                "title": "quick-and-easy-java-solution-with-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n\\n        Arrays.sort(nums);\\n        Set<Double> set = new HashSet<>();\\n        int front=0;\\n        int end = nums.length-1;\\n\\n        while (front<end)\\n        {\\n            int min = nums[front];\\n            int max= nums[end];\\n            double avg = (min+max)/2d;\\n            set.add(avg);\\n            front++;\\n            end--;\\n        }\\n        return set.size();\\n\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n\\n        Arrays.sort(nums);\\n        Set<Double> set = new HashSet<>();\\n        int front=0;\\n        int end = nums.length-1;\\n\\n        while (front<end)\\n        {\\n            int min = nums[front];\\n            int max= nums[end];\\n            double avg = (min+max)/2d;\\n            set.add(avg);\\n            front++;\\n            end--;\\n        }\\n        return set.size();\\n\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3915112,
                "title": "easy-and-quick-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        \\n        Arrays.sort(nums);\\n        Set<Double> set = new HashSet<>();\\n        ArrayList<Integer> al = new ArrayList<>();\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            al.add(nums[i]);\\n        }\\n        while (!al.isEmpty())\\n        {\\n            int min = al.get(0);\\n            int max= al.get(al.size()-1);\\n            double avg = (min+max)/2d;\\n            set.add(avg);\\n            al.remove(al.get(0));\\n            al.remove(al.get(al.size()-1));\\n        }\\n        return set.size();\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        \\n        Arrays.sort(nums);\\n        Set<Double> set = new HashSet<>();\\n        ArrayList<Integer> al = new ArrayList<>();\\n\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            al.add(nums[i]);\\n        }\\n        while (!al.isEmpty())\\n        {\\n            int min = al.get(0);\\n            int max= al.get(al.size()-1);\\n            double avg = (min+max)/2d;\\n            set.add(avg);\\n            al.remove(al.get(0));\\n            al.remove(al.get(al.size()-1));\\n        }\\n        return set.size();\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3906515,
                "title": "java-solution-with-priorityqueue",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Queue<Integer> minQueue = new PriorityQueue();\\n        Queue<Integer> maxQueue = new PriorityQueue(Collections.reverseOrder());\\n\\n        Set<Float> s = new HashSet();\\n        for (int i = 0; i < nums.length; i++) {\\n            minQueue.add(nums[i]);\\n            maxQueue.add(nums[i]);\\n        }\\n\\n        while (true) {\\n            if (minQueue.size() == 0) break;\\n\\n            int num1 = minQueue.remove();\\n            int num2 = maxQueue.remove();\\n\\n            s.add((float)(num1 + num2) / 2);\\n        }\\n        return s.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Queue<Integer> minQueue = new PriorityQueue();\\n        Queue<Integer> maxQueue = new PriorityQueue(Collections.reverseOrder());\\n\\n        Set<Float> s = new HashSet();\\n        for (int i = 0; i < nums.length; i++) {\\n            minQueue.add(nums[i]);\\n            maxQueue.add(nums[i]);\\n        }\\n\\n        while (true) {\\n            if (minQueue.size() == 0) break;\\n\\n            int num1 = minQueue.remove();\\n            int num2 = maxQueue.remove();\\n\\n            s.add((float)(num1 + num2) / 2);\\n        }\\n        return s.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3893362,
                "title": "the-easiest-code-that-beat-100",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<double> ans;\\n        int b = 0; \\n        int e = nums.size() - 1;\\n        \\n        while (b <= e) { // Change while condition to handle the case when b == e\\n            double avg = (nums[b] + nums[e]) / 2.0; // Use double for accurate average\\n            ans.insert(avg);\\n            b++;\\n            e--;\\n        }\\n        \\n        return ans.size();\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n        unordered_set<double> ans;\\n        int b = 0; \\n        int e = nums.size() - 1;\\n        \\n        while (b <= e) { // Change while condition to handle the case when b == e\\n            double avg = (nums[b] + nums[e]) / 2.0; // Use double for accurate average\\n            ans.insert(avg);\\n            b++;\\n            e--;\\n        }\\n        \\n        return ans.size();\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3879146,
                "title": "java-100-speed-93-memory-no-hashset",
                "content": "# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n\\n        // we need only store sum of 2 number\\n        // we DO NOT NEED average itself\\n        // max number in 100, so we can use 201 (2 * 100 as corner case) sized array\\n        // to check unique sum\\n        boolean[] count = new boolean[201];\\n        int result = 0;\\n        int left = 0;\\n        int right = nums.length - 1;\\n\\n        while (left < right) {\\n            int sum = nums[left++] + nums[right--];\\n            if (count[sum] == false) {\\n                count[sum] = true;\\n                result++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n\\n        // we need only store sum of 2 number\\n        // we DO NOT NEED average itself\\n        // max number in 100, so we can use 201 (2 * 100 as corner case) sized array\\n        // to check unique sum\\n        boolean[] count = new boolean[201];\\n        int result = 0;\\n        int left = 0;\\n        int right = nums.length - 1;\\n\\n        while (left < right) {\\n            int sum = nums[left++] + nums[right--];\\n            if (count[sum] == false) {\\n                count[sum] = true;\\n                result++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3872016,
                "title": "c-without-deletion-from-array-runtime-beats-94-memory-83",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        Array.Sort(nums);\\n\\n            var res = new List<double>();\\n\\n            for (int i = 0, j = nums.Length - 1; i < nums.Length / 2; i++, j--)\\n            {\\n                var min = nums[i];\\n                var max = nums[j];\\n\\n                var average = (double)(max + min) / 2;\\n\\n                if (!res.Contains(average))\\n                {\\n                    res.Add(average);\\n                }\\n            }\\n\\n            return res.Count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        Array.Sort(nums);\\n\\n            var res = new List<double>();\\n\\n            for (int i = 0, j = nums.Length - 1; i < nums.Length / 2; i++, j--)\\n            {\\n                var min = nums[i];\\n                var max = nums[j];\\n\\n                var average = (double)(max + min) / 2;\\n\\n                if (!res.Contains(average))\\n                {\\n                    res.Add(average);\\n                }\\n            }\\n\\n            return res.Count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865128,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avgs = []\\n        while nums:\\n            s = min(nums)\\n            b = max(nums)\\n            avg = (s + b) / 2\\n            nums.pop(nums.index(s))\\n            nums.pop(nums.index(b))\\n            avgs.append(avg)\\n        \\n        return len(set(avgs))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        avgs = []\\n        while nums:\\n            s = min(nums)\\n            b = max(nums)\\n            avg = (s + b) / 2\\n            nums.pop(nums.index(s))\\n            nums.pop(nums.index(b))\\n            avgs.append(avg)\\n        \\n        return len(set(avgs))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3861192,
                "title": "number-of-distinct-averages",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        ArrayList<Double> arr = new ArrayList<Double>();\\n        Arrays.sort(nums);\\n        int i=0;\\n        int j =nums.length-1;\\n        while(i<j)\\n        {\\n            if(arr.contains(((double)nums[i]+nums[j])/2)==false)\\n            arr.add(((double)nums[i]+nums[j])/2);\\n            i++;\\n            j--;\\n        }\\n        return arr.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        ArrayList<Double> arr = new ArrayList<Double>();\\n        Arrays.sort(nums);\\n        int i=0;\\n        int j =nums.length-1;\\n        while(i<j)\\n        {\\n            if(arr.contains(((double)nums[i]+nums[j])/2)==false)\\n            arr.add(((double)nums[i]+nums[j])/2);\\n            i++;\\n            j--;\\n        }\\n        return arr.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856925,
                "title": "easy-to-understand-solution-without-sorting",
                "content": "# Intuition\\nAfter completing my solution, I realized that all Kotlin solutions are based on sorting. I understand that it\\'s not the most efficient approach, but it\\'s completely clear to beginners.\\n\\n# Approach\\n- Create a helper function that calculates the average between the minimum and maximum items and removes them from the list.\\n- Create a set to store the calculated averages.\\n- Start calculating averages while the list is not empty.\\n- Return the size of the set.\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    fun distinctAverages(nums: IntArray): Int {\\n        val set = mutableSetOf<Float>()\\n        val list = nums.toMutableList()\\n        while (list.isNotEmpty()) set.add(getMinMaxAverage(list))\\n        return set.size\\n    }\\n\\n    private fun getMinMaxAverage(nums: MutableList<Int>): Float {\\n        var min = 0\\n        var max = 0\\n        var i = 1\\n        while (i < nums.size) {\\n            if (nums[i] < nums[min]) min = i\\n            if (nums[i] >= nums[max]) max = i\\n            i++\\n        }\\n        val average = (nums[min] + nums[max]).toFloat() / 2\\n        nums.removeAt(min)\\n        nums.removeAt(if (min > max) max else max - 1)\\n        return average\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun distinctAverages(nums: IntArray): Int {\\n        val set = mutableSetOf<Float>()\\n        val list = nums.toMutableList()\\n        while (list.isNotEmpty()) set.add(getMinMaxAverage(list))\\n        return set.size\\n    }\\n\\n    private fun getMinMaxAverage(nums: MutableList<Int>): Float {\\n        var min = 0\\n        var max = 0\\n        var i = 1\\n        while (i < nums.size) {\\n            if (nums[i] < nums[min]) min = i\\n            if (nums[i] >= nums[max]) max = i\\n            i++\\n        }\\n        val average = (nums[min] + nums[max]).toFloat() / 2\\n        nums.removeAt(min)\\n        nums.removeAt(if (min > max) max else max - 1)\\n        return average\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856772,
                "title": "number-of-distinct-averages",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        ArrayList<Double> arr = new ArrayList<Double>();\\n        Arrays.sort(nums);\\n        int i=0;\\n        int j =nums.length-1;\\n        while(i<j)\\n        {\\n            if(arr.contains(((double)nums[i]+nums[j])/2)==false)\\n            arr.add(((double)nums[i]+nums[j])/2);\\n            i++;\\n            j--;\\n        }\\n        return arr.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        ArrayList<Double> arr = new ArrayList<Double>();\\n        Arrays.sort(nums);\\n        int i=0;\\n        int j =nums.length-1;\\n        while(i<j)\\n        {\\n            if(arr.contains(((double)nums[i]+nums[j])/2)==false)\\n            arr.add(((double)nums[i]+nums[j])/2);\\n            i++;\\n            j--;\\n        }\\n        return arr.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3853425,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        unordered_set<int> st;\\n        int n=nums.size();\\n        for(int i=0;i<n/2;i++){\\n            int sm=nums[i]+nums[n-i-1];\\n            st.insert(sm);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        unordered_set<int> st;\\n        int n=nums.size();\\n        for(int i=0;i<n/2;i++){\\n            int sm=nums[i]+nums[n-i-1];\\n            st.insert(sm);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845548,
                "title": "swift-two-liner-o-n-log-n-time-o-n-space",
                "content": "# Code\\n```\\n    class Solution {\\n        func distinctAverages(_ nums: [Int]) -> Int {\\n            var sorted = nums.sorted()\\n            return (0..<(nums.count/2)).reduce(into: Set<Int>()) { $0.insert(sorted[$1] + sorted[sorted.count - $1 - 1]) }.count\\n        }\\n    }\\n  \\n\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n    class Solution {\\n        func distinctAverages(_ nums: [Int]) -> Int {\\n            var sorted = nums.sorted()\\n            return (0..<(nums.count/2)).reduce(into: Set<Int>()) { $0.insert(sorted[$1] + sorted[sorted.count - $1 - 1]) }.count\\n        }\\n    }\\n  \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3843964,
                "title": "iteration-and-hashset-very-easy",
                "content": "# Intuition\\n\\n\\n# Approach\\n1. Initialise an HashSet and sort the array.\\n2. Now use two pointer and get the maximum and minimum each time.\\n3. calculate the average and keep its data type as float\\n4. Then add it to the HashSet.\\n5. In the end return the size of the HashSet.\\n\\n# Complexity\\n- Time complexity:\\n\\n\\n- Space complexity:\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums){\\n        Set<Float> shelf =new TreeSet<>();\\n            Arrays.sort(nums);\\n\\n            for(int i = 0, j = nums.length-1; j > i; i++,j--){\\n                float avg = (float) (nums[i] + nums[j])/2;\\n                shelf.add(avg);\\n            }\\n\\t\\t\\n            \\n        \\n\\t\\treturn shelf.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums){\\n        Set<Float> shelf =new TreeSet<>();\\n            Arrays.sort(nums);\\n\\n            for(int i = 0, j = nums.length-1; j > i; i++,j--){\\n                float avg = (float) (nums[i] + nums[j])/2;\\n                shelf.add(avg);\\n            }\\n\\t\\t\\n            \\n        \\n\\t\\treturn shelf.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840758,
                "title": "python-heap-solution",
                "content": "# Complexity\\n- Time complexity: O(0.5n * logn) -> O(n * logn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfrom heapq import heapify, heappop\\n\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        min_heap, max_heap = nums, [-num for num in nums] \\n        heapify(min_heap) # o(n) time complexity\\n        heapify(max_heap) # o(n) time complexity\\n        n, uniq = len(nums), set()\\n\\n        for _ in range(n // 2):\\n            # o(0.5n * logn)\\n            uniq.add(heappop(min_heap) - heappop(max_heap))\\n\\n        return len(uniq) \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom heapq import heapify, heappop\\n\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        min_heap, max_heap = nums, [-num for num in nums] \\n        heapify(min_heap) # o(n) time complexity\\n        heapify(max_heap) # o(n) time complexity\\n        n, uniq = len(nums), set()\\n\\n        for _ in range(n // 2):\\n            # o(0.5n * logn)\\n            uniq.add(heappop(min_heap) - heappop(max_heap))\\n\\n        return len(uniq) \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840361,
                "title": "2465-number-of-distinct-averages",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        // array of even length \\n        //nums.length!=0\\n        // find min and remove it \\n        //find max and remove it \\n        // calculate the average of min+max/2 \\n\\n        int max  ;\\n        int min  ;\\n        float avg;\\n\\n        ArrayList<Integer> mylist = new ArrayList<>();\\n        HashSet<Float> myset = new HashSet<>();\\n\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            mylist.add(nums[i]);\\n        }\\n\\n        while (!mylist.isEmpty()) {  \\n            max = Integer.MIN_VALUE;\\n            min = Integer.MAX_VALUE;\\n\\n            for (int i = 0; i < mylist.size(); i++) {\\n                int value = mylist.get(i);\\n                if (value > max) {\\n                    max = value;\\n                }\\n                if (value < min) {\\n                    min = value;\\n                }   \\n            }\\n            \\n            avg = (min + max) / 2.0f;\\n            myset.add(avg);\\n\\n            int indexMin = mylist.indexOf(min);\\n            int indexMax = mylist.indexOf(max);\\n\\n            mylist.remove((Integer) min); \\n            mylist.remove((Integer) max); \\n            \\n        }\\n        return myset.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        // array of even length \\n        //nums.length!=0\\n        // find min and remove it \\n        //find max and remove it \\n        // calculate the average of min+max/2 \\n\\n        int max  ;\\n        int min  ;\\n        float avg;\\n\\n        ArrayList<Integer> mylist = new ArrayList<>();\\n        HashSet<Float> myset = new HashSet<>();\\n\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            mylist.add(nums[i]);\\n        }\\n\\n        while (!mylist.isEmpty()) {  \\n            max = Integer.MIN_VALUE;\\n            min = Integer.MAX_VALUE;\\n\\n            for (int i = 0; i < mylist.size(); i++) {\\n                int value = mylist.get(i);\\n                if (value > max) {\\n                    max = value;\\n                }\\n                if (value < min) {\\n                    min = value;\\n                }   \\n            }\\n            \\n            avg = (min + max) / 2.0f;\\n            myset.add(avg);\\n\\n            int indexMin = mylist.indexOf(min);\\n            int indexMax = mylist.indexOf(max);\\n\\n            mylist.remove((Integer) min); \\n            mylist.remove((Integer) max); \\n            \\n        }\\n        return myset.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840277,
                "title": "sets-and-sorts",
                "content": "# Intuition\\nWe can just sort the list and consequently take elements from both ends. \\n\\n# Approach\\nI used the fact sets are a very efficient data structure in python, created a set and added new elements there. That\\'s how you beat 99.8% in performance and 93% in memory \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n\\n        nums.sort()\\n        result = {\\'G\\'}\\n\\n        for i in range(len(nums)//2):\\n            result.add((nums[i] + nums[-i-1])/2)\\n        \\n        return len(result) - 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n\\n        nums.sort()\\n        result = {\\'G\\'}\\n\\n        for i in range(len(nums)//2):\\n            result.add((nums[i] + nums[-i-1])/2)\\n        \\n        return len(result) - 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839749,
                "title": "easy-java-solution-100-pass",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        List<Double>l1=new ArrayList<>();\\n        int start=0;\\n        int end=nums.length-1;\\n       while(start<=end)\\n       {\\n           if(!l1.contains(((double)(nums[start]+nums[end]))/2.0))\\n           {\\n               l1.add(((double)(nums[start]+nums[end]))/2.0);\\n           }\\n           start++;\\n           end--;\\n\\n       }\\n        return l1.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        Arrays.sort(nums);\\n        List<Double>l1=new ArrayList<>();\\n        int start=0;\\n        int end=nums.length-1;\\n       while(start<=end)\\n       {\\n           if(!l1.contains(((double)(nums[start]+nums[end]))/2.0))\\n           {\\n               l1.add(((double)(nums[start]+nums[end]))/2.0);\\n           }\\n           start++;\\n           end--;\\n\\n       }\\n        return l1.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3837766,
                "title": "just-sort-and-use-two-pointers-little-trick-to-save-cpu-and-memory",
                "content": "## Find distinct averages\\n```python\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        avg = set()\\n        for i in range(len(nums) // 2 + 1):\\n            avg.add((nums[i] + nums[(i + 1) * -1]) / 2)\\n        return len(avg)\\n```\\n\\n## Little trick to save CPU and memory\\n```python\\n...\\n# Count distinct sums of min and max no need to calculate average\\nsums = set()\\nsums.add(nums[i] + nums[(i + 1) * -1])\\n...\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        avg = set()\\n        for i in range(len(nums) // 2 + 1):\\n            avg.add((nums[i] + nums[(i + 1) * -1]) / 2)\\n        return len(avg)\\n```\n```python\\n...\\n# Count distinct sums of min and max no need to calculate average\\nsums = set()\\nsums.add(nums[i] + nums[(i + 1) * -1])\\n...\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836228,
                "title": "beats-73-runtime-python-solution-easy",
                "content": "# Intuition\\ncalculate avg and count the unique averages\\n\\n# Approach\\nsorted the arrays to get the position of min and max elements by accessing the index.\\napplied \\'for\\' lopp and \\'avg\\' formula and later on appended it in empty array \\'res[]\\'\\nreturned the set() of res[] to get unique average sum\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        res = []\\n        for i in range(len(nums)):\\n            avg = ( nums[i] + nums[len(nums)-1-i] ) / 2\\n            res.append(avg)\\n        return len(set(res))\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        res = []\\n        for i in range(len(nums)):\\n            avg = ( nums[i] + nums[len(nums)-1-i] ) / 2\\n            res.append(avg)\\n        return len(set(res))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3836060,
                "title": "sorting-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double> s;\\n        sort(nums.begin(), nums.end());\\n        while(nums.size() > 1) {\\n            double avg = (nums[0] + nums[nums.size()-1]) / 2.0;\\n            s.insert(avg);\\n            nums.erase(nums.begin());\\n            nums.erase(prev(nums.end()));\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<double> s;\\n        sort(nums.begin(), nums.end());\\n        while(nums.size() > 1) {\\n            double avg = (nums[0] + nums[nums.size()-1]) / 2.0;\\n            s.insert(avg);\\n            nums.erase(nums.begin());\\n            nums.erase(prev(nums.end()));\\n        }\\n        return s.size();\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3833750,
                "title": "js-two-pointers-hash-set",
                "content": "\\n\\n# Code\\n```\\nvar distinctAverages = function (nums) {\\n    const set = new Set()\\n    nums.sort((left, right) => left - right)\\n\\n    for (let i = 0, j = nums.length - 1; i < j; i++, j--) {\\n        set.add(\\n            (nums[i] + nums[j]) / 2\\n        )\\n    }\\n\\n    return set.size\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar distinctAverages = function (nums) {\\n    const set = new Set()\\n    nums.sort((left, right) => left - right)\\n\\n    for (let i = 0, j = nums.length - 1; i < j; i++, j--) {\\n        set.add(\\n            (nums[i] + nums[j]) / 2\\n        )\\n    }\\n\\n    return set.size\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3827284,
                "title": "c-sol",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        int l=size(nums);\\n        set <float> s;\\n        int i=0,j=l-1;\\n        while(i<j){\\n            s.insert((float)(nums[i++]+nums[j--])/2);\\n        }\\n        return size(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        int l=size(nums);\\n        set <float> s;\\n        int i=0,j=l-1;\\n        while(i<j){\\n            s.insert((float)(nums[i++]+nums[j--])/2);\\n        }\\n        return size(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3827186,
                "title": "python3-using-set-and-2-pointers",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        f,r,s=0,len(nums)-1,set()\\n        while f<r:\\n            s.add((nums[f]+nums[r])/2)\\n            f,r=f+1,r-1\\n        return len(s)\\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        f,r,s=0,len(nums)-1,set()\\n        while f<r:\\n            s.add((nums[f]+nums[r])/2)\\n            f,r=f+1,r-1\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3806435,
                "title": "easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(n/2+ nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)Approx or can be number of posssible pairs.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int n=nums.size();\\n\\n        set<double>st;\\n        int i=0 ,j=n-1;\\n        sort(nums.begin(),nums.end());\\n        while(i<j){\\n            double a=(nums[i]+nums[j])/2.0;\\n            st.insert(a);\\n            i++;\\n            j--;\\n        }\\n        return st.size();\\n    }\\n};\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/6be10ca5-7389-45cb-9da9-b8d7dea1f5c6_1690128591.8892684.png)\\n\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int n=nums.size();\\n\\n        set<double>st;\\n        int i=0 ,j=n-1;\\n        sort(nums.begin(),nums.end());\\n        while(i<j){\\n            double a=(nums[i]+nums[j])/2.0;\\n            st.insert(a);\\n            i++;\\n            j--;\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3804727,
                "title": "simple-java-solution-using-recursion",
                "content": "# Simple JAVA Solution using Recursion!!!\\n# Code\\n```\\nclass Solution {\\n\\n    Set<Double> ans;\\n    public int distinctAverages(int[] nums) {\\n        \\n        ans = new HashSet<>();\\n        Arrays.sort(nums);\\n        helper(nums);\\n\\n        return ans.size();\\n    }\\n    public void helper(int[] n)\\n    {\\n        if(n.length<=0) return;\\n        // System.out.println(Arrays.toString(n));\\n        int a = n[0],l=n.length;\\n        double b=n[l-1];\\n\\n        double d = (a+b)/2;\\n        ans.add(d);\\n        int[] t = Arrays.copyOfRange(n,1,l-1);\\n\\n        if(t.length>0) helper(t);\\n\\n        return;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "Recursion",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n\\n    Set<Double> ans;\\n    public int distinctAverages(int[] nums) {\\n        \\n        ans = new HashSet<>();\\n        Arrays.sort(nums);\\n        helper(nums);\\n\\n        return ans.size();\\n    }\\n    public void helper(int[] n)\\n    {\\n        if(n.length<=0) return;\\n        // System.out.println(Arrays.toString(n));\\n        int a = n[0],l=n.length;\\n        double b=n[l-1];\\n\\n        double d = (a+b)/2;\\n        ans.add(d);\\n        int[] t = Arrays.copyOfRange(n,1,l-1);\\n\\n        if(t.length>0) helper(t);\\n\\n        return;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3804229,
                "title": "easy-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        List<Integer> l=new ArrayList<>();\\n         List<Double> avg=new ArrayList<>();\\n       for(int x:nums)l.add(x);\\n       \\n       while(l.size()!=0){\\n            int min=0,max=0;\\n            for(int i=0;i<l.size();i++){\\n                if(l.get(i)<l.get(min))min=i;\\n                if(l.get(i)>l.get(max))max=i;\\n            }\\n            double d=(l.get(min)+l.get(max)+0.0)/2;\\n            if(!avg.contains(d))avg.add(d);\\n\\n            if(min>=max){\\n                l.remove(min);\\n                l.remove(max);\\n            }\\n            else{\\n                l.remove(max);\\n                l.remove(min);\\n            }\\n            \\n       }\\n       return avg.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        List<Integer> l=new ArrayList<>();\\n         List<Double> avg=new ArrayList<>();\\n       for(int x:nums)l.add(x);\\n       \\n       while(l.size()!=0){\\n            int min=0,max=0;\\n            for(int i=0;i<l.size();i++){\\n                if(l.get(i)<l.get(min))min=i;\\n                if(l.get(i)>l.get(max))max=i;\\n            }\\n            double d=(l.get(min)+l.get(max)+0.0)/2;\\n            if(!avg.contains(d))avg.add(d);\\n\\n            if(min>=max){\\n                l.remove(min);\\n                l.remove(max);\\n            }\\n            else{\\n                l.remove(max);\\n                l.remove(min);\\n            }\\n            \\n       }\\n       return avg.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3797661,
                "title": "c-easy-to-understand-solution-beats-runtime-92-memory-74",
                "content": "![image.png](https://assets.leetcode.com/users/images/394e8b21-a962-4a01-b407-05d904dcbc4a_1689956911.11504.png)\\n\\n# Approach\\nWe iterate through the list and get the minimum and maximum values, then remove them. We calculate the average of these values and check if it is already in the hash set. If not, we add it to the hash set. Finally, we return the size of the hash set.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        List<int> list = new List<int>(nums);\\n        HashSet<double> hashSet = new HashSet<double>();\\n        int size = nums.Length / 2;\\n        for (int i = 0; i < size; i++)\\n        {\\n            int maxValue = list.Max();\\n            int minValue = list.Min();\\n            list.Remove(maxValue);\\n            list.Remove(minValue);\\n            if (!hashSet.Contains((double)((minValue + (double)maxValue) / 2)))\\n            {\\n                hashSet.Add((double)((minValue + (double)maxValue) / 2));\\n            }\\n        }\\n\\n        return hashSet.Count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Array",
                    "Hash Table",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\npublic class Solution {\\n    public int DistinctAverages(int[] nums) {\\n        List<int> list = new List<int>(nums);\\n        HashSet<double> hashSet = new HashSet<double>();\\n        int size = nums.Length / 2;\\n        for (int i = 0; i < size; i++)\\n        {\\n            int maxValue = list.Max();\\n            int minValue = list.Min();\\n            list.Remove(maxValue);\\n            list.Remove(minValue);\\n            if (!hashSet.Contains((double)((minValue + (double)maxValue) / 2)))\\n            {\\n                hashSet.Add((double)((minValue + (double)maxValue) / 2));\\n            }\\n        }\\n\\n        return hashSet.Count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3785860,
                "title": "c-easiest-solution-using-set",
                "content": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>&n){\\n        sort(n.begin(),n.end());\\n        int i=0 , j=n.size()-1;\\n        unordered_set<double>st;\\n        while(i<j){\\n            double avg = (double)(n[i++]+n[j--])/2;\\n            st.insert(avg);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>&n){\\n        sort(n.begin(),n.end());\\n        int i=0 , j=n.size()-1;\\n        unordered_set<double>st;\\n        while(i<j){\\n            double avg = (double)(n[i++]+n[j--])/2;\\n            st.insert(avg);\\n        }\\n        return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3777158,
                "title": "c-go-two-pointers",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(n*logn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# C++\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<int> st;\\n        sort(nums.begin(), nums.end());\\n        int i = 0, j = nums.size() - 1;\\n        while(i < j) {\\n            st.insert(nums[i]+nums[j]);\\n            i++;\\n            j--;\\n        }\\n        return st.size(); \\n    }\\n};\\n```\\n# GoLang\\n```\\nfunc distinctAverages(nums []int) int {\\n    sort.Ints(nums)\\n    set := make(map[int]bool)\\n    var j = len(nums)-1\\n    for i := 0; i < len(nums)/2; i++ {\\n        set[nums[i]+nums[j]] = true;\\n        j--;\\n    }\\n    return len(set)\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Go"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        set<int> st;\\n        sort(nums.begin(), nums.end());\\n        int i = 0, j = nums.size() - 1;\\n        while(i < j) {\\n            st.insert(nums[i]+nums[j]);\\n            i++;\\n            j--;\\n        }\\n        return st.size(); \\n    }\\n};\\n```\n```\\nfunc distinctAverages(nums []int) int {\\n    sort.Ints(nums)\\n    set := make(map[int]bool)\\n    var j = len(nums)-1\\n    for i := 0; i < len(nums)/2; i++ {\\n        set[nums[i]+nums[j]] = true;\\n        j--;\\n    }\\n    return len(set)\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776429,
                "title": "simple-solution-in-dart",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution { \\n  int distinctAverages(List<int> nums) {\\n       Set<double>listOfAverages = {};\\n     nums.sort(); \\nwhile (nums.isNotEmpty){  \\n    listOfAverages.add((nums[0] + nums[nums.length - 1])/ 2);\\n    nums.removeAt(0);\\n    nums.removeAt(nums.length - 1);  \\n}\\nreturn listOfAverages.length;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution { \\n  int distinctAverages(List<int> nums) {\\n       Set<double>listOfAverages = {};\\n     nums.sort(); \\nwhile (nums.isNotEmpty){  \\n    listOfAverages.add((nums[0] + nums[nums.length - 1])/ 2);\\n    nums.removeAt(0);\\n    nums.removeAt(nums.length - 1);  \\n}\\nreturn listOfAverages.length;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776417,
                "title": "easy-solution-in-dart",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n    Set numb = {};\\n    nums.sort();\\n    while (nums.isNotEmpty) {\\n      numb.add(nums.first + nums.last);\\n      nums.removeLast();\\n      nums.removeAt(0);\\n    }\\n    return numb.length;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n    Set numb = {};\\n    nums.sort();\\n    while (nums.isNotEmpty) {\\n      numb.add(nums.first + nums.last);\\n      nums.removeLast();\\n      nums.removeAt(0);\\n    }\\n    return numb.length;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776415,
                "title": "simple-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n    Set<int> getter = {};\\n    nums.sort();\\n    for (int i = 0, j = nums.length - 1; i <= j; i++, j--) {\\n      getter.add((nums[i] + nums[j]));\\n    }\\n    return getter.length;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n    Set<int> getter = {};\\n    nums.sort();\\n    for (int i = 0, j = nums.length - 1; i <= j; i++, j--) {\\n      getter.add((nums[i] + nums[j]));\\n    }\\n    return getter.length;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776374,
                "title": "simple-solution-in-dart",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n      List avgList=[];\\n       nums.sort();\\n      while(nums.isNotEmpty){\\n       double avg=( nums[0]+nums.last)/2;\\n        if(avgList.contains(avg)){\\n          \\n        }else{\\n            avgList.add(avg);\\n        }\\n        nums.removeLast();\\n        nums.removeAt(0);\\n        print(nums);\\n      }\\n      return avgList.length;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n      List avgList=[];\\n       nums.sort();\\n      while(nums.isNotEmpty){\\n       double avg=( nums[0]+nums.last)/2;\\n        if(avgList.contains(avg)){\\n          \\n        }else{\\n            avgList.add(avg);\\n        }\\n        nums.removeLast();\\n        nums.removeAt(0);\\n        print(nums);\\n      }\\n      return avgList.length;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776287,
                "title": "easy-way-to-solve",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        n=len(nums)\\n        i=0\\n        j=n-1\\n        s=set()\\n        nums.sort()\\n        while i<=j:\\n            s.add((nums[i]+nums[j])/2)\\n            i+=1\\n            j-=1\\n        return len(s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        n=len(nums)\\n        i=0\\n        j=n-1\\n        s=set()\\n        nums.sort()\\n        while i<=j:\\n            s.add((nums[i]+nums[j])/2)\\n            i+=1\\n            j-=1\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3776223,
                "title": "golang",
                "content": "# Complexity\\n- Time complexity:\\n- \\nThe time complexity of the distinctAverages function is O(n log n), where n is the length of the input array nums. This is because the function starts by sorting the array using the sort.Ints function, which has a time complexity of O(n log n). Then, it iterates over the sorted array once to calculate the distinct averages, which takes O(n) time.\\n\\n\\n- Space complexity:\\n- \\nThe space complexity of the function is O(n), where n is the length of the input array nums. This is because the function creates a map h to store the distinct averages, and in the worst case, all distinct averages will be stored in the map, resulting in a space usage proportional to the length of the array.\\n# Code\\n```\\nfunc distinctAverages(nums []int) int {\\n  sort.Ints(nums)\\n\\th := make(map[uint8]struct{}, len(nums)>>1)\\n\\tfor i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {\\n\\t\\th[uint8(nums[i]+nums[j])] = struct{}{}\\n\\t}\\n\\treturn len(h)\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc distinctAverages(nums []int) int {\\n  sort.Ints(nums)\\n\\th := make(map[uint8]struct{}, len(nums)>>1)\\n\\tfor i, j := 0, len(nums)-1; i < j; i, j = i+1, j-1 {\\n\\t\\th[uint8(nums[i]+nums[j])] = struct{}{}\\n\\t}\\n\\treturn len(h)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3776189,
                "title": "go-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nSorting and Hash Map\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc distinctAverages(nums []int) int {\\n    \\n    avgMap:=make(map[float32]int)\\n    sort.Ints(nums)\\n    for i:=0;i<len(nums)/2;i++{\\n        avg:=float32((nums[i]+nums[len(nums)-i-1]))/2.0\\n        avgMap[avg]++\\n    }\\n    ret:=len(avgMap)\\n    return ret\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc distinctAverages(nums []int) int {\\n    \\n    avgMap:=make(map[float32]int)\\n    sort.Ints(nums)\\n    for i:=0;i<len(nums)/2;i++{\\n        avg:=float32((nums[i]+nums[len(nums)-i-1]))/2.0\\n        avgMap[avg]++\\n    }\\n    ret:=len(avgMap)\\n    return ret\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3776176,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n\\n        avrgset = set()\\n        while nums:\\n           maximum = max(nums)\\n           minimum = min(nums)\\n           nums.remove(maximum)\\n           nums.remove(minimum)\\n           avrgset.add((maximum+minimum)/2)\\n        return len(avrgset)\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n\\n        avrgset = set()\\n        while nums:\\n           maximum = max(nums)\\n           minimum = min(nums)\\n           nums.remove(maximum)\\n           nums.remove(minimum)\\n           avrgset.add((maximum+minimum)/2)\\n        return len(avrgset)\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3772011,
                "title": "easiest-approach-using-unordered-set-basic-approach-beats-100-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        unordered_set<float> s1;\\n        int i=0;\\n        int j=nums.size()-1;\\n        while(i<j)\\n        {\\n            double avg=static_cast<double>(nums[i]+nums[j])/2;\\n            i++;\\n            j--;\\n            s1.insert(avg);\\n        }\\n        return s1.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n        unordered_set<float> s1;\\n        int i=0;\\n        int j=nums.size()-1;\\n        while(i<j)\\n        {\\n            double avg=static_cast<double>(nums[i]+nums[j])/2;\\n            i++;\\n            j--;\\n            s1.insert(avg);\\n        }\\n        return s1.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3771061,
                "title": "simple-solution-in-dart",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n    List<double> av = [];\\n    nums.sort();\\n    while (nums.isNotEmpty) {\\n      av.add((nums.first + nums.last) / 2);\\n      nums.remove(nums.first);\\n      nums.remove(nums.last);\\n    }\\n    return av.toSet().length;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int distinctAverages(List<int> nums) {\\n    List<double> av = [];\\n    nums.sort();\\n    while (nums.isNotEmpty) {\\n      av.add((nums.first + nums.last) / 2);\\n      nums.remove(nums.first);\\n      nums.remove(nums.last);\\n    }\\n    return av.toSet().length;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3769109,
                "title": "beat-100-of-users-solution-c-set-two-pointer",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int num = nums.size();\\n        sort(nums.begin() , nums.end());\\n        set<double>st;\\n        int l = 0 , r = nums.size() - 1;\\n        double sum = 0;\\n        while(l <= r){\\n            sum = nums[l] + nums[r];\\n            sum /= 2.0;\\n            st.insert(sum); \\n            l++ , r--;\\n        }\\n      return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int num = nums.size();\\n        sort(nums.begin() , nums.end());\\n        set<double>st;\\n        int l = 0 , r = nums.size() - 1;\\n        double sum = 0;\\n        while(l <= r){\\n            sum = nums[l] + nums[r];\\n            sum /= 2.0;\\n            st.insert(sum); \\n            l++ , r--;\\n        }\\n      return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3769108,
                "title": "beat-100-of-users-solution-c-set-two-pointer",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int num = nums.size();\\n        sort(nums.begin() , nums.end());\\n        set<double>st;\\n        int l = 0 , r = nums.size() - 1;\\n        double sum = 0;\\n        while(l <= r){\\n            sum = nums[l] + nums[r];\\n            sum /= 2.0;\\n            st.insert(sum); \\n            l++ , r--;\\n        }\\n      return st.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int distinctAverages(vector<int>& nums) {\\n        int num = nums.size();\\n        sort(nums.begin() , nums.end());\\n        set<double>st;\\n        int l = 0 , r = nums.size() - 1;\\n        double sum = 0;\\n        while(l <= r){\\n            sum = nums[l] + nums[r];\\n            sum /= 2.0;\\n            st.insert(sum); \\n            l++ , r--;\\n        }\\n      return st.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3768517,
                "title": "simple-kotlin-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    fun distinctAverages(nums: IntArray): Int {\\n        val sorted = nums.sorted()\\n        val set = mutableSetOf<Int>()\\n        var i = 0\\n\\n        while (i < nums.size / 2) { \\n            set.add(sorted[i] + sorted[nums.size-i-1])\\n            i++\\n        }\\n\\n        return set.size\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Hash Table",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    fun distinctAverages(nums: IntArray): Int {\\n        val sorted = nums.sorted()\\n        val set = mutableSetOf<Int>()\\n        var i = 0\\n\\n        while (i < nums.size / 2) { \\n            set.add(sorted[i] + sorted[nums.size-i-1])\\n            i++\\n        }\\n\\n        return set.size\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3765314,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nPlease UPVOTE.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        HashSet<Double> set = new HashSet<>();\\n        Arrays.sort(nums);\\n        int n = nums.length, j = n-1;\\n        for(int i=0;i<n;i++,j--){\\n            double a = nums[i];\\n            double b = nums[j];\\n            double c = (a+b)/2;\\n            set.add(c);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        HashSet<Double> set = new HashSet<>();\\n        Arrays.sort(nums);\\n        int n = nums.length, j = n-1;\\n        for(int i=0;i<n;i++,j--){\\n            double a = nums[i];\\n            double b = nums[j];\\n            double c = (a+b)/2;\\n            set.add(c);\\n        }\\n        return set.size();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3761331,
                "title": "easy-python-solution-beats-99-76",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        return len(set(((nums.pop(0) + nums.pop(-1)) / 2) for i in nums[::2]))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums: List[int]) -> int:\\n        nums.sort()\\n        return len(set(((nums.pop(0) + nums.pop(-1)) / 2) for i in nums[::2]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3759168,
                "title": "java-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        HashSet<Float> hs=new HashSet<>();\\n        Arrays.sort(nums);\\n        if(nums.length==2) return 1;\\n        for(int i=0,j=nums.length-1;i<j;i++,j--){\\n            hs.add((float)(nums[i]+nums[j])/2);\\n        }\\n        return hs.size();        \\n    }\\n}\\n```\\n![image.png](https://assets.leetcode.com/users/images/33552a4b-e455-4a80-bd95-9625d1fe21f6_1689248209.8421605.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int distinctAverages(int[] nums) {\\n        HashSet<Float> hs=new HashSet<>();\\n        Arrays.sort(nums);\\n        if(nums.length==2) return 1;\\n        for(int i=0,j=nums.length-1;i<j;i++,j--){\\n            hs.add((float)(nums[i]+nums[j])/2);\\n        }\\n        return hs.size();        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3756035,
                "title": "solution-using-the-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nfinding the distinct average in easy way of approach.\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums) -> int:\\n        a=[]\\n        ma=0\\n        while nums:\\n            t=(max(nums)+min(nums))/2\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n            a.append(t)\\n        b=set(a)\\n        return len(b)\\n            \\n            \\n\\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums) -> int:\\n        a=[]\\n        ma=0\\n        while nums:\\n            t=(max(nums)+min(nums))/2\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n            a.append(t)\\n        b=set(a)\\n        return len(b)\\n            \\n            \\n\\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3756034,
                "title": "solution-using-the-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nfinding the distinct average in easy way of approach.\\n\\n# Code\\n```\\nclass Solution:\\n    def distinctAverages(self, nums) -> int:\\n        a=[]\\n        ma=0\\n        while nums:\\n            t=(max(nums)+min(nums))/2\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n            a.append(t)\\n        b=set(a)\\n        return len(b)\\n            \\n            \\n\\n            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def distinctAverages(self, nums) -> int:\\n        a=[]\\n        ma=0\\n        while nums:\\n            t=(max(nums)+min(nums))/2\\n            nums.remove(max(nums))\\n            nums.remove(min(nums))\\n            a.append(t)\\n        b=set(a)\\n        return len(b)\\n            \\n            \\n\\n            \\n        \\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1717091,
                "content": [
                    {
                        "username": "janhs",
                        "content": "It seems that many posted solutions don\\'t remove the min and max numbers each time an average is calculated. Removing the min and max number increases the time complexity, since, every time we do that, some elements of the vector need to be shifted. But it is one of the constraints of the problem."
                    },
                    {
                        "username": "Amasterworld",
                        "content": "The most difficult from this problem is to understand what they want \\n\"Return the number of distinct averages calculated using the above process\" - > that mean you have to count how many DISTINCT averages calculated from above process\" as the example 1: count = 3, but two 2,5 hence return 2."
                    },
                    {
                        "username": "anithjoy",
                        "content": "class Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        res = []\\n\\n        while nums :\\n            a = max(nums)\\n            b = min(nums)\\n\\n            nums.remove(a)\\n            nums.remove(b)\\n\\n            avg = (a+b)/2\\n\\n            res.append(avg)\\n\\n        \\n        res.sort()\\n        # print(res)\\n        i = 0\\n        while i < len(res) and len(res) > 1:\\n            \\n            if res[i-1] == res[i]:\\n                res.remove(res[i])\\n                continue \\n\\n            i += 1\\n\\n        \\n        return len(res)\\n\\nHere, \\nnums =[9,5,7,8,7,9,8,2,0,7]\\nfor the above input the output is giving 5 in my Local System. But while running the code in leetCode Python environment, the output is 4 instead of 5 which is giving me an invalid output error.\\n\\nCan somebody help me where i am getting wrong. \\n"
                    },
                    {
                        "username": "timmok2022",
                        "content": "When calculating avg, use 2.0 instead of 2."
                    },
                    {
                        "username": "nikhilgp07",
                        "content": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        //First we need to sort the array using the sorting algorithm\\n        for(int i=0; i<nums.length; i++){\\n            int min = i;\\n            for(int j=i; j<nums.length; j++){\\n                if(nums[min] > nums[j]){\\n                    min = j;\\n                }\\n            }\\n            int temp = nums[min];\\n            nums[min] = nums[i];\\n            nums[i] = temp;\\n        }\\n        double n = (double) nums.length ;\\n        double[] addition = new double[(int)n/2];\\n        int k=0;\\n        for(int j=nums.length-1; j >= nums.length/2.0; j--){\\n                addition[k] = (nums[k] + nums[j])/2.0;\\n                k++;\\n        }\\n          for(int i=0; i<addition.length; i++){\\n            int min = i;\\n            for(int j=i; j<addition.length; j++){\\n                if(addition[min] > addition[j]){\\n                    min = j;\\n                }\\n            }\\n            double temp = addition[min];\\n            addition[min] = addition[i];\\n            addition[i] = temp;\\n        }\\n        int count = 1;\\n        int i = 0;\\n        while(i < addition.length-1){\\n            if(addition[i] == addition[i+1]){\\n                ++i;\\n            }else if(addition[i] != addition[i+1]){\\n                count += 1;\\n                ++i;\\n            }\\n        }\\n\\n       return count; \\n    }\\n}"
                    },
                    {
                        "username": "cheungtriedtocode",
                        "content": "we are having a error ,in leetcode , `/2` become to int type, but in other editor,`/2` is a float  \\n `class Solution(object):\\n    def distinctAverages(self, nums):\\n         res =set()\\n        nums.sort()\\n        while len(nums)!=0:\\n            print(\\'nums=\\',nums)\\n\\n            avg = (nums[-1]+nums[0])/2\\n            res.add(avg)\\n            nums.remove(nums[-1])\\n            nums.remove(nums[0])\\n\\n        print(res)\\n        return  len(res)`"
                    },
                    {
                        "username": "anjith",
                        "content": "How is Leetcode allowing solutions in the discussions section?"
                    },
                    {
                        "username": "kounhimanshu",
                        "content": "This error is throwing in my code \\n\\n=================================================================\\n==31==ERROR: AddressSanitizer: negative-size-param: (size=-4)\\n    #5 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x603000000058 is located 24 bytes inside of 32-byte region [0x603000000040,0x603000000060)\\nallocated by thread T0 here:\\n    #6 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==31==ABORTING"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": " sort(nums.begin(),nums.end());\\n        set<double>st;\\n\\n        int i=0,j=nums.size()-1;\\n        while(i<j)\\n        {\\n           \\n            st.insert((nums[i++]+nums[j--])/2.0);\\n        }\\n       \\n        return st.size();"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": "its becasuse while taking lasst index it should always be {{{ nums.size()-1;}}}"
                    },
                    {
                        "username": "sposhraj",
                        "content": "[@Himanshu Tiwari](/kounhimanshu), can you please paste the error code. Might be able to help"
                    }
                ]
            },
            {
                "id": 1745024,
                "content": [
                    {
                        "username": "janhs",
                        "content": "It seems that many posted solutions don\\'t remove the min and max numbers each time an average is calculated. Removing the min and max number increases the time complexity, since, every time we do that, some elements of the vector need to be shifted. But it is one of the constraints of the problem."
                    },
                    {
                        "username": "Amasterworld",
                        "content": "The most difficult from this problem is to understand what they want \\n\"Return the number of distinct averages calculated using the above process\" - > that mean you have to count how many DISTINCT averages calculated from above process\" as the example 1: count = 3, but two 2,5 hence return 2."
                    },
                    {
                        "username": "anithjoy",
                        "content": "class Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        res = []\\n\\n        while nums :\\n            a = max(nums)\\n            b = min(nums)\\n\\n            nums.remove(a)\\n            nums.remove(b)\\n\\n            avg = (a+b)/2\\n\\n            res.append(avg)\\n\\n        \\n        res.sort()\\n        # print(res)\\n        i = 0\\n        while i < len(res) and len(res) > 1:\\n            \\n            if res[i-1] == res[i]:\\n                res.remove(res[i])\\n                continue \\n\\n            i += 1\\n\\n        \\n        return len(res)\\n\\nHere, \\nnums =[9,5,7,8,7,9,8,2,0,7]\\nfor the above input the output is giving 5 in my Local System. But while running the code in leetCode Python environment, the output is 4 instead of 5 which is giving me an invalid output error.\\n\\nCan somebody help me where i am getting wrong. \\n"
                    },
                    {
                        "username": "timmok2022",
                        "content": "When calculating avg, use 2.0 instead of 2."
                    },
                    {
                        "username": "nikhilgp07",
                        "content": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        //First we need to sort the array using the sorting algorithm\\n        for(int i=0; i<nums.length; i++){\\n            int min = i;\\n            for(int j=i; j<nums.length; j++){\\n                if(nums[min] > nums[j]){\\n                    min = j;\\n                }\\n            }\\n            int temp = nums[min];\\n            nums[min] = nums[i];\\n            nums[i] = temp;\\n        }\\n        double n = (double) nums.length ;\\n        double[] addition = new double[(int)n/2];\\n        int k=0;\\n        for(int j=nums.length-1; j >= nums.length/2.0; j--){\\n                addition[k] = (nums[k] + nums[j])/2.0;\\n                k++;\\n        }\\n          for(int i=0; i<addition.length; i++){\\n            int min = i;\\n            for(int j=i; j<addition.length; j++){\\n                if(addition[min] > addition[j]){\\n                    min = j;\\n                }\\n            }\\n            double temp = addition[min];\\n            addition[min] = addition[i];\\n            addition[i] = temp;\\n        }\\n        int count = 1;\\n        int i = 0;\\n        while(i < addition.length-1){\\n            if(addition[i] == addition[i+1]){\\n                ++i;\\n            }else if(addition[i] != addition[i+1]){\\n                count += 1;\\n                ++i;\\n            }\\n        }\\n\\n       return count; \\n    }\\n}"
                    },
                    {
                        "username": "cheungtriedtocode",
                        "content": "we are having a error ,in leetcode , `/2` become to int type, but in other editor,`/2` is a float  \\n `class Solution(object):\\n    def distinctAverages(self, nums):\\n         res =set()\\n        nums.sort()\\n        while len(nums)!=0:\\n            print(\\'nums=\\',nums)\\n\\n            avg = (nums[-1]+nums[0])/2\\n            res.add(avg)\\n            nums.remove(nums[-1])\\n            nums.remove(nums[0])\\n\\n        print(res)\\n        return  len(res)`"
                    },
                    {
                        "username": "anjith",
                        "content": "How is Leetcode allowing solutions in the discussions section?"
                    },
                    {
                        "username": "kounhimanshu",
                        "content": "This error is throwing in my code \\n\\n=================================================================\\n==31==ERROR: AddressSanitizer: negative-size-param: (size=-4)\\n    #5 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x603000000058 is located 24 bytes inside of 32-byte region [0x603000000040,0x603000000060)\\nallocated by thread T0 here:\\n    #6 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==31==ABORTING"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": " sort(nums.begin(),nums.end());\\n        set<double>st;\\n\\n        int i=0,j=nums.size()-1;\\n        while(i<j)\\n        {\\n           \\n            st.insert((nums[i++]+nums[j--])/2.0);\\n        }\\n       \\n        return st.size();"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": "its becasuse while taking lasst index it should always be {{{ nums.size()-1;}}}"
                    },
                    {
                        "username": "sposhraj",
                        "content": "[@Himanshu Tiwari](/kounhimanshu), can you please paste the error code. Might be able to help"
                    }
                ]
            },
            {
                "id": 1751639,
                "content": [
                    {
                        "username": "janhs",
                        "content": "It seems that many posted solutions don\\'t remove the min and max numbers each time an average is calculated. Removing the min and max number increases the time complexity, since, every time we do that, some elements of the vector need to be shifted. But it is one of the constraints of the problem."
                    },
                    {
                        "username": "Amasterworld",
                        "content": "The most difficult from this problem is to understand what they want \\n\"Return the number of distinct averages calculated using the above process\" - > that mean you have to count how many DISTINCT averages calculated from above process\" as the example 1: count = 3, but two 2,5 hence return 2."
                    },
                    {
                        "username": "anithjoy",
                        "content": "class Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        res = []\\n\\n        while nums :\\n            a = max(nums)\\n            b = min(nums)\\n\\n            nums.remove(a)\\n            nums.remove(b)\\n\\n            avg = (a+b)/2\\n\\n            res.append(avg)\\n\\n        \\n        res.sort()\\n        # print(res)\\n        i = 0\\n        while i < len(res) and len(res) > 1:\\n            \\n            if res[i-1] == res[i]:\\n                res.remove(res[i])\\n                continue \\n\\n            i += 1\\n\\n        \\n        return len(res)\\n\\nHere, \\nnums =[9,5,7,8,7,9,8,2,0,7]\\nfor the above input the output is giving 5 in my Local System. But while running the code in leetCode Python environment, the output is 4 instead of 5 which is giving me an invalid output error.\\n\\nCan somebody help me where i am getting wrong. \\n"
                    },
                    {
                        "username": "timmok2022",
                        "content": "When calculating avg, use 2.0 instead of 2."
                    },
                    {
                        "username": "nikhilgp07",
                        "content": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        //First we need to sort the array using the sorting algorithm\\n        for(int i=0; i<nums.length; i++){\\n            int min = i;\\n            for(int j=i; j<nums.length; j++){\\n                if(nums[min] > nums[j]){\\n                    min = j;\\n                }\\n            }\\n            int temp = nums[min];\\n            nums[min] = nums[i];\\n            nums[i] = temp;\\n        }\\n        double n = (double) nums.length ;\\n        double[] addition = new double[(int)n/2];\\n        int k=0;\\n        for(int j=nums.length-1; j >= nums.length/2.0; j--){\\n                addition[k] = (nums[k] + nums[j])/2.0;\\n                k++;\\n        }\\n          for(int i=0; i<addition.length; i++){\\n            int min = i;\\n            for(int j=i; j<addition.length; j++){\\n                if(addition[min] > addition[j]){\\n                    min = j;\\n                }\\n            }\\n            double temp = addition[min];\\n            addition[min] = addition[i];\\n            addition[i] = temp;\\n        }\\n        int count = 1;\\n        int i = 0;\\n        while(i < addition.length-1){\\n            if(addition[i] == addition[i+1]){\\n                ++i;\\n            }else if(addition[i] != addition[i+1]){\\n                count += 1;\\n                ++i;\\n            }\\n        }\\n\\n       return count; \\n    }\\n}"
                    },
                    {
                        "username": "cheungtriedtocode",
                        "content": "we are having a error ,in leetcode , `/2` become to int type, but in other editor,`/2` is a float  \\n `class Solution(object):\\n    def distinctAverages(self, nums):\\n         res =set()\\n        nums.sort()\\n        while len(nums)!=0:\\n            print(\\'nums=\\',nums)\\n\\n            avg = (nums[-1]+nums[0])/2\\n            res.add(avg)\\n            nums.remove(nums[-1])\\n            nums.remove(nums[0])\\n\\n        print(res)\\n        return  len(res)`"
                    },
                    {
                        "username": "anjith",
                        "content": "How is Leetcode allowing solutions in the discussions section?"
                    },
                    {
                        "username": "kounhimanshu",
                        "content": "This error is throwing in my code \\n\\n=================================================================\\n==31==ERROR: AddressSanitizer: negative-size-param: (size=-4)\\n    #5 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x603000000058 is located 24 bytes inside of 32-byte region [0x603000000040,0x603000000060)\\nallocated by thread T0 here:\\n    #6 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==31==ABORTING"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": " sort(nums.begin(),nums.end());\\n        set<double>st;\\n\\n        int i=0,j=nums.size()-1;\\n        while(i<j)\\n        {\\n           \\n            st.insert((nums[i++]+nums[j--])/2.0);\\n        }\\n       \\n        return st.size();"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": "its becasuse while taking lasst index it should always be {{{ nums.size()-1;}}}"
                    },
                    {
                        "username": "sposhraj",
                        "content": "[@Himanshu Tiwari](/kounhimanshu), can you please paste the error code. Might be able to help"
                    }
                ]
            },
            {
                "id": 1810423,
                "content": [
                    {
                        "username": "janhs",
                        "content": "It seems that many posted solutions don\\'t remove the min and max numbers each time an average is calculated. Removing the min and max number increases the time complexity, since, every time we do that, some elements of the vector need to be shifted. But it is one of the constraints of the problem."
                    },
                    {
                        "username": "Amasterworld",
                        "content": "The most difficult from this problem is to understand what they want \\n\"Return the number of distinct averages calculated using the above process\" - > that mean you have to count how many DISTINCT averages calculated from above process\" as the example 1: count = 3, but two 2,5 hence return 2."
                    },
                    {
                        "username": "anithjoy",
                        "content": "class Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        res = []\\n\\n        while nums :\\n            a = max(nums)\\n            b = min(nums)\\n\\n            nums.remove(a)\\n            nums.remove(b)\\n\\n            avg = (a+b)/2\\n\\n            res.append(avg)\\n\\n        \\n        res.sort()\\n        # print(res)\\n        i = 0\\n        while i < len(res) and len(res) > 1:\\n            \\n            if res[i-1] == res[i]:\\n                res.remove(res[i])\\n                continue \\n\\n            i += 1\\n\\n        \\n        return len(res)\\n\\nHere, \\nnums =[9,5,7,8,7,9,8,2,0,7]\\nfor the above input the output is giving 5 in my Local System. But while running the code in leetCode Python environment, the output is 4 instead of 5 which is giving me an invalid output error.\\n\\nCan somebody help me where i am getting wrong. \\n"
                    },
                    {
                        "username": "timmok2022",
                        "content": "When calculating avg, use 2.0 instead of 2."
                    },
                    {
                        "username": "nikhilgp07",
                        "content": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        //First we need to sort the array using the sorting algorithm\\n        for(int i=0; i<nums.length; i++){\\n            int min = i;\\n            for(int j=i; j<nums.length; j++){\\n                if(nums[min] > nums[j]){\\n                    min = j;\\n                }\\n            }\\n            int temp = nums[min];\\n            nums[min] = nums[i];\\n            nums[i] = temp;\\n        }\\n        double n = (double) nums.length ;\\n        double[] addition = new double[(int)n/2];\\n        int k=0;\\n        for(int j=nums.length-1; j >= nums.length/2.0; j--){\\n                addition[k] = (nums[k] + nums[j])/2.0;\\n                k++;\\n        }\\n          for(int i=0; i<addition.length; i++){\\n            int min = i;\\n            for(int j=i; j<addition.length; j++){\\n                if(addition[min] > addition[j]){\\n                    min = j;\\n                }\\n            }\\n            double temp = addition[min];\\n            addition[min] = addition[i];\\n            addition[i] = temp;\\n        }\\n        int count = 1;\\n        int i = 0;\\n        while(i < addition.length-1){\\n            if(addition[i] == addition[i+1]){\\n                ++i;\\n            }else if(addition[i] != addition[i+1]){\\n                count += 1;\\n                ++i;\\n            }\\n        }\\n\\n       return count; \\n    }\\n}"
                    },
                    {
                        "username": "cheungtriedtocode",
                        "content": "we are having a error ,in leetcode , `/2` become to int type, but in other editor,`/2` is a float  \\n `class Solution(object):\\n    def distinctAverages(self, nums):\\n         res =set()\\n        nums.sort()\\n        while len(nums)!=0:\\n            print(\\'nums=\\',nums)\\n\\n            avg = (nums[-1]+nums[0])/2\\n            res.add(avg)\\n            nums.remove(nums[-1])\\n            nums.remove(nums[0])\\n\\n        print(res)\\n        return  len(res)`"
                    },
                    {
                        "username": "anjith",
                        "content": "How is Leetcode allowing solutions in the discussions section?"
                    },
                    {
                        "username": "kounhimanshu",
                        "content": "This error is throwing in my code \\n\\n=================================================================\\n==31==ERROR: AddressSanitizer: negative-size-param: (size=-4)\\n    #5 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x603000000058 is located 24 bytes inside of 32-byte region [0x603000000040,0x603000000060)\\nallocated by thread T0 here:\\n    #6 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==31==ABORTING"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": " sort(nums.begin(),nums.end());\\n        set<double>st;\\n\\n        int i=0,j=nums.size()-1;\\n        while(i<j)\\n        {\\n           \\n            st.insert((nums[i++]+nums[j--])/2.0);\\n        }\\n       \\n        return st.size();"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": "its becasuse while taking lasst index it should always be {{{ nums.size()-1;}}}"
                    },
                    {
                        "username": "sposhraj",
                        "content": "[@Himanshu Tiwari](/kounhimanshu), can you please paste the error code. Might be able to help"
                    }
                ]
            },
            {
                "id": 1735499,
                "content": [
                    {
                        "username": "janhs",
                        "content": "It seems that many posted solutions don\\'t remove the min and max numbers each time an average is calculated. Removing the min and max number increases the time complexity, since, every time we do that, some elements of the vector need to be shifted. But it is one of the constraints of the problem."
                    },
                    {
                        "username": "Amasterworld",
                        "content": "The most difficult from this problem is to understand what they want \\n\"Return the number of distinct averages calculated using the above process\" - > that mean you have to count how many DISTINCT averages calculated from above process\" as the example 1: count = 3, but two 2,5 hence return 2."
                    },
                    {
                        "username": "anithjoy",
                        "content": "class Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        res = []\\n\\n        while nums :\\n            a = max(nums)\\n            b = min(nums)\\n\\n            nums.remove(a)\\n            nums.remove(b)\\n\\n            avg = (a+b)/2\\n\\n            res.append(avg)\\n\\n        \\n        res.sort()\\n        # print(res)\\n        i = 0\\n        while i < len(res) and len(res) > 1:\\n            \\n            if res[i-1] == res[i]:\\n                res.remove(res[i])\\n                continue \\n\\n            i += 1\\n\\n        \\n        return len(res)\\n\\nHere, \\nnums =[9,5,7,8,7,9,8,2,0,7]\\nfor the above input the output is giving 5 in my Local System. But while running the code in leetCode Python environment, the output is 4 instead of 5 which is giving me an invalid output error.\\n\\nCan somebody help me where i am getting wrong. \\n"
                    },
                    {
                        "username": "timmok2022",
                        "content": "When calculating avg, use 2.0 instead of 2."
                    },
                    {
                        "username": "nikhilgp07",
                        "content": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        //First we need to sort the array using the sorting algorithm\\n        for(int i=0; i<nums.length; i++){\\n            int min = i;\\n            for(int j=i; j<nums.length; j++){\\n                if(nums[min] > nums[j]){\\n                    min = j;\\n                }\\n            }\\n            int temp = nums[min];\\n            nums[min] = nums[i];\\n            nums[i] = temp;\\n        }\\n        double n = (double) nums.length ;\\n        double[] addition = new double[(int)n/2];\\n        int k=0;\\n        for(int j=nums.length-1; j >= nums.length/2.0; j--){\\n                addition[k] = (nums[k] + nums[j])/2.0;\\n                k++;\\n        }\\n          for(int i=0; i<addition.length; i++){\\n            int min = i;\\n            for(int j=i; j<addition.length; j++){\\n                if(addition[min] > addition[j]){\\n                    min = j;\\n                }\\n            }\\n            double temp = addition[min];\\n            addition[min] = addition[i];\\n            addition[i] = temp;\\n        }\\n        int count = 1;\\n        int i = 0;\\n        while(i < addition.length-1){\\n            if(addition[i] == addition[i+1]){\\n                ++i;\\n            }else if(addition[i] != addition[i+1]){\\n                count += 1;\\n                ++i;\\n            }\\n        }\\n\\n       return count; \\n    }\\n}"
                    },
                    {
                        "username": "cheungtriedtocode",
                        "content": "we are having a error ,in leetcode , `/2` become to int type, but in other editor,`/2` is a float  \\n `class Solution(object):\\n    def distinctAverages(self, nums):\\n         res =set()\\n        nums.sort()\\n        while len(nums)!=0:\\n            print(\\'nums=\\',nums)\\n\\n            avg = (nums[-1]+nums[0])/2\\n            res.add(avg)\\n            nums.remove(nums[-1])\\n            nums.remove(nums[0])\\n\\n        print(res)\\n        return  len(res)`"
                    },
                    {
                        "username": "anjith",
                        "content": "How is Leetcode allowing solutions in the discussions section?"
                    },
                    {
                        "username": "kounhimanshu",
                        "content": "This error is throwing in my code \\n\\n=================================================================\\n==31==ERROR: AddressSanitizer: negative-size-param: (size=-4)\\n    #5 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x603000000058 is located 24 bytes inside of 32-byte region [0x603000000040,0x603000000060)\\nallocated by thread T0 here:\\n    #6 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==31==ABORTING"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": " sort(nums.begin(),nums.end());\\n        set<double>st;\\n\\n        int i=0,j=nums.size()-1;\\n        while(i<j)\\n        {\\n           \\n            st.insert((nums[i++]+nums[j--])/2.0);\\n        }\\n       \\n        return st.size();"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": "its becasuse while taking lasst index it should always be {{{ nums.size()-1;}}}"
                    },
                    {
                        "username": "sposhraj",
                        "content": "[@Himanshu Tiwari](/kounhimanshu), can you please paste the error code. Might be able to help"
                    }
                ]
            },
            {
                "id": 1686440,
                "content": [
                    {
                        "username": "janhs",
                        "content": "It seems that many posted solutions don\\'t remove the min and max numbers each time an average is calculated. Removing the min and max number increases the time complexity, since, every time we do that, some elements of the vector need to be shifted. But it is one of the constraints of the problem."
                    },
                    {
                        "username": "Amasterworld",
                        "content": "The most difficult from this problem is to understand what they want \\n\"Return the number of distinct averages calculated using the above process\" - > that mean you have to count how many DISTINCT averages calculated from above process\" as the example 1: count = 3, but two 2,5 hence return 2."
                    },
                    {
                        "username": "anithjoy",
                        "content": "class Solution(object):\\n    def distinctAverages(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        res = []\\n\\n        while nums :\\n            a = max(nums)\\n            b = min(nums)\\n\\n            nums.remove(a)\\n            nums.remove(b)\\n\\n            avg = (a+b)/2\\n\\n            res.append(avg)\\n\\n        \\n        res.sort()\\n        # print(res)\\n        i = 0\\n        while i < len(res) and len(res) > 1:\\n            \\n            if res[i-1] == res[i]:\\n                res.remove(res[i])\\n                continue \\n\\n            i += 1\\n\\n        \\n        return len(res)\\n\\nHere, \\nnums =[9,5,7,8,7,9,8,2,0,7]\\nfor the above input the output is giving 5 in my Local System. But while running the code in leetCode Python environment, the output is 4 instead of 5 which is giving me an invalid output error.\\n\\nCan somebody help me where i am getting wrong. \\n"
                    },
                    {
                        "username": "timmok2022",
                        "content": "When calculating avg, use 2.0 instead of 2."
                    },
                    {
                        "username": "nikhilgp07",
                        "content": "class Solution {\\n    public int distinctAverages(int[] nums) {\\n        //First we need to sort the array using the sorting algorithm\\n        for(int i=0; i<nums.length; i++){\\n            int min = i;\\n            for(int j=i; j<nums.length; j++){\\n                if(nums[min] > nums[j]){\\n                    min = j;\\n                }\\n            }\\n            int temp = nums[min];\\n            nums[min] = nums[i];\\n            nums[i] = temp;\\n        }\\n        double n = (double) nums.length ;\\n        double[] addition = new double[(int)n/2];\\n        int k=0;\\n        for(int j=nums.length-1; j >= nums.length/2.0; j--){\\n                addition[k] = (nums[k] + nums[j])/2.0;\\n                k++;\\n        }\\n          for(int i=0; i<addition.length; i++){\\n            int min = i;\\n            for(int j=i; j<addition.length; j++){\\n                if(addition[min] > addition[j]){\\n                    min = j;\\n                }\\n            }\\n            double temp = addition[min];\\n            addition[min] = addition[i];\\n            addition[i] = temp;\\n        }\\n        int count = 1;\\n        int i = 0;\\n        while(i < addition.length-1){\\n            if(addition[i] == addition[i+1]){\\n                ++i;\\n            }else if(addition[i] != addition[i+1]){\\n                count += 1;\\n                ++i;\\n            }\\n        }\\n\\n       return count; \\n    }\\n}"
                    },
                    {
                        "username": "cheungtriedtocode",
                        "content": "we are having a error ,in leetcode , `/2` become to int type, but in other editor,`/2` is a float  \\n `class Solution(object):\\n    def distinctAverages(self, nums):\\n         res =set()\\n        nums.sort()\\n        while len(nums)!=0:\\n            print(\\'nums=\\',nums)\\n\\n            avg = (nums[-1]+nums[0])/2\\n            res.add(avg)\\n            nums.remove(nums[-1])\\n            nums.remove(nums[0])\\n\\n        print(res)\\n        return  len(res)`"
                    },
                    {
                        "username": "anjith",
                        "content": "How is Leetcode allowing solutions in the discussions section?"
                    },
                    {
                        "username": "kounhimanshu",
                        "content": "This error is throwing in my code \\n\\n=================================================================\\n==31==ERROR: AddressSanitizer: negative-size-param: (size=-4)\\n    #5 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n0x603000000058 is located 24 bytes inside of 32-byte region [0x603000000040,0x603000000060)\\nallocated by thread T0 here:\\n    #6 0x7fd60d6ec0b2  (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\\n==31==ABORTING"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": " sort(nums.begin(),nums.end());\\n        set<double>st;\\n\\n        int i=0,j=nums.size()-1;\\n        while(i<j)\\n        {\\n           \\n            st.insert((nums[i++]+nums[j--])/2.0);\\n        }\\n       \\n        return st.size();"
                    },
                    {
                        "username": "Prajwal_zaware",
                        "content": "its becasuse while taking lasst index it should always be {{{ nums.size()-1;}}}"
                    },
                    {
                        "username": "sposhraj",
                        "content": "[@Himanshu Tiwari](/kounhimanshu), can you please paste the error code. Might be able to help"
                    }
                ]
            }
        ]
    }
]