[
    {
        "title": "Find the Array Concatenation Value",
        "question_content": "You are given a 0-indexed integer array nums.\nThe concatenation of two numbers is the number formed by concatenating their numerals.\n\n\tFor example, the concatenation of 15, 49 is 1549.\n\nThe concatenation value of nums is initially equal to 0. Perform this operation until nums becomes empty:\n\n\tIf there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums.\n\tIf one element exists, add its value to the concatenation value of nums, then delete it.\n\nReturn the concatenation value of the nums.\n&nbsp;\nExample 1:\n\nInput: nums = [7,52,2,4]\nOutput: 596\nExplanation: Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to [52,2].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596.\n\nExample 2:\n\nInput: nums = [5,14,13,8,12]\nOutput: 673\nExplanation: Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to [14,13,8].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to [13].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673.\n\n&nbsp;\nConstraints:\n\n\t1 <= nums.length <= 1000\n\t1 <= nums[i] <= 104\n\n&nbsp;\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0;Â \n}\n.spoiler {overflow:hidden;}\n.spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;}\n.spoilerbutton[value=\"Show Message\"] + .spoiler > div {margin-top:-500%;}\n.spoilerbutton[value=\"Hide Message\"] + .spoiler {padding:5px;}",
        "solutions": [
            {
                "id": 3174246,
                "title": "pow-and-log",
                "content": "We use `pow` and `log10` to avoid string conversion.\\n\\n## One-Liner\\nOne-liner for my functional frieds. For those who are yet to embrace this, see the raw loops version below. \\n\\n**C++**\\n```cpp\\nlong long findTheArrayConcVal(vector<int>& n) {\\n    return transform_reduce(begin(n), begin(n) + n.size() / 2, rbegin(n), 0LL, plus{}, [](int l, int r){\\n        return l * pow(10, (int)log10(r) + 1);}) \\n        + accumulate(begin(n) + n.size() / 2, end(n), 0LL);\\n} \\n```\\n\\n## Raw Loops\\n**C++**\\n```cpp\\nlong long findTheArrayConcVal(vector<int>& nums) {\\n    long long res = 0, sz = nums.size();\\n    for (int i = 0, j = sz - 1; i <= j; ++i, --j)\\n        if (i < j)\\n            res += nums[i] * pow(10, (int)log10(nums[j]) + 1) + nums[j];\\n        else\\n            res += nums[i];\\n    return res;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nlong long findTheArrayConcVal(vector<int>& n) {\\n    return transform_reduce(begin(n), begin(n) + n.size() / 2, rbegin(n), 0LL, plus{}, [](int l, int r){\\n        return l * pow(10, (int)log10(r) + 1);}) \\n        + accumulate(begin(n) + n.size() / 2, end(n), 0LL);\\n} \\n```\n```cpp\\nlong long findTheArrayConcVal(vector<int>& nums) {\\n    long long res = 0, sz = nums.size();\\n    for (int i = 0, j = sz - 1; i <= j; ++i, --j)\\n        if (i < j)\\n            res += nums[i] * pow(10, (int)log10(nums[j]) + 1) + nums[j];\\n        else\\n            res += nums[i];\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3174293,
                "title": "python3-c-beats-100",
                "content": "![image.png](https://assets.leetcode.com/users/images/97448e20-1444-421c-ada6-51d7e2994250_1676206707.161385.png)\\n\\n# Please UPVOTE \\uD83D\\uDE0A\\n\\n## Python3\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        ans=0\\n        if len(nums)%2==1:\\n            ans=nums[len(nums)//2]\\n        for i in range(len(nums)//2):\\n            ans+=int(str(nums[i])+str(nums[len(nums)-1-i]))\\n        return ans\\n        \\n```\\n## C++\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long int n=nums.size(),ans=0;\\n        if(n%2){\\n            ans=nums[n/2];\\n        }\\n        for(int i=0;i<n/2;i++){\\n            int y=nums[n-1-i],x=nums[i];\\n            while(y){\\n                x*=10;\\n                y/=10;\\n            }\\n            x+=nums[n-i-1];\\n            ans+=x;\\n        }\\n        return ans;\\n\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        ans=0\\n        if len(nums)%2==1:\\n            ans=nums[len(nums)//2]\\n        for i in range(len(nums)//2):\\n            ans+=int(str(nums[i])+str(nums[len(nums)-1-i]))\\n        return ans\\n        \\n```\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long int n=nums.size(),ans=0;\\n        if(n%2){\\n            ans=nums[n/2];\\n        }\\n        for(int i=0;i<n/2;i++){\\n            int y=nums[n-1-i],x=nums[i];\\n            while(y){\\n                x*=10;\\n                y/=10;\\n            }\\n            x+=nums[n-i-1];\\n            ans+=x;\\n        }\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174144,
                "title": "very-simple-easy-to-understand-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans  = 0;\\n        int n = nums.size();\\n        for(int i = 0; i < n/2; ++i){\\n            string t = to_string(nums[i]) + to_string(nums[n - i - 1]);\\n            ans += stol(t);\\n        }\\n        if(n % 2) ans += nums[n/2];\\n        return ans;\\n    }\\n};\\n```\\n\\nHere is an article of my recent interview experience - A Journey to FAANG Company, I recomand you to go through this to know which all resources I have used & how I cracked interview at Amazon:\\nhttps://leetcode.com/discuss/interview-experience/3171859/Journey-to-a-FAANG-Company-Amazon-or-SDE2-(L5)-or-Bangalore-or-Oct-2022-Accepted",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans  = 0;\\n        int n = nums.size();\\n        for(int i = 0; i < n/2; ++i){\\n            string t = to_string(nums[i]) + to_string(nums[n - i - 1]);\\n            ans += stol(t);\\n        }\\n        if(n % 2) ans += nums[n/2];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174060,
                "title": "c-very-easy-two-pointer-approach",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n/* simple two pointer approach --> T.C : O(N)\\n\\nalgo:\\n\\n1. Take first and last element from array.\\n2. convert them into string and concatenate them.\\n3. add result to answer\\n4. do this until all elements are traversed.\\n*/\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n=nums.size();\\n        long long ans=0;\\n        \\n        if(n==1) return nums[0];\\n        \\n        long long i=0,j=n-1;\\n        while(i<j){\\n            string s=to_string(nums[i]) + to_string(nums[j]);\\n            //cout<<s<<endl;\\n            ans += stoi(s);\\n            i++;\\n            j--;\\n        }\\n        \\n        if(i==j) ans += nums[i];\\n        return ans;\\n        \\n    }\\n};\\n```\\n# Please do upvote if you find this helpful\\u2764\\uFE0F! :)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n/* simple two pointer approach --> T.C : O(N)\\n\\nalgo:\\n\\n1. Take first and last element from array.\\n2. convert them into string and concatenate them.\\n3. add result to answer\\n4. do this until all elements are traversed.\\n*/\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n=nums.size();\\n        long long ans=0;\\n        \\n        if(n==1) return nums[0];\\n        \\n        long long i=0,j=n-1;\\n        while(i<j){\\n            string s=to_string(nums[i]) + to_string(nums[j]);\\n            //cout<<s<<endl;\\n            ans += stoi(s);\\n            i++;\\n            j--;\\n        }\\n        \\n        if(i==j) ans += nums[i];\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3174149,
                "title": "simple-c-to-string-function",
                "content": "```\\nclass Solution {\\npublic:\\n    #define ll long long\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        ll res = 0;\\n        int low = 0;\\n        int high = nums.size()-1;\\n        \\n        while(low < high)\\n        {\\n            string temp = to_string(nums[low]) + to_string(nums[high]);\\n            \\n            // cout << temp;\\n            \\n            res += stoi(temp);\\n            \\n            low++;\\n            high--;\\n        }\\n        \\n        if(low == high)\\n        {\\n           string temp = to_string(nums[low]);\\n            \\n           res += stoi(temp);\\n        }\\n        \\n        return res;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    #define ll long long\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        ll res = 0;\\n        int low = 0;\\n        int high = nums.size()-1;\\n        \\n        while(low < high)\\n        {\\n            string temp = to_string(nums[low]) + to_string(nums[high]);\\n            \\n            // cout << temp;\\n            \\n            res += stoi(temp);\\n            \\n            low++;\\n            high--;\\n        }\\n        \\n        if(low == high)\\n        {\\n           string temp = to_string(nums[low]);\\n            \\n           res += stoi(temp);\\n        }\\n        \\n        return res;\\n        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3174013,
                "title": "simple-java-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long m=0;\\n        if(nums.length==1)\\n        {\\n            return (long)(nums[0]);\\n        }\\n        for(int i=0,j=nums.length-1;i<j;i++,j--)\\n        {\\n            String p=String.valueOf(nums[i])+String.valueOf(nums[j]);\\n            long q=Long.parseLong(p);\\n            m+=q;\\n        }\\n        if(nums.length%2==1)\\n        {\\n            return m+(long)(nums[nums.length/2]);\\n        }\\n        return m;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long m=0;\\n        if(nums.length==1)\\n        {\\n            return (long)(nums[0]);\\n        }\\n        for(int i=0,j=nums.length-1;i<j;i++,j--)\\n        {\\n            String p=String.valueOf(nums[i])+String.valueOf(nums[j]);\\n            long q=Long.parseLong(p);\\n            m+=q;\\n        }\\n        if(nums.length%2==1)\\n        {\\n            return m+(long)(nums[nums.length/2]);\\n        }\\n        return m;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176707,
                "title": "python-100-faster-easy-solution",
                "content": "# Code\\u2705\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concatenation = 0\\n        while len(nums)>0:\\n            if len(nums)>1:\\n                concatenation += int(str(nums[0])+str(nums[-1]))\\n                del nums[-1]\\n            else:\\n                concatenation += nums[0]\\n            del nums[0]\\n        return concatenation\\n```\\n![Screen Shot 2023-02-12 at 9.28.12 PM.png](https://assets.leetcode.com/users/images/e7103720-573a-4f30-8760-09a07d1ef8f2_1676217512.0730717.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concatenation = 0\\n        while len(nums)>0:\\n            if len(nums)>1:\\n                concatenation += int(str(nums[0])+str(nums[-1]))\\n                del nums[-1]\\n            else:\\n                concatenation += nums[0]\\n            del nums[0]\\n        return concatenation\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174999,
                "title": "very-fast-c-with-explanation",
                "content": "# Thought process\\n\\n**First:** We need to concantenate every integer with it\\'s corresponding integer at the same position it is from the other end.\\nFor eg, in **[23, 54, 65, 24, 87]** we need to concantanate *23 & 87* to get **2387** and then *54 & 24* to get **5424**. Since this list contains odd  number of elements there is a middle element **65** which can\\'t pair up with any other element; so keep it as *65* only.\\n\\n**Second:** Now we need to add all the concantanated elements to a common variable. In our case it is **total**. In case of odd number of elements we separately add the middle element (in our case, 65) to total.\\n\\n*Note that we are performing the above to steps simultaneously. So what does it mean? We form a concatenated pair we add it to **total** variable before proceding with the next pair. It would get much clearer in the code*\\n\\nSo you might be wondering how do we concatenate the two integers in a pair? Let\\'s see:\\n\\nIn **[23, 54, 65, 24, 87]** we need to first concatenate 23 and 87, right? To put 23 before 87 ( to get 2387) we need to add 2300 to 87 [that\\'s one way of doing it]; we multiply 23 by 10 as many times required *to reduced 87 to 0 by dividing it with 10*.\\n\\nWe enter a loop with i iterating from 0 to n/2.\\nFor i=0;\\nnums[n/2-1-i]/=10 which is dividing 87 by 10 to give 8[int/int is int not decimal]; we multiply 23 by 10\\nthen again, nums[n/2-1-i]/=10 which is dividing 8 by 10 to give 0[int/int is int not decimal]; we multiply 230 by 10\\n\\nthen we add 2300 and 87 to **total** variable and continue doing the same for other variables\\n\\nDon\\'t Worry if you are still confused, have a look at the code, you will get it :)\\n\\n# Code\\n\\n``` C++ []\\nclass Solution {\\npublic:\\n    long findTheArrayConcVal(vector<int>& nums) {\\n        int n = nums.size(), x{0};\\n        long total{0};\\n\\n        // we iterate through the i=0 to i=n/2\\n        for (int i{0}; i<n/2; i++) {\\n\\n            // we store the (n-i-1)th term in variable x, as we are going to tamper with it\\n            x = nums[n-i-1];\\n            // we see the number of places present before the decimal in the (n-i-1)th term and\\n            // multiply the i th term by 10 so that we get the correct number to add to total variable\\n            // we repeat this process till the (n-i-1)th term is 0\\n            while (nums[n-i-1]>0) {\\n                nums[n-i-1]/=10;\\n                nums[i]*=10;\\n            }\\n            total+=x+nums[i];\\n        }\\n\\n        // if there are a odd number of term the middle term is unaccounted for\\n        // as it is not include in the iteration of i from 0 to n/2\\n        if (n%2==1) total+=nums[n/2];\\n        return total;\\n    }\\n};\\n```\\n\\n![kitty.jpeg](https://assets.leetcode.com/users/images/60068b30-3d6b-4b47-bbac-27b017b22779_1676186318.071066.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "``` C++ []\\nclass Solution {\\npublic:\\n    long findTheArrayConcVal(vector<int>& nums) {\\n        int n = nums.size(), x{0};\\n        long total{0};\\n\\n        // we iterate through the i=0 to i=n/2\\n        for (int i{0}; i<n/2; i++) {\\n\\n            // we store the (n-i-1)th term in variable x, as we are going to tamper with it\\n            x = nums[n-i-1];\\n            // we see the number of places present before the decimal in the (n-i-1)th term and\\n            // multiply the i th term by 10 so that we get the correct number to add to total variable\\n            // we repeat this process till the (n-i-1)th term is 0\\n            while (nums[n-i-1]>0) {\\n                nums[n-i-1]/=10;\\n                nums[i]*=10;\\n            }\\n            total+=x+nums[i];\\n        }\\n\\n        // if there are a odd number of term the middle term is unaccounted for\\n        // as it is not include in the iteration of i from 0 to n/2\\n        if (n%2==1) total+=nums[n/2];\\n        return total;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174083,
                "title": "concatenate-string-easy-understanding",
                "content": "Hi,\\n\\nWe have to iterate through the loop and add to result.\\n\\nKindly upvote if its helpful.\\n```\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res=0;\\n        for(int i=0; i<(nums.length/2); i++){\\n        \\tString tmp = nums[i]+\"\"+nums[nums.length-1-i];\\n        \\tres = res + Integer.parseInt(tmp);\\n        }\\n        if(nums.length%2==1){\\n        \\tres = res + nums[(nums.length/2)];\\n        }\\n        return res;\\n    }\\n\\t",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "Hi,\\n\\nWe have to iterate through the loop and add to result.\\n\\nKindly upvote if its helpful.\\n```\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res=0;\\n        for(int i=0; i<(nums.length/2); i++){\\n        \\tString tmp = nums[i]+\"\"+nums[nums.length-1-i];\\n        \\tres = res + Integer.parseInt(tmp);\\n        }\\n        if(nums.length%2==1){\\n        \\tres = res + nums[(nums.length/2)];\\n        }\\n        return res;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 3174262,
                "title": "python-very-simple-and-easy-to-understand-code-in-python",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n) \\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i=0\\n        j=len(nums)-1\\n        res=0\\n        while i<=j:\\n            if i==j:       \\n                res+=int(nums[i])\\n            elif i!=j:\\n                res+=int(str(nums[i])+str(nums[j]))\\n            i+=1\\n            j-=1\\n        return res\\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i=0\\n        j=len(nums)-1\\n        res=0\\n        while i<=j:\\n            if i==j:       \\n                res+=int(nums[i])\\n            elif i!=j:\\n                res+=int(str(nums[i])+str(nums[j]))\\n            i+=1\\n            j-=1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174126,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#include<bits/stdc++.h>\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        \\n        long long int n=nums.size();\\n        long long int i=0,j=n-1;\\n        long long int ans=0;\\n        while(i<j)\\n        {\\n            string s1 = to_string(nums[i]);\\n            string s2 = to_string(nums[j]);\\n            string s = s1 + s2;\\n            long long int c = stoi(s);\\n            ans+=c;\\n            i++;\\n            j--;\\n        }\\n        if(n%2)\\n            ans+=nums[n/2];\\n        return ans;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\n#include<bits/stdc++.h>\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        \\n        long long int n=nums.size();\\n        long long int i=0,j=n-1;\\n        long long int ans=0;\\n        while(i<j)\\n        {\\n            string s1 = to_string(nums[i]);\\n            string s2 = to_string(nums[j]);\\n            string s = s1 + s2;\\n            long long int c = stoi(s);\\n            ans+=c;\\n            i++;\\n            j--;\\n        }\\n        if(n%2)\\n            ans+=nums[n/2];\\n        return ans;  \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3174367,
                "title": "c-easy-approach-4-lines-of-code",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing `to_string` and `stoi`\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n = size(nums), i = 0, j = n-1,ans = 0;\\n         while(i<j)  ans += stoi((to_string(nums[i++])+to_string(nums[j--])));\\n         if(i==j) ans+=(int)(nums[i]);\\n         return ans;      \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n = size(nums), i = 0, j = n-1,ans = 0;\\n         while(i<j)  ans += stoi((to_string(nums[i++])+to_string(nums[j--])));\\n         if(i==j) ans+=(int)(nums[i]);\\n         return ans;      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176912,
                "title": "java-8-lines-simple-and-clean-code-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public long findTheArrayConcVal(int[] nums) {\\n    var n = nums.length;\\n    var ans = 0L;\\n    \\n    for (int i = 0, j = n-1; i < j; i++, j--) {\\n      for (var r = nums[j]; r > 0; r /= 10, nums[i] *= 10);\\n      ans += nums[i] + nums[j];\\n    }\\n    if (n % 2 == 1)\\n      ans += nums[n/2];\\n    \\n    return ans;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public long findTheArrayConcVal(int[] nums) {\\n    var n = nums.length;\\n    var ans = 0L;\\n    \\n    for (int i = 0, j = n-1; i < j; i++, j--) {\\n      for (var r = nums[j]; r > 0; r /= 10, nums[i] *= 10);\\n      ans += nums[i] + nums[j];\\n    }\\n    if (n % 2 == 1)\\n      ans += nums[n/2];\\n    \\n    return ans;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176511,
                "title": "javascript-short-and-sweet",
                "content": "```js\\nconst findTheArrayConcVal = nums => {\\n  let output = 0;\\n  let i = 0;\\n  let j = nums.length - 1;\\n\\n  while (i <= j) {\\n    output += Number(i === j ? nums[i] : `${nums[i]}` + `${nums[j]}`);\\n    i++;\\n    j--;\\n  }\\n  return output;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst findTheArrayConcVal = nums => {\\n  let output = 0;\\n  let i = 0;\\n  let j = nums.length - 1;\\n\\n  while (i <= j) {\\n    output += Number(i === j ? nums[i] : `${nums[i]}` + `${nums[j]}`);\\n    i++;\\n    j--;\\n  }\\n  return output;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3175241,
                "title": "using-lambda-function-to-string-and-stoll",
                "content": "# Complexity\\n- Time complexity:\\n$$O(n/2)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    typedef long long ll;\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        ll n=nums.size();\\n        ll total=0;\\n        for(int i=0;i<n/2;i++){\\n            [&total](int a,int b){total+=stoll(to_string(a)+to_string(b));}(nums[i],nums[n-i-1]);\\n        }\\n        if(n%2!=0){\\n            total+=nums[n/2];\\n        }\\n        return total;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    typedef long long ll;\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        ll n=nums.size();\\n        ll total=0;\\n        for(int i=0;i<n/2;i++){\\n            [&total](int a,int b){total+=stoll(to_string(a)+to_string(b));}(nums[i],nums[n-i-1]);\\n        }\\n        if(n%2!=0){\\n            total+=nums[n/2];\\n        }\\n        return total;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174674,
                "title": "c-java-python-easy-to-understand-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Upvote Please \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE4C\\n# Code\\n```\\npublic class Solution {\\n    public long FindTheArrayConcVal(int[] nums) {\\n        int start=0;\\n        int end=nums.Length-1;\\n        long result=0;\\n        while (start <= end){\\n            if(start == end){\\n                result+=nums[start];\\n                start+=1;\\n            }\\n            else{\\n                int checkEnd=1;\\n                while(checkEnd <= nums[end]){\\n                    checkEnd*=10;\\n                }\\n                result+=(long)nums[start]*checkEnd+nums[end];\\n                start+=1;\\n                end-=1;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public long FindTheArrayConcVal(int[] nums) {\\n        int start=0;\\n        int end=nums.Length-1;\\n        long result=0;\\n        while (start <= end){\\n            if(start == end){\\n                result+=nums[start];\\n                start+=1;\\n            }\\n            else{\\n                int checkEnd=1;\\n                while(checkEnd <= nums[end]){\\n                    checkEnd*=10;\\n                }\\n                result+=(long)nums[start]*checkEnd+nums[end];\\n                start+=1;\\n                end-=1;\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174609,
                "title": "easy-to-understand-c-pow-and-log-two-pointers",
                "content": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long int ans=0,x,b;\\n        int i = 0, j = nums.size()-1;\\n        while(i<j){\\n            x = nums[j], b = 0;\\n            while(x){\\n                b++;\\n                x /= 10;\\n            }\\n            ans = ans + nums[i]*1LL*pow(10,b)+nums[j];\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            ans += nums[i];\\n        }return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long int ans=0,x,b;\\n        int i = 0, j = nums.size()-1;\\n        while(i<j){\\n            x = nums[j], b = 0;\\n            while(x){\\n                b++;\\n                x /= 10;\\n            }\\n            ans = ans + nums[i]*1LL*pow(10,b)+nums[j];\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            ans += nums[i];\\n        }return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978084,
                "title": "java-2-solution-stringbuilder-2-pointer-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:0(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int low = 0 , high = nums.length-1; long ans = 0L;\\n        StringBuilder temp = new StringBuilder();\\n        while(low<=high){\\n            if(low!=high) temp.append(nums[low]).append(nums[high]);\\n            else temp.append(nums[low]);\\n            low++; high--;\\n            ans+=(Integer.parseInt(temp.toString()));\\n            temp.setLength(0);\\n        }\\n        return ans;\\n\\n        //      ANOTHER SOLUTION(try this one)\\n\\n        // long ans = 0L;\\n        // int low = 0 , high = nums.length-1;\\n        // while(low <= high){\\n        //     String str1 = Long.toString(nums[low]) , str2 = Long.toString(nums[high]);\\n        //     str1 = str1 + str2;\\n        //     if(low == high) ans += nums[low]; \\n        //     else ans +=(Long.parseLong(str1));\\n        //     low++; high--;\\n        // }\\n        // return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int low = 0 , high = nums.length-1; long ans = 0L;\\n        StringBuilder temp = new StringBuilder();\\n        while(low<=high){\\n            if(low!=high) temp.append(nums[low]).append(nums[high]);\\n            else temp.append(nums[low]);\\n            low++; high--;\\n            ans+=(Integer.parseInt(temp.toString()));\\n            temp.setLength(0);\\n        }\\n        return ans;\\n\\n        //      ANOTHER SOLUTION(try this one)\\n\\n        // long ans = 0L;\\n        // int low = 0 , high = nums.length-1;\\n        // while(low <= high){\\n        //     String str1 = Long.toString(nums[low]) , str2 = Long.toString(nums[high]);\\n        //     str1 = str1 + str2;\\n        //     if(low == high) ans += nums[low]; \\n        //     else ans +=(Long.parseLong(str1));\\n        //     low++; high--;\\n        // }\\n        // return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3527065,
                "title": "c-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i = 0,j=nums.size()-1,x,y;\\n        long long int ans=0;\\n        while(i<j){\\n            x = nums[j];\\n            y = 0;\\n            while(x){\\n                y++;\\n                x /= 10;\\n            }\\n            ans += (nums[i]*1LL*pow(10,y)+nums[j]);\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            ans += nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i = 0,j=nums.size()-1,x,y;\\n        long long int ans=0;\\n        while(i<j){\\n            x = nums[j];\\n            y = 0;\\n            while(x){\\n                y++;\\n                x /= 10;\\n            }\\n            ans += (nums[i]*1LL*pow(10,y)+nums[j]);\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            ans += nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3308249,
                "title": "easy-to-understand-sol-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1. to_string function to convert the integer to string for concatenation.\\n2. stoi() to convert string back into integer.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Iterating over the first half of the nums vector and concatenating the values at each index(i) with the corresponding value at the opposite end of the vector(n-1-i). This concatenated value is then converted to an integer and added to sum.\\n2. If n is odd, the value of nums[n/2] is added to sum.\\n3. Finally, sum is returned as the result of the function\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long sum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n/2;i++)\\n        {\\n            string res= to_string(nums[i]) + to_string(nums[n-1-i]);\\n            sum+=stoi(res);\\n        }\\n        if(n%2!=0)\\n        {\\n            sum+=nums[n/2];\\n        }\\n    return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long sum=0;\\n        int n=nums.size();\\n        for(int i=0;i<n/2;i++)\\n        {\\n            string res= to_string(nums[i]) + to_string(nums[n-1-i]);\\n            sum+=stoi(res);\\n        }\\n        if(n%2!=0)\\n        {\\n            sum+=nums[n/2];\\n        }\\n    return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3194059,
                "title": "c-easy-to-understand-solution",
                "content": "# Intuition :\\nMoving towards middle from extreme ends.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach :\\nTaking pointer to start and end , traversing towards each other at constant rate. Applying formula at each iteration to get final result.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code :\\nHere is the code:\\n```\\nclass Solution {\\npublic:\\n    int siz(int n){\\n        int s = 0;\\n        while(n>0){\\n            s++;\\n            n /= 10;\\n        }\\n        return s;\\n    }\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        if(nums.size()==1)\\n        return nums[0];\\n        long long ans = 0;\\n        int i=0;\\n        int j = nums.size()-1;\\n        while(i<j){\\n            ans += nums[i]*pow(10 , siz(nums[j])) + nums[j];\\n            i++;\\n            j--;\\n            if(i==j)\\n            ans += nums[j];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int siz(int n){\\n        int s = 0;\\n        while(n>0){\\n            s++;\\n            n /= 10;\\n        }\\n        return s;\\n    }\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        if(nums.size()==1)\\n        return nums[0];\\n        long long ans = 0;\\n        int i=0;\\n        int j = nums.size()-1;\\n        while(i<j){\\n            ans += nums[i]*pow(10 , siz(nums[j])) + nums[j];\\n            i++;\\n            j--;\\n            if(i==j)\\n            ans += nums[j];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3175187,
                "title": "python-3-5-lines-iteration-t-m-52-ms-13-8-mb",
                "content": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n\\n        n=len(nums)\\n\\n        ans=nums[n//2] if n%2 else 0\\n\\n        for i in range(n//2): \\n            ans += int(str(nums[i])+str(nums[-i-1]))\\n        \\n        return ans\\n```\\n[https://leetcode.com/problems/find-the-array-concatenation-value/submissions/896425509/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1).\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n\\n        n=len(nums)\\n\\n        ans=nums[n//2] if n%2 else 0\\n\\n        for i in range(n//2): \\n            ans += int(str(nums[i])+str(nums[-i-1]))\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174460,
                "title": "two-pointer-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int [] nums) {\\n        int P1=0,P2=nums.length-1;\\n        String s=\"\";\\n        long sum=0;\\n        while(P1<=P2){\\n            if(P1==P2)s=String.valueOf(nums[P1]);\\n            else  s=String.valueOf(nums[P1])+String.valueOf(nums[P2]);\\n            sum+=Integer.parseInt(s);\\n            P1++;\\n            P2--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int [] nums) {\\n        int P1=0,P2=nums.length-1;\\n        String s=\"\";\\n        long sum=0;\\n        while(P1<=P2){\\n            if(P1==P2)s=String.valueOf(nums[P1]);\\n            else  s=String.valueOf(nums[P1])+String.valueOf(nums[P2]);\\n            sum+=Integer.parseInt(s);\\n            P1++;\\n            P2--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174180,
                "title": "c-easy-clean-straightforward-code",
                "content": "![image](https://assets.leetcode.com/users/images/2e8bb38f-e672-4328-82b2-ea947f8328fd_1676175561.676634.png)\\n\\n**T->O(n/2) && S->O(1)**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tlong long findTheArrayConcVal(vector<int>& nums) {\\n\\t\\t\\tint n = nums.size();\\n\\t\\t\\tint i = 0,j = n-1;\\n\\t\\t\\tlong long ans = 0;\\n\\n\\t\\t\\twhile(j > i){\\n\\t\\t\\t\\tstring temp = to_string(nums[i]) + to_string(nums[j]);\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t\\tj--;\\n\\t\\t\\t\\tans += stoll(temp);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(n % 2 == 1) ans += nums[i];\\n\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tlong long findTheArrayConcVal(vector<int>& nums) {\\n\\t\\t\\tint n = nums.size();\\n\\t\\t\\tint i = 0,j = n-1;\\n\\t\\t\\tlong long ans = 0;\\n\\n\\t\\t\\twhile(j > i){\\n\\t\\t\\t\\tstring temp = to_string(nums[i]) + to_string(nums[j]);\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t\\tj--;\\n\\t\\t\\t\\tans += stoll(temp);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 4029156,
                "title": "find-array-concatenation-o-n-javascript-memory-95-45-meaningful-vars",
                "content": "Time Complexity: O(N)\\nSpace Complexity: O(1)\\n```\\nvar findTheArrayConcVal = function(nums) {\\n    let store = 0;\\n    if (nums.length % 2 === 0) {\\n        for (let index = 0; index < nums.length / 2; index++) {\\n            store += parseInt(`${nums[index]}${nums[nums.length - index - 1]}`);\\n        }\\n    } else {\\n        for (let index = 0; index < parseInt(nums.length / 2); index++) {\\n            store += parseInt(`${nums[index]}${nums[nums.length - index - 1]}`);\\n        }\\n        store += nums[Math.floor(nums.length / 2)];\\n    }\\n    return store;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findTheArrayConcVal = function(nums) {\\n    let store = 0;\\n    if (nums.length % 2 === 0) {\\n        for (let index = 0; index < nums.length / 2; index++) {\\n            store += parseInt(`${nums[index]}${nums[nums.length - index - 1]}`);\\n        }\\n    } else {\\n        for (let index = 0; index < parseInt(nums.length / 2); index++) {\\n            store += parseInt(`${nums[index]}${nums[nums.length - index - 1]}`);\\n        }\\n        store += nums[Math.floor(nums.length / 2)];\\n    }\\n    return store;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3307773,
                "title": "easy-python-solution-runtime-96-19",
                "content": "![image.png](https://assets.leetcode.com/users/images/86de6f78-6d3d-4051-b644-3fed3fc8f8a3_1679061085.8510282.png)\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        sm=0\\n        i=0\\n        j=len(nums)-1\\n        if len(nums)%2!=0:sm+=nums[(i+j)//2]\\n        while i<j:\\n            sm+=int(str(nums[i])+str(nums[j]))\\n            i+=1\\n            j-=1\\n        return sm\\n\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Array",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        sm=0\\n        i=0\\n        j=len(nums)-1\\n        if len(nums)%2!=0:sm+=nums[(i+j)//2]\\n        while i<j:\\n            sm+=int(str(nums[i])+str(nums[j]))\\n            i+=1\\n            j-=1\\n        return sm\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299773,
                "title": "easy-java-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum = 0;\\n        int i = 0;\\n        int j = nums.length - 1;\\n        while(i <= j)\\n        {\\n            String s = Long.toString(nums[i]);\\n            String st = Long.toString(nums[j]);\\n            s = s + st;\\n            if(i == j)\\n            {\\n                sum += nums[i];\\n            }   \\n            else\\n            {\\n                sum = sum + Long.parseLong(s);\\n                System.out.println(sum);\\n            }\\n            i++;\\n            j--;\\n        }\\n        return sum;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum = 0;\\n        int i = 0;\\n        int j = nums.length - 1;\\n        while(i <= j)\\n        {\\n            String s = Long.toString(nums[i]);\\n            String st = Long.toString(nums[j]);\\n            s = s + st;\\n            if(i == j)\\n            {\\n                sum += nums[i];\\n            }   \\n            else\\n            {\\n                sum = sum + Long.parseLong(s);\\n                System.out.println(sum);\\n            }\\n            i++;\\n            j--;\\n        }\\n        return sum;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3198810,
                "title": "easy-python-solution-using-2-pointers",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        left=0\\n        right=len(nums)-1\\n        total=0\\n        while left<=right:\\n            if left<right:\\n                total+=int(str(nums[left])+str(nums[right]))\\n            else:\\n                total+=nums[left]\\n            left+=1\\n            right-=1\\n        return total\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        left=0\\n        right=len(nums)-1\\n        total=0\\n        while left<=right:\\n            if left<right:\\n                total+=int(str(nums[left])+str(nums[right]))\\n            else:\\n                total+=nums[left]\\n            left+=1\\n            right-=1\\n        return total\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176944,
                "title": "c-beats-100-of-submissions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Just by looking at the word \"concatenation\", I had got the string approach in my mind along with its predefined functions.. stoi(used for the conversion of string to integer) and to_string(converts integer value to string).\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Iterating over the first half of the nums vector and concatenating the values at each index with the corresponding value at the opposite end of the vector (i.e. if the index is i, the concatenated value is the string representation of nums[i] concatenated with the string representation of nums[n-i-1]). This concatenated value is then converted to an integer and added to a running sum.\\n- If n is odd, the value of nums[n/2] is added to sum.\\n- Finally, sum is returned as the result of the function.\\n\\n# Complexity\\nTime complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- The time complexity of this function is O(n), where n is the number of elements in the nums vector. This is because the function performs a single loop over the first half of the vector, and each iteration of the loop takes constant time.\\n\\nSpace complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- The space complexity of this function is O(1), as the function uses a constant amount of memory regardless of the size of the input. The only variables used in the function are an integer n to store the size of the input vector, two long long variables sum and n1 to store intermediate results, and one string variable res to store the concatenated value before converting it to an integer. All of these variables use a constant amount of memory, so the overall space complexity is constant.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    typedef long long ll;\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        ll sum = 0;\\n        ll n1;\\n        ll n2;\\n        for (int i = 0; i < n / 2; i++) \\n        {\\n            n1 = nums[i];\\n            n2 = nums[n - i - 1];\\n            string res = to_string(n1) + to_string(n2);\\n            sum += stoi(res);\\n    }\\n        \\n    if (n % 2)\\n        sum += nums[n / 2];\\n        \\n    return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    typedef long long ll;\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        int n = nums.size();\\n        ll sum = 0;\\n        ll n1;\\n        ll n2;\\n        for (int i = 0; i < n / 2; i++) \\n        {\\n            n1 = nums[i];\\n            n2 = nums[n - i - 1];\\n            string res = to_string(n1) + to_string(n2);\\n            sum += stoi(res);\\n    }\\n        \\n    if (n % 2)\\n        sum += nums[n / 2];\\n        \\n    return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3175513,
                "title": "simple-and-easy-array",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    int concat(int a, int b)\\n    {\\n        string s1 = to_string(a);\\n        string s2 = to_string(b);\\n        string s = s1 + s2;\\n        int c = stoi(s);\\n        return c;\\n    }\\n    long long findTheArrayConcVal(vector<int> &nums)\\n    {\\n        long long ans = 0;\\n        int n = nums.size();\\n        int start = 0, end = n - 1;\\n        while (start < end)\\n        {\\n            int x = concat(nums[start], nums[end]);\\n            ans += x;\\n            start++;\\n            end--;\\n        }\\n        if (n % 2 != 0)\\n        {\\n            ans += nums[n / 2];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int concat(int a, int b)\\n    {\\n        string s1 = to_string(a);\\n        string s2 = to_string(b);\\n        string s = s1 + s2;\\n        int c = stoi(s);\\n        return c;\\n    }\\n    long long findTheArrayConcVal(vector<int> &nums)\\n    {\\n        long long ans = 0;\\n        int n = nums.size();\\n        int start = 0, end = n - 1;\\n        while (start < end)\\n        {\\n            int x = concat(nums[start], nums[end]);\\n            ans += x;\\n            start++;\\n            end--;\\n        }\\n        if (n % 2 != 0)\\n        {\\n            ans += nums[n / 2];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174838,
                "title": "cpp-easy-solution-with-string-conversion",
                "content": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int n=nums.size();double ans=0;\\n        for(int i=0;i<n/2;i++){\\n            string res=\"\";\\n            res+=to_string(nums[i])+to_string(nums[n-i-1]);\\n            ans+=stoi(res); \\n        }\\n         if(n % 2 == 1){\\n            ans += nums[n/2];\\n          }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int n=nums.size();double ans=0;\\n        for(int i=0;i<n/2;i++){\\n            string res=\"\";\\n            res+=to_string(nums[i])+to_string(nums[n-i-1]);\\n            ans+=stoi(res); \\n        }\\n         if(n % 2 == 1){\\n            ans += nums[n/2];\\n          }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174097,
                "title": "java-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res=0;\\n        if(nums.length==1)return (long)nums[0];\\n        for(int i=0;i<nums.length/2;i++)\\n        {\\n            String str=nums[i]+\"\"+nums[nums.length-i-1];\\n            res+=Long.parseLong(str);\\n        }\\n        if(nums.length%2!=0)res+=nums[nums.length/2];\\n        return res;\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res=0;\\n        if(nums.length==1)return (long)nums[0];\\n        for(int i=0;i<nums.length/2;i++)\\n        {\\n            String str=nums[i]+\"\"+nums[nums.length-i-1];\\n            res+=Long.parseLong(str);\\n        }\\n        if(nums.length%2!=0)res+=nums[nums.length/2];\\n        return res;\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174067,
                "title": "easy-solution-in-java-o-n-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int j = nums.length-1;\\n        ArrayList<Integer> k = new ArrayList<>();\\n        if (nums.length%2==0) {\\n            for (int i = 0; i < nums.length / 2; i++) {\\n\\n                String n = Integer.toString(nums[i]);\\n                String m = Integer.toString(nums[j]);\\n                j--;\\n                k.add(Integer.valueOf(n + m));\\n            }\\n        }\\n        else{\\n            for (int i = 0; i < nums.length / 2; i++) {\\n\\n                String n = Integer.toString(nums[i]);\\n                String m = Integer.toString(nums[j]);\\n                j--;\\n                k.add(Integer.valueOf(n + m));\\n            }\\n            k.add(nums[nums.length/2]);\\n        }\\n        long sum = 0;\\n        for (int i = 0; i < k.size(); i++) {\\n            sum+=k.get(i);\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int j = nums.length-1;\\n        ArrayList<Integer> k = new ArrayList<>();\\n        if (nums.length%2==0) {\\n            for (int i = 0; i < nums.length / 2; i++) {\\n\\n                String n = Integer.toString(nums[i]);\\n                String m = Integer.toString(nums[j]);\\n                j--;\\n                k.add(Integer.valueOf(n + m));\\n            }\\n        }\\n        else{\\n            for (int i = 0; i < nums.length / 2; i++) {\\n\\n                String n = Integer.toString(nums[i]);\\n                String m = Integer.toString(nums[j]);\\n                j--;\\n                k.add(Integer.valueOf(n + m));\\n            }\\n            k.add(nums[nums.length/2]);\\n        }\\n        long sum = 0;\\n        for (int i = 0; i < k.size(); i++) {\\n            sum+=k.get(i);\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914400,
                "title": "simple-understandable",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        vector<string> s;\\n        int sz = nums.size();\\n        if(sz%2==0)sz=sz/2;\\n        else sz = (sz/2)+1;\\n        for(int i = 0; i < sz; i++){\\n            if(nums.size()==1)s.push_back(to_string(nums[0]));\\n            else{\\n                string first = to_string(nums[0]);\\n                string last = to_string(nums[nums.size()-1]);\\n\\n                s.push_back(first+last);    \\n\\n                nums.erase(nums.begin());\\n                nums.pop_back();\\n            }\\n        }\\n\\n        long long int ans = 0;\\n        for(int i = 0; i < s.size(); i++){\\n            ans += stoi(s[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        vector<string> s;\\n        int sz = nums.size();\\n        if(sz%2==0)sz=sz/2;\\n        else sz = (sz/2)+1;\\n        for(int i = 0; i < sz; i++){\\n            if(nums.size()==1)s.push_back(to_string(nums[0]));\\n            else{\\n                string first = to_string(nums[0]);\\n                string last = to_string(nums[nums.size()-1]);\\n\\n                s.push_back(first+last);    \\n\\n                nums.erase(nums.begin());\\n                nums.pop_back();\\n            }\\n        }\\n\\n        long long int ans = 0;\\n        for(int i = 0; i < s.size(); i++){\\n            ans += stoi(s[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3895177,
                "title": "simple-beginner-s-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long i=0,j=nums.size()-1,ans=0;\\n        while(i<=j)\\n        {\\n            if(i==j)\\n            {\\n                ans=ans+nums[j];\\n                break;\\n            }\\n            if(nums[j]>9)\\n            {\\n                int check=0;\\n                int k=nums[j];\\n                while(k!=0)\\n                {\\n                    k=k/10;\\n                    check++;\\n                }\\n                nums[i]=(pow(10,check))*(nums[i]);\\n                ans=ans+nums[i]+nums[j];\\n            } \\n            else if(nums[j]<10)\\n            {\\n                nums[i]=(10)*(nums[i]);\\n                ans=ans+nums[i]+nums[j];\\n            }\\n            i++;\\n            j--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long i=0,j=nums.size()-1,ans=0;\\n        while(i<=j)\\n        {\\n            if(i==j)\\n            {\\n                ans=ans+nums[j];\\n                break;\\n            }\\n            if(nums[j]>9)\\n            {\\n                int check=0;\\n                int k=nums[j];\\n                while(k!=0)\\n                {\\n                    k=k/10;\\n                    check++;\\n                }\\n                nums[i]=(pow(10,check))*(nums[i]);\\n                ans=ans+nums[i]+nums[j];\\n            } \\n            else if(nums[j]<10)\\n            {\\n                nums[i]=(10)*(nums[i]);\\n                ans=ans+nums[i]+nums[j];\\n            }\\n            i++;\\n            j--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3860307,
                "title": "java-0ms-beats-100",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n\\n        long sum = 0;  // what we\\'ll return\\n        int idxLeft = 0;\\n        int idxRight = nums.length - 1;\\n\\n        while (idxLeft < idxRight) {\\n            sum += getConcatenationValue(nums[idxLeft], nums[idxRight]);\\n            ++idxLeft;\\n            --idxRight;\\n        }\\n\\n        if (idxLeft == idxRight) {\\n            sum += nums[idxLeft];\\n        }\\n\\n        return sum;\\n    }\\n\\n    private long getConcatenationValue(int leftVal, int rightVal) {\\n\\n        long left = leftVal;\\n        long right = rightVal;\\n\\n        // right == 10000\\n        if (right == 10000) {\\n            return left * 100000L + right;\\n        }\\n\\n        // 9999 >= right >= 1000\\n        if (right >= 1000) {\\n            return left * 10000L + right;\\n        }\\n\\n        // 999 >= right >= 100\\n        if (right >= 100) {\\n            return left * 1000L + right;\\n        }\\n        \\n        // 99 >= right >= 10\\n        if (right >= 10) { \\n            return left * 100L + right;\\n        }\\n\\n        // 9 >= right >= 1\\n        return left * 10L + right;\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n\\n        long sum = 0;  // what we\\'ll return\\n        int idxLeft = 0;\\n        int idxRight = nums.length - 1;\\n\\n        while (idxLeft < idxRight) {\\n            sum += getConcatenationValue(nums[idxLeft], nums[idxRight]);\\n            ++idxLeft;\\n            --idxRight;\\n        }\\n\\n        if (idxLeft == idxRight) {\\n            sum += nums[idxLeft];\\n        }\\n\\n        return sum;\\n    }\\n\\n    private long getConcatenationValue(int leftVal, int rightVal) {\\n\\n        long left = leftVal;\\n        long right = rightVal;\\n\\n        // right == 10000\\n        if (right == 10000) {\\n            return left * 100000L + right;\\n        }\\n\\n        // 9999 >= right >= 1000\\n        if (right >= 1000) {\\n            return left * 10000L + right;\\n        }\\n\\n        // 999 >= right >= 100\\n        if (right >= 100) {\\n            return left * 1000L + right;\\n        }\\n        \\n        // 99 >= right >= 10\\n        if (right >= 10) { \\n            return left * 100L + right;\\n        }\\n\\n        // 9 >= right >= 1\\n        return left * 10L + right;\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606476,
                "title": "two-pointers-python-3-solution",
                "content": "\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        result = 0\\n\\n        p1 = 0\\n        p2 = len(nums) - 1\\n\\n        while p1 <= p2:\\n            if p1 == p2:\\n                result += int(nums[p1])\\n\\n            else:\\n                result += int(str(nums[p1]) + str(nums[p2]))\\n\\n            p1 += 1\\n            p2 -= 1\\n\\n        return result\\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        result = 0\\n\\n        p1 = 0\\n        p2 = len(nums) - 1\\n\\n        while p1 <= p2:\\n            if p1 == p2:\\n                result += int(nums[p1])\\n\\n            else:\\n                result += int(str(nums[p1]) + str(nums[p2]))\\n\\n            p1 += 1\\n            p2 -= 1\\n\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3396819,
                "title": "two-pointer-beginner-friendly-c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTwo pointer concept need is needed to be used. Keep pointer \\'i\\' in the begining and \\'j\\' in the end.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIncrease i and decrease j as long as they don\\'t cross each other. Convert them into strings, perform string concatination then convert them into interger and then add it to the concatination value \\' sum \\'\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i=0;\\n        int j=nums.size()-1;\\n        long long sum=0;\\n        while(i<=j){\\n            if(i==j){\\n                sum+=nums[i];\\n                i++;\\n                j--;\\n            }else{\\n                sum+=stoi(to_string(nums[i])+to_string(nums[j]));\\n                i++;\\n                j--;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i=0;\\n        int j=nums.size()-1;\\n        long long sum=0;\\n        while(i<=j){\\n            if(i==j){\\n                sum+=nums[i];\\n                i++;\\n                j--;\\n            }else{\\n                sum+=stoi(to_string(nums[i])+to_string(nums[j]));\\n                i++;\\n                j--;\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329022,
                "title": "find-the-array-concatenation-value-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i;\\n        long long int ans=0;\\n        string s=\"\";\\n        for(i=0 ; i<nums.size()/2 ; i++)\\n        {\\n            s = to_string(nums[i]) + to_string(nums[nums.size()-i-1]);\\n            ans += stoi(s);\\n        }\\n        if(nums.size()%2==1)\\n        {\\n            ans += nums[nums.size()/2];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i;\\n        long long int ans=0;\\n        string s=\"\";\\n        for(i=0 ; i<nums.size()/2 ; i++)\\n        {\\n            s = to_string(nums[i]) + to_string(nums[nums.size()-i-1]);\\n            ans += stoi(s);\\n        }\\n        if(nums.size()%2==1)\\n        {\\n            ans += nums[nums.size()/2];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3319214,
                "title": "simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        String x=\"\";\\n        ArrayList<String>a=new ArrayList<String>();\\n        int i=0,j=nums.length-1;\\n        while(i<=j)\\n        {\\n            if(i==j)\\n            {\\n                x+=String.valueOf(nums[i]);\\n                a.add(x);\\n            }\\n            else\\n            {\\n                x+=String.valueOf(nums[i]);\\n                x+=String.valueOf(nums[j]);\\n                a.add(x);\\n            }\\n            x=\"\";\\n            i++;\\n            j--;\\n            \\n        }\\n        long ans=0;\\n        for(int k=0;k<a.size();k++)\\n        {\\n            ans+=Integer.parseInt(a.get(k));\\n        }\\n        return ans;\\n    }\\n}\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/dd31493b-c584-47cb-bf99-381ac4f26496_1679301958.657793.jpeg)\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        String x=\"\";\\n        ArrayList<String>a=new ArrayList<String>();\\n        int i=0,j=nums.length-1;\\n        while(i<=j)\\n        {\\n            if(i==j)\\n            {\\n                x+=String.valueOf(nums[i]);\\n                a.add(x);\\n            }\\n            else\\n            {\\n                x+=String.valueOf(nums[i]);\\n                x+=String.valueOf(nums[j]);\\n                a.add(x);\\n            }\\n            x=\"\";\\n            i++;\\n            j--;\\n            \\n        }\\n        long ans=0;\\n        for(int k=0;k<a.size();k++)\\n        {\\n            ans+=Integer.parseInt(a.get(k));\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299779,
                "title": "easy-solution-using-while-loop-in-python",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i=0\\n        c=0\\n        j=len(nums)-1\\n        while(i<=j):\\n            if(i==j):\\n                c=c+nums[i]\\n                break\\n            s=str(nums[i])+str(nums[j])\\n            c=c+int(s)\\n            i=i+1\\n            j=j-1\\n        return c\\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i=0\\n        c=0\\n        j=len(nums)-1\\n        while(i<=j):\\n            if(i==j):\\n                c=c+nums[i]\\n                break\\n            s=str(nums[i])+str(nums[j])\\n            c=c+int(s)\\n            i=i+1\\n            j=j-1\\n        return c\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3265420,
                "title": "beat-95-65-55ms-python3-two-pointer",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i, j, count = 0, len(nums)-1, 0\\n        while i <= j:\\n            if i != j: count += int(str(nums[i]) + str(nums[j]))\\n            else: count += nums[j]\\n            i += 1\\n            j -= 1\\n        return count\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i, j, count = 0, len(nums)-1, 0\\n        while i <= j:\\n            if i != j: count += int(str(nums[i]) + str(nums[j]))\\n            else: count += nums[j]\\n            i += 1\\n            j -= 1\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3224141,
                "title": "efficiently-concatenating-and-summing-integers-in-javascript-with-two-approaches",
                "content": "\\n# Algorithm 1: Using String Conversion\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let ans = 0;\\n    let left = 0, right = nums.length-1;\\n    while(left <= right){\\n        if(left !== right){\\n            let n = countDigits(nums[left]);\\n            let m = countDigits(nums[right]);\\n            ans += nums[left] * Math.pow(10, m) + nums[right];\\n        }else{\\n            ans += nums[left];\\n        }\\n        left++, right--;\\n    }\\n\\n    return ans;\\n};\\n\\nfunction countDigits(num) {\\n    let count = 0;\\n    while (num !== 0) {\\n        num = Math.floor(num / 10);\\n        count++;\\n    }\\n    return count;\\n}\\n\\n```\\n# Algorithm 2: Using Math\\n```\\nvar findTheArrayConcVal = function(nums) {\\n    let ans = 0;\\n    let left = 0, right = nums.length-1;\\n    while(left <= right){\\n        if(left !== right){\\n            let strNum = nums[left].toString() + nums[right].toString()\\n            let num = parseInt(strNum)\\n            ans += num;\\n        }else{\\n            ans +=nums[left];\\n        }\\n        left++, right--;\\n    }\\n\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Two Pointers"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let ans = 0;\\n    let left = 0, right = nums.length-1;\\n    while(left <= right){\\n        if(left !== right){\\n            let n = countDigits(nums[left]);\\n            let m = countDigits(nums[right]);\\n            ans += nums[left] * Math.pow(10, m) + nums[right];\\n        }else{\\n            ans += nums[left];\\n        }\\n        left++, right--;\\n    }\\n\\n    return ans;\\n};\\n\\nfunction countDigits(num) {\\n    let count = 0;\\n    while (num !== 0) {\\n        num = Math.floor(num / 10);\\n        count++;\\n    }\\n    return count;\\n}\\n\\n```\n```\\nvar findTheArrayConcVal = function(nums) {\\n    let ans = 0;\\n    let left = 0, right = nums.length-1;\\n    while(left <= right){\\n        if(left !== right){\\n            let strNum = nums[left].toString() + nums[right].toString()\\n            let num = parseInt(strNum)\\n            ans += num;\\n        }else{\\n            ans +=nums[left];\\n        }\\n        left++, right--;\\n    }\\n\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3199916,
                "title": "use-stringbuilder-to-solve",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res = 0L;\\n        StringBuilder sb = new StringBuilder();\\n        int i = 0;\\n        int j = nums.length - 1;\\n        while(j >= i){\\n            if(j == i){\\n                sb.append(nums[i]);\\n            }else{\\n                sb.append(nums[i]).append(nums[j]);\\n            }\\n            int temp = Integer.parseInt(sb.toString());\\n            sb.setLength(0);\\n            res += temp;\\n            j--;\\n            i++;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res = 0L;\\n        StringBuilder sb = new StringBuilder();\\n        int i = 0;\\n        int j = nums.length - 1;\\n        while(j >= i){\\n            if(j == i){\\n                sb.append(nums[i]);\\n            }else{\\n                sb.append(nums[i]).append(nums[j]);\\n            }\\n            int temp = Integer.parseInt(sb.toString());\\n            sb.setLength(0);\\n            res += temp;\\n            j--;\\n            i++;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3199735,
                "title": "simple-python-solution",
                "content": "\\n\\nSolution:\\n\\n```class Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        conc = 0\\n        if len(nums) == 1:\\n            return nums[0]\\n        while len(nums)>1:\\n            temp = int(str(nums[0])+str(nums[-1]))\\n            conc+=temp\\n            nums = nums[1:len(nums)-1]\\n        if len(nums)==1:\\n            conc+=nums[0]\\n        return conc```",
                "solutionTags": [],
                "code": "```class Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        conc = 0\\n        if len(nums) == 1:\\n            return nums[0]\\n        while len(nums)>1:\\n            temp = int(str(nums[0])+str(nums[-1]))\\n            conc+=temp\\n            nums = nums[1:len(nums)-1]\\n        if len(nums)==1:\\n            conc+=nums[0]\\n        return conc```",
                "codeTag": "Java"
            },
            {
                "id": 3195793,
                "title": "one-for-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let res = 0;\\n    for (let i = 0; i < nums.length / 2; i++) {\\n        const rightIndex = nums.length - 1 - i;\\n        res += i === rightIndex ? nums[i] : Number(\\'\\' + nums[i] + nums[rightIndex]);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let res = 0;\\n    for (let i = 0; i < nums.length / 2; i++) {\\n        const rightIndex = nums.length - 1 - i;\\n        res += i === rightIndex ? nums[i] : Number(\\'\\' + nums[i] + nums[rightIndex]);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3183532,
                "title": "java-100-faster-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        long res = 0;\\n        int i = 0;\\n        int j= nums.length-1;\\n        \\n        while(i<j){\\n            int num = concatenate(nums[i++],nums[j--]);\\n            res += num;\\n        }\\n        if((nums.length&1) != 0){\\n            res += nums[i];\\n        }\\n        return res;\\n    }\\n    private int concatenate(int x,int y){\\n        return Integer.parseInt(String.valueOf(x)+String.valueOf(y));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        long res = 0;\\n        int i = 0;\\n        int j= nums.length-1;\\n        \\n        while(i<j){\\n            int num = concatenate(nums[i++],nums[j--]);\\n            res += num;\\n        }\\n        if((nums.length&1) != 0){\\n            res += nums[i];\\n        }\\n        return res;\\n    }\\n    private int concatenate(int x,int y){\\n        return Integer.parseInt(String.valueOf(x)+String.valueOf(y));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3180640,
                "title": "javascript-two-pointer-o-n",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTwo pointer\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code - I\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let i = 0, j = nums.length-1, sum = 0;\\n    while(i<j) {\\n        sum += Number(nums[i]+\\'\\'+nums[j]);\\n        i++;\\n        j--;\\n    }\\n    if(i===j) sum += nums[i];\\n    return sum;\\n};\\n```\\n# Code - II\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let i = 0, j = nums.length-1, sum = 0;\\n    while(i<=j) {\\n        sum += Number(i===j ? nums[i] : `${nums[i]}`+`${nums[j]}`);\\n        i++; j--;\\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let i = 0, j = nums.length-1, sum = 0;\\n    while(i<j) {\\n        sum += Number(nums[i]+\\'\\'+nums[j]);\\n        i++;\\n        j--;\\n    }\\n    if(i===j) sum += nums[i];\\n    return sum;\\n};\\n```\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let i = 0, j = nums.length-1, sum = 0;\\n    while(i<=j) {\\n        sum += Number(i===j ? nums[i] : `${nums[i]}`+`${nums[j]}`);\\n        i++; j--;\\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3176483,
                "title": "simple-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n\\n    while(nums.length) {\\n        const first = nums.shift();\\n        const last = nums.pop();\\n        const concat = first?.toString() + last?.toString();\\n        sum += parseInt(concat);\\n    }\\n\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n\\n    while(nums.length) {\\n        const first = nums.shift();\\n        const last = nums.pop();\\n        const concat = first?.toString() + last?.toString();\\n        sum += parseInt(concat);\\n    }\\n\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3176078,
                "title": "simple-solution-using-string-beginner-friendly-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long out=0;\\n\\n        for(int i=0;i<nums.length/2;i++)\\n            out+=Long.parseLong(String.valueOf(nums[i])+String.valueOf(nums[nums.length-1-i]));\\n        if(nums.length%2==1)\\n            out+=nums[nums.length/2];\\n        return out; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long out=0;\\n\\n        for(int i=0;i<nums.length/2;i++)\\n            out+=Long.parseLong(String.valueOf(nums[i])+String.valueOf(nums[nums.length-1-i]));\\n        if(nums.length%2==1)\\n            out+=nums[nums.length/2];\\n        return out; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3175787,
                "title": "beats-100-speed-easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        summary = 0\\n        a = nums.copy()\\n        for i in nums[:len(a) // 2]:\\n            summary += int(str(i) + str(nums[-1]))\\n            nums.pop(-1)\\n        return summary if len(a)%2 == 0 else summary + nums[-1]            \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        summary = 0\\n        a = nums.copy()\\n        for i in nums[:len(a) // 2]:\\n            summary += int(str(i) + str(nums[-1]))\\n            nums.pop(-1)\\n        return summary if len(a)%2 == 0 else summary + nums[-1]            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3175437,
                "title": "simple-easy-python-solution",
                "content": "Runtime: 62 ms, faster than 66.67% of Python3 online submissions for Find the Array Concatenation Value.\\n\\nMemory Usage: 14.1 MB, less than 61.11% of Python3 online submissions for Find the Array Concatenation Value.\\n\\n\\n```class Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = len(nums)//2\\n        ans = 0\\n        rem = \"\"\\n        if len(nums)%2 !=0:\\n            ans += nums[l]\\n        for i in range(l):\\n            if len(nums) == 1:\\n                ans = ans + nums[-1]\\n                break\\n            ans += int(str(nums[0]) + str(nums[-1]))\\n            nums.pop(0)\\n            nums.pop(-1)\\n        return ans",
                "solutionTags": [],
                "code": "Runtime: 62 ms, faster than 66.67% of Python3 online submissions for Find the Array Concatenation Value.\\n\\nMemory Usage: 14.1 MB, less than 61.11% of Python3 online submissions for Find the Array Concatenation Value.\\n\\n\\n```class Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = len(nums)//2\\n        ans = 0\\n        rem = \"\"\\n        if len(nums)%2 !=0:\\n            ans += nums[l]\\n        for i in range(l):\\n            if len(nums) == 1:\\n                ans = ans + nums[-1]\\n                break\\n            ans += int(str(nums[0]) + str(nums[-1]))\\n            nums.pop(0)\\n            nums.pop(-1)\\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 3175160,
                "title": "4-solutions-brute-better-optimal-c-faster-than-100-0ms",
                "content": "# Intuition\\n\\nwe need to concatinate the first and last digits \\nfor example [7,52,2,4]\\nans = 522 + 14 = 596 ;\\nso 52 and 2 make 522 by (52 * 100)  + 2\\nsimilarly \\nfor 7 and 4 \\n(7 * 10) + 4 = 74\\n\\nin colclusion we just need to find the power of 10 which we need to multiply the first digit \\n\\n\\n\\n# Approach 1 \\n// credit goes to ganesh_2023 for this solution\\nwe can use a while loop and keep dividing last element to find out the power needed\\n\\n# Code\\n\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long int ans=0,x,b;\\n        int i = 0, j = nums.size()-1;\\n        while(i<j){\\n            x = nums[j], b = 0;\\n            while(x){\\n                b++;\\n                x /= 10;\\n            }\\n            ans = ans + nums[i]*1LL*pow(10,b)+nums[j];\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            ans += nums[i];\\n        }return ans;\\n    }\\n};\\n\\n# Approach 2\\nusing log and pow \\n\\n# Code\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i=0;\\n        int j=nums.size()-1;\\n        long long ans=0;\\n        while(i<j)\\n        {\\n            ans = ans + (nums[i] * pow(10, (int)log10(nums[j]) + 1 )) + nums[j];\\n            i++;\\n            j--;\\n        }\\n        if(i==j) ans += nums[i];\\n        return ans;\\n    }\\n};\\n\\n# Approach 3\\nusing stol and to_string() and simply adding\\n\\n# Code\\n\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n\\n        int i = 0;\\n        int j = nums.size()-1;\\n        long long ans = 0;\\n\\n        while(i<j)\\n        {\\n            string temp = to_string(nums[i]) + to_string(nums[j]);\\n            ans += stol(temp);\\n            i++;\\n            j--;\\n        }\\n        if(i==j)\\n        ans += nums[i];\\n        return ans;\\n        \\n    }\\n};\\n\\n# approach 4\\nthis is the fastest and is feasiable only beacause of the constraints given\\n\\nwe simply use if else to find the power \\n\\n# Code\\n\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        \\n        int i=0;\\n        int j=nums.size()-1;\\n        long long concat =0;\\n        while(i<=j)\\n        {\\n            if(i==j)\\n            {\\n                concat += nums[i];\\n                break;\\n            }\\n            if(nums[j]<10)\\n            {\\n                concat += nums[i]*10 + nums[j];\\n                i++;\\n                j--;\\n                continue;\\n            }\\n            if(nums[j]<100)\\n            {\\n                concat += nums[i]*100 + nums[j];\\n                i++;\\n                j--;\\n                continue;\\n            }\\n            if(nums[j]<1000)\\n            {\\n                concat += nums[i]*1000 + nums[j];\\n                i++;\\n                j--;\\n                continue;\\n            }\\n            if(nums[j]<10000)\\n            {\\n                concat += nums[i]*10000 + nums[j];\\n                i++;\\n                j--;\\n                continue;\\n            }\\n            if(nums[j]<100000)\\n            {\\n                concat += nums[i]*100000 + nums[j];\\n                i++;\\n                j--;\\n                continue;\\n            }\\n        }\\n        return concat;\\n        \\n    }\\n};\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long int ans=0,x,b;\\n        int i = 0, j = nums.size()-1;\\n        while(i<j){\\n            x = nums[j], b = 0;\\n            while(x){\\n                b++;\\n                x /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3175054,
                "title": "easy-solution-faster-using-two-pointers-and-strings-3ms",
                "content": "# Intuition\\n1. We need first element & last element from array -> so we will use Two Pointer to solve.\\n2. We need to Concate these two elements from array -> so we will use Strings.\\n3. And then we need to process the ans. \\n\\n# Approach\\nWe will get both elements from pointers (low,high) and then convert them into Strings , and then concate them, store the result into another string.\\nNow we have to add the resultant string in the form of Integer so, convert the resultant string into Integer.\\n\\nNow we have to cases:\\n  \\n![WhatsApp Image 2023-02-12 at 12.55.16.jpeg](https://assets.leetcode.com/users/images/0308d2f4-c13c-4a26-8238-5ed0e9796b94_1676186919.783601.jpeg)\\n\\nCase 2:\\nIf we run a loop (low <= high) then our middle element will get concatenated twice, & if not then our middle element will be remained from getting concatenated.\\n\\nTo avoid this if array length is odd then after loop directly add the middle element. \\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int low = 0;\\n        int high = nums.length-1;\\n        \\n        long ans = 0;\\n        \\n        while(low < high){\\n           \\n            String s1 = Integer.toString(nums[low]);\\n            String s2 = Integer.toString(nums[high]);\\n            \\n            String s3 = s1 + s2;\\n            \\n            ans += (Integer.parseInt(s3));\\n            \\n            low++;\\n            high--;\\n        }\\n        \\n        if(nums.length%2 != 0)\\n            ans += nums[low];\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int low = 0;\\n        int high = nums.length-1;\\n        \\n        long ans = 0;\\n        \\n        while(low < high){\\n           \\n            String s1 = Integer.toString(nums[low]);\\n            String s2 = Integer.toString(nums[high]);\\n            \\n            String s3 = s1 + s2;\\n            \\n            ans += (Integer.parseInt(s3));\\n            \\n            low++;\\n            high--;\\n        }\\n        \\n        if(nums.length%2 != 0)\\n            ans += nums[low];\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3175029,
                "title": "100-fast-easy-simple-c-solution",
                "content": "## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans=0;\\n        int i=0; int j= nums.size()-1;\\n        while (i<=j){\\n            if (i==j){\\n                ans+= nums[i];\\n                break;\\n            }\\n            int fir= nums[i]; int sec= nums[j];\\n            int dem= nums[j];\\n            int test= 0;\\n            while (dem>0){test++; dem/=10;}\\n            while (test--)fir*=10;\\n            fir+=sec;\\n            ans+= fir;\\n            i++; j--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Two Pointers",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans=0;\\n        int i=0; int j= nums.size()-1;\\n        while (i<=j){\\n            if (i==j){\\n                ans+= nums[i];\\n                break;\\n            }\\n            int fir= nums[i]; int sec= nums[j];\\n            int dem= nums[j];\\n            int test= 0;\\n            while (dem>0){test++; dem/=10;}\\n            while (test--)fir*=10;\\n            fir+=sec;\\n            ans+= fir;\\n            i++; j--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174554,
                "title": "easy-solution-c",
                "content": "# Code\\n```\\n#define ll long long\\nclass Solution {\\npublic:\\n    ll concat(int a,int b){\\n        int c=b,d=1;\\n        while(c!=0){\\n            d*=10;\\n            c/=10;\\n        }\\n        return (ll)(a*d+b);\\n    }\\n    ll findTheArrayConcVal(vector<int>& nums) {\\n        ll ans=0; int l=nums.size();\\n        if(l==1) return (ll)nums[0];\\n        for(int i=0,j=l-1;i<j;i++,j--)\\n            ans+=concat(nums[i],nums[j]);\\n        if(l%2!=0)\\n            ans+=nums[l/2];//since the middle element gets left in the for loop\\n        return ans; \\n    }\\n};\\n```\\n# Upvote if this helped!~\\n![upvote4.jpeg](https://assets.leetcode.com/users/images/b096315e-d019-4538-bc55-981cf07a83ed_1676180334.4019172.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\n#define ll long long\\nclass Solution {\\npublic:\\n    ll concat(int a,int b){\\n        int c=b,d=1;\\n        while(c!=0){\\n            d*=10;\\n            c/=10;\\n        }\\n        return (ll)(a*d+b);\\n    }\\n    ll findTheArrayConcVal(vector<int>& nums) {\\n        ll ans=0; int l=nums.size();\\n        if(l==1) return (ll)nums[0];\\n        for(int i=0,j=l-1;i<j;i++,j--)\\n            ans+=concat(nums[i],nums[j]);\\n        if(l%2!=0)\\n            ans+=nums[l/2];//since the middle element gets left in the for loop\\n        return ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174489,
                "title": "very-easy-java-solution",
                "content": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        ArrayList<Integer>a=new ArrayList();\\n        for(int x:nums){\\n            a.add(x);\\n            \\n        }\\n        long sum=0;\\n        String b=\"\";\\n        while(a.size()>0){\\n            if(a.size()>1){\\n                b+=a.get(0)+\"\"+a.get(a.size()-1)+\"\";\\n                sum+=Long.parseLong(b);\\n                b=\"\";\\n                a.remove(0);\\n                a.remove(a.size()-1);\\n               //System.out.println(sum);\\n            }\\n            else{\\n                b+=a.get(0)+\"\";\\n                a.remove(0);\\n                sum+=Long.parseLong(b);\\n            }\\n        }return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        ArrayList<Integer>a=new ArrayList();\\n        for(int x:nums){\\n            a.add(x);\\n            \\n        }\\n        long sum=0;\\n        String b=\"\";\\n        while(a.size()>0){\\n            if(a.size()>1){\\n                b+=a.get(0)+\"\"+a.get(a.size()-1)+\"\";\\n                sum+=Long.parseLong(b);\\n                b=\"\";\\n                a.remove(0);\\n                a.remove(a.size()-1);\\n               //System.out.println(sum);\\n            }\\n            else{\\n                b+=a.get(0)+\"\";\\n                a.remove(0);\\n                sum+=Long.parseLong(b);\\n            }\\n        }return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174486,
                "title": "c",
                "content": "~~~\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n=nums.size(),ans=0;\\n        for(int i=0;i<n/2;i++)\\n        {\\n            string s1=to_string(nums[i]);\\n            string s2=to_string(nums[n-i-1]);\\n            s1=s1+s2;\\n            cout<<s1<<endl;\\n            ans+=stoi(s1);\\n        }\\n        if(n%2!=0) \\n        {\\n            ans+=nums[n/2];\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n=nums.size(),ans=0;\\n        for(int i=0;i<n/2;i++)\\n        {\\n            string s1=to_string(nums[i]);\\n            string s2=to_string(nums[n-i-1]);\\n            s1=s1+s2;\\n            cout<<s1<<endl;\\n            ans+=stoi(s1);\\n        }",
                "codeTag": "C++"
            },
            {
                "id": 3174379,
                "title": "easiest-c-solution-using-single-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n=nums.size(),sum=0;\\n        for(int i=0;i<n/2;i++){\\n            int a=log10(nums[n-1-i]);\\n            int b=(nums[i]*(pow(10,a+1)))+nums[n-1-i];\\n            sum=sum+b;\\n        }\\n        if(n%2==1) return sum+nums[n/2];\\n       else return sum;\\n        \\n    }\\n};\\nDo UPVOTE if you like\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n=nums.size(),sum=0;\\n        for(int i=0;i<n/2;i++){\\n            int a=log10(nums[n-1-i]);\\n            int b=(nums[i]*(pow(10,a+1)))+nums[n-1-i];\\n            sum=sum+b;\\n        }\\n        if(n%2==1) return sum+nums[n/2];\\n       else return sum;\\n        \\n    }\\n};\\nDo UPVOTE if you like\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174319,
                "title": "simple-c-string-to-int-int-to-string-conversion",
                "content": "\\n# Approach\\nuse two pointer technique to solve the problem\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        string s=\"\";\\n        long long ans=0;\\n        int n=nums.size();\\n         int st=0,e=n-1;\\n        if(n==1){\\n            return nums[0];\\n        }\\n        while(st<e){\\n            s+=to_string(nums[st]);\\n            s+=to_string(nums[e]);\\n            int yk=stoi(s);\\n            ans+=yk;\\n            s=\"\";\\n            st++;e--;\\n        }\\n        st=0;e=n-1;\\n        if(n&1){\\n            int mid=(st+e)/2;\\n        return ans+nums[mid];\\n        }\\n        else{\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        string s=\"\";\\n        long long ans=0;\\n        int n=nums.size();\\n         int st=0,e=n-1;\\n        if(n==1){\\n            return nums[0];\\n        }\\n        while(st<e){\\n            s+=to_string(nums[st]);\\n            s+=to_string(nums[e]);\\n            int yk=stoi(s);\\n            ans+=yk;\\n            s=\"\";\\n            st++;e--;\\n        }\\n        st=0;e=n-1;\\n        if(n&1){\\n            int mid=(st+e)/2;\\n        return ans+nums[mid];\\n        }\\n        else{\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174276,
                "title": "python3-simulation",
                "content": "\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        ans = 0 \\n        for i in range((n+1)//2): \\n            if i == n-1-i: ans += nums[i]\\n            else: ans += int(str(nums[i]) + str(nums[n-1-i]))\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)\\n        ans = 0 \\n        for i in range((n+1)//2): \\n            if i == n-1-i: ans += nums[i]\\n            else: ans += int(str(nums[i]) + str(nums[n-1-i]))\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174193,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\ntypedef long long ll;\\nlong long findTheArrayConcVal(vector<int>&v) {\\n    ll n=v.size(), ans=0, l=0, r=n-1;\\n    while(l<r){\\n        ans+=stoll(to_string(v[l++])+to_string(v[r--]));\\n    }\\n    if(l==r){\\n        ans+=v[l];\\n    }\\n    return ans;\\n}\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\ntypedef long long ll;\\nlong long findTheArrayConcVal(vector<int>&v) {\\n    ll n=v.size(), ans=0, l=0, r=n-1;\\n    while(l<r){\\n        ans+=stoll(to_string(v[l++])+to_string(v[r--]));\\n    }\\n    if(l==r){\\n        ans+=v[l];\\n    }\\n    return ans;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174088,
                "title": "python-solution-easy-to-understand-super-easy-solution",
                "content": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, num: List[int]) -> int:\\n\\t\\t# to store final sum\\n        ans = 0\\n\\t\\t# traverse the num array untill its empty\\n        while num:\\n\\t\\t\\t# pop the first element out convert it to string\\n            p = str(num.pop(0))\\n            q = \"\"\\n\\t\\t\\t\\n\\t\\t\\t# if array is non empty pop the last element out\\n            if num:\\n                q=str(num.pop())\\n\\t\\t\\t\\n\\t\\t\\t# concate the string and add it to final answer\\n            ans += int(p+q)\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, num: List[int]) -> int:\\n\\t\\t# to store final sum\\n        ans = 0\\n\\t\\t# traverse the num array untill its empty\\n        while num:\\n\\t\\t\\t# pop the first element out convert it to string\\n            p = str(num.pop(0))\\n            q = \"\"\\n\\t\\t\\t\\n\\t\\t\\t# if array is non empty pop the last element out\\n            if num:\\n                q=str(num.pop())\\n\\t\\t\\t\\n\\t\\t\\t# concate the string and add it to final answer\\n            ans += int(p+q)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174057,
                "title": "python-short-and-simple",
                "content": "# Solution \\n\\nI use a left and right pointer and increment my answer at each step of the time, by concatenating the two numbers in their string form and converting back to int. If the middle element is left (or if $N$ is odd), simply add it to the answer. \\n\\nAlternatively, you can just simulate what is stated in the problem. For languages like C++ where vector.erase(0) works in $O(N)$, you could use a deque or similar data structure, although it is not necessary, as $O(N^2)$ passes under the small constraints.  \\n\\n# Complexity\\n- Time complexity: $O(N)$\\n- Space complexity: $O(1)$ (extra space)\\n\\n### \\n\\n```py\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = 0\\n        r = len( nums)-1 \\n        ans = 0 \\n        \\n        while (l < r): \\n            x = str( nums[l]) \\n            y = str( nums[r]) \\n            x += y \\n            ans += int(x)\\n            l += 1\\n            r -= 1 \\n            \\n        if l == r: \\n            ans +=  nums[l] \\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```py\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = 0\\n        r = len( nums)-1 \\n        ans = 0 \\n        \\n        while (l < r): \\n            x = str( nums[l]) \\n            y = str( nums[r]) \\n            x += y \\n            ans += int(x)\\n            l += 1\\n            r -= 1 \\n            \\n        if l == r: \\n            ans +=  nums[l] \\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174054,
                "title": "java-simple-two-pointers-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust follow the steps in the problem.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse two pointers to mark the first and last number.\\n\\n# Complexity\\n- Time complexity: $$O(N)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public long findTheArrayConcVal(int[] nums) {\\n    long result = 0;\\n    int left = 0;\\n    int right = nums.length - 1;\\n    while (left <= right) {\\n      if (left == right) {\\n        result += nums[left];\\n      } else {\\n        long shift = 1;\\n        int num = nums[right];\\n        while (num != 0) {\\n          shift *= 10;\\n          num /= 10;\\n        }\\n\\n        result += shift * nums[left] + nums[right];\\n      }\\n      right--;\\n      left++;\\n    }\\n\\n    return result;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n  public long findTheArrayConcVal(int[] nums) {\\n    long result = 0;\\n    int left = 0;\\n    int right = nums.length - 1;\\n    while (left <= right) {\\n      if (left == right) {\\n        result += nums[left];\\n      } else {\\n        long shift = 1;\\n        int num = nums[right];\\n        while (num != 0) {\\n          shift *= 10;\\n          num /= 10;\\n        }\\n\\n        result += shift * nums[left] + nums[right];\\n      }\\n      right--;\\n      left++;\\n    }\\n\\n    return result;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174043,
                "title": "c-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        long long ans = 0;\\n        int i = 0,j = nums.size()-1;\\n        string temp = \"\";\\n        while(i<j)\\n        {\\n            temp = \"\";\\n            temp+=to_string(nums[i])+to_string(nums[j]);\\n            ans+=stoi(temp);\\n            i++;j--;\\n        }\\n        if(nums.size()%2)\\n        {\\n            ans+=nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        long long ans = 0;\\n        int i = 0,j = nums.size()-1;\\n        string temp = \"\";\\n        while(i<j)\\n        {\\n            temp = \"\";\\n            temp+=to_string(nums[i])+to_string(nums[j]);\\n            ans+=stoi(temp);\\n            i++;j--;\\n        }\\n        if(nums.size()%2)\\n        {\\n            ans+=nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174038,
                "title": "c-simple-to-string-use",
                "content": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans=0;\\n        for(int i=0,j=nums.size()-1;i<nums.size()/2;i++,j--){\\n            string s = to_string(nums[i])+to_string(nums[j]);\\n            ans += stoll(s);\\n        }\\n        if(nums.size()%2==1) ans += nums[nums.size()/2];\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans=0;\\n        for(int i=0,j=nums.size()-1;i<nums.size()/2;i++,j--){\\n            string s = to_string(nums[i])+to_string(nums[j]);\\n            ans += stoll(s);\\n        }\\n        if(nums.size()%2==1) ans += nums[nums.size()/2];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174034,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        deque<int> dq;\\n        for(auto &it: nums) {\\n            dq.push_back(it);\\n        }\\n        long long con = 0;\\n        while(dq.size() > 0) {\\n            if(dq.size() > 1) {\\n                auto first = to_string(dq.front());\\n                auto last = to_string(dq.back());\\n                dq.pop_front();\\n                dq.pop_back();\\n                string temp = first + last;\\n                con += stoi(temp);\\n            }\\n            else {\\n                auto first = to_string(dq.front());\\n                dq.pop_front();\\n                string temp = first;\\n                con += stoi(temp);\\n            }\\n        }\\n        return con;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        deque<int> dq;\\n        for(auto &it: nums) {\\n            dq.push_back(it);\\n        }\\n        long long con = 0;\\n        while(dq.size() > 0) {\\n            if(dq.size() > 1) {\\n                auto first = to_string(dq.front());\\n                auto last = to_string(dq.back());\\n                dq.pop_front();\\n                dq.pop_back();\\n                string temp = first + last;\\n                con += stoi(temp);\\n            }\\n            else {\\n                auto first = to_string(dq.front());\\n                dq.pop_front();\\n                string temp = first;\\n                con += stoi(temp);\\n            }\\n        }\\n        return con;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3174016,
                "title": "two-pointer-simple-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int n = nums.size(), l, r;\\n        l = 0; r = n-1;\\n        long long int ans = 0;\\n        while (l <= r) {\\n            if (l == r) {\\n                ans += nums[l];\\n                break;\\n            }\\n            string a = to_string(nums[l++]);\\n            string b = to_string(nums[r--]);\\n            a = a+b;\\n            ans += stoi(a);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int n = nums.size(), l, r;\\n        l = 0; r = n-1;\\n        long long int ans = 0;\\n        while (l <= r) {\\n            if (l == r) {\\n                ans += nums[l];\\n                break;\\n            }\\n            string a = to_string(nums[l++]);\\n            string b = to_string(nums[r--]);\\n            a = a+b;\\n            ans += stoi(a);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4099670,
                "title": "beginners-friendly-simple-o-n-approach-using-to-string-and-stoi-functions",
                "content": "# Intuition\\nTraverse and append first and last element to a string variable and concatenate them by converting into int/long long.\\n\\n# Approach\\nUse two - pointer approach and then append string by converting int into string using to_string() function.\\nConcatenate the string by converting it into int//long long using stoi()/stoll().\\nVarious convesion functions are:-\\nstoi(str_value) (String to Integer)\\nstol(str_value) (String to Long)\\nstoll(str_value) (String to Long Long)\\nstof(str_value) (String to Float)\\nstod(str_value) (String to Double)\\nstold(str_value) (String to Long Double) \\nto_string(int/float/double/long_value) (Integer value to String)\\n\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n = size(nums), i = 0, j = n-1,ans = 0;\\n        long long n = nums.size();\\n        if(n == 1) return nums[0];\\n        long long ans = 0, i = 0, j = n - 1;\\n        while(i < j){\\n            string s = to_string(nums[i]) + to_string(nums[j]);\\n            ans += stoi(s);\\n            i++;\\n            j--;\\n        } \\n        if(i == j) ans += nums[i];\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long n = size(nums), i = 0, j = n-1,ans = 0;\\n        long long n = nums.size();\\n        if(n == 1) return nums[0];\\n        long long ans = 0, i = 0, j = n - 1;\\n        while(i < j){\\n            string s = to_string(nums[i]) + to_string(nums[j]);\\n            ans += stoi(s);\\n            i++;\\n            j--;\\n        } \\n        if(i == j) ans += nums[i];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4098058,
                "title": "cute-javascript-solution",
                "content": "# Intuition\\n- continually pluck the first and last number from the array\\n- smash \\'em together\\n- note that we\\'re going to have to think about switching back and forth from number types and string types\\n- add our concatenated numbers to a running sum\\n\\n# Approach\\n- initalize a running sum\\n- loop through nums array as long as it contains any elements\\n    - use .shift() and .pop() to grab the value of the first and last elements while simultaneously removing them from the array\\n    - turn these 2 numbers into a string\\n    - concatenate the 2 strings\\n    - turn this concatenated string back into a number\\n    - add this number to the running sum\\n- return the running sum\\n\\n# Time complexity: Linear or  O(n)\\n- we\\'re able to process 2 elements with each iteration, so technically it\\'s O(n/2) \\n\\n# Space complexity: Constant or O(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    while (nums.length) {\\n        sum += parseInt(\\n            String(nums.shift()) + String(nums.pop())\\n        );\\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    while (nums.length) {\\n        sum += parseInt(\\n            String(nums.shift()) + String(nums.pop())\\n        );\\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096747,
                "title": "c-solution-0ms-pointers",
                "content": "# Approach\\nUse two pointers to work from the outside inward.  Handle middle of odd sized arrays separately.  Use conditions to avoid log and multiplication since the value constraint is small.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nint fastLog10x10(int n) /* based on constraints, it\\'s assumed that n <= 10e4 */\\n{\\n    if(n < 10) return 10;\\n    if(n < 100) return 100;\\n    if(n < 1000) return 1000;\\n    if(n < 10000) return 10000;\\n    return 100000;\\n}\\n\\nlong long findTheArrayConcVal(int *n, int s)\\n{\\n    long long value = s & 1 ? n[s / 2] : 0;\\n    \\n    for(int *p1 = n, *p2 = n + s - 1; p1 < p2; p1++, p2--)\\n        value += fastLog10x10(*p2) * *p1 + *p2;\\n\\n    return value;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint fastLog10x10(int n) /* based on constraints, it\\'s assumed that n <= 10e4 */\\n{\\n    if(n < 10) return 10;\\n    if(n < 100) return 100;\\n    if(n < 1000) return 1000;\\n    if(n < 10000) return 10000;\\n    return 100000;\\n}\\n\\nlong long findTheArrayConcVal(int *n, int s)\\n{\\n    long long value = s & 1 ? n[s / 2] : 0;\\n    \\n    for(int *p1 = n, *p2 = n + s - 1; p1 < p2; p1++, p2--)\\n        value += fastLog10x10(*p2) * *p1 + *p2;\\n\\n    return value;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091879,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nfunc findTheArrayConcVal(_ nums: [Int]) -> Int {\\n    guard nums.count != 1 else {return nums[0]}\\n    var numbers = nums\\n    var first = 0\\n    var last = nums.count - 1\\n    var sum = 0\\n    \\n    while first < last {\\n        let str = \"\\\\(numbers.first!)\" + \"\\\\(numbers.last!)\"\\n        sum += Int(str)!\\n        numbers.removeFirst()\\n        numbers.removeLast()\\n        first += 1\\n        last -= 1\\n    }\\n    \\n    return numbers.isEmpty ? sum : sum + numbers[0]\\n}\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\nfunc findTheArrayConcVal(_ nums: [Int]) -> Int {\\n    guard nums.count != 1 else {return nums[0]}\\n    var numbers = nums\\n    var first = 0\\n    var last = nums.count - 1\\n    var sum = 0\\n    \\n    while first < last {\\n        let str = \"\\\\(numbers.first!)\" + \"\\\\(numbers.last!)\"\\n        sum += Int(str)!\\n        numbers.removeFirst()\\n        numbers.removeLast()\\n        first += 1\\n        last -= 1\\n    }\\n    \\n    return numbers.isEmpty ? sum : sum + numbers[0]\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091610,
                "title": "easy-to-understand-java-solution-using-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums)\\n    {   long concat =0;\\n        String temp = \"\";\\n        String str[] = new String[nums.length];\\n        for(int i =0; i<nums.length;i++){\\n            str[i] = String.valueOf(nums[i]);\\n        }\\n        int low =0;\\n        int high = str.length-1;\\n        while(low<=high){\\n            if(low==high){\\n                temp = str[low];\\n            }\\n            else{\\n            temp = str[low]+str[high];\\n            }\\n            concat = concat + Long.parseLong(temp);\\n            low++;\\n            high--;\\n        }\\n\\n        return concat;\\n\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums)\\n    {   long concat =0;\\n        String temp = \"\";\\n        String str[] = new String[nums.length];\\n        for(int i =0; i<nums.length;i++){\\n            str[i] = String.valueOf(nums[i]);\\n        }\\n        int low =0;\\n        int high = str.length-1;\\n        while(low<=high){\\n            if(low==high){\\n                temp = str[low];\\n            }\\n            else{\\n            temp = str[low]+str[high];\\n            }\\n            concat = concat + Long.parseLong(temp);\\n            low++;\\n            high--;\\n        }\\n\\n        return concat;\\n\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091019,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int i=0,j=nums.length-1;\\n        String a=\"\";\\n        long res=0;\\n        while(i<=j){\\n            if(i!=j){\\n                a+=(Integer.toString(nums[i])+Integer.toString(nums[j]));\\n            }else{\\n                a+=Integer.toString(nums[i]);\\n            }\\n            res+=Integer.parseInt(a);\\n            i++;\\n            j--;\\n            a=\"\";\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int i=0,j=nums.length-1;\\n        String a=\"\";\\n        long res=0;\\n        while(i<=j){\\n            if(i!=j){\\n                a+=(Integer.toString(nums[i])+Integer.toString(nums[j]));\\n            }else{\\n                a+=Integer.toString(nums[i]);\\n            }\\n            res+=Integer.parseInt(a);\\n            i++;\\n            j--;\\n            a=\"\";\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089649,
                "title": "simple-two-pointers-beats-99-53",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        p1, p2, s1 = 0, len(nums)-1,0\\n        while p1<=p2:\\n            if p1==p2:\\n                s1 += nums[p1]\\n                break\\n            s2 = str(nums[p1]) + str(nums[p2])\\n            s1 += int(s2)\\n            p1+=1\\n            p2-=1\\n        return s1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        p1, p2, s1 = 0, len(nums)-1,0\\n        while p1<=p2:\\n            if p1==p2:\\n                s1 += nums[p1]\\n                break\\n            s2 = str(nums[p1]) + str(nums[p2])\\n            s1 += int(s2)\\n            p1+=1\\n            p2-=1\\n        return s1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4086211,
                "title": "python-easy-to-understand-faster",
                "content": "\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        sum = 0\\n        length = len(nums)\\n        i = 0\\n        if length % 2 != 0:\\n            sum += nums[length//2]\\n        for i in range(length//2):\\n            val = str(nums[i]) + str(nums[length -i -1])\\n            sum += int(val)\\n        return sum\\n        \\n\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        sum = 0\\n        length = len(nums)\\n        i = 0\\n        if length % 2 != 0:\\n            sum += nums[length//2]\\n        for i in range(length//2):\\n            val = str(nums[i]) + str(nums[length -i -1])\\n            sum += int(val)\\n        return sum\\n        \\n\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079089,
                "title": "simple-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    let len = nums.length;\\n    let firstIndex = 0;\\n    let lastIndex = len-1\\n    while(firstIndex <= lastIndex ){\\n        if(firstIndex === lastIndex){\\n            sum += parseInt(nums[firstIndex]);\\n        }else{\\n            sum += parseInt(nums[firstIndex].toString() + nums[lastIndex].toString());\\n        }\\n        firstIndex++;\\n        lastIndex--;\\n    }\\n    return sum\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    let len = nums.length;\\n    let firstIndex = 0;\\n    let lastIndex = len-1\\n    while(firstIndex <= lastIndex ){\\n        if(firstIndex === lastIndex){\\n            sum += parseInt(nums[firstIndex]);\\n        }else{\\n            sum += parseInt(nums[firstIndex].toString() + nums[lastIndex].toString());\\n        }\\n        firstIndex++;\\n        lastIndex--;\\n    }\\n    return sum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4073605,
                "title": "simple-javascript-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n      let result = 0;\\n  const length = ~~((nums.length + 1) / 2);\\n  for (let i = 0; i < length; i++) {\\n    result += parseInt(nums.shift().toString() + nums?.pop()?.toString());\\n  }\\n  return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n      let result = 0;\\n  const length = ~~((nums.length + 1) / 2);\\n  for (let i = 0; i < length; i++) {\\n    result += parseInt(nums.shift().toString() + nums?.pop()?.toString());\\n  }\\n  return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4065799,
                "title": "simple-javascript-solution",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    //does copy of nums(we can\\'t mutate params)\\n    const arrayCopy = [...nums];\\n   //in this array we are going to save amount in strings \\n    const arrayOfSum = [];\\n   //iterates array\\n    while(arrayCopy.length > 0){\\n        //simple case. We simply add one number \\n        //in string type to arrayOfSum\\n        if(arrayCopy.length === 1){\\n        //add numbers\\n          arrayOfSum.push(arrayCopy[0].toString());\\n        //delete numbers from arrayCopy\\n          arrayCopy.splice(0, 1);\\n        } else {\\n            //add numbers\\n           arrayOfSum.push(arrayCopy[0].toString() + arrayCopy.at(-1).toString()); \\n            //delete number from start\\n           arrayCopy.splice(0, 1);\\n            //delete number from end\\n           arrayCopy.splice(arrayCopy.length -1, 1); \\n        }\\n       \\n    } \\n    //add numbers between each other\\n    const addedValues = arrayOfSum.reduce((accumulator, currentValue ) => accumulator + (+currentValue), 0);\\n    // return result \\n    return addedValues;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    //does copy of nums(we can\\'t mutate params)\\n    const arrayCopy = [...nums];\\n   //in this array we are going to save amount in strings \\n    const arrayOfSum = [];\\n   //iterates array\\n    while(arrayCopy.length > 0){\\n        //simple case. We simply add one number \\n        //in string type to arrayOfSum\\n        if(arrayCopy.length === 1){\\n        //add numbers\\n          arrayOfSum.push(arrayCopy[0].toString());\\n        //delete numbers from arrayCopy\\n          arrayCopy.splice(0, 1);\\n        } else {\\n            //add numbers\\n           arrayOfSum.push(arrayCopy[0].toString() + arrayCopy.at(-1).toString()); \\n            //delete number from start\\n           arrayCopy.splice(0, 1);\\n            //delete number from end\\n           arrayCopy.splice(arrayCopy.length -1, 1); \\n        }\\n       \\n    } \\n    //add numbers between each other\\n    const addedValues = arrayOfSum.reduce((accumulator, currentValue ) => accumulator + (+currentValue), 0);\\n    // return result \\n    return addedValues;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060262,
                "title": "used-parseint",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n\\n    let concat = 0;\\n    let sum = 0;\\n\\n    while(nums.length > 1){\\n        for(let i = 0; i < nums.length; i++){\\n            if(nums.length > 1){        /* multiple elements left */\\n                concat = parseInt(\"\" + nums[0] + nums[nums.length-1]);\\n                nums.splice(0, 1); /* remove head */\\n                nums.splice(nums.length-1, 1); /* remove tail */\\n                sum += concat; \\n            }\\n        }\\n    }\\n    \\n    /* 1 element left */\\n    if(nums.length === 1){  \\n        concat = nums[0];\\n        nums.splice(0, 1); /* remove head */\\n        sum += concat;   \\n    }\\n\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n\\n    let concat = 0;\\n    let sum = 0;\\n\\n    while(nums.length > 1){\\n        for(let i = 0; i < nums.length; i++){\\n            if(nums.length > 1){        /* multiple elements left */\\n                concat = parseInt(\"\" + nums[0] + nums[nums.length-1]);\\n                nums.splice(0, 1); /* remove head */\\n                nums.splice(nums.length-1, 1); /* remove tail */\\n                sum += concat; \\n            }\\n        }\\n    }\\n    \\n    /* 1 element left */\\n    if(nums.length === 1){  \\n        concat = nums[0];\\n        nums.splice(0, 1); /* remove head */\\n        sum += concat;   \\n    }\\n\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057395,
                "title": "solution-with-loop",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        res=0\\n        if len(nums)%2==0:\\n            while nums:\\n                first=str(nums[0])\\n                last=str(nums[-1])\\n                res+=int(first+last)\\n                del nums[0]\\n                del nums[-1]\\n        else:\\n            medium=nums[int((len(nums)-1)/2)]\\n            del nums[int((len(nums)-1)/2)]\\n            while nums:\\n                first=str(nums[0])\\n                last=str(nums[-1])\\n                res+=int(first+last)\\n                del nums[0]\\n                del nums[-1]\\n            res+=medium\\n        return res\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        res=0\\n        if len(nums)%2==0:\\n            while nums:\\n                first=str(nums[0])\\n                last=str(nums[-1])\\n                res+=int(first+last)\\n                del nums[0]\\n                del nums[-1]\\n        else:\\n            medium=nums[int((len(nums)-1)/2)]\\n            del nums[int((len(nums)-1)/2)]\\n            while nums:\\n                first=str(nums[0])\\n                last=str(nums[-1])\\n                res+=int(first+last)\\n                del nums[0]\\n                del nums[-1]\\n            res+=medium\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4050031,
                "title": "java-easy-and-intuitive",
                "content": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int i = 0, j = n - 1;\\n        long sum = 0;\\n        while (i < j) {\\n            String cur = (nums[i] + \"\") + (nums[j] + \"\");\\n            sum += Integer.parseInt(cur);\\n            i++;\\n            j--;\\n        }\\n        if (i == j) sum += nums[i];\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int i = 0, j = n - 1;\\n        long sum = 0;\\n        while (i < j) {\\n            String cur = (nums[i] + \"\") + (nums[j] + \"\");\\n            sum += Integer.parseInt(cur);\\n            i++;\\n            j--;\\n        }\\n        if (i == j) sum += nums[i];\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045436,
                "title": "simple-reccursive-solution-that-doesn-t-use-string-conversions",
                "content": "# Intuition\\nProblem\\'s simple but using strings to concatenate numbers means a large number of conversions.\\n\\n# Approach\\nThe problem can easily be reccursed into by using array slices that are very efficient in Go. To avoid converting strings, we just take the log10 of the right number to figure out how many digits it has, then just make an addition of the right number with 10^number of digits of right*left number. That way we built the base10 representation of the left.\\n\\n\\n# Code\\n```\\nfunc max(a, b int) int {\\n\\tif a > b {\\n\\t\\treturn a\\n\\t}\\n\\treturn b\\n}\\n\\nfunc findTheArrayConcVal(nums []int) int64 {\\n    l := len(nums)\\n     if l == 0 {\\n        return 0\\n     } else if l == 1 {\\n        return int64(nums[0])\\n     }\\n     first := int64(nums[0])\\n     last := int64(nums[l-1])\\n     sizeoflast := int(math.Log10(float64(last)))+1\\n     concatenation := int64(math.Pow10(sizeoflast))*first+last\\n     return concatenation+findTheArrayConcVal(nums[1:max(l-1,1)])\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc max(a, b int) int {\\n\\tif a > b {\\n\\t\\treturn a\\n\\t}\\n\\treturn b\\n}\\n\\nfunc findTheArrayConcVal(nums []int) int64 {\\n    l := len(nums)\\n     if l == 0 {\\n        return 0\\n     } else if l == 1 {\\n        return int64(nums[0])\\n     }\\n     first := int64(nums[0])\\n     last := int64(nums[l-1])\\n     sizeoflast := int(math.Log10(float64(last)))+1\\n     concatenation := int64(math.Pow10(sizeoflast))*first+last\\n     return concatenation+findTheArrayConcVal(nums[1:max(l-1,1)])\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042505,
                "title": "o-n-solution-easy-approach-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    \\n   \\n    public long findTheArrayConcVal(int[] nums) {\\n        int low=0;\\n        int high=nums.length-1;\\n        long ans=0L;\\n        StringBuilder s=new StringBuilder(\"\");\\n\\n        while(low<high){\\n          \\n         s.append(nums[low]).append(nums[high]);\\n          \\n           ans+=(Integer.parseInt(s.toString()));  \\n           low++;\\n           high--;\\n           s.setLength(0);\\n        }\\n        if(nums.length%2==0){\\n            return ans;\\n        }\\n       \\n        return ans+nums[low];\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n   \\n    public long findTheArrayConcVal(int[] nums) {\\n        int low=0;\\n        int high=nums.length-1;\\n        long ans=0L;\\n        StringBuilder s=new StringBuilder(\"\");\\n\\n        while(low<high){\\n          \\n         s.append(nums[low]).append(nums[high]);\\n          \\n           ans+=(Integer.parseInt(s.toString()));  \\n           low++;\\n           high--;\\n           s.setLength(0);\\n        }\\n        if(nums.length%2==0){\\n            return ans;\\n        }\\n       \\n        return ans+nums[low];\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4027114,
                "title": "the-solution-with-two-pointers-which-gives-94-81-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTwo Pointers\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe use 2 pointers to go through the array from the beginning to the end and vice versa, until two pointers do not meet each other.\\nDuring this we check whether the pointers are equal:\\na. if they are, we summ the value behind that pointer with the result.\\nb. if they aren\\'t, we convert the values on pointers to Strings and concatinate them, then re-convert the String to Number and summ the value with the result.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n  let res = 0;\\n  let left = 0;\\n  let right = nums.length - 1;\\n\\n  while(left <= right) {\\n    let leftVal = nums[left];\\n    let rightVal = nums[right];\\n\\n    left === right \\n            ? res += leftVal \\n            : res += +(leftVal.toString() + rightVal.toString());\\n\\n    left += 1;\\n    right -= 1;\\n  }\\n\\n\\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n  let res = 0;\\n  let left = 0;\\n  let right = nums.length - 1;\\n\\n  while(left <= right) {\\n    let leftVal = nums[left];\\n    let rightVal = nums[right];\\n\\n    left === right \\n            ? res += leftVal \\n            : res += +(leftVal.toString() + rightVal.toString());\\n\\n    left += 1;\\n    right -= 1;\\n  }\\n\\n\\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025893,
                "title": "beats-100-with-c-the-most-easiest-solution-ever",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans=0;\\n        int start = 0, end = nums.size()-1;\\n        while(start<end){\\n            int firstNumber=nums[start], lastNumber=nums[end];\\n            while(lastNumber>0){\\n                lastNumber /= 10;\\n                firstNumber *= 10;\\n            }\\n            ans = ans + firstNumber + nums[end];\\n            start++, end--;\\n        }\\n        if(start==end){\\n            ans = ans + nums[start];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long ans=0;\\n        int start = 0, end = nums.size()-1;\\n        while(start<end){\\n            int firstNumber=nums[start], lastNumber=nums[end];\\n            while(lastNumber>0){\\n                lastNumber /= 10;\\n                firstNumber *= 10;\\n            }\\n            ans = ans + firstNumber + nums[end];\\n            start++, end--;\\n        }\\n        if(start==end){\\n            ans = ans + nums[start];\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4024538,
                "title": "too-easy-for-the-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i=0\\n        j=len(nums)-1\\n        s=0\\n        while(i<=j):\\n            if i==j:\\n                s+=nums[i]\\n            else:\\n                k=int(str(nums[i])+str(nums[j]))\\n                s+=k\\n            i+=1\\n            j-=1\\n        return s\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        i=0\\n        j=len(nums)-1\\n        s=0\\n        while(i<=j):\\n            if i==j:\\n                s+=nums[i]\\n            else:\\n                k=int(str(nums[i])+str(nums[j]))\\n                s+=k\\n            i+=1\\n            j-=1\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019427,
                "title": "basic-java-soln-93",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        for(int i=0;i<nums.length/2;i++){\\n            sum+=nums[i]*Math.pow(10,Integer.toString(nums[nums.length-i-1]).length())+nums[nums.length-1-i];\\n        }\\n        if(nums.length%2!=0)\\n            sum+=nums[nums.length/2];\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        for(int i=0;i<nums.length/2;i++){\\n            sum+=nums[i]*Math.pow(10,Integer.toString(nums[nums.length-i-1]).length())+nums[nums.length-1-i];\\n        }\\n        if(nums.length%2!=0)\\n            sum+=nums[nums.length/2];\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007832,
                "title": "quick-and-dirty-super-short",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n\\n        s = 0\\n        for i in range(len(nums)//2):\\n            s += int(str(nums[i]) + str(nums[-i-1]))\\n        \\n        if len(nums) % 2:\\n            s += nums[len(nums)/2]\\n        \\n        return s\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n\\n        s = 0\\n        for i in range(len(nums)//2):\\n            s += int(str(nums[i]) + str(nums[-i-1]))\\n        \\n        if len(nums) % 2:\\n            s += nums[len(nums)/2]\\n        \\n        return s\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4003083,
                "title": "accepted-fast-and-easy-solution-100-beats",
                "content": "# Intuition\\n![\\u0421\\u043D\\u0438\\u043C\\u043E\\u043A \\u044D\\u043A\\u0440\\u0430\\u043D\\u0430 2023-09-05 \\u0432 02.40.47.png](https://assets.leetcode.com/users/images/c3012bad-8149-48a4-b2a5-7029ad89f202_1693863667.754454.png)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func findTheArrayConcVal(_ nums: [Int]) -> Int {\\n        \\n        var numsCopy = nums\\n        var result = 0\\n\\n        while !numsCopy.isEmpty {\\n            if numsCopy.count == 1 { result += numsCopy[0]; return result }\\n            \\n            let first = numsCopy.removeFirst(), last = numsCopy.removeLast()\\n            result += Int(String(first) + String(last))!\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    func findTheArrayConcVal(_ nums: [Int]) -> Int {\\n        \\n        var numsCopy = nums\\n        var result = 0\\n\\n        while !numsCopy.isEmpty {\\n            if numsCopy.count == 1 { result += numsCopy[0]; return result }\\n            \\n            let first = numsCopy.removeFirst(), last = numsCopy.removeLast()\\n            result += Int(String(first) + String(last))!\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002344,
                "title": "you-cannot-see-more-simpler-approach-than-this-very-helpful-for-beginners",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int start=0;\\n        int end=nums.length-1;\\n        int mid=(start+end)/2;\\n        String a=\"\";\\n        long count=0L;\\n        for (int i = 0; i < nums.length/2; i++) {\\n            a=nums[start]+\"\"+nums[end];\\n            count +=Long.parseLong(a);\\n            start++;\\n            end--;\\n        }\\n        if(nums.length%2==0){\\n            return count;\\n        }\\n        else{\\n            return count+nums[mid];\\n        }\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int start=0;\\n        int end=nums.length-1;\\n        int mid=(start+end)/2;\\n        String a=\"\";\\n        long count=0L;\\n        for (int i = 0; i < nums.length/2; i++) {\\n            a=nums[start]+\"\"+nums[end];\\n            count +=Long.parseLong(a);\\n            start++;\\n            end--;\\n        }\\n        if(nums.length%2==0){\\n            return count;\\n        }\\n        else{\\n            return count+nums[mid];\\n        }\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002278,
                "title": "runtime-4ms-beats-64-66-users-of-java-user-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        for(int i=0;i<nums.length/2;i++)\\n        {\\n            long a=Long.valueOf(String.valueOf(nums[i])+String.valueOf(nums[nums.length-i-1]));\\n\\n            sum+=a;\\n            \\n        }\\n        if(nums.length%2!=0) sum+=nums[nums.length/2];\\n        return sum;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        for(int i=0;i<nums.length/2;i++)\\n        {\\n            long a=Long.valueOf(String.valueOf(nums[i])+String.valueOf(nums[nums.length-i-1]));\\n\\n            sum+=a;\\n            \\n        }\\n        if(nums.length%2!=0) sum+=nums[nums.length/2];\\n        return sum;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3988065,
                "title": "java-solution-without-strings-100-runtime",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        long val = 0;\\n        for (int i = 0; i < n / 2; i++) {\\n            val += concat(nums[i], nums[n - 1 - i]);\\n        }\\n        \\n        return n % 2 == 0 ? val : val + nums[n / 2];\\n    }\\n\\n    private long concat(int num1, int num2) {\\n        int copy = num2;\\n        int count = 0;\\n        while (num2 != 0) {\\n            num2 /= 10;\\n            count++;\\n        }\\n\\n        return (long) (num1 * Math.pow(10, count) + copy);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        long val = 0;\\n        for (int i = 0; i < n / 2; i++) {\\n            val += concat(nums[i], nums[n - 1 - i]);\\n        }\\n        \\n        return n % 2 == 0 ? val : val + nums[n / 2];\\n    }\\n\\n    private long concat(int num1, int num2) {\\n        int copy = num2;\\n        int count = 0;\\n        while (num2 != 0) {\\n            num2 /= 10;\\n            count++;\\n        }\\n\\n        return (long) (num1 * Math.pow(10, count) + copy);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978967,
                "title": "easy-solution-1-line",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        return sum(nums[i] * pow(10, int(log10(nums[j])) + 1) + nums[j] if i < (j := len(nums) - 1 - i) else nums[i] for i in range((len(nums) - 1) // 2 + 1))\\n```\\n\\nPlease let me know if any improvements can be made.\\n\\nThanks",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        return sum(nums[i] * pow(10, int(log10(nums[j])) + 1) + nums[j] if i < (j := len(nums) - 1 - i) else nums[i] for i in range((len(nums) - 1) // 2 + 1))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3969564,
                "title": "beats-90-completely-recursive",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIn this problem, I\\'m sure most people have used some concepts about logarithms and exponentials, but all of them are pretty non trivial and hard to come up with in an Interview setting. All I have done, is simply convert the numbers to string, concatenated them, Parsed them back to `long` numbers and added them, all in a recursive approach.\\n\\n# Approach \\n<!-- Describe your approach to solving the problem. -->\\nCode so simple you\\'ll get it yourself\\n# Complexity\\n- Time complexity: **O(n)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(n)** recursive calls\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    long sum = 0;\\n    public long findTheArrayConcVal(int[] nums) {\\n        findSum(nums, 0, nums.length -1);\\n        return sum;\\n    }\\n    void findSum(int[]nums, int left, int right){\\n        if(left>right){return;}\\n        if(left == right){sum+=nums[left]; return;}\\n        String str = Integer.toString(nums[left]) + Integer.toString(nums[right]);\\n        sum+= Integer.parseInt(str);\\n        findSum(nums, left+1, right-1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    long sum = 0;\\n    public long findTheArrayConcVal(int[] nums) {\\n        findSum(nums, 0, nums.length -1);\\n        return sum;\\n    }\\n    void findSum(int[]nums, int left, int right){\\n        if(left>right){return;}\\n        if(left == right){sum+=nums[left]; return;}\\n        String str = Integer.toString(nums[left]) + Integer.toString(nums[right]);\\n        sum+= Integer.parseInt(str);\\n        findSum(nums, left+1, right-1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3967556,
                "title": "two-pointers-python-best-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = 0 \\n        r = len(nums)-1\\n        ans = []\\n        while l<r:\\n            e = str(nums[l])+str(nums[r])\\n            ans.append(int(e))\\n            l+=1 \\n            r-=1\\n        print(l,r)\\n        if len(nums)%2!=0:\\n            ans.append(nums[len(nums)//2])\\n        return sum(ans)\\n        \\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = 0 \\n        r = len(nums)-1\\n        ans = []\\n        while l<r:\\n            e = str(nums[l])+str(nums[r])\\n            ans.append(int(e))\\n            l+=1 \\n            r-=1\\n        print(l,r)\\n        if len(nums)%2!=0:\\n            ans.append(nums[len(nums)//2])\\n        return sum(ans)\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3966861,
                "title": "for-beginners",
                "content": "## Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        res = 0\\n        l = 0\\n        r = -1\\n        while len(nums) > 1:\\n            temp = str(nums[l]) + str(nums[r])\\n            res += int(temp)\\n            nums.pop(0)\\n            nums.pop(-1)\\n        if nums:\\n            return res+nums[-1]\\n        return res\\n\\n```\\n\\n## Time and Space Complexity : O(n) & O(n)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        res = 0\\n        l = 0\\n        r = -1\\n        while len(nums) > 1:\\n            temp = str(nums[l]) + str(nums[r])\\n            res += int(temp)\\n            nums.pop(0)\\n            nums.pop(-1)\\n        if nums:\\n            return res+nums[-1]\\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3952097,
                "title": "super-duper-easy-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        int i = 0;\\n        int j = nums.size() - 1;\\n        int mid = (i + j) / 2;\\n        long long result = 0;\\n\\n        while (i < j) {\\n            string temp = to_string(nums[i]) + to_string(nums[j]);\\n            result += stoi(temp);\\n            ++i;\\n            --j;\\n        }\\n\\n        // \\uC8FC\\uC5B4\\uC9C4 \\uBC30\\uC5F4\\uC774 \\uD640\\uC218 \\uAE38\\uC774 \\uC911\\uC559\\uC5D0 \\uB0A8\\uB294 \\uC778\\uB371\\uC2A4\\uC758 nums \\uAC12\\uC744 \\uB204\\uC801.\\n        if (nums.size() % 2 == 1) result += nums[mid];\\n\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) \\n    {\\n        int i = 0;\\n        int j = nums.size() - 1;\\n        int mid = (i + j) / 2;\\n        long long result = 0;\\n\\n        while (i < j) {\\n            string temp = to_string(nums[i]) + to_string(nums[j]);\\n            result += stoi(temp);\\n            ++i;\\n            --j;\\n        }\\n\\n        // \\uC8FC\\uC5B4\\uC9C4 \\uBC30\\uC5F4\\uC774 \\uD640\\uC218 \\uAE38\\uC774 \\uC911\\uC559\\uC5D0 \\uB0A8\\uB294 \\uC778\\uB371\\uC2A4\\uC758 nums \\uAC12\\uC744 \\uB204\\uC801.\\n        if (nums.size() % 2 == 1) result += nums[mid];\\n\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3951834,
                "title": "to-string-and-stoi",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int l=0,r=nums.size()-1;\\n        long long ans=0;\\n        while(r>=l){\\n            if(r==l){\\n                ans+=nums[l];\\n                return ans;\\n            }\\n            else{\\n                string s=to_string(nums[l])+to_string(nums[r]);\\n                ans=ans+stoi(s);\\n                if(r-l==1)return ans;\\n                r--;\\n                l++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int l=0,r=nums.size()-1;\\n        long long ans=0;\\n        while(r>=l){\\n            if(r==l){\\n                ans+=nums[l];\\n                return ans;\\n            }\\n            else{\\n                string s=to_string(nums[l])+to_string(nums[r]);\\n                ans=ans+stoi(s);\\n                if(r-l==1)return ans;\\n                r--;\\n                l++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3946027,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        String s = \"\";\\n        String s1 = \"\";\\n        String s2 = \"\";\\n        long x = 0;\\n        int j = nums.length-1;\\n        for(int i=0;i<nums.length/2;i++){\\n            s = String.valueOf(nums[i]);\\n            s1 = String.valueOf(nums[j-i]);\\n            s2 = s + s1;\\n            x = x + Integer.parseInt(s2);\\n        }\\n        if(nums.length%2!=0){\\n            x = x + nums[nums.length/2];\\n        }\\n        return x;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        String s = \"\";\\n        String s1 = \"\";\\n        String s2 = \"\";\\n        long x = 0;\\n        int j = nums.length-1;\\n        for(int i=0;i<nums.length/2;i++){\\n            s = String.valueOf(nums[i]);\\n            s1 = String.valueOf(nums[j-i]);\\n            s2 = s + s1;\\n            x = x + Integer.parseInt(s2);\\n        }\\n        if(nums.length%2!=0){\\n            x = x + nums[nums.length/2];\\n        }\\n        return x;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3945937,
                "title": "easy-to-understand-python3-solution-o-log-n-tc-and-o-1-sc",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l,r = 0, len(nums) - 1\\n        sum = 0\\n        while l <= r:\\n            print(str(nums[l]) + str(nums[r]))\\n            if l != r:\\n                sum += int(str(nums[l]) + str(nums[r]))\\n            else:\\n                sum += int(str(nums[l]))\\n            \\n            l += 1\\n            r -= 1\\n        \\n        return sum\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l,r = 0, len(nums) - 1\\n        sum = 0\\n        while l <= r:\\n            print(str(nums[l]) + str(nums[r]))\\n            if l != r:\\n                sum += int(str(nums[l]) + str(nums[r]))\\n            else:\\n                sum += int(str(nums[l]))\\n            \\n            l += 1\\n            r -= 1\\n        \\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941980,
                "title": "beats-100-java-solution",
                "content": "\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n       int leftInd=0;\\n       int rightInd=nums.length-1;\\n       long val=0;\\n       while(leftInd<=rightInd){\\n           if(leftInd!=rightInd){\\n               val+=\\n               (long)nums[leftInd]*Math.pow(10,calculateDigits(nums[rightInd]))+nums[rightInd];\\n               leftInd++;rightInd--;\\n           }else{\\n               val+=(long)nums[leftInd];\\n               leftInd++;\\n           }\\n       } \\n       return val;\\n    }\\n\\n    public static int calculateDigits(int a){\\n        int c=0;\\n        while(a!=0){\\n            a/=10;\\n            c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n       int leftInd=0;\\n       int rightInd=nums.length-1;\\n       long val=0;\\n       while(leftInd<=rightInd){\\n           if(leftInd!=rightInd){\\n               val+=\\n               (long)nums[leftInd]*Math.pow(10,calculateDigits(nums[rightInd]))+nums[rightInd];\\n               leftInd++;rightInd--;\\n           }else{\\n               val+=(long)nums[leftInd];\\n               leftInd++;\\n           }\\n       } \\n       return val;\\n    }\\n\\n    public static int calculateDigits(int a){\\n        int c=0;\\n        while(a!=0){\\n            a/=10;\\n            c++;\\n        }\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941831,
                "title": "easy-way",
                "content": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        check=\"\"\\n        ans=0\\n        while len(nums) >= 2:\\n\\n\\n            first=nums.pop(0)\\n            last=nums.pop()\\n\\n            check=str(first)+str(last)\\n            ans+=int(check)\\n\\n            check=0\\n        if len(nums)==1:\\n            ans+=nums[0]\\n        return ans\\n\\nsta",
                "solutionTags": [
                    "Python3",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        check=\"\"\\n        ans=0\\n        while len(nums) >= 2:\\n\\n\\n            first=nums.pop(0)\\n            last=nums.pop()\\n\\n            check=str(first)+str(last)\\n            ans+=int(check)\\n\\n            check=0\\n        if len(nums)==1:\\n            ans+=nums[0]\\n        return ans\\n\\nsta",
                "codeTag": "Java"
            },
            {
                "id": 3941662,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concat = 0\\n        left = 0\\n        right = len(nums) - 1\\n\\n        while left <= right:\\n            a = str(nums[left])\\n            b = str(nums[right])\\n\\n            if left == right:\\n                concat += int(a)\\n            else:\\n                concat += int(a + b)\\n        \\n            left += 1\\n            right -= 1\\n        \\n        return concat\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concat = 0\\n        left = 0\\n        right = len(nums) - 1\\n\\n        while left <= right:\\n            a = str(nums[left])\\n            b = str(nums[right])\\n\\n            if left == right:\\n                concat += int(a)\\n            else:\\n                concat += int(a + b)\\n        \\n            left += 1\\n            right -= 1\\n        \\n        return concat\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941615,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int findTheArrayConcVal(List<int> nums) {\\n      var sumn = 0;\\n      var l = 0;\\n      var h = nums.length - 1;\\n      while (l <= h) {\\n          var s = \"\";\\n          if (l == h) {\\n            s = s + nums[l].toString();\\n          } else {\\n            s = s + nums[l].toString() + nums[h].toString();\\n          }        \\n          var number = int.parse(s);\\n          sumn += number;\\n          l += 1;\\n          h -= 1; \\n      }\\n\\n      return sumn;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int findTheArrayConcVal(List<int> nums) {\\n      var sumn = 0;\\n      var l = 0;\\n      var h = nums.length - 1;\\n      while (l <= h) {\\n          var s = \"\";\\n          if (l == h) {\\n            s = s + nums[l].toString();\\n          } else {\\n            s = s + nums[l].toString() + nums[h].toString();\\n          }        \\n          var number = int.parse(s);\\n          sumn += number;\\n          l += 1;\\n          h -= 1; \\n      }\\n\\n      return sumn;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936201,
                "title": "find-the-array-concatenation-value",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int n=nums.size();\\n        long long sum=0;\\n        \\n        int size=(n+1)/2;\\n        int newno[size];\\n        for(int i=0,j=n-1;i<size;i++,j--)\\n        { \\n            int temp=nums[j]; \\n            int count=0;\\n              while(temp>0)\\n              {\\n                   temp=temp/10;\\n                   count++; \\n              }\\n              if(i==j)\\n              {\\n                  newno[i]=nums[i];\\n                  break;\\n              }\\n              else\\n              newno[i]=(nums[i]*pow(10,count))+(nums[j]); \\n              \\n                 \\n        }\\n        for(int i=0;i<size;i++)\\n        {\\n            cout<<newno[i]<<endl;\\n             sum=sum+newno[i];\\n        }\\n        return sum;\\n        \\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int n=nums.size();\\n        long long sum=0;\\n        \\n        int size=(n+1)/2;\\n        int newno[size];\\n        for(int i=0,j=n-1;i<size;i++,j--)\\n        { \\n            int temp=nums[j]; \\n            int count=0;\\n              while(temp>0)\\n              {\\n                   temp=temp/10;\\n                   count++; \\n              }\\n              if(i==j)\\n              {\\n                  newno[i]=nums[i];\\n                  break;\\n              }\\n              else\\n              newno[i]=(nums[i]*pow(10,count))+(nums[j]); \\n              \\n                 \\n        }\\n        for(int i=0;i<size;i++)\\n        {\\n            cout<<newno[i]<<endl;\\n             sum=sum+newno[i];\\n        }\\n        return sum;\\n        \\n\\n\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3933082,
                "title": "easy-and-efficient-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\nprivate:\\n long concatenatedNumber(int a, int b){\\n     int placeValue =1;\\n     long concatenatedNumber=0;\\n     while(b!=0){\\n         concatenatedNumber +=placeValue*(b%10);\\n         placeValue*=10;\\n         b/=10;\\n     }\\n     while(a!=0){\\n         concatenatedNumber +=placeValue*(a%10);\\n         placeValue*=10;\\n         a/=10;\\n     }\\n     return concatenatedNumber;\\n}\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i=0;\\n        int j=nums.size()-1;\\n        long sum=0;\\n        while(i<=j){\\n            if (i==j){\\n                sum+=nums[i];\\n\\n            }\\n            else{\\n                sum+=concatenatedNumber(nums[i],nums[j]);\\n            }\\n            j--;\\n            i++;\\n        }\\n        return sum;\\n\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n\\nprivate:\\n long concatenatedNumber(int a, int b){\\n     int placeValue =1;\\n     long concatenatedNumber=0;\\n     while(b!=0){\\n         concatenatedNumber +=placeValue*(b%10);\\n         placeValue*=10;\\n         b/=10;\\n     }\\n     while(a!=0){\\n         concatenatedNumber +=placeValue*(a%10);\\n         placeValue*=10;\\n         a/=10;\\n     }\\n     return concatenatedNumber;\\n}\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        int i=0;\\n        int j=nums.size()-1;\\n        long sum=0;\\n        while(i<=j){\\n            if (i==j){\\n                sum+=nums[i];\\n\\n            }\\n            else{\\n                sum+=concatenatedNumber(nums[i],nums[j]);\\n            }\\n            j--;\\n            i++;\\n        }\\n        return sum;\\n\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930444,
                "title": "best-intuitive-solution-beats-75-of-the-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n        O(n/2)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n        O(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long c=0;\\n        int n=nums.size();\\n        for(int i=0;i<n/2;i++){\\n            c+=stoi(to_string(nums[i])+to_string(nums[n-i-1]));\\n        }\\n        if(n%2!=0){\\n            c+=nums[n/2];\\n        }\\n        return c;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long c=0;\\n        int n=nums.size();\\n        for(int i=0;i<n/2;i++){\\n            c+=stoi(to_string(nums[i])+to_string(nums[n-i-1]));\\n        }\\n        if(n%2!=0){\\n            c+=nums[n/2];\\n        }\\n        return c;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930025,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum  = 0;\\n        int i = 0, j =nums.length-1;\\n        while(i <= j){\\n            if(i == j){\\n                sum += nums[i];\\n            }\\n            else{\\n                 String s1 = String.valueOf(nums[i]);\\n                 String s2 = String.valueOf(nums[j]);\\n                 s1 = s1+s2;\\n                sum = sum + Integer.parseInt(s1);\\n            }\\n            i++; j--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum  = 0;\\n        int i = 0, j =nums.length-1;\\n        while(i <= j){\\n            if(i == j){\\n                sum += nums[i];\\n            }\\n            else{\\n                 String s1 = String.valueOf(nums[i]);\\n                 String s2 = String.valueOf(nums[j]);\\n                 s1 = s1+s2;\\n                sum = sum + Integer.parseInt(s1);\\n            }\\n            i++; j--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930024,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum  = 0;\\n        int i = 0, j =nums.length-1;\\n        while(i <= j){\\n            if(i == j){\\n                sum += nums[i];\\n            }\\n            else{\\n                 String s1 = String.valueOf(nums[i]);\\n                 String s2 = String.valueOf(nums[j]);\\n                 s1 = s1+s2;\\n                sum = sum + Integer.parseInt(s1);\\n            }\\n            i++; j--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum  = 0;\\n        int i = 0, j =nums.length-1;\\n        while(i <= j){\\n            if(i == j){\\n                sum += nums[i];\\n            }\\n            else{\\n                 String s1 = String.valueOf(nums[i]);\\n                 String s2 = String.valueOf(nums[j]);\\n                 s1 = s1+s2;\\n                sum = sum + Integer.parseInt(s1);\\n            }\\n            i++; j--;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927244,
                "title": "go-two-pointers-using-pow-and-log-instead-of-string-concatenation",
                "content": "After solving the problem via cancatenation, I found out about the solution via Pow and Log.\\n\\nThank you [@votrubac](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3174246/pow-and-log/) \\n\\n\\n# Code\\n```\\nfunc findTheArrayConcVal(nums []int) int64 {\\n    val := 0\\n    l := 0\\n    r := len(nums) - 1\\n\\n    for l < r {\\n      multiplier := math.Pow10(int(math.Log10(float64(nums[r]))) + 1)\\n      val += nums[l] * int(multiplier) + nums[r]\\n\\n      l++\\n      r--\\n    }\\n\\n    if l == r {\\n      result += nums[l]\\n    }\\n\\n    return int64(val)\\n}\\n\\n```",
                "solutionTags": [
                    "Go",
                    "Math",
                    "Two Pointers"
                ],
                "code": "```\\nfunc findTheArrayConcVal(nums []int) int64 {\\n    val := 0\\n    l := 0\\n    r := len(nums) - 1\\n\\n    for l < r {\\n      multiplier := math.Pow10(int(math.Log10(float64(nums[r]))) + 1)\\n      val += nums[l] * int(multiplier) + nums[r]\\n\\n      l++\\n      r--\\n    }\\n\\n    if l == r {\\n      result += nums[l]\\n    }\\n\\n    return int64(val)\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923677,
                "title": "easy-javascript-solution-with-line-by-line-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function (nums) {\\n\\n    // initialize function concatenation with len as parameter\\n    function concatenation(len) {\\n\\n        // initialize count to zero\\n        let count = 0;\\n\\n        // loop through o to len\\n        for (let i = 0; i < len; i++) {\\n\\n            // initialize first to every element of array nums\\n            let first = nums.at(i);\\n\\n            // initialize last to every last element of array nums\\n            let last = nums.at(-1 - i);\\n\\n            // initialize add to concate first and last\\n            let add = \"\" + first + last;\\n\\n            // convert add to number using unary operator (+) then add to count\\n            count += (+add);\\n\\n        }\\n\\n        // return count\\n        return count;\\n    }\\n\\n    // initialize length to round down the length array divide by 2\\n    let length = Math.floor(nums.length / 2);\\n\\n    // if length of nums equal to 1 then return first element of nums\\n    if (nums.length == 1) {\\n        return nums[0];\\n    }\\n\\n    // if length of nums divide by 2 then return concatenation function with argument length\\n    if (nums.length % 2 == 0) {\\n\\n        return concatenation(length);\\n    } else {\\n\\n        // else return concatenation function with argument length and center element of nums\\n        return concatenation(length) + nums[length];\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function (nums) {\\n\\n    // initialize function concatenation with len as parameter\\n    function concatenation(len) {\\n\\n        // initialize count to zero\\n        let count = 0;\\n\\n        // loop through o to len\\n        for (let i = 0; i < len; i++) {\\n\\n            // initialize first to every element of array nums\\n            let first = nums.at(i);\\n\\n            // initialize last to every last element of array nums\\n            let last = nums.at(-1 - i);\\n\\n            // initialize add to concate first and last\\n            let add = \"\" + first + last;\\n\\n            // convert add to number using unary operator (+) then add to count\\n            count += (+add);\\n\\n        }\\n\\n        // return count\\n        return count;\\n    }\\n\\n    // initialize length to round down the length array divide by 2\\n    let length = Math.floor(nums.length / 2);\\n\\n    // if length of nums equal to 1 then return first element of nums\\n    if (nums.length == 1) {\\n        return nums[0];\\n    }\\n\\n    // if length of nums divide by 2 then return concatenation function with argument length\\n    if (nums.length % 2 == 0) {\\n\\n        return concatenation(length);\\n    } else {\\n\\n        // else return concatenation function with argument length and center element of nums\\n        return concatenation(length) + nums[length];\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3921228,
                "title": "brute-force-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        n=len(nums)\\n        s=0\\n        #insert a \"0\" to make the array have even objects\\n        if n%2==1:\\n            nums.insert(n//2,0)\\n            n=n+1\\n        for i in range(0,n/2):\\n            #add them from both sides\\n            s=s+int(str(nums[i])+str(nums[-(i+1)]))\\n        return s\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        n=len(nums)\\n        s=0\\n        #insert a \"0\" to make the array have even objects\\n        if n%2==1:\\n            nums.insert(n//2,0)\\n            n=n+1\\n        for i in range(0,n/2):\\n            #add them from both sides\\n            s=s+int(str(nums[i])+str(nums[-(i+1)]))\\n        return s\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3914140,
                "title": "simple-python-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        sum = 0\\n        if len(nums) == 1:\\n            return nums[0]\\n        while len(nums) > 1:\\n            temp = int(str(nums[0])+str(nums[-1]))\\n            sum += temp\\n            nums = nums[1:-1]\\n        if len(nums) == 1:\\n            sum += nums[0]\\n        return sum\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        sum = 0\\n        if len(nums) == 1:\\n            return nums[0]\\n        while len(nums) > 1:\\n            temp = int(str(nums[0])+str(nums[-1]))\\n            sum += temp\\n            nums = nums[1:-1]\\n        if len(nums) == 1:\\n            sum += nums[0]\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3897714,
                "title": "100-efficient-code-with-best-simple-approach-beats-100-in-runtime-efficiency",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nlong long findTheArrayConcVal(int* nums, int n){\\n\\nint i = 0;\\nint j = n-1 ; \\n\\nlong long int ans = 0;\\n\\nwhile (i < j){\\n\\nint digits = 0 ;\\n\\nint a  = nums[j] ;\\n\\nwhile (a > 0) {\\n\\ndigits++; \\n\\na=(a/10) ;\\n\\n}\\n\\nans = ans + ((nums[i]) * pow(10,digits)) + nums[j] ;\\n\\ni++;\\n\\nj--;\\n\\n} \\n\\nif (i==j) {\\n    ans = ans + nums[i] ;\\n}\\n\\nreturn ans ;\\n\\n\\n}\\n\\n\\n```",
                "solutionTags": [
                    "C",
                    "Array",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nlong long findTheArrayConcVal(int* nums, int n){\\n\\nint i = 0;\\nint j = n-1 ; \\n\\nlong long int ans = 0;\\n\\nwhile (i < j){\\n\\nint digits = 0 ;\\n\\nint a  = nums[j] ;\\n\\nwhile (a > 0) {\\n\\ndigits++; \\n\\na=(a/10) ;\\n\\n}\\n\\nans = ans + ((nums[i]) * pow(10,digits)) + nums[j] ;\\n\\ni++;\\n\\nj--;\\n\\n} \\n\\nif (i==j) {\\n    ans = ans + nums[i] ;\\n}\\n\\nreturn ans ;\\n\\n\\n}\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3890346,
                "title": "python-simple-solution-beats-92",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concat=0\\n        while(nums):\\n            if len(nums)==1:\\n                concat+=nums.pop()\\n            else:\\n                concat += int(str(nums.pop(0))+ str(nums.pop()))\\n        return concat        \\n        \\n        \\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concat=0\\n        while(nums):\\n            if len(nums)==1:\\n                concat+=nums.pop()\\n            else:\\n                concat += int(str(nums.pop(0))+ str(nums.pop()))\\n        return concat        \\n        \\n        \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3885389,
                "title": "find-the-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concat=0\\n        while len(nums)!=0:\\n            if len(nums)>=2:\\n                concat+=int(str(nums.pop(0))+str(nums.pop(-1)))\\n            elif len(nums)==1:\\n                concat+=nums.pop(0)\\n        return concat\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        concat=0\\n        while len(nums)!=0:\\n            if len(nums)>=2:\\n                concat+=int(str(nums.pop(0))+str(nums.pop(-1)))\\n            elif len(nums)==1:\\n                concat+=nums.pop(0)\\n        return concat\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3884961,
                "title": "the-easiest-solution-using-using-two-pointerts",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        if (nums.size() == 1) {\\n            return nums[0];\\n        }\\n        \\n        vector<string> count;\\n        int i = 0;\\n        int j = nums.size() - 1;\\n        \\n        while (i <= j) {\\n            if (i == j) {\\n                count.push_back(to_string(nums[i]));\\n            } else {\\n                count.push_back(to_string(nums[i]) + to_string(nums[j]));\\n            }\\n            j--;\\n            i++;\\n        }\\n        \\n        long long sum = 0;\\n        for (int i = 0; i < count.size(); i++) {\\n            sum += stoll(count[i]);\\n        }\\n        \\n        return sum;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        if (nums.size() == 1) {\\n            return nums[0];\\n        }\\n        \\n        vector<string> count;\\n        int i = 0;\\n        int j = nums.size() - 1;\\n        \\n        while (i <= j) {\\n            if (i == j) {\\n                count.push_back(to_string(nums[i]));\\n            } else {\\n                count.push_back(to_string(nums[i]) + to_string(nums[j]));\\n            }\\n            j--;\\n            i++;\\n        }\\n        \\n        long long sum = 0;\\n        for (int i = 0; i < count.size(); i++) {\\n            sum += stoll(count[i]);\\n        }\\n        \\n        return sum;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3880203,
                "title": "easy-python-recursion-solution",
                "content": "# Easy python recursion Solution\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 41ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 13.72 MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums, conk=0):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        if not nums:\\n            return int(conk)\\n        if len(nums) > 1:\\n            conk = int(conk) + int(str(nums[0]) + str(nums[-1]))\\n        else:\\n            conk = int(conk) + int(str(nums[0]))\\n        del nums[0]\\n        if nums:\\n            del nums[-1]\\n        return self.findTheArrayConcVal(nums, conk)\\n```",
                "solutionTags": [
                    "Python",
                    "Recursion"
                ],
                "code": "```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums, conk=0):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \"\"\"\\n        if not nums:\\n            return int(conk)\\n        if len(nums) > 1:\\n            conk = int(conk) + int(str(nums[0]) + str(nums[-1]))\\n        else:\\n            conk = int(conk) + int(str(nums[0]))\\n        del nums[0]\\n        if nums:\\n            del nums[-1]\\n        return self.findTheArrayConcVal(nums, conk)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3867787,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nlong long getnum(string s)\\n{\\n    long long ans = 0;\\n    for(int i=0;i<s.size();i++)\\n    {\\n        ans = ans * 10 + (s[i] - \\'0\\');\\n    }\\n    return ans;\\n}\\nlong long findTheArrayConcVal(vector<int>& nums) {\\n    int i = 0,j = nums.size()-1;\\n    long long sum = 0;\\n    string s = \"\";\\n    while(i<=j)\\n    {\\n        if(i==j)\\n        {\\n            s = to_string(nums[i]);\\n        }\\n        else{\\n            s = to_string(nums[i]) + to_string(nums[j]);\\n        }\\n        \\n        sum += getnum(s); //can use stoi(s);\\n        i++;\\n        j--;\\n     }\\n     return sum;   \\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nlong long getnum(string s)\\n{\\n    long long ans = 0;\\n    for(int i=0;i<s.size();i++)\\n    {\\n        ans = ans * 10 + (s[i] - \\'0\\');\\n    }\\n    return ans;\\n}\\nlong long findTheArrayConcVal(vector<int>& nums) {\\n    int i = 0,j = nums.size()-1;\\n    long long sum = 0;\\n    string s = \"\";\\n    while(i<=j)\\n    {\\n        if(i==j)\\n        {\\n            s = to_string(nums[i]);\\n        }\\n        else{\\n            s = to_string(nums[i]) + to_string(nums[j]);\\n        }\\n        \\n        sum += getnum(s); //can use stoi(s);\\n        i++;\\n        j--;\\n     }\\n     return sum;   \\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3867059,
                "title": "javascript-easy-solution-beats-98",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n  let val = 0\\n  while(nums.length){\\n    if(nums.length === 1) val+= nums[0]\\n    else {\\n      let v = `${nums[0]}` + `${nums[nums.length-1]}` \\n      val+= +v\\n    }\\n    nums.splice(0,1)\\n    nums.splice(nums.length-1, 1)\\n  }\\n  return val  \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n  let val = 0\\n  while(nums.length){\\n    if(nums.length === 1) val+= nums[0]\\n    else {\\n      let v = `${nums[0]}` + `${nums[nums.length-1]}` \\n      val+= +v\\n    }\\n    nums.splice(0,1)\\n    nums.splice(nums.length-1, 1)\\n  }\\n  return val  \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3863202,
                "title": "two-pointer-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTake two pointer \\ni=0;\\nj=length-1;\\nNow Make a String and add both nums[i] and nums[j] to it.\\nTake a long concat variable that stores the answer and using Long.parseLong convert the string to long and add it concat varible.\\n\\nThen increment i and decrement j until i<=j.\\nif i==j\\nthen there is single element simply add to concat variable.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int i=0;\\n        int j=nums.length-1;\\n        long concat=0;\\n        while(i<=j)\\n        {\\n            if(i==j)\\n            {\\n                concat+=nums[i];\\n            }\\n            else{\\n            String x=nums[i]+\"\";\\n            x+=nums[j];\\n            concat+=Long.parseLong(x);\\n            }\\n            i++;\\n            j--;\\n        }\\n\\n        return concat;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int i=0;\\n        int j=nums.length-1;\\n        long concat=0;\\n        while(i<=j)\\n        {\\n            if(i==j)\\n            {\\n                concat+=nums[i];\\n            }\\n            else{\\n            String x=nums[i]+\"\";\\n            x+=nums[j];\\n            concat+=Long.parseLong(x);\\n            }\\n            i++;\\n            j--;\\n        }\\n\\n        return concat;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856928,
                "title": "perfect-short-clean",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nDont create a string, since building a string takes memory, instead use log10 with multiplication.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n\\n        long long result{};\\n\\n        int L = 0, R = nums.size() - 1;\\n\\n        while(L <= R){\\n\\n            result += nums[L] * pow(10, static_cast<int>(log10(nums[R])) + 1) * (L != R) + nums[R];\\n\\n            R--;    \\n            L++;\\n        }\\n\\n        return result;\\n    }\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n\\n        long long result{};\\n\\n        int L = 0, R = nums.size() - 1;\\n\\n        while(L <= R){\\n\\n            result += nums[L] * pow(10, static_cast<int>(log10(nums[R])) + 1) * (L != R) + nums[R];\\n\\n            R--;    \\n            L++;\\n        }\\n\\n        return result;\\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856777,
                "title": "find-the-array-concatenation-value",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum = 0;\\n        int i =0;\\n        int j = nums.length-1;\\n        while(i<j)\\n        {\\n            String str = new String();\\n            str=String.valueOf(nums[i])+String.valueOf(nums[j]);\\n            sum = sum+Integer.valueOf(str);\\n            i++;\\n            j--;\\n        }\\n        if(nums.length%2==1)\\n        {\\n            String s = String.valueOf(nums[i]);\\n            sum = sum+Integer.valueOf(s);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum = 0;\\n        int i =0;\\n        int j = nums.length-1;\\n        while(i<j)\\n        {\\n            String str = new String();\\n            str=String.valueOf(nums[i])+String.valueOf(nums[j]);\\n            sum = sum+Integer.valueOf(str);\\n            i++;\\n            j--;\\n        }\\n        if(nums.length%2==1)\\n        {\\n            String s = String.valueOf(nums[i]);\\n            sum = sum+Integer.valueOf(s);\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3856121,
                "title": "rust-no-strings",
                "content": "Add the digits to the total from right to left multiplying by 10 more each time\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn find_the_array_conc_val(nums: Vec<i32>) -> i64 {\\n        let mut slice: &[i32] = &nums;\\n        let mut sum = 0;\\n        while slice.len() >= 2 {\\n            let (left, nslice) = slice.split_first().unwrap();\\n            let (right, nslice) = nslice.split_last().unwrap();\\n            slice = nslice;\\n            sum += concat(*left, *right);\\n        }\\n        if let Some(&val) = slice.first() {\\n            sum += val as i64;\\n        }\\n        sum\\n    }\\n}\\n\\nfn concat(mut left: i32, mut right: i32) -> i64 {\\n    let mut total = 0;\\n    let mut mul = 1;\\n    while right > 0 {\\n        total += right as i64 % 10 * mul;\\n        right /= 10;\\n        mul *= 10;\\n    }\\n    while left > 0 {\\n        total += left as i64 % 10 * mul;\\n        left /= 10;\\n        mul *= 10;\\n    }\\n    total\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn find_the_array_conc_val(nums: Vec<i32>) -> i64 {\\n        let mut slice: &[i32] = &nums;\\n        let mut sum = 0;\\n        while slice.len() >= 2 {\\n            let (left, nslice) = slice.split_first().unwrap();\\n            let (right, nslice) = nslice.split_last().unwrap();\\n            slice = nslice;\\n            sum += concat(*left, *right);\\n        }\\n        if let Some(&val) = slice.first() {\\n            sum += val as i64;\\n        }\\n        sum\\n    }\\n}\\n\\nfn concat(mut left: i32, mut right: i32) -> i64 {\\n    let mut total = 0;\\n    let mut mul = 1;\\n    while right > 0 {\\n        total += right as i64 % 10 * mul;\\n        right /= 10;\\n        mul *= 10;\\n    }\\n    while left > 0 {\\n        total += left as i64 % 10 * mul;\\n        left /= 10;\\n        mul *= 10;\\n    }\\n    total\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3854987,
                "title": "c-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public long FindTheArrayConcVal(int[] nums) {\\n        int start = 0;\\n        int end = nums.Length - 1;\\n        long res = 0;\\n        while (start < end) {\\n            int a = nums[start];\\n            int b = nums[end];\\n            int result = int.Parse(a.ToString() + b.ToString());\\n            res += result;\\n            start++;\\n            end--;\\n        }\\n        if ((nums.Length & 1) != 0) {\\n            res += nums[start];\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public long FindTheArrayConcVal(int[] nums) {\\n        int start = 0;\\n        int end = nums.Length - 1;\\n        long res = 0;\\n        while (start < end) {\\n            int a = nums[start];\\n            int b = nums[end];\\n            int result = int.Parse(a.ToString() + b.ToString());\\n            res += result;\\n            start++;\\n            end--;\\n        }\\n        if ((nums.Length & 1) != 0) {\\n            res += nums[start];\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3839763,
                "title": "pytohn3-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = 0 \\n        r = len(nums)-1\\n        concatenation = 0\\n        while l < r:\\n            concatenation += int(str(nums[l]) + str(nums[r]))\\n            l+=1\\n            r-=1\\n        if l==r:\\n            concatenation+= nums[l]\\n        return concatenation\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        l = 0 \\n        r = len(nums)-1\\n        concatenation = 0\\n        while l < r:\\n            concatenation += int(str(nums[l]) + str(nums[r]))\\n            l+=1\\n            r-=1\\n        if l==r:\\n            concatenation+= nums[l]\\n        return concatenation\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3835278,
                "title": "python-solution-beats-98-94-91-9",
                "content": "# Intuition\\nWe taking last and first numbers of array by .pop() method until array is non empty.\\n\\n# Approach\\nInitially we create stack - for summing concated values. Then we create a cycle while len(array) > 1. In the end we check if array is odd we just summing last element in array by index and returning stack.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        stack = 0\\n        while len(nums) > 1:\\n            stack += int(str(nums.pop(0)) + str(nums.pop(-1)))\\n        if len(nums) == 1:\\n            stack += nums[0]\\n        return stack\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        stack = 0\\n        while len(nums) > 1:\\n            stack += int(str(nums.pop(0)) + str(nums.pop(-1)))\\n        if len(nums) == 1:\\n            stack += nums[0]\\n        return stack\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3832722,
                "title": "easy-sol-using-java-and-c",
                "content": "# Code\\n```java []\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long result,concat=0; int i=0,j=nums.length-1;\\n        while(i<j){\\n            result=nums[i] * (long)Math.pow(10, (int)Math.log10(nums[j]) + 1) + nums[j];\\n            concat=concat+result;\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            concat=concat+nums[j];\\n        }\\n        return concat;\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(vector<int>& nums) {\\n        long long result,concat=0; int i=0,j=nums.size()-1;\\n        while(i<j){\\n            string num=to_string(nums[i])+to_string(nums[j]);\\n            result=stoll(num);\\n            concat=concat+result;\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            concat=concat+nums[j];\\n        }\\n        return concat;\\n    }\\n};\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long result,concat=0; int i=0,j=nums.length-1;\\n        while(i<j){\\n            result=nums[i] * (long)Math.pow(10, (int)Math.log10(nums[j]) + 1) + nums[j];\\n            concat=concat+result;\\n            i++;\\n            j--;\\n        }\\n        if(i==j){\\n            concat=concat+nums[j];\\n        }\\n        return concat;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3827786,
                "title": "easy-and-simple-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n= nums.length;\\n        \\n        int i=0,j=n-1;\\n        long ans=0;\\n        if(n%2==0){\\n            i=(n/2)-1;\\n            j=n/2;\\n            \\n        }\\n        else{\\n            ans+=nums[n/2];\\n            i=(n/2)-1;\\n            j=(n/2)+1;\\n\\n        }\\n        while(i>=0 && j<n){\\n            String sum = \"\"+nums[i]+\"\"+nums[j];\\n            i--;\\n            j++;\\n            ans+=Long.parseLong(sum);\\n        }\\n        return ans;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n= nums.length;\\n        \\n        int i=0,j=n-1;\\n        long ans=0;\\n        if(n%2==0){\\n            i=(n/2)-1;\\n            j=n/2;\\n            \\n        }\\n        else{\\n            ans+=nums[n/2];\\n            i=(n/2)-1;\\n            j=(n/2)+1;\\n\\n        }\\n        while(i>=0 && j<n){\\n            String sum = \"\"+nums[i]+\"\"+nums[j];\\n            i--;\\n            j++;\\n            ans+=Long.parseLong(sum);\\n        }\\n        return ans;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3808955,
                "title": "simple-solution",
                "content": "\\n# Code\\n```\\nconst findTheArrayConcVal = (nums) => {\\n    let result = 0;\\n\\n    while ( nums.length > 0 ) {\\n        let concat = String(nums[0]) + String(nums[nums.length - 1]);\\n\\n        if ( nums.length === 1 ) {\\n            concat = nums[0];\\n        }\\n\\n        result += Number(concat);\\n\\n        nums.splice(0, 1);\\n        nums.splice(nums.length - 1, 1);\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst findTheArrayConcVal = (nums) => {\\n    let result = 0;\\n\\n    while ( nums.length > 0 ) {\\n        let concat = String(nums[0]) + String(nums[nums.length - 1]);\\n\\n        if ( nums.length === 1 ) {\\n            concat = nums[0];\\n        }\\n\\n        result += Number(concat);\\n\\n        nums.splice(0, 1);\\n        nums.splice(nums.length - 1, 1);\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3806877,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        sum = 0\\n        while (nums):\\n            if len(nums) == 1:\\n                sum += nums.pop()\\n            else:\\n                sum += int(str(nums.pop(0)) + str(nums.pop()))\\n        return sum\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        sum = 0\\n        while (nums):\\n            if len(nums) == 1:\\n                sum += nums.pop()\\n            else:\\n                sum += int(str(nums.pop(0)) + str(nums.pop()))\\n        return sum\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3793873,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public long FindTheArrayConcVal(int[] array) {\\n        string p = string.Empty;\\n            string k = string.Empty;\\n            string newNo;\\n            int head = 0;\\n            int last = array.Length-1;\\n            long sum = 0;   \\n          for( head = 0; head <= last; head++)\\n            {\\n                if (head == last)\\n                {\\n                    return sum + array[head];\\n                }\\n                p = array[head].ToString();\\n                k = array[last].ToString();\\n                newNo = p + k;\\n                sum += Int32.Parse(newNo);\\n              \\n                last--;\\n\\n            }\\n            return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public long FindTheArrayConcVal(int[] array) {\\n        string p = string.Empty;\\n            string k = string.Empty;\\n            string newNo;\\n            int head = 0;\\n            int last = array.Length-1;\\n            long sum = 0;   \\n          for( head = 0; head <= last; head++)\\n            {\\n                if (head == last)\\n                {\\n                    return sum + array[head];\\n                }\\n                p = array[head].ToString();\\n                k = array[last].ToString();\\n                newNo = p + k;\\n                sum += Int32.Parse(newNo);\\n              \\n                last--;\\n\\n            }\\n            return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3784628,
                "title": "esay-97-of-users-with-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n let start =0;\\n let end = nums.length-1;\\n let result=0;\\n while (start<=end) {\\n      result+=Number(start=== end ? nums[start] : `${nums[start]}`+`${nums[end]}`)\\n     start++;\\n     end--;\\n };\\n return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n let start =0;\\n let end = nums.length-1;\\n let result=0;\\n while (start<=end) {\\n      result+=Number(start=== end ? nums[start] : `${nums[start]}`+`${nums[end]}`)\\n     start++;\\n     end--;\\n };\\n return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3775733,
                "title": "java-2-pointers-no-string-parsing-no-logarithms",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nApproach is pretty straightforward: to find the multiplier for the 1st element, divide 2nd element by 10 until it reaches 0. \\n\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n\\n        int p1 = 0;\\n        int p2 = nums.length-1;\\n        long sum = 0;\\n\\n        while (p1<p2) {\\n            sum += nums[p1]*upto(nums[p2]) + nums[p2];\\n            p1++;\\n            p2--;\\n        }\\n\\n        if (p1==p2) sum+=nums[p1];\\n\\n        return sum;\\n        \\n    }\\n\\n    private int upto(int num) {\\n        int res = 1;\\n        while (num>0) {\\n            res *= 10;\\n            num /= 10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n\\n        int p1 = 0;\\n        int p2 = nums.length-1;\\n        long sum = 0;\\n\\n        while (p1<p2) {\\n            sum += nums[p1]*upto(nums[p2]) + nums[p2];\\n            p1++;\\n            p2--;\\n        }\\n\\n        if (p1==p2) sum+=nums[p1];\\n\\n        return sum;\\n        \\n    }\\n\\n    private int upto(int num) {\\n        int res = 1;\\n        while (num>0) {\\n            res *= 10;\\n            num /= 10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3770669,
                "title": "beat-100-c-two-pointers",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(std::vector<int>& nums) {\\n        std::vector<long long> ans;\\n        int l = 0, r = nums.size() - 1;\\n        while (l < r) {\\n            std::string str = std::to_string(nums[l]) + std::to_string(nums[r]);\\n            long long res = std::stoll(str);\\n            ans.push_back(res);\\n            l++, r--;\\n        }\\n        if(nums.size() % 2 == 1)\\n            ans.push_back(nums[l]);\\n        long long sum = 0;\\n        for (auto& I : ans) {\\n            sum += I;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long findTheArrayConcVal(std::vector<int>& nums) {\\n        std::vector<long long> ans;\\n        int l = 0, r = nums.size() - 1;\\n        while (l < r) {\\n            std::string str = std::to_string(nums[l]) + std::to_string(nums[r]);\\n            long long res = std::stoll(str);\\n            ans.push_back(res);\\n            l++, r--;\\n        }\\n        if(nums.size() % 2 == 1)\\n            ans.push_back(nums[l]);\\n        long long sum = 0;\\n        for (auto& I : ans) {\\n            sum += I;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3758826,
                "title": "java-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        int de=nums.length-1;\\n        for(int i=0;i<de;i++,de--){\\n            String str=nums[i]+\"\"+nums[de];\\n            sum+=Long.parseLong(str);\\n        }\\n        return nums.length%2!=0?sum+nums[de]:sum;\\n\\n\\n    }\\n}\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/bd47f7e8-fde0-41bf-9365-0f94e56328b9_1689242967.7085743.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        int de=nums.length-1;\\n        for(int i=0;i<de;i++,de--){\\n            String str=nums[i]+\"\"+nums[de];\\n            sum+=Long.parseLong(str);\\n        }\\n        return nums.length%2!=0?sum+nums[de]:sum;\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3747358,
                "title": "100-beating-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long cnt = 0;\\n        int i = 0;\\n        int j = nums.length - 1;\\n\\n        while(i < j){\\n            int num1 = nums[i];\\n            int num2 = nums[j];\\n            int inc = 10;\\n            while(num2 >= inc) inc *= 10;\\n            cnt += num1*inc + num2;\\n            i++;\\n            j--;\\n        }\\n\\n        if(i == j) cnt += nums[i];\\n        return cnt;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long cnt = 0;\\n        int i = 0;\\n        int j = nums.length - 1;\\n\\n        while(i < j){\\n            int num1 = nums[i];\\n            int num2 = nums[j];\\n            int inc = 10;\\n            while(num2 >= inc) inc *= 10;\\n            cnt += num1*inc + num2;\\n            i++;\\n            j--;\\n        }\\n\\n        if(i == j) cnt += nums[i];\\n        return cnt;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3742980,
                "title": "simple-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    let left = 0;\\n    let right = nums.length-1;\\n    while(left <= right){\\n        sum += parseInt(left === right ? nums[left] : nums[left]?.toString() + nums[right]?.toString())\\n        left++;\\n        right--;\\n    }\\n    return sum\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    let left = 0;\\n    let right = nums.length-1;\\n    while(left <= right){\\n        sum += parseInt(left === right ? nums[left] : nums[left]?.toString() + nums[right]?.toString())\\n        left++;\\n        right--;\\n    }\\n    return sum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3735356,
                "title": "easy-solution-using-java",
                "content": "\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        int start=0,end=nums.length-1;\\n        while(start<=end)\\n        {\\n           if(start!=end)\\n           {\\n           sum+=Long.parseLong(String.valueOf(nums[start])+String.valueOf(nums[end]));\\n           }\\n           else\\n           {\\n               sum+=nums[start];\\n           } \\n           start++;\\n           end--;\\n           \\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        int start=0,end=nums.length-1;\\n        while(start<=end)\\n        {\\n           if(start!=end)\\n           {\\n           sum+=Long.parseLong(String.valueOf(nums[start])+String.valueOf(nums[end]));\\n           }\\n           else\\n           {\\n               sum+=nums[start];\\n           } \\n           start++;\\n           end--;\\n           \\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3735355,
                "title": "easy-solution-using-java",
                "content": "\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        int start=0,end=nums.length-1;\\n        while(start<=end)\\n        {\\n           if(start!=end)\\n           {\\n           sum+=Long.parseLong(String.valueOf(nums[start])+String.valueOf(nums[end]));\\n           }\\n           else\\n           {\\n               sum+=nums[start];\\n           } \\n           start++;\\n           end--;\\n           \\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long sum=0;\\n        int start=0,end=nums.length-1;\\n        while(start<=end)\\n        {\\n           if(start!=end)\\n           {\\n           sum+=Long.parseLong(String.valueOf(nums[start])+String.valueOf(nums[end]));\\n           }\\n           else\\n           {\\n               sum+=nums[start];\\n           } \\n           start++;\\n           end--;\\n           \\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3732466,
                "title": "straightforward-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int start=0;\\n        int end=nums.length-1;\\n        long concatValue = 0;\\n\\n        while(start<end)\\n        {\\n            String s = (\"\"+nums[start])+nums[end];\\n            concatValue += Integer.valueOf(s);\\n            start++;\\n            end--;\\n        }\\n        if(nums.length%2!=0)\\n        {\\n            concatValue += nums[start];\\n        }\\n        return concatValue;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int start=0;\\n        int end=nums.length-1;\\n        long concatValue = 0;\\n\\n        while(start<end)\\n        {\\n            String s = (\"\"+nums[start])+nums[end];\\n            concatValue += Integer.valueOf(s);\\n            start++;\\n            end--;\\n        }\\n        if(nums.length%2!=0)\\n        {\\n            concatValue += nums[start];\\n        }\\n        return concatValue;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3717736,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func findTheArrayConcVal(_ nums: [Int]) -> Int {\\n        var strs = [String]()\\n        var value = 0\\n        for num in nums{\\n            strs.append(String(num))\\n        }\\n        while(strs.count > 1){\\n            value += Int(strs.first! + strs.last!)!\\n            strs.removeFirst()\\n            strs.removeLast()\\n        }\\n        if strs.count == 1{\\n            value += Int(strs[0])!\\n        }\\n        return value\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func findTheArrayConcVal(_ nums: [Int]) -> Int {\\n        var strs = [String]()\\n        var value = 0\\n        for num in nums{\\n            strs.append(String(num))\\n        }\\n        while(strs.count > 1){\\n            value += Int(strs.first! + strs.last!)!\\n            strs.removeFirst()\\n            strs.removeLast()\\n        }\\n        if strs.count == 1{\\n            value += Int(strs[0])!\\n        }\\n        return value\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3709379,
                "title": "easy-solution-in-java-0-ms-100-beats-fully-explained",
                "content": "# Approach\\n1. Initialize a variable `res` as 0 to store the concatenation value.\\n2. Set two pointers `i` and `j` to the first and last indices of the array respectively.\\n3. Enter a loop while `i` is less than `j`:\\n   - Retrieve the values at indices `i` and `j` in variables `num1` and `num2` respectively.\\n   - Initialize a variable `inc` as 10 to represent the increment factor for concatenation.\\n   - Find the appropriate increment factor by repeatedly multiplying `inc` by 10 until it is greater than or equal to `num2`.\\n   - Calculate the concatenation value by multiplying `num1` with `inc` and adding `num2`. Add this value to `res`.\\n   - Increment `i` and decrement `j` to move the pointers inward.\\n4. If the array has an odd length and `i` becomes equal to `j`, there is a single element remaining.\\n   - Add this remaining element to `res`.\\n5. Return the final concatenation value `res`.\\n\\nThis approach iteratively picks the first and last elements of the array, concatenates them, adds the result to `res`, and removes those elements from the array. It continues this process until the array is empty. Finally, it returns the accumulated concatenation value.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res = 0;\\n        int i = 0;\\n        int j = nums.length - 1;\\n\\n        while(i < j){\\n            int num1 = nums[i];\\n            int num2 = nums[j];\\n            int inc = 10;\\n            while(num2 >= inc) inc *= 10;\\n            res += num1*inc + num2;\\n            i++;\\n            j--;\\n        }\\n\\n        if(i == j) res += nums[i];\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C#",
                    "Array",
                    "Two Pointers",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        long res = 0;\\n        int i = 0;\\n        int j = nums.length - 1;\\n\\n        while(i < j){\\n            int num1 = nums[i];\\n            int num2 = nums[j];\\n            int inc = 10;\\n            while(num2 >= inc) inc *= 10;\\n            res += num1*inc + num2;\\n            i++;\\n            j--;\\n        }\\n\\n        if(i == j) res += nums[i];\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3707528,
                "title": "python-deque",
                "content": "# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        from collections import deque\\n        arr = deque(nums)\\n        answer = 0\\n        while arr:\\n            l = arr.popleft()\\n            if arr:\\n                r = arr.pop()\\n                total = int(str(l)+str(r))\\n                answer+=total\\n            else:\\n                answer+=l\\n        return answer\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        from collections import deque\\n        arr = deque(nums)\\n        answer = 0\\n        while arr:\\n            l = arr.popleft()\\n            if arr:\\n                r = arr.pop()\\n                total = int(str(l)+str(r))\\n                answer+=total\\n            else:\\n                answer+=l\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3706836,
                "title": "most-simple-and-easy-javascript-solution",
                "content": "# Intuition\\nGet first and last element and add!\\n\\n# Approach\\nGet First element using shift() as it would return the first element as well as remove it from the array same with pop() for last element. add them while nums.length.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    while(nums.length) {\\n        sum += parseInt(nums.shift()?.toString() + nums.pop()?.toString());\\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    let sum = 0;\\n    while(nums.length) {\\n        sum += parseInt(nums.shift()?.toString() + nums.pop()?.toString());\\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3705310,
                "title": "find-the-array-concatenation-value",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        sum1=0\\n        while(len(nums)!=0):\\n            n=len(nums)-1\\n            i=0\\n            if(len(nums)>=2):\\n                str1=str(nums[i])+str(nums[n])\\n                sum1+=int(str1)\\n                nums.pop(n)\\n                nums.pop(0)\\n            else:\\n                sum1+=int(str(nums[i]))\\n                nums.pop(0)\\n        return sum1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def findTheArrayConcVal(self, nums):\\n        sum1=0\\n        while(len(nums)!=0):\\n            n=len(nums)-1\\n            i=0\\n            if(len(nums)>=2):\\n                str1=str(nums[i])+str(nums[n])\\n                sum1+=int(str1)\\n                nums.pop(n)\\n                nums.pop(0)\\n            else:\\n                sum1+=int(str(nums[i]))\\n                nums.pop(0)\\n        return sum1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3687716,
                "title": "easy-and-simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        x=0\\n        y=len(nums)-1\\n        sum=0\\n        cat=\"\"\\n        if len(nums)%2==1:\\n            sum=nums[len(nums)//2]\\n   \\n\\n\\n        while x <y:\\n\\n            cat= str(nums[x])+str(nums[y])\\n            sum+=int(cat)\\n            x+=1\\n            y-=1\\n\\n        return sum\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        x=0\\n        y=len(nums)-1\\n        sum=0\\n        cat=\"\"\\n        if len(nums)%2==1:\\n            sum=nums[len(nums)//2]\\n   \\n\\n\\n        while x <y:\\n\\n            cat= str(nums[x])+str(nums[y])\\n            sum+=int(cat)\\n            x+=1\\n            y-=1\\n\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3685702,
                "title": "a-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nso we have an array of numbers\\nwe begin by going through the array and concatenating the first and last elem of the array\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nwe have a running counter by which we add this concatenated value to.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    \\n    let left =0;\\n    let right = nums.length-1;\\n    let sum = 0;\\n\\n    while (left <= right){\\n        sum += (left !== right)\\n                    ? parseInt(nums[left].toString() + nums[right].toString())\\n                    : nums[left];\\n        left ++;\\n        right --;\\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findTheArrayConcVal = function(nums) {\\n    \\n    let left =0;\\n    let right = nums.length-1;\\n    let sum = 0;\\n\\n    while (left <= right){\\n        sum += (left !== right)\\n                    ? parseInt(nums[left].toString() + nums[right].toString())\\n                    : nums[left];\\n        left ++;\\n        right --;\\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1798390,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1862996,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1797525,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 2075461,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1881472,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1848341,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1841976,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1813366,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1805321,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1803245,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1798390,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1862996,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1797525,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 2075461,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1881472,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1848341,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1841976,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1813366,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1805321,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            },
            {
                "id": 1803245,
                "content": [
                    {
                        "username": "S_Basu",
                        "content": "> **I used String concatenation for the concatenation operation, then Typecasted (converted) it back to long using `Long.parseLong().`**\\n\\n*Any suggestions for improvisation or better ideas will be of great help.*\\nThanks \\u2764\\uFE0F"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes) could you please try by taking Long (`long`) instead of Integer (`int`). \n\nPlease Note :\n- The concatenated value after all the additions gets big enough to exceed the upper limit of integer which is `Integer.MAX_VALUE`\n- the return type of the function is `long`"
                    },
                    {
                        "username": "S_Basu",
                        "content": "[@Justfor5minutes](/Justfor5minutes)  yes for sure"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "[@Justfor5minutes](/Justfor5minutes)Can you please help !!\\n"
                    },
                    {
                        "username": "Justfor5minutes",
                        "content": "I am having an issue with the solution the problem is that the it is not working for the 32nd test case where adding the value already send the output out of the bound of the integer data type and the value is becoming negative ... it is a test case where the length of the array is 1000.."
                    },
                    {
                        "username": "S_Basu",
                        "content": "####  [Link to my Solution](https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3176830/comprehensive-java-solution-string-concat-accepted/)"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can Any one explain ?\\n[72,8,96,78,39,92,69,55,9,44,26,76,40,77,16,69,40,64,12,48,66,7,59,10,33,72,97,60,79,68,25,63,82,88,60,37,60,44,14,62]\\n\\nI got output :100324\\nwhich is correct according to sum of array\\nbut expected:103006 \\n\\n"
                    },
                    {
                        "username": "misterbombastic",
                        "content": "mine resulted in the exact same - did you find the issue? It seems as though it\\'s to do with there being multiple of the same number in the list, though it *shouldn\\'t* be an issue as I was removing nums[0] and nums[-1]."
                    },
                    {
                        "username": "Muskan003_NITA",
                        "content": "we can think , to first convert two digits from start and end to a string and then by using stoi function get back number and easily iterate loop by low++,high--;\n\nedge case when low =high ;"
                    },
                    {
                        "username": "underdogsrijan",
                        "content": "Traverse and append first and last element to a string variable and concatenate them by converting into int/long long. "
                    },
                    {
                        "username": "Madhav_Rav_Tripathi",
                        "content": "class Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        int n = nums.length;\\n        int mid = nums.length/2;\\n        int sum=0;\\n        for(int i=0,j=n-1;i<j;i++,j--){\\n            String con=\"\";\\n            if(i==j){\\n                con = String.valueOf(nums[i]);\\n            } else{\\n                con = String.valueOf(nums[i]);\\n                con += String.valueOf(nums[j]);\\n            }\\n            System.out.println(con);\\n            sum+=Integer.parseInt(con);\\n        }\\n        if(n%2!=0){\\n            sum=sum+nums[mid];\\n        }\\n        return sum;    \\n    }\\n}\\nthis is the code but it fail for some test case...can you explain"
                    },
                    {
                        "username": "ermek1714",
                        "content": "you return integer value"
                    },
                    {
                        "username": "Razzzzzzzzz",
                        "content": "Easy python  Solutions\\n```def findTheArrayConcVal(self, nums: List[int]) -> int:\\n        n = len(nums)//2\\n        l1 = nums[0:n]\\n        l2 = nums[n:][::-1]\\n        if len(nums)%2==0:\\n            li = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            sum1 = sum([int(i) for i in li ])\\n            return sum1\\n        else:\\n            t = nums.pop(n)\\n            l1 = nums[0:n]\\n            l2 = nums[n:][::-1]\\n            li2 = list(map(lambda x ,y :str(x)+str(y),l1,l2))\\n            li2.append(t)\\n            sum2 = sum([int(i) for i in li2])\\n            return sum2  ```"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "Iterate until the array becomes empty. In each iteration, concatenate the first element to the last element and add their concatenation value to the answer.\\nclass Solution {\\n    public long findTheArrayConcVal(int[] nums) {\\n        \\n        int i = 0;\\n        int j = nums.length-1;\\n        String str = \"\";\\n        long ans = 0;\\n        while(i<j){\\n          str = String.valueOf(nums[i]) + String.valueOf(nums[j]);\\n          i++;\\n          j--;\\n          ans += Long.valueOf(str);\\n        }\\n        if(nums.length%2!=0) ans += nums[i];\\n        return ans;\\n    }\\n}"
                    },
                    {
                        "username": "Aryan_009",
                        "content": "my case 1 output is coming case 2 output is not coming "
                    },
                    {
                        "username": "ayushluthra62",
                        "content": "C++ Easy and simple solution O(1) space. \\nMy solution Link :-https://leetcode.com/problems/find-the-array-concatenation-value/solutions/3201065/c-easy-and-simple-solution-o-1-space/\\ndon\\'t forgot to upvote it. "
                    },
                    {
                        "username": "rahulsangwan",
                        "content": "idk why? but when i\\'m running my solution onto other IDE\\'s the answer is correct. In Leetcode answer is totally diffrent."
                    }
                ]
            }
        ]
    }
]