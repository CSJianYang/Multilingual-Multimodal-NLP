[
    {
        "title": "Detect Capital",
        "question_content": "We define the usage of capitals in a word to be right when one of the following cases holds:\n\n\tAll letters in this word are capitals, like \"USA\".\n\tAll letters in this word are not capitals, like \"leetcode\".\n\tOnly the first letter in this word is capital, like \"Google\".\n\nGiven a string word, return true if the usage of capitals in it is right.\n&nbsp;\nExample 1:\nInput: word = \"USA\"\nOutput: true\nExample 2:\nInput: word = \"FlaG\"\nOutput: false\n&nbsp;\nConstraints:\n\n\t1 <= word.length <= 100\n\tword consists of lowercase and uppercase English letters.",
        "solutions": [
            {
                "id": 99249,
                "title": "python-has-useful-methods",
                "content": "    def detectCapitalUse(self, word):\\n        return word.isupper() or word.islower() or word.istitle()",
                "solutionTags": [],
                "code": "    def detectCapitalUse(self, word):\\n        return word.isupper() or word.islower() or word.istitle()",
                "codeTag": "Python3"
            },
            {
                "id": 2982608,
                "title": "easiest-c-solution-o-n-0ms",
                "content": "**PLEASE UPVOTE IF YOU FIND MY APPROACH HELPFUL, MEANS A LOT \\uD83D\\uDE0A**\\n\\n**Intuition:** use a counter and isupper function to check number of capital.\\n\\n**Approach:**\\n* Initialize count=0\\n* if count equals 0 means all are small chars\\n* if count equals size of word then all are capital\\n* if count equals 1 then check is it the first char which is capital\\n* if none of the conditions are true then return false\\n\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n            return true;\\n        \\n        for(int i=0; i<word.size(); i++)\\n            if(isupper(word[i]))\\n                count++;\\n        \\n        if(count==1 && isupper(word[0]))\\n            return true;\\n        if(count==0 || count==word.size())\\n            return true;\\n        else\\n            return false;\\n    }\\n};\\n```\\n**Time Complexity** => `O(N)`\\n**Space Complexity** => `O(1)`\\n\\n![image](https://assets.leetcode.com/users/images/a3183549-bacc-4b16-80bc-ee7d1a712527_1672630358.5954974.png)\\n\\n![image](https://assets.leetcode.com/users/images/3854ee2d-649c-49f3-9978-03a770436e43_1672629742.3828926.png)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n            return true;\\n        \\n        for(int i=0; i<word.size(); i++)\\n            if(isupper(word[i]))\\n                count++;\\n        \\n        if(count==1 && isupper(word[0]))\\n            return true;\\n        if(count==0 || count==word.size())\\n            return true;\\n        else\\n            return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99248,
                "title": "3-lines",
                "content": "Java\n```\npublic class Solution {\n    public boolean detectCapitalUse(String word) {\n        int cnt = 0;\n        for(char c: word.toCharArray()) if('Z' - c >= 0) cnt++;\n        return ((cnt==0 || cnt==word.length()) || (cnt==1 && 'Z' - word.charAt(0)>=0));\n    }\n}\n```\n\nPython \n\n```\nclass Solution(object):\n    def detectCapitalUse(self, word):\n        c = 0\n        for i in word:\n            if i == i.upper():\n                c += 1\n        return c == len(word) or (c == 1 and word[0] == word[0].upper()) or c == 0 \n```",
                "solutionTags": [],
                "code": "```\npublic class Solution {\n    public boolean detectCapitalUse(String word) {\n        int cnt = 0;\n        for(char c: word.toCharArray()) if('Z' - c >= 0) cnt++;\n        return ((cnt==0 || cnt==word.length()) || (cnt==1 && 'Z' - word.charAt(0)>=0));\n    }\n}\n```\n```\nclass Solution(object):\n    def detectCapitalUse(self, word):\n        c = 0\n        for i in word:\n            if i == i.upper():\n                c += 1\n        return c == len(word) or (c == 1 and word[0] == word[0].upper()) or c == 0 \n```",
                "codeTag": "Java"
            },
            {
                "id": 166192,
                "title": "c-concise-solution",
                "content": "```\\nbool detectCapitalUse(string word) {\\n    for(int i = 1; i < word.size(); i++){\\n        if(isupper(word[1]) != isupper(word[i]) || \\n           islower(word[0]) && isupper(word[i])) return false;\\n    }        \\n    return true;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nbool detectCapitalUse(string word) {\\n    for(int i = 1; i < word.size(); i++){\\n        if(isupper(word[1]) != isupper(word[i]) || \\n           islower(word[0]) && isupper(word[i])) return false;\\n    }        \\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 99298,
                "title": "java-1-liner",
                "content": "Regex again.\\n\\n```Java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+|[a-z]+|[A-Z][a-z]+\");\\n}\\n```",
                "solutionTags": [],
                "code": "```Java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+|[a-z]+|[A-Z][a-z]+\");\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2982521,
                "title": "simple-java-solution-100-faster",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() == 0 || word.length() == 1) return true;\\n        \\n        if(Character.isUpperCase(word.charAt(0))){\\n            boolean isFirstCharacter = Character.isUpperCase(word.charAt(1));\\n            for(int i = 2; i < word.length(); i++){\\n                boolean currentCharState = Character.isUpperCase(word.charAt(i));\\n                if(currentCharState != isFirstCharacter) return false;\\n            }\\n        }else{\\n            for(int i = 1; i < word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))) return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() == 0 || word.length() == 1) return true;\\n        \\n        if(Character.isUpperCase(word.charAt(0))){\\n            boolean isFirstCharacter = Character.isUpperCase(word.charAt(1));\\n            for(int i = 2; i < word.length(); i++){\\n                boolean currentCharState = Character.isUpperCase(word.charAt(i));\\n                if(currentCharState != isFirstCharacter) return false;\\n            }\\n        }else{\\n            for(int i = 1; i < word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))) return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99279,
                "title": "java-short-solution-using-built-in-string-methods",
                "content": "The string can be correctly capitalized if either: it's shorter than 2 characters, or if it's all lower case, or if it's all upper case, or if from position 1 onward there are only lowercase letters.\\n```\\npublic boolean detectCapitalUse(String word) {\\n        if (word.length() < 2) return true;\\n        if (word.toUpperCase().equals(word)) return true;\\n        if (word.substring(1).toLowerCase().equals(word.substring(1))) return true;\\n        return false;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean detectCapitalUse(String word) {\\n        if (word.length() < 2) return true;\\n        if (word.toUpperCase().equals(word)) return true;\\n        if (word.substring(1).toLowerCase().equals(word.substring(1))) return true;\\n        return false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 99300,
                "title": "1-line-javascript-solution-no-regex",
                "content": "```\\nvar detectCapitalUse = function(word) {\\n    return word === word.toUpperCase() || word === word[0] + word.substr(1).toLowerCase();\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar detectCapitalUse = function(word) {\\n    return word === word.toUpperCase() || word === word[0] + word.substr(1).toLowerCase();\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2982041,
                "title": "python3-4-one-liners-contest-style-3-beginner-friendly-interview-style",
                "content": "**Solution 1:** Simply use built-in methods, from [Stefan Pochmann](https://leetcode.com/StefanPochmann/)\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w.isupper() or w.islower() or w.istitle()\\n```\\n```isupper()```: Check if all the characters in the text are in upper case\\n```islower()```: Check if all the characters in the text are in lower case\\n```istitle()```: Check if each word start with an upper case letter\\n\\n**Solution 2:** Don\\'t use ```istitle()```, from [Gene](https://leetcode.com/GeneGo/)\\nNote that, if len(w)==1, it is True because the third case \"Only the first letter in this word is capital, like \"Google\".\" can only apply to w if len(w)>1\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return len(w)==1 or w[1:].islower() or w.isupper()\\n```\\n\\n**Solution 3:** Convert ```w``` to the correct format and check if it changed, from [Lam Nguyen](https://leetcode.com/nguyenla/)\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w[1:].lower() == w[1:] or w.lower() == w or w.upper() == w\\n```\\n\\n**Solution 4:** Same idea but use ```capitalize()```, from [llx](https://leetcode.com/llx9/)\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w in [w.upper(), w.lower(), w.capitalize()]\\n```\\n\\nPlease leave any other fun solutions in the comments.\\n**Happy New Year!**\\n\\nThe above ones are really nice for contests, and the below ones should be better in an interview.\\n\\n**Solution 5:** Count upper/lower case letters\\n - Count the number of uppercase (```up```) and lowercase (```low```) letters in the word.\\n - If the number of uppercase letters is the same as the length of the word, return True. (This means All letters in this word are capitals.)\\n - If the number of the lowercase is the same as the length of the word, return True. (This means All letters in this word are not capitals.)\\n - If the number of uppercase is 1, and the first letter is uppercase, return True. (This means Only the first letter in this word is capital.)\\n\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        up = low = 0\\n        for c in w:\\n            if c.isupper():\\n                up += 1\\n            else:\\n                low += 1\\n        return up==len(w) or low==len(w) or (up==1 and w[0].isupper())\\n```\\n\\n**Solution 6:** No APIs\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        up = low = 0\\n        uppercase = set(\\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\')\\n        # uppercase = set(ascii_uppercase)\\n        for c in w:\\n            if c in uppercase:\\n                up += 1\\n            else:\\n            \\tlow += 1\\n        return up==len(w) or low==len(w) or (up==1 and w[0] in uppercase)\\n```\\n\\n**Solution 7:** Do a little bit blance:\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        upLow = 0\\n        for c in w:\\n            upLow += 1 if c.islower() else -1\\n        return abs(upLow)==len(w) or (upLow==len(w)-2 and w[0].isupper())\\n```\\n\\n**Upvote** if you like this post.\\n\\n**Connect with me on [LinkedIn](https://www.linkedin.com/in/meida-chen-938a265b/)** if you\\'d like to discuss other related topics\\n\\nJust in case if you are working on **ML/DL 3D data-related projects** or are interested in the topic, please check out our project **[HERE](https://github.com/meidachen/STPLS3D)**",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w.isupper() or w.islower() or w.istitle()\\n```\n```isupper()```\n```islower()```\n```istitle()```\n```istitle()```\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return len(w)==1 or w[1:].islower() or w.isupper()\\n```\n```w```\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w[1:].lower() == w[1:] or w.lower() == w or w.upper() == w\\n```\n```capitalize()```\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w in [w.upper(), w.lower(), w.capitalize()]\\n```\n```up```\n```low```\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        up = low = 0\\n        for c in w:\\n            if c.isupper():\\n                up += 1\\n            else:\\n                low += 1\\n        return up==len(w) or low==len(w) or (up==1 and w[0].isupper())\\n```\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        up = low = 0\\n        uppercase = set(\\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\')\\n        # uppercase = set(ascii_uppercase)\\n        for c in w:\\n            if c in uppercase:\\n                up += 1\\n            else:\\n            \\tlow += 1\\n        return up==len(w) or low==len(w) or (up==1 and w[0] in uppercase)\\n```\n```python\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        upLow = 0\\n        for c in w:\\n            upLow += 1 if c.islower() else -1\\n        return abs(upLow)==len(w) or (upLow==len(w)-2 and w[0].isupper())\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99274,
                "title": "simple-java-solution-o-n-time-o-1-space",
                "content": "```\\n    public boolean detectCapitalUse(String word) {\\n        return word.equals(word.toUpperCase()) || \\n               word.equals(word.toLowerCase()) ||\\n               Character.isUpperCase(word.charAt(0)) && \\n               word.substring(1).equals(word.substring(1).toLowerCase());\\n    }\\n```\\n\\nA slightly more verbose, but more efficient solution:\\n\\n```\\n    public boolean detectCapitalUse(String word) {\\n        int numUpper = 0;\\n        for (int i=0;i<word.length();i++)\\n            if (Character.isUpperCase(word.charAt(i))) numUpper++;\\n        if (numUpper == 1) return Character.isUpperCase(word.charAt(0));\\n        return numUpper == 0 || numUpper == word.length();\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\n    public boolean detectCapitalUse(String word) {\\n        return word.equals(word.toUpperCase()) || \\n               word.equals(word.toLowerCase()) ||\\n               Character.isUpperCase(word.charAt(0)) && \\n               word.substring(1).equals(word.substring(1).toLowerCase());\\n    }\\n```\n```\\n    public boolean detectCapitalUse(String word) {\\n        int numUpper = 0;\\n        for (int i=0;i<word.length();i++)\\n            if (Character.isUpperCase(word.charAt(i))) numUpper++;\\n        if (numUpper == 1) return Character.isUpperCase(word.charAt(0));\\n        return numUpper == 0 || numUpper == word.length();\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 766364,
                "title": "python-simple-o-n-solution-explained",
                "content": "We can solve this problem in oneline, if we use python functionality: functions `isupper()` `islower()` and `istitle()`. I think the first two ones are pretty classical and a lot of people aware of them (if not, it is very easy to write this function, just check if symbol is between `a` and `z` for `islower()` and from `A` to `Z` for `isupper()`). Howerer the third one is a bit cheating, so I decided not to use it.\\n\\nSo, we can have three cases. Let us evaluate number of capital letters first:\\n1. If number of capital letters is equal to `0`, then we return `True`.\\n2. If number of capital letters is equal to `n` - number of all letters, we also return `True`.\\n3. If number of capital letters is equal to `1` and first letter is capital, we return `True`.\\n4. If none of `3` conditions above fulfilled, we return `False`.\\n\\n**Complexity**: time complexity is `O(n)`, because we traverse our string once. Space complexity is `O(1)`, because we have only couple of additional constants.\\n\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word):\\n        Num_cap, n = 0, len(word)\\n        for letter in word: \\n            Num_cap += letter.isupper()\\n        if Num_cap == 0 or Num_cap == n or Num_cap == 1 and word[0].isupper():\\n            return True\\n        return False\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word):\\n        Num_cap, n = 0, len(word)\\n        for letter in word: \\n            Num_cap += letter.isupper()\\n        if Num_cap == 0 or Num_cap == n or Num_cap == 1 and word[0].isupper():\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714640,
                "title": "java-c-python-one-stop-solution-easy-explained",
                "content": "```\\nWhat the problem is saying we have to check whether the string has CAPITAL [uppercase] letters or not, but with some conditions\\n```\\n>There are 3 rules to determine wether it\\'s a valid condition or not :-\\n1. Everything can be **upper-case \"LEETCODE\"**\\n2. **1st character is capital** then everything is **lowercase \"Leetcode\"**\\n3. Everyting is **lowercase \"leetcode\"**\\n\\nAnything other then this is invalid like :-\\n* **LeetcodE**\\n* **leetCode**\\n\\n*So, you got the idea anything that\\'s not following 3 rules is invalid.*\\n\\n**Let\\'s talk about how can we solve it:**\\n\\n![image](https://assets.leetcode.com/users/images/c46214dd-29af-4afa-8599-f434d24e8326_1642995201.6401563.png)\\n\\n>Let\\'s look at the first 2 character, if we have first 2 character there are 4 ways of writing it :- UU, UL, LU, LL\\n* So, if we have UU like :- AB____ then remaing one has to be **uppercase**\\n* If we have UL like :- Ab_____ then remaining one has to be **lowercase**\\n* If we have LU like :- aB then straight away we know that it\\'s **invalid**\\n* If we have LL like :- ab_____ then remaining one has to be **lowercase**\\n\\nIn last **3 cases Ab & aB & ab** we can check from **2nd letter onwards everything should be lower**. So, **aB is invalid** because the 2nd letter is capital\\nBut if **1st and 2nd both are capital** we will check from **3rd letter everyting should be upper** in **AB**. So this is valid\\n\\nSo, in our solution we create **2 cases** in **1st case everything has to be UpperCase from 3rd letter** and in **2nd case** everything has to be **LowerCase from 2nd letter**. If any of these condition **invalidate** we **return false** otherwise we **return true**\\n\\n*I hope you get the idea,* **Now let\\'s code it up :**\\n\\n*code each line explained :* `Similar for C++, Java, Python` **{Only Syntax Difference}** approach same\\n\\n```\\n{\\n        if(word.length() < 2) return true;// either if word is empty or word is just 1 character long, then it\\'s always valid\\n        // isupper OR islower is built in function in C++, but all the language have but available in different syntax format\\n        // but if you don\\'t want to use you can write word[0] >= \\'A\\' ASCII value && word[1] <= \\'Z\\'\\n        if(isupper(word[0]) && isupper(word[1])){ // creating our 1st condition, from 3rd letter onward everything should be capital\\n            for(int i = 2; i < word.length(); i++){\\n                if(islower(word[i])) return false;\\n            }\\n        }\\n        else{ // creating our 2nd condition, from 2nd letter onward everything should be small\\n            for(int i = 1; i < word.length(); i++){\\n                if(isupper(word[i])) return false;\\n            }\\n        }\\n        return true;\\n```\\n\\n**Java**\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() < 2) return true;\\n        if(Character.isUpperCase(word.charAt(0)) && Character.isUpperCase(word.charAt(1))){\\n            for(int i = 2; i < word.length(); i++){\\n                if(Character.isLowerCase(word.charAt(i))) return false;\\n            }\\n        }\\n        else{\\n            for(int i = 1; i < word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))) return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if(word.length() < 2) return true;\\n        if(isupper(word[0]) && isupper(word[1])){\\n            for(int i = 2; i < word.length(); i++){\\n                if(islower(word[i])) return false;\\n            }\\n        }\\n        else{\\n            for(int i = 1; i < word.length(); i++){\\n                if(isupper(word[i])) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```\\n**Python**\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word) < 2: return True\\n        if word[0].isupper() and word[1].isupper():\\n            for i in range(2, len(word)):\\n                if word[i].islower(): return False\\n        else:\\n            for i in range(1, len(word)):\\n                if word[i].isupper(): return False\\n        return True;\\n```\\nANALYSIS :-\\n* **Time Complexity :-** BigO(N) where N is no. of characters in word\\n\\n* **Space Complexity :-** BigO(1) as we are not using any extra space",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nWhat the problem is saying we have to check whether the string has CAPITAL [uppercase] letters or not, but with some conditions\\n```\n```\\n{\\n        if(word.length() < 2) return true;// either if word is empty or word is just 1 character long, then it\\'s always valid\\n        // isupper OR islower is built in function in C++, but all the language have but available in different syntax format\\n        // but if you don\\'t want to use you can write word[0] >= \\'A\\' ASCII value && word[1] <= \\'Z\\'\\n        if(isupper(word[0]) && isupper(word[1])){ // creating our 1st condition, from 3rd letter onward everything should be capital\\n            for(int i = 2; i < word.length(); i++){\\n                if(islower(word[i])) return false;\\n            }\\n        }\\n        else{ // creating our 2nd condition, from 2nd letter onward everything should be small\\n            for(int i = 1; i < word.length(); i++){\\n                if(isupper(word[i])) return false;\\n            }\\n        }\\n        return true;\\n```\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() < 2) return true;\\n        if(Character.isUpperCase(word.charAt(0)) && Character.isUpperCase(word.charAt(1))){\\n            for(int i = 2; i < word.length(); i++){\\n                if(Character.isLowerCase(word.charAt(i))) return false;\\n            }\\n        }\\n        else{\\n            for(int i = 1; i < word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))) return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if(word.length() < 2) return true;\\n        if(isupper(word[0]) && isupper(word[1])){\\n            for(int i = 2; i < word.length(); i++){\\n                if(islower(word[i])) return false;\\n            }\\n        }\\n        else{\\n            for(int i = 1; i < word.length(); i++){\\n                if(isupper(word[i])) return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n\\n```\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word) < 2: return True\\n        if word[0].isupper() and word[1].isupper():\\n            for i in range(2, len(word)):\\n                if word[i].islower(): return False\\n        else:\\n            for i in range(1, len(word)):\\n                if word[i].isupper(): return False\\n        return True;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714310,
                "title": "python3-show-must-go-on-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nTo solve this problem, we count the number of capital letters in the word and then check all three conditions:\\n- Number of capital letters is equal to the length of the word\\n- Number of capital letters is zero\\n- There is just one capital letter and it\\'s the first letter\\n\\nTime: **O(n)** - for the scan\\nSpace: **O(1)**\\n\\nRuntime: 26 ms, faster than **91.26%** of Python3 online submissions for Detect Capital.\\nMemory Usage: 14.3 MB, less than **13.27%** of Python3 online submissions for Detect Capital.\\n\\n```\\ndef detectCapitalUse(self, word: str) -> bool:\\n\\tcnt = sum(c.isupper() for c in word)\\n\\n\\treturn cnt == len(word) \\\\\\n\\t\\tor cnt == 0 \\\\\\n\\t\\tor cnt == 1 and word[0].isupper()\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef detectCapitalUse(self, word: str) -> bool:\\n\\tcnt = sum(c.isupper() for c in word)\\n\\n\\treturn cnt == len(word) \\\\\\n\\t\\tor cnt == 0 \\\\\\n\\t\\tor cnt == 1 and word[0].isupper()\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1714409,
                "title": "c-simple-intuitive-solution-one-pass",
                "content": "**APPROACH :**\\n\\n* If the first letter is in lowercase & the remaining letters are uppercase, we must return false.\\n* And if the case of anyletter from 2nd letter doesn\\'t match with any other letters in the word we must return false.\\n\\n**Time Complexity :** O(n) - We traverse the array only once.\\n\\n**Space Complexity :** O(1)\\n\\n**Code :**\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        for(int i=1;i<word.size();i++){\\n            if( (isupper(word[1]) != isupper(word[i]))  ||  (islower(word[0]) && isupper(word[i])) )\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```\\n\\n**Like my solution? Please upvote!**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        for(int i=1;i<word.size();i++){\\n            if( (isupper(word[1]) != isupper(word[i]))  ||  (islower(word[0]) && isupper(word[i])) )\\n                return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714481,
                "title": "java-simplest-one-pass-easiest-solution-intuitive",
                "content": "There are three conditions we need to check : \\n* All letters uppercase - `SPIDERMAN`\\n* All letters lowercase - `spiderman`\\n* Only first letter uppercase - `Spiderman`\\n\\n**\\u2714\\uFE0F Logic**: \\n\\nCount the `number of capital letter` and check if \\n1. all letters are uppercase / or lowercase -> `count equals word-length` or `count == 0`\\n2. only first letter is uppercase -> `count is 1 and 0th character uppercase`\\n\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int capitals = 0;\\n        for(char ch : word.toCharArray()) {\\n            if(Character.isUpperCase(ch))\\n                capitals++;\\n        }\\n        // case 1 and case 2\\n        if(capitals == word.length() || capitals == 0) return true;\\n        return capitals == 1 && Character.isUpperCase(word.charAt(0));  // case 3\\n    }\\n}\\n```\\n\\n**\\u2714\\uFE0F Complexity Analysis**:\\n* TC : `O(n)`\\n* SC : `O(1)`",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int capitals = 0;\\n        for(char ch : word.toCharArray()) {\\n            if(Character.isUpperCase(ch))\\n                capitals++;\\n        }\\n        // case 1 and case 2\\n        if(capitals == word.length() || capitals == 0) return true;\\n        return capitals == 1 && Character.isUpperCase(word.charAt(0));  // case 3\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982708,
                "title": "simple-java-code-100-fast",
                "content": "**PLEASE UPVOTE IF YOU FIND MY Explanation USEFUL, MEANS A LOT \\uD83D\\uDE0A**\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() < 2) return true;\\n        return solver(word);\\n    }\\n    private boolean solver(String word){\\n        if(Character.isUpperCase(word.charAt(0))){\\n            if(Character.isUpperCase(word.charAt(1))){\\n                for(int i=2; i<word.length(); i++){\\n                    if(!Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n            }else{\\n                for(int i=2; i<word.length(); i++){\\n                    if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n            }\\n        }else{\\n            for(int i=1; i<word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\\n# Code Explanation\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        //If length is < 1 in that case condition always true\\n        if(word.length() < 2) return true;\\n\\n        //Returning the solver function\\n        return solver(word);\\n\\n        // Let\\'s go see what\\'s inside solver function\\n    }\\n\\n    private boolean solver(String word){\\n\\n        //First of all we need to separate word in 2 categories\\n        //One is word starting with Capital letter\\n        //Second is word starting with small letter\\n        \\n//This if block contain all word starting with upper case letter\\n        if(Character.isUpperCase(word.charAt(0))){\\n        \\n        //Now we need to further differentiate the word into 2 categories\\n        //1 is if second letter is also  upper case\\n        //2 is if second letter is also  upper case\\n\\n            //This is block contain word having 1st and 2nd letter capital\\n            if(Character.isUpperCase(word.charAt(1))){\\n                \\n                //Now , go through all remaining letter and check if\\n                //there is any lower case letter\\n                //If it is there return false\\n                for(int i=2; i<word.length(); i++){\\n                    if(!Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n\\n            //This else block contain word having 1st upper case but 2nd lower case \\n            }else{\\n\\n                //Now , go through all remaining letter and check if\\n                //there is any Upper case letter\\n                //If it is there return false\\n                for(int i=2; i<word.length(); i++){\\n                    if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n            }\\n\\n//This else block contain all word starting with lower case letter\\n        }else{\\n\\n            //Now , go through all remaining letter and check if\\n            //there is any upper case letter\\n            //If it is there return false\\n            for(int i=1; i<word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                }\\n            }\\n        }\\n\\n        //If we not found any faults in word so return true at end\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() < 2) return true;\\n        return solver(word);\\n    }\\n    private boolean solver(String word){\\n        if(Character.isUpperCase(word.charAt(0))){\\n            if(Character.isUpperCase(word.charAt(1))){\\n                for(int i=2; i<word.length(); i++){\\n                    if(!Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n            }else{\\n                for(int i=2; i<word.length(); i++){\\n                    if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n            }\\n        }else{\\n            for(int i=1; i<word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        //If length is < 1 in that case condition always true\\n        if(word.length() < 2) return true;\\n\\n        //Returning the solver function\\n        return solver(word);\\n\\n        // Let\\'s go see what\\'s inside solver function\\n    }\\n\\n    private boolean solver(String word){\\n\\n        //First of all we need to separate word in 2 categories\\n        //One is word starting with Capital letter\\n        //Second is word starting with small letter\\n        \\n//This if block contain all word starting with upper case letter\\n        if(Character.isUpperCase(word.charAt(0))){\\n        \\n        //Now we need to further differentiate the word into 2 categories\\n        //1 is if second letter is also  upper case\\n        //2 is if second letter is also  upper case\\n\\n            //This is block contain word having 1st and 2nd letter capital\\n            if(Character.isUpperCase(word.charAt(1))){\\n                \\n                //Now , go through all remaining letter and check if\\n                //there is any lower case letter\\n                //If it is there return false\\n                for(int i=2; i<word.length(); i++){\\n                    if(!Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n\\n            //This else block contain word having 1st upper case but 2nd lower case \\n            }else{\\n\\n                //Now , go through all remaining letter and check if\\n                //there is any Upper case letter\\n                //If it is there return false\\n                for(int i=2; i<word.length(); i++){\\n                    if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                    }\\n                }\\n            }\\n\\n//This else block contain all word starting with lower case letter\\n        }else{\\n\\n            //Now , go through all remaining letter and check if\\n            //there is any upper case letter\\n            //If it is there return false\\n            for(int i=1; i<word.length(); i++){\\n                if(Character.isUpperCase(word.charAt(i))){\\n                        return false;\\n                }\\n            }\\n        }\\n\\n        //If we not found any faults in word so return true at end\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 733188,
                "title": "c-100-00-brute-force-easy-to-understand",
                "content": "***Runtime: 0 ms, faster than 100.00% of C++ online submissions for Detect Capital.\\nMemory Usage: 6 MB, less than 96.69% of C++ online submissions for Detect Capital.***\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool firstCaps = isupper(word[0]), allCaps = true, allSmall = true;\\n        for(int i=1;i<word.size();i++){\\n            if(isupper(word[i])){\\n                allSmall = false;\\n            }else{\\n                allCaps = false;\\n            }\\n        }\\n        return ( firstCaps && allCaps) || allSmall ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool firstCaps = isupper(word[0]), allCaps = true, allSmall = true;\\n        for(int i=1;i<word.size();i++){\\n            if(isupper(word[i])){\\n                allSmall = false;\\n            }else{\\n                allCaps = false;\\n            }\\n        }\\n        return ( firstCaps && allCaps) || allSmall ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714464,
                "title": "python-2-one-liner-solutions-shortest-clean-and-easy-to-understand",
                "content": "**PLEASE UPVOTE if you like** \\uD83D\\uDE01 **If you have any question, feel free to ask.** \\n\\n* The two functions `string.istitle()` and `string.title()` are very useful and can simplify the code in many cases.\\n\\n```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        return len(word) <= 1 or max(word) <= \\'Z\\' or min(word[1:]) >= \\'a\\'  # note that \\'z\\' > \\'a\\' > \\'Z\\' > \\'A\\'\\n```\\n\\n```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        return word.isupper() or word.islower() or word.istitle()\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        return len(word) <= 1 or max(word) <= \\'Z\\' or min(word[1:]) >= \\'a\\'  # note that \\'z\\' > \\'a\\' > \\'Z\\' > \\'A\\'\\n```\n```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        return word.isupper() or word.islower() or word.istitle()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99267,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n\\t\\tint size=word.size(),count=0;\\n\\t\\tif(size<=1)\\n\\t\\t\\treturn true;\\n\\t\\tfor (int i = 1; i < size; i++){\\n\\t\\t\\tif(word[i]>='a'&&word[i]<='z')\\n\\t\\t\\t\\tcount+=1;\\n\\t\\t\\telse\\n\\t\\t\\t\\tcount+=2;\\n\\t\\t}\\n\\t\\tif(count==size-1)\\n\\t\\t\\treturn true;\\n\\t\\telse if(count==2*(size-1))\\n\\t\\t\\treturn word[0]>='A'&&word[0]<='Z';\\n\\t\\telse \\n\\t\\t\\treturn false;\\n    }\\n};\\n```\\nFrom 1~size-1,if we meet with a-z,we add 1,else we add 2.Then we can get the result that if the second to last letter is all lowercase or all upcase.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n\\t\\tint size=word.size(),count=0;\\n\\t\\tif(size<=1)\\n\\t\\t\\treturn true;\\n\\t\\tfor (int i = 1; i < size; i++){\\n\\t\\t\\tif(word[i]>='a'&&word[i]<='z')\\n\\t\\t\\t\\tcount+=1;\\n\\t\\t\\telse\\n\\t\\t\\t\\tcount+=2;\\n\\t\\t}\\n\\t\\tif(count==size-1)\\n\\t\\t\\treturn true;\\n\\t\\telse if(count==2*(size-1))\\n\\t\\t\\treturn word[0]>='A'&&word[0]<='Z';\\n\\t\\telse \\n\\t\\t\\treturn false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985330,
                "title": "easy-understanding-c-solution-with-explanations",
                "content": "## Explanation:\\n\\n### Solution 01\\n\\n- Here we\\u2019re taking 2 integer variables & 1 bool variable:\\n    - ***************************lowercase:*************************** keep track of the count of lowercase characters\\n    - ***************************uppercase:*************************** keep track of the count of uppercase characters\\n    - ***************************temp:*************************** true if starting letter is uppercase, else false\\n- If ***word*** has only one letter then return true.\\n- We\\u2019ll run a for loop and check 2 conditions:\\n    - if the current letter is uppercase check `temp == 0 || lowercase > 0` \\u2192 return false\\n    - else the letter is lowercase & if we have more than 1 uppercase exist then \\u2192 return false\\n- If this 2 doesn\\u2019t satisfy the condition then \\u2192 return true.\\n- **Time complexity:** O(n).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size(), lowercase = 0, uppercase = 0;\\n        \\n        if(n == 1) return true;\\n        \\n\\t\\t\\t\\tbool temp = 0;\\n        if(word[0]>= \\'A\\' && word[0]<= \\'Z\\') temp = 1;\\n\\n        for(int i=1; i<n; i++){\\n            if(word[i]>= \\'A\\' && word[i]<= \\'Z\\'){\\n                uppercase++;\\n                if(temp == 0 || lowercase > 0) return 0;\\n            } \\n            else{\\n                if(uppercase>0) return 0;\\n                lowercase++;\\n            } \\n        }\\n        return 1;\\n    }\\n};\\n```\\n\\n---\\n\\n> **Please upvote this solution**",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "String Matching",
                    "Counting"
                ],
                "code": "```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size(), lowercase = 0, uppercase = 0;\\n        \\n        if(n == 1) return true;\\n        \\n\\t\\t\\t\\tbool temp = 0;\\n        if(word[0]>= \\'A\\' && word[0]<= \\'Z\\') temp = 1;\\n\\n        for(int i=1; i<n; i++){\\n            if(word[i]>= \\'A\\' && word[i]<= \\'Z\\'){\\n                uppercase++;\\n                if(temp == 0 || lowercase > 0) return 0;\\n            } \\n            else{\\n                if(uppercase>0) return 0;\\n                lowercase++;\\n            } \\n        }\\n        return 1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983043,
                "title": "c-begineer-friendly-easy-understanding-string-video-solution",
                "content": "# Intuition && Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**C++ Clear Explaination ,Please support if you find it usefull. Can give me feedback in comment for improvement.,will be very thankfull.**\\nhttps://www.youtube.com/watch?v=9RFpuTphF1M/\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\nO(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n bool detectCapitalUse(string word) {\\n        // count the capital letters present in words.\\n        int count =0;\\n        for(int i=0;i<word.size();i++){\\n            if(isupper(word[i])){\\n                count++;\\n            }\\n        }\\n        if((count == word.size()) || (count == 0) || (count == 1 && isupper(word[0])))\\n       {   return true; }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n bool detectCapitalUse(string word) {\\n        // count the capital letters present in words.\\n        int count =0;\\n        for(int i=0;i<word.size();i++){\\n            if(isupper(word[i])){\\n                count++;\\n            }\\n        }\\n        if((count == word.size()) || (count == 0) || (count == 1 && isupper(word[0])))\\n       {   return true; }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982204,
                "title": "java-solution-better-than-100-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe question asks us to detect the correct useage of capitals with a some constraints given. All we need to do is the verify whether the constraints hold true.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- The Constraints for correct useage of capitals are:\\n    1. All letters in this word are capitals.\\n    2. All letters in this word are not capitals.\\n    3. Only the first letter in this word is capital\\n- Have a `count` variable to check the number of capital letters in `word`.\\n- Have a boolean variable `firstLetter` to check whether the first letter is capital. If yes then it takes the value as true.\\n- Now Iterate over the string and check the number of capital letters in `word`.\\n- We return true if -\\n    1. `count == word.length()` or\\n    2. `count == 0` or\\n    3. `count == 1 && firstLetter == true`\\n- In all other cases we return false. \\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int count = 0;\\n        boolean firstLetter = false;\\n\\n        //checking whether the first letter is capital\\n        if(word.charAt(0) >= \\'A\\' && word.charAt(0) <= \\'Z\\') firstLetter = true;\\n\\n        //iterating over word and counting capital letters\\n        for(int i=0; i<word.length(); i++){\\n            if(word.charAt(i) >= \\'A\\' && word.charAt(i) <= \\'Z\\') count++;\\n        }\\n\\n        //checking constraints\\n        if((count == 1 && firstLetter) || count == word.length() || count == 0) return true;\\n        else return false; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int count = 0;\\n        boolean firstLetter = false;\\n\\n        //checking whether the first letter is capital\\n        if(word.charAt(0) >= \\'A\\' && word.charAt(0) <= \\'Z\\') firstLetter = true;\\n\\n        //iterating over word and counting capital letters\\n        for(int i=0; i<word.length(); i++){\\n            if(word.charAt(i) >= \\'A\\' && word.charAt(i) <= \\'Z\\') count++;\\n        }\\n\\n        //checking constraints\\n        if((count == 1 && firstLetter) || count == word.length() || count == 0) return true;\\n        else return false; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 767479,
                "title": "c-expressive-modern-c-o-n-2-lines-no-loops-just-english-less-bugs",
                "content": "Dont reinvent the wheel, just use the STL:\\n- [std::all_of](https://en.cppreference.com/w/cpp/algorithm/all_any_none_of)\\n- [std::isupper](https://en.cppreference.com/w/cpp/string/byte/isupper)\\n- [std::islower](https://en.cppreference.com/w/cpp/string/byte/islower)\\n\\nWill be even simpler with C++20 :-)\\n```\\t\\nbool detectCapitalUse(string word) {\\n\\treturn all_of(word.begin(), word.end(), ::islower)\\n\\t\\tor all_of(word.begin(), word.end(), ::isupper)\\n\\t\\tor (isupper(word.front()) and all_of(next(word.begin()), word.end(), ::islower));\\n}\\n```\\n****\\n**Wait a minute! The title says 2 Lines, I see 3!**\\n\\nAs a  smart friend made me remark, both \"Leetcode\" and \"leetcode\" are valid, so the capitalisation of the first letter does not matter. IE \"all letters lower case OR (first letter upper case AND all letters minus first letter lower case)\" is equivalent to:\\n \"all letters minus first letter lower case\". \\n```\\nbool detectCapitalUse(string word) {\\n\\treturn all_of(word.begin(), word.end(), ::isupper)\\n\\t\\tor all_of(next(word.begin()), word.end(), ::islower);\\n}\\n```\\n****\\n**Why `::islower` and not just `islower` or  `std::islower`  here?**\\n`islower` is defined in multiple headers and also is the C library, I dont control what header leetcode is including.\\nby using `::islower` we actually call the C function defined in global namespace.\\n****\\n**Daim! I want to use the C++ std::islower function and not the C ::islower function!**\\n\\n1 - Using a lambda: \\n\\n```\\nall_of(word.begin(), word.end(), [](char c){return std::isupper(c);})\\n```\\nThat\\'s valid but it is a bit defeating the purpose of the expressiveness / simplicity of the code.\\n\\n2 - Forcing the compiler to use the C++ function we want (`std::islower):\\n\\nAs mentioned in the previous paragraph there are multiple definitions of islower :\\n![image](https://assets.leetcode.com/users/images/6b359918-fab1-4b4f-b68a-be120c023dc5_1596306428.634877.png)\\n[link on cppreference](https://en.cppreference.com/mwiki/index.php?title=Special%3ASearch&search=islower)\\n\\nI had this disussion with my friend and we were a bit annoyed to use the old C function instead of relying purely on the C++ library. Unfortunately, the compiler does not see the `std::islower` defined in `<cctype>` he sees the one that is overloaded in `<clocale>` that takes an extra *locale* argument (and then the code does not compile).\\n\\nHow to force the compiler to force using an overload? Using a cast is a way (there is maybe a better way to do that).\\n\\nin `<cctype>`, `islower` is defined like this: `int islower( int ch );`\\nso we can do: \\n```\\nall_of(word.begin(), word.end(), static_cast<int(*)(int)>(islower))\\n```\\nHum that\\'s a bit ugly and cryptic.\\n\\nWe can still define an alias for that type: `using cctype = int(*)(int);`\\nTherefore the code becomes:\\n```\\nusing cctype = int(*)(int); // function pointer type used to force use \\n\\t\\t\\t                // the overload defined in cctype header\\nbool detectCapitalUse(const string& word) const {\\n    return all_of(word.cbegin(), word.cend(), cctype(isupper))\\n\\t\\t\\tor all_of(next(word.cbegin()), word.cend(), cctype(islower));\\n}\\n```\\n**EDIT: What if the interviewer is not happy with this?**\\n\\nWell, you can argue that this is the code he would like to see in production, but maybe the interviwer wants to see you can program the whole logic,\\ntherefore you can write your own `is_upper`, `is_lower` and `all_of` :\\n\\n```\\nnamespace mystd{\\n\\t\\n\\t// see https://stackoverflow.com/questions/2169261/c-isupper-function\\n\\t// for more serious implementation\\n\\t\\n\\tbool is_lower(char c){\\n\\t\\treturn (c >= \\'a\\' && c <= \\'z\\');\\n\\t}\\n\\n\\tbool is_upper(char c){\\n\\t\\treturn (c >= \\'A\\' && c <= \\'Z\\');\\n\\t}\\n\\n\\t// copy pasted from cpp reference\\n\\t// note that the interviewer might be a bit pissed there :-)\\n\\ttemplate<class InputIt, class UnaryPredicate >\\n\\tconstexpr bool all_of(InputIt first, InputIt last, UnaryPredicate p){\\n\\t\\treturn std::find_if_not(first, last, p) == last;  // lol :-)\\n\\t}\\n\\n\\t// alternate version to not piss an irritable interviewer\\n\\ttemplate<typename IT, typename Pred>\\n\\tbool all_of(IT begin, IT end, Pred p){\\n\\t\\tfor(auto it = begin; it != end; ++it){\\n\\t\\t\\tif(!p(*it))\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n}\\n```\\n\\nPlease comment if you have a better approach / suggestion to that specific problem.\\n\\n\\n\\n\\n\\t\\n",
                "solutionTags": [],
                "code": "```\\t\\nbool detectCapitalUse(string word) {\\n\\treturn all_of(word.begin(), word.end(), ::islower)\\n\\t\\tor all_of(word.begin(), word.end(), ::isupper)\\n\\t\\tor (isupper(word.front()) and all_of(next(word.begin()), word.end(), ::islower));\\n}\\n```\n```\\nbool detectCapitalUse(string word) {\\n\\treturn all_of(word.begin(), word.end(), ::isupper)\\n\\t\\tor all_of(next(word.begin()), word.end(), ::islower);\\n}\\n```\n```\\nall_of(word.begin(), word.end(), [](char c){return std::isupper(c);})\\n```\n```\\nall_of(word.begin(), word.end(), static_cast<int(*)(int)>(islower))\\n```\n```\\nusing cctype = int(*)(int); // function pointer type used to force use \\n\\t\\t\\t                // the overload defined in cctype header\\nbool detectCapitalUse(const string& word) const {\\n    return all_of(word.cbegin(), word.cend(), cctype(isupper))\\n\\t\\t\\tor all_of(next(word.cbegin()), word.cend(), cctype(islower));\\n}\\n```\n```\\nnamespace mystd{\\n\\t\\n\\t// see https://stackoverflow.com/questions/2169261/c-isupper-function\\n\\t// for more serious implementation\\n\\t\\n\\tbool is_lower(char c){\\n\\t\\treturn (c >= \\'a\\' && c <= \\'z\\');\\n\\t}\\n\\n\\tbool is_upper(char c){\\n\\t\\treturn (c >= \\'A\\' && c <= \\'Z\\');\\n\\t}\\n\\n\\t// copy pasted from cpp reference\\n\\t// note that the interviewer might be a bit pissed there :-)\\n\\ttemplate<class InputIt, class UnaryPredicate >\\n\\tconstexpr bool all_of(InputIt first, InputIt last, UnaryPredicate p){\\n\\t\\treturn std::find_if_not(first, last, p) == last;  // lol :-)\\n\\t}\\n\\n\\t// alternate version to not piss an irritable interviewer\\n\\ttemplate<typename IT, typename Pred>\\n\\tbool all_of(IT begin, IT end, Pred p){\\n\\t\\tfor(auto it = begin; it != end; ++it){\\n\\t\\t\\tif(!p(*it))\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99385,
                "title": "intuitive-javascript-solution",
                "content": "```\\nvar detectCapitalUse = function(word) {\\n    // either all capitals, all small cases, or Capital follow by small cases\\n    return /^[A-Z]+$|^[a-z]+$|^[A-Z][a-z]+$/.test(word);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar detectCapitalUse = function(word) {\\n    // either all capitals, all small cases, or Capital follow by small cases\\n    return /^[A-Z]+$|^[a-z]+$|^[A-Z][a-z]+$/.test(word);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2982498,
                "title": "python-3-1-line-w-references-t-m-93-97",
                "content": "You can find out about `.capitalize()`, `.upper()` and `.lower()` and other Python string methods at:\\n[https://www.w3schools.com/python/python_ref_string.asp](http://)\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        \\n        return (word == word.capitalize() or \\n                word == word.upper()      or \\n                word == word.lower()        )\\n```\\n[https://leetcode.com/problems/detect-capital/submissions/869394675/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1).",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        \\n        return (word == word.capitalize() or \\n                word == word.upper()      or \\n                word == word.lower()        )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2984349,
                "title": "c-simple-if-else-o-n",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n\\n        int capCnt = 0;\\n        int n = word.size();\\n\\n        if( n==1 ) return true;\\n\\n        for( auto &it : word ){\\n            if( it>=\\'A\\' && it<=\\'Z\\' ) capCnt++;\\n        } \\n\\n        // \"USA\"\\n        if( capCnt>=2 && capCnt==n ) return true;\\n        // \"Google\"\\n        else if( capCnt == 1 && ( word[0]>=\\'A\\' && word[0]<=\\'Z\\' ) ) return true;\\n        // \"leetcode\"\\n        else if( capCnt == 0 && n>=1 ) return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n\\n        int capCnt = 0;\\n        int n = word.size();\\n\\n        if( n==1 ) return true;\\n\\n        for( auto &it : word ){\\n            if( it>=\\'A\\' && it<=\\'Z\\' ) capCnt++;\\n        } \\n\\n        // \"USA\"\\n        if( capCnt>=2 && capCnt==n ) return true;\\n        // \"Google\"\\n        else if( capCnt == 1 && ( word[0]>=\\'A\\' && word[0]<=\\'Z\\' ) ) return true;\\n        // \"leetcode\"\\n        else if( capCnt == 0 && n>=1 ) return true;\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2984294,
                "title": "one-line-python-3-string-methods",
                "content": "# Intuition\\nA good opportunite to learn about string methods\\n\\n# Approach\\nDirectly check if any on the three conditions meet\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\nIf you read it please upvote! because:\\n- It`s free!\\n- The karma will you give somethig nice that you like\\n\\n# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n      return word in [word.lower(), word.upper(), word.capitalize()]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n      return word in [word.lower(), word.upper(), word.capitalize()]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 157195,
                "title": "java-clean-solution",
                "content": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int capitalCount = 0;\\n        boolean firstLetterUpper = false;\\n        for (int i = 0 ; i < word.length() ; i++) {\\n            if (word.charAt(i) >= \\'A\\' && word.charAt(i) <= \\'Z\\') {\\n                capitalCount++;\\n                if (i == 0) {\\n                    firstLetterUpper = true;\\n                }                \\n            }\\n        }\\n        return capitalCount == word.length() \\n            || capitalCount == 0\\n            || (capitalCount == 1 && word.length() >= 1 && firstLetterUpper);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int capitalCount = 0;\\n        boolean firstLetterUpper = false;\\n        for (int i = 0 ; i < word.length() ; i++) {\\n            if (word.charAt(i) >= \\'A\\' && word.charAt(i) <= \\'Z\\') {\\n                capitalCount++;\\n                if (i == 0) {\\n                    firstLetterUpper = true;\\n                }                \\n            }\\n        }\\n        return capitalCount == word.length() \\n            || capitalCount == 0\\n            || (capitalCount == 1 && word.length() >= 1 && firstLetterUpper);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982958,
                "title": "leetcode-the-hard-way-explained-line-by-line",
                "content": "\\uD83D\\uDD34 Check out [LeetCode The Hard Way](https://wingkwong.github.io/leetcode-the-hard-way/) for more solution explanations and tutorials. \\n\\uD83D\\uDFE0 Check out our [Discord](https://discord.gg/Nqm4jJcyBf) for live discussion.\\n\\uD83D\\uDFE2 Give a star on [Github Repository](https://github.com/wingkwong/leetcode-the-hard-way) and upvote this post if you like it.\\n\\uD83D\\uDD35 Check out [Screencast](https://www.youtube.com/watch?v=H2DQuu6bDBc&list=PLBu4Bche1aEWMj1TdpymXbD8Tn8xKVYwj&index=2) if you are interested.\\n\\n---\\n\\n```cpp\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int upper = 0;\\n\\t\\t// count number of characters with upper case\\n        for (auto x : word) upper += isupper(x) ? 1 : 0;\\n            // case 1: All letters in this word are capitals, like \"USA\".\\n        return upper == word.size() ||\\n            // case 2: All letters in this word are not capitals, like \"leetcode\".\\n               upper == 0 ||\\n            // case 3: Only the first letter in this word is capital, like \"Google\".\\n               (upper == 1 && isupper(word.front()));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int upper = 0;\\n\\t\\t// count number of characters with upper case\\n        for (auto x : word) upper += isupper(x) ? 1 : 0;\\n            // case 1: All letters in this word are capitals, like \"USA\".\\n        return upper == word.size() ||\\n            // case 2: All letters in this word are not capitals, like \"leetcode\".\\n               upper == 0 ||\\n            // case 3: Only the first letter in this word is capital, like \"Google\".\\n               (upper == 1 && isupper(word.front()));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2984184,
                "title": "c-one-line",
                "content": "# Code\\n```\\npublic class Solution \\n{\\n    public bool DetectCapitalUse(string word)\\n    {\\n        return word.All(char.IsUpper) || word.Skip(1).All(char.IsLower);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public bool DetectCapitalUse(string word)\\n    {\\n        return word.All(char.IsUpper) || word.Skip(1).All(char.IsLower);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982631,
                "title": "javascript-if-else",
                "content": "```\\nconst detectCapitalUse = function(word) {\\n    if(word.toLowerCase() == word || word.toUpperCase() == word) \\n        return true;\\n    else if((word[0] + word.slice(1).toLowerCase()) == word) \\n        return true \\n    else \\n        return false\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst detectCapitalUse = function(word) {\\n    if(word.toLowerCase() == word || word.toUpperCase() == word) \\n        return true;\\n    else if((word[0] + word.slice(1).toLowerCase()) == word) \\n        return true \\n    else \\n        return false\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1716090,
                "title": "two-golang-solutions-with-quick-explanations",
                "content": "### Solution 1:\\n\\nThis solution is pretty simple, we can make three strings then compare them to `word`, and see if any of them match, if they do we can return `true`.\\n\\nThe three strings that we can make are:\\n\\n* `allCap`, this is for the whole word to be upper case (ie. `\"LEETCODE\"`)\\n* `allLower`, this is for the whole word to be lower case (ie. `\"leetcode\"`)\\n* `firstCap`, this is for the whole word to be lower case except for the first letter which is uppercase (ie. `\"Leetcode\"`)\\n\\n``` go\\nfunc detectCapitalUse(word string) bool {\\n    allCap := strings.ToUpper(word)\\n    allLower := strings.ToLower(word)\\n    firstCap := strings.ToUpper(string(word[0])) + strings.ToLower(word)[1:]\\n    \\n    return word == allCap || word == allLower || word == firstCap\\n}\\n```\\n\\n### Solution 2:\\n\\nThe second solution uses the fact that in `\"leetcode\"` and `\"Leetcode\"` there is a common `\"eetcode\"`. This means that whatever the first letter is, if the remaining part of the word is lowercase we know that all the letters in `word` are lowercase, or the first letter is the only letter that is upper case.\\n\\n``` go\\nfunc detectCapitalUse(word string) bool {\\n    allCap := strings.ToUpper(word)\\n    remainingPart := strings.ToLower(word)[1:]\\n    \\n    return word == allCap || word[1:] == remainingPart\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc detectCapitalUse(word string) bool {\\n    allCap := strings.ToUpper(word)\\n    allLower := strings.ToLower(word)\\n    firstCap := strings.ToUpper(string(word[0])) + strings.ToLower(word)[1:]\\n    \\n    return word == allCap || word == allLower || word == firstCap\\n}\\n```\n``` go\\nfunc detectCapitalUse(word string) bool {\\n    allCap := strings.ToUpper(word)\\n    remainingPart := strings.ToLower(word)[1:]\\n    \\n    return word == allCap || word[1:] == remainingPart\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 336441,
                "title": "solution-in-python-3-one-line",
                "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n    \\treturn word in [word.upper(), word.lower(), word.title()]\\n\\t\\t\\n\\n- Python 3\\n- Junaid Mansuri",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n    \\treturn word in [word.upper(), word.lower(), word.title()]\\n\\t\\t\\n\\n- Python 3\\n- Junaid Mansuri",
                "codeTag": "Java"
            },
            {
                "id": 766593,
                "title": "c-3-line-code-simple-0ms-solution",
                "content": "```\\n    bool detectCapitalUse(string s) {\\n        int sum=0,n=s.length();   //sum --> count of \\'a\\' to \\'z\\'\\n        for(int i=1;i<n;++i) if(s[i]>=97) ++sum;\\n        return sum==n-1 || (sum==0 && s[0]<=90);\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n    bool detectCapitalUse(string s) {\\n        int sum=0,n=s.length();   //sum --> count of \\'a\\' to \\'z\\'\\n        for(int i=1;i<n;++i) if(s[i]>=97) ++sum;\\n        return sum==n-1 || (sum==0 && s[0]<=90);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 259999,
                "title": "python-for-beginner",
                "content": "\\n\\t\\tcount = 0\\n        for c in word:\\n            if c.isupper() is True:\\n                count += 1\\n                \\n        L = len(word)\\n        if count == L:\\n            return True\\n        elif count == 0:\\n            return True\\n        elif count == 1 & word[0].isupper():\\n            return True\\n        else: return False",
                "solutionTags": [],
                "code": "\\n\\t\\tcount = 0\\n        for c in word:\\n            if c.isupper() is True:\\n                count += 1\\n                \\n        L = len(word)\\n        if count == L:\\n            return True\\n        elif count == 0:\\n            return True\\n        elif count == 1 & word[0].isupper():\\n            return True\\n        else: return False",
                "codeTag": "Unknown"
            },
            {
                "id": 2984159,
                "title": "c-checked-given-3-condition-commented-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int count_capital = 0;\\n        for(auto it : word)\\n        {\\n            // if it is capital letter just count it as capital\\n            if(it >= 65 && it <= 90) \\n                count_capital++;\\n        }\\n        \\n        // if i am having all letter in lowercase or in uppercase\\n        if(count_capital==0 || count_capital==word.size())\\n            return true;\\n        \\n        // If i am having only 1 capital letter and it is in 1st place\\n        if(count_capital==1 && word[0]>=65 && word[0]<=90)\\n            return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int count_capital = 0;\\n        for(auto it : word)\\n        {\\n            // if it is capital letter just count it as capital\\n            if(it >= 65 && it <= 90) \\n                count_capital++;\\n        }\\n        \\n        // if i am having all letter in lowercase or in uppercase\\n        if(count_capital==0 || count_capital==word.size())\\n            return true;\\n        \\n        // If i am having only 1 capital letter and it is in 1st place\\n        if(count_capital==1 && word[0]>=65 && word[0]<=90)\\n            return true;\\n        \\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982630,
                "title": "one-liner-python",
                "content": "# Approach\\nBrute Force\\n# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return (word==word.upper() or word==word.lower())or(word[1:].lower()==word[1:]))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return (word==word.upper() or word==word.lower())or(word[1:].lower()==word[1:]))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982480,
                "title": "c-strings-beats-100-intuitive-solution-easy-understand",
                "content": "# ***please give an upvote if you like the solution***\\n\\n![image.png](https://assets.leetcode.com/users/images/073c7ce7-81c7-4326-9b3c-b3416fb6b86b_1672627693.3972013.png)\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n) --> n is length of string\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size(); \\n        if(n == 1) return 1;\\n\\n        int st = 97, end = 122;\\n        if(word[0] <= 90 && word[1] <= 90) st = 60, end = 90;\\n        \\n        for(int i = 1; i < n ; i++)\\n            if(word[i] < st || word[i] > end) return false;\\n\\n        return true;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size(); \\n        if(n == 1) return 1;\\n\\n        int st = 97, end = 122;\\n        if(word[0] <= 90 && word[1] <= 90) st = 60, end = 90;\\n        \\n        for(int i = 1; i < n ; i++)\\n            if(word[i] < st || word[i] > end) return false;\\n\\n        return true;  \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2411168,
                "title": "python-easy-solution",
                "content": "```\\ndef detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.title() == word:\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.title() == word:\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1716941,
                "title": "python-easy-solution-o-n-faster-than-80",
                "content": "## The ord() function in python returns the ASCII value of any character. Just compare the ascii values and return True or False.\\n\\n```class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        count = 0\\n\\t\\t\\n\\t\\t#Count Number of Capital Characters (capitals have ascii  65-90)\\n        for i in range(len(word)):\\n            if ord(word[i]) <= 90:\\n                count += 1\\n        \\n\\t\\t# if all are capital, return True\\n        if count == len(word):\\n            return True\\n\\t\\t\\t\\n\\t\\t#If all are small return True\\n        elif count == 0:\\n            return True\\n\\t\\t\\t\\n\\t\\t#If only first is capital , and that is the only capital (count=1), return True\\n        elif((ord(word[0]) < 91) and count == 1 ):\\n            return True\\n\\t\\t\\t\\n\\t\\t#In all other conditions, return False\\n        else:\\n            return False\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "## The ord() function in python returns the ASCII value of any character. Just compare the ascii values and return True or False.\\n\\n```class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        count = 0\\n\\t\\t\\n\\t\\t#Count Number of Capital Characters (capitals have ascii  65-90)\\n        for i in range(len(word)):\\n            if ord(word[i]) <= 90:\\n                count += 1\\n        \\n\\t\\t# if all are capital, return True\\n        if count == len(word):\\n            return True\\n\\t\\t\\t\\n\\t\\t#If all are small return True\\n        elif count == 0:\\n            return True\\n\\t\\t\\t\\n\\t\\t#If only first is capital , and that is the only capital (count=1), return True\\n        elif((ord(word[0]) < 91) and count == 1 ):\\n            return True\\n\\t\\t\\t\\n\\t\\t#In all other conditions, return False\\n        else:\\n            return False\\n",
                "codeTag": "Java"
            },
            {
                "id": 1714305,
                "title": "javascript-neat-2-methods-string-methods-regexp-1loc",
                "content": "## 1. String methods\\n```js\\nconst detectCapitalUse = word => \\n    word === word.toUpperCase() || word.slice(1) === word.slice(1).toLowerCase()\\n```\\n\\n## 2. RegExp\\n```js\\nconst detectCapitalUse = word => /^([A-Z]*|.[a-z]*)$/.test(word)\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nconst detectCapitalUse = word => \\n    word === word.toUpperCase() || word.slice(1) === word.slice(1).toLowerCase()\\n```\n```js\\nconst detectCapitalUse = word => /^([A-Z]*|.[a-z]*)$/.test(word)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 133084,
                "title": "go-1-liner",
                "content": "```go\\nfunc detectCapitalUse(word string) bool {\\n    return strings.ToLower(word) == word || strings.ToUpper(word) == word || strings.ToLower(word[1:]) == word[1:]\\n}\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc detectCapitalUse(word string) bool {\\n    return strings.ToLower(word) == word || strings.ToUpper(word) == word || strings.ToLower(word[1:]) == word[1:]\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2984343,
                "title": "c-easy-and-efficient-approach",
                "content": "# Intuition\\nUsing conditional operators we need to check all three conditions.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string s) \\n    {\\n        bool firstCapital=isupper(s[0]), allCapital=true, allSmall=true; \\n        int n=s.size();\\n        for(int i=1;i<n;i++)\\n        {\\n            if(isupper(s[i])) allSmall = false;\\n            else allCapital = false;\\n        }\\n        return (firstCapital && allCapital) || allSmall ; //it also satisfies 3rd condition\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string s) \\n    {\\n        bool firstCapital=isupper(s[0]), allCapital=true, allSmall=true; \\n        int n=s.size();\\n        for(int i=1;i<n;i++)\\n        {\\n            if(isupper(s[i])) allSmall = false;\\n            else allCapital = false;\\n        }\\n        return (firstCapital && allCapital) || allSmall ; //it also satisfies 3rd condition\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983614,
                "title": "java-easy-to-understand-using-isuppercase-beats-100",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI just counted the no. of Capital letters and returned true if first letter is only capital or all are capital or none is capital otherwise return false.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int countUpper = 0;\\n        for(char ch: word.toCharArray()){\\n            if(Character.isUpperCase(ch)) countUpper++;\\n        }\\n        if(countUpper==word.length() || countUpper==0) return true;\\n        else if (countUpper==1 && Character.isUpperCase(word.charAt(0))) return true;\\n\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int countUpper = 0;\\n        for(char ch: word.toCharArray()){\\n            if(Character.isUpperCase(ch)) countUpper++;\\n        }\\n        if(countUpper==word.length() || countUpper==0) return true;\\n        else if (countUpper==1 && Character.isUpperCase(word.charAt(0))) return true;\\n\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982734,
                "title": "java-easy-solution-o-n",
                "content": "# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int upper=0;\\n\\n        int n=word.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word.charAt(i)>=\\'A\\' && word.charAt(i)<=\\'Z\\')\\n            {\\n                upper++;\\n            }\\n        }\\n        if(upper==0 || upper==n) return true;\\n        else if(upper==1 && word.charAt(0)>=\\'A\\' && word.charAt(0)<=\\'Z\\') return true;\\n        else return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int upper=0;\\n\\n        int n=word.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(word.charAt(i)>=\\'A\\' && word.charAt(i)<=\\'Z\\')\\n            {\\n                upper++;\\n            }\\n        }\\n        if(upper==0 || upper==n) return true;\\n        else if(upper==1 && word.charAt(0)>=\\'A\\' && word.charAt(0)<=\\'Z\\') return true;\\n        else return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982518,
                "title": "most-easy-and-basic-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        \\n        int small = 0; // for lowercase\\n        int upper = 0; // for uppercase\\n\\n        for(int i=0; i<word.length(); i++)\\n        {\\n            if(word[i]>=\\'a\\' && word[i]<=\\'z\\')\\n            {\\n                small++;\\n            }\\n            else if(word[i] >=\\'A\\' && word[i]<=\\'Z\\')\\n            {\\n                upper++;\\n            }\\n        }\\n\\n        if(small == word.length()) // if all are lowercase\\n        {\\n            return true; \\n        }\\n        else if(upper == word.length()) // if all are uppercase\\n        {\\n            return true;\\n        }\\n        else if( (word[0]>=\\'A\\' && word[0]<=\\'Z\\') && (upper==1))\\n        { //1. if the first letter is upper case\\n          //2. if their is only uppercase i.e first one\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        \\n        int small = 0; // for lowercase\\n        int upper = 0; // for uppercase\\n\\n        for(int i=0; i<word.length(); i++)\\n        {\\n            if(word[i]>=\\'a\\' && word[i]<=\\'z\\')\\n            {\\n                small++;\\n            }\\n            else if(word[i] >=\\'A\\' && word[i]<=\\'Z\\')\\n            {\\n                upper++;\\n            }\\n        }\\n\\n        if(small == word.length()) // if all are lowercase\\n        {\\n            return true; \\n        }\\n        else if(upper == word.length()) // if all are uppercase\\n        {\\n            return true;\\n        }\\n        else if( (word[0]>=\\'A\\' && word[0]<=\\'Z\\') && (upper==1))\\n        { //1. if the first letter is upper case\\n          //2. if their is only uppercase i.e first one\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1716330,
                "title": "easy-and-short-solution-with-explanation-c",
                "content": "There are two cases possible for our answer to be true:\\n1. All letters are uppercase\\n2. All letters from first index are lowercase (Doesn\\'t matter if letter on index zero is uppercase or lowercase)\\n\\nSo we have checked both the cases and if any one of them is true then our answer is also true\\n\\n```\\nbool detectCapitalUse(string word) {\\n        int upperCaseLetters = 0, firstLetter = 0, n = words.size();\\n        if (isupper(word[0])) firstLetter = 1;\\n        for (int i = 1; i < n; i++) \\n            if (isupper(word[i])) \\n                upperCaseLetters++;\\n        return ((firstLetter and upperCaseLetters == n-1) or (upperCaseLetters == 0));\\n    }\\n```\\n\\n\\t",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nbool detectCapitalUse(string word) {\\n        int upperCaseLetters = 0, firstLetter = 0, n = words.size();\\n        if (isupper(word[0])) firstLetter = 1;\\n        for (int i = 1; i < n; i++) \\n            if (isupper(word[i])) \\n                upperCaseLetters++;\\n        return ((firstLetter and upperCaseLetters == n-1) or (upperCaseLetters == 0));\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1287789,
                "title": "simple-kotlin-solution",
                "content": "Check the number of uppercase chars\\n\\n```kotlin\\nclass Solution {\\n    fun detectCapitalUse(word: String): Boolean {\\n        val c = word.filter { it.isUpperCase() }.count()\\n        return c == word.length || c == 0 || c == 1 && word[0].isUpperCase()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```kotlin\\nclass Solution {\\n    fun detectCapitalUse(word: String): Boolean {\\n        val c = word.filter { it.isUpperCase() }.count()\\n        return c == word.length || c == 0 || c == 1 && word[0].isUpperCase()\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 306587,
                "title": "javascript-finite-state-machine",
                "content": "Fast algorithm base on finite-state machine\\n\\nRuntime: 56 ms, faster than 97.31% of JavaScript online submissions for Detect Capital.\\nMemory Usage: 34.2 MB, less than 53.77% of JavaScript online submissions for Detect Capital.\\n\\n```\\nvar detectCapitalUse = function(word) {\\n    \\n    const isCapital = l => l>=\\'A\\' && l<=\\'Z\\';\\n            \\n    const length = word.length;\\n    let indx = 0;\\n    let state = 0;        \\n    \\n    for(;;) {\\n        if (indx === length) return true;\\n        switch(state) {\\n            case 0:\\n                state = isCapital(word[indx++])? 1 : 2;\\n                break;\\n            case 1:\\n                state = isCapital(word[indx++])? 3 : 2;\\n                break;\\n            case 3:\\n                if (!isCapital(word[indx++])) return false;\\n                break;\\n            case 2:\\n                if (isCapital(word[indx++])) return false;\\n                break;\\n        }\\n    }    \\n};\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar detectCapitalUse = function(word) {\\n    \\n    const isCapital = l => l>=\\'A\\' && l<=\\'Z\\';\\n            \\n    const length = word.length;\\n    let indx = 0;\\n    let state = 0;        \\n    \\n    for(;;) {\\n        if (indx === length) return true;\\n        switch(state) {\\n            case 0:\\n                state = isCapital(word[indx++])? 1 : 2;\\n                break;\\n            case 1:\\n                state = isCapital(word[indx++])? 3 : 2;\\n                break;\\n            case 3:\\n                if (!isCapital(word[indx++])) return false;\\n                break;\\n            case 2:\\n                if (isCapital(word[indx++])) return false;\\n                break;\\n        }\\n    }    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2984192,
                "title": "c-easiest-solution-3-linear-fast-and-simple",
                "content": "# Intuition just check if any of the three condition is true or not\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach count the number of capital letters and apply them on the above three conditions.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(1)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string s) {\\n        int cnt=0;\\n        for(auto it:s) if(isupper(it)) cnt++; // couting capitals\\n        return !cnt || cnt==s.size() || cnt==1 && isupper(s[0]); // checking if any condition is true.\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string s) {\\n        int cnt=0;\\n        for(auto it:s) if(isupper(it)) cnt++; // couting capitals\\n        return !cnt || cnt==s.size() || cnt==1 && isupper(s[0]); // checking if any condition is true.\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2982570,
                "title": "easy-to-understand-1-line",
                "content": "# Approachs\\n1. Normal Iteration and condition check\\n2. Using Regular Expression   re - [\"([A-Z]+)|([A-Z][a-z]+)|([a-z]+)\"]\\n3. 1 Line code easy Understanding\\n\\n# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```python\\n# /520. Detect Capital\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        chIdx = 0\\n        allLower = False\\n\\n        while chIdx < len(word):\\n            if chIdx == 0 and word[chIdx].islower() == True:\\n                allLower = True\\n                chIdx += 1\\n            elif chIdx == 0 and word[chIdx].islower() == False:\\n                chIdx += 1\\n            elif chIdx == 1 and word[chIdx].islower() == allLower:\\n                chIdx += 1\\n            elif chIdx == 1 and word[chIdx].islower() == True:\\n                allLower = True\\n                chIdx += 1\\n            elif chIdx >= 2 and word[chIdx].islower() == allLower:\\n                chIdx += 1\\n            else:\\n                return False\\n        return True\\n```\\n```python\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word == word.upper() or word[1:] == word[1:].lower()\\n```\\nYou Can also Look At My SDE Prep Repo [\\uD83E\\uDDE2 GitHub](https://github.com/Ayon-SSP/The-SDE-Prep)",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\n# /520. Detect Capital\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        chIdx = 0\\n        allLower = False\\n\\n        while chIdx < len(word):\\n            if chIdx == 0 and word[chIdx].islower() == True:\\n                allLower = True\\n                chIdx += 1\\n            elif chIdx == 0 and word[chIdx].islower() == False:\\n                chIdx += 1\\n            elif chIdx == 1 and word[chIdx].islower() == allLower:\\n                chIdx += 1\\n            elif chIdx == 1 and word[chIdx].islower() == True:\\n                allLower = True\\n                chIdx += 1\\n            elif chIdx >= 2 and word[chIdx].islower() == allLower:\\n                chIdx += 1\\n            else:\\n                return False\\n        return True\\n```\n```python\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word == word.upper() or word[1:] == word[1:].lower()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982260,
                "title": "straight-forward-regex-solution",
                "content": "***There are some pretty cool solutions using slicing and toUpperCase() /  toLowerCase() methods and checking if the word is strictly equal to the altered word. I recommend checking those solutions out if you\\'re not interested in regex.\\n\\n- [Regex object test method API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test)\\n\\n- [A cool place to practice regex](https://regexone.com) - this short tutorial takes about 10-15 minutes to get through and should allow you to understand this answer completely \\uD83D\\uDC4D\\uD83C\\uDFFB\\n\\n\\n# Code\\n```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function(word) {\\n    // starts and ends with A - Z (all capitals) or\\n    // starts and ends with a - z (all lowercase) or\\n    // starts with an A - Z letter, then ends with lowercase\\n    return /(^[A-Z]+$)|(^[a-z]+$)|(^[A-Z]([a-z]+)$)/.test(word)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function(word) {\\n    // starts and ends with A - Z (all capitals) or\\n    // starts and ends with a - z (all lowercase) or\\n    // starts with an A - Z letter, then ends with lowercase\\n    return /(^[A-Z]+$)|(^[a-z]+$)|(^[A-Z]([a-z]+)$)/.test(word)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2982010,
                "title": "daily-leetcoding-challenge-january-day-2",
                "content": "This problem is the Daily LeetCoding Challenge for January, Day 2.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 1716640,
                "title": "c-finite-automata-highly-efficient-learn",
                "content": "This question was a good opportunity for me to pactice implementation of DFA for regular expression in C++. \\nI implimented Moore State machine with 5 states using switch statement in C++.\\nEven though this regex can be easy checked in JAVA. \\nPlease find below the image with the state diagram. Only Q4 will generate false input because it violates regex.\\n\\n![image](https://assets.leetcode.com/users/images/2b16d76b-465a-4cb5-8ee9-544d202435be_1643047210.962247.jpeg)\\n\\nC++ Implementation :\\n```\\nclass Solution {\\n    int curstate;\\n    bool input(char c) {\\n        switch(curstate) {\\n                // a : (c >= \\'A\\' && c <= \\'Z\\')\\n                // b : (c >= \\'a\\' && c <= \\'z\\')\\n            case 0:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 3 : 1;\\n                break;\\n            case 1:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 3 : 2;\\n                break;\\n            case 2:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 4 : 2;\\n                break;\\n            case 3:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 3 : 4;\\n                break;\\n            case 4:\\n            default:\\n                return false;\\n        }\\n        return curstate != 4;\\n    }\\npublic:\\n    Solution() : curstate(0) {}\\n    bool detectCapitalUse(string word) {\\n        int i = 0;\\n        while(i < word.size() && input(word[i])) i++;\\n        return curstate != 4;\\n    }\\n};\\n```\\n\\n\\nPlease upvote if you learned anything here.\\n\\nThanks",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    int curstate;\\n    bool input(char c) {\\n        switch(curstate) {\\n                // a : (c >= \\'A\\' && c <= \\'Z\\')\\n                // b : (c >= \\'a\\' && c <= \\'z\\')\\n            case 0:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 3 : 1;\\n                break;\\n            case 1:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 3 : 2;\\n                break;\\n            case 2:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 4 : 2;\\n                break;\\n            case 3:\\n                curstate = (c >= \\'a\\' && c <= \\'z\\') ? 3 : 4;\\n                break;\\n            case 4:\\n            default:\\n                return false;\\n        }\\n        return curstate != 4;\\n    }\\npublic:\\n    Solution() : curstate(0) {}\\n    bool detectCapitalUse(string word) {\\n        int i = 0;\\n        while(i < word.size() && input(word[i])) i++;\\n        return curstate != 4;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715987,
                "title": "python-easy",
                "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper(): return True\\n        if word.islower(): return True\\n        if word[0].isupper() and word[1:].islower(): return True\\n        return False\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper(): return True\\n        if word.islower(): return True\\n        if word[0].isupper() and word[1:].islower(): return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715691,
                "title": "c-simple-and-clean-code-runtime-0-ms-and-faster-than-100-00-of-c-online-submissions",
                "content": "*transform(Iterator inputBegin, Iterator inputEnd,  Iterator OutputBegin, unary_operation) *\\n        \\n```\\n bool detectCapitalUse(string word) \\n    {\\n        int n=word.size();\\n        string s=word;\\n        \\n        transform(s.begin(), s.end(), s.begin(), ::toupper);\\n        if(s==word)\\n        {\\n            return true;\\n        }\\n        s=word;\\n        transform(s.begin(), s.end(), s.begin(), ::tolower);\\n        if(s==word)\\n        {\\n            return true;\\n        }\\n        s[0]=toupper(s[0]);\\n        if(s==word)\\n        {\\n            return true;\\n        }\\n        return false;\\n        \\n        \\n        \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n bool detectCapitalUse(string word) \\n    {\\n        int n=word.size();\\n        string s=word;\\n        \\n        transform(s.begin(), s.end(), s.begin(), ::toupper);\\n        if(s==word)\\n        {\\n            return true;\\n        }\\n        s=word;\\n        transform(s.begin(), s.end(), s.begin(), ::tolower);\\n        if(s==word)\\n        {\\n            return true;\\n        }\\n        s[0]=toupper(s[0]);\\n        if(s==word)\\n        {\\n            return true;\\n        }\\n        return false;\\n        \\n        \\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1715152,
                "title": "java-easy-solution-o-n",
                "content": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length()==1) return true;\\n        boolean big=false, small=false,firstCapital=false;\\n        \\n        if(word.charAt(0)>=65 && word.charAt(0)<=90) firstCapital=true;\\n        word=word.substring(1);\\n        for(int i=0;i<word.length();i++){\\n            if(word.charAt(i)>=65 && word.charAt(i)<=90)\\n            big=true;\\n            if(word.charAt(i)>=97 && word.charAt(i)<=122)\\n            small=true;\\n            if(small && big) return false;\\n        }\\n        if(firstCapital && (small || big)) return true;\\n        if(small) return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length()==1) return true;\\n        boolean big=false, small=false,firstCapital=false;\\n        \\n        if(word.charAt(0)>=65 && word.charAt(0)<=90) firstCapital=true;\\n        word=word.substring(1);\\n        for(int i=0;i<word.length();i++){\\n            if(word.charAt(i)>=65 && word.charAt(i)<=90)\\n            big=true;\\n            if(word.charAt(i)>=97 && word.charAt(i)<=122)\\n            small=true;\\n            if(small && big) return false;\\n        }\\n        if(firstCapital && (small || big)) return true;\\n        if(small) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714673,
                "title": "0ms-100-faster-than-c-easy-and-clean-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int i;\\n        int cnt=0;\\n        int pos=-1;\\n        int n=word.length();\\n        for(i=0;i<n;i++){\\n            if(isupper(word[i])){\\n                cnt++;\\n                pos=i;\\n                //pos will store last occurence of uppercase letter in the word string\\n            }\\n        }\\n        // cnt==0 means no uppercase letters have been found \\n        //cnt==n means all are uppercase\\n        //pos=0 means last occurence of uppercase letter is at 0 index i.e only first letter is uppercase\\n        if(cnt==0||cnt==n|| pos==0){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int i;\\n        int cnt=0;\\n        int pos=-1;\\n        int n=word.length();\\n        for(i=0;i<n;i++){\\n            if(isupper(word[i])){\\n                cnt++;\\n                pos=i;\\n                //pos will store last occurence of uppercase letter in the word string\\n            }\\n        }\\n        // cnt==0 means no uppercase letters have been found \\n        //cnt==n means all are uppercase\\n        //pos=0 means last occurence of uppercase letter is at 0 index i.e only first letter is uppercase\\n        if(cnt==0||cnt==n|| pos==0){\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 766711,
                "title": "java-solution-beats-99-8-with-explanation",
                "content": "taking count of capital letters(caps) and **return** **true** \\n* if caps is equal to length of string \\n* if caps=1 and the 1st letter in the string is capital \\n* if there are no capital letters in the string\\n\\nelse **return** **false**\\n```\\n\\tclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int n= word.length();\\n        int caps=0;\\n        for(int i=0;i<n;i++)\\n            if(word.charAt(i)-\\'A\\'<26)\\n                caps++;\\n        \\n        if(caps==n) return true;\\n        else if(caps==1 && word.charAt(0)-\\'A\\'<26) return true;\\n        else if(caps==0)  return true;\\n        else return false;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\n\\tclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int n= word.length();\\n        int caps=0;\\n        for(int i=0;i<n;i++)\\n            if(word.charAt(i)-\\'A\\'<26)\\n                caps++;\\n        \\n        if(caps==n) return true;\\n        else if(caps==1 && word.charAt(0)-\\'A\\'<26) return true;\\n        else if(caps==0)  return true;\\n        else return false;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99306,
                "title": "javascript-solution-o-1",
                "content": "```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function(word) {\\n    if(word.toUpperCase() === word){\\n        return true;\\n    }\\n    \\n    if(word.toLowerCase() === word){\\n        return true;\\n    }\\n    \\n    if(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase() === word){\\n        return true;\\n    }\\n    \\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function(word) {\\n    if(word.toUpperCase() === word){\\n        return true;\\n    }\\n    \\n    if(word.toLowerCase() === word){\\n        return true;\\n    }\\n    \\n    if(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase() === word){\\n        return true;\\n    }\\n    \\n    return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 99360,
                "title": "python-solution-which-can-be-understanded-easily",
                "content": "```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        if word.lower()==word or word.upper()==word:\\n            return True\\n        elif word[0].lower()!=word[0] and word[1:].lower()==word[1:]:\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        \"\"\"\\n        :type word: str\\n        :rtype: bool\\n        \"\"\"\\n        if word.lower()==word or word.upper()==word:\\n            return True\\n        elif word[0].lower()!=word[0] and word[1:].lower()==word[1:]:\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2993088,
                "title": "optimized-c-approach-with-full-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThere are a just a few  conditions we need to check and the rest is based upon coding those conditions appropriately!\\n\\nThe conditions are:\\n1) If the first character is Capital, then either all the other characters also must be Capital or LowerCase. Else, we should return false;\\n1) If the first character is not Capital, then we should all the other characters  in LowerCase.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nInorder to implement the Above Stated Conditions, we must have several pieces of code written.\\n\\nWe implement in the following manner:\\n1) Checking whether the string is a single character long. If yes, return true, else continue.\\n2) Checking whether the first character is Capital or not.\\n3) If Capital, then in order to return true we must have either of the two conditions. That is, str[1.....n-1] must contain all LowerCase or UpperCase characters but no combinations of these.\\n4) If first character is not capital, then we must have all the other characters as LowerCase characters.\\n\\nPlease Like if you find it useful!\\n\\n![smiley.png](https://assets.leetcode.com/users/images/0bed0cb9-78aa-4f0e-a570-697fcd77ea86_1672757492.137562.png)\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$ \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isCapital(char &c){\\n        return (c>=\\'A\\' && c<=\\'Z\\');\\n    }\\n\\n    bool isLower(char &c){\\n        return (c>=\\'a\\' && c<=\\'z\\');\\n    }\\n\\n    bool isEveryLetterLower(int start,int end,string &word){\\n        while(start<end){\\n            if(!isLower(word[start++]))\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    bool isEveryLetterUpper(int start,int end,string &word){\\n        while(start<end){\\n            if(!isCapital(word[start++]))\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    bool detectCapitalUse(string &word) {\\n        int n = word.size();\\n        if(n == 1){\\n            return true;\\n        }\\n        if(isCapital(word[0])){\\n            if(isEveryLetterLower(1,n,word)){\\n                return true;\\n            }else if(isEveryLetterUpper(1,n,word)){\\n                return true;\\n            }\\n        }else{\\n            if(isEveryLetterLower(1,n,word)){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCapital(char &c){\\n        return (c>=\\'A\\' && c<=\\'Z\\');\\n    }\\n\\n    bool isLower(char &c){\\n        return (c>=\\'a\\' && c<=\\'z\\');\\n    }\\n\\n    bool isEveryLetterLower(int start,int end,string &word){\\n        while(start<end){\\n            if(!isLower(word[start++]))\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    bool isEveryLetterUpper(int start,int end,string &word){\\n        while(start<end){\\n            if(!isCapital(word[start++]))\\n                return false;\\n        }\\n        return true;\\n    }\\n\\n    bool detectCapitalUse(string &word) {\\n        int n = word.size();\\n        if(n == 1){\\n            return true;\\n        }\\n        if(isCapital(word[0])){\\n            if(isEveryLetterLower(1,n,word)){\\n                return true;\\n            }else if(isEveryLetterUpper(1,n,word)){\\n                return true;\\n            }\\n        }else{\\n            if(isEveryLetterLower(1,n,word)){\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2990653,
                "title": "easy-c-solution-100-faster",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $O(n)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $O(1)$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool allcapital = false;\\n        if (isupper(word[0]))\\n            allcapital = true;\\n        for(int i=1; i<word.size(); ++i){\\n            if(islower(word[i]) and allcapital){\\n                if(i==1) allcapital=false;\\n                else return false;\\n            }\\n            \\n            if(isupper(word[i]) and !allcapital)\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool allcapital = false;\\n        if (isupper(word[0]))\\n            allcapital = true;\\n        for(int i=1; i<word.size(); ++i){\\n            if(islower(word[i]) and allcapital){\\n                if(i==1) allcapital=false;\\n                else return false;\\n            }\\n            \\n            if(isupper(word[i]) and !allcapital)\\n                return false;\\n        }\\n\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2988005,
                "title": "simple-c-stl-3-liner-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nEasy all_of stl function that will check all elemets are lower case or upper case . You can also loop but it is very simple to use and also fast as well . Not a big Algo\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string s) {\\n        if(all_of(s.begin(), s.end(), [](unsigned char c){ return islower(c);}))return true;\\n        if(all_of(s.begin(), s.end(), [](unsigned char c){ return std::isupper(c);}))return true;\\n        \\n        if(s[0]>=\\'A\\' and s[0]<=\\'Z\\' and all_of(s.begin()+1, s.end(), [](unsigned char c){ return islower(c);}))return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string s) {\\n        if(all_of(s.begin(), s.end(), [](unsigned char c){ return islower(c);}))return true;\\n        if(all_of(s.begin(), s.end(), [](unsigned char c){ return std::isupper(c);}))return true;\\n        \\n        if(s[0]>=\\'A\\' and s[0]<=\\'Z\\' and all_of(s.begin()+1, s.end(), [](unsigned char c){ return islower(c);}))return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987058,
                "title": "java-100-faster-soln-with-explanation",
                "content": "# Intuition\\nWe simply calculate the number of capital letters in the word using their ascii values and return the result based on certain conditions.\\n\\n# Approach\\nAfter calculating the number of capital letters we check if \\n\\ni. The numebr of capital letter is same as the length of the word then return true;\\n\\nii. The number of capital letter is 1 and the letter is the first letter of the word then we return true\\n\\niii. The number of capital letter is 0 then return true.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public static boolean detectCapitalUse(String word) {\\n        int l=word.length();\\n        boolean res= false;\\n        int c=0;\\n        for (int i = 0; i <l ; i++) {\\n            if((int)word.charAt(i)<=90)\\n                c++;\\n        }\\n        if(l==c)\\n            res=true;\\n        else\\n        {\\n            if(c==1)\\n            {\\n                if((int)word.charAt(0)<=90)\\n                    res=true;\\n                else\\n                    res=false;\\n            }\\n            if(c==0)\\n                res=true;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public static boolean detectCapitalUse(String word) {\\n        int l=word.length();\\n        boolean res= false;\\n        int c=0;\\n        for (int i = 0; i <l ; i++) {\\n            if((int)word.charAt(i)<=90)\\n                c++;\\n        }\\n        if(l==c)\\n            res=true;\\n        else\\n        {\\n            if(c==1)\\n            {\\n                if((int)word.charAt(0)<=90)\\n                    res=true;\\n                else\\n                    res=false;\\n            }\\n            if(c==0)\\n                res=true;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986015,
                "title": "very-easy-to-understand-c-soln",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int c=0,c2=0;\\n        for (int i = 1; i < word.size();i++){\\n            if (isupper(word[0]) !=isupper(word[i])){\\n                c=1;\\n            }\\n        }\\n        if(c==0){\\n            return true;\\n        }\\n        if(isupper(word[0])){\\n            for (int i=1;i<word.size();i++){\\n                if(isupper(word[i])){\\n                    return false;\\n                }\\n                else{\\n                    c2++;\\n                }\\n            }\\n        }\\n        if(c2==word.size() - 1){\\n            return true;\\n        }\\n        if(c){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int c=0,c2=0;\\n        for (int i = 1; i < word.size();i++){\\n            if (isupper(word[0]) !=isupper(word[i])){\\n                c=1;\\n            }\\n        }\\n        if(c==0){\\n            return true;\\n        }\\n        if(isupper(word[0])){\\n            for (int i=1;i<word.size();i++){\\n                if(isupper(word[i])){\\n                    return false;\\n                }\\n                else{\\n                    c2++;\\n                }\\n            }\\n        }\\n        if(c2==word.size() - 1){\\n            return true;\\n        }\\n        if(c){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985853,
                "title": "super-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function(word) {\\n\\n  return word === word.toUpperCase() || word.slice(1) === word.slice(1).toLowerCase()\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function(word) {\\n\\n  return word === word.toUpperCase() || word.slice(1) === word.slice(1).toLowerCase()\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2984270,
                "title": "short-easy-if-else-c-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n bool detectCapitalUse(string word) {\\n \\n           if(word[0]<\\'a\\'){                                                 //** first letter capital\\n              int cap = 0;\\n              for(int i =0;i<word.size();i++)if(word[i]<\\'a\\')cap++;\\n              if(cap>1 && cap< word.size())return false;                    //** more than 1 capital and less than word length\\n           }\\n           else\\n               for(int i =0;i<word.size();i++)if(word[i]<\\'a\\')return false;  //*** return false if any capital found \\n               \\n           return true;\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n bool detectCapitalUse(string word) {\\n \\n           if(word[0]<\\'a\\'){                                                 //** first letter capital\\n              int cap = 0;\\n              for(int i =0;i<word.size();i++)if(word[i]<\\'a\\')cap++;\\n              if(cap>1 && cap< word.size())return false;                    //** more than 1 capital and less than word length\\n           }\\n           else\\n               for(int i =0;i<word.size();i++)if(word[i]<\\'a\\')return false;  //*** return false if any capital found \\n               \\n           return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2983613,
                "title": "easiest-intuitive-c-explained-with-o-n-time",
                "content": "# Upvote if helpful.\\n\\n# Approach\\n```\\nhere we have following possibilities:\\n    1)all the letters after the first letter \\n    are lowercase or uppercase to be true.\\n        a)if all other letters are uppercase \\n        then the first letter should be capital.\\n            eg. lEETCODE=>false, LEETCODE=>true\\n        b)if all other letters are lowercase \\n        then the first letter can be lowercase or uppercase\\n        doesn\\'t matter.\\n            eg. leetcode=>true, Leetcode=>true\\n\\n    in all other cases solution will be false.\\n            eg. leeTcode=>false, LeeTcode=>false, LEEtCODE=>false.\\n```\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool a= true,b=true;//a=>all after first are upper, b=>all after first are lower.\\n        for(int i=1; i<word.size(); i++){\\n            if(word[i]<\\'A\\' || word[i]>\\'Z\\')a= false;\\n            if(word[i]<\\'a\\' || word[i]>\\'z\\')b= false;\\n        }\\n        bool iscap=false;\\n        if(word[0]>=\\'A\\' && word[0]<=\\'Z\\')iscap=true;\\n        if(iscap&& a)return true; //first case from the explaination.\\n        if(b)return true; //second case from the explaination.\\n        return false; //otherwise false last case.\\n    }\\n};\\n\\n\\n```\\n# Thank You.",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nhere we have following possibilities:\\n    1)all the letters after the first letter \\n    are lowercase or uppercase to be true.\\n        a)if all other letters are uppercase \\n        then the first letter should be capital.\\n            eg. lEETCODE=>false, LEETCODE=>true\\n        b)if all other letters are lowercase \\n        then the first letter can be lowercase or uppercase\\n        doesn\\'t matter.\\n            eg. leetcode=>true, Leetcode=>true\\n\\n    in all other cases solution will be false.\\n            eg. leeTcode=>false, LeeTcode=>false, LEEtCODE=>false.\\n```\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool a= true,b=true;//a=>all after first are upper, b=>all after first are lower.\\n        for(int i=1; i<word.size(); i++){\\n            if(word[i]<\\'A\\' || word[i]>\\'Z\\')a= false;\\n            if(word[i]<\\'a\\' || word[i]>\\'z\\')b= false;\\n        }\\n        bool iscap=false;\\n        if(word[0]>=\\'A\\' && word[0]<=\\'Z\\')iscap=true;\\n        if(iscap&& a)return true; //first case from the explaination.\\n        if(b)return true; //second case from the explaination.\\n        return false; //otherwise false last case.\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983332,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int i=0,ucnt=0,lcnt=0;\\n        for(i=0;i<word.size();i++)\\n        {\\n            if(word[i]>=65&&word[i]<=90)\\n            ucnt++;\\n            else\\n            lcnt++;\\n        }\\n        if(lcnt==0||ucnt==0||(ucnt==1&&word[0]>=65&&word[0]<=90))\\n        return true;\\n        else\\n        return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int i=0,ucnt=0,lcnt=0;\\n        for(i=0;i<word.size();i++)\\n        {\\n            if(word[i]>=65&&word[i]<=90)\\n            ucnt++;\\n            else\\n            lcnt++;\\n        }\\n        if(lcnt==0||ucnt==0||(ucnt==1&&word[0]>=65&&word[0]<=90))\\n        return true;\\n        else\\n        return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983098,
                "title": "c-simple-o-n-approach",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:0(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        \\n        int count=0;\\n        for(int i=0;i<word.length();i++){\\n            if(isupper(word[i])){\\n                count++;\\n            }\\n        }\\n        if(count==word.length() || count==0) return true;\\n        if(count==1 && isupper(word[0])) return true;\\n        else return false;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        \\n        int count=0;\\n        for(int i=0;i<word.length();i++){\\n            if(isupper(word[i])){\\n                count++;\\n            }\\n        }\\n        if(count==word.length() || count==0) return true;\\n        if(count==1 && isupper(word[0])) return true;\\n        else return false;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983051,
                "title": "simple-c-code-for-beginner",
                "content": "\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n    \\n        int cntsmall=0, cntcap=0;\\n        for(int i=0; i<word.size(); i++){\\n           if(isupper(word[i])){\\n               cntcap++;\\n           }\\n           else{\\n               cntsmall++;\\n           }\\n        }\\n\\n        if(cntcap==0 or cntsmall==0) return true;\\n        if(cntcap==1){\\n            if(isupper(word[0])){\\n                return true;\\n            }\\n            \\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n    \\n        int cntsmall=0, cntcap=0;\\n        for(int i=0; i<word.size(); i++){\\n           if(isupper(word[i])){\\n               cntcap++;\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 2982899,
                "title": "java-100-faster-3-line-code-without-any-loop",
                "content": "**PLEASE UPVOTE IF YOU LIKE IT**\\n\\n\\nTIME COMPLEXITY : O(1);\\nSPACE COMPLEXITY: O(1);\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capital = word.toUpperCase();\\n        String small = word.toLowerCase();\\n        String firstLetter = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capital) || word.equals(small) || word.equals(firstLetter)) return true;\\n        else return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capital = word.toUpperCase();\\n        String small = word.toLowerCase();\\n        String firstLetter = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capital) || word.equals(small) || word.equals(firstLetter)) return true;\\n        else return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982826,
                "title": "easy-approach-java-solution-beats-100",
                "content": "##### ***If you guys find it useful then do Upvote! Happy Coding!!!***\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int n = word.length();\\n        String first = word.substring(0, 1);\\n        String shabdha = word.substring(1, n);\\n        \\n        if(word == word.toUpperCase()) return true;\\n        if(word == word.toLowerCase()) return true;\\n        if(first == first.toUpperCase() && shabdha == shabdha.toLowerCase()) return true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int n = word.length();\\n        String first = word.substring(0, 1);\\n        String shabdha = word.substring(1, n);\\n        \\n        if(word == word.toUpperCase()) return true;\\n        if(word == word.toLowerCase()) return true;\\n        if(first == first.toUpperCase() && shabdha == shabdha.toLowerCase()) return true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982337,
                "title": "c-100-faster-easiest-iterative-approach-comparison-with-ascii-values",
                "content": "\\n\\n# Code\\n```\\n\\n//ASCII values of A-Z is [65,90] and for a-z is [97,122].\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        \\n        if(word.length() == 1)\\n            return true;\\n\\n        if(word[0]<97){\\n            if(word[1]<97){\\n                for(int i=2;i<word.length();i++){\\n                    if(word[i]>=97)\\n                        return false;\\n                }\\n            }else{\\n                for(int i=2;i<word.length();i++){\\n                    if(word[i]<97)\\n                        return false;\\n                }\\n            }\\n        }else{\\n            for(int i=1;i<word.length();i++){\\n                if(word[i]<97)\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\n//ASCII values of A-Z is [65,90] and for a-z is [97,122].\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        \\n        if(word.length() == 1)\\n            return true;\\n\\n        if(word[0]<97){\\n            if(word[1]<97){\\n                for(int i=2;i<word.length();i++){\\n                    if(word[i]>=97)\\n                        return false;\\n                }\\n            }else{\\n                for(int i=2;i<word.length();i++){\\n                    if(word[i]<97)\\n                        return false;\\n                }\\n            }\\n        }else{\\n            for(int i=1;i<word.length();i++){\\n                if(word[i]<97)\\n                    return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982328,
                "title": "clean-short-learner-friendly-java-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n# Code\\n```java []\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        boolean islower = true, isupper = true;\\n        for(int i=1; i<word.length(); i++){\\n            if(Character.isLowerCase(word.charAt(i)))   isupper = false;\\n            else    islower = false;\\n        }\\n        return islower || (isupper && Character.isUpperCase(word.charAt(0)));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        boolean islower = true, isupper = true;\\n        for(int i=1; i<word.length(); i++){\\n            if(Character.isLowerCase(word.charAt(i)))   isupper = false;\\n            else    islower = false;\\n        }\\n        return islower || (isupper && Character.isUpperCase(word.charAt(0)));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982182,
                "title": "one-liner-in-kotlin",
                "content": "# Intuition\\nA re-framing of the stated valid capitalisation rules is:\\n* All letters are upper-case; or\\n* All letters after the first are lower case (irrespective of the case of the first letter)\\n\\n# Code\\n```\\nclass Solution {\\n    fun detectCapitalUse(word: String) =\\n        word.all { it.isUpperCase() } || word.drop(1).all { it.isLowerCase() }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun detectCapitalUse(word: String) =\\n        word.all { it.isUpperCase() } || word.drop(1).all { it.isLowerCase() }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982076,
                "title": "easy-c-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse count of capital letters in string to detect Capital.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nCalculate count of every uppercase character in the string, if the count is equal to the length of the string i.e. all letters are capital (Case 1) so return true. If count is 0, i.e. all letters are small (Case 2) so return true. And, if only first letter is capital (Case 3) for this, check if first letter is capital if yes make a separate counter and if this counter is equal to original counter and both are equal to 1 only. i.e. only first letter is capital so return true, else false.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N) where N is the length of the string.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1) as we are not using any extra space.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n      int n = word.length(),count1=0,count2=0;\\n      if(word[0]>=\\'A\\' and word[0]<=\\'Z\\')\\n      count1++;\\n\\n      for(int i=0;i<n;i++)\\n      {\\n          if(word[i]>=\\'A\\' and word[i]<=\\'Z\\')\\n          count2++;\\n      }\\n\\n      if(count2 == n || count2 == 0 || (count1 == 1 and count2==1))\\n      return true;\\n      else\\n      return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n      int n = word.length(),count1=0,count2=0;\\n      if(word[0]>=\\'A\\' and word[0]<=\\'Z\\')\\n      count1++;\\n\\n      for(int i=0;i<n;i++)\\n      {\\n          if(word[i]>=\\'A\\' and word[i]<=\\'Z\\')\\n          count2++;\\n      }\\n\\n      if(count2 == n || count2 == 0 || (count1 == 1 and count2==1))\\n      return true;\\n      else\\n      return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715652,
                "title": "c-easy-understanding-2-line-solution",
                "content": "```\\npublic class Solution\\n{\\n  public bool DetectCapitalUse(string word) \\n  {\\n    int capitalCount = word.Count(c => Char.IsUpper(c));\\n\\n    return (capitalCount == word.Length) || capitalCount == 0 || (capitalCount == 1 && Char.IsUpper(word[0]));\\n  }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution\\n{\\n  public bool DetectCapitalUse(string word) \\n  {\\n    int capitalCount = word.Count(c => Char.IsUpper(c));\\n\\n    return (capitalCount == word.Length) || capitalCount == 0 || (capitalCount == 1 && Char.IsUpper(word[0]));\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715381,
                "title": "c-python-simple-short-and-clean-solutions",
                "content": "**C++:**\\n```\\nclass Solution {\\npublic:\\n    bool is_all_upper(string word) {\\n        for (auto letter : word) if (islower(letter)) return false;\\n        return true;\\n    }\\n    \\n    bool is_all_lower(string word) {\\n        for (auto letter : word) if (isupper(letter)) return false;\\n        return true;\\n    }\\n    \\n    bool detectCapitalUse(string word) {\\n        if (word.size() < 2) return true;\\n        \\n        if (isupper(word[0])) {\\n            if (is_all_upper(word) || is_all_lower(word.substr(1))) \\n                return true;\\n        }\\n        \\n        else if (is_all_lower(word)) return true;\\n        \\n        return false;\\n    }\\n};\\n```\\n**Python:**\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word) < 2:\\n            return True\\n        \\n        if word[0].isupper():\\n            if word[1:].islower() or word.isupper():\\n                return True\\n            \\n        elif word.islower():\\n            return True\\n        \\n        return False\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool is_all_upper(string word) {\\n        for (auto letter : word) if (islower(letter)) return false;\\n        return true;\\n    }\\n    \\n    bool is_all_lower(string word) {\\n        for (auto letter : word) if (isupper(letter)) return false;\\n        return true;\\n    }\\n    \\n    bool detectCapitalUse(string word) {\\n        if (word.size() < 2) return true;\\n        \\n        if (isupper(word[0])) {\\n            if (is_all_upper(word) || is_all_lower(word.substr(1))) \\n                return true;\\n        }\\n        \\n        else if (is_all_lower(word)) return true;\\n        \\n        return false;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word) < 2:\\n            return True\\n        \\n        if word[0].isupper():\\n            if word[1:].islower() or word.isupper():\\n                return True\\n            \\n        elif word.islower():\\n            return True\\n        \\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715105,
                "title": "python-3-20ms-2-solutions-faster-than-95-one-liner-super-easy-to-understand",
                "content": "### Two One-Liners\\n***1 -***\\n\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word==word.lower() or word==word.upper() or word==(word[0].upper() + word[1:].lower()):\\n            return True\\n        return False\\n```\\n\\n***2 -***\\n\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper() or word.islower() or word.istitle()\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word==word.lower() or word==word.upper() or word==(word[0].upper() + word[1:].lower()):\\n            return True\\n        return False\\n```\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper() or word.islower() or word.istitle()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714812,
                "title": "c-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string w) {\\n      int n=w.size(),count=0;\\n      for(int i=0;i<n;i++){\\n          if(isupper(w[i])){\\n              count++;\\n          }\\n      }if(count==n or count==0 or (count==1 and isupper(w[0]))){\\n          return 1;\\n      }else{\\n          return 0;\\n      }\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string w) {\\n      int n=w.size(),count=0;\\n      for(int i=0;i<n;i++){\\n          if(isupper(w[i])){\\n              count++;\\n          }\\n      }if(count==n or count==0 or (count==1 and isupper(w[0]))){\\n          return 1;\\n      }else{\\n          return 0;\\n      }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714691,
                "title": "swift-easy-solution",
                "content": "```\\nclass Solution {\\n    func detectCapitalUse(_ word: String) -> Bool {\\n        var cap = 0\\n        for c in word {\\n            cap += c.isUppercase ? 1 :  0\\n        }\\n        return cap == word.count || cap == 0 || (cap == 1 && word.first!.isUppercase)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func detectCapitalUse(_ word: String) -> Bool {\\n        var cap = 0\\n        for c in word {\\n            cap += c.isUppercase ? 1 :  0\\n        }\\n        return cap == word.count || cap == 0 || (cap == 1 && word.first!.isUppercase)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714670,
                "title": "c-simple-solution-single-pass-with-explanation",
                "content": "This question can easily be solved by counting number of upper case letters in the word.\\n\\nWe can say that, the word is valid for these three conditions:\\n- number of upper case letters is zero\\n- number of upper case letter is equal to string length\\n- only first letter is upper case\\nElse we can return false\\n\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int countUpperCase = 0;\\n        for(int i = 0; i < word.length(); i++) {\\n            if(isupper(word[i])) countUpperCase++;\\n        }\\n        if(countUpperCase == 0 ||\\n           countUpperCase == word.length() ||\\n           countUpperCase == 1 && isupper(word[0])) return true;\\n        else return false;\\n    }\\n};\\n```\\n\\nThis solution loops through the string only once => O(n) time complexity\\nSpace used is constant => O(1) space complexity",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int countUpperCase = 0;\\n        for(int i = 0; i < word.length(); i++) {\\n            if(isupper(word[i])) countUpperCase++;\\n        }\\n        if(countUpperCase == 0 ||\\n           countUpperCase == word.length() ||\\n           countUpperCase == 1 && isupper(word[0])) return true;\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1437286,
                "title": "javascript-js",
                "content": "```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function (word) {\\n  return (\\n    word === word.toUpperCase() ||\\n    word === word.toLowerCase() ||\\n    (word[0] === word[0].toUpperCase() &&\\n      word.slice(1) === word.slice(1).toLowerCase())\\n  );\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} word\\n * @return {boolean}\\n */\\nvar detectCapitalUse = function (word) {\\n  return (\\n    word === word.toUpperCase() ||\\n    word === word.toLowerCase() ||\\n    (word[0] === word[0].toUpperCase() &&\\n      word.slice(1) === word.slice(1).toLowerCase())\\n  );\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1030643,
                "title": "easy-javascript",
                "content": "```\\nconst detectCapitalUse = word => {\\n  \\n  const isCapital = char => char >= \\'A\\' && char <= \\'Z\\';\\n  \\n  const isLower = char => char >= \\'a\\' && char <= \\'z\\';\\n  \\n  return [...word].every(char => isCapital(char)) || [...word.substring(1)].every(char => isLower(char))\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst detectCapitalUse = word => {\\n  \\n  const isCapital = char => char >= \\'A\\' && char <= \\'Z\\';\\n  \\n  const isLower = char => char >= \\'a\\' && char <= \\'z\\';\\n  \\n  return [...word].every(char => isCapital(char)) || [...word.substring(1)].every(char => isLower(char))\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 767668,
                "title": "python-c-1-line-api-solution-for-3-cases",
                "content": "Solution 1: Python purely based on API\\n\\nThe funny part(beauty) of python is handy API, which can help you easily realize the \\'Just do it\\' dream cherished by HomeDepot\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return  word.isupper() or word.islower() or word.istitle() # case 1, 2, and 3\\n        #In case you can read chinese, here is one more bonus point. \\u5468\\u4E91\\u9E4F\\u5C0F\\u54C1\\u300A\\u559C\\u5267\\u8FD9\\u70B9\\u4E8B\\u513F\\u5E72\\u5C31\\u5B8C\\u4E86\\u300B\\n\\t\\t# Python, nothing but API :)\\n```\\n\\nSolution 2: regex based solution\\n\\n```\\nimport re\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return re.fullmatch(r\"[A-Z]*|.[a-z]*\", word)\\n    \\n#[A-Z]*: case 1: all capital char\\n#[a-z]*: case 2: all lower char\\n#.[a-z]*: case 3: 0-th char is any(either upper or lower), rest are lower ones\\n# |: means the operation of \\'or \\'\\n```\\n\\nSolution 3: C++ without use any API\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        const int n = word.size();\\n        if(n == 0) return false;\\n        int capitalCnt = 0;\\n        for(char c: word) if(c >=\\'A\\' && c <=\\'Z\\') capitalCnt++;\\n        if(capitalCnt == 0 || capitalCnt == n) return true;\\n        if(capitalCnt == 1 && word[0] >=\\'A\\' && word[0] <=\\'Z\\') return true;\\n        return false;\\n    }\\n};\\n\\n```\\n\\nSolution 4: C++ API based\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        const int n = word.size();\\n        if(n == 0) return false;        \\n\\t\\tint capitalCnt = count_if(begin(word), end(word), ::isupper); // better\\n        //int capitalCnt = count_if(begin(word), end(word), [](auto i){return i >=\\'A\\' && i <=\\'Z\\';});\\t\\t\\n        if(capitalCnt == 0 || capitalCnt == n) return true;\\n        if(capitalCnt == 1 && isupper(word[0])) return true;\\n        return false;\\n    }\\n};\\n```\\n\\nReference:\\n[1] https://leetcode.com/problems/capitalize-the-title/discuss/1714386/C%2B%2B-stringstream-and-2-pointer",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return  word.isupper() or word.islower() or word.istitle() # case 1, 2, and 3\\n        #In case you can read chinese, here is one more bonus point. \\u5468\\u4E91\\u9E4F\\u5C0F\\u54C1\\u300A\\u559C\\u5267\\u8FD9\\u70B9\\u4E8B\\u513F\\u5E72\\u5C31\\u5B8C\\u4E86\\u300B\\n\\t\\t# Python, nothing but API :)\\n```\n```\\nimport re\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return re.fullmatch(r\"[A-Z]*|.[a-z]*\", word)\\n    \\n#[A-Z]*: case 1: all capital char\\n#[a-z]*: case 2: all lower char\\n#.[a-z]*: case 3: 0-th char is any(either upper or lower), rest are lower ones\\n# |: means the operation of \\'or \\'\\n```\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        const int n = word.size();\\n        if(n == 0) return false;\\n        int capitalCnt = 0;\\n        for(char c: word) if(c >=\\'A\\' && c <=\\'Z\\') capitalCnt++;\\n        if(capitalCnt == 0 || capitalCnt == n) return true;\\n        if(capitalCnt == 1 && word[0] >=\\'A\\' && word[0] <=\\'Z\\') return true;\\n        return false;\\n    }\\n};\\n\\n```\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        const int n = word.size();\\n        if(n == 0) return false;        \\n\\t\\tint capitalCnt = count_if(begin(word), end(word), ::isupper); // better\\n        //int capitalCnt = count_if(begin(word), end(word), [](auto i){return i >=\\'A\\' && i <=\\'Z\\';});\\t\\t\\n        if(capitalCnt == 0 || capitalCnt == n) return true;\\n        if(capitalCnt == 1 && isupper(word[0])) return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 767189,
                "title": "java-clean-and-simple-solution",
                "content": "I used to check each and every character.  Firstly I checked whether first character is in upper case or lower case and update flag accordingly then traverse the whole string and count how many characters are capital, if count is same as len of string means every character is in upper case and hence can return true. If the count yields 0  means every character is in lowercase and again resulting to true. Flag value is used when both these conditions are not true and checks whether the first letter is capital and rest are in lowercase, if yes, then it again returns true. If all such conditions are not matched then returns false as string is not the desired kind of capital.\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int len=word.length();\\n        StringBuilder str=new StringBuilder(word);\\n        int flag=-1;\\n        int count = 0;\\n        char c = str.charAt(0);\\n        if(c>=65 && c<=91)\\n            flag=1;\\n        for(int i=0;i<len;i++)\\n        {\\n            char ch = str.charAt(i);\\n            if(ch>=65 && ch<=91)\\n                count++;\\n        }\\n        if(count == 0 || count == len)\\n            return true;\\n        else\\n        {\\n            \\n            if(count==1 && flag==1)\\n                return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int len=word.length();\\n        StringBuilder str=new StringBuilder(word);\\n        int flag=-1;\\n        int count = 0;\\n        char c = str.charAt(0);\\n        if(c>=65 && c<=91)\\n            flag=1;\\n        for(int i=0;i<len;i++)\\n        {\\n            char ch = str.charAt(i);\\n            if(ch>=65 && ch<=91)\\n                count++;\\n        }\\n        if(count == 0 || count == len)\\n            return true;\\n        else\\n        {\\n            \\n            if(count==1 && flag==1)\\n                return true;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 759841,
                "title": "java-simple-and-concise-one-loop",
                "content": "```\\n    public boolean detectCapitalUse(String word) {\\n        boolean one = false, two = false, low = false; //one capital found, two capitals found, any low found, previously\\n        for (int i = 0; i < word.length(); i++) {\\n            if (Character. isUpperCase(word.charAt(i))) {\\n                if (low) return false;\\n                if (one) two = true;\\n                else one = true;\\n            } else {\\n                if (two) return false;\\n                low = true;\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public boolean detectCapitalUse(String word) {\\n        boolean one = false, two = false, low = false; //one capital found, two capitals found, any low found, previously\\n        for (int i = 0; i < word.length(); i++) {\\n            if (Character. isUpperCase(word.charAt(i))) {\\n                if (low) return false;\\n                if (one) two = true;\\n                else one = true;\\n            } else {\\n                if (two) return false;\\n                low = true;\\n            }\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 565166,
                "title": "scala-one-line",
                "content": "```\\nword.tail.forall(_.isLower) || word.forall(_.isUpper)\\n```",
                "solutionTags": [],
                "code": "```\\nword.tail.forall(_.isLower) || word.forall(_.isUpper)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 379414,
                "title": "easy-to-understand-c-solution-0ms",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Detect Capital.\\nMemory Usage: 8.3 MB, less than 37.50% of C++ online submissions for Detect Capital.\\n\\n```\\nbool detectCapitalUse(string word) {\\n        \\n        if(word[0] >= \\'A\\' && word[0] <= \\'Z\\')\\n            return (allLow(word.substr(1)) || allHigh(word.substr(1)));\\n        else\\n            return allLow(word.substr(1));\\n            \\n    }\\n    \\n    bool allLow(string word)\\n    {\\n        for(char ch : word)\\n            if(ch >= \\'A\\' && ch <= \\'Z\\')\\n                return false;\\n            \\n        return true;\\n    }\\n        \\n    bool allHigh(string word)\\n    {\\n        for(char ch : word)\\n            if(ch >= \\'a\\' && ch <= \\'z\\')\\n                return false;\\n        return true;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Detect Capital.\\nMemory Usage: 8.3 MB, less than 37.50% of C++ online submissions for Detect Capital.\\n\\n```\\nbool detectCapitalUse(string word) {\\n        \\n        if(word[0] >= \\'A\\' && word[0] <= \\'Z\\')\\n            return (allLow(word.substr(1)) || allHigh(word.substr(1)));\\n        else\\n            return allLow(word.substr(1));\\n            \\n    }\\n    \\n    bool allLow(string word)\\n    {\\n        for(char ch : word)\\n            if(ch >= \\'A\\' && ch <= \\'Z\\')\\n                return false;\\n            \\n        return true;\\n    }\\n        \\n    bool allHigh(string word)\\n    {\\n        for(char ch : word)\\n            if(ch >= \\'a\\' && ch <= \\'z\\')\\n                return false;\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 327715,
                "title": "python-3",
                "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w[1:].islower() or w.isupper() or len(w) < 2 \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, w: str) -> bool:\\n        return w[1:].islower() or w.isupper() or len(w) < 2 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 266880,
                "title": "python-time-o-n-space-o-1",
                "content": "```\\ndef detect_capital_use(W: str) -> bool:\\n    \"\"\"\\n    Detect Capital\\n\\n    time: O(n)\\n    space: O(1)\\n\\n    :param str W:\\n    :return bool:\\n    \"\"\"\\n    N = len(W)\\n\\n    is_capital = lambda c: ord(\"A\") <= ord(c) <= ord(\"Z\")\\n\\n    for i in range(N - 1):\\n        if i == 0 and is_capital(W[i]):\\n            continue\\n        elif is_capital(W[i]) != is_capital(W[i + 1]):\\n            return False\\n\\n    return True\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef detect_capital_use(W: str) -> bool:\\n    \"\"\"\\n    Detect Capital\\n\\n    time: O(n)\\n    space: O(1)\\n\\n    :param str W:\\n    :return bool:\\n    \"\"\"\\n    N = len(W)\\n\\n    is_capital = lambda c: ord(\"A\") <= ord(c) <= ord(\"Z\")\\n\\n    for i in range(N - 1):\\n        if i == 0 and is_capital(W[i]):\\n            continue\\n        elif is_capital(W[i]) != is_capital(W[i + 1]):\\n            return False\\n\\n    return True\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 153404,
                "title": "java-one-line-solution",
                "content": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.equals(word.toUpperCase()) || word.substring(1).equals(word.substring(1).toLowerCase());\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.equals(word.toUpperCase()) || word.substring(1).equals(word.substring(1).toLowerCase());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99367,
                "title": "c-1-liner",
                "content": "May be duplicate with other posts.\\n\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        return regex_match(word, regex(\"[A-Z]+|[a-z]+|[A-Z][a-z]*\"));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        return regex_match(word, regex(\"[A-Z]+|[a-z]+|[A-Z][a-z]*\"));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 99343,
                "title": "6ms-2-lines-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int capCnt = count_if(word.begin(), word.end(), [](char c){return c <= 'Z';});\\n        return !capCnt || capCnt == word.size() || (capCnt == 1 && word[0] <= 'Z');\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int capCnt = count_if(word.begin(), word.end(), [](char c){return c <= 'Z';});\\n        return !capCnt || capCnt == word.size() || (capCnt == 1 && word[0] <= 'Z');\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3024535,
                "title": "python3-one-line-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nString has a lot of methods, and we will need some of them, for instance \"islower()\" checks if all letters are lowercase, \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe method \"istitle()\" checks if the first letter capital\\n\"isupper()\" checks if all letters are capital\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n33ms\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return True if word.islower() or word.istitle() or word.isupper() else False\\n            \\n        \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return True if word.islower() or word.istitle() or word.isupper() else False\\n            \\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2995675,
                "title": "easy-solution-short-simple-best-method-easy-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int f=1;\\n        int a=0, b=0;\\n        if(word[0]>=\\'A\\' && word[0]<=\\'Z\\')\\n        {\\n            for(int i=1;i<word.size();i++)\\n            {\\n                if(word[i]>=\\'A\\' && word[i]<=\\'Z\\')\\n                a=1;\\n                if(word[i]>=\\'a\\' && word[i]<=\\'z\\')\\n                b=1;\\n            }\\n            if(a==1 && b==1)\\n            return false;\\n        }\\n        else\\n        {\\n            for(int i=1;i<word.size();i++)\\n            {\\n                if(word[i]>=\\'A\\' && word[i]<=\\'Z\\')\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int f=1;\\n        int a=0, b=0;\\n        if(word[0]>=\\'A\\' && word[0]<=\\'Z\\')\\n        {\\n            for(int i=1;i<word.size();i++)\\n            {\\n                if(word[i]>=\\'A\\' && word[i]<=\\'Z\\')\\n                a=1;\\n                if(word[i]>=\\'a\\' && word[i]<=\\'z\\')\\n                b=1;\\n            }\\n            if(a==1 && b==1)\\n            return false;\\n        }\\n        else\\n        {\\n            for(int i=1;i<word.size();i++)\\n            {\\n                if(word[i]>=\\'A\\' && word[i]<=\\'Z\\')\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992431,
                "title": "java-easiest-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int x = 0;\\n        for (char c : word.toCharArray()) {\\n            if (Character.isUpperCase(c)) {\\n                ++x;\\n            }\\n        }\\n        return x == 0 || x == word.length()\\n            || (x == 1 && Character.isUpperCase(word.charAt(0)));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int x = 0;\\n        for (char c : word.toCharArray()) {\\n            if (Character.isUpperCase(c)) {\\n                ++x;\\n            }\\n        }\\n        return x == 0 || x == word.length()\\n            || (x == 1 && Character.isUpperCase(word.charAt(0)));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987511,
                "title": "c-single-pass-iterative-11-lines-with-explanation",
                "content": "# \\u2728Intuition\\u2728\\nStraightforward problem with considering the **first**, **second** and the **rest** of the letters.\\n\\nThanks LeetCode for a REAL simple problem for 2023!\\n\\n# \\u2728Approach\\u2728\\nConsidering the wrong words is easier than considering the good ones.\\nSo a word is incorrectly spelled if:\\n- The second letter is not capital and there is a capital in the rest of the word (for example, FlaG), or if\\n- The first and second letters are all capital and there is a non-capital letter found.\\n\\nThat\\'s basically it! If you have any questions, concerns or complaints, feel free to post them in the comments below.\\n\\n# \\u2728Code\\u2728\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        string dic = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", dic1 = \"abcdefghijklmnopqrstuvwxyz\";\\n        bool flag = false, flag1 = false, ans = true;\\n        for (int j = 0; j < dic.size(); j++) {\\n            if (word[0] == dic[j]) flag = true;\\n            if (word[1] == dic[j]) flag1 = true;\\n        }\\n        if (!flag and flag1) ans = false;\\n        for (int i = 2; i < word.size(); i++) {\\n            for (int j = 0; j < dic.size(); j++) {\\n                if (word[i] == dic[j] and !flag1) ans = false;\\n                if (word[i] == dic1[j] and flag and flag1) ans = false;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n# \\u2728Complexity\\u2728\\n- Time complexity: $$O(n)$$ because it is an iterative one-pass algorithm\\n\\n- Space complexity: $$O(2\\\\times26) = O(1)$$ for the two dictionary strings\\n\\n---\\n\\n\\nYou do not need to upvote my solution. Feel free if you want to. At least, if you saw my solution, you are already supporting me in my heart.\\n\\nHappy coding!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        string dic = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", dic1 = \"abcdefghijklmnopqrstuvwxyz\";\\n        bool flag = false, flag1 = false, ans = true;\\n        for (int j = 0; j < dic.size(); j++) {\\n            if (word[0] == dic[j]) flag = true;\\n            if (word[1] == dic[j]) flag1 = true;\\n        }\\n        if (!flag and flag1) ans = false;\\n        for (int i = 2; i < word.size(); i++) {\\n            for (int j = 0; j < dic.size(); j++) {\\n                if (word[i] == dic[j] and !flag1) ans = false;\\n                if (word[i] == dic1[j] and flag and flag1) ans = false;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987118,
                "title": "faster-100-easy-to-undestand",
                "content": "# Intuition\\nsimple ascii comparsiom\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n         if((word[0]>=97 && word[0]<=122) && (word[1]>=65 && word[1]<=96)) return false;\\n        if(word.size()==1)  return true;\\n        for(int i=2; i<word.length(); i++)\\n        {\\n            // CASE 1//\\n            if((word[0]>=65 && word[0]<=96) && (word[1]>=65 && word[1]<=96))\\n                if((word[i])>=96 && word[i]<=122)  return false;\\n             // CASE 2//\\n             if((word[0]>=65 && word[0]<=96) && (word[1]>=97 && word[1]<=122) )\\n                if(word[i]>=65 && word[i]<=96) return false;\\n            // CASE 3//\\n             if((word[0]>=97 && word[0]<=122))\\n                if(word[i]>=65 && word[i]<=96)   return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n         if((word[0]>=97 && word[0]<=122) && (word[1]>=65 && word[1]<=96)) return false;\\n        if(word.size()==1)  return true;\\n        for(int i=2; i<word.length(); i++)\\n        {\\n            // CASE 1//\\n            if((word[0]>=65 && word[0]<=96) && (word[1]>=65 && word[1]<=96))\\n                if((word[i])>=96 && word[i]<=122)  return false;\\n             // CASE 2//\\n             if((word[0]>=65 && word[0]<=96) && (word[1]>=97 && word[1]<=122) )\\n                if(word[i]>=65 && word[i]<=96) return false;\\n            // CASE 3//\\n             if((word[0]>=97 && word[0]<=122))\\n                if(word[i]>=65 && word[i]<=96)   return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986895,
                "title": "a-quick-and-easy-solution-c",
                "content": "\\n# Approach\\nThe question is based on just two if conditions\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int c=0,f=0;\\n        for(int i=0;i<word.size();i++){\\n            if(word[i]<91){\\n                f=i;\\n                c++;\\n            }\\n        }\\n        if(c==1 && f==0)\\n            return true;\\n        if(c==word.size()||c==0)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int c=0,f=0;\\n        for(int i=0;i<word.size();i++){\\n            if(word[i]<91){\\n                f=i;\\n                c++;\\n            }\\n        }\\n        if(c==1 && f==0)\\n            return true;\\n        if(c==word.size()||c==0)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986337,
                "title": "python-solution-beats-100-7-ms",
                "content": "# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word):\\n        if len(word)<2:\\n            return True\\n        first = word[0]\\n        if first.islower():\\n            for char in range(1,len(word)):\\n                if word[char].isupper():\\n                    return False\\n        else:\\n            second = word[1]\\n            if second.islower():\\n                for char in range(2,len(word)):\\n                    if word[char].isupper():\\n                        return False\\n            else:\\n                 for char in range(2,len(word)):\\n                    if word[char].islower():\\n                        return False\\n        return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word):\\n        if len(word)<2:\\n            return True\\n        first = word[0]\\n        if first.islower():\\n            for char in range(1,len(word)):\\n                if word[char].isupper():\\n                    return False\\n        else:\\n            second = word[1]\\n            if second.islower():\\n                for char in range(2,len(word)):\\n                    if word[char].isupper():\\n                        return False\\n            else:\\n                 for char in range(2,len(word)):\\n                    if word[char].islower():\\n                        return False\\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985917,
                "title": "python-simple-solution-29ms-beats-94-74",
                "content": "# Intuition\\nThe problem is very simple and there are many approaches to it tho mine a is simple one.\\n# Approach\\nThere are 3 cases given in the problem detail just check the word for that.\\n1. all the letters are UPPER CASE\\n2. all the letters are LOWER CASE\\n3. the first letter is in UPPERCASE and the rest in LOWERCASE(so the word[0].isupper will check the first letter and word[1:].islower will check if all letters are in lower after the first case)\\n# Complexity\\n- Time complexity:\\nO(N)\\n- Space complexity:\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        elif word.islower():\\n            return True\\n        elif word[0].isupper() and word[1:].islower():\\n            return True\\n        else:\\n            return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        elif word.islower():\\n            return True\\n        elif word[0].isupper() and word[1:].islower():\\n            return True\\n        else:\\n            return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2984427,
                "title": "java-beats-100",
                "content": "# Intuition\\nThere are basically 2 use cases to check:\\n\\n1. Whether the word doesn\\'t start with lower cased character, followed by upper cased character. i.e. `aA`\\n2. If the first condition is fine, we must check that all of the following characters match the character at the second position (index=1).\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() <= 1) return true;\\n        \\n        char capA = \\'A\\';\\n        char capZ = \\'Z\\';\\n        boolean initialCap = word.charAt(0) >= capA && word.charAt(0) <= capZ;\\n        boolean isLeadingCharacterCap = word.charAt(1) >= capA && word.charAt(1) <= capZ;\\n        \\n        // case: aA\\n        if(!initialCap && isLeadingCharacterCap) return false;\\n\\n        for(int i = 2; i < word.length(); i++) {\\n            char chr = word.charAt(i);\\n            if(chr >= capA && chr <= capZ) {\\n                if(!isLeadingCharacterCap) return false;\\n            } else {\\n                if(isLeadingCharacterCap) return false;\\n            }\\n        }\\n\\n        return true;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() <= 1) return true;\\n        \\n        char capA = \\'A\\';\\n        char capZ = \\'Z\\';\\n        boolean initialCap = word.charAt(0) >= capA && word.charAt(0) <= capZ;\\n        boolean isLeadingCharacterCap = word.charAt(1) >= capA && word.charAt(1) <= capZ;\\n        \\n        // case: aA\\n        if(!initialCap && isLeadingCharacterCap) return false;\\n\\n        for(int i = 2; i < word.length(); i++) {\\n            char chr = word.charAt(i);\\n            if(chr >= capA && chr <= capZ) {\\n                if(!isLeadingCharacterCap) return false;\\n            } else {\\n                if(isLeadingCharacterCap) return false;\\n            }\\n        }\\n\\n        return true;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2984367,
                "title": "simple-java-1ms-beats-100-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n  We can see that we have to check **THREE** conditions:\\n\\n     1. 1st character UpperCase(UC) and rest are LC.\\n     2. All characters are UC.\\n     3. All characters are LC.\\n\\nWe will return **TRUE** in all of the above condition else return **FALSE**.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nFollow the below **STEPS** to understand it easily:\\n\\n    1. Find the length of the word (i.e. n).\\n    2. If n <= 1, word is valid. (return true).\\n    3. Check 1st character is the word.\\n    4. If it LowerCase(LC) then all other characters must be LC.\\n    5. If is UC, then check the 2nd character.\\n    6. If 2nd char is UC then all other chars must be UC.\\n    7. If 2nd char is LC then all other chars must be LC.\\nEventually, you will get the answer.\\n\\n              **If this solution helped you, give it a like to help others**\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n       \\n\\n\\n        // Find the length of the word.\\n        int n = word.length();\\n\\n        // if the length of word is 1 or less then it is valid.\\n        if(n <= 1) return true;\\n\\n        int i;\\n        // Check whether the 1st character is UC or LC.\\n\\n\\n        if(Character.isUpperCase(word.charAt(0)))       // 1st character is UC.\\n        {\\n            // Check whether 2nd character is UC or LC.\\n            // if UC then all other chars are UC.\\n            // if LC then all other chars are LC.\\n            if(Character.isUpperCase(word.charAt(1)))       //2nd character is UC.\\n            {\\n                // We have already checked 1st and 2nd character so the loop\\n                // will operate from 3rd character i.e. index 2.\\n                for(i = 2; i < n; i++)\\n                {\\n                    // Since 2nd char is UC so every char should be UC.\\n                    // if not then return false.\\n                    if(!Character.isUpperCase(word.charAt(i)))\\n                    {\\n                        return false;\\n                    }\\n                }\\n            }\\n            else                                            //2nd character is LC.\\n            {\\n                for(i = 2; i < n; i++)\\n                {\\n                    // Since 2nd char is LC so every char should be LC.\\n                    // if not then return false.\\n                    if(Character.isUpperCase(word.charAt(i)))\\n                    {\\n                        return false;\\n                    }\\n                }\\n            }\\n\\n        }\\n        else                                                    // 1st character is LC\\n        {\\n            // There all other characters should be LC.\\n\\n            // We have checked the 1st character so loop will operate from 2nd character i.e. index 1.\\n\\n            for(i = 1; i < n; i++)\\n            {\\n                // if we have any UC then return false.\\n                if(Character.isUpperCase(word.charAt(i)))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        // If false is not returned, then the word is valid.\\n        // Hence, return true.\\n\\n        return true;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n       \\n\\n\\n        // Find the length of the word.\\n        int n = word.length();\\n\\n        // if the length of word is 1 or less then it is valid.\\n        if(n <= 1) return true;\\n\\n        int i;\\n        // Check whether the 1st character is UC or LC.\\n\\n\\n        if(Character.isUpperCase(word.charAt(0)))       // 1st character is UC.\\n        {\\n            // Check whether 2nd character is UC or LC.\\n            // if UC then all other chars are UC.\\n            // if LC then all other chars are LC.\\n            if(Character.isUpperCase(word.charAt(1)))       //2nd character is UC.\\n            {\\n                // We have already checked 1st and 2nd character so the loop\\n                // will operate from 3rd character i.e. index 2.\\n                for(i = 2; i < n; i++)\\n                {\\n                    // Since 2nd char is UC so every char should be UC.\\n                    // if not then return false.\\n                    if(!Character.isUpperCase(word.charAt(i)))\\n                    {\\n                        return false;\\n                    }\\n                }\\n            }\\n            else                                            //2nd character is LC.\\n            {\\n                for(i = 2; i < n; i++)\\n                {\\n                    // Since 2nd char is LC so every char should be LC.\\n                    // if not then return false.\\n                    if(Character.isUpperCase(word.charAt(i)))\\n                    {\\n                        return false;\\n                    }\\n                }\\n            }\\n\\n        }\\n        else                                                    // 1st character is LC\\n        {\\n            // There all other characters should be LC.\\n\\n            // We have checked the 1st character so loop will operate from 2nd character i.e. index 1.\\n\\n            for(i = 1; i < n; i++)\\n            {\\n                // if we have any UC then return false.\\n                if(Character.isUpperCase(word.charAt(i)))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        // If false is not returned, then the word is valid.\\n        // Hence, return true.\\n\\n        return true;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983432,
                "title": "c-python-solution",
                "content": "Code for solution in both C++ & python:\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        for(int i = 1; i < word.size(); i++){\\n            if(isupper(word[1]) != isupper(word[i]) || \\n            islower(word[0]) && isupper(word[i])) return false;\\n        }        \\n        return true;\\n    }\\n};\\n```\\n```Python []\\ndef detectCapitalUse(self, word):\\n    return word.isupper() or word.islower() or word.istitle()\\n```\\n\\n*Upvote if it helped*",
                "solutionTags": [
                    "C++"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        for(int i = 1; i < word.size(); i++){\\n            if(isupper(word[1]) != isupper(word[i]) || \\n            islower(word[0]) && isupper(word[i])) return false;\\n        }        \\n        return true;\\n    }\\n};\\n```\n```Python []\\ndef detectCapitalUse(self, word):\\n    return word.isupper() or word.islower() or word.istitle()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983417,
                "title": "c-easy-solution-for-beginners",
                "content": "******Bold******# Intuition[[]()]()\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cap=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            if(word[i]>=\\'A\\' && word[i]<=\\'Z\\')\\n                cap++;\\n        }\\n        if(cap==0 || cap == word.length())\\n            return true;\\n        if(cap==1)\\n        {\\n            if(word[0]>=\\'A\\' && word[0]<=\\'Z\\')\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cap=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            if(word[i]>=\\'A\\' && word[i]<=\\'Z\\')\\n                cap++;\\n        }\\n        if(cap==0 || cap == word.length())\\n            return true;\\n        if(cap==1)\\n        {\\n            if(word[0]>=\\'A\\' && word[0]<=\\'Z\\')\\n                return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2983402,
                "title": "2-solutions-1-ms-6-ms-2-different-approaches-explained-super-easy-java",
                "content": "# Request \\uD83D\\uDE0A :\\n```\\nIf you find these solutions easy to understand and helpful, then\\nPlease Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D (Scroll Down for fastest [1 ms] approach).\\n```\\n\\n# Approach 1 : 6ms Solution [One Liner]\\n```\\nclass Solution \\n{\\n    public boolean detectCapitalUse(String word) \\n    {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}\\n```\\n# Approach 2 : 1ms Solution [Fastest]\\n**Exaplined in Comments.\\u2B07\\uFE0F\\u2B07\\uFE0F**\\n```\\nclass Solution \\n{\\n    public boolean detectCapitalUse(String word) \\n    {\\n        int count=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            char ch=word.charAt(i);\\n            if(ch >= \\'A\\' && ch <= \\'Z\\')//capital\\n                count++;\\n            if (!(count == 0 || (count == 1 && word.charAt(0) >= \\'A\\' &&\\n             word.charAt(0) <= \\'Z\\') || count == i + 1))//no charcter || single character(lower) || any lower case in between\\n               return false; \\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nIf you find these solutions easy to understand and helpful, then\\nPlease Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D (Scroll Down for fastest [1 ms] approach).\\n```\n```\\nclass Solution \\n{\\n    public boolean detectCapitalUse(String word) \\n    {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}\\n```\n```\\nclass Solution \\n{\\n    public boolean detectCapitalUse(String word) \\n    {\\n        int count=0;\\n        for(int i=0;i<word.length();i++)\\n        {\\n            char ch=word.charAt(i);\\n            if(ch >= \\'A\\' && ch <= \\'Z\\')//capital\\n                count++;\\n            if (!(count == 0 || (count == 1 && word.charAt(0) >= \\'A\\' &&\\n             word.charAt(0) <= \\'Z\\') || count == i + 1))//no charcter || single character(lower) || any lower case in between\\n               return false; \\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982463,
                "title": "c-code",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Iterate all character and check give conditions.\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int upper=0;\\n        int lower=0;\\n        int firstLetter=1;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n                upper++;\\n            else if(islower(word[i]))\\n                lower++;\\n            if(isupper(word[0]) && i>0)\\n                {\\n                    if(islower(word[i]))\\n                        firstLetter++;\\n                }\\n        }   \\n        int n=word.length();\\n        // cout<<upper<<\" \"<<lower<<\" \"<<firstLetter<<endl;\\n        if(upper==n || lower==n|| firstLetter==n)\\n            return 1;\\n        else \\n            return 0;  \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int upper=0;\\n        int lower=0;\\n        int firstLetter=1;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n                upper++;\\n            else if(islower(word[i]))\\n                lower++;\\n            if(isupper(word[0]) && i>0)\\n                {\\n                    if(islower(word[i]))\\n                        firstLetter++;\\n                }\\n        }   \\n        int n=word.length();\\n        // cout<<upper<<\" \"<<lower<<\" \"<<firstLetter<<endl;\\n        if(upper==n || lower==n|| firstLetter==n)\\n            return 1;\\n        else \\n            return 0;  \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2982429,
                "title": "dart-concise-solution",
                "content": "\\nIf you Learned something new please give it upvote;\\notherwise thank you for having a look \\uD83D\\uDE4F\\uD83C\\uDFFB\\n\\n# Code\\n```\\nclass Solution {\\n  bool detectCapitalUse(String word) {\\n      int cnt = 0;\\n        for(int c in ascii.encode(word)) if(90 - c >= 0) cnt++;\\n        return ((cnt==0 || cnt==word.length ) || (cnt==1 && 90 - word.codeUnitAt(0)>=0));\\n  }\\n}\\n```\\n\\n\\nPls upvote the solution if you found helpful, it means a lot.\\nAlso comment down your doubts.\\nHappy Coding :)",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  bool detectCapitalUse(String word) {\\n      int cnt = 0;\\n        for(int c in ascii.encode(word)) if(90 - c >= 0) cnt++;\\n        return ((cnt==0 || cnt==word.length ) || (cnt==1 && 90 - word.codeUnitAt(0)>=0));\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2982107,
                "title": "js-intuitive-fast-one-with-comments",
                "content": "# Intuition\\nReturn true or false depends on the first char.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nvar detectCapitalUse = function (word) {\\n//If word starts with capital, all the rest should be\\n//either All lowercase or All uppercase\\n  if (word[0]===word[0].toUpperCase()) {\\n    return (\\n      word.substring(1) === word.substring(1).toLowerCase() ||\\n      word.substring(1) === word.substring(1).toUpperCase()\\n    );\\n  } else {\\n//If the first char is lowercase, whole string should be lowercase\\n    return word === word.toLowerCase();\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar detectCapitalUse = function (word) {\\n//If word starts with capital, all the rest should be\\n//either All lowercase or All uppercase\\n  if (word[0]===word[0].toUpperCase()) {\\n    return (\\n      word.substring(1) === word.substring(1).toLowerCase() ||\\n      word.substring(1) === word.substring(1).toUpperCase()\\n    );\\n  } else {\\n//If the first char is lowercase, whole string should be lowercase\\n    return word === word.toLowerCase();\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2982045,
                "title": "c-simple-solution-0-ms",
                "content": "```\\n bool detectCapitalUse(string word) \\n    {\\n        int capital=0;\\n        int small=0;\\n        int first=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(i==0)\\n            {\\n                if(word[i]>=65 && word[i]<=90)\\n                    first++;\\n                \\n            }\\n            if(word[i]>=97 && word[i]<=122)\\n                small++;\\n            else\\n                 capital++;\\n        }\\n        if(first==1 && capital==1 && small==word.size()-1)\\n            return true;\\n         if(word.size()==capital && small==0)\\n            return true;\\n         if(word.size()==small && capital==0)\\n            return true;\\n        \\n            return false;\\n            \\n        \\n        \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n bool detectCapitalUse(string word) \\n    {\\n        int capital=0;\\n        int small=0;\\n        int first=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(i==0)\\n            {\\n                if(word[i]>=65 && word[i]<=90)\\n                    first++;\\n                \\n            }\\n            if(word[i]>=97 && word[i]<=122)\\n                small++;\\n            else\\n                 capital++;\\n        }\\n        if(first==1 && capital==1 && small==word.size()-1)\\n            return true;\\n         if(word.size()==capital && small==0)\\n            return true;\\n         if(word.size()==small && capital==0)\\n            return true;\\n        \\n            return false;\\n            \\n        \\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2982030,
                "title": "daily-leetcode-solution-easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isCapital(string s){\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'A\\'&&s[i]<=\\'Z\\'){\\n                continue;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    bool isLowerCase(string s){\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'a\\'&&s[i]<=\\'z\\'){\\n                continue;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    bool isIdeal(string s){\\n        string r=s.substr(1,s.size()-1);\\n        string p=s.substr(0,1);\\n        return isCapital(p)&&isLowerCase(r);\\n    }\\n    bool detectCapitalUse(string word) {\\n        return isCapital(word)||isLowerCase(word)||isIdeal(word);\\n    }\\n};\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isCapital(string s){\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'A\\'&&s[i]<=\\'Z\\'){\\n                continue;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    bool isLowerCase(string s){\\n        for(int i=0;i<s.size();i++){\\n            if(s[i]>=\\'a\\'&&s[i]<=\\'z\\'){\\n                continue;\\n            }\\n            else{\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    bool isIdeal(string s){\\n        string r=s.substr(1,s.size()-1);\\n        string p=s.substr(0,1);\\n        return isCapital(p)&&isLowerCase(r);\\n    }\\n    bool detectCapitalUse(string word) {\\n        return isCapital(word)||isLowerCase(word)||isIdeal(word);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2779818,
                "title": "c-easy-100-faster-than-all",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n=word.length();\\n        int c1=0,c2=0;\\n        if(word[0]>=65 && word[0]<=90)\\n        {\\n            c2++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(word[i]>=65 && word[i]<=90)\\n            {\\n                c1++;\\n            }\\n\\n        }\\n        if(c1==n)\\n        {\\n            return true;\\n        }\\n        else if(c1==0)\\n        {\\n            return true;\\n        }\\n        else if(c1==1 && c2==1)\\n        {\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n=word.length();\\n        int c1=0,c2=0;\\n        if(word[0]>=65 && word[0]<=90)\\n        {\\n            c2++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(word[i]>=65 && word[i]<=90)\\n            {\\n                c1++;\\n            }\\n\\n        }\\n        if(c1==n)\\n        {\\n            return true;\\n        }\\n        else if(c1==0)\\n        {\\n            return true;\\n        }\\n        else if(c1==1 && c2==1)\\n        {\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1716617,
                "title": "detect-capital-c-simplest-approach-count-capital-characters-o-n-time-o-1-space",
                "content": "**Approach is as follows:-**\\n\\n1. Iterate over the string and count the capital characters.\\n2. Return True if:-\\n\\ta. Count of Capital Characters is equal to the length of String => **All Capital (1st Condition)**\\n\\tb. Count of Capital Characters if 0 => **All Small (2nd Condition)**\\n\\tc. Count of Capital is 1 and the Capital Character is on 0th index => **Only first letter Capital (3rd Condition)**\\n3. Return False otherwise\\n\\n**!! DONE !!**\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int size = word.size();\\n        int capCount = 0;\\n        \\n        for(int i = 0; i < size; i++)\\n        {\\n            if(isupper(word[i]))\\n                capCount++;\\n        }\\n        \\n        if(capCount == size)\\n            return true;\\n        else if(capCount == 1 && isupper(word[0]))\\n            return true;\\n        else if(capCount == 0)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int size = word.size();\\n        int capCount = 0;\\n        \\n        for(int i = 0; i < size; i++)\\n        {\\n            if(isupper(word[i]))\\n                capCount++;\\n        }\\n        \\n        if(capCount == size)\\n            return true;\\n        else if(capCount == 1 && isupper(word[0]))\\n            return true;\\n        else if(capCount == 0)\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1716450,
                "title": "detect-capital-java-o-n-time-o-1-space",
                "content": "class Solution {\\n\\n    public boolean detectCapitalUse(String word) {\\n        int capitals = 0;\\n        for (char ch : word.toCharArray()) {\\n            if (Character.isUpperCase(ch)) capitals++;\\n        }\\n        // case 1 and case 2\\n        if (capitals == word.length() || capitals == 0) return true;\\n        return capitals == 1 && Character.isUpperCase(word.charAt(0));\\n    }\\n}\\n\\n**Please help to UPVOTE if this post is useful for you.\\nIf you have any questions, feel free to comment below.\\nHAPPY CODING \\u2665\\nLOVE CODING**",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution {\\n\\n    public boolean detectCapitalUse(String word) {\\n        int capitals = 0;\\n        for (char ch : word.toCharArray()) {\\n            if (Character.isUpperCase(ch)) capitals++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1715638,
                "title": "c-o-n-easy-solution-3-lines",
                "content": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        for(int i = 1; i < word.size(); i++){\\n        if(isupper(word[1]) != isupper(word[i]) || \\n           islower(word[0]) && isupper(word[i])) return false;\\n    }        \\n    return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        for(int i = 1; i < word.size(); i++){\\n        if(isupper(word[1]) != isupper(word[i]) || \\n           islower(word[0]) && isupper(word[i])) return false;\\n    }        \\n    return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715135,
                "title": "simple-intuitive-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size();\\n        \\n        if(n == 1) return true;\\n        \\n        if(word[0] >= 65 && word[0] <= 90){\\n            if(word[1] >= 65 && word[1] <= 90){\\n                //All Caps\\n                for(int i = 2; i < n; i++){\\n                    if(word[i] >= 97 && word[i] <= 122){\\n                        return false;\\n                    }\\n                }\\n                return true;\\n            }else{\\n                //First Cap\\n                for(int i = 2; i < n; i++){\\n                    if(word[i] >= 65 && word[i] <= 90){\\n                        return false;\\n                    }\\n                }\\n                return true;\\n            }\\n        }else{\\n            //All Lowercase\\n            for(int i = 1; i < n; i++){\\n                if(word[i] >= 65 && word[i] <= 90){\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size();\\n        \\n        if(n == 1) return true;\\n        \\n        if(word[0] >= 65 && word[0] <= 90){\\n            if(word[1] >= 65 && word[1] <= 90){\\n                //All Caps\\n                for(int i = 2; i < n; i++){\\n                    if(word[i] >= 97 && word[i] <= 122){\\n                        return false;\\n                    }\\n                }\\n                return true;\\n            }else{\\n                //First Cap\\n                for(int i = 2; i < n; i++){\\n                    if(word[i] >= 65 && word[i] <= 90){\\n                        return false;\\n                    }\\n                }\\n                return true;\\n            }\\n        }else{\\n            //All Lowercase\\n            for(int i = 1; i < n; i++){\\n                if(word[i] >= 65 && word[i] <= 90){\\n                    return false;\\n                }\\n            }\\n            return true;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714969,
                "title": "python-97-faster-one-liner-easy-to-understand",
                "content": "![image](https://assets.leetcode.com/users/images/f8754cfb-791b-451f-a29c-cc34f2d99c79_1643005499.2950654.png)\\n\\n\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return True if word.isupper() or word.islower() or word == word.capitalize() else False\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return True if word.isupper() or word.islower() or word == word.capitalize() else False\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1714598,
                "title": "simple-code-no-inbuilt-functions-100-faster",
                "content": "```\\n\\t/*a-> case-1\\n\\tb->case->2\\n\\tc->case-3\\n\\t*/\\n\\nbool detectCapitalUse(string w) {\\n        int n= w.length();\\n        int a=0,b=0,c=0;\\n       if(w[0]>=\\'a\\'&&w[0]<=\\'z\\')\\n\\t\\t\\t\\t\\t   b++;\\n        else if(w[0]>=\\'A\\'&&w[0]<=\\'Z\\')\\n        {\\n            a++;\\n            c++;\\n        }\\n        for(int i=1;i<n;i++)\\n        {\\n            if(w[i]>=\\'A\\'&& w[i]<=\\'Z\\')\\n                a++;\\n           else if(w[i]>=\\'a\\' && w[0]<=\\'z\\')\\n           {\\n               b++;\\n               c++;\\n           }\\n        }\\n        \\n        if(a==n||b==n||c==n)\\n            return true;\\n        return false;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\n\\t/*a-> case-1\\n\\tb->case->2\\n\\tc->case-3\\n\\t*/\\n\\nbool detectCapitalUse(string w) {\\n        int n= w.length();\\n        int a=0,b=0,c=0;\\n       if(w[0]>=\\'a\\'&&w[0]<=\\'z\\')\\n\\t\\t\\t\\t\\t   b++;\\n        else if(w[0]>=\\'A\\'&&w[0]<=\\'Z\\')\\n        {\\n            a++;\\n            c++;\\n        }\\n        for(int i=1;i<n;i++)\\n        {\\n            if(w[i]>=\\'A\\'&& w[i]<=\\'Z\\')\\n                a++;\\n           else if(w[i]>=\\'a\\' && w[0]<=\\'z\\')\\n           {\\n               b++;\\n               c++;\\n           }\\n        }\\n        \\n        if(a==n||b==n||c==n)\\n            return true;\\n        return false;\\n        \\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1714417,
                "title": "javascript-solution-easy-to-understand",
                "content": "```\\nvar detectCapitalUse = function(word) {\\n    if (word === word.toUpperCase()) return true;\\n    if (word === word.toLowerCase()) return true;\\n    \\n    if (word[0] === word[0].toUpperCase()) {\\n        let leftOutStr = word.slice(1);\\n        if (leftOutStr === leftOutStr.toLowerCase()) return true;\\n    }\\n    \\n    return false;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar detectCapitalUse = function(word) {\\n    if (word === word.toUpperCase()) return true;\\n    if (word === word.toLowerCase()) return true;\\n    \\n    if (word[0] === word[0].toUpperCase()) {\\n        let leftOutStr = word.slice(1);\\n        if (leftOutStr === leftOutStr.toLowerCase()) return true;\\n    }\\n    \\n    return false;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1403643,
                "title": "python-without-builtin-string-methods",
                "content": "We are iterating over every letter checking it by `ord()`, which will give ACII value of the character.  \\nAt the end if `uppers` - number of upper characters will be checked to give us a result. \\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        res = False\\n        uppers = 0\\n        if ord(word[0]) < 97:\\n            for l in word:\\n                if ord(l) < 97:\\n                    uppers += 1\\n            \\n        else:\\n            for l in word:\\n                if ord(l) < 97:\\n                    return False\\n        \\n        if uppers == len(word) or uppers == 1 or uppers == 0:\\n            return True\\n        return False\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        res = False\\n        uppers = 0\\n        if ord(word[0]) < 97:\\n            for l in word:\\n                if ord(l) < 97:\\n                    uppers += 1\\n            \\n        else:\\n            for l in word:\\n                if ord(l) < 97:\\n                    return False\\n        \\n        if uppers == len(word) or uppers == 1 or uppers == 0:\\n            return True\\n        return False\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 767849,
                "title": "rust-elegant-one-liner",
                "content": "```\\nfn detect_capital_use(word: String) -> bool {\\n    word.chars().all(|x| x.is_uppercase()) \\n\\t|| word.chars().skip(1).all(|x| x.is_lowercase())\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfn detect_capital_use(word: String) -> bool {\\n    word.chars().all(|x| x.is_uppercase()) \\n\\t|| word.chars().skip(1).all(|x| x.is_lowercase())\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 766911,
                "title": "java-count-uppercase-letters",
                "content": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if (word == null || word.length() == 0) return true;\\n        int countUpper = 0;\\n        for (char c : word.toCharArray()) {\\n            if (Character.isUpperCase(c)) countUpper++;\\n        }\\n        return countUpper == word.length() ||\\n            countUpper == 0 ||\\n            countUpper == 1 && Character.isUpperCase(word.charAt(0));\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if (word == null || word.length() == 0) return true;\\n        int countUpper = 0;\\n        for (char c : word.toCharArray()) {\\n            if (Character.isUpperCase(c)) countUpper++;\\n        }\\n        return countUpper == word.length() ||\\n            countUpper == 0 ||\\n            countUpper == 1 && Character.isUpperCase(word.charAt(0));\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 766871,
                "title": "fastest-without-counting",
                "content": "If first letter is lowercase => all symbols should be lowercase too.\\nIf first letter is uppercase => all symbols should have the same case as second letter.\\n\\nC# code:\\n```\\n    public bool DetectCapitalUse(string word)\\n    {\\n        if(word.Length < 2) return true;\\n        var isLow = char.IsLower(word, 0) || char.IsLower(word, 1);\\n        for(int i=1;i<word.Length;i++)\\n        {\\n            if(char.IsLower(word, i) != isLow) return false;\\n        }\\n        return true;\\n    }\\n```\\n\\nPlease **UpVote** if you like this solution.\\n",
                "solutionTags": [],
                "code": "```\\n    public bool DetectCapitalUse(string word)\\n    {\\n        if(word.Length < 2) return true;\\n        var isLow = char.IsLower(word, 0) || char.IsLower(word, 1);\\n        for(int i=1;i<word.Length;i++)\\n        {\\n            if(char.IsLower(word, i) != isLow) return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 466475,
                "title": "golang-simple-solution-with-strings-package",
                "content": "```\\nfunc detectCapitalUse(word string) bool {\\n\\tif len(word) == 1 {\\n\\t\\treturn true\\n\\t}\\n\\tif word[1:] == strings.ToLower(word[1:]) {\\n\\t\\treturn true\\n\\t}\\n\\tif word == strings.ToUpper(word) {\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc detectCapitalUse(word string) bool {\\n\\tif len(word) == 1 {\\n\\t\\treturn true\\n\\t}\\n\\tif word[1:] == strings.ToLower(word[1:]) {\\n\\t\\treturn true\\n\\t}\\n\\tif word == strings.ToUpper(word) {\\n\\t\\treturn true\\n\\t}\\n\\treturn false\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 421422,
                "title": "python-1-line",
                "content": "```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        return word == word.capitalize() or word == word.lower() or word == word.upper() \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def detectCapitalUse(self, word):\\n        return word == word.capitalize() or word == word.lower() or word == word.upper() \\n```",
                "codeTag": "Java"
            },
            {
                "id": 99328,
                "title": "c-regex-solution",
                "content": "```\\nbool detectCapitalUse(string word) \\n{\\n      regex reg(\"([A-Z]*)|([A-Z][a-z]*)|([a-z]*)\");\\n      if(regex_match(word,reg))\\n          return true;\\n      return false;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nbool detectCapitalUse(string word) \\n{\\n      regex reg(\"([A-Z]*)|([A-Z][a-z]*)|([a-z]*)\");\\n      if(regex_match(word,reg))\\n          return true;\\n      return false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 99284,
                "title": "c-1-liner",
                "content": "Either all are capital or from 2nd char on wards must be lower case.\\n\\n```\\n    public bool DetectCapitalUse(string word) \\n    {\\n        return word.All(c => c - 'A' < 26) || word.Substring(1).All(c => c - 'a' >= 0);\\n    }\\n```\\n\\nfor comparison here is the non Linq version, not quite as concise!\\n\\n```\\n    public bool DetectCapitalUse(string word) \\n    {\\n        if (word.Length < 2) return true;\\n        bool firstIsCapital = word[0] - 'A' < 26;\\n        bool secondIsCapital = word[1] - 'A' < 26;\\n        if (!firstIsCapital && secondIsCapital) return false;\\n        for (int i = 2; i < word.Length; i++)\\n        {\\n            bool isCapital = word[i] - 'A' < 26;\\n            if ((secondIsCapital && !isCapital) || (!secondIsCapital && isCapital)) return false;\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public bool DetectCapitalUse(string word) \\n    {\\n        return word.All(c => c - 'A' < 26) || word.Substring(1).All(c => c - 'a' >= 0);\\n    }\\n```\n```\\n    public bool DetectCapitalUse(string word) \\n    {\\n        if (word.Length < 2) return true;\\n        bool firstIsCapital = word[0] - 'A' < 26;\\n        bool secondIsCapital = word[1] - 'A' < 26;\\n        if (!firstIsCapital && secondIsCapital) return false;\\n        for (int i = 2; i < word.Length; i++)\\n        {\\n            bool isCapital = word[i] - 'A' < 26;\\n            if ((secondIsCapital && !isCapital) || (!secondIsCapital && isCapital)) return false;\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3822354,
                "title": "python-3-one-liner",
                "content": "# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return True if word.islower() or word.istitle() or word.isupper() else False\\n            \\n        \\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return True if word.islower() or word.istitle() or word.isupper() else False\\n            \\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3289194,
                "title": "520-space-92-58-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Create a boolean variable first_capital to keep track of whether the first letter of the word is capitalized or not.\\n2. Check if all the letters in the word except the first letter are uppercase and the first letter is also uppercase by using the all() function and isupper() method of strings respectively. If the condition is true, return True.\\n3. Check if all the letters in the word are lowercase (except the first letter which can be capitalized or lowercase). If the condition is true, return True.\\n4. If none of the above conditions hold, return Fal\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        # Keep track of whether the first letter is capital or not\\n        first_capital = word[0].isupper()\\n        \\n        # Check if all letters in the word are capitals or not\\n        if all(c.isupper() for c in word[1:]) and first_capital:\\n            return True\\n        \\n        # Check if all letters in the word are not capitals\\n        if all(c.islower() for c in word[1:]):\\n            return True\\n        \\n        # If none of the above cases hold, return False\\n        return False\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        # Keep track of whether the first letter is capital or not\\n        first_capital = word[0].isupper()\\n        \\n        # Check if all letters in the word are capitals or not\\n        if all(c.isupper() for c in word[1:]) and first_capital:\\n            return True\\n        \\n        # Check if all letters in the word are not capitals\\n        if all(c.islower() for c in word[1:]):\\n            return True\\n        \\n        # If none of the above cases hold, return False\\n        return False\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3166958,
                "title": "easy-solution-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- To count uppercase and lowercase characters and apply few conditions to get AC (All Correct).\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Check if the string is empty, and if it is, return false. This is done because an empty string cannot have a capitalization format.\\n\\n- Check if the string has only one character, and if it does, return true. This is done because a string with only one character has only one possible capitalization format, which is always correct.\\n\\n- Initialize two variables, countUpperCase and countLowerCase, to count the number of uppercase and lowercase letters in the string.\\n\\n- Iterate over the string and for each character, check if it\\'s an uppercase letter or a lowercase letter. If it\\'s an uppercase letter, increment countUpperCase, and if it\\'s a lowercase letter, increment countLowerCase.\\n\\n- After counting the number of uppercase and lowercase letters, check the following conditions:\\n    - If the number of uppercase letters is equal to the length of the string, return true. This indicates that all letters in the string are uppercase, which is a correct capitalization format.\\n   - If the number of lowercase letters is equal to the length of the string, return true. This indicates that all letters in the string are lowercase, which is a correct capitalization format.\\n    - If the first letter is uppercase and the number of uppercase letters is equal to 1, return true. This indicates that the first letter is uppercase, and all other letters are lowercase, which is a correct capitalization format.\\n    - In all other cases, return false. This indicates that the string is not in any of the correct capitalization formats.\\n\\n# Complexity\\nTime complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- The time complexity of this code is O(n), where n is the length of the input string. This is because the code iterates over the entire string once to count the number of uppercase and lowercase letters, and this takes O(n) time.\\n\\nSpace complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- The space complexity of this code is O(1), because it uses only a constant amount of additional memory to store the two variables countUpperCase and countLowerCase. These two variables take constant space regardless of the size of the input string.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        if(word == \"\")\\n          return false;\\n\\n        int n = word.size();\\n        if(n == 1)\\n          return true; \\n\\n        int countUpperCase = 0;\\n        int countLowerCase = 0;\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(word[i] >= \\'A\\' && word[i] <= \\'Z\\')\\n                countUpperCase++;\\n            else\\n                countLowerCase++;    \\n        }\\n\\n        if(countUpperCase == n || countLowerCase == n)\\n            return true;\\n\\n        if(word[0] >= \\'A\\' && word[0] <= \\'Z\\' && countUpperCase == 1)\\n            return true;\\n\\n        return false;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        if(word == \"\")\\n          return false;\\n\\n        int n = word.size();\\n        if(n == 1)\\n          return true; \\n\\n        int countUpperCase = 0;\\n        int countLowerCase = 0;\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(word[i] >= \\'A\\' && word[i] <= \\'Z\\')\\n                countUpperCase++;\\n            else\\n                countLowerCase++;    \\n        }\\n\\n        if(countUpperCase == n || countLowerCase == n)\\n            return true;\\n\\n        if(word[0] >= \\'A\\' && word[0] <= \\'Z\\' && countUpperCase == 1)\\n            return true;\\n\\n        return false;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3097775,
                "title": "using-java-regex-one-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:1\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() == 1)\\n        return true;\\n        if(word.matches(\"[A-Z]*\") || word.matches(\"^[A-Z][a-z]*\") || word.matches(\"[a-z]*\"))\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(word.length() == 1)\\n        return true;\\n        if(word.matches(\"[A-Z]*\") || word.matches(\"^[A-Z][a-z]*\") || word.matches(\"[a-z]*\"))\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2989496,
                "title": "daily-leetcode-challenge-c-day-2",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if(word.length() == 1)\\n            return true;\\n        int capitalCount = 0; // counting number of capital letter\\n        for(char ch : word){\\n            if(ch >= \\'A\\' && ch <= \\'Z\\')\\n                capitalCount++;\\n        }\\n        // for handling \"USA\" type of word\\n        if(capitalCount == word.length())\\n            return true;\\n        // for handling \"leetcode\" type of word\\n        else if(capitalCount == 0)\\n            return true;\\n        // for handling \"Google\" type of word\\n        else if(capitalCount == 1 && (word[0] >= \\'A\\' && word[0] <= \\'Z\\'))\\n            return true;\\n        else\\n            return false;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if(word.length() == 1)\\n            return true;\\n        int capitalCount = 0; // counting number of capital letter\\n        for(char ch : word){\\n            if(ch >= \\'A\\' && ch <= \\'Z\\')\\n                capitalCount++;\\n        }\\n        // for handling \"USA\" type of word\\n        if(capitalCount == word.length())\\n            return true;\\n        // for handling \"leetcode\" type of word\\n        else if(capitalCount == 0)\\n            return true;\\n        // for handling \"Google\" type of word\\n        else if(capitalCount == 1 && (word[0] >= \\'A\\' && word[0] <= \\'Z\\'))\\n            return true;\\n        else\\n            return false;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2988574,
                "title": "simple-java-code-for-detect-capital",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\nSimply look for capital characters(letters) in string (word).\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int first_char=0,count=0;\\n        if(Character.isUpperCase(word.charAt(0)))\\n           first_char++; \\n// if the first character is in uppercase i.e capital then first_count will increase by 1, this will be later used as a condition to check for first character of word whether it is capital or not.\\n       for(int i=0;i<word.length();i++)\\n       {\\n           if(Character.isUpperCase(word.charAt(i)))\\n           count++;// increases by 1 as it gets characters in uppercase i.e to check if all the letters in word are in capital.\\n      }\\n     \\n       if(count==1&&first_char==1||count==word.length()||count==0)\\n       {\\n          return true;\\n       }\\n// [count==1&&first_char==1] --> condition for words like \"Google, Leetcode\".\\n//[count==word.length()] --> condition for words like \"USA,HELLO\".\\n//[count==0] --> condition for words like \"leetcode, hello\".\\n        return false;       \\n       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int first_char=0,count=0;\\n        if(Character.isUpperCase(word.charAt(0)))\\n           first_char++; \\n// if the first character is in uppercase i.e capital then first_count will increase by 1, this will be later used as a condition to check for first character of word whether it is capital or not.\\n       for(int i=0;i<word.length();i++)\\n       {\\n           if(Character.isUpperCase(word.charAt(i)))\\n           count++;// increases by 1 as it gets characters in uppercase i.e to check if all the letters in word are in capital.\\n      }\\n     \\n       if(count==1&&first_char==1||count==word.length()||count==0)\\n       {\\n          return true;\\n       }\\n// [count==1&&first_char==1] --> condition for words like \"Google, Leetcode\".\\n//[count==word.length()] --> condition for words like \"USA,HELLO\".\\n//[count==0] --> condition for words like \"leetcode, hello\".\\n        return false;       \\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2988396,
                "title": "easy-and-beginner-friendly-java-solution-beats-100",
                "content": "\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n       char[] as = word.toCharArray();\\n       if(as.length<2) return true;\\n\\n       if(Character.isUpperCase(as[0])){\\n        if(Character.isUpperCase(as[1])){\\n           for(int i = 2; i<as.length; i++){\\n               if(!Character.isUpperCase(as[i])) return false;\\n           }                     \\n        }else{\\n           for(int i = 2; i<as.length; i++){\\n               if(Character.isUpperCase(as[i])) return false;\\n           }\\n        }\\n       }\\n\\n       else{\\n           for(int i = 1; i<as.length; i++){\\n               if(Character.isUpperCase(as[i])) return false;\\n           }\\n       }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n       char[] as = word.toCharArray();\\n       if(as.length<2) return true;\\n\\n       if(Character.isUpperCase(as[0])){\\n        if(Character.isUpperCase(as[1])){\\n           for(int i = 2; i<as.length; i++){\\n               if(!Character.isUpperCase(as[i])) return false;\\n           }                     \\n        }else{\\n           for(int i = 2; i<as.length; i++){\\n               if(Character.isUpperCase(as[i])) return false;\\n           }\\n        }\\n       }\\n\\n       else{\\n           for(int i = 1; i<as.length; i++){\\n               if(Character.isUpperCase(as[i])) return false;\\n           }\\n       }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987517,
                "title": "simple-way-without-ascii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nusing System.Globalization;\\n\\npublic class Solution {\\n    public bool DetectCapitalUse(string word) {\\n        TextInfo TI = new CultureInfo(\"en-US\",false).TextInfo;\\n        \\n        if(TI.ToTitleCase(word) == word){\\n            return true;\\n        }\\n        else if(word.Any(char.IsUpper) && word.Any(char.IsLower)){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\nusing System.Globalization;\\n\\npublic class Solution {\\n    public bool DetectCapitalUse(string word) {\\n        TextInfo TI = new CultureInfo(\"en-US\",false).TextInfo;\\n        \\n        if(TI.ToTitleCase(word) == word){\\n            return true;\\n        }\\n        else if(word.Any(char.IsUpper) && word.Any(char.IsLower)){\\n            return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987333,
                "title": "easy-soluton-with-comments",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    bool detectCapitalUse(string word)\\n    {\\n        if(word.size() == 1) // if size is one....\\n        {\\n            return true;\\n        }\\n        if(isupper(word[0])) // this is when only first char is in UPPER CASE...\\n        {\\n            bool firstchar = isupper(word[1]);\\n            for(int i = 2; i< word.size(); i++)\\n            {\\n                bool currchar = isupper(word[i]);\\n                if(currchar != firstchar)\\n                {\\n                    return false;\\n                }\\n               \\n            }\\n        }\\n        else\\n        {\\n            for(int i = 1; i < word.size(); i++) // rest ar small..\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    bool detectCapitalUse(string word)\\n    {\\n        if(word.size() == 1) // if size is one....\\n        {\\n            return true;\\n        }\\n        if(isupper(word[0])) // this is when only first char is in UPPER CASE...\\n        {\\n            bool firstchar = isupper(word[1]);\\n            for(int i = 2; i< word.size(); i++)\\n            {\\n                bool currchar = isupper(word[i]);\\n                if(currchar != firstchar)\\n                {\\n                    return false;\\n                }\\n               \\n            }\\n        }\\n        else\\n        {\\n            for(int i = 1; i < word.size(); i++) // rest ar small..\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987222,
                "title": "easy-c-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(len(word))\\n\\n- Space complexity:\\no(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt = 0;\\n        bool f = false;\\n        for(int i=0; i<word.size(); i++) {\\n            if(word[i] >= 65 && word[i] <= 90) {\\n                if(i == 0) f = true;\\n                else f = false;\\n                cnt++;\\n            }\\n        }\\n\\n        if((cnt == 1 && f)|| cnt == 0 || cnt == word.size()) return true;\\n        else return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt = 0;\\n        bool f = false;\\n        for(int i=0; i<word.size(); i++) {\\n            if(word[i] >= 65 && word[i] <= 90) {\\n                if(i == 0) f = true;\\n                else f = false;\\n                cnt++;\\n            }\\n        }\\n\\n        if((cnt == 1 && f)|| cnt == 0 || cnt == word.size()) return true;\\n        else return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987149,
                "title": "detect-capitals-solution-of-100-beats-0ms-c-code",
                "content": "# Intuition\\nTo detect capitals we can use the functions isupper and cross check the the no. of capitals\\n\\n# Approach\\nThe approch is as simple as that at first we check weather the word has a capital or not using isupper from iterating from i=0 to i=length of word then we also check the no. of lowercases that is with count2 if all are lowercases we append with count2 and check the codition that if count2 is equal to word length same for count1 so this approch is preety simple also if the word has one captial that is elseif statemenet thats also valid.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n![time.PNG](https://assets.leetcode.com/users/images/03264e32-08bb-4865-ad81-922785a3f497_1672674020.610364.png)\\n\\n\\n- Space complexity:\\n<!-- O(1) -->\\n![space.PNG](https://assets.leetcode.com/users/images/e34ad358-46ed-4685-8be0-eb8545df1e44_1672674046.7572548.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count1=0;\\n        int count2=0;\\n        for(int i=0;word[i]!=NULL;i++) {\\n            if(isupper(word.at(i))) {\\n                count1+=1;\\n            }\\n            else if(islower(word.at(i))) {\\n                count2+=1;\\n            }\\n        }\\n\\n        if(count1==word.length() || count2==word.length()) {\\n            return true;\\n        }\\n        else if(isupper(word.at(0)) && count1==1) {\\n            return true;\\n        }\\n        else {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count1=0;\\n        int count2=0;\\n        for(int i=0;word[i]!=NULL;i++) {\\n            if(isupper(word.at(i))) {\\n                count1+=1;\\n            }\\n            else if(islower(word.at(i))) {\\n                count2+=1;\\n            }\\n        }\\n\\n        if(count1==word.length() || count2==word.length()) {\\n            return true;\\n        }\\n        else if(isupper(word.at(0)) && count1==1) {\\n            return true;\\n        }\\n        else {\\n            return false;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2987127,
                "title": "c-easy-solution-using-ascii",
                "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n=word.size();\\n        int flag=0;\\n        if(n==2 && int(word[0])>96  && int(word[1]<97)) flag=1;\\n        else flag=0;\\n        for(int i=1;i<n-1;i++)\\n        {\\n            if(int(word[i])>96 && int(word[i+1])<97 \\n               || int(word[i])<97 && int(word[i+1])>96\\n               || int(word[0])>96 && (int(word[i])<97)||int(word[n])) flag=1;\\n        }\\n        if(n==1) flag=0;\\n        return flag==0;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n=word.size();\\n        int flag=0;\\n        if(n==2 && int(word[0])>96  && int(word[1]<97)) flag=1;\\n        else flag=0;\\n        for(int i=1;i<n-1;i++)\\n        {\\n            if(int(word[i])>96 && int(word[i+1])<97 \\n               || int(word[i])<97 && int(word[i+1])>96\\n               || int(word[0])>96 && (int(word[i])<97)||int(word[n])) flag=1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2986738,
                "title": "java-0ms-single-line-solution-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCheck the condition and return the Answer.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1.Check the Upperacse of Word is equals to Original word.\\n2.Check the LowerCase of Word is equals to Original word.\\n3.Check the first Charcater of word is upper or not AND also check the word.substring(1) lowercase is equals to word.substring(1) equals or not.\\n4. Return true if any one of the above is true.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return (word.toUpperCase().equals(word) || word.toLowerCase().equals(word)\\n        || (Character.isUpperCase(word.charAt(0)) && \\n        word.substring(1).toLowerCase().equals(word.substring(1))));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return (word.toUpperCase().equals(word) || word.toLowerCase().equals(word)\\n        || (Character.isUpperCase(word.charAt(0)) && \\n        word.substring(1).toLowerCase().equals(word.substring(1))));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986457,
                "title": "iterative-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst, just count the number of capital words used in the word using iteration. \\n\\nCase I - count == len(words), means all letters are uppercase and this is a valid string.\\n\\nCase II - count == 0, means all letters are lowercase and this is a valid string.\\n\\nCase III - count == 1 and word[0] == uppercase, means that the only capital letter in the string was its first letter and this is a valid string.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> \\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        count = 0\\n        for i in word:\\n            if i == i.upper():\\n                count += 1\\n        if count == len(word) or count == 0: return True\\n        if count == 1 and word[0] == word[0].upper(): return True\\n        return False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        count = 0\\n        for i in word:\\n            if i == i.upper():\\n                count += 1\\n        if count == len(word) or count == 0: return True\\n        if count == 1 and word[0] == word[0].upper(): return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986384,
                "title": "faster-than-100-c-solution-using-switch-clean-code-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThere are two possibilities, when first letter is capital and when first letter is small. There are two cases when first letter is capital i.e. word contains only capital letters and word contains only small letter except first character. There is only one case when first letter is small i.e. all small letters.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can divide this problem as first character and remaining characters of the word. Then simple if statements to catch false conditions and return true at last.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if(word.size() == 1) return true;\\n        bool first = isupper(word[0]), cap = isupper(word[1]);\\n        switch(first) {\\n            case 1:\\n                for(int i = 1; i < word.size(); i++) {\\n                    if(cap and islower(word[i])) return false;\\n                    if(!cap and isupper(word[i])) return false;\\n                } break;\\n            case 0:\\n                for(char i: word)\\n                    if(isupper(i)) return false;\\n        } return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if(word.size() == 1) return true;\\n        bool first = isupper(word[0]), cap = isupper(word[1]);\\n        switch(first) {\\n            case 1:\\n                for(int i = 1; i < word.size(); i++) {\\n                    if(cap and islower(word[i])) return false;\\n                    if(!cap and isupper(word[i])) return false;\\n                } break;\\n            case 0:\\n                for(char i: word)\\n                    if(isupper(i)) return false;\\n        } return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986096,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size(), up = 0, low = 0;\\n        for(auto c: word) {\\n            if(c >= \\'A\\' and c <= \\'Z\\') up++;\\n            else low++;\\n        }\\n        if(low == n or up == n) return true;\\n        if(low == n-1 and word[0] >= \\'A\\' and word[0] <= \\'Z\\') return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int n = word.size(), up = 0, low = 0;\\n        for(auto c: word) {\\n            if(c >= \\'A\\' and c <= \\'Z\\') up++;\\n            else low++;\\n        }\\n        if(low == n or up == n) return true;\\n        if(low == n-1 and word[0] >= \\'A\\' and word[0] <= \\'Z\\') return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985970,
                "title": "c-python-o-n-0ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- First we can simply check whether all of the characters are capital or not, we can use ascii value to check this.\\n\\n- If all are not capital, then we can check the characters excluding the first character if they are all small or not.\\n\\n- If alll characters are not capital then it does not matter if first character is capital or small.\\n\\n- Then we just just have to check for remaining characters if theyt are all small or not.\\n\\n# Complexity\\n- Time complexity: **O(n)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(1)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nCPP / C++\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool allcaps = false;\\n        for(int i=0; i<word.length(); i++) {\\n            int temp = word[i];\\n\\n            if( temp <= 90) allcaps = true;\\n            else {\\n                allcaps = false;\\n                break;\\n            }\\n        }\\n\\n        if( allcaps ) return true;\\n\\n        for(int i=1; i<word.length(); i++) {\\n            int temp = word[i];\\n            if( temp < 97 ) return false;\\n        }\\n\\n        return true;\\n        \\n    }\\n};\\n```\\n---\\nPYTHON\\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        allCaps = False\\n\\n        for i in word:\\n            if ord(i)<=90:\\n                allCaps =True\\n            else:\\n                allCaps = False\\n                break\\n        if allCaps:\\n            return True\\n\\n        for i in range(1, len(word)):\\n            if ord(word[i])<97:\\n                return False\\n\\n        \\n        return True\\n```",
                "solutionTags": [
                    "C++",
                    "Python3"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        bool allcaps = false;\\n        for(int i=0; i<word.length(); i++) {\\n            int temp = word[i];\\n\\n            if( temp <= 90) allcaps = true;\\n            else {\\n                allcaps = false;\\n                break;\\n            }\\n        }\\n\\n        if( allcaps ) return true;\\n\\n        for(int i=1; i<word.length(); i++) {\\n            int temp = word[i];\\n            if( temp < 97 ) return false;\\n        }\\n\\n        return true;\\n        \\n    }\\n};\\n```\n```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        allCaps = False\\n\\n        for i in word:\\n            if ord(i)<=90:\\n                allCaps =True\\n            else:\\n                allCaps = False\\n                break\\n        if allCaps:\\n            return True\\n\\n        for i in range(1, len(word)):\\n            if ord(word[i])<97:\\n                return False\\n\\n        \\n        return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985890,
                "title": "c-easy-to-understand-easy-to-code-string",
                "content": "# PLEASE UPVOTE IF YOU FIND MY APPROACH HELPFUL, MEANS A LOT \\uD83D\\uDE0A.\\n\\n# Approach\\n- If the first letter is in lowercase & the remaining letters are   uppercase, we must return false.\\n- And if the case of anyletter from 2nd letter doesn\\'t match with any other letters in the word we must return false.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nbool detectCapitalUse(string word)\\n{\\n    int capi = 0, start = 0, n = word.length();\\n\\n    for (int i = 0; i < n; i++)\\n    {\\n        if (isupper(word[i]))\\n        {\\n            if (i == 0)\\n                start++;\\n            capi++;\\n        }\\n    }\\n\\n    if ((capi == n) || (capi == 0) || (capi == 1 and start == 1))\\n        return true;\\n\\n    return false;\\n}\\n```\\n![tp.png](https://assets.leetcode.com/users/images/e5099861-4e14-41b7-b275-e94103a18aba_1672661738.0276158.png)\\n",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nbool detectCapitalUse(string word)\\n{\\n    int capi = 0, start = 0, n = word.length();\\n\\n    for (int i = 0; i < n; i++)\\n    {\\n        if (isupper(word[i]))\\n        {\\n            if (i == 0)\\n                start++;\\n            capi++;\\n        }\\n    }\\n\\n    if ((capi == n) || (capi == 0) || (capi == 1 and start == 1))\\n        return true;\\n\\n    return false;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2985830,
                "title": "easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string w) {\\n        int l=0,r=0,n=w.size();\\n        if(w[0]>=65 && w[0]<=90) l++;\\n        for(int i=1;i<n;i++) if(w[i]>=65 && w[i]<=90) r++;\\n        if((l==1 && r==0) || (l==0 && r==0) || (l==1 && r==n-1)) return true;\\n        return false; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string w) {\\n        int l=0,r=0,n=w.size();\\n        if(w[0]>=65 && w[0]<=90) l++;\\n        for(int i=1;i<n;i++) if(w[i]>=65 && w[i]<=90) r++;\\n        if((l==1 && r==0) || (l==0 && r==0) || (l==1 && r==n-1)) return true;\\n        return false; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2985590,
                "title": "100-faster-easy-solution",
                "content": "# Intuition\\nBased on keeping the count of the uppercase letters.\\n\\n# Approach\\nIterate through each letter of the `word.` Check if the letter is UpperCase using `Character.isUpperCase` function. Count the number of uppercase letters. Usage of uppercase is **right** in the string if:\\n- All letters in this word are capitals, like \"USA\" i.e. `count` of uppercase is equal to the `word.length()`.\\n- All letters in this word are not capitals, like \"leetcode\" i.e. `count` of uppercase is equal to $$zero$$.\\n- Only the first letter in this word is capital, like \"Google\" i.e. `count` of uppercase is equal to $$1$$ and it is the first letter of the `word`.\\n\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        int count=0;\\n        for(char c:word.toCharArray())\\n        {\\n            if(Character.isUpperCase(c))\\n                count++;\\n        }\\n        if(count == 0)\\n            return true;\\n        else if(count==word.length())\\n            return true;\\n        else if(count == 1)\\n        {\\n            if(Character.isUpperCase(word.charAt(0)))\\n                return true;\\n            else\\n                return false;\\n        }\\n        return false;\\n    }\\n}\\n```\\n![image.png](https://assets.leetcode.com/users/images/aa50eba3-c390-41b3-9dbc-5cbfc3faaecd_1672658519.026154.png)\\n**Hope it helps \\u2764\\uFE0F\\u2764\\uFE0F**\\n*Please do **Upvote** if you find it useful.*\\n*Also if you have any suggestion or query do comment.*\\n***Thank you.***\\n",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        int count=0;\\n        for(char c:word.toCharArray())\\n        {\\n            if(Character.isUpperCase(c))\\n                count++;\\n        }\\n        if(count == 0)\\n            return true;\\n        else if(count==word.length())\\n            return true;\\n        else if(count == 1)\\n        {\\n            if(Character.isUpperCase(word.charAt(0)))\\n                return true;\\n            else\\n                return false;\\n        }\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1572240,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1565724,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1574138,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1737646,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1737511,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1570095,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1737537,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1746708,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1572596,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1571902,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1572240,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1565724,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1574138,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1737646,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1737511,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1570095,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1737537,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1746708,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1572596,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1571902,
                "content": [
                    {
                        "username": "casparsu",
                        "content": "return True if word.isupper() or word.islower() or word.istitle() else False"
                    },
                    {
                        "username": "MinimumArmidillo1384",
                        "content": "Stop putting solutions in discussion"
                    },
                    {
                        "username": "andrewseva",
                        "content": "return word.isupper() or word.islower() or word.istitle()\\nis better"
                    },
                    {
                        "username": "snowingwinter",
                        "content": "[@Shivam_verma24](/Shivam_verma24) py"
                    },
                    {
                        "username": "Shivam_verma24",
                        "content": "langg ?"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for January, Day 24.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/detect-capital/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Character by Character\n\n  \n**Approach 2:** Regex\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "sagartoms",
                        "content": "The question clearly says about upper or lowecase charactes, but didn\\'t mention about numbers. \\n\\nEg: i) For the input \"A1A\", expected answer is \\'false\\'. \\nii) For the input \"A1\", my answer is \\'false\\' and expected answer is \\'true\\'. Howerver, the solution got accepted.\\n\\nDoes this mean, some additional information about numeric values should be added in question or this should be considered as an invalid testcase ? If this is an invalid testcase, Leetcode should throw Invalid Testcase message as in other problems."
                    },
                    {
                        "username": "jvdrzmnsr",
                        "content": "[@vishalpoddar2468](/vishalpoddar2468) written in constraints clearly.\\n"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "For people who are attempting this problem today, please note that the test case input CANNOT have numbers.\\nCheck the constraints; only UPPER and LOWER case alphabets."
                    },
                    {
                        "username": "vishalpoddar2468",
                        "content": "in constraints its given then the word consists of upper and lower case characters.So you can be sure that there will be no test cases where that is not the case."
                    },
                    {
                        "username": "deeksha_00",
                        "content": "Easy C++ Solution :\\nApproach: \\n1-get the length of the string\\n2-intialise caps and lowercase char count to 0\\n3-run a loop and check for uppercase and lowercase and accordingly update above initialized counters.\\n4-Return true if caps count=length or lower count =length or if first char is upper and lower count=length-1\\n5-else return false\\n\\n\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n        int l=word.length();\\n        \\n        int cap=0;int lower=0;\\n        for(int i=0;i<l;i++)\\n        {\\n            if(islower(word[i]))    lower++;\\n            else cap++;\\n\\n        }\\n        if(cap==l||lower==l||(isupper(word[0])&&lower==l-1))\\n            return true;\\n        else    return false;\\n        \\n    }\\n}; "
                    },
                    {
                        "username": "user2837M",
                        "content": "if(cap==l-1||lower==l-1||(isupper(word[0])&&lower==l-1))\\n\\n// because l=word.length also contains one length extra of null character"
                    },
                    {
                        "username": "ankitdas123",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n        String upperWord=word.toUpperCase();\\n        String lower = word.toLowerCase();\\n        String onecap= word.substring(0,1).toUpperCase()+word.substring(1);\\n        \\n        if(word==upperWord){\\n            return true;\\n        }\\n       else if(word==lower){\\n            return true;\\n        }\\n        else if(word==onecap){\\n            return true;\\n        }\\n       return false;\\n    }\\n}\\n\\n\\nwhat\\'s wrong in this code....anyone please help me??"
                    },
                    {
                        "username": "Shriyali",
                        "content": "[@Anish Roshan](/rowdyroshan108)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String capWord=word.toUpperCase();\\n        String smallWord = word.toLowerCase();\\n        String oneCap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n        if(word.equals(capWord))\\n            return true;\\n        else if(word.equals(smallWord))\\n            return true;\\n        else if(word.equals(oneCap))\\n            return true;\\n\\n        return false;\\n    }\\n}"
                    },
                    {
                        "username": "sagardambal3",
                        "content": "int count = 0;\\n        for(int i = 0; i < word.length(); i++){\\n            char c = word.charAt(i);\\n            if(c >= \\'A\\' && c <= \\'Z\\'){\\n                count++;\\n            }\\n            if(!(count == 0 || (count == 1 && word.charAt(0) <= \\'Z\\') || count == i+1)){\\n                return false;\\n            }\\n        }\\n        return true;"
                    },
                    {
                        "username": "Melhalwagui",
                        "content": "     let firstCap: string = word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();\\n\\n"
                    },
                    {
                        "username": "shreyanshshivam2",
                        "content": "You are not keeping in account of those cases where if the first letter of the word is Capital (FlaG) then in the remaining substring must have either all small (lag) or all capital (LAG) but for your onecap it will be accepted as correct. Also change your == to equals."
                    },
                    {
                        "username": "How_Absurd",
                        "content": "== is a reference comparison, i.e. both objects point to the same memory location\\n.equals() evaluates to the comparison of values in the objects "
                    },
                    {
                        "username": "rowdyroshan108",
                        "content": "[@Shriyali](/Shriyali) again error at Leetcode test case\\n"
                    },
                    {
                        "username": "Shriyali",
                        "content": "onecap will go wrong for test case \"FlaG\". It should be,\\nString onecap= word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase();"
                    },
                    {
                        "username": "dan_kerna",
                        "content": "do \nif(word.equals(upperWord))\n\nyup, welcome to Java..."
                    },
                    {
                        "username": "amiteshrajvaidya8",
                        "content": "Check the video link below to understand the solution :-\\n**THANKS FOR WATCHING\\nPLEASE UPVOTE THIS VIDEO SO THAT IT COULD REACH TO OTHERS.. I AM WORKING HARD TO UPLOAD THE SOLUTIONS.**\\nhttps://youtu.be/fvjyug-X6S8\\n"
                    },
                    {
                        "username": "nishant7372",
                        "content": "too easy..."
                    },
                    {
                        "username": "ahmz",
                        "content": "In my opinion, the regex could be broken down into the three conditions that are mentioned eg.\\n\\n``` java\\npublic boolean detectCapitalUse(String word) {\\n    return word.matches(\"[A-Z]+\") ||     // All capitals\\n        word.matches(\"[a-z]+\") ||             // All small letters\\n        word.matches(\"[A-Z]{1}[a-z]+\");  // First capital, all small\\n}\\n```"
                    },
                    {
                        "username": "eWx",
                        "content": "return (word.ToLower() == word) ? true : (word.ToUpper() == word) ? true : (word.Substring(1).ToLower() == word.Substring(1));"
                    },
                    {
                        "username": "qiushile",
                        "content": "word.ToLower() == word\\ncould be removed"
                    },
                    {
                        "username": "miumiu1",
                        "content": "var detectCapitalUse = function(word) {\\n&nbsp;&nbsp;&nbsp;&nbsp;return (/^[A-Z]+$/.test(word) || /^[a-z]+$/.test(word) || /^[A-Z][a-z]+$/.test(word)) ? true : false;\\n};"
                    },
                    {
                        "username": "Jonatanlp",
                        "content": "or simply use this regex (^[A-Z]*$)|(^[a-z]*$)|(^[A-Z]([a-z]*)$)"
                    }
                ]
            },
            {
                "id": 1576282,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 2039802,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1986858,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1984510,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1950999,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1941634,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1914815,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1911101,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1837373,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1818398,
                "content": [
                    {
                        "username": "intellisense",
                        "content": "On that day I was getting so many downvotes at an instant from 15 to i was dropped down to bottom so I take the screenshot and created a request for the same with autorized authoritites and even shared the same with ayyush on my post comments.\\n![image](https://assets.leetcode.com/users/images/246e689e-0d96-4c0e-bb10-067e76c9f7ff_1643026653.0853753.jpeg)\\n\\n![image](https://assets.leetcode.com/users/images/f7e8d103-50b8-4611-9dcb-793fe7193500_1643026322.1554852.jpeg)\\nafter that I submitted a request with leetcode authority attaching the same showing the date to when it was created and even though this perception of anyone doesn\\'t clear. I\\'m not here to give any one any clarification further.\\n![image](https://assets.leetcode.com/users/images/4d656f93-9266-4f5a-863f-bc75e9ca7261_1643026736.537105.jpeg)\\nOn the day when malik faced this issue I wasn\\'t even posted an have same commented to him i got to know only when I din\\'t saw malik post on that day and looks there was a comment on arotod post that he was being downvoted by him.\\n![image](https://assets.leetcode.com/users/images/8d3bf9fb-1561-4c72-a7e0-559cbeae8931_1643028348.3485081.jpeg)\\n\\n\\n"
                    },
                    {
                        "username": "rohit_172",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        \\n\\n        // int capitalletterka count =cnt;\\n        int cnt=0;\\n        int n=word.length();\\n        for(int i=0;i<n;i++){\\n            char ch=word.charAt(i);\\n            if(\\'A\\'<=ch && ch<=\\'Z\\')\\n            cnt++;\\n        }\\n\\n        if(cnt==n)\\n        return true;\\n\\n        if(cnt==0)\\n        return true;\\n        if(cnt==1  && (word.charAt(0)<=\\'Z\\' && word.charAt(0)>=\\'A\\'))\\n        return true;\\n\\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "im_akshay_Kale",
                        "content": "if word is \\'g\\' it expected output will true but actual answer is false.  because of this my522/551 cases passed what i have to do for this\\n"
                    },
                    {
                        "username": "geo1923",
                        "content": "Tip: write the associated state machine, then just implement it"
                    },
                    {
                        "username": "user6326vC",
                        "content": "how come \"leetcode\" will give true if we have to detect capitals?\\n"
                    },
                    {
                        "username": "bodhisatta1999",
                        "content": "Incomplete question and testcases\\nfor this -- \"ggg\" \\noutput should be false, but they expect true. "
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Why do you think `\"ggg\"` should be `false`?  \\nCase 2 in the instructions is \"*All letters in this word are not capitals, like \"leetcode\".*\""
                    },
                    {
                        "username": "izzyjr",
                        "content": "My solution in Python passes all test cases in my IDE but for some reason fails on one within leetcode. Has this ever happened to anyone. I\\'ve literally copy and pasted the code to leetcode and have used the same test cases within my IDE."
                    },
                    {
                        "username": "izzyjr",
                        "content": "Same logic, just in Java, I was able to submit without issues. Not sure what\\'s going on."
                    },
                    {
                        "username": "hieuquach",
                        "content": "My solution:\n```\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n\n        boolean firstLetterUpper = Character.isUpperCase(word.charAt(0));\n\n\t\tword = word.substring(1,word.length());\n\n\t\tboolean subUpper = word.equals(word.toUpperCase()),\n\t\t\t\tsubLower = word.equals(word.toLowerCase());\n\t\t\t\t\n\t\treturn firstLetterUpper ? subUpper || subLower : subLower;\n    }\n}\n```"
                    },
                    {
                        "username": "karanvirsagar98",
                        "content": "If all the letters are in lower case, then why it is TRUE ?\\nTestcase \"g\" should be false, because there is no capital, neither at first place nor anywhere."
                    },
                    {
                        "username": "coderboy_",
                        "content": "`class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper() or word.islower() or word.istitle():\\n            return True\\n        else:\\n            return False`\\n                "
                    }
                ]
            },
            {
                "id": 1751529,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1744492,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1740216,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1739362,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738838,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738746,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738715,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738685,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738682,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738657,
                "content": [
                    {
                        "username": "Shivam_rastogi",
                        "content": "Java code : beats 99.95%\n\nclass Solution {\n    public boolean detectCapitalUse(String word) {\n        char[] arr = word.toCharArray();\n        int n=arr.length;\n        boolean shouldSmall=false;\n        for(int i=0;i<n;i++){\n            if(!shouldSmall && Character.isLowerCase(arr[i]) )\n            {\n                if(i>1)\n                    return false;\n                shouldSmall=true;\n            }\n            else if(shouldSmall && Character.isUpperCase(arr[i]))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n}"
                    },
                    {
                        "username": "Katora07",
                        "content": "Hey just wanted to know why am i getting output as true in this code when the expected output is false for input \"FlaG\"  \n\n        if word.isupper() :\n            return('true')\n        else :\n            if word.islower() :\n                return('true')\n            else :\n                word = list(word)\n                if (''.join(word[1:])).islower():\n                    return('true')\n                else :\n                    return('false')"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Your code returns strings, not booleans. Try `True` and `False` instead of `'true'` and `'false'`.\nBTW: The first two `if` statements `return` from the function, so you don't need the `else`.\nAlso, you don't have to convert the `word` to a `list` and concatenate them back, you can just write `word[1:].islower()`"
                    },
                    {
                        "username": "alekhyaakella",
                        "content": "class Solution {\n    public boolean detectCapitalUse(String word) {\n       return word.equals(word.substring(0,1).toUpperCase()+word.substring(1).toLowerCase()) || word==word.toUpperCase() || word==word.toLowerCase();\n    }\n}\n\nThats is my code, for two conditions it working even if I give == operator but for one condition its working only if I give equals() , how come its happening? Please clarify me."
                    },
                    {
                        "username": "Niket1997",
                        "content": "Simple Java Solution || O(n) time || O(1) space\n\n```\nclass Solution {\n    // TC: O(n) n is length of word\n    // SC: O(1)\n    public boolean detectCapitalUse(String word) {\n        int numUpperCaseChars = 0;\n\n        for (int idx = 0; idx < word.length(); idx++) {\n            char c = word.charAt(idx);\n            if (Character.isUpperCase(c)) {\n                numUpperCaseChars++;\n            }\n\n            if (numUpperCaseChars > 1 && numUpperCaseChars < idx + 1) return false;\n        }\n\n        if (numUpperCaseChars == 1 && !Character.isUpperCase(word.charAt(0))) return false;\n\n        return true;\n    }\n}\n```\n"
                    },
                    {
                        "username": "user7635iP",
                        "content": "Java Solution\n ` public boolean detectCapitalUse(String word) {`\n        ` if(word.equals(word.toUpperCase()) || word.equals(word.toLowerCase())){`\n           `  return true;`\n        ` }`\n       `  else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))){`\n          `  return true;`\n        ` }`\n        ` return false;`\n `    }`"
                    },
                    {
                        "username": "faeka",
                        "content": "```\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if word.isupper():\\n            return True\\n        word = word.split()\\n        count = 0\\n        for i in range(0,len(word)):\\n            if word[i].isupper():\\n                count+=1\\n            if count>1:\\n                return False\\n        return True\\n```\\n\\nWhat could be the reason for this answer giving wrong outputs for \"FlaG\". Though isupper() was supposed to ignore this.\\n"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "If `str.split()` gets called without a `separator` it splits the strings into chunks divided by consecutive spaces.  \\nFor example: `\\'a b  c \\'.split()` returns `[\\'a\\', \\'b\\', \\'c\\']`.  \\nAnd if there is no whitespace in the original string then the result will be a list with the original string as its only element.  \\nFor exampe: `\\'FlaG\\'.split()` returns `[\\'FlaG\\']`.  \\nIf you want to convert a string to a `list` just use `list()` as a function: `list(word)`.  \\nBut in this case you don\\'t have to `.split()` the `word` at all, you can just call `word[i].isupper()` directly, or even better, you can iterate over the characters directly: `for char in word:`"
                    },
                    {
                        "username": "addixit",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n\\n\\nif (word.toUpperCase().equals(word)) { \\n      return true;\\n    } else if (word.toLowerCase().equals(word)) { \\n      return true;\\n    } else if (Character.isUpperCase(word.charAt(0)) && word.substring(1).toLowerCase().equals(word.substring(1))) { \\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }}"
                    },
                    {
                        "username": "deleted_user",
                        "content": "\\n# Approach 1\\n- First, take two variables to say, \\u201ClowerCaseCount\\u201D and \\u201CupperCaseCount\\u201D to store the count of the capital letters and the small letters which are present in the given string. Now iterate through the string and update the values accordingly, which means if a capital letter is found then increase the count of the \\u201CupperCaseCount\\u201D variable otherwise increase the \\u201ClowerCaseCount\\u201D variable.\\n\\n- Then check the first two conditions. If the length of the given string is equal to any of the variable \\u201CupperCaseCount\\u201D or \\u201ClowerCaseCount\\u201D, return true as all the letters of the word may be capital or may be small.\\n\\n- After that, check for the third given condition where first check if the first character of the string is a capital letter or not and the length of the remaining string is equal to the \\u201ClowerCaseCount\\u201D variable or not. If both of them are true, return true.\\n\\n- Finally, if none of the above conditions returns true, then return false.\\n\\n# Complexity\\n- Time Complexity\\n$$O(n)$$\\n\\n- Space Complexity\\n$$O(n)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | Counters](https://leetcode.com/problems/detect-capital/solutions/2988430/java-easy-100-fast-solution-counters/)\\n\\n---\\n\\n# Approach 2\\n- The pattern of case 1 in regex is `[A\\u2212Z]\\u2217`, where [A\\u2212Z]matches one char from \\'A\\' to \\'Z\\', \\u2217*\\u2217 represents repeat the pattern before it at least 0 times. Therefore, this pattern represents \"All capital\".\\n\\n- The pattern of case 2 in regex is `[a\\u2212z]\\u2217`, where similarly, [a\\u2212z][a-z][a\\u2212z] matches one char from \\'a\\' to \\'z\\'. Therefore, this pattern represents \"All not capital\".\\n\\n- Similarly, the pattern of case 3 in regex is `[A\\u2212Z][a\\u2212z]\\u2217`.\\n\\n- Take these three pattern together, we have `[A\\u2212Z]\\u2217\\u2223[a\\u2212z]\\u2217\\u2223[A\\u2212Z][a\\u2212z]\\u2217`, where \"|\" represents \"or\".\\n\\n- Still, we can combine case 2 and case 3, and we get `.[a\\u2212z]\\u2217`, where \".\" can matches any char.\\n\\n- Therefore, the final pattern is `[A\\u2212Z]\\u2217\\u2223.[a\\u2212z]\\u2217`.\\n\\n# Complexity\\n- Time Complexity\\nDepends On Implementation - $$O(1)$$ -> $$O(2^n)$$\\n$$O(n)$$\\n\\n-Space Complexity\\n$$O(1)$$\\n\\nRefer My Solution - [Java | Easy | 100% Fast Solution | One Liner | RegEx](https://leetcode.com/problems/detect-capital/solutions/2988495/java-easy-100-fast-solution-one-liner-regex/)"
                    },
                    {
                        "username": "arvinders",
                        "content": "Built-in methods isn\\'t always smart solution. Sometimes, all you need is a simple state machine."
                    },
                    {
                        "username": "shanu8912",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        if(isAllUpperCase(word)){\\n            return true;\\n        }else if(isAllLowerCase(word)){\\n            return true;\\n        }else if(isfirstlargeandallsmall(word)){\\n            return true;\\n        }else{\\n            return false;\\n        }\\n    }\\n\\n    public boolean isAllUpperCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toUpperCase().equals(word);\\n    }\\n\\n    public boolean isAllLowerCase(String word) {\\n        if ( word == null ) return false; // this just to avoid NPE\\n        return word.toLowerCase().equals(word);\\n    }\\n\\n    public boolean isfirstlargeandallsmall(String word){\\n        if ( word == null ) return false; // this just to avoid NPE\\n        boolean ans = true;\\n        for(int i = 1; i < word.length(); i++){\\n            if(word.charAt(i) >=\\'a\\' && word.charAt(i) <= \\'z\\'){\\n                continue;\\n            }else{\\n                ans = false;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738641,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738581,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738542,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738513,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738480,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738385,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738368,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738359,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738306,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738303,
                "content": [
                    {
                        "username": "manastiwary2067",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int cnt=0;\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                cnt++;\\n            }\\n        }\\n        if((cnt==1 && isupper(word[0]))||(cnt==word.size())||cnt==0)return true;\\n        return false;\\n    }\\n};"
                    },
                    {
                        "username": "ishwarsingh",
                        "content": "Aproach bruteforce traversing in String \\ncomplexity O(n)\\n\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        // count_Capital to count the number capital letter in word\\n        int count_Capital=0;\\n\\n        for(int i=0;i<word.length();i++)\\n        {\\n            // key is the ASCII value of letter of word index wise\\n            int key = (int) word.charAt(i);\\n            if(key>=65 && key<=90)\\n            {\\n                //incrementing the count of Capital letter\\n                count_Capital++;\\n            }\\n        }\\n        //now we have three right possibilities\\n        \\n        // 1st all letter is capital  or 2nd all letter are small leterr both condition is right\\n        System.out.print(count_Capital);\\n        if(count_Capital ==0 || count_Capital == word.length())\\n        {\\n            return true;\\n        }\\n        //3rd first letter is capital and rest are small letter\\n        else if(count_Capital ==1 && ( (int) word.charAt(0) >=65 && (int) word.charAt(0) <=90 ))\\n        {\\n            return true;\\n        }\\n        else    return false;\\n    }\\n}"
                    },
                    {
                        "username": "vh0908",
                        "content": "why is my code not working?\\nclass Solution {\\n    public boolean detectCapitalUse(String word) \\n    {\\n        String capital = word.substring(0,1);\\n        boolean firstupper = false;\\n        if(capital.equals(capital.toUpperCase()))\\n            firstupper = true;\\n        if(firstupper)\\n        {\\n            for(int i = 0; i < 100; i++)\\n            {\\n                capital = word.substring(i,1);\\n                if(!capital.equals(capital.toUpperCase()))\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        for(int i = 0; i < 100; i++)\\n        {\\n            capital = word.substring(i,1);\\n            if(capital.equals(capital.toUpperCase())))\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n}"
                    },
                    {
                        "username": "unstable",
                        "content": "#solution by Chatgpt\\nclass Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        if (word.length() == 0) {\\n        return false;\\n    }\\n    if (word.length() == 1) {\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && isupper(word[0]) && isupper(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!isupper(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    if (word.length() > 1 && islower(word[0]) && islower(word[1])) {\\n        for (int i = 1; i < word.length(); i++) {\\n            if (!islower(word[i])) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    return false; \\n    }\\n};"
                    },
                    {
                        "username": "arc-arnob",
                        "content": "Too Easy"
                    },
                    {
                        "username": "shwetang_acharya",
                        "content": "check if first char is lower(x=0) or upper(x=1). \\nnow sum all remaining chars when all are lower ? and when all are upper?"
                    },
                    {
                        "username": "giriteja94495",
                        "content": "This is a easy question but if you try to see the question like a beginner does, the code might get messy. \nFor all the beginners who felt hard to understand how to solve this question here is a quick 5mins explanation with code whose run time is 0ms and beats 100% solutions ..\n\nWe all know that run time is based on server load up, anyway just to show off my solution i'm still gonna say it . Thanks :)\n\nhttps://www.youtube.com/watch?v=LfQkjfN3QRU"
                    },
                    {
                        "username": "jahidulhossainmekat",
                        "content": "super easy question tnx [@LeetCode](/LeetCode)"
                    },
                    {
                        "username": "ginny_",
                        "content": "Return true if anyone of the given 3 conditions is true for any given word."
                    },
                    {
                        "username": "Sweta_StarCoder",
                        "content": "we can use regex\\nclass Solution {\\n    public boolean detectCapitalUse(String word) {\\n        return word.matches(\"[A-Z]*|[A-Z][a-z]+|[a-z]+\");\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1738266,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1738228,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1738226,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1738190,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1738176,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1738165,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1738087,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1738031,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1737992,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1737973,
                "content": [
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "without using count -> https://leetcode.com/problems/detect-capital/solutions/2986508/early-termination-one-piece-is-real/"
                    },
                    {
                        "username": "AlgorithmicSage",
                        "content": "#EasySolution\\nThe Question can be solved by iterating each character of word and maintaining a count of capital letters initialized by zero .\\nif count of capital letters is same as that of size of word or count of capital letter is 0 or count of capital letter is 1 with first character as capital then in above all case return true else return false."
                    },
                    {
                        "username": "208R1A0543",
                        "content": "1.check if initial character of word is capital then increment a variable d.\\n\\n2.then iterate a for loop from the next char to word length if capital then increment c.\\n\\n3. then finally if c==0 or (d==1 && c==0) or (c + d==word length) return true.\\n\\n4.else return false."
                    },
                    {
                        "username": "pr0107",
                        "content": "The approach was to count the occurences of small letter sand caps letter and in the end compare .\\n\\nFirst Case - where smallCount will be equal to size of word , then it has all small and its valid.\\n\\nSecond Case - where capsCount will be equal to size of word , then it\\'s also valid.\\n\\nThird Case - where the indexFirst will be initially -1 and if the word has first caps then the capsCount will be 1 and indexFirst will be 0 indicating that first index is capital . In the end will be checking indexFirst, smallCount, capsCount values should be 0 , word. size()-1 (because capsCount will incremented first time) , 1 .\\nif all these gets matched then it will be a pass .\\n\\nIf none of the above condition matches then return false ."
                    },
                    {
                        "username": "vishalprakash",
                        "content": "Keep your mind as simple as you can....."
                    },
                    {
                        "username": "swarnimkulshreshtha",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int U=0;\\n        for(int i=0; i<word.length()-1; i++)\\n        {\\n            char ch = word.charAt(i);\\n\\n            if(Character.isUpperCase(ch)) //Character.isUpperCase(val)\\n            U++;\\n        }\\n\\n        if(U == word.length()-1 || (Character.isUpperCase(0) && word.length()-1-U == word.length()-2 ) || U == 0)\\n        return true;\\n\\n        return false;\\n        \\n    }\\n}\\n\\n//please tell me whats wrong with this code, 523/550 testcases passed"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a look at the condition of the loop. Does this solution loop over all characters?  \\nBTW: You can simplify the second sub-expresson in the final `if` statment: `word.length()` appears on both sides so you could eliminate it."
                    },
                    {
                        "username": "pandeyharsh407",
                        "content": "Can someone tell me where am i making mistake?\\nI passed 426/550 test cases and the test cases im getting stuck is \\nword= \"FlaG\"\\nOutput= true;\\nexpected= false;\\n\\n\\n\\n `class Solution {\\npublic:\\n    bool detectCapitalUse(string word) \\n    {\\n            bool x=0;\\n// case 1 USA\\n        if(isupper(word[0]) && isupper(word[1]))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(islower(word[i]))\\n                    {x=1;\\n                    break;}\\n            }\\n        }\\n// case 2 Google\\n        else if(isupper(word[0] && islower(word[1])))\\n        {\\n            for(int i=2; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n// case 3 leetcode\\n        else if(islower(word[0]))\\n        {\\n            for(int i=1; i<word.length();i++)\\n            {\\n                if(isupper(word[i]))\\n                {\\n                    x=1;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if(x==1)\\n            return false;\\n        else \\n            return true;\\n\\n    }\\n};`"
                    },
                    {
                        "username": "siebenschlaefer",
                        "content": "Take a close look at the condition of the `if` statement for the second case, and examine the opening and closing parentheses.\\n\\nBTW: To format your code properly put a line with three backticks (<code>```</code>) before and after the code, or indent *all* lines with four additional spaces."
                    },
                    {
                        "username": "belinskyi",
                        "content": "Easy start of 2023"
                    },
                    {
                        "username": "harshup",
                        "content": "class Solution {\\npublic:\\n    bool detectCapitalUse(string word) {\\n        int count=0;\\n        if(word.size()==1)\\n        {\\n            return true;\\n        }\\n        for(int i=0;i<word.size();i++)\\n        {\\n            if(isupper(word[i]))\\n            {\\n                count++;\\n            }\\n        }\\n        if(count==1 && isupper(word[0]))\\n        {\\n            return true;\\n        }\\n        else if(count==0 || count==word.size())\\n        {\\n            return true;\\n        }\\n        else\\n        {\\n            return false;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "ritwick-roy",
                        "content": "simply check number of uppercase letters and check for conditions as given in the problem"
                    }
                ]
            },
            {
                "id": 1737971,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737890,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737780,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737772,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737760,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737758,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737752,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737737,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737680,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737679,
                "content": [
                    {
                        "username": "codoper",
                        "content": "bool detectCapitalUse(string word) {\\n\\n     string upper = word;\\n     string lower = word;\\n\\n     transform(upper.begin(), upper.end(), upper.begin(), ::toupper);\\n     transform(lower.begin(), lower.end(), lower.begin(), ::tolower);\\n\\n     \\n     if(word == upper || word == lower )\\n     return true;\\n\\n        if(isupper(word[0]))\\n         {\\n             for(int j=1; j<word.length(); j++)\\n             {\\n                 if(isupper(word[j]))\\n                 return false;\\n             }\\n             return true;\\n         }\\n\\n         return false;\\n\\n    }"
                    },
                    {
                        "username": "bhanujoshi",
                        "content": "Please watch video for better clarity https://youtu.be/23GuCXZ5IZ8"
                    },
                    {
                        "username": "jovice786",
                        "content": "Same question in daily challenge 24 Jan 2022. Thanks me later. "
                    },
                    {
                        "username": "SyedMuhammadAhmadShah123",
                        "content": "\\nI was trying to make this code in my local machine can someone explain why the code is not printing the else statement\\n`function isUpper(str) {\\n    return !/[a-z]/.test(str) && /[A-Z]/.test(str);\\n    }\\n    function capital (Word) {\\n        // console.log(word[0], word[1])\\n        // 1ST LETTER IS CAPITAL AND REST IS SMALL E.G \"Aaa\"\\n        if(isUpper(word[0]) ) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length-1) {\\n            console.log(\"isUpper(word[0]) && !isUpper(word[1])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS SMALL E.G Aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS SMALL AND REST IS SMALL E.G \"aaa\"\\n        if(!isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(!isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"!isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS SMALL AND REST IS SMALL E.G aaa\")\\n            return true\\n            }\\n        }\\n        // 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G \"AAA\"\\n        if(isUpper(word[0])) {\\n            let counter = 0\\n            for(let i = 0; i < word.length; i++) {\\n                if(isUpper(word[i])) {\\n                    counter ++\\n                }\\n            }\\n            if(counter == word.length) {\\n            console.log(\"isUpper(word[0])\")\\n            console.log(\" 1ST LETTER IS CAPITAL AND REST IS CAPITAL E.G AAA\")\\n            return true\\n            }\\n        }\\n        else {\\n            console.log(\"else\")\\n            return false\\n        }\\n\\n \\n    }\\n    word = \"Aa\"\\n    capital(word).\\n `"
                    },
                    {
                        "username": "Yokubobo",
                        "content": "Why this not working for Python3 ? the case was \"g\" it returned FALSE. \\n\\nclass Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        return word.isupper()"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "Real EASY easy problem this is\\ntry using pre-defined methods of string i.e., touppercase() etc"
                    },
                    {
                        "username": "NidhishPareek",
                        "content": "There are two approaches\n\n1, We can check when will a word is not in the correct format.\n        When it has multiple capital letters with any no of small letter.\n        It has capital letter followed by small letter.\n        It has single capital letter but not at front.\n\n\n2. We check two conditions-\n        If it is all capital.\n        Doesn't matter what first letter is, if it is all small."
                    },
                    {
                        "username": "Saikumar_",
                        "content": "can I know why for the test case 525 string is \"ggg\" is expected as true. how to proceed with this"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "because all letters are Lowercase."
                    },
                    {
                        "username": "abdul_sohail24",
                        "content": "If only we are asked such questions in an Interview :)"
                    },
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        String s =  word.substring(0,1).toUpperCase()+word.substring(1);  \\n        if(word == word.toUpperCase() || word == word.toLowerCase() || word == s) return true;\\n        else return false;\\n    }\\n}"
                    }
                ]
            },
            {
                "id": 1737678,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737667,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737632,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737609,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737604,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737589,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737547,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737486,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737462,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            },
            {
                "id": 1737447,
                "content": [
                    {
                        "username": "humaira786",
                        "content": "class Solution {\\n    public boolean helper(String s){\\n        int uc=0,lc=0;\\n        for(int i=0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(Character.isUpperCase(ch)) uc++;\\n            else lc++;\\n        }\\n        int n = s.length();\\n        if(uc == n || lc == n || (uc == 1 && Character.isUpperCase(s.charAt(0)))) return true;\\n        else return false;\\n    }\\n    public boolean detectCapitalUse(String word) {\\n        return helper(word);\\n    }\\n}\\n\\n// time complexity = O(n)\\n// space complexity = O(1)"
                    },
                    {
                        "username": "satyamroy36",
                        "content": "Beating 90% of candidates !! PYTHON 3-LINE SOLUTION !! ❤❤❤✔✔✔✔✔\n class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        if(word.isupper()):\n            return word.isupper()\n        if(word.islower()):\n            return word.islower()\n        if(word[1:].islower() and word[0].isupper()):\n            return True\n\nplease upvote and help me to gain some reputation, though I am new at competitive coding, very happy new year guys !!"
                    },
                    {
                        "username": "pkharat989",
                        "content": "Easy solution\\n`def isCapitalUsageRight(word: str) -> bool:\\n    # Check if all letters are capitals\\n    if word.isupper():\\n        return True\\n    # Check if all letters are not capitals\\n    elif word.islower():\\n        return True\\n    # Check if only the first letter is capital\\n    elif len(word) > 1 and word[0].isupper() and word[1:].islower():\\n        return True\\n    # If none of the above conditions are met, then the capital usage is not right\\n    else:\\n        return False`\\n"
                    },
                    {
                        "username": "aayushanand21",
                        "content": "class Solution:\\n    def detectCapitalUse(self, word: str) -> bool:\\n        if len(word)>1:\\n            a=word[0]\\n            b=word[1:]\\n            if word.isupper() or word.islower()  :\\n\\n                return True\\n            if a.isupper() and b.islower() :\\n                return True\\n\\n            else:\\n                return False\\n        else:\\n            return True\\n\\n"
                    },
                    {
                        "username": "anubhav_bajpai",
                        "content": "class Solution {\\n    public boolean detectCapitalUse(String word) {\\n        int c=0;\\n        for(int i=0;i<word.length();i++)\\n        if(Character.isUpperCase(word.charAt(i)))\\n        c++;\\n        if(c==word.length() || c==0)\\n        return true;\\n        else if(c==1 && Character.isUpperCase(word.charAt(0)))\\n        return true;\\n        else \\n        return false;\\n\\n    }\\n}"
                    },
                    {
                        "username": "naveen_engineer",
                        "content": "if you are here then i think you miss some cases ,\\n\\nfigure out some more cases and then easy peasy done..\\n\\nall the best buddy......................."
                    },
                    {
                        "username": "Ak_15",
                        "content": "Guys i need help for \"FlaG\" this testCase :)"
                    },
                    {
                        "username": "He_26",
                        "content": "if the word is having \"ggg\" then what is the output false or true?"
                    },
                    {
                        "username": "ahjimomo",
                        "content": "It should return `True` as the condition is fulfilled if all letters are lowercase too."
                    },
                    {
                        "username": "pavansaiyeleti",
                        "content": "true"
                    },
                    {
                        "username": "crazysamurai",
                        "content": "another ez"
                    },
                    {
                        "username": "asdju",
                        "content": "you don\\'t need to check \"Title\" case explicitly as it\\'s a loosened constraint for all-lower case:\\n `return all(c.isupper() for c in word) or all(c.islower() for c in word[1:])`\\n"
                    }
                ]
            }
        ]
    }
]