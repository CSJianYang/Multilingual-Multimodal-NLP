[
    {
        "title": "Sort Colors",
        "question_content": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.\n&nbsp;\nExample 1:\n\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\n\nExample 2:\n\nInput: nums = [2,0,1]\nOutput: [0,1,2]\n\n&nbsp;\nConstraints:\n\n\tn == nums.length\n\t1 <= n <= 300\n\tnums[i] is either 0, 1, or 2.\n\n&nbsp;\nFollow up:&nbsp;Could you come up with a one-pass algorithm using only&nbsp;constant extra space?",
        "solutions": [
            {
                "id": 26481,
                "title": "python-o-n-1-pass-in-place-solution-with-explanation",
                "content": "This is a [dutch partitioning problem][1]. We are classifying the array into four groups: red, white, unclassified, and blue. Initially we group all elements into unclassified. We iterate from the beginning as long as the white pointer is less than the blue pointer. \\n\\nIf the white pointer is red (nums[white] == 0), we swap with the red pointer and move both white and red pointer forward. If the pointer is white (nums[white] == 1), the element is already in correct place, so we don't have to swap, just move the white pointer forward. If the white pointer is blue, we swap with the latest unclassified element.\\n\\n\\n    def sortColors(self, nums):\\n        red, white, blue = 0, 0, len(nums)-1\\n        \\n        while white <= blue:\\n            if nums[white] == 0:\\n                nums[red], nums[white] = nums[white], nums[red]\\n                white += 1\\n                red += 1\\n            elif nums[white] == 1:\\n                white += 1\\n            else:\\n                nums[white], nums[blue] = nums[blue], nums[white]\\n                blue -= 1\\n                \\n                \\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Dutch_national_flag_problem",
                "solutionTags": [
                    "Python"
                ],
                "code": "This is a [dutch partitioning problem][1]. We are classifying the array into four groups: red, white, unclassified, and blue. Initially we group all elements into unclassified. We iterate from the beginning as long as the white pointer is less than the blue pointer. \\n\\nIf the white pointer is red (nums[white] == 0), we swap with the red pointer and move both white and red pointer forward. If the pointer is white (nums[white] == 1), the element is already in correct place, so we don't have to swap, just move the white pointer forward. If the white pointer is blue, we swap with the latest unclassified element.\\n\\n\\n    def sortColors(self, nums):\\n        red, white, blue = 0, 0, len(nums)-1\\n        \\n        while white <= blue:\\n            if nums[white] == 0:\\n                nums[red], nums[white] = nums[white], nums[red]\\n                white += 1\\n                red += 1\\n            elif nums[white] == 1:\\n                white += 1\\n            else:\\n                nums[white], nums[blue] = nums[blue], nums[white]\\n                blue -= 1\\n                \\n                \\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Dutch_national_flag_problem",
                "codeTag": "Java"
            },
            {
                "id": 26472,
                "title": "share-my-at-most-two-pass-constant-space-10-line-solution",
                "content": "The idea is to sweep all 0s to the left and all 2s to the right, then all 1s are left in the middle.\\n\\nIt is hard to define what is a \"one-pass\" solution but this algorithm is bounded by O(2n), meaning that at most each element will be seen and operated twice (in the case of all 0s). You may be able to write an algorithm which goes through the list only once, but each step requires multiple operations, leading the total operations larger than O(2n).\\n\\n        class Solution {\\n        public:\\n            void sortColors(int A[], int n) {\\n                int second=n-1, zero=0;\\n                for (int i=0; i<=second; i++) {\\n                    while (A[i]==2 && i<second) swap(A[i], A[second--]);\\n                    while (A[i]==0 && i>zero) swap(A[i], A[zero++]);\\n                }\\n            }\\n        };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n            void sortColors(int A[], int n) {\\n                int second=n-1, zero=0;\\n                for (int i=0; i<=second; i++) {\\n                    while (A[i]==2 && i<second) swap(A[i], A[second--]);\\n                    while (A[i]==0 && i>zero) swap(A[i], A[zero++]);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 26474,
                "title": "sharing-c-solution-with-good-explanation",
                "content": "The solution requires the use of tracking 3 positions, the Low, Mid and High.\\n\\nWe assume that the mid is the \"Unknown\" area that we must evaluate.\\n\\nIf we encounter a 0, we know that it will be on the low end of the array, and if we encounter a 2, we know it will be on the high end of the array.\\n\\nTo achieve this in one pass without preprocessing (counting), we simply traverse the unknown will generating the low and high ends.\\n\\nTake this example:\\n\\nAssume our input is: 1 0 2 2 1 0 (short for simplicity).\\n\\nRunning the algorithm by hand would look something like:\\n\\n        1 0 2 2 1 0\\n        ^         ^\\n        L         H\\n        M\\n\\n        Mid != 0 || 2\\n        Mid++\\n\\n        1 0 2 2 1 0\\n        ^ ^       ^\\n        L M       H\\n\\n        Mid == 0\\n        Swap Low and Mid\\n        Mid++\\n        Low++\\n\\n        0 1 2 2 1 0\\n          ^ ^     ^\\n          L M     H\\n\\n        Mid == 2\\n        Swap High and Mid\\n        High--\\n\\n        0 1 0 2 1 2\\n          ^ ^   ^\\n          L M   H\\n\\n        Mid == 0\\n        Swap Low and Mid\\n        Mid++\\n        Low++\\n\\n        0 0 1 2 1 2\\n            ^ ^ ^\\n            L M H\\n\\n        Mid == 2\\n        Swap High and Mid\\n        High--\\n\\n        0 0 1 1 2 2\\n            ^ ^\\n            L M\\n              H\\n\\n        Mid <= High is our exit case\\n\\nImplemented in C++, it looks like:\\n\\n    class Solution {\\n        public:\\n        void sortColors(vector<int>& nums) \\n        {\\n            int tmp = 0, low = 0, mid = 0, high = nums.size() - 1;\\n        \\n            while(mid <= high)\\n            {\\n                if(nums[mid] == 0)\\n                {\\n                    tmp = nums[low];\\n                    nums[low] = nums[mid];\\n                    nums[mid] = tmp;\\n                    low++;\\n                    mid++;\\n                }\\n                else if(nums[mid] == 1)\\n                {\\n                    mid++;\\n                }\\n                else if(nums[mid] == 2)\\n                {\\n                    tmp = nums[high];\\n                    nums[high] = nums[mid];\\n                    nums[mid] = tmp;\\n                    high--;\\n                }\\n            }\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n        void sortColors(vector<int>& nums) \\n        {\\n            int tmp = 0, low = 0, mid = 0, high = nums.size() - 1;\\n        \\n            while(mid <= high)\\n            {\\n                if(nums[mid] == 0)\\n                {\\n                    tmp = nums[low];\\n                    nums[low] = nums[mid];\\n                    nums[mid] = tmp;\\n                    low++;\\n                    mid++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 26500,
                "title": "four-different-solutions",
                "content": "    // two pass O(m+n) space\\n    void sortColors(int A[], int n) {\\n        int num0 = 0, num1 = 0, num2 = 0;\\n        \\n        for(int i = 0; i < n; i++) {\\n            if (A[i] == 0) ++num0;\\n            else if (A[i] == 1) ++num1;\\n            else if (A[i] == 2) ++num2;\\n        }\\n        \\n        for(int i = 0; i < num0; ++i) A[i] = 0;\\n        for(int i = 0; i < num1; ++i) A[num0+i] = 1;\\n        for(int i = 0; i < num2; ++i) A[num0+num1+i] = 2;\\n    }\\n    \\n    // one pass in place solution\\n    void sortColors(int A[], int n) {\\n        int n0 = -1, n1 = -1, n2 = -1;\\n        for (int i = 0; i < n; ++i) {\\n            if (A[i] == 0) \\n            {\\n                A[++n2] = 2; A[++n1] = 1; A[++n0] = 0;\\n            }\\n            else if (A[i] == 1) \\n            {\\n                A[++n2] = 2; A[++n1] = 1;\\n            }\\n            else if (A[i] == 2) \\n            {\\n                A[++n2] = 2;\\n            }\\n        }\\n    }\\n    \\n    // one pass in place solution\\n    void sortColors(int A[], int n) {\\n        int j = 0, k = n - 1;\\n        for (int i = 0; i <= k; ++i){\\n            if (A[i] == 0 && i != j)\\n                swap(A[i--], A[j++]);\\n            else if (A[i] == 2 && i != k)\\n                swap(A[i--], A[k--]);\\n        }\\n    }\\n    \\n    // one pass in place solution\\n    void sortColors(int A[], int n) {\\n        int j = 0, k = n-1;\\n        for (int i=0; i <= k; i++) {\\n            if (A[i] == 0)\\n                swap(A[i], A[j++]);\\n            else if (A[i] == 2)\\n                swap(A[i--], A[k--]);\\n        }\\n    }",
                "solutionTags": [],
                "code": "    // two pass O(m+n) space\\n    void sortColors(int A[], int n) {\\n        int num0 = 0, num1 = 0, num2 = 0;\\n        \\n        for(int i = 0; i < n; i++) {\\n            if (A[i] == 0) ++num0;\\n            else if (A[i] == 1) ++num1;\\n            else if (A[i] == 2) ++num2;\\n        }\\n        \\n        for(int i = 0; i < num0; ++i) A[i] = 0;\\n        for(int i = 0; i < num1; ++i) A[num0+i] = 1;\\n        for(int i = 0; i < num2; ++i) A[num0+num1+i] = 2;\\n    }\\n    \\n    // one pass in place solution\\n    void sortColors(int A[], int n) {\\n        int n0 = -1, n1 = -1, n2 = -1;\\n        for (int i = 0; i < n; ++i) {\\n            if (A[i] == 0) \\n            {\\n                A[++n2] = 2; A[++n1] = 1; A[++n0] = 0;\\n            }\\n            else if (A[i] == 1) \\n            {\\n                A[++n2] = 2; A[++n1] = 1;\\n            }\\n            else if (A[i] == 2) \\n            {\\n                A[++n2] = 2;\\n            }\\n        }\\n    }\\n    \\n    // one pass in place solution\\n    void sortColors(int A[], int n) {\\n        int j = 0, k = n - 1;\\n        for (int i = 0; i <= k; ++i){\\n            if (A[i] == 0 && i != j)\\n                swap(A[i--], A[j++]);\\n            else if (A[i] == 2 && i != k)\\n                swap(A[i--], A[k--]);\\n        }\\n    }\\n    \\n    // one pass in place solution\\n    void sortColors(int A[], int n) {\\n        int j = 0, k = n-1;\\n        for (int i=0; i <= k; i++) {\\n            if (A[i] == 0)\\n                swap(A[i], A[j++]);\\n            else if (A[i] == 2)\\n                swap(A[i--], A[k--]);\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3164333,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int l = 0;\\n        int m = 0;\\n        int h = nums.size()-1;\\n\\n        while(m<=h){\\n            if(nums[m]==0){\\n                swap(nums[l], nums[m]);\\n                l++;\\n                m++;\\n            }\\n            else if(nums[m]==1){\\n                m++;\\n            }\\n            else if(nums[m]==2){\\n                swap(nums[m], nums[h]);\\n                h--;\\n            }\\n        }\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n\\n        red, white, blue = 0, 0, len(nums) - 1\\n\\n        while white <= blue:\\n            if nums[white] == 0:\\n                nums[white], nums[red] = nums[red], nums[white]\\n                red += 1\\n                white += 1\\n            elif nums[white] == 1:\\n                white += 1\\n            else:\\n                nums[white], nums[blue] = nums[blue], nums[white]\\n                blue -= 1\\n```\\n\\n```Java []\\nclass Solution {\\n  public void sortColors(int[] nums) {\\n    int l = 0;\\n    int r = nums.length - 1;\\n\\n    for (int i = 0; i <= r;)\\n      if (nums[i] == 0)\\n        swap(nums, i++, l++);\\n      else if (nums[i] == 1)\\n        ++i;\\n      else\\n        swap(nums, i, r--);\\n  }\\n\\n  private void swap(int[] nums, int i, int j) {\\n    final int temp = nums[i];\\n    nums[i] = nums[j];\\n    nums[j] = temp;\\n  }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int l = 0;\\n        int m = 0;\\n        int h = nums.size()-1;\\n\\n        while(m<=h){\\n            if(nums[m]==0){\\n                swap(nums[l], nums[m]);\\n                l++;\\n                m++;\\n            }\\n            else if(nums[m]==1){\\n                m++;\\n            }\\n            else if(nums[m]==2){\\n                swap(nums[m], nums[h]);\\n                h--;\\n            }\\n        }\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n\\n        red, white, blue = 0, 0, len(nums) - 1\\n\\n        while white <= blue:\\n            if nums[white] == 0:\\n                nums[white], nums[red] = nums[red], nums[white]\\n                red += 1\\n                white += 1\\n            elif nums[white] == 1:\\n                white += 1\\n            else:\\n                nums[white], nums[blue] = nums[blue], nums[white]\\n                blue -= 1\\n```\n```Java []\\nclass Solution {\\n  public void sortColors(int[] nums) {\\n    int l = 0;\\n    int r = nums.length - 1;\\n\\n    for (int i = 0; i <= r;)\\n      if (nums[i] == 0)\\n        swap(nums, i++, l++);\\n      else if (nums[i] == 1)\\n        ++i;\\n      else\\n        swap(nums, i, r--);\\n  }\\n\\n  private void swap(int[] nums, int i, int j) {\\n    final int temp = nums[i];\\n    nums[i] = nums[j];\\n    nums[j] = temp;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3464652,
                "title": "beats-100-c-java-python-javascript-two-pointer-dutch-national-flag-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n*The problem requires us to sort an array of integers representing colors in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We are given that the colors red, white, and blue are represented by the integers 0, 1, and 2 respectively.*\\n\\n# Approach : ***Dutch National Flag algorithm***\\n<!-- Describe your approach to solving the problem. -->\\n\\n- The Dutch National Flag algorithm, also known as 3-way partitioning, is an algorithm for sorting an array containing three distinct values. The algorithm was designed to solve the problem of sorting an array containing only 0s, 1s, and 2s, which is similar to the problem in the given question.\\n\\n- The algorithm works by maintaining three pointers: low, mid, and high. The low pointer points to the beginning of the array, the high pointer points to the end of the array, and the mid pointer starts at the beginning of the array and moves through it.\\n\\n- The idea behind the algorithm is to keep all the 0s before the low pointer, all the 2s after the high pointer, and all the 1s between the low and high pointers. The algorithm moves the mid pointer through the array, comparing the value at each position with 1. If the value is 0, the element is swapped with the element at the low pointer, and the low and mid pointers are incremented. If the value is 2, the element is swapped with the element at the high pointer, and the high pointer is decremented. If the value is 1, the mid pointer is simply incremented.\\n\\n- The algorithm terminates when the mid pointer crosses the high pointer, indicating that all the elements have been processed and the array is sorted.\\n\\n> The Dutch National Flag algorithm is called one-pass because it sorts the array in a single pass through the elements. The time complexity of the algorithm is O(n), where n is the size of the array.\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0, mid = 0, high = nums.size()-1;\\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[low], nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else{\\n                swap(nums[mid], nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n\\n```\\n```Java []\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1;\\n        while (mid <= high) {\\n            if (nums[mid] == 0) {\\n                swap(nums, low, mid);\\n                low++;\\n                mid++;\\n            } else if (nums[mid] == 1) {\\n                mid++;\\n            } else {\\n                swap(nums, mid, high);\\n                high--;\\n            }\\n        }\\n    }\\n    \\n    private void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n\\n```\\n```python []\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        low, mid, high = 0, 0, len(nums)-1\\n        while mid <= high:\\n            if nums[mid] == 0:\\n                nums[low], nums[mid] = nums[mid], nums[low]\\n                low += 1\\n                mid += 1\\n            elif nums[mid] == 1:\\n                mid += 1\\n            else:\\n                nums[mid], nums[high] = nums[high], nums[mid]\\n                high -= 1\\n```\\n```JavaScript []\\nvar sortColors = function(nums) {\\n    let low = 0, mid = 0, high = nums.length - 1;\\n    while (mid <= high) {\\n        if (nums[mid] === 0) {\\n            [nums[low], nums[mid]] = [nums[mid], nums[low]];\\n            low++;\\n            mid++;\\n        } else if (nums[mid] === 1) {\\n            mid++;\\n        } else {\\n            [nums[mid], nums[high]] = [nums[high], nums[mid]];\\n            high--;\\n        }\\n    }\\n};\\n\\n```\\n\\n\\n---\\n\\n![upvote.jpeg](https://assets.leetcode.com/users/images/5cb823aa-2bf3-4976-80cf-5101b6c9fab2_1682716375.659027.jpeg)\\n\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0, mid = 0, high = nums.size()-1;\\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[low], nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else{\\n                swap(nums[mid], nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n\\n```\n```Java []\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1;\\n        while (mid <= high) {\\n            if (nums[mid] == 0) {\\n                swap(nums, low, mid);\\n                low++;\\n                mid++;\\n            } else if (nums[mid] == 1) {\\n                mid++;\\n            } else {\\n                swap(nums, mid, high);\\n                high--;\\n            }\\n        }\\n    }\\n    \\n    private void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n\\n```\n```python []\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        low, mid, high = 0, 0, len(nums)-1\\n        while mid <= high:\\n            if nums[mid] == 0:\\n                nums[low], nums[mid] = nums[mid], nums[low]\\n                low += 1\\n                mid += 1\\n            elif nums[mid] == 1:\\n                mid += 1\\n            else:\\n                nums[mid], nums[high] = nums[high], nums[mid]\\n                high -= 1\\n```\n```JavaScript []\\nvar sortColors = function(nums) {\\n    let low = 0, mid = 0, high = nums.length - 1;\\n    while (mid <= high) {\\n        if (nums[mid] === 0) {\\n            [nums[low], nums[mid]] = [nums[mid], nums[low]];\\n            low++;\\n            mid++;\\n        } else if (nums[mid] === 1) {\\n            mid++;\\n        } else {\\n            [nums[mid], nums[high]] = [nums[high], nums[mid]];\\n            high--;\\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 26479,
                "title": "ac-python-in-place-one-pass-solution-o-n-time-o-1-space-no-swap-no-count",
                "content": "    def sortColors(self, nums):\\n        i = j = 0\\n        for k in xrange(len(nums)):\\n            v = nums[k]\\n            nums[k] = 2\\n            if v < 2:\\n                nums[j] = 1\\n                j += 1\\n            if v == 0:\\n                nums[i] = 0\\n                i += 1\\n\\n    # 86 / 86 test cases passed.\\n    # Status: Accepted\\n    # Runtime: 44 ms\\n    # 84.03%\\n\\n\\nJust like the Lomuto partition algorithm usually used in quick sort. We keep a loop invariant that [0,i) [i, j) [j, k) are 0s, 1s and 2s sorted in place for [0,k). Here \")\" means exclusive. We don't need to swap because we know the values we want.",
                "solutionTags": [],
                "code": "    def sortColors(self, nums):\\n        i = j = 0\\n        for k in xrange(len(nums)):\\n            v = nums[k]\\n            nums[k] = 2\\n            if v < 2:\\n                nums[j] = 1\\n                j += 1\\n            if v == 0:\\n                nums[i] = 0\\n                i += 1\\n\\n    # 86 / 86 test cases passed.\\n    # Status: Accepted\\n    # Runtime: 44 ms\\n    # 84.03%\\n\\n\\nJust like the Lomuto partition algorithm usually used in quick sort. We keep a loop invariant that [0,i) [i, j) [j, k) are 0s, 1s and 2s sorted in place for [0,k). Here \")\" means exclusive. We don't need to swap because we know the values we want.",
                "codeTag": "Python3"
            },
            {
                "id": 1256365,
                "title": "c-easy-to-understand-full-explanation",
                "content": "## **Sort array of 0\\'s 1\\'s and 2\\'s**\\n\\n### constraints:\\n* O(1) extra space\\n* `nums[]` contain only 0, 1 and 2\\n\\n### Algorithm:\\n* Consider three pointers `low = 0, mid = 0, high = nums.size() - 1`\\n* The algorithm ensures that at any point, every element **before low is 0**, every element **after high is 2**, every element **in between are either 0, 1 or 2** i.e. unprocessed.\\n* We\\'ll use `mid` pointer to traverse and check the array elements i.e. `while(mid <= high)`. Three cases are possible:\\n\\t* `nums[mid] == 0` In this case `swap(nums[low], nums[mid])` and increment both low and mid pointer i.e. `low++ mid++`\\n\\t* `nums[mid] == 1` In this case `mid++`\\n\\t* `nums[mid] == 2` In this case `swap(nums[mid], nums[high])` and decrement high pointer i.e. `high--`\\n\\n### Example:\\n* Consider `nums[] = [0 1 1 0 1 2 1]`\\n* Iteration 1: \\n\\t* `low = 0, mid = 0, high = 6`\\n\\t*  `nums[mid] == 0` \\n\\t*   `swap(nums[low++], nums[mid++]` \\n\\t*   [**0** 1 1 0 1 2 1]\\n* Iteration 2: \\n\\t* `low = 1, mid = 1, high = 6`\\n\\t* `nums[mid] == 1`\\n\\t* `mid++`\\n\\t* [0 1 1 0 1 2 1]\\n* Iteration 3: \\n\\t* `low = 1, mid = 2, high = 6`\\n\\t* `nums[mid] == 1`\\n\\t* `mid++`\\n\\t* [0 1 1 0 1 2 1]\\n* Iteration 4: \\n\\t* `low = 1, mid = 3, high = 6`\\n\\t* `nums[mid] == 0`\\n\\t* `swap(nums[low++], nums[mid++]` \\n\\t* [0 **0** 1 **1** 1 2 1]\\n* Iteration 5: \\n\\t* `low = 2, mid = 4, high = 6`\\n\\t* `nums[mid] == 1`\\n\\t* `mid++`\\n\\t* [0 0 1 1 1 2 1]\\n* Iteration 6: \\n\\t* `low = 2, mid = 5, high = 6`\\n\\t* `nums[mid] == 2`\\n\\t* `swap(nums[mid], nums[high--]` \\n\\t* [0 0 1 1 1 **1** **2**]\\n* Iteration 7: \\n\\t* `low = 2, mid = 5, high = 5`\\n\\t* `nums[mid] == 1`\\n\\t* `mid++`\\n\\t* [0 0 1 1 1 1 2]\\n* Iteration 8:\\n\\t* `low = 2, mid = 6, high = 5`\\n\\t* `mid > high`\\n\\t* Exit the loop\\n\\n**code:**\\n\\n```\\n    void sortColors(vector<int>& nums) {\\n        \\n        // initialize variables:\\n        int low = 0, mid = 0, high = nums.size() - 1;\\n        \\n        // logic:\\n        while(mid <= high)\\n        {\\n            switch(nums[mid])\\n            {\\n                case 0: swap(nums[low++], nums[mid++]); break;\\n                \\n                case 1: mid++; break;\\n                \\n                case 2: swap(nums[mid], nums[high--]); break;\\n            }\\n        }\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    void sortColors(vector<int>& nums) {\\n        \\n        // initialize variables:\\n        int low = 0, mid = 0, high = nums.size() - 1;\\n        \\n        // logic:\\n        while(mid <= high)\\n        {\\n            switch(nums[mid])\\n            {\\n                case 0: swap(nums[low++], nums[mid++]); break;\\n                \\n                case 1: mid++; break;\\n                \\n                case 2: swap(nums[mid], nums[high--]); break;\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 26549,
                "title": "java-solution-both-2-pass-and-1-pass",
                "content": "\\n    public void sortColors(int[] nums) {\\n        // 1-pass\\n        int p1 = 0, p2 = nums.length - 1, index = 0;\\n        while (index <= p2) {\\n            if (nums[index] == 0) {\\n                nums[index] = nums[p1];\\n                nums[p1] = 0;\\n                p1++;\\n            }\\n            if (nums[index] == 2) {\\n                nums[index] = nums[p2];\\n                nums[p2] = 2;\\n                p2--;\\n                index--;\\n            }\\n            index++;\\n        }\\n    }\\n\\n\\n----------\\n\\n    public void sortColors(int[] nums) {\\n        // 2-pass\\n        int count0 = 0, count1 = 0, count2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) {count0++;}\\n            if (nums[i] == 1) {count1++;}\\n            if (nums[i] == 2) {count2++;}\\n        }\\n        for(int i = 0; i < nums.length; i++) {\\n            if (i < count0) {nums[i] = 0;}\\n            else if (i < count0 + count1) {nums[i] = 1;}\\n            else {nums[i] = 2;}\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public void sortColors(int[] nums) {\\n        // 1-pass\\n        int p1 = 0, p2 = nums.length - 1, index = 0;\\n        while (index <= p2) {\\n            if (nums[index] == 0) {\\n                nums[index] = nums[p1];\\n                nums[p1] = 0;\\n                p1++;\\n            }\\n            if (nums[index] == 2) {\\n                nums[index] = nums[p2];\\n                nums[p2] = 2;\\n                p2--;\\n                index--;\\n            }\\n            index++;\\n        }\\n    }\\n\\n\\n----------\\n\\n    public void sortColors(int[] nums) {\\n        // 2-pass\\n        int count0 = 0, count1 = 0, count2 = 0;\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) {count0++;}\\n            if (nums[i] == 1) {count1++;}\\n            if (nums[i] == 2) {count2++;}\\n        }\\n        for(int i = 0; i < nums.length; i++) {\\n            if (i < count0) {nums[i] = 0;}\\n            else if (i < count0 + count1) {nums[i] = 1;}\\n            else {nums[i] = 2;}\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 681526,
                "title": "python-o-n-3-pointers-in-place-approach-explained",
                "content": "This problem is called Dutch national flag problem: https://en.wikipedia.org/wiki/Dutch_national_flag_problem\\n\\nThe idea here is the following: we keep 3 pointers: for each of colors (numbers). I called them\\n`beg = 0`, `mid = 0`, `end =  len(nums) - 1`. The **idea** here is to put sorted `0` and `1` to the **beginning** and sorted `2`s to the **end**.  Then we iterate over all elements and process each new element in the following way. Imagine, that we already sorted some of the elements, our invariant will be `00...0011...11......22....22`, where we already put some `0` and `1` in the beggining and some `2` to the end. Then there are 3 possible optinos for new element `?`:\\n\\n1. `00...0011...11?......22....22`, where `? = 1`, then we do not need to change any elements, just move `mid` pointer by `1` to the right.\\n2. `00...0011...11?......22....22`, where `? = 2`, then we need to put this element befor the first already sorted `2`, so we change these elements and then move pointer `end` by `1` to the left.\\n3. `00...0011...11?......22....22`, where `? = 0`, then we need to swap this element with the last  sorted `0` and also move two pointers `mid` and `beg` by 1.\\n\\nWe can see it this way, that pointers `beg`, `mid` and `end` always point at elements just `after` the last `0`, `after` the last `1` and `before` the first `2`.\\n\\n**Complexity**: Time complexity is `O(n)`, because each moment of time we move at least one of the pointers. Additional space complexity is `O(1)`: to keep only 3 variables: `beg`, `mid` and `end`.\\n\\n```\\nclass Solution:\\n    def sortColors(self, nums):\\n        beg, mid, end = 0, 0, len(nums) - 1\\n        \\n        while mid <= end:\\n            if nums[mid] == 0:\\n                nums[beg], nums[mid] = nums[mid], nums[beg]\\n                mid += 1\\n                beg += 1\\n            elif nums[mid] == 2:\\n                nums[mid], nums[end] = nums[end], nums[mid]\\n                end -= 1\\n            else:  #nums[mid] == 1:\\n                mid += 1\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sortColors(self, nums):\\n        beg, mid, end = 0, 0, len(nums) - 1\\n        \\n        while mid <= end:\\n            if nums[mid] == 0:\\n                nums[beg], nums[mid] = nums[mid], nums[beg]\\n                mid += 1\\n                beg += 1\\n            elif nums[mid] == 2:\\n                nums[mid], nums[end] = nums[end], nums[mid]\\n                end -= 1\\n            else:  #nums[mid] == 1:\\n                mid += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 273597,
                "title": "java-0ms-two-pointer-solution-with-detailed-explanation",
                "content": "We traverse the array and use two variables:\\n1. ```zeroIndex``` to indicate the index where we should put ```0``` \\n2. ```twoIndex``` to indicate the index where we should put ```2``` \\n\\nIf current element ```a[i]``` is ```0```, we swap ```a[i]``` and ```a[zeroIndex]```, if ```a[i]``` is ```2```, we swap ```a[i]``` and ```a[twoIndex]```, if ```a[i]``` is ```one```, we do nothing and continue to process next element.\\n```\\npublic void sortColors(int[] nums) {\\n\\tint zeroIndex = 0, twoIndex = nums.length - 1, i = 0;\\n\\twhile( i <= twoIndex ) {\\n\\t\\tif( nums[i] == 0 ) \\n\\t\\t\\tswap(nums, zeroIndex++, i++);\\n\\t\\telse if( nums[i] == 2)\\n\\t\\t\\tswap(nums, twoIndex--, i);    \\n\\t\\telse\\n\\t\\t\\ti++;\\n\\t}\\n}\\n\\npublic void swap(int[] nums, int i, int j) {\\n\\tint temp = nums[i];\\n\\tnums[i] = nums[j];\\n\\tnums[j] = temp;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```zeroIndex```\n```0```\n```twoIndex```\n```2```\n```a[i]```\n```0```\n```a[i]```\n```a[zeroIndex]```\n```a[i]```\n```2```\n```a[i]```\n```a[twoIndex]```\n```a[i]```\n```one```\n```\\npublic void sortColors(int[] nums) {\\n\\tint zeroIndex = 0, twoIndex = nums.length - 1, i = 0;\\n\\twhile( i <= twoIndex ) {\\n\\t\\tif( nums[i] == 0 ) \\n\\t\\t\\tswap(nums, zeroIndex++, i++);\\n\\t\\telse if( nums[i] == 2)\\n\\t\\t\\tswap(nums, twoIndex--, i);    \\n\\t\\telse\\n\\t\\t\\ti++;\\n\\t}\\n}\\n\\npublic void swap(int[] nums, int i, int j) {\\n\\tint temp = nums[i];\\n\\tnums[i] = nums[j];\\n\\tnums[j] = temp;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 26518,
                "title": "4ms-and-only-5-lines-c-code-without-delete-and-insert",
                "content": "Here I label the end of same colour, and update for every item in nums.\\n\\n    void sortColors(vector<int>& nums) {\\n        int r=0, w=0, b=0; // label the end of different colors;\\n        for(int num: nums){\\n            if(num==0) {nums[b++]=2; nums[w++]=1; nums[r++]=0; } \\n            else if(num==1) {nums[b++]=2; nums[w++]=1;}\\n            else if(num==2) b++;\\n        }\\n    }",
                "solutionTags": [],
                "code": "Here I label the end of same colour, and update for every item in nums.\\n\\n    void sortColors(vector<int>& nums) {\\n        int r=0, w=0, b=0; // label the end of different colors;\\n        for(int num: nums){\\n            if(num==0) {nums[b++]=2; nums[w++]=1; nums[r++]=0; } \\n            else if(num==1) {nums[b++]=2; nums[w++]=1;}\\n            else if(num==2) b++;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1408321,
                "title": "3-solutions-from-brute-force-to-optimization-c-solution",
                "content": "**Here I will Give Three solutions to give to your Interviewer:**\\n**Method 1: Sorting the nums vector (PS. total scam)**\\n**Time complexity - O(n log n)**\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n       sort(nums.begin(), nums.end());\\n    }\\n};\\n```\\n**Method 2: keep a count of 0\\'s 1\\'s and 2\\'s**\\nTime complexity - O(2N)\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0 = 0;\\n        int count1 = 0; \\n        int count2  = 0;\\n        for(int i =0; i< nums.size(); i++){\\n            if(nums[i] == 0){\\n                count0++;\\n            }else if (nums[i] == 1){\\n                count1++;\\n            }else if (nums[i] ==2 ){\\n                count2++;\\n            }\\n            \\n         }\\n        for(int i =0; i< count0; i++){\\n            nums[i] =0;\\n        }\\n        for(int i =count0; i< (count1 + count0); i++){\\n            nums[i] =1;\\n        }\\n        for(int i =(count1 + count0); i< nums.size(); i++){\\n            nums[i] =2;\\n        }\\n        \\n    }\\n};\\n```\\n**Method 3: using 3 pointers**\\nTime complexity - O(N)\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low =0; \\n        int high = nums.size()-1;\\n        int mid =0;\\n        \\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[mid], nums[low]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else {\\n                swap(nums[mid], nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n       sort(nums.begin(), nums.end());\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0 = 0;\\n        int count1 = 0; \\n        int count2  = 0;\\n        for(int i =0; i< nums.size(); i++){\\n            if(nums[i] == 0){\\n                count0++;\\n            }else if (nums[i] == 1){\\n                count1++;\\n            }else if (nums[i] ==2 ){\\n                count2++;\\n            }\\n            \\n         }\\n        for(int i =0; i< count0; i++){\\n            nums[i] =0;\\n        }\\n        for(int i =count0; i< (count1 + count0); i++){\\n            nums[i] =1;\\n        }\\n        for(int i =(count1 + count0); i< nums.size(); i++){\\n            nums[i] =2;\\n        }\\n        \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low =0; \\n        int high = nums.size()-1;\\n        int mid =0;\\n        \\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[mid], nums[low]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else {\\n                swap(nums[mid], nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 148221,
                "title": "java-2-pass-counting-sort-and-1-pass-quick-partition-with-video-tutorial-links",
                "content": "This problem is a testing of your \"sorting\" skills. Especially with ur understanding of counting sort and quicksort\\n**2-pass** is essentially counting sort [geeksforgeeks video tutorial for counting sort](https://www.youtube.com/watch?v=7zuGmKfUt7s&feature=youtu.be)\\n**1-pass**  is essentially the 3-way quick partition method in quicksort. check this [gret video demo](https://www.youtube.com/watch?v=WBFzOYJ5ybM&t=177s) from Professor Robert Sedgewick\\n```\\n    //-------------  SOLUTION 1: 2 SCANs ----------------//\\n    // counting sort\\n    public void sortColors(int[] A) {\\n        // count\\n        int[] counts = new int[3];\\n        for (int i: A) {\\n            counts[i]++;\\n        }\\n        // fill\\n        for (int i = 0; i < A.length; i++) {\\n            if (i < counts[0]) {\\n                A[i] = 0;\\n            } else if (i < counts[0] + counts[1]) {\\n                A[i] = 1;\\n            } else {\\n                A[i] = 2;\\n            }\\n        }\\n    }\\n```\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n```\\nquicksort 3-way partition\\n+------+---------+-------------+-------+\\n|  <p  |  =p     |  unseen .  |   > p  |\\n+------+---------+------------+-------+\\n        \\u2191          \\u2191           \\u2191\\n        lt         i            gt \\nlt: 1st elem == pivot\\ni:  1st unseen elem\\ngt: last unseen elem\\n```\\n```\\n    //-------------  SOLUTION 2: 1 SCAN ----------------//\\n    // 3-way partition used in quick sort\\n    public void sortColors(int[] nums) {\\n        int lt = 0, i = 0, gt = nums.length - 1;\\n        while (i <= gt) {\\n            if (nums[i] == 0) {\\n                swap(nums, lt++, i++);\\n            } else if (nums[i] == 2) {\\n                swap(nums, i, gt--);\\n            } else { // nums[i] == 1\\n                i++;\\n            }\\n        }\\n    }\\n    private void swap(int[] nums, int p1, int p2) {\\n        int temp = nums[p1];\\n        nums[p1] = nums[p2];\\n        nums[p2] = temp;\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\n    //-------------  SOLUTION 1: 2 SCANs ----------------//\\n    // counting sort\\n    public void sortColors(int[] A) {\\n        // count\\n        int[] counts = new int[3];\\n        for (int i: A) {\\n            counts[i]++;\\n        }\\n        // fill\\n        for (int i = 0; i < A.length; i++) {\\n            if (i < counts[0]) {\\n                A[i] = 0;\\n            } else if (i < counts[0] + counts[1]) {\\n                A[i] = 1;\\n            } else {\\n                A[i] = 2;\\n            }\\n        }\\n    }\\n```\n```\\nquicksort 3-way partition\\n+------+---------+-------------+-------+\\n|  <p  |  =p     |  unseen .  |   > p  |\\n+------+---------+------------+-------+\\n        \\u2191          \\u2191           \\u2191\\n        lt         i            gt \\nlt: 1st elem == pivot\\ni:  1st unseen elem\\ngt: last unseen elem\\n```\n```\\n    //-------------  SOLUTION 2: 1 SCAN ----------------//\\n    // 3-way partition used in quick sort\\n    public void sortColors(int[] nums) {\\n        int lt = 0, i = 0, gt = nums.length - 1;\\n        while (i <= gt) {\\n            if (nums[i] == 0) {\\n                swap(nums, lt++, i++);\\n            } else if (nums[i] == 2) {\\n                swap(nums, i, gt--);\\n            } else { // nums[i] == 1\\n                i++;\\n            }\\n        }\\n    }\\n    private void swap(int[] nums, int p1, int p2) {\\n        int temp = nums[p1];\\n        nums[p1] = nums[p2];\\n        nums[p2] = temp;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 26760,
                "title": "c-solution-in-8-lines-an-instance-of-the-dutch-national-flag-problem-by-edsger-dijkstra",
                "content": "A more general problem is the [Dutch national flag problem][1] by Edsger Dijkstra, which can be used to solve this problem, as well as partition in quicksort.\\n\\n    class Solution {\\n    public:\\n        void sortColors(int A[], int n) {\\n            int i = 0, lo = 0, hi = n - 1;\\n            // invariants: A[0..lo-1] are less than pivot 1, A[lo..i-1] equal, A[hi+1..end] greater\\n            while (i <= hi)\\n                if (A[i] < 1)\\n                    swap(A[i++], A[lo++]);\\n                else if (A[i] > 1)\\n                    swap(A[i], A[hi--]);\\n                else\\n                    i++;\\n        }\\n    };\\n\\n  [1]: http://en.wikipedia.org/wiki/Quicksort#Repeated_elements",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        void sortColors(int A[], int n) {\\n            int i = 0, lo = 0, hi = n - 1;\\n            // invariants: A[0..lo-1] are less than pivot 1, A[lo..i-1] equal, A[hi+1..end] greater\\n            while (i <= hi)\\n                if (A[i] < 1)\\n                    swap(A[i++], A[lo++]);\\n                else if (A[i] > 1)\\n                    swap(A[i], A[hi--]);\\n                else\\n                    i++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1049327,
                "title": "4-approaches-for-your-interview",
                "content": "### Approach 1: brute force checking \\n\\n**step1:** iterate and count each elem\\n**step2:** make the existing arr null to make this algo inplace\\n**step3:** print number of 0,1,2 w,r,t count value\\n\\n```\\nvar sortColors = function(arr) {\\n    \\n    let one=0, zero=0, two=0\\n    \\n\\n    // step1 \\n    for(let elem of arr){\\n        if(elem == 0) zero++\\n        else if ( elem == 1) one ++\\n        else two ++\\n    }\\n\\n\\n\\n\\n    // step2\\n    arr.length=0\\n\\n\\n\\n\\n    // step3\\n    for(let i=0;i<zero;i++) arr.push(0)\\n    for(let i=0;i<one;i++) arr.push(1)\\n    for(let i=0;i<two;i++) arr.push(2)    \\n    \\n\\n};\\n```\\n<hr> <hr> <br> <br> <br> \\n\\n### approach 1.2: Brute force checking  with one modification\\n\\n***IDEA** :  lets calc for 0 and 1 alone, and based on it, 2 will get autocalculated*\\n\\n\\n**step1:** iterate and count 0and 1 alone ( skip counting 2)\\n**step2:** two\\'s count is : (arr.length) - (one\\'s count) - (zero\\'s count)\\n**step3:** make the existing arr null to make this algo inplace\\n**step4:** print number of 0,1,2 w,r,t count value\\n\\n\\n***NOTE :***  this idea saves more than 50% memory for me ( from 30% in previous approach to, 86% efficient in this approach \\n\\n\\n<br>\\n\\n```\\nvar sortColors = function(arr) {\\n    \\n    let one=0, zero=0, two=0\\n    \\n\\n    // step1 \\n    for(let elem of arr){\\n        if(elem == 0) zero++\\n        else if ( elem == 1) one ++\\n    }\\n\\n\\n\\n\\n    // step2\\n    two = (arr.length) - (zero) - (one) \\n\\n\\n\\t// step3\\n    arr.length=0\\n\\n\\n\\n\\n    // step4\\n    for(let i=0;i<zero;i++) arr.push(0)\\n    for(let i=0;i<one;i++) arr.push(1)\\n    for(let i=0;i<two;i++) arr.push(2)    \\n    \\n\\n};\\n```\\n<hr> <hr> <br> <br> <br> \\n\\n### Approach 2: One pass algorithm\\n\\n<br>\\n\\n```\\nvar sortColors = function(arr) {\\n    \\n    let low=0, mid=0, high=arr.length-1\\n\\n\\n    while ( mid <= high ) { \\n    \\n        if( arr[mid] == 0 ){ \\n            swap( low, mid ); \\n            mid++; \\n            low++ ;\\n        } \\n    \\n        else if( arr[mid] == 1 ) {   \\n            mid++ ;  \\n        } \\n\\n\\n        else if( arr[mid] == 2 ) {\\n            swap( mid,high ); \\n            high--  \\n        } \\n    }\\n\\n\\n    function swap(a,b) {\\n        [arr[b], arr[a]] = [arr[a], arr[b]]\\n    }\\n\\n\\n};\\n```\\n<hr> <hr> <br> <br> <br> \\n\\n### Approach 3: intuitive approach \\ntwo pass algorithm \\n\\n<br>\\n\\n```\\nvar sortColors = function(arr) {\\n    \\n    let i=0\\n    for( let j=0; j<arr.length; j++){\\n        if(arr[j]==0){ \\n            [arr[i], arr[j]] = [arr[j], arr[i]]\\n            i++\\n        }\\n    \\n    }\\n\\n    let k=i\\n    for( let m=0; m<arr.length; m++){\\n        if(arr[m]==1){\\n             [arr[m], arr[k]] = [arr[k], arr[m]]\\n             k++\\n        }\\n       \\n    }   \\n\\n};\\n\\n// dry run this to get the approach \\n```\\n\\n<hr> <hr> <br> <br> <br> \\n\\n### Approach 4: Ninja Technique to get rejected\\uD83E\\uDD10\\noffcourse u can sort the array using inbuilt sort function\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\nvar sortColors = function(arr) {\\n    \\n    let one=0, zero=0, two=0\\n    \\n\\n    // step1 \\n    for(let elem of arr){\\n        if(elem == 0) zero++\\n        else if ( elem == 1) one ++\\n        else two ++\\n    }\\n\\n\\n\\n\\n    // step2\\n    arr.length=0\\n\\n\\n\\n\\n    // step3\\n    for(let i=0;i<zero;i++) arr.push(0)\\n    for(let i=0;i<one;i++) arr.push(1)\\n    for(let i=0;i<two;i++) arr.push(2)    \\n    \\n\\n};\\n```\n```\\nvar sortColors = function(arr) {\\n    \\n    let one=0, zero=0, two=0\\n    \\n\\n    // step1 \\n    for(let elem of arr){\\n        if(elem == 0) zero++\\n        else if ( elem == 1) one ++\\n    }\\n\\n\\n\\n\\n    // step2\\n    two = (arr.length) - (zero) - (one) \\n\\n\\n\\t// step3\\n    arr.length=0\\n\\n\\n\\n\\n    // step4\\n    for(let i=0;i<zero;i++) arr.push(0)\\n    for(let i=0;i<one;i++) arr.push(1)\\n    for(let i=0;i<two;i++) arr.push(2)    \\n    \\n\\n};\\n```\n```\\nvar sortColors = function(arr) {\\n    \\n    let low=0, mid=0, high=arr.length-1\\n\\n\\n    while ( mid <= high ) { \\n    \\n        if( arr[mid] == 0 ){ \\n            swap( low, mid ); \\n            mid++; \\n            low++ ;\\n        } \\n    \\n        else if( arr[mid] == 1 ) {   \\n            mid++ ;  \\n        } \\n\\n\\n        else if( arr[mid] == 2 ) {\\n            swap( mid,high ); \\n            high--  \\n        } \\n    }\\n\\n\\n    function swap(a,b) {\\n        [arr[b], arr[a]] = [arr[a], arr[b]]\\n    }\\n\\n\\n};\\n```\n```\\nvar sortColors = function(arr) {\\n    \\n    let i=0\\n    for( let j=0; j<arr.length; j++){\\n        if(arr[j]==0){ \\n            [arr[i], arr[j]] = [arr[j], arr[i]]\\n            i++\\n        }\\n    \\n    }\\n\\n    let k=i\\n    for( let m=0; m<arr.length; m++){\\n        if(arr[m]==1){\\n             [arr[m], arr[k]] = [arr[k], arr[m]]\\n             k++\\n        }\\n       \\n    }   \\n\\n};\\n\\n// dry run this to get the approach \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 26706,
                "title": "python-count-sort-and-one-pass-sort",
                "content": "        \\n    # count sort    \\n    def sortColors1(self, nums):\\n        c0 = c1 = c2 = 0\\n        for num in nums:\\n            if num == 0:\\n                c0 += 1\\n            elif num == 1:\\n                c1 += 1\\n            else:\\n                c2 += 1\\n        nums[:c0] = [0] * c0\\n        nums[c0:c0+c1] = [1] * c1\\n        nums[c0+c1:] = [2] * c2\\n       \\n    # one pass \\n    def sortColors(self, nums):\\n        # zero and r record the position of \"0\" and \"2\" respectively\\n        l, r, zero = 0, len(nums)-1, 0\\n        while l <= r:\\n            if nums[l] == 0:\\n                nums[l], nums[zero] = nums[zero], nums[l]\\n                l += 1; zero += 1\\n            elif nums[l] == 2:\\n                nums[l], nums[r] = nums[r], nums[l]\\n                r -= 1\\n            else:\\n                l += 1",
                "solutionTags": [
                    "Python",
                    "Counting Sort"
                ],
                "code": "        \\n    # count sort    \\n    def sortColors1(self, nums):\\n        c0 = c1 = c2 = 0\\n        for num in nums:\\n            if num == 0:\\n                c0 += 1\\n            elif num == 1:\\n                c1 += 1\\n            else:\\n                c2 += 1\\n        nums[:c0] = [0] * c0\\n        nums[c0:c0+c1] = [1] * c1\\n        nums[c0+c1:] = [2] * c2\\n       \\n    # one pass \\n    def sortColors(self, nums):\\n        # zero and r record the position of \"0\" and \"2\" respectively\\n        l, r, zero = 0, len(nums)-1, 0\\n        while l <= r:\\n            if nums[l] == 0:\\n                nums[l], nums[zero] = nums[zero], nums[l]\\n                l += 1; zero += 1\\n            elif nums[l] == 2:\\n                nums[l], nums[r] = nums[r], nums[l]\\n                r -= 1\\n            else:\\n                l += 1",
                "codeTag": "Python3"
            },
            {
                "id": 26635,
                "title": "short-c-5-line-solution-dutch-national-flag-problem",
                "content": "It's actually [Dutch national flag problem][1].\\n\\n    [, i): 0 \\n    [i, j]: 1\\n    (k, ...]: 2\\n    Once j meets k, the sorting is complete\\n\\nCode\\n\\n    class Solution { \\n    public:\\n        void sortColors(vector<int>& nums) {\\n            int i = 0, j = i, k = nums.size() - 1;\\n            \\n            while(j <= k){\\n                if(nums[j] == 0) swap(nums[i++], nums[j++]);\\n                else if(nums[j] == 1) j++;\\n                else swap(nums[k--], nums[j]);\\n            }\\n        }\\n    }; \\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Dutch_national_flag_problem",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution { \\n    public:\\n        void sortColors(vector<int>& nums) {\\n            int i = 0, j = i, k = nums.size() - 1;\\n            \\n            while(j <= k){\\n                if(nums[j] == 0) swap(nums[i++], nums[j++]);\\n                else if(nums[j] == 1) j++;\\n                else swap(nums[k--], nums[j]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 26679,
                "title": "c-one-pass-concise-solution",
                "content": "        \\n    void sortColors(vector<int>& nums) {\\n        int zero =0, l = 0, r = nums.size()-1;\\n        while (l <= r) {\\n            if (nums[l] == 0) \\n                swap(nums[l++], nums[zero++]);\\n            else if (nums[l] == 2) \\n                swap(nums[l], nums[r--]);\\n            else\\n                l++;\\n        }\\n    }",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "        \\n    void sortColors(vector<int>& nums) {\\n        int zero =0, l = 0, r = nums.size()-1;\\n        while (l <= r) {\\n            if (nums[l] == 0) \\n                swap(nums[l++], nums[zero++]);\\n            else if (nums[l] == 2) \\n                swap(nums[l], nums[r--]);\\n            else\\n                l++;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 26700,
                "title": "my-c-solution-with-one-pass-and-o-n-time-and-o-n-space",
                "content": "    class Solution {\\n    public:\\n    //use counting sort\\n    void sortColors(int A[], int n) {\\n    int red = -1, white = -1, blue = -1;\\n\\n    for(int i = 0; i < n; i++){\\n        if(A[i] == 0){   \\n            A[++blue] = 2;\\n            A[++white] = 1;\\n            A[++red] = 0;\\n        }\\n        else if(A[i] == 1){\\n            A[++blue] = 2;\\n            A[++white] = 1;\\n        }\\n        else if(A[i] == 2)   \\n            A[++blue] = 2;\\n    }\\n    }\\n    };\\n\\nthe clever thing is that use three variable to store the three colors' index position.\\nWhen you face A[i] == 0, all the variables add 1 because 0 is former.\\nDo the same thing to other 2 situation.\\n\\nEx:\\nIf you just face 2, just need to assign 2 to the A[++blue], and \"++blue\" will increase \"blue\" with 1.\\nNext if you face 0, you will increase 3 variable and assign the number to A!\\n\\nIt will make sure you always get the right sorted array when you run the for loop.",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    //use counting sort\\n    void sortColors(int A[], int n) {\\n    int red = -1, white = -1, blue = -1;\\n\\n    for(int i = 0; i < n; i++){\\n        if(A[i] == 0){   \\n            A[++blue] = 2;\\n            A[++white] = 1;\\n            A[++red] = 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 751942,
                "title": "easy-python-solution-for-beginners-with-explanation",
                "content": "You might already have seen from others that this is a [Dutch National Flag](https://en.wikipedia.org/wiki/Dutch_national_flag_problem) problem. My solution below uses the same logic but I will make an attempt to explain it so that you dont have to memorize this algorithm.\\n\\nBasically, we need 3 pointers.\\n\\n* Pointer (i) representing the index in our iteration over the array.\\n* Pointer (p0) repesenting the index we have to replace into if we found a 0.\\n* Pointer (p2) representing the index we have to replace into if we found a 2.\\n\\nBy placing 0\\'s and 2\\'s into correct positions, there is no need to specially reorder 1\\'s. All 1\\'s will eventually be left in correct positions. So we dont worry when we see a 1, we just move on to the next index in our iteration.\\n\\nSince we are arranging the numbers in ascending order, p0 should be initialized to 0 and p2 should be initialized to the last index of the array. So whenever we first find a 0, it will be put into the leftmost position, and p0 will be incremented. So the next time we find a 0, we place it into the index 1.\\n\\nSimilarly, whenever we first find a 2, it will be put into the rightmost position of the array, and p2 will be decremented.\\n\\n```python\\n# Time: O(n), space: O(1)\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        p0 = 0\\n        p2 = len(nums) - 1\\n        \\n        i = 0 # index being checked\\n        count = 0 # number of elements already sorted\\n        while count < len(nums):\\n            if nums[i] == 0: # if 0 is found, place it in p0\\n                nums[i], nums[p0] = nums[p0], nums[i]\\n                p0 += 1 # increment p0 so that next time when 0 is found, it will be put into correct position\\n                i += 1 # move on to the next element in iteration\\n            elif nums[i] == 1: # if it is a 1, do nothing, just move on to next element\\n                i += 1\\n            else: # if it is a 2, swap the elements and decrement p2. Since we dont know what elements we got swapped with from p2, it still needs to be checked. So dont increment i. \\n                nums[i], nums[p2] = nums[p2], nums[i]\\n\\t\\t\\t\\tp2 -= 1\\n            count += 1 # every iteration of while loop puts one element at correct position\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\n# Time: O(n), space: O(1)\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        p0 = 0\\n        p2 = len(nums) - 1\\n        \\n        i = 0 # index being checked\\n        count = 0 # number of elements already sorted\\n        while count < len(nums):\\n            if nums[i] == 0: # if 0 is found, place it in p0\\n                nums[i], nums[p0] = nums[p0], nums[i]\\n                p0 += 1 # increment p0 so that next time when 0 is found, it will be put into correct position\\n                i += 1 # move on to the next element in iteration\\n            elif nums[i] == 1: # if it is a 1, do nothing, just move on to next element\\n                i += 1\\n            else: # if it is a 2, swap the elements and decrement p2. Since we dont know what elements we got swapped with from p2, it still needs to be checked. So dont increment i. \\n                nums[i], nums[p2] = nums[p2], nums[i]\\n\\t\\t\\t\\tp2 -= 1\\n            count += 1 # every iteration of while loop puts one element at correct position\\n```",
                "codeTag": "Java"
            },
            {
                "id": 139809,
                "title": "clean-javascript-one-pass-solution",
                "content": "```js\\n// Example\\n// 0 0 | 1 | 2 1 | 2\\n//   l       i     r\\nfunction sortColors(nums) {\\n  function swap(i, j) {\\n    [nums[i], nums[j]] = [nums[j], nums[i]];\\n  }\\n\\n  let l = 0;\\n  let r = nums.length - 1;\\n  let i = 0;\\n\\n  while (i <= r) {\\n    const n = nums[i];\\n    if (n === 0) {\\n      swap(i, l);\\n      l++;\\n      i++;\\n    } else if (n === 2) {\\n      swap(i, r);\\n      r--;\\n    } else {\\n      i++;\\n    }\\n  }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\n// Example\\n// 0 0 | 1 | 2 1 | 2\\n//   l       i     r\\nfunction sortColors(nums) {\\n  function swap(i, j) {\\n    [nums[i], nums[j]] = [nums[j], nums[i]];\\n  }\\n\\n  let l = 0;\\n  let r = nums.length - 1;\\n  let i = 0;\\n\\n  while (i <= r) {\\n    const n = nums[i];\\n    if (n === 0) {\\n      swap(i, l);\\n      l++;\\n      i++;\\n    } else if (n === 2) {\\n      swap(i, r);\\n      r--;\\n    } else {\\n      i++;\\n    }\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2358550,
                "title": "3-different-approaches-uber-sde-1-interview",
                "content": "# \\u2714 **Approach-1 Dutch National Flag Algo.**\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {            // Dutch National Flag Algo.\\n        int i=0,j=0,k=nums.size()-1;\\n        while(i<=k){                                // One pass\\n            if(nums[i]==0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            else if(nums[i]==1){\\n                i++;\\n            }\\n            else{\\n                swap(nums[i],nums[k]);\\n                k--;\\n            }\\n        }\\n    }\\n};\\n\\n// TC: O(n) SC: O(1)\\n// Try yourself with 0 1 2 0 1 2 using this algo to understand it fully :)\\n```\\n# \\u2714 **Approach-2 Beginner Friendly 3 Pass O(2n) Soln.**\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int one=0,two=0,zero=0;\\n        for(int i=0;i<nums.size();i++){     //O(n)\\n           if(nums[i]==0)\\n               zero++;\\n            else if(nums[i]==1)\\n                one++;\\n            else\\n                two++;\\n        }\\n        nums.clear();                       //O(n)\\n        for(int i=0;i<zero;i++)             ///\\n            nums.emplace_back(0);           \\n        for(int i=0;i<one;i++)              ///  All 3 for loops altogether O(n)\\n            nums.emplace_back(1);\\n        for(int i=0;i<two;i++)              ///\\n            nums.emplace_back(2);\\n    }\\n};\\n//Total TC:O(n) SC:O(1)\\n```\\n# \\u2714 **Approach-3 One pass O(n) Soln.**\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {         //One pass\\n        int j = 0, k = nums.size()-1;\\n        for (int i=0; i <= k; i++) {                //O(n)\\n            if (nums[i] == 0)\\n                swap(nums[i], nums[j++]);\\n            else if (nums[i] == 2)\\n                swap(nums[i--], nums[k--]);\\n        }\\n    }\\n};\\n// Total TC:O(n) SC:\\n```\\n# **Please do upvote if it helps !  \\uD83D\\uDE4F**",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {            // Dutch National Flag Algo.\\n        int i=0,j=0,k=nums.size()-1;\\n        while(i<=k){                                // One pass\\n            if(nums[i]==0){\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }\\n            else if(nums[i]==1){\\n                i++;\\n            }\\n            else{\\n                swap(nums[i],nums[k]);\\n                k--;\\n            }\\n        }\\n    }\\n};\\n\\n// TC: O(n) SC: O(1)\\n// Try yourself with 0 1 2 0 1 2 using this algo to understand it fully :)\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int one=0,two=0,zero=0;\\n        for(int i=0;i<nums.size();i++){     //O(n)\\n           if(nums[i]==0)\\n               zero++;\\n            else if(nums[i]==1)\\n                one++;\\n            else\\n                two++;\\n        }\\n        nums.clear();                       //O(n)\\n        for(int i=0;i<zero;i++)             ///\\n            nums.emplace_back(0);           \\n        for(int i=0;i<one;i++)              ///  All 3 for loops altogether O(n)\\n            nums.emplace_back(1);\\n        for(int i=0;i<two;i++)              ///\\n            nums.emplace_back(2);\\n    }\\n};\\n//Total TC:O(n) SC:O(1)\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {         //One pass\\n        int j = 0, k = nums.size()-1;\\n        for (int i=0; i <= k; i++) {                //O(n)\\n            if (nums[i] == 0)\\n                swap(nums[i], nums[j++]);\\n            else if (nums[i] == 2)\\n                swap(nums[i--], nums[k--]);\\n        }\\n    }\\n};\\n// Total TC:O(n) SC:\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1543059,
                "title": "c-0ms-simple-and-optimal-approach-dutch-flag-algo",
                "content": "### Simple Solution\\n\\n**Using Count Variables** *(RunTime : 0 ms (100%) & Memory Usage : 44.69%)*\\n\\tAs the constraint given that ```nums[i] is 0, 1, or 2.```, we can count number of 0,1 and 2. And fill it in given `nums` array.\\n\\t\\n\\tCODE:\\n\\t    void sortColors(vector<int>& nums) {\\n        int zero=0,one=0,two=0;\\n        \\n        for(int i=0;i<nums.size();i++){\\n           //count 0s,1s and 2s \\n            if(nums[i]==0){\\n                zero++;\\n            }else if(nums[i]==1)\\n            {\\n                one++;\\n            }else{\\n                two++;\\n            }\\n            \\n        }\\n        //final filling\\n        int i=0;\\n        while(zero){\\n            nums[i++]=0;\\n            zero--;\\n        }\\n        \\n        while(one){\\n            nums[i++]=1;\\n            one--;\\n        }\\n        \\n        while(two){\\n            nums[i++]=2;\\n            two--;\\n        }\\n    }\\n\\n### Optimal Solution\\n**Using Dutch Flag Algo** *(RunTime : 0 ms (100%) & Memory Usage : 91.24%)*\\n\\nExplanation:\\n1. Initailize three pointers `zero, one and two`.\\n2. Traverse pointer `two` in backward.\\n3. when 2 is encountered, just move to next step by decreamenting pointer `two`.\\n4. when 1 is encountered , swap with pointer `one` and increament pointer `one`\\n5. when 0 is encountered , swap with pointer `zero` and increament pointer `zero`.\\n6. Repeated from `Step 3` until pointer `one` and `two` cross each other (means sorted).\\n\\nCODE:\\n```\\nvoid sortColors(vector<int>& nums) {\\n        //pointers initailization.\\n        int zero = 0,one = 0,two =nums.size()-1;\\n        //move pointer two in reverse order\\n        \\n        while(one<=two){\\n            \\n            if(nums[two]==2){//means \\'2\\' is in correct place, so moving to previous element\\n                two--;\\n            }\\n            else if(nums[two]==1){//swaping element with pointer one\\n                nums[two]=nums[one];\\n                nums[one] = 1;\\n                one++;\\n            }\\n            else{//swaping element with pointer zero\\n                nums[two] = nums[zero];\\n                nums[zero]=0;\\n                \\n                if(zero==one)//when no ones encounter, zero and one will be same, so increasing one pointer when zero pointer is increasing.\\n                    one++;\\n                zero++;\\n            } \\n        }\\n    }\\n```\\n\\nThanks!!!\\n\\n```\\n\\tUseful == true ? Upvote() : Comment();   \\n```\\n\\nBy \\uD83D\\uDC93 JS",
                "solutionTags": [],
                "code": "```nums[i] is 0, 1, or 2.```\n```\\nvoid sortColors(vector<int>& nums) {\\n        //pointers initailization.\\n        int zero = 0,one = 0,two =nums.size()-1;\\n        //move pointer two in reverse order\\n        \\n        while(one<=two){\\n            \\n            if(nums[two]==2){//means \\'2\\' is in correct place, so moving to previous element\\n                two--;\\n            }\\n            else if(nums[two]==1){//swaping element with pointer one\\n                nums[two]=nums[one];\\n                nums[one] = 1;\\n                one++;\\n            }\\n            else{//swaping element with pointer zero\\n                nums[two] = nums[zero];\\n                nums[zero]=0;\\n                \\n                if(zero==one)//when no ones encounter, zero and one will be same, so increasing one pointer when zero pointer is increasing.\\n                    one++;\\n                zero++;\\n            } \\n        }\\n    }\\n```\n```\\n\\tUseful == true ? Upvote() : Comment();   \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 682156,
                "title": "c-two-pointer-and-100-coverage-in-checking",
                "content": "**Idea:**\\nUse two pointers to indicate the sorted bounds of 0-color and 2-color, respectively.\\n**Special Note1:**\\nCheck each single item once and only once. Nothing more and nothing less.\\n\\n**Special Note2:**\\nI prefere for-loop than while-loop since I want to be a mean person in variable lifespan control:\\n1) A variable should be alive only when it\\'s necessary. They should perish asap. Remeber the Mobiv Ave in the movie \\'Matrix\\' [1]?\\n2) Few lines programmers\\' life much easier in debugging.\\n\\nTime/Space: O(N); O(1)\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        for(int i = 0, left = 0, right = nums.size() - 1; i <= right;i++){ // \\'right\\' is one smaller than index of last checked \\'2\\', need to be checked, but do not go beyond it\\n            if(nums[i] ==0) swap(nums[i], nums[left++]);         //before swapping, num[left]  is already checked, so i++ later\\n            else if(nums[i] ==2) swap(nums[i--], nums[right--]); //before swapping, num[right] is not     checked, so i-- now, to enasure stay in the same index after i++ operation\\n            //else continue;                                     // nums[i] is 1, just continue to next index\\n        }\\n    }\\n};\\n\\n```\\n\\nReference:\\n[1]\\nMobil Ave\\nInside the Matrix, Neo is trapped in a subway station named Mobil Ave (an anagram for limbo), a transition zone between the Matrix and the Machine City. He meets a \"family\" of programs, including a girl named Sati.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        for(int i = 0, left = 0, right = nums.size() - 1; i <= right;i++){ // \\'right\\' is one smaller than index of last checked \\'2\\', need to be checked, but do not go beyond it\\n            if(nums[i] ==0) swap(nums[i], nums[left++]);         //before swapping, num[left]  is already checked, so i++ later\\n            else if(nums[i] ==2) swap(nums[i--], nums[right--]); //before swapping, num[right] is not     checked, so i-- now, to enasure stay in the same index after i++ operation\\n            //else continue;                                     // nums[i] is 1, just continue to next index\\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2953415,
                "title": "easy-java-solution-single-pass-3-pointers-o-n-in-place-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIntution here is do it in a single pass with 3 pointers.\\n1. low pointer = 0 , this check all the entries before it are 0\\n2. mid pointer = 0, this will be used to iterate the array\\n3. high pointer = array length -1, this checkk all the entries after it are 2.\\n\\n- Now, we will iterate the array and check if the element is 0 then swap with low pointer and increment both low pointer and mid pointer.\\n- If the element is 1 just increment the mid pointer\\n- if the element is 2 swap with high pointer and decrement high but do not increment mid.( This is because if the number swapped from high pointer was 0 then we need to re swap it with low pointer).\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Take 3 Pointers low = 0, mid = 0 and high = nums.length -1;\\n- Use loop to iterate the array with condition mid <= high.(Since we only need to check middle elements of low and high).\\n- if element is 0 swap with low and low++, mid++.\\n- if element is 1 then mid++.\\n- if element is 2 then swap with high and high--.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nLinear O(N), here N is number of elements in the array.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nConstant O(1).\\n\\n# Code\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length-1;\\n\\n        while(mid <= high){\\n            if(nums[mid] == 0 ){\\n                //swap with left\\n                swap(nums,low, mid );\\n                low++;\\n                mid++;\\n            }else if(nums[mid] == 2){\\n                swap(nums, mid, high);\\n                high--;\\n            }else{\\n                mid++;\\n            }\\n        }\\n    }\\n\\n    public static void swap(int[] nums, int i, int j){\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length-1;\\n\\n        while(mid <= high){\\n            if(nums[mid] == 0 ){\\n                //swap with left\\n                swap(nums,low, mid );\\n                low++;\\n                mid++;\\n            }else if(nums[mid] == 2){\\n                swap(nums, mid, high);\\n                high--;\\n            }else{\\n                mid++;\\n            }\\n        }\\n    }\\n\\n    public static void swap(int[] nums, int i, int j){\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1543338,
                "title": "c-simple-and-easy-solution-5-lines-o-n-tc-o-1-sc-detailed-explanation",
                "content": "**Idea:**\\nWe hold three pointers: `zero_ptr` which points to the one after the last zero, `one_ptr` which points to the last one, and `two_ptr` which points to the first two.\\n`one_ptr` and `zero_ptr` both start from zero, so when `one_ptr` reaches `two_ptr` we are done.\\nSo we loop `while (one_ptr <= two_ptr)`.\\n1. If we find a zero in `one_ptr`, we swap `nums[zero_ptr]` and `nums[one_ptr]` and advance both, so now we added another zero to the beginning, and `nums[zero_ptr` is supposed to be a one so we pushed it to the end of all the ones.\\n2. If we already have a one in `nums[one_ptr]`, we just move on.\\n3. If we see a two, we swap `nums[two_ptr]` and `nums[one_ptr]`, so we added another two to the end.\\n\\n**Time Complexity:** O(n)\\n**Space Complexity:** O(1)\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int zero_ptr = 0, one_ptr = 0, two_ptr = nums.size()-1;\\n\\n        while (one_ptr <= two_ptr) {\\n            if (nums[one_ptr] == 0) swap(nums[zero_ptr++], nums[one_ptr++]);\\n            else if (nums[one_ptr] == 1) one_ptr++;\\n            else swap(nums[two_ptr--], nums[one_ptr]);\\n        }\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int zero_ptr = 0, one_ptr = 0, two_ptr = nums.size()-1;\\n\\n        while (one_ptr <= two_ptr) {\\n            if (nums[one_ptr] == 0) swap(nums[zero_ptr++], nums[one_ptr++]);\\n            else if (nums[one_ptr] == 1) one_ptr++;\\n            else swap(nums[two_ptr--], nums[one_ptr]);\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1212485,
                "title": "c-100-faster-without-counting-0-s-1-s-and-2-s",
                "content": "\\nclass Solution {\\npublic:\\n\\n    void sortColors(vector<int>& nums) {\\n        int left=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==0){\\n                swap(nums[i],nums[left]);\\n                left++;\\n            }\\n        }\\n        //upper for loop will put all zeroes at the start\\n        \\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==1){\\n                swap(nums[i],nums[left]);\\n                left++;\\n            }\\n        }\\n        //this for loop will put all ones after all zeroes and hence array is sorted now\\n    }\\n};\\n//**Upvote if you find it useful**",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n\\n    void sortColors(vector<int>& nums) {\\n        int left=0;\\n        for(int i=0;i<nums.size();i++){\\n            if(nums[i]==0){\\n                swap(nums[i],nums[left]);\\n                left++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 681863,
                "title": "one-pass-memory-98-with-comments-and-explanation",
                "content": "Because you have only 3 values, 0, 1, 2, you can do it in one pass with 3 pointers.\\nYou know that if you encounter a 0, you can move it to the left group, and if a 2, to the right group. \\nTwo of the pointers are the edges of those 2 groups, while your third pointer is to the element that you will iterate and check values of.\\n\\nSo, checking one element at a time, swap it with the left edge if it\\'s a zero, and right side if it\\'s a 2.  If it\\'s a 1, leave it and go next (it will be moved/swapped later if necessary).\\n```\\nvar sortColors = function(nums) {\\n    let left = 0;\\n    let curr = 0;\\n    let right = nums.length-1;\\n    while (curr<=right) \\n       if (nums[curr] == 0) \\n        [nums[curr++], nums[left++]] = [nums[left], nums[curr]]; //swap values, you are always putting the 0 to the left edge, can increment new current since we have already looked at it before (curr>=left so we have already evaluated it)\\n       else if (nums[curr] == 2) \\n        [nums[curr], nums[right--]] = [nums[right], nums[curr]]; //swap, so right side always has 2\\'s, do not increment current yet because don\\'t know what value it was.\\n       else\\n        curr++; // current was a 1, so you don\\'t move it to either side, go next\\n};\\n```\\n\\nIf this explanation helped, please upvote it so others can notice as well, thanks!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sortColors = function(nums) {\\n    let left = 0;\\n    let curr = 0;\\n    let right = nums.length-1;\\n    while (curr<=right) \\n       if (nums[curr] == 0) \\n        [nums[curr++], nums[left++]] = [nums[left], nums[curr]]; //swap values, you are always putting the 0 to the left edge, can increment new current since we have already looked at it before (curr>=left so we have already evaluated it)\\n       else if (nums[curr] == 2) \\n        [nums[curr], nums[right--]] = [nums[right], nums[curr]]; //swap, so right side always has 2\\'s, do not increment current yet because don\\'t know what value it was.\\n       else\\n        curr++; // current was a 1, so you don\\'t move it to either side, go next\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 26647,
                "title": "share-one-pass-java-solution",
                "content": "The concept is simple. Maintain two pointer, pointer \"one\" indicates the begging of all ones and pointer \"two\" indicates the begging of all twos. When we meet 1, we move 1 to the end of 1 sequence which is begging of two sequence then move begging of 2 forward 1. Doing the same to the 2.\\n\\n    public class Solution {\\n    public void sortColors(int[] A) {\\n        int one = 0; \\n        int two = 0;\\n        for(int i=0;i<A.length;i++){\\n            if(A[i]==0){\\n                A[i] = A[two];\\n                A[two] = A[one];\\n                A[one] = 0;\\n                one++;\\n                two++;\\n            }\\n            else if(A[i]==1){\\n                A[i] = A[two];\\n                A[two] = 1;\\n                two++;\\n            }\\n        }\\n    }}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public void sortColors(int[] A) {\\n        int one = 0; \\n        int two = 0;\\n        for(int i=0;i<A.length;i++){\\n            if(A[i]==0){\\n                A[i] = A[two];\\n                A[two] = A[one];\\n                A[one] = 0;\\n                one++;\\n                two++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1918849,
                "title": "100-fastest-swift-solution-time-o-n-space-o-1",
                "content": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of the nums.\\n    //   - space: O(1), only constant space is used.\\n\\n    func sortColors(_ nums: inout [Int]) {\\n        var zeroIndex = 0\\n        var twoIndex = nums.count - 1\\n        var i = 0\\n\\n        while i <= twoIndex {\\n            if nums[i] == 0, i > zeroIndex {\\n                nums.swapAt(i, zeroIndex)\\n                zeroIndex += 1\\n\\n            } else if nums[i] == 2, i < twoIndex {\\n                nums.swapAt(i, twoIndex)\\n                twoIndex -= 1\\n\\n            } else {\\n                i += 1\\n            }\\n        }\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of the nums.\\n    //   - space: O(1), only constant space is used.\\n\\n    func sortColors(_ nums: inout [Int]) {\\n        var zeroIndex = 0\\n        var twoIndex = nums.count - 1\\n        var i = 0\\n\\n        while i <= twoIndex {\\n            if nums[i] == 0, i > zeroIndex {\\n                nums.swapAt(i, zeroIndex)\\n                zeroIndex += 1\\n\\n            } else if nums[i] == 2, i < twoIndex {\\n                nums.swapAt(i, twoIndex)\\n                twoIndex -= 1\\n\\n            } else {\\n                i += 1\\n            }\\n        }\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 26605,
                "title": "javascript-one-pass-with-explaination",
                "content": "![0_1474676686328_75. Sort Colors.jpg](/uploads/files/1474676687419-75.sort-colors.jpg) \\n\\n```javascript\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar sortColors = function(nums) {\\n    var low = 0,\\n        high = nums.length - 1,\\n        temp;\\n    \\n    for (var i = 0; i <= high; ) {\\n        if (nums[i] === 0) {\\n            temp = nums[i];\\n            nums[i] = nums[low];\\n            nums[low] = temp;\\n            i++;\\n            low++;\\n        } else if (nums[i] == 2) {\\n            temp = nums[i];\\n            nums[i] = nums[high];\\n            nums[high] = temp;\\n            high--;\\n        } else {\\n            i++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\n/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar sortColors = function(nums) {\\n    var low = 0,\\n        high = nums.length - 1,\\n        temp;\\n    \\n    for (var i = 0; i <= high; ) {\\n        if (nums[i] === 0) {\\n            temp = nums[i];\\n            nums[i] = nums[low];\\n            nums[low] = temp;\\n            i++;\\n            low++;\\n        } else if (nums[i] == 2) {\\n            temp = nums[i];\\n            nums[i] = nums[high];\\n            nums[high] = temp;\\n            high--;\\n        } else {\\n            i++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1078865,
                "title": "one-pass-o-n-time-o-1-space-3-pointer-approach",
                "content": "```\\nclass Solution:\\n    def sortColors(self, a: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        runner = 0\\n        left_partition = 0\\n        right_partition = len(a) - 1\\n        while runner <= right_partition:\\n            if a[runner] == 0:\\n                a[runner], a[left_partition] = a[left_partition], a[runner]\\n                runner += 1\\n                left_partition += 1\\n            elif a[runner] == 1:\\n                runner += 1\\n            else:\\n                a[runner], a[right_partition] = a[right_partition], a[runner]\\n                right_partition -= 1\\n        return a\\n```\\nFor more such problems: https://github.com/vanigupta20024/Programming-Challenges",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortColors(self, a: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        runner = 0\\n        left_partition = 0\\n        right_partition = len(a) - 1\\n        while runner <= right_partition:\\n            if a[runner] == 0:\\n                a[runner], a[left_partition] = a[left_partition], a[runner]\\n                runner += 1\\n                left_partition += 1\\n            elif a[runner] == 1:\\n                runner += 1\\n            else:\\n                a[runner], a[right_partition] = a[right_partition], a[runner]\\n                right_partition -= 1\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3697569,
                "title": "java-striver-easy-understanding",
                "content": "```\\n# Better Approach\\n\\n* Time Complexity : O(2*N)\\n* Space Complexity : O(1) \\n\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int count0 = 0;\\n        int count1 = 0;\\n        int count2 = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) count0++;\\n            else if (nums[i] == 1) count1++;\\n            else count2++;\\n        }\\n        for (int i = 0; i < count0; i++) nums[i] = 0;\\n        for (int i = count0; i < count0 + count1; i++) nums[i] = 1;\\n        for (int i = count0 + count1; i < nums.length; i++) nums[i] = 2;\\n\\n    }\\n}\\n```\\n\\n```\\n# Optimal Approach #\\n\\nDUTCH NATIONAL FLAG ALGORITHM\\n\\nTime Complexity : O(N)\\nSpace Complexity : O(1) \\n\\nclass Solution {\\n\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1;\\n        while (mid <= high) {\\n            if (nums[mid] == 0) {\\n                int temp = nums[low];\\n                nums[low] = nums[mid];\\n                nums[mid] = temp;\\n                low++;\\n                mid++;\\n            } else if (nums[mid] == 1) mid++;\\n            else {\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--;\\n            }\\n        }\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/7243bb39-3484-4bc1-83e6-16a90cf64fd2_1688563566.56007.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n# Better Approach\\n\\n* Time Complexity : O(2*N)\\n* Space Complexity : O(1) \\n\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int count0 = 0;\\n        int count1 = 0;\\n        int count2 = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            if (nums[i] == 0) count0++;\\n            else if (nums[i] == 1) count1++;\\n            else count2++;\\n        }\\n        for (int i = 0; i < count0; i++) nums[i] = 0;\\n        for (int i = count0; i < count0 + count1; i++) nums[i] = 1;\\n        for (int i = count0 + count1; i < nums.length; i++) nums[i] = 2;\\n\\n    }\\n}\\n```\n```\\n# Optimal Approach #\\n\\nDUTCH NATIONAL FLAG ALGORITHM\\n\\nTime Complexity : O(N)\\nSpace Complexity : O(1) \\n\\nclass Solution {\\n\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1;\\n        while (mid <= high) {\\n            if (nums[mid] == 0) {\\n                int temp = nums[low];\\n                nums[low] = nums[mid];\\n                nums[mid] = temp;\\n                low++;\\n                mid++;\\n            } else if (nums[mid] == 1) mid++;\\n            else {\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2834862,
                "title": "one-pass-c-solution-tc-o-n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis problem is the classic problem known as **\\'Dutch National Flag Problem\\'** due to 0, 1 and 2 representing red, white and blue of the nation\\'s flag.\\n\\nHere, the intuition is to partition the array into regions using iterators such that all the elements to the left of an iterator (low), i.e. ending of first region, are equal to 0, and all the elements to the right of another iterator (high), indicate the start of region C, which contain the number 2. The third region B contains all 1\\'s and the entire array is traversed using a third iterator (mid).\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBoth low and mid point to the start of the array, while high points to the end of array. All the swapping done in the array is based on the element pointed by mid.\\n\\n*If mid is equal to 0, swap low and mid and then increment both.\\nIf mid is equal to 1, simply increment it.\\nIf mid is equal to 2, swap high and mid and finally, decrement high.*\\n\\nContinue this process till mid is less than or equal to high.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low=0, mid=0, high=nums.size()-1;\\n\\n        //All numbers to left of low are 0\\n        //All numbers to right of high are 2\\n\\n        while(mid<=high){\\n            if(nums[mid]==0)\\n                swap(nums[low++], nums[mid++]);\\n            else if(nums[mid]==1)\\n                mid++;\\n            else\\n                swap(nums[mid], nums[high--]);\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low=0, mid=0, high=nums.size()-1;\\n\\n        //All numbers to left of low are 0\\n        //All numbers to right of high are 2\\n\\n        while(mid<=high){\\n            if(nums[mid]==0)\\n                swap(nums[low++], nums[mid++]);\\n            else if(nums[mid]==1)\\n                mid++;\\n            else\\n                swap(nums[mid], nums[high--]);\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 681964,
                "title": "c-o-n-one-pass-o-1-space-with-explanation",
                "content": "Three pointers => \\np0:  right boundary of 0\\npn:  left boundary of 2\\ncurr :  current pointer\\n\\n![image](https://assets.leetcode.com/users/frostcs/image_1591883944.png)\\npic courtesy editorial.\\n\\n\\n```  \\nint n = nums.size();\\n        int p0=0;\\n        int pn =n-1;\\n        int curr =0;\\n        while(curr<=pn){\\n            if(nums[curr] == 0){\\n                swap(nums[p0], nums[curr]);\\n                p0++;\\n                curr++;\\n            } else if(nums[curr] == 2){\\n                 swap(nums[pn], nums[curr]);\\n                pn--;\\n            } else{\\n                curr++;\\n            }\\n        }\\n   ```",
                "solutionTags": [
                    "C"
                ],
                "code": "```  \\nint n = nums.size();\\n        int p0=0;\\n        int pn =n-1;\\n        int curr =0;\\n        while(curr<=pn){\\n            if(nums[curr] == 0){\\n                swap(nums[p0], nums[curr]);\\n                p0++;\\n                curr++;\\n            } else if(nums[curr] == 2){\\n                 swap(nums[pn], nums[curr]);\\n                pn--;\\n            } else{\\n                curr++;\\n            }\\n        }\\n   ```",
                "codeTag": "Unknown"
            },
            {
                "id": 3649859,
                "title": "3-pointer-approach-dutch-national-flag-algorithm-most-efficient-solution-tc-o-n-sc-o-1",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n      O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n      O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,k=nums.size()-1;\\n        while(j<=k){\\n            if(nums[j]==0) {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }else if(nums[j]==1){\\n               \\n                j++;\\n            }else{\\n                swap(nums[j],nums[k]);\\n                \\n                k--;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,k=nums.size()-1;\\n        while(j<=k){\\n            if(nums[j]==0) {\\n                swap(nums[i],nums[j]);\\n                i++;\\n                j++;\\n            }else if(nums[j]==1){\\n               \\n                j++;\\n            }else{\\n                swap(nums[j],nums[k]);\\n                \\n                k--;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3519937,
                "title": "c-java-python-javascript-using-bubble-sort-algorithm",
                "content": "# Intuition:\\nThis solution is based on the bubble sort algorithm, which is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares adjacent elements and swaps them if they are in the wrong order. The algorithm gets its name from the way smaller elements \"bubble\" to the top of the list. \\n\\n# Approach:\\n1. Traverse the array from the end to the beginning with a loop variable \\'i\\'.\\n2. For each iteration of the outer loop, traverse the array from the beginning to \\'i-1\\' with a loop variable \\'j\\'.\\n3. Compare adjacent elements and swap them if they are in the wrong order, i.e., if nums[j]>nums[j+1].\\n4. Repeat steps 2-3 for all iterations of the outer loop, until the array is sorted in ascending order.\\n5. The resulting array will be sorted in non-decreasing order.\\n\\n# Complexity:\\n- The time complexity of this algorithm is O(n^2), where \\'n\\' is the length of the input array. This is because we are using nested loops to traverse the array. \\n- The space complexity of this algorithm is O(1), because we are not using any extra space and we are sorting the input array in-place.\\n\\n---\\n# C++\\n```cpp\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        for(int i=nums.size()-1;i>0;i--){\\n            for(int j=0;j<=i-1;j++){\\n                if(nums[j]>nums[j+1]){\\n                    int temp = nums[j+1];\\n                    nums[j+1]=nums[j];\\n                    nums[j]=temp;\\n                }\\n            }\\n        }\\n    }\\n};\\n```\\n---\\n\\n# JAVA\\n```java\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        for (int i = nums.length - 1; i > 0; i--) {\\n            for (int j = 0; j <= i - 1; j++) {\\n                if (nums[j] > nums[j + 1]) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n```\\n---\\n\\n# Python\\n```py\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        for i in range(len(nums) - 1, 0, -1):\\n            for j in range(i):\\n                if nums[j] > nums[j + 1]:\\n                    temp = nums[j + 1]\\n                    nums[j + 1] = nums[j]\\n                    nums[j] = temp\\n\\n```\\n\\n---\\n# JavaScript\\n```\\nvar sortColors = function(nums) {\\n    for (let i = nums.length - 1; i > 0; i--) {\\n        for (let j = 0; j <= i - 1; j++) {\\n            if (nums[j] > nums[j + 1]) {\\n                let temp = nums[j + 1];\\n                nums[j + 1] = nums[j];\\n                nums[j] = temp;\\n            }\\n        }\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Sorting"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        for(int i=nums.size()-1;i>0;i--){\\n            for(int j=0;j<=i-1;j++){\\n                if(nums[j]>nums[j+1]){\\n                    int temp = nums[j+1];\\n                    nums[j+1]=nums[j];\\n                    nums[j]=temp;\\n                }\\n            }\\n        }\\n    }\\n};\\n```\n```java\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        for (int i = nums.length - 1; i > 0; i--) {\\n            for (int j = 0; j <= i - 1; j++) {\\n                if (nums[j] > nums[j + 1]) {\\n                    int temp = nums[j + 1];\\n                    nums[j + 1] = nums[j];\\n                    nums[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n```\n```py\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        for i in range(len(nums) - 1, 0, -1):\\n            for j in range(i):\\n                if nums[j] > nums[j + 1]:\\n                    temp = nums[j + 1]\\n                    nums[j + 1] = nums[j]\\n                    nums[j] = temp\\n\\n```\n```\\nvar sortColors = function(nums) {\\n    for (let i = nums.length - 1; i > 0; i--) {\\n        for (let j = 0; j <= i - 1; j++) {\\n            if (nums[j] > nums[j + 1]) {\\n                let temp = nums[j + 1];\\n                nums[j + 1] = nums[j];\\n                nums[j] = temp;\\n            }\\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2410189,
                "title": "easy-100-fully-explained-java-c-python-javascript-c-python3",
                "content": "# **# The Dutch National Flag Problem!! #**\\n\\n# **Java Solution:**\\nRuntime: 0 ms, faster than 100.00% of Java online submissions for Sort Colors.\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        // Keep three counter to count 0s, 1s and 2s...\\n        int idx, count0s = 0, count1s = 0, count2s = 0;\\n        // Traverse the array & Count the number of 0s, 1s and 2s in the array...\\n        for (idx = 0; idx < nums.length ; idx++) {\\n            switch (nums[idx]) {\\n            // If the element is 0 then increase count0s...\\n            case 0:\\n                count0s++;\\n                break;\\n            // If the element is 1 then increase count1s...\\n            case 1:\\n                count1s++;\\n                break;\\n            // If the element is 2 then increase count2s...\\n            case 2:\\n                count2s++;\\n                break;\\n            }\\n        }\\n        // Update the array\\n        idx = 0;\\n        // Store all the 0s in the beginning...\\n        while (count0s > 0) {\\n            nums[idx++] = 0;\\n            count0s--;\\n        }\\n        // Then store all the 1s...\\n        while (count1s > 0) {\\n            nums[idx++] = 1;\\n            count1s--;\\n        }\\n        // Finally store all the 2s...\\n        while (count2s > 0) {\\n            nums[idx++] = 2;\\n            count2s--;\\n        }\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\nRuntime: 3 ms, faster than 87.97% of C++ online submissions for Sort Colors.\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        // Keep three indices beg = 0, mid = 0 and end = nums.size()-1...\\n        // There are four ranges, 1 to beg (the range containing 0), beg to mid (the range containing 1), mid to end (the range containing unknown elements) and end to nums.size() (the range containing 2)...\\n        int beg = 0, mid = 0, end = nums.size()-1;\\n        // Traverse the array from start to end and mid is less than end...\\n        while(mid <= end) {\\n            // If the element is 0 then swap the element with the element at index beg...\\n            // & Update beg = beg + 1 and mid = mid + 1...\\n            if(nums[mid] == 0) {\\n                swap(nums[mid], nums[beg]);\\n                beg++;\\n                mid++;\\n            }\\n            // If the element is 1 then update mid = mid + 1...\\n            else if(nums[mid] == 1)\\n                mid++;\\n            // If the element is 2 then swap the element with the element at index end...\\n            // & Update end = end \\u2013 1...\\n            else {\\n                swap(nums[mid], nums[end]);\\n                end--;\\n            }\\n        }\\n    }\\n};\\n```\\n\\n# **Python Solution:**\\nRuntime: 28 ms, faster than 85.50% of Python online submissions for Sort Colors.\\n```\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        # Keep three counter to count 0s, 1s and 2s...\\n        count0s = 0\\n        count1s = 0\\n        count2s = 0\\n        # Traverse the array & Count the number of 0s, 1s and 2s in the array...\\n        for idx in range(len(nums)):\\n            # If the element is 0 then increase count0s...\\n            if nums[idx] == 0:\\n                count0s += 1\\n            # If the element is 1 then increase count1s...\\n            elif nums[idx] == 1:\\n                count1s += 1\\n            # If the element is 2 then increase count2s...\\n            elif nums[idx] == 2:\\n                count2s += 1\\n        # Update the array\\n        idx = 0;\\n        # Store all the 0s in the beginning...\\n        while (count0s > 0):\\n            nums[idx] = 0\\n            idx += 1\\n            count0s -= 1\\n        # Then store all the 1s...\\n        while (count1s > 0):\\n            nums[idx] = 1\\n            idx += 1\\n            count1s -= 1\\n        # Finally store all the 2s...\\n        while (count2s > 0):\\n            nums[idx] = 2\\n            idx += 1\\n            count2s -= 1\\n```\\n\\n# **JavaScript Solution:**\\n```\\nvar sortColors = function(nums) {\\n    // Keep three indices beg = 0, mid = 0 and end = nums.length-1...\\n    // There are four ranges, 1 to beg (the range containing 0), beg to mid (the range containing 1), mid to end (the range containing unknown elements) and end to nums.length (the range containing 2)...\\n    let beg = 0; \\n    let end = nums.length - 1; \\n    let mid = 0;\\n    let temp = 0;\\n    // Traverse the array from start to end and mid is less than end...\\n    while (mid <= end) {\\n        // If the element is 0...\\n        if(nums[mid] == 0) {\\n            // swap the element with the element at index beg...\\n            temp = nums[beg]; \\n            nums[beg] = nums[mid]; \\n            nums[mid] = temp;\\n            // Update beg = beg + 1 and mid = mid + 1...\\n            beg++; \\n            mid++; \\n        }\\n        // If the element is 1 then update mid = mid + 1...\\n        else if(nums[mid] == 1) {\\n            mid++; \\n        }\\n        // If the element is 2...\\n        else {\\n            // Swap the element with the element at index end...\\n            temp = nums[mid]; \\n            nums[mid] = nums[end]; \\n            nums[end] = temp;\\n            // Update end = end \\u2013 1...\\n            end--;\\n        }      \\n    }\\n};\\n```\\n\\n# **C Language:**\\n```\\nvoid sortColors(int* nums, int numsSize){\\n    // Keep three counter to count 0s, 1s and 2s...\\n    int idx, count0s = 0, count1s = 0, count2s = 0;\\n    // Traverse the array & Count the number of 0s, 1s and 2s in the array...\\n    for (idx = 0; idx < numsSize ; idx++) {\\n        switch (nums[idx]) {\\n        // If the element is 0 then increase count0s...\\n        case 0:\\n            count0s++;\\n            break;\\n        // If the element is 1 then increase count1s...\\n        case 1:\\n            count1s++;\\n            break;\\n        // If the element is 2 then increase count2s...\\n        case 2:\\n            count2s++;\\n            break;\\n        }\\n    }\\n    // Update the array\\n    idx = 0;\\n    // Store all the 0s in the beginning...\\n    while (count0s > 0) {\\n        nums[idx++] = 0;\\n        count0s--;\\n    }\\n    // Then store all the 1s...\\n    while (count1s > 0) {\\n        nums[idx++] = 1;\\n        count1s--;\\n    }\\n    // Finally store all the 2s...\\n    while (count2s > 0) {\\n        nums[idx++] = 2;\\n        count2s--;\\n    }\\n}\\n```\\n\\n# **Python3 Solution:**\\n```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        # Keep three indices beg = 0, mid = 0 and end = len(nums)-1...\\n        # There are four ranges, 1 to beg (the range containing 0), beg to mid (the range containing 1), mid to end (the range containing unknown elements) and end to len(nums) (the range containing 2)...\\n        beg = 0\\n        end = len(nums) - 1\\n        mid = 0\\n        # Traverse the array from start to end and mid is less than end...\\n        while mid <= end:\\n            # If the element is 0...\\n            if nums[mid] == 0:\\n                # swap the element with the element at index beg...\\n                nums[beg], nums[mid] = nums[mid], nums[beg]\\n                # Update beg = beg + 1 and mid = mid + 1...\\n                beg = beg + 1\\n                mid = mid + 1\\n            # If the element is 1 then update mid = mid + 1...\\n            elif nums[mid] == 1:\\n                mid = mid + 1\\n            # If the element is 2...\\n            else:\\n                # Swap the element with the element at index end...\\n                nums[mid], nums[end] = nums[end], nums[mid]\\n                # Update end = end \\u2013 1...\\n                end = end - 1\\n```\\n**I am working hard for you guys...\\nPlease upvote if you find any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        // Keep three counter to count 0s, 1s and 2s...\\n        int idx, count0s = 0, count1s = 0, count2s = 0;\\n        // Traverse the array & Count the number of 0s, 1s and 2s in the array...\\n        for (idx = 0; idx < nums.length ; idx++) {\\n            switch (nums[idx]) {\\n            // If the element is 0 then increase count0s...\\n            case 0:\\n                count0s++;\\n                break;\\n            // If the element is 1 then increase count1s...\\n            case 1:\\n                count1s++;\\n                break;\\n            // If the element is 2 then increase count2s...\\n            case 2:\\n                count2s++;\\n                break;\\n            }\\n        }\\n        // Update the array\\n        idx = 0;\\n        // Store all the 0s in the beginning...\\n        while (count0s > 0) {\\n            nums[idx++] = 0;\\n            count0s--;\\n        }\\n        // Then store all the 1s...\\n        while (count1s > 0) {\\n            nums[idx++] = 1;\\n            count1s--;\\n        }\\n        // Finally store all the 2s...\\n        while (count2s > 0) {\\n            nums[idx++] = 2;\\n            count2s--;\\n        }\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        // Keep three indices beg = 0, mid = 0 and end = nums.size()-1...\\n        // There are four ranges, 1 to beg (the range containing 0), beg to mid (the range containing 1), mid to end (the range containing unknown elements) and end to nums.size() (the range containing 2)...\\n        int beg = 0, mid = 0, end = nums.size()-1;\\n        // Traverse the array from start to end and mid is less than end...\\n        while(mid <= end) {\\n            // If the element is 0 then swap the element with the element at index beg...\\n            // & Update beg = beg + 1 and mid = mid + 1...\\n            if(nums[mid] == 0) {\\n                swap(nums[mid], nums[beg]);\\n                beg++;\\n                mid++;\\n            }\\n            // If the element is 1 then update mid = mid + 1...\\n            else if(nums[mid] == 1)\\n                mid++;\\n            // If the element is 2 then swap the element with the element at index end...\\n            // & Update end = end \\u2013 1...\\n            else {\\n                swap(nums[mid], nums[end]);\\n                end--;\\n            }\\n        }\\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        # Keep three counter to count 0s, 1s and 2s...\\n        count0s = 0\\n        count1s = 0\\n        count2s = 0\\n        # Traverse the array & Count the number of 0s, 1s and 2s in the array...\\n        for idx in range(len(nums)):\\n            # If the element is 0 then increase count0s...\\n            if nums[idx] == 0:\\n                count0s += 1\\n            # If the element is 1 then increase count1s...\\n            elif nums[idx] == 1:\\n                count1s += 1\\n            # If the element is 2 then increase count2s...\\n            elif nums[idx] == 2:\\n                count2s += 1\\n        # Update the array\\n        idx = 0;\\n        # Store all the 0s in the beginning...\\n        while (count0s > 0):\\n            nums[idx] = 0\\n            idx += 1\\n            count0s -= 1\\n        # Then store all the 1s...\\n        while (count1s > 0):\\n            nums[idx] = 1\\n            idx += 1\\n            count1s -= 1\\n        # Finally store all the 2s...\\n        while (count2s > 0):\\n            nums[idx] = 2\\n            idx += 1\\n            count2s -= 1\\n```\n```\\nvar sortColors = function(nums) {\\n    // Keep three indices beg = 0, mid = 0 and end = nums.length-1...\\n    // There are four ranges, 1 to beg (the range containing 0), beg to mid (the range containing 1), mid to end (the range containing unknown elements) and end to nums.length (the range containing 2)...\\n    let beg = 0; \\n    let end = nums.length - 1; \\n    let mid = 0;\\n    let temp = 0;\\n    // Traverse the array from start to end and mid is less than end...\\n    while (mid <= end) {\\n        // If the element is 0...\\n        if(nums[mid] == 0) {\\n            // swap the element with the element at index beg...\\n            temp = nums[beg]; \\n            nums[beg] = nums[mid]; \\n            nums[mid] = temp;\\n            // Update beg = beg + 1 and mid = mid + 1...\\n            beg++; \\n            mid++; \\n        }\\n        // If the element is 1 then update mid = mid + 1...\\n        else if(nums[mid] == 1) {\\n            mid++; \\n        }\\n        // If the element is 2...\\n        else {\\n            // Swap the element with the element at index end...\\n            temp = nums[mid]; \\n            nums[mid] = nums[end]; \\n            nums[end] = temp;\\n            // Update end = end \\u2013 1...\\n            end--;\\n        }      \\n    }\\n};\\n```\n```\\nvoid sortColors(int* nums, int numsSize){\\n    // Keep three counter to count 0s, 1s and 2s...\\n    int idx, count0s = 0, count1s = 0, count2s = 0;\\n    // Traverse the array & Count the number of 0s, 1s and 2s in the array...\\n    for (idx = 0; idx < numsSize ; idx++) {\\n        switch (nums[idx]) {\\n        // If the element is 0 then increase count0s...\\n        case 0:\\n            count0s++;\\n            break;\\n        // If the element is 1 then increase count1s...\\n        case 1:\\n            count1s++;\\n            break;\\n        // If the element is 2 then increase count2s...\\n        case 2:\\n            count2s++;\\n            break;\\n        }\\n    }\\n    // Update the array\\n    idx = 0;\\n    // Store all the 0s in the beginning...\\n    while (count0s > 0) {\\n        nums[idx++] = 0;\\n        count0s--;\\n    }\\n    // Then store all the 1s...\\n    while (count1s > 0) {\\n        nums[idx++] = 1;\\n        count1s--;\\n    }\\n    // Finally store all the 2s...\\n    while (count2s > 0) {\\n        nums[idx++] = 2;\\n        count2s--;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        # Keep three indices beg = 0, mid = 0 and end = len(nums)-1...\\n        # There are four ranges, 1 to beg (the range containing 0), beg to mid (the range containing 1), mid to end (the range containing unknown elements) and end to len(nums) (the range containing 2)...\\n        beg = 0\\n        end = len(nums) - 1\\n        mid = 0\\n        # Traverse the array from start to end and mid is less than end...\\n        while mid <= end:\\n            # If the element is 0...\\n            if nums[mid] == 0:\\n                # swap the element with the element at index beg...\\n                nums[beg], nums[mid] = nums[mid], nums[beg]\\n                # Update beg = beg + 1 and mid = mid + 1...\\n                beg = beg + 1\\n                mid = mid + 1\\n            # If the element is 1 then update mid = mid + 1...\\n            elif nums[mid] == 1:\\n                mid = mid + 1\\n            # If the element is 2...\\n            else:\\n                # Swap the element with the element at index end...\\n                nums[mid], nums[end] = nums[end], nums[mid]\\n                # Update end = end \\u2013 1...\\n                end = end - 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1555767,
                "title": "java-tc-o-n-sc-o-1-simple-one-pass-constant-space-w-o-using-a-swap-function",
                "content": "**One-Pass Constant Space solution (Without using a Swap Function)**\\n```java\\n/**\\n * One-Pass Constant Space solution (Without using a Swap Function)\\n *\\n * Move all 0s to the left and all 2s to the right, then all 1s are left in the middle. Without using a swap function.\\n *\\n * Time Complexity: O(N). N = Length of input array.\\n *\\n * Space Complexity: O(1)\\n */\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        if (nums == null || nums.length <= 1) {\\n            return;\\n        }\\n\\n        int zeros = 0;\\n        int twos = nums.length - 1;\\n        int i = 0;\\n\\n        while (i <= twos) {\\n            switch (nums[i]) {\\n                case 2:\\n                    if (i != twos) {\\n                        nums[i] = nums[twos];\\n                        nums[twos] = 2;\\n                    }\\n                    twos--;\\n                    // Cannot increment i. The number at i can now be a zero.\\n                    break;\\n                case 1:\\n                    i++;\\n                    break;\\n                case 0:\\n                    if (i != zeros) {\\n                        nums[i] = 1;\\n                        nums[zeros] = 0;\\n                    }\\n                    zeros++;\\n                    // Can increment i. As only 0s and 1s are present between zero and i.\\n                    i++;\\n                    break;\\n                default:\\n                    throw new IllegalArgumentException(\"Invalid color\");\\n            }\\n        }\\n    }\\n}\\n```\\n\\n---\\n**One-Pass Constant Space solution (Using a Swap Function)**\\n```java\\n/**\\n * One-Pass Constant Space solution (Using a Swap Function)\\n *\\n * Move all 0s to the left and all 2s to the right, then all 1s are left in the middle. Using a Swap function\\n *\\n * Time Complexity: O(N). N = Length of input array.\\n *\\n * Space Complexity: O(1)\\n */\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        if (nums == null || nums.length <= 1) {\\n            return;\\n        }\\n\\n        int zeros = 0;\\n        int twos = nums.length - 1;\\n        int i = 0;\\n\\n        while (i <= twos) {\\n            if (nums[i] == 0) {\\n                swap(nums, i, zeros);\\n                zeros++;\\n                // Can increment i. As only 0s and 1s are present between zero and i.\\n                i++;\\n            } else if (nums[i] == 2) {\\n                swap(nums, i, twos);\\n                twos--;\\n                // Cannot increment i. The number at i can now be a zero.\\n            } else {\\n                // Its a one.. so we do not need to move it.\\n                i++;\\n            }\\n        }\\n    }\\n\\n    private void swap(int[] nums, int i, int j) {\\n        if (i != j) {\\n            int temp = nums[i];\\n            nums[i] = nums[j];\\n            nums[j] = temp;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\n/**\\n * One-Pass Constant Space solution (Without using a Swap Function)\\n *\\n * Move all 0s to the left and all 2s to the right, then all 1s are left in the middle. Without using a swap function.\\n *\\n * Time Complexity: O(N). N = Length of input array.\\n *\\n * Space Complexity: O(1)\\n */\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        if (nums == null || nums.length <= 1) {\\n            return;\\n        }\\n\\n        int zeros = 0;\\n        int twos = nums.length - 1;\\n        int i = 0;\\n\\n        while (i <= twos) {\\n            switch (nums[i]) {\\n                case 2:\\n                    if (i != twos) {\\n                        nums[i] = nums[twos];\\n                        nums[twos] = 2;\\n                    }\\n                    twos--;\\n                    // Cannot increment i. The number at i can now be a zero.\\n                    break;\\n                case 1:\\n                    i++;\\n                    break;\\n                case 0:\\n                    if (i != zeros) {\\n                        nums[i] = 1;\\n                        nums[zeros] = 0;\\n                    }\\n                    zeros++;\\n                    // Can increment i. As only 0s and 1s are present between zero and i.\\n                    i++;\\n                    break;\\n                default:\\n                    throw new IllegalArgumentException(\"Invalid color\");\\n            }\\n        }\\n    }\\n}\\n```\n```java\\n/**\\n * One-Pass Constant Space solution (Using a Swap Function)\\n *\\n * Move all 0s to the left and all 2s to the right, then all 1s are left in the middle. Using a Swap function\\n *\\n * Time Complexity: O(N). N = Length of input array.\\n *\\n * Space Complexity: O(1)\\n */\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        if (nums == null || nums.length <= 1) {\\n            return;\\n        }\\n\\n        int zeros = 0;\\n        int twos = nums.length - 1;\\n        int i = 0;\\n\\n        while (i <= twos) {\\n            if (nums[i] == 0) {\\n                swap(nums, i, zeros);\\n                zeros++;\\n                // Can increment i. As only 0s and 1s are present between zero and i.\\n                i++;\\n            } else if (nums[i] == 2) {\\n                swap(nums, i, twos);\\n                twos--;\\n                // Cannot increment i. The number at i can now be a zero.\\n            } else {\\n                // Its a one.. so we do not need to move it.\\n                i++;\\n            }\\n        }\\n    }\\n\\n    private void swap(int[] nums, int i, int j) {\\n        if (i != j) {\\n            int temp = nums[i];\\n            nums[i] = nums[j];\\n            nums[j] = temp;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 681637,
                "title": "python-js-go-one-pass-by-two-pointers-w-comment",
                "content": "Python/JS/Go one-pass by two-pointers.\\n\\n---\\n\\n**Implementation** in Python:\\n\\n```\\nclass Solution:\\n    \\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        \\n        # constant for colors\\n        RED, WHITE, BLUE = 0, 1, 2\\n        \\n        # two pointers for RED as well as BLUE\\n        idx_red, idx_blue = 0, len(nums)-1\\n        \\n        i = 0\\n        while i <= idx_blue :\\n            \\n            if nums[i] == RED:\\n                \\n                nums[idx_red], nums[i] = nums[i], nums[idx_red]\\n                \\n                # update idx for red\\n                idx_red += 1\\n            \\n            \\n            elif nums[i] == BLUE:\\n            \\n                nums[idx_blue], nums[i] = nums[i], nums[idx_blue]\\n                \\n                # update idx for blue\\n                idx_blue -= 1\\n                \\n                # i-1 in order to stay and do one more color check on next iteration\\n                i -= 1\\n            \\n            \\n            # i move forward\\n            i += 1                \\n        \\n```\\n\\n---\\n\\n**Implementation** in JavaScript:\\n\\n```\\nvar sortColors = function(nums) {\\n  \\n    const [RED, WHITE, BLUE] = [0, 1, 2];\\n    \\n    let i = 0;\\n    let [idx_red, idx_blue] = [0, nums.length-1];\\n    \\n    while(i <= idx_blue ){\\n        \\n        if(nums[i] == RED){\\n            \\n            // Swap red element to lefthand side\\n            [ nums[i], nums[idx_red] ] = [ nums[idx_red], nums[i] ];\\n            idx_red++;\\n            \\n        }else if(nums[i] == BLUE ){\\n            \\n            // Swap blue element to righthand side\\n            [ nums[i], nums[idx_blue] ] = [ nums[idx_blue], nums[i] ];\\n            idx_blue--;\\n            \\n            // i stay here for one more check on next iteration\\n            i -= 1;\\n        }\\n        \\n        \\n        // i moves from left to right\\n        i += 1;\\n    } \\n    \\n};\\n```\\n\\n---\\n\\n**Implementation** in Go:\\n\\n```\\nfunc sortColors(nums []int)  {\\n    \\n    const RED, WHITE, BLUE = 0, 1, 2\\n    \\n    i, idx_red, idx_blue := 0, 0, len(nums)-1\\n    \\n    for ;i <= idx_blue; i+=1{\\n        \\n        if nums[i] == RED{\\n            nums[i], nums[idx_red] = nums[idx_red], nums[i]\\n            idx_red += 1\\n            \\n        }else if nums[i] == BLUE{\\n            nums[i], nums[idx_blue] = nums[idx_blue], nums[i]\\n            idx_blue -= 1\\n            \\n            // i stay here for one more check on next iteration\\n            i -= 1\\n            \\n        }\\n        \\n        \\n    }\\n    \\n    return\\n    \\n}\\n```",
                "solutionTags": [
                    "Python",
                    "JavaScript",
                    "Go",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    \\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        \\n        # constant for colors\\n        RED, WHITE, BLUE = 0, 1, 2\\n        \\n        # two pointers for RED as well as BLUE\\n        idx_red, idx_blue = 0, len(nums)-1\\n        \\n        i = 0\\n        while i <= idx_blue :\\n            \\n            if nums[i] == RED:\\n                \\n                nums[idx_red], nums[i] = nums[i], nums[idx_red]\\n                \\n                # update idx for red\\n                idx_red += 1\\n            \\n            \\n            elif nums[i] == BLUE:\\n            \\n                nums[idx_blue], nums[i] = nums[i], nums[idx_blue]\\n                \\n                # update idx for blue\\n                idx_blue -= 1\\n                \\n                # i-1 in order to stay and do one more color check on next iteration\\n                i -= 1\\n            \\n            \\n            # i move forward\\n            i += 1                \\n        \\n```\n```\\nvar sortColors = function(nums) {\\n  \\n    const [RED, WHITE, BLUE] = [0, 1, 2];\\n    \\n    let i = 0;\\n    let [idx_red, idx_blue] = [0, nums.length-1];\\n    \\n    while(i <= idx_blue ){\\n        \\n        if(nums[i] == RED){\\n            \\n            // Swap red element to lefthand side\\n            [ nums[i], nums[idx_red] ] = [ nums[idx_red], nums[i] ];\\n            idx_red++;\\n            \\n        }else if(nums[i] == BLUE ){\\n            \\n            // Swap blue element to righthand side\\n            [ nums[i], nums[idx_blue] ] = [ nums[idx_blue], nums[i] ];\\n            idx_blue--;\\n            \\n            // i stay here for one more check on next iteration\\n            i -= 1;\\n        }\\n        \\n        \\n        // i moves from left to right\\n        i += 1;\\n    } \\n    \\n};\\n```\n```\\nfunc sortColors(nums []int)  {\\n    \\n    const RED, WHITE, BLUE = 0, 1, 2\\n    \\n    i, idx_red, idx_blue := 0, 0, len(nums)-1\\n    \\n    for ;i <= idx_blue; i+=1{\\n        \\n        if nums[i] == RED{\\n            nums[i], nums[idx_red] = nums[idx_red], nums[i]\\n            idx_red += 1\\n            \\n        }else if nums[i] == BLUE{\\n            nums[i], nums[idx_blue] = nums[idx_blue], nums[i]\\n            idx_blue -= 1\\n            \\n            // i stay here for one more check on next iteration\\n            i -= 1\\n            \\n        }\\n        \\n        \\n    }\\n    \\n    return\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2171105,
                "title": "c-solution-count-0-s-1-s-2-s-0ms-faster-than-100-tc-o-n",
                "content": "**Explaination:**\\n* Make variable count0, count1, count2 for 0\\'s, 1\\'s and 2\\'s respectively.\\n* Traverse the array and count the number of 0\\'s 1\\'s and 2\\'s.\\n* Now overwrite the original array in order of 0\\'s, 1\\'s and 2\\'s using the count variables.\\n```\\n// Keeping a count of 0\\'s 1\\'s and 2\\'s and updating the original array\\n//Time complexity - O(2N)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0 = 0, count1 = 0, count2 = 0;\\n        \\n        for(int i = 0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)\\n                count0++;\\n            if(nums[i]==1)\\n                count1++;\\n            if(nums[i]==2)\\n                count2++;\\n        }\\n        \\n        int i = 0;\\n        while(count0)\\n        {\\n            nums[i] = 0;\\n            i++;\\n            count0--;\\n        }\\n        while(count1)\\n        {\\n            nums[i] = 1;\\n            i++;\\n            count1--;\\n        }\\n        while(count2)\\n        {\\n            nums[i] = 2;\\n            i++;\\n            count2--;\\n        }\\n    }\\n};\\n```\\nTime Complexity ->`O(n)`\\n**Please upvote if you find the solution useful, means a lot.**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n// Keeping a count of 0\\'s 1\\'s and 2\\'s and updating the original array\\n//Time complexity - O(2N)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0 = 0, count1 = 0, count2 = 0;\\n        \\n        for(int i = 0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)\\n                count0++;\\n            if(nums[i]==1)\\n                count1++;\\n            if(nums[i]==2)\\n                count2++;\\n        }\\n        \\n        int i = 0;\\n        while(count0)\\n        {\\n            nums[i] = 0;\\n            i++;\\n            count0--;\\n        }\\n        while(count1)\\n        {\\n            nums[i] = 1;\\n            i++;\\n            count1--;\\n        }\\n        while(count2)\\n        {\\n            nums[i] = 2;\\n            i++;\\n            count2--;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 484840,
                "title": "simple-python-solution-o-n-memory-usage-less-than-100",
                "content": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \\n        low, high, i = 0, len(nums) - 1, 0\\n        \\n        while i <= high:\\n            if nums[i] == 0:\\n                nums[low], nums[i] = nums[i], nums[low]\\n                low += 1\\n                i += 1\\n            elif nums[i] == 2:\\n                nums[high], nums[i] = nums[i], nums[high]\\n                high -= 1\\n            else: i += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \\n        low, high, i = 0, len(nums) - 1, 0\\n        \\n        while i <= high:\\n            if nums[i] == 0:\\n                nums[low], nums[i] = nums[i], nums[low]\\n                low += 1\\n                i += 1\\n            elif nums[i] == 2:\\n                nums[high], nums[i] = nums[i], nums[high]\\n                high -= 1\\n            else: i += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3383604,
                "title": "beats-100-c-snowball-approach",
                "content": "\\n# Approach\\n This solution implements the Dutch National Flag algorithm to sort an array nums containing only 0, 1, and 2. The algorithm consists of three pointers, low, mid, and high, and two partitions, one for 0\\'s and another for 1\\'s. The idea is to iterate over the array and move the 0\\'s to the left partition, the 1\\'s to the middle partition, and the 2\\'s to the right partition.\\n\\nIn this implementation, the algorithm is modified slightly to only have two partitions, one for 0\\'s and 1\\'s, and another for 2\\'s. The variable sb keeps track of the number of 2\\'s encountered so far, and the first loop moves all the 2\\'s to the right partition. The variable so keeps track of the number of 1\\'s encountered in the remaining part of the array, and the second loop moves all the 1\\'s to the middle partition.\\n\\nThe algorithm does not explicitly move the 0\\'s to the left partition, since all the 0\\'s are already in their correct position after the two loops. This is because any 0 encountered during the loops is automatically moved to the left partition by the previous iteration.\\n\\nThis solution has a time complexity of O(n) and a space complexity of O(1), since it only requires a constant amount of additional memory to store the two pointers sb and so.\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int sb = 0 ;\\n\\n        for(int i = 0 ; i< nums.size(); i++){\\n            if(nums[i] == 2)\\n             sb++;\\n\\n            else if(sb > 0){\\n                nums[i - sb] = nums[i];\\n                nums[i] = 2; \\n            }\\n        }\\n\\n        int so = 0;\\n\\n        for(int i = 0 ; i< nums.size() - sb; i++){\\n            if(nums[i] == 1)\\n             so++;\\n\\n            else if(so > 0){\\n                nums[i - so] = nums[i];\\n                nums[i] = 1; \\n            }\\n        }\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int sb = 0 ;\\n\\n        for(int i = 0 ; i< nums.size(); i++){\\n            if(nums[i] == 2)\\n             sb++;\\n\\n            else if(sb > 0){\\n                nums[i - sb] = nums[i];\\n                nums[i] = 2; \\n            }\\n        }\\n\\n        int so = 0;\\n\\n        for(int i = 0 ; i< nums.size() - sb; i++){\\n            if(nums[i] == 1)\\n             so++;\\n\\n            else if(so > 0){\\n                nums[i - so] = nums[i];\\n                nums[i] = 1; \\n            }\\n        }\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1949581,
                "title": "100-fast-java-solution-easy-explanation-dry-run",
                "content": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\\nRed - 0\\nWhite - 1\\nBlue - 2\\n\\nInput: nums = [2,0,2,1,1,0]\\nWe  need to arrange the color in order like  :- [0,0,1,1,2,2]\\n\\n**Solution:-**\\n```/**\\n * Move all 0s to the left and all 2s to the right, then all 1s are left in the middle. Using a Swaping of two number.\\n *\\n * Time Complexity: O(N). N = Length of input array.\\n * \\n */\\n```\\n```\\n  public void sortColors(int[] nums) {\\n       int length = nums.length;\\n        if(length==0)\\n         {   return;  }\\n        int l=0;\\n\\t\\tint m=0;\\n\\t\\tint h= length-1;\\n\\t\\tint temp;\\n            while(m <= h)\\n            {\\n                if(nums[m] == 1)\\n                    m++;\\n                else if(nums[m] == 0)\\n                {\\n                    temp = nums[l];\\n                    nums[l] = nums[m];\\n                    nums[m] = temp;\\n                    m++;\\n                    l++;\\n                }\\n                else if(nums[m] == 2)\\n                {                                \\n                    temp = nums[h];\\n                    nums[h] = nums[m];\\n                    nums[m] = temp;\\n                    h--;\\n                }\\n            }  \\n       }\\n```\\n###  # ** Dry Run:- ******\\n```\\n\\n  Given array is :-  [2,0,2,1,1,0]  and length = 6;\\n  \\n   [2,0,2,1,1,0]   and    l=0, m=0, h=length-1 = 5\\n\\t   nums[m]=> nums[0] = 2\\n\\t   swap=> nums[m] to nums[h] => nums[0] to nums[5] \\n\\t   and decrease h value i.e h=5-1 = 4\\n\\t   \\n   [0,0,2,1,1,2]  and  l=0, m=0, h=4\\n\\t   nums[m]=> nums[0] = 0\\n\\t   Increase the value of l and m by 1.\\n\\t   now, l=0+1=1,m=0+1=1,h=4\\n\\t   \\n   [0,0,2,1,1,2]   and  l=1, m=1, h=4\\n\\t\\tnums[m]=> nums[1] = 0\\n\\t\\tnow our array is => [0,0,2,1,1,2]\\n\\t\\tnow, l=1+1=2 ,m=1+1=2, h=4\\n\\t\\t\\n   [0,0,2,1,1,2] and  l=2, m=2, h=4\\n        nums[m]=> nums[2] = 2\\n\\t\\tswap=> nums[m] to nums[h] => nums[2] to nums[4] \\n\\t    now our array is => [0,0,1,1,2,2]\\n\\t    and decrease h value i.e h=4-1 = 3\\n\\t   \\n\\t[0,0,1,1,2,2] and  l=2 ,m=2, h=3\\n\\t   nums[m]=> nums[2] = 1\\n\\t   Increase the value of m by 1. \\n\\t   now, l=2 ,m=2+1=3, h=3\\n\\t   \\n\\t[0,0,1,1,2,2] and  l=2 ,m=3, h=3  \\n\\t   nums[m]=> nums[3] = 1\\n\\t   Increase the value of m by 1. \\n\\t   now, l=2 ,m=3+1=4, h=3\\n\\t    \\n```\\n      Upvote \\u2764\\uFE0F if it useful!!\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```/**\\n * Move all 0s to the left and all 2s to the right, then all 1s are left in the middle. Using a Swaping of two number.\\n *\\n * Time Complexity: O(N). N = Length of input array.\\n * \\n */\\n```\n```\\n  public void sortColors(int[] nums) {\\n       int length = nums.length;\\n        if(length==0)\\n         {   return;  }\\n        int l=0;\\n\\t\\tint m=0;\\n\\t\\tint h= length-1;\\n\\t\\tint temp;\\n            while(m <= h)\\n            {\\n                if(nums[m] == 1)\\n                    m++;\\n                else if(nums[m] == 0)\\n                {\\n                    temp = nums[l];\\n                    nums[l] = nums[m];\\n                    nums[m] = temp;\\n                    m++;\\n                    l++;\\n                }\\n                else if(nums[m] == 2)\\n                {                                \\n                    temp = nums[h];\\n                    nums[h] = nums[m];\\n                    nums[m] = temp;\\n                    h--;\\n                }\\n            }  \\n       }\\n```\n```\\n\\n  Given array is :-  [2,0,2,1,1,0]  and length = 6;\\n  \\n   [2,0,2,1,1,0]   and    l=0, m=0, h=length-1 = 5\\n\\t   nums[m]=> nums[0] = 2\\n\\t   swap=> nums[m] to nums[h] => nums[0] to nums[5] \\n\\t   and decrease h value i.e h=5-1 = 4\\n\\t   \\n   [0,0,2,1,1,2]  and  l=0, m=0, h=4\\n\\t   nums[m]=> nums[0] = 0\\n\\t   Increase the value of l and m by 1.\\n\\t   now, l=0+1=1,m=0+1=1,h=4\\n\\t   \\n   [0,0,2,1,1,2]   and  l=1, m=1, h=4\\n\\t\\tnums[m]=> nums[1] = 0\\n\\t\\tnow our array is => [0,0,2,1,1,2]\\n\\t\\tnow, l=1+1=2 ,m=1+1=2, h=4\\n\\t\\t\\n   [0,0,2,1,1,2] and  l=2, m=2, h=4\\n        nums[m]=> nums[2] = 2\\n\\t\\tswap=> nums[m] to nums[h] => nums[2] to nums[4] \\n\\t    now our array is => [0,0,1,1,2,2]\\n\\t    and decrease h value i.e h=4-1 = 3\\n\\t   \\n\\t[0,0,1,1,2,2] and  l=2 ,m=2, h=3\\n\\t   nums[m]=> nums[2] = 1\\n\\t   Increase the value of m by 1. \\n\\t   now, l=2 ,m=2+1=3, h=3\\n\\t   \\n\\t[0,0,1,1,2,2] and  l=2 ,m=3, h=3  \\n\\t   nums[m]=> nums[3] = 1\\n\\t   Increase the value of m by 1. \\n\\t   now, l=2 ,m=3+1=4, h=3\\n\\t    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1553062,
                "title": "75-sort-colors-java-solution",
                "content": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1, temp;\\n        while(mid <= high){\\n            switch(nums[mid]){\\n                case 0:\\n                    temp = nums[low];\\n                    nums[low] = nums[mid];\\n                    nums[mid] = temp;\\n                    low++;\\n                    mid++;\\n                    break;\\n                case 1:\\n                    mid++;\\n                    break;\\n                case 2:\\n                    temp = nums[mid];\\n                    nums[mid] = nums[high];\\n                    nums[high] = temp;\\n                    high--;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n```\\n\\nIf it helped, please UPVOTE. Happy Coding and keep up the good work.\\nFeel free to give your suggestions or correct me in the comments.\\nThanks for reading.\\uD83D\\uDE43",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1, temp;\\n        while(mid <= high){\\n            switch(nums[mid]){\\n                case 0:\\n                    temp = nums[low];\\n                    nums[low] = nums[mid];\\n                    nums[mid] = temp;\\n                    low++;\\n                    mid++;\\n                    break;\\n                case 1:\\n                    mid++;\\n                    break;\\n                case 2:\\n                    temp = nums[mid];\\n                    nums[mid] = nums[high];\\n                    nums[high] = temp;\\n                    high--;\\n                    break;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1542956,
                "title": "c-two-pointers-0ms-solution-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& v) {\\n        int i, j, k, n = v.size();\\n        for(i = 0; i < n && v[i] == 0; i++); // Loop from front until first non-zero element\\n        for(j = n - 1; j >= 0 && v[j] == 2; j--); // Loop from back until first non-two element\\n\\t\\t// i -> first non-zero index\\n\\t\\t// j -> last non-two index\\n        for(k = i; k <= j; k++){\\n            if(v[k] == 0){\\n\\t\\t\\t\\t// If 0, swap it with first non-zero index and increment i\\n                swap(v[k], v[i]);\\n                i++;\\n            }\\n            else if(v[k] == 2){\\n\\t\\t\\t\\t// If 2, swap it with last non-two index and decrement j\\n                swap(v[k], v[j]);\\n                j--;\\n                k--; // To not increment k in the next iteration\\n            }\\n        }\\n    }\\n};\\n```\\n\\n`Upvote \\u2764\\uFE0F if useful!!`",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& v) {\\n        int i, j, k, n = v.size();\\n        for(i = 0; i < n && v[i] == 0; i++); // Loop from front until first non-zero element\\n        for(j = n - 1; j >= 0 && v[j] == 2; j--); // Loop from back until first non-two element\\n\\t\\t// i -> first non-zero index\\n\\t\\t// j -> last non-two index\\n        for(k = i; k <= j; k++){\\n            if(v[k] == 0){\\n\\t\\t\\t\\t// If 0, swap it with first non-zero index and increment i\\n                swap(v[k], v[i]);\\n                i++;\\n            }\\n            else if(v[k] == 2){\\n\\t\\t\\t\\t// If 2, swap it with last non-two index and decrement j\\n                swap(v[k], v[j]);\\n                j--;\\n                k--; // To not increment k in the next iteration\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 26529,
                "title": "my-template-for-this-kind-of-problem",
                "content": "One can use this template to handle this kind of \"sorting\" problems. No matter how many colors from 0 to n, or different labels as \"red\", \"blue\", etc.\\n\\nWe can simply put them in the cand array, then do the sorting.\\n\\n```\\npublic class Solution {\\n    public void sortColors(int[] nums) {\\n        int[] cand = {0, 1, 2};\\n        int start=0;\\n        for(int i=0;i<3;i++){\\n            while(start<nums.length && nums[start]==cand[i]) start++;\\n            for(int j=start;j<nums.length;j++){\\n                if(nums[j]==cand[i]){\\n                    swap(nums, j, start++);\\n                }\\n            }\\n        }\\n        return;\\n    }\\n    public void swap(int[] nums, int a, int b){\\n        int t = nums[a];\\n        nums[a] = nums[b];\\n        nums[b] = t;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public void sortColors(int[] nums) {\\n        int[] cand = {0, 1, 2};\\n        int start=0;\\n        for(int i=0;i<3;i++){\\n            while(start<nums.length && nums[start]==cand[i]) start++;\\n            for(int j=start;j<nums.length;j++){\\n                if(nums[j]==cand[i]){\\n                    swap(nums, j, start++);\\n                }\\n            }\\n        }\\n        return;\\n    }\\n    public void swap(int[] nums, int a, int b){\\n        int t = nums[a];\\n        nums[a] = nums[b];\\n        nums[b] = t;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3168168,
                "title": "best-c-3-solutions-in-place-two-pointers-counting-sorting-optimized-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can solve this question using Three Approaches.\\n\\n1. Solved using Array + Sorting.\\n2. Solved using Array + Counting.\\n3. Solved using Array + Two Pointers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can easily understand the All the approaches by seeing the code which is easy to understand with comments.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime complexity is given in code comment.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace complexity is given in code comment.\\n\\n# Code\\n```\\n/*\\n\\n    Time Complexity : O(NlonN), As we are doing sorting. Where N is size of the array(nums).\\n\\n    Space Complexity: O(1), Constant space.\\n\\n    Solved using Array + Sorting.\\n\\n*/\\n\\n\\n/***************************************** Approach 1 *****************************************/\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n/*\\n\\n    Time Complexity : O(N), As we iterate the array equal to two times. Where N is size of the array(nums).\\n\\n    Space Complexity: O(1), Constant space.\\n\\n    Solved using Array + Counting.\\n\\n*/\\n\\n\\n/***************************************** Approach 2 *****************************************/\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int nextZeros = 0, nextOnes = 0, nextTwos = 0;\\n        for(auto it : nums){\\n            if(it == 0) nextZeros++;\\n            else if(it == 1) nextOnes++;\\n            else nextTwos++;\\n        }\\n        int k = 0;\\n        for(int i=0; i<nextZeros; i++) nums[k++] = 0;\\n        for(int i=0; i<nextOnes; i++) nums[k++] = 1;\\n        for(int i=0; i<nextTwos; i++) nums[k++] = 2;\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n/*\\n\\n    Time Complexity : O(N), As we iterate the array(nums) one times. Where N is size of the array(nums).\\n\\n    Space Complexity: O(1), Constant space.\\n\\n    Solved using Array + Two Pointers.\\n\\n*/\\n\\n\\n/***************************************** Approach 3 *****************************************/\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int nextZeros = 0, nextTwos = nums.size()-1, i = 0;\\n        while(i <= nextTwos){\\n            if(nums[i] == 0){\\n               swap(nums[i], nums[nextZeros]);\\n               nextZeros++; i++; \\n            }\\n            else if(nums[i] == 2){\\n                swap(nums[i], nums[nextTwos]);\\n                nextTwos--;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers",
                    "Sorting",
                    "Counting"
                ],
                "code": "```\\n/*\\n\\n    Time Complexity : O(NlonN), As we are doing sorting. Where N is size of the array(nums).\\n\\n    Space Complexity: O(1), Constant space.\\n\\n    Solved using Array + Sorting.\\n\\n*/\\n\\n\\n/***************************************** Approach 1 *****************************************/\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        sort(nums.begin(), nums.end());\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n/*\\n\\n    Time Complexity : O(N), As we iterate the array equal to two times. Where N is size of the array(nums).\\n\\n    Space Complexity: O(1), Constant space.\\n\\n    Solved using Array + Counting.\\n\\n*/\\n\\n\\n/***************************************** Approach 2 *****************************************/\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int nextZeros = 0, nextOnes = 0, nextTwos = 0;\\n        for(auto it : nums){\\n            if(it == 0) nextZeros++;\\n            else if(it == 1) nextOnes++;\\n            else nextTwos++;\\n        }\\n        int k = 0;\\n        for(int i=0; i<nextZeros; i++) nums[k++] = 0;\\n        for(int i=0; i<nextOnes; i++) nums[k++] = 1;\\n        for(int i=0; i<nextTwos; i++) nums[k++] = 2;\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n/*\\n\\n    Time Complexity : O(N), As we iterate the array(nums) one times. Where N is size of the array(nums).\\n\\n    Space Complexity: O(1), Constant space.\\n\\n    Solved using Array + Two Pointers.\\n\\n*/\\n\\n\\n/***************************************** Approach 3 *****************************************/\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int nextZeros = 0, nextTwos = nums.size()-1, i = 0;\\n        while(i <= nextTwos){\\n            if(nums[i] == 0){\\n               swap(nums[i], nums[nextZeros]);\\n               nextZeros++; i++; \\n            }\\n            else if(nums[i] == 2){\\n                swap(nums[i], nums[nextTwos]);\\n                nextTwos--;\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1185324,
                "title": "c-dutch-national-flag-algorithm-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        if (nums.size() == 0) return;\\n        int n = nums.size();\\n        int low = 0, mid = 0, high = n-1;\\n        // low should point to a group of 0\\'s\\n        // mid should point to a group of 1\\'s\\n        // high should point to a group of 2\\'s        \\n        while(mid <= high) {\\n            if (nums[mid] == 0) {\\n                swap(nums[mid], nums[low]);\\n                mid++;\\n                low++;\\n            }         \\n            else if (nums[mid] == 1) {\\n                mid++;\\n            }\\n            else if (nums[mid] == 2) {\\n                swap(nums[mid], nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        if (nums.size() == 0) return;\\n        int n = nums.size();\\n        int low = 0, mid = 0, high = n-1;\\n        // low should point to a group of 0\\'s\\n        // mid should point to a group of 1\\'s\\n        // high should point to a group of 2\\'s        \\n        while(mid <= high) {\\n            if (nums[mid] == 0) {\\n                swap(nums[mid], nums[low]);\\n                mid++;\\n                low++;\\n            }         \\n            else if (nums[mid] == 1) {\\n                mid++;\\n            }\\n            else if (nums[mid] == 2) {\\n                swap(nums[mid], nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3114639,
                "title": "beats-100-o-n-o-1-c-very-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimply we can do cout number of 0\\'s , 1\\'s and 2\\'s . Then jsut do a simple traverse and insert 0\\'s first in array and then 1\\'s and then 2\\'s  until each one\\'s occurence beomes zero.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nGet count of c0 ,c1 ,c2; Then while c0 is >0 keep pushing 0 in array \\nthe after that while c1>0 keep pushing 1\\'s in array and then 2\\'s.\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& arr) {\\n        int n=arr.size();\\n        int c0=0,c1=0,c2=0;\\n        for(int i=0;i<n;i++){\\n            c0+=(arr[i]==0);\\n            c1+=(arr[i]==1);\\n            c2+=(arr[i]==2);\\n        }\\n        cout<<c0<<\" \"<<c0<<\" \"<<c2;\\n        for(int i=0;i<n;i++){\\n            if(c0>0)arr[i]=0,c0--;\\n            else if(c1>0)arr[i]=1,c1--;\\n            else arr[i]=2;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& arr) {\\n        int n=arr.size();\\n        int c0=0,c1=0,c2=0;\\n        for(int i=0;i<n;i++){\\n            c0+=(arr[i]==0);\\n            c1+=(arr[i]==1);\\n            c2+=(arr[i]==2);\\n        }\\n        cout<<c0<<\" \"<<c0<<\" \"<<c2;\\n        for(int i=0;i<n;i++){\\n            if(c0>0)arr[i]=0,c0--;\\n            else if(c1>0)arr[i]=1,c1--;\\n            else arr[i]=2;\\n        }\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2710736,
                "title": "simple-c-solution-same-like-3-way-quicksort-partitioning",
                "content": "**Idea:** I used 3-Way QuickSort Partitioning Technique which is as follows: we set a pivot, then we keep elements less than pivot on left side and greater than pivot on right side and elements equal to pivot will be in the middle. \\n**For Example:** we have an array [2, 2, 0, 1, 0, 1], we set pivot to 1 then our array will be [0, 0, 1, 1, 2, 2]\\n**Implementation:** How can we implement that? \\n1. Left pointer - so we will keep storing `element < pivot` from left side\\n2. Right pointer - so we will keep storing `element > pivot` from right side\\n\\nsetting left and right pointers\\n```\\nint l = 0, r = a.size() - 1;\\n```\\n\\nWe will go from `0 to r` ... and if we encounter any `element > pivot `  hence decrementing` r `will help us not to evaluate element that is already fixed to the right side\\n```\\nfor(int i = 0; i <= r; i++)\\n```\\n1. If `element < pivot`, put current element on the left side, and increase `l`\\n2. if `element > pivot` put current element on the right side, and decrease `r` and also decrease `i` becasue the element which was on the right with which we swapped current element has to be checked. \\n```\\nif(a[i] < p) {\\n\\tswap(a[i], a[l]);\\n\\tl++;\\n} else if(a[i] > p) {\\n\\tswap(a[i], a[r]);\\n\\tr--;\\n\\ti--;\\n}\\n```\\nFinal Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        // quick sort algo with pivot 1\\n        int p = 1;\\n        int l = 0, r = a.size() - 1;\\n        for(int i = 0; i <= r; i++) {\\n            if(a[i] < p) {\\n                swap(a[i], a[l]);\\n                l++;\\n            } else if(a[i] > p) {\\n                swap(a[i], a[r]);\\n                r--;\\n                i--;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint l = 0, r = a.size() - 1;\\n```\n```\\nfor(int i = 0; i <= r; i++)\\n```\n```\\nif(a[i] < p) {\\n\\tswap(a[i], a[l]);\\n\\tl++;\\n} else if(a[i] > p) {\\n\\tswap(a[i], a[r]);\\n\\tr--;\\n\\ti--;\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        // quick sort algo with pivot 1\\n        int p = 1;\\n        int l = 0, r = a.size() - 1;\\n        for(int i = 0; i <= r; i++) {\\n            if(a[i] < p) {\\n                swap(a[i], a[l]);\\n                l++;\\n            } else if(a[i] > p) {\\n                swap(a[i], a[r]);\\n                r--;\\n                i--;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1848562,
                "title": "javascript-o-n-time-and-o-1-space-complexity-solution",
                "content": "```\\nvar sortColors = function (nums) {\\n  let i = 0;\\n\\n  let left = 0,\\n    right = nums.length - 1;\\n\\n  while (i <= right && left < right) {\\n    if (nums[i] === 0) {\\n      [nums[i], nums[left]] = [nums[left], nums[i]];\\n      left++;\\n      i++;\\n    } else if (nums[i] === 2) {\\n      [nums[i], nums[right]] = [nums[right], nums[i]];\\n      right--;\\n    } else {\\n      i++;\\n    }\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar sortColors = function (nums) {\\n  let i = 0;\\n\\n  let left = 0,\\n    right = nums.length - 1;\\n\\n  while (i <= right && left < right) {\\n    if (nums[i] === 0) {\\n      [nums[i], nums[left]] = [nums[left], nums[i]];\\n      left++;\\n      i++;\\n    } else if (nums[i] === 2) {\\n      [nums[i], nums[right]] = [nums[right], nums[i]];\\n      right--;\\n    } else {\\n      i++;\\n    }\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 363229,
                "title": "java-beginner-friendly-iterative-solution",
                "content": "```\\n    public void sortColors(int[] nums) {\\n        int l0 = -1;\\n        int l1 = -1;\\n        int l2 = -1;\\n        int n = nums.length;\\n        \\n        // Feel free to post questions in case you have difficulty to undertand the logic behind\\n\\t\\t\\n\\t\\t\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] == 0) {\\n                nums[++l0] = 0;\\n                \\n                if (l1 >= 0) {\\n                    nums[++l1] = 1;\\n                }\\n                \\n                if (l2 >= 0) {\\n                    nums[++l2] = 2;\\n                }\\n            } else if (nums[i] == 1) {\\n                l1 = Math.max(l0, l1);\\n                nums[++l1] = 1;\\n                \\n                if (l2 >= 0) {\\n                    nums[++l2] = 2;\\n                }\\n            } else {\\n                l2 = Math.max(Math.max(l0, l1), l2);\\n                nums[++l2] = 2;\\n            }       \\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public void sortColors(int[] nums) {\\n        int l0 = -1;\\n        int l1 = -1;\\n        int l2 = -1;\\n        int n = nums.length;\\n        \\n        // Feel free to post questions in case you have difficulty to undertand the logic behind\\n\\t\\t\\n\\t\\t\\n        for (int i = 0; i < n; i++) {\\n            if (nums[i] == 0) {\\n                nums[++l0] = 0;\\n                \\n                if (l1 >= 0) {\\n                    nums[++l1] = 1;\\n                }\\n                \\n                if (l2 >= 0) {\\n                    nums[++l2] = 2;\\n                }\\n            } else if (nums[i] == 1) {\\n                l1 = Math.max(l0, l1);\\n                nums[++l1] = 1;\\n                \\n                if (l2 >= 0) {\\n                    nums[++l2] = 2;\\n                }\\n            } else {\\n                l2 = Math.max(Math.max(l0, l1), l2);\\n                nums[++l2] = 2;\\n            }       \\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 195342,
                "title": "o-n-one-pass-java-solution-beat-100",
                "content": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int left = 0, right = nums.length-1, count = 0;\\n        while (count < nums.length) {\\n        \\tif (nums[count] == 0 && count > left) {\\n        \\t\\tnums[count] = nums[left];\\n        \\t\\tnums[left] = 0;\\n        \\t\\tleft++;\\n        \\t}\\n        \\telse if (nums[count] == 2 && count < right) {\\n        \\t\\tnums[count] = nums[right];\\n        \\t\\tnums[right] = 2;\\n        \\t\\tright--;\\n        \\t}\\n        \\telse {\\n        \\t\\tcount ++;\\n        \\t}\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int left = 0, right = nums.length-1, count = 0;\\n        while (count < nums.length) {\\n        \\tif (nums[count] == 0 && count > left) {\\n        \\t\\tnums[count] = nums[left];\\n        \\t\\tnums[left] = 0;\\n        \\t\\tleft++;\\n        \\t}\\n        \\telse if (nums[count] == 2 && count < right) {\\n        \\t\\tnums[count] = nums[right];\\n        \\t\\tnums[right] = 2;\\n        \\t\\tright--;\\n        \\t}\\n        \\telse {\\n        \\t\\tcount ++;\\n        \\t}\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 167029,
                "title": "java-one-pass-solution-with-detailed-explanation",
                "content": "If you are not familiar with quick sort partition I suggest you get to know that before you read this solution.\\n#### Main Idea\\nthis solution will partition the array into 3 parts, 0,1,2 instead of just 2 parts like quick sort. We just put 0 on the left side, 2 on the right side. \\nwe have two pointers low and high which indicate the bound of 0s and 2s (low is the right bound of 0 and high is the left bound of 2). At the end of this partiton low and high will be like this.\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/surface_handsome/image_1536133070.png)\\nDuring the partition, one thing is for sure: left side of low pointer will be all 0s and right side of high pointer will be all 2s. This is guranteed by swaping nums[mid] with the number[low + 1] when nums[mid] == 0 and with number[high - 1] when nums[mid] == 2\\u3002\\n``` java\\nclass Solution {\\n    private int[] nums;\\n    public void sortColors(int[] nums) {\\n        // one pass\\n        this.nums = nums;\\n        int low = -1;\\n        int high = nums.length;\\n        int mid = 0;\\n        \\n        while(mid < high) {\\n            if (nums[mid] == 1) {\\n                mid++;\\n            } else if (nums[mid] == 0) {\\n                ++low;\\n                swap(mid,low);\\n                // skip one, must be 1 bcz you already go through it\\n                mid++;\\n            } else {\\n                high--;\\n                swap(mid,high);\\n            }\\n        }\\n    }\\n    \\n    private void swap(int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "``` java\\nclass Solution {\\n    private int[] nums;\\n    public void sortColors(int[] nums) {\\n        // one pass\\n        this.nums = nums;\\n        int low = -1;\\n        int high = nums.length;\\n        int mid = 0;\\n        \\n        while(mid < high) {\\n            if (nums[mid] == 1) {\\n                mid++;\\n            } else if (nums[mid] == 0) {\\n                ++low;\\n                swap(mid,low);\\n                // skip one, must be 1 bcz you already go through it\\n                mid++;\\n            } else {\\n                high--;\\n                swap(mid,high);\\n            }\\n        }\\n    }\\n    \\n    private void swap(int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 26654,
                "title": "sort-colors-and-sort-k-colors-c-solution",
                "content": "Solution:\\n\\n    //3 color sort\\n    //2 partition indexes\\n    //time complexity: O(N)\\n    //space complexity: O(1)\\n    class Solution{\\n    public:\\n        /**\\n         * @param nums: A list of integer which is 0, 1 or 2 \\n         * @return: nothing\\n         */    \\n        void sortColors(vector<int> &nums) {\\n            // write your code here\\n            if (nums.size() == 0) return;\\n            int zeroPartition = 0, twoPartition = nums.size() - 1;\\n            for (int i = 0; i <= twoPartition; ) {\\n                if (nums[i] == 0) {\\n                    swap(nums[zeroPartition], nums[i]); zeroPartition++; i++;\\n                } else if (nums[i] == 2) {\\n                    swap(nums[twoPartition], nums[i]); twoPartition--;\\n                } else {\\n                    i++;\\n                }\\n            }\\n        }\\n        \\n        void swap(int& a, int& b) {\\n            int tmp = a; a = b; b = tmp;\\n        }\\n    };\\n\\n\\nThere is also an extension question on lintcode: sort k colors. http://www.lintcode.com/en/problem/sort-colors-ii/#\\n\\nBasically, the naive solution is a two-pass algorithm using counting sort. That will cost O(k) extra memory. How can you solve it without using extra memory?\\n\\nThe O(1) space solution is just an extension of sort colors:\\n\\n    //sort k colors, extend by sort 3 colors\\n    class Solution{\\n    public:\\n        /**\\n         * @param colors: A list of integer\\n         * @param k: An integer\\n         * @return: nothing\\n         */    \\n        void sortColors2(vector<int> &colors, int k) {\\n            if (colors.size() == 0) return;\\n            // write your code here\\n            int lowColor = 1, highColor = k;\\n            int lpartition = 0, hpartition = colors.size() - 1;\\n            while (lowColor < highColor) {\\n                for (int i = lpartition; i <= hpartition; ) {\\n                    if (colors[i] == lowColor) {\\n                        swap(colors[i], colors[lpartition]); lpartition++; i++;\\n                    } else if (colors[i] == highColor) {\\n                        swap(colors[i], colors[hpartition]); hpartition--;\\n                    } else {\\n                        i++;\\n                    }\\n                }\\n                lowColor++; highColor--;\\n            }\\n        }\\n    };\\n\\nCan someone talks about this solution's time complexity? Thanks",
                "solutionTags": [],
                "code": "class Solution{\\n    public:\\n        /**\\n         * @param nums: A list of integer which is 0, 1 or 2 \\n         * @return: nothing\\n         */    \\n        void sortColors(vector<int> &nums) {\\n            // write your code here\\n            if (nums.size() == 0) return;\\n            int zeroPartition = 0, twoPartition = nums.size() - 1;\\n            for (int i = 0; i <= twoPartition; ) {\\n                if (nums[i] == 0) {\\n                    swap(nums[zeroPartition], nums[i]); zeroPartition++; i++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 3782495,
                "title": "brute-force-to-optimal-solution",
                "content": "## Brute Force Approach\\n\\nThere are only 3 distinct values in the array so it\\u2019s easy to maintain the count of all, Like the count of 0, 1, and 3.\\n\\n## Code\\uD83D\\uDC47\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int c0=0;\\n        int c1=0;\\n        int c2=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==0) c0++;\\n            else if(nums[i]==1) c1++;\\n            else if(nums[i]==2) c2++;\\n        }\\n        for(int i=0;i<c0;i++){\\n            nums[i]=0;\\n        }\\n        for(int i=c0;i<c0+c1;i++){\\n            nums[i]=1;\\n        }\\n        for(int i=c0+c1;i<nums.length;i++){\\n            nums[i]=2;\\n        }\\n\\n        \\n    }\\n}\\n```\\n\\n# Complexity\\n- Time complexity : O(N) since we are iterating the array only.\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(1) since we are not not using any extra space. \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Optimal Approach\\n\\nIt contains 3 pointers i.e. low, mid, and high.\\n\\narr[0\\u2026.low-1] contains 0, leftmost part.\\narr[low\\u2026.mid-1] contains 1.\\narr[high+1\\u2026.n-1] contains 2, rightmost part\\n\\n# Code\\uD83D\\uDC47\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int l=0,mid=0,h=nums.length-1;\\n        while(mid<=h){\\n            if(nums[mid]==0){\\n                swap(nums,l,mid);\\n                l++;\\n                mid++;\\n            }\\n            else if(nums[mid]==1){\\n                mid++;\\n            }\\n            else{\\n                swap(nums,mid,h);\\n                h--;\\n            }\\n        }\\n        \\n    }\\n    static void swap(int arr[],int a,int b){\\n        int temp=arr[a];\\n        arr[a]=arr[b];\\n        arr[b]=temp;\\n    }\\n}\\n```\\n\\n# Complexity\\n- Time complexity : O(N).\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(1), not using any extra space. \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n![image.png](https://assets.leetcode.com/users/images/e5c88faa-dd01-4bf6-b72f-86b38cec10e7_1689676476.8823164.png)\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int c0=0;\\n        int c1=0;\\n        int c2=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==0) c0++;\\n            else if(nums[i]==1) c1++;\\n            else if(nums[i]==2) c2++;\\n        }\\n        for(int i=0;i<c0;i++){\\n            nums[i]=0;\\n        }\\n        for(int i=c0;i<c0+c1;i++){\\n            nums[i]=1;\\n        }\\n        for(int i=c0+c1;i<nums.length;i++){\\n            nums[i]=2;\\n        }\\n\\n        \\n    }\\n}\\n```\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int l=0,mid=0,h=nums.length-1;\\n        while(mid<=h){\\n            if(nums[mid]==0){\\n                swap(nums,l,mid);\\n                l++;\\n                mid++;\\n            }\\n            else if(nums[mid]==1){\\n                mid++;\\n            }\\n            else{\\n                swap(nums,mid,h);\\n                h--;\\n            }\\n        }\\n        \\n    }\\n    static void swap(int arr[],int a,int b){\\n        int temp=arr[a];\\n        arr[a]=arr[b];\\n        arr[b]=temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3743495,
                "title": "100-easy-and-fast-java-solution",
                "content": "# Intuition\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/7d018af0-65e8-48e9-af40-5883e15de420_1688963090.209322.jpeg)\\n\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n![download.png](https://assets.leetcode.com/users/images/359c8328-2967-4d49-a42a-6a95db401880_1688963046.482525.png)\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        sort(nums,0,nums.length-1);\\n        \\n    }\\n    void sort(int[] nums,int low,int high)\\n    {\\n        if(low >= high) return;\\n        int s=low;\\n        int e=high;\\n        int m=s + (e - s) /2;\\n        int pivot=nums[m];\\n        while(s <= e)\\n        {\\n            while(nums[s] < pivot) s++;\\n            while(nums[e] > pivot) e--;\\n             if(s <= e)\\n             {\\n                int temp=nums[s];\\n                nums[s]=nums[e];\\n                nums[e]=temp;\\n                s++;\\n                e--;\\n             }\\n        }\\n        sort(nums,low,e);\\n        sort(nums,s,high);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        sort(nums,0,nums.length-1);\\n        \\n    }\\n    void sort(int[] nums,int low,int high)\\n    {\\n        if(low >= high) return;\\n        int s=low;\\n        int e=high;\\n        int m=s + (e - s) /2;\\n        int pivot=nums[m];\\n        while(s <= e)\\n        {\\n            while(nums[s] < pivot) s++;\\n            while(nums[e] > pivot) e--;\\n             if(s <= e)\\n             {\\n                int temp=nums[s];\\n                nums[s]=nums[e];\\n                nums[e]=temp;\\n                s++;\\n                e--;\\n             }\\n        }\\n        sort(nums,low,e);\\n        sort(nums,s,high);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3009143,
                "title": "beats-98-easy-explained-solution-for-beginners",
                "content": "# Intuition\\nTwo pointers ftw\\n\\n# Approach\\nLeft pointer is where the next 0 will be at\\nRight pointer is where the next 2 will be at\\n\\n- \"Iterate\" through the list from left to right (Before reaching the latest \"2\" that has been swapped)\\n- If the number is a 2, swap with the right pointer number and decrement it by one (As the next 2 will be to the left of the swapped \"2\")\\'\\n- Elif the number is a 0, similarly, swap with the left pointer number and increment it by one.\\n- Else (If the number is a 1), just \"skip\" the number\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        left = count = 0\\n        right = len(nums)-1\\n        while count <= right:\\n            if nums[count] == 2:\\n                nums[count], nums[right] = nums[right], nums[count]\\n                right -= 1\\n            elif nums[count] == 0:\\n                nums[count], nums[left] = nums[left], nums[count]\\n                left += 1\\n                count += 1\\n            else:\\n                count += 1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        left = count = 0\\n        right = len(nums)-1\\n        while count <= right:\\n            if nums[count] == 2:\\n                nums[count], nums[right] = nums[right], nums[count]\\n                right -= 1\\n            elif nums[count] == 0:\\n                nums[count], nums[left] = nums[left], nums[count]\\n                left += 1\\n                count += 1\\n            else:\\n                count += 1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805856,
                "title": "c-100-runtime-explained-using-dutch-national-flag",
                "content": "# Easy, Fast and Beginner Friendly \\u2705\\n# Intuition\\nWe can solve this problem using Dutch Flag Algorithm.\\n\\n    Runtime - 100%\\uD83D\\uDD25 \\n    Memory - 91.13%\\uD83D\\uDD25\\n\\n# Approach\\n1. Firstly we will assume that all 0\\'s are on the left of low pointer and all 2\\'s are on right of high pointer.\\n2. Then we apply the above rule for nums array, we will check each element in nums array with the help of mid pointer :\\n3. If nums[mid] = 0 then we will swap it with nums[low](as all 0\\'s should be on left of low) and will increase low and mid.\\n4. If nums[mid] = 1 then it is at its correct position so no need to swap we will just increase mid.\\n5. if nums[mid] = 2 then we will swap it with nums[high](as all 2\\'s should be on right of high) and will decrease high.(But will not update mid as at mid there will be a new value which could be 0).\\n\\n\\n# Complexity\\n- Time complexity: O(N)\\n- Space complexity: O(1)\\n\\n#  If you like the solution and understand it then Please Upvote.\\u2B06\\uFE0F\\u2764\\uFE0F \\n\\t* PEACE OUT LUV\\u270C\\uFE0F*\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0; int mid = 0; int high = nums.size()-1;\\n        while(mid<=high){\\n            switch(nums[mid]){\\n                case 0:\\n                    swap(nums[mid++], nums[low++]);\\n                    break;\\n                case 1:\\n                    mid++;\\n                    break;\\n                case 2:\\n                    swap(nums[mid], nums[high--]);\\n                    break;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0; int mid = 0; int high = nums.size()-1;\\n        while(mid<=high){\\n            switch(nums[mid]){\\n                case 0:\\n                    swap(nums[mid++], nums[low++]);\\n                    break;\\n                case 1:\\n                    mid++;\\n                    break;\\n                case 2:\\n                    swap(nums[mid], nums[high--]);\\n                    break;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2800235,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int i = -1, j = nums.length;\\n        int ans = 0;\\n        while (ans < j) {\\n            if (nums[ans] == 0) {\\n                swap(nums, ans++, ++i);\\n            } else if (nums[ans] == 1) {\\n                ++ans;\\n            } else {\\n                swap(nums, ans, --j);\\n            }\\n        }\\n    }\\n\\n    private void swap(int[] nums, int i, int j) {\\n        int x = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = x;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int i = -1, j = nums.length;\\n        int ans = 0;\\n        while (ans < j) {\\n            if (nums[ans] == 0) {\\n                swap(nums, ans++, ++i);\\n            } else if (nums[ans] == 1) {\\n                ++ans;\\n            } else {\\n                swap(nums, ans, --j);\\n            }\\n        }\\n    }\\n\\n    private void swap(int[] nums, int i, int j) {\\n        int x = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = x;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2314707,
                "title": "dutch-national-flag-algo-tc-o-n-sc-o-1-c",
                "content": ",,,,\\n**ALGORITHM**\\nThree pointers are used: low, mid, high.\\n Low and mid pointers point at start and high pointer points at the end of the given array.\\nCases:\\n1. if array [ mid ] = 0, then swap array [ mid ] with array [low] and increment both pointers once.\\n2. if array [ mid] = 1, then no swapping is required, just increment mid pointer once.\\n3. if array [ mid ] = 2, then swap array [ mid ] with array [high] and decrement the high pointer once.\\n\\n\\n\\nvoid sortColors(vector<int>& nums) {\\n        \\n\\t\\t\\n        int n=nums.size();\\n        int low=0;\\n        int mid=0;\\n        int last=n-1;\\n        while(mid<=last)\\n        {\\n            switch(nums[mid])\\n            {\\n                case 0:  \\n                    swap(nums[low++],nums[mid++]);\\n                    break;\\n                case 1:\\n                    mid++;\\n                    break;\\n                case 2:\\n                    swap(nums[mid],nums[last--]);\\n            }\\n        }\\n    }\\n\\t,,,,",
                "solutionTags": [
                    "C"
                ],
                "code": ",,,,\\n**ALGORITHM**\\nThree pointers are used: low, mid, high.\\n Low and mid pointers point at start and high pointer points at the end of the given array.\\nCases:\\n1. if array [ mid ] = 0, then swap array [ mid ] with array [low] and increment both pointers once.\\n2. if array [ mid] = 1, then no swapping is required, just increment mid pointer once.\\n3. if array [ mid ] = 2, then swap array [ mid ] with array [high] and decrement the high pointer once.\\n\\n\\n\\nvoid sortColors(vector<int>& nums) {\\n        \\n\\t\\t\\n        int n=nums.size();\\n        int low=0;\\n        int mid=0;\\n        int last=n-1;\\n        while(mid<=last)\\n        {\\n            switch(nums[mid])\\n            {\\n                case 0:  \\n                    swap(nums[low++],nums[mid++]);\\n                    break;\\n                case 1:\\n                    mid++;\\n                    break;\\n                case 2:\\n                    swap(nums[mid],nums[last--]);\\n            }\\n        }\\n    }\\n\\t,,,,",
                "codeTag": "Unknown"
            },
            {
                "id": 2307871,
                "title": "clean-code-wiith-explaination-two-pointers-java-code",
                "content": "class Solution {\\n\\n    public void sortColors(int[] arr) {\\n\\n        int low = 0, high = arr.length - 1;             //take two pointers low and high and initialize them\\n\\n        int i = 0;                                // a variable i to traverse the array\\n        while (i <= high) {                             \\n            if (arr[i] == 0) {                    //if the value at array of i is zero then\\n                swap(arr, i, low);                //swap with the low index element (because all zeroes must be present at the starting of an array)\\n                low += 1;                         //and increase low & i by 1\\n                i += 1;\\n            }\\n            else if (arr[i] == 2) {                //as we know we have to put all the 2\\'s at the end of an array\\n                swap(arr, i, high);                //So, if array of i is 2 then swap it with the high index element\\n                high -= 1;                         //and decrease index of high by 1\\n            }\\n            else {\\n                i += 1;                             //if array of i is not equal to zero or 2 then just simply increase i by 1\\n            }\\n        }\\n    }\\n\\n    private void swap(int[] arr, int i, int j) {            //swap function\\n        int temp = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = temp;\\n    }\\n}\\n\\n***Note: Kindly Upvote this article, if you found it helpful. Thanks For Reading!!***",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "class Solution {\\n\\n    public void sortColors(int[] arr) {\\n\\n        int low = 0, high = arr.length - 1;             //take two pointers low and high and initialize them\\n\\n        int i = 0;                                // a variable i to traverse the array\\n        while (i <= high) {                             \\n            if (arr[i] == 0) {                    //if the value at array of i is zero then\\n                swap(arr, i, low);                //swap with the low index element (because all zeroes must be present at the starting of an array)\\n                low += 1;                         //and increase low & i by 1\\n                i += 1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2003359,
                "title": "c-o-n-time-and-o-1-space-dutch-flag-algo-best-optimized-approach",
                "content": "****upvote if it helps****\\t\\t\\n\\t\\t\\n\\t\\tint i =0,k = nums.size()-1,j = 0;\\n        while(j<=k){\\n            if(nums[j]==0)    swap(nums[i++],nums[j++]);\\n            else if (nums[j]==1)   j++;\\n            else if(nums[j]==2)   swap(nums[j],nums[k--]);\\n        }",
                "solutionTags": [
                    "C"
                ],
                "code": "****upvote if it helps****\\t\\t\\n\\t\\t\\n\\t\\tint i =0,k = nums.size()-1,j = 0;\\n        while(j<=k){\\n            if(nums[j]==0)    swap(nums[i++],nums[j++]);\\n            else if (nums[j]==1)   j++;\\n            else if(nums[j]==2)   swap(nums[j],nums[k--]);\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 1448160,
                "title": "simple-cpp-0ms-solution-using-dutch-flag-algo",
                "content": "Using Dutch flag algorithm  where below low pointer all 0\\'s exist and after high pointer all 2\\'s exist\\n\\n``` void sortColors(vector<int>& nums) {\\n        int low=0,mid=0,high=nums.size()-1;\\n        while(mid<=high){\\n            if(nums[mid]==1){\\n                mid++;\\n            }\\n            else if(nums[mid]==0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else{\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n        \\n    }\\n\\t```\\n\\t**I think this post deserve upvote. Thankyou!!**",
                "solutionTags": [],
                "code": "``` void sortColors(vector<int>& nums) {\\n        int low=0,mid=0,high=nums.size()-1;\\n        while(mid<=high){\\n            if(nums[mid]==1){\\n                mid++;\\n            }\\n            else if(nums[mid]==0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else{\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n        \\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1017599,
                "title": "c-beats-99-one-pass-detailed-whiteboard-explanation",
                "content": "### Explanation:\\n**Example : [2,0,2,1,1,0]**\\nI\\'ll solve this problem using [Dutch National Flag algorithm](https://en.wikipedia.org/wiki/Dutch_national_flag_problem) where I have solved using inplace values of array.\\n```\\ncurr = current pointer\\nptr1 = start pointer\\nptr2 = end pointer\\n```\\nThere are three cases : namely `case 0`, `case 1`, `case 2`\\nFirst of all I will move the current pointer until `current index is less than equal to end pointer index`.\\n\\n**`case 0`**\\nIn this case if `nums[curr] == 0`, then we\\'ll swap the values of `first pointer` and `current pointer`.\\nThen move start pointer one step ahead & move `current pointer` one step ahead\\n\\n**`case 1`**\\nIn this case if `nums[curr] == 1`, then just move the `current pointer ahead`.\\n\\n**`case 2`**\\nIn this case if `nums[curr] == 2`, then swap values of `current` and `end pointed values`.\\nAfter that` move end pointer one step back` & `current pointer remain at same position`.\\n\\n***Now see the steps :***\\n![image](https://assets.leetcode.com/users/images/82c9c9bf-0d26-4b70-9a4d-23d0b723f451_1610692397.1020772.png)\\n\\n### T = O(n) & S = O(1)\\n\\n```\\n void sortColors(vector<int>& nums) {\\n       int ptr1 = 0;  // starting pointer \\n       int ptr2 = nums.size()-1;  // end pointer\\n       int curr = 0;  // current pointer\\n        while(curr <= ptr2) {  // if current pointer less than equal to end pointer\\n            if(nums[curr] == 0) {\\n                swap(nums[ptr1], nums[curr]);  // if 0 found then swap with current and start pointer values\\n                ptr1++;  // move start pointer one step ahead\\n                curr++;  // move current pointer one step ahead\\n            }\\n            else if(nums[curr] == 1) {\\n                curr++;  // if current pointer at 1 then just move the current pointer ahead\\n            }\\n            else if(nums[curr] == 2) {\\n                swap(nums[ptr2], nums[curr]);  // if current pointer is 2 then swap values of current and end pointed values\\n                ptr2--;  // move end pointer one step back\\n            }\\n        }\\n\\t}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\ncurr = current pointer\\nptr1 = start pointer\\nptr2 = end pointer\\n```\n```\\n void sortColors(vector<int>& nums) {\\n       int ptr1 = 0;  // starting pointer \\n       int ptr2 = nums.size()-1;  // end pointer\\n       int curr = 0;  // current pointer\\n        while(curr <= ptr2) {  // if current pointer less than equal to end pointer\\n            if(nums[curr] == 0) {\\n                swap(nums[ptr1], nums[curr]);  // if 0 found then swap with current and start pointer values\\n                ptr1++;  // move start pointer one step ahead\\n                curr++;  // move current pointer one step ahead\\n            }\\n            else if(nums[curr] == 1) {\\n                curr++;  // if current pointer at 1 then just move the current pointer ahead\\n            }\\n            else if(nums[curr] == 2) {\\n                swap(nums[ptr2], nums[curr]);  // if current pointer is 2 then swap values of current and end pointed values\\n                ptr2--;  // move end pointer one step back\\n            }\\n        }\\n\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 26637,
                "title": "simple-one-pass-solution",
                "content": "    public void sortColors(int[] nums) {\\n\\t\\tint startIndex = 0;\\n\\t\\tint endIndex = nums.length - 1;\\n\\t\\tint temp,i =0;\\n\\t\\twhile(i < nums.length) {\\n\\t\\t\\tif (nums[i] == 0 && i != startIndex) {\\n\\t\\t\\t\\ttemp = nums[i];\\n\\t\\t\\t\\tnums[i] = nums[startIndex];\\n\\t\\t\\t\\tnums[startIndex++] = temp;\\n\\t\\t\\t} else if (nums[i] == 2 && i < endIndex) {\\n\\t\\t\\t\\ttemp = nums[i];\\n\\t\\t\\t\\tnums[i] = nums[endIndex];\\n\\t\\t\\t\\tnums[endIndex--] = temp;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public void sortColors(int[] nums) {\\n\\t\\tint startIndex = 0;\\n\\t\\tint endIndex = nums.length - 1;\\n\\t\\tint temp,i =0;\\n\\t\\twhile(i < nums.length) {\\n\\t\\t\\tif (nums[i] == 0 && i != startIndex) {\\n\\t\\t\\t\\ttemp = nums[i];\\n\\t\\t\\t\\tnums[i] = nums[startIndex];\\n\\t\\t\\t\\tnums[startIndex++] = temp;\\n\\t\\t\\t} else if (nums[i] == 2 && i < endIndex) {\\n\\t\\t\\t\\ttemp = nums[i];\\n\\t\\t\\t\\tnums[i] = nums[endIndex];\\n\\t\\t\\t\\tnums[endIndex--] = temp;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 26629,
                "title": "extentions-more-clear-explanation-than-previous-posts",
                "content": "First, Let us to solve a simpler problem,   for input like this\\n\\n       Input array   =  [0, 1, 0, 1, 0, 0, 1, 1, 1, 0] \\nWe want the put all the '0' to the left while the '1' to the right.\\n       \\n       Output array =  [0, 0, 0, 0, 0, 1, 1, 1, 1, 1] \\n\\nHow can you do this in only one pass ?\\n\\nHere is a possible implementation:\\n\\n    void segregate0and1(vector<int> arr)\\n    {\\n        int size=arr.size();\\n        /* Initialize left and right indexes */\\n        int left = 0, right = size-1;\\n     \\n        while (left < right)\\n        {\\n            /* Increment left index while we see 0 at left */\\n            while (arr[left] == 0 && left < right)\\n                left++;\\n     \\n            /* Decrement right index while we see 1 at right */\\n            while (arr[right] == 1 && left < right)\\n                right--;\\n     \\n            /* If left is smaller than right then there is a 1 at left\\n              and a 0 at right.  Exchange arr[left] and arr[right]*/\\n            if (left < right)\\n            {\\n                  swap(arr[left++], arr[right--]);\\n            }\\n        }\\n    }\\n\\nNow let us solve the 3 color problem, it is just a easy extension based on the above problem.\\n\\nThe most important thing is to make sure you know that  to solve the above problem, we use 2 pointers.\\n\\nNow this problem need 3 pointers.\\n\\n              L0      array[0...L0-1]  all are 0\\n              L1      array[L0...L1-1]  all are 1\\n              unknown    array[L1...L2] \\n              L2      array[L2+1...N]  all are 2\\n\\nBased on the above definition, it is much more easy to understand the algorithm like this.\\n\\n           L0 := 0; L1:= 0; L2 := N-1;\\n           while L1 <= L2 do\\n           Invariant: a[0..L0-1]=0 and a[L0..L1-1]=1 and a[L2+1..N]=2; a[L1..L2] are unknown.\\n           case a[L1] in\\n               0: swap a[L0] and a[L1]; L0++; L1++\\n               1: L1++\\n               2: swap a[L1] and a[L2];  L2--\\n\\nThe above index explanation can be viewed in this images.\\n\\nL1 means mid   and     L2 means  Hi\\n\\n![enter image description here][1]\\n\\n\\nBased on the above  explanation,  we get the final AC implementation like this \\n\\n\\n    class Solution {\\n    public:\\n        void sortColors(vector<int>& nums) {\\n            int len=nums.size();\\n            if(len<=1)  return;\\n            int one=0, two=len-1, zero=0;\\n            while(one<=two){\\n                if(nums[one]==0)  swap(nums[one++], nums[zero++]);\\n                else if (nums[one]==2)  swap(nums[one], nums[two--]);\\n                else  one++;\\n            }\\n        }\\n    };\\n\\n     \\nThanks the posts from G4G \\n\\n[http://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/][2]\\n\\n\\n\\n**UPDATE @ 2016/03/04**\\n\\nHow to solve the problem if there are K colors ?\\n\\n**Given an array of n objects with k different colors (numbered from 1 to k), sort them so that objects of the same color are adjacent, with the colors in the order 1, 2, ... k.**\\n\\nWe can use the previous position to store the count of all the K value, use the position K-1  to store the \\noccurrence of the number K.\\n\\nTo distinguish from the recorded number, we use negative number to store the occurrence.\\n\\n    class Solution{\\n    public:\\n        /**\\n         * @param colors: A list of integer\\n         * @param k: An integer\\n         * @return: nothing\\n         */\\n        void sortColors2(vector<int> &colors, int k) {\\n            for (int i = 0; i < colors.size(); ++i) {\\n                if (colors[i] > 0) {\\n                    int pos = colors[i] - 1;\\n                    if (colors[pos] <= 0) {  // Bucket exists.\\n                        --colors[pos];\\n                        colors[i] = 0;\\n                    }\\n                    else {  // Init a new bucket.\\n                        colors[i] = colors[pos];\\n                        colors[pos] = -1;\\n                        --i;\\n                    }\\n                }\\n            }\\n    \\n            for (int i = colors.size() - 1, pos = k - 1; pos >= 0; --pos) {\\n                while (colors[pos] < 0) {  // Reorder the color by count of each bucket.\\n                    ++colors[pos];\\n                    colors[i--] = pos + 1;\\n                }\\n            }\\n        }\\n    };\\n\\n  [1]: http://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/DNF1.png\\n  [2]: http://www.geeksforgeeks.org/sort-an-array-of-0s-1s-and-2s/",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        void sortColors(vector<int>& nums) {\\n            int len=nums.size();\\n            if(len<=1)  return;\\n            int one=0, two=len-1, zero=0;\\n            while(one<=two){\\n                if(nums[one]==0)  swap(nums[one++], nums[zero++]);\\n                else if (nums[one]==2)  swap(nums[one], nums[two--]);\\n                else  one++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 26668,
                "title": "just-one-pass-and-beats-83-15-java-solution-and-easy-to-understand",
                "content": "\\n    public static void sortColors(int[] nums) {\\n\\t\\t  int m=0,n=0,p=nums.length-1;\\n\\t\\t  while(n<=p)\\n\\t\\t   {\\n\\t\\t\\t   if(0==nums[n]){\\n\\t\\t\\t\\t   int temp=0;\\n\\t\\t\\t\\t   temp=nums[n];\\n\\t\\t\\t\\t   nums[n]=nums[m];\\n\\t\\t\\t\\t   nums[m]=temp;\\n\\t\\t\\t\\t   m++;\\n\\t\\t\\t\\t   n++;\\n\\t\\t\\t   }else if(2==nums[n]){\\n\\t\\t\\t\\t   int temp=0;\\n\\t\\t\\t\\t   temp=nums[p];\\n\\t\\t\\t\\t   nums[p]=nums[n];\\n\\t\\t\\t\\t   nums[n]=temp;\\n\\t\\t\\t\\t   p--;\\n\\t\\t\\t   }else{\\n\\t\\t\\t\\t   n++;\\n\\t\\t\\t\\t   \\n\\t\\t\\t   }\\n \\t\\t   \\n\\t\\t   }\\n\\t  }",
                "solutionTags": [],
                "code": "\\n    public static void sortColors(int[] nums) {\\n\\t\\t  int m=0,n=0,p=nums.length-1;\\n\\t\\t  while(n<=p)\\n\\t\\t   {\\n\\t\\t\\t   if(0==nums[n]){\\n\\t\\t\\t\\t   int temp=0;\\n\\t\\t\\t\\t   temp=nums[n];\\n\\t\\t\\t\\t   nums[n]=nums[m];\\n\\t\\t\\t\\t   nums[m]=temp;\\n\\t\\t\\t\\t   m++;\\n\\t\\t\\t\\t   n++;\\n\\t\\t\\t   }else if(2==nums[n]){\\n\\t\\t\\t\\t   int temp=0;\\n\\t\\t\\t\\t   temp=nums[p];\\n\\t\\t\\t\\t   nums[p]=nums[n];\\n\\t\\t\\t\\t   nums[n]=temp;\\n\\t\\t\\t\\t   p--;\\n\\t\\t\\t   }else{\\n\\t\\t\\t\\t   n++;\\n\\t\\t\\t\\t   \\n\\t\\t\\t   }\\n \\t\\t   \\n\\t\\t   }\\n\\t  }",
                "codeTag": "Unknown"
            },
            {
                "id": 26701,
                "title": "4ms-c-solution-with-one-pass",
                "content": "Maintain the tail index for red region, and head index for the blue region. Scan the whole array, and swap the current element with either red tail or blue head respectively. \\n\\n      class Solution {\\n        public:\\n            void sortColors(vector<int>& nums) {\\n                int tail_red = 0;\\n                int head_blue = nums.size() - 1;\\n                int cur = 0;\\n                while( cur <= head_blue){\\n                    if(nums[cur] == 0){\\n                        swap(nums[tail_red], nums[cur]);\\n                        tail_red ++;\\n                        cur ++;\\n                    }else if (nums[cur] == 2){\\n                        swap(nums[head_blue], nums[cur]);\\n                        head_blue = head_blue - 1;\\n                    }else\\n                        cur ++;\\n                }\\n            }\\n        };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n            void sortColors(vector<int>& nums) {\\n                int tail_red = 0;\\n                int head_blue = nums.size() - 1;\\n                int cur = 0;\\n                while( cur <= head_blue){\\n                    if(nums[cur] == 0){\\n                        swap(nums[tail_red], nums[cur]);\\n                        tail_red ++;\\n                        cur ++;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 3460962,
                "title": "very-easy-solution-explained-beats-100-runtime",
                "content": "# Intuition\\nThis problem can be solved by taking three \\'pointers\\' with counting sort approach. \\n\\n# Approach\\nfirst of all we have to work with 3 types of integer (0,1,2).\\nso i took three variables for those (to find out how many time they appear) a for 0,b for 1 and c for 2.\\nthen by a loop I counted how many time a,b,c appers;\\n\\n\\nfor example our array is [2,0,2,1,1,0]. we got\\na=2 (\\'0\\' came 2 times)\\nb=2\\nc=2\\nthen i just took a loop and fill the array \\nfirst a time with 0,\\nthen b time with 1 \\nand c time with 2\\n\\nin our example \\n2 times 0 =[0,0, , , , ]\\n2 times 1 =[0,0,1,1, , ]\\n2 times 2 =[0,0,1,1,2,2]\\n\\nwe got [0,0,1,1,2,2]\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a =0; int b=0,c=0;int i;\\n        for(i=0;i<nums.size();i++){\\n            if(nums[i]==0){\\n                a++;\\n            }\\n            if(nums[i]==1){\\n                b++;\\n            }\\n            else c++;\\n            \\n        }\\n        for(i=0;i<nums.size();i++){\\n            if(i<a){\\n                nums[i]=0;\\n            }\\n            else if(i<a+b){\\n                nums[i]=1;\\n            }\\n            else nums[i]=2;\\n        }\\n      \\n    }\\n};\\n```\\n#  Please Upvote :(\\n",
                "solutionTags": [
                    "C++",
                    "Counting Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a =0; int b=0,c=0;int i;\\n        for(i=0;i<nums.size();i++){\\n            if(nums[i]==0){\\n                a++;\\n            }\\n            if(nums[i]==1){\\n                b++;\\n            }\\n            else c++;\\n            \\n        }\\n        for(i=0;i<nums.size();i++){\\n            if(i<a){\\n                nums[i]=0;\\n            }\\n            else if(i<a+b){\\n                nums[i]=1;\\n            }\\n            else nums[i]=2;\\n        }\\n      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457424,
                "title": "simple-o-n-time-o-1-space-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0 = 0, count1 = 0, count2 = 0;\\n        for(int i=0 ;i<nums.size(); i++)\\n        {\\n            if(nums[i] == 0)\\n            count0++;\\n            else if(nums[i] == 1)\\n            count1++;\\n            else\\n            count2++;\\n        }\\n\\n        for(int i=0 ;i<nums.size(); i++)\\n        {\\n            if(count0-- > 0)\\n            nums[i] = 0;\\n            else if(count1-- > 0)\\n            nums[i] = 1;\\n            else\\n            nums[i] = 2;\\n        }\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0 = 0, count1 = 0, count2 = 0;\\n        for(int i=0 ;i<nums.size(); i++)\\n        {\\n            if(nums[i] == 0)\\n            count0++;\\n            else if(nums[i] == 1)\\n            count1++;\\n            else\\n            count2++;\\n        }\\n\\n        for(int i=0 ;i<nums.size(); i++)\\n        {\\n            if(count0-- > 0)\\n            nums[i] = 0;\\n            else if(count1-- > 0)\\n            nums[i] = 1;\\n            else\\n            nums[i] = 2;\\n        }\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3291249,
                "title": "dutch-national-flag-with-notes-and-approach",
                "content": "# Adding the Notes for the above Question\\n[GitHub Link for the Notes](https://github.com/rizonkumar/LeetCode-Notes/blob/main/75.%20Sort%20Colors.pdf)\\n\\n# Intuition\\nThe given code is an implementation of the Dutch national flag problem, where we need to sort an array containing 0\\'s, 1\\'s, and 2\\'s in linear time and in-place.\\n\\nThe code initializes three pointers: low, mid, and high. The low pointer points to the index before which all elements are 0\\'s, the high pointer points to the index after which all elements are 2\\'s, and the mid pointer points to the current index being processed.\\n\\nThe algorithm then loops through the array until mid and high pointers meet. For each element, it checks its value using a switch statement (or if-else statements in the equivalent version) and moves it to the appropriate position in the array.\\n\\nIf the current element is 0, it swaps it with the element pointed by low and increments both low and mid pointers to move forward in the array. If the current element is 1, it simply increments the mid pointer to move forward. If the current element is 2, it swaps it with the element pointed by high and decrements the high pointer to move backward in the array.\\n\\nAfter the loop, the array is sorted in-place, and all 0\\'s will be before all 1\\'s, which will be before all 2\\'s.\\n\\n# Approach\\n1. Initialize three pointers: low, mid, and high. low points to the index before which all elements are 0\\'s, high points to the index after which all elements are 2\\'s, and mid points to the current index being processed.\\n\\n2. Loop through the array until mid and high pointers meet. For each element, check its value using a switch statement (or if-else statements in the equivalent version).\\n\\n3. If the current element is 0, swap it with the element pointed by low and increment both low and mid pointers to move forward in the array. This ensures that all 0\\'s will be before all 1\\'s and 2\\'s.\\n\\n4. If the current element is 1, simply increment the mid pointer to move forward. Since 1\\'s are already in their correct position in a sorted array, we don\\'t need to perform any additional operation on them.\\n\\n5. If the current element is 2, swap it with the element pointed by high and decrement the high pointer to move backward in the array. This ensures that all 2\\'s will be after all 0\\'s and 1\\'s.\\n\\n6. After the loop, the array is sorted in-place, and all 0\\'s will be before all 1\\'s, which will be before all 2\\'s.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$ in One Pass\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:  $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code using Switch Statement\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.size() - 1;\\n\\n        while(mid <= high){\\n            switch(nums[mid]){\\n\\n                //if the element is 0\\n                case 0:\\n                    swap(nums[low++], nums[mid++]);\\n                    break;\\n                \\n                // if the element is 1\\n                case 1:\\n                    mid++;\\n                    break;\\n                \\n                // if the element is 2\\n                case 2:\\n                    swap(nums[mid], nums[high--]);\\n                    break;\\n            }\\n        }\\n    }\\n};\\n```\\n# Code using If-else Statement\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.size() - 1;\\n\\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[low++], nums[mid++]);\\n            } else if(nums[mid] == 1){\\n                mid++;\\n            } else if(nums[mid] == 2){\\n                swap(nums[mid], nums[high--]);\\n            }\\n        }\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.size() - 1;\\n\\n        while(mid <= high){\\n            switch(nums[mid]){\\n\\n                //if the element is 0\\n                case 0:\\n                    swap(nums[low++], nums[mid++]);\\n                    break;\\n                \\n                // if the element is 1\\n                case 1:\\n                    mid++;\\n                    break;\\n                \\n                // if the element is 2\\n                case 2:\\n                    swap(nums[mid], nums[high--]);\\n                    break;\\n            }\\n        }\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.size() - 1;\\n\\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[low++], nums[mid++]);\\n            } else if(nums[mid] == 1){\\n                mid++;\\n            } else if(nums[mid] == 2){\\n                swap(nums[mid], nums[high--]);\\n            }\\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3147118,
                "title": "c-code-without-using-sort-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int one=0,zero=0,two=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){zero++;}\\n            else if(nums[i]==1){one++;}\\n            else {two++;}\\n\\n        }\\n        nums.clear();\\n        for(int i=0;i<zero;i++){nums.emplace_back(0);}\\n        for(int i=0;i<one;i++){nums.emplace_back(1);}\\n        for(int i=0;i<two;i++){nums.emplace_back(2);}\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int one=0,zero=0,two=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){zero++;}\\n            else if(nums[i]==1){one++;}\\n            else {two++;}\\n\\n        }\\n        nums.clear();\\n        for(int i=0;i<zero;i++){nums.emplace_back(0);}\\n        for(int i=0;i<one;i++){nums.emplace_back(1);}\\n        for(int i=0;i<two;i++){nums.emplace_back(2);}\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085526,
                "title": "1-ms-easy-solution-java-easy-to-understand-for-beginner",
                "content": "```\\n//----------------- Don\\'t Forget to Upvote ----------------\\n```\\n# Code\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int x = 0;\\n        for(int i = 0 ; i<nums.length ; i++){\\n            if (nums[i] == 0){\\n                int temp = nums[x];\\n                nums[x] = nums[i];\\n                nums[i] = temp;\\n                x++;\\n            }\\n        }\\n        for(int i = x ; i<nums.length ; i++){\\n            if (nums[i] == 1){\\n                int temp = nums[x];\\n                nums[x] = nums[i];\\n                nums[i] = temp;\\n                x++;\\n            }\\n        }    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//----------------- Don\\'t Forget to Upvote ----------------\\n```\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int x = 0;\\n        for(int i = 0 ; i<nums.length ; i++){\\n            if (nums[i] == 0){\\n                int temp = nums[x];\\n                nums[x] = nums[i];\\n                nums[i] = temp;\\n                x++;\\n            }\\n        }\\n        for(int i = x ; i<nums.length ; i++){\\n            if (nums[i] == 1){\\n                int temp = nums[x];\\n                nums[x] = nums[i];\\n                nums[i] = temp;\\n                x++;\\n            }\\n        }    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3080752,
                "title": "best-o-n-solution",
                "content": "\\n\\n# Approach\\nDutch National Flag Algorithm\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$ \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int low = 0, mid = 0, high = n - 1;\\n        while (mid <= high) {\\n            if (nums[mid] == 0) {\\n                swap(nums[low], nums[mid]);\\n                low++;\\n                mid++;\\n            } else if (nums[mid] == 1) {\\n                mid++;\\n            } else if (nums[mid] == 2) {\\n                swap(nums[high], nums[mid]);\\n                high--;\\n            }    \\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int low = 0, mid = 0, high = n - 1;\\n        while (mid <= high) {\\n            if (nums[mid] == 0) {\\n                swap(nums[low], nums[mid]);\\n                low++;\\n                mid++;\\n            } else if (nums[mid] == 1) {\\n                mid++;\\n            } else if (nums[mid] == 2) {\\n                swap(nums[high], nums[mid]);\\n                high--;\\n            }    \\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3053568,
                "title": "c-explained-with-bonus-one-liner",
                "content": "\\n\\n# Approach\\n- Consider three pointers low = 0, mid = 0, high = nums.size() - 1\\n\\n- The algorithm ensures that at any point, every element **before low is 0**, every element **after high is 2**, every element in **between are either 0, 1 or 2** i.e. unprocessed.\\n- We\\'ll use mid pointer to traverse and check the array elements i.e. while(mid <= high). Three cases are possible:\\n  - nums[mid] == 0 In this case swap(nums[low], nums[mid]) and increment both low and mid pointer i.e. low++ mid++\\n  - nums[mid] == 1 In this case mid++\\n  - nums[mid] == 2 In this case swap(nums[mid], nums[high]) and decrement high pointer i.e. high--\\n\\n\\n\\n# Code\\n```\\n    void sortColors(vector<int>& nums) {\\n        \\n        // initialize variables:\\n        int low = 0, mid = 0, high = nums.size() - 1;\\n        \\n        // logic:\\n        while(mid <= high)\\n        {\\n            switch(nums[mid])\\n            {\\n                case 0: swap(nums[low++], nums[mid++]); break;\\n                \\n                case 1: mid++; break;\\n                \\n                case 2: swap(nums[mid], nums[high--]); break;\\n            }\\n        }\\n    }\\n```\\n\\n\\n\\nBonus - One-Liner\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n    }\\n};\\n```\\n**Please upvote if it helped. Happy Coding!**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n    void sortColors(vector<int>& nums) {\\n        \\n        // initialize variables:\\n        int low = 0, mid = 0, high = nums.size() - 1;\\n        \\n        // logic:\\n        while(mid <= high)\\n        {\\n            switch(nums[mid])\\n            {\\n                case 0: swap(nums[low++], nums[mid++]); break;\\n                \\n                case 1: mid++; break;\\n                \\n                case 2: swap(nums[mid], nums[high--]); break;\\n            }\\n        }\\n    }\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        sort(nums.begin(),nums.end());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2848411,
                "title": "java-quick-partition-easy-to-understand",
                "content": "- Count the number of balls for each color\\n- Use the given array and place them `red (0)` `white(1)` `blue(2)` order.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\t\\n        int red = 0, white = 0, blue = 0;\\n\\t\\tfor (int i : nums) {\\n\\t\\t\\tif (i == 0) { red++;}\\n\\t\\t\\tif (i == 1) { white++;}\\n\\t\\t\\tif (i == 2) { blue++;}\\n\\t\\t}\\n        int i = 0;\\n\\t\\twhile (red-- > 0) {\\tnums[i++] = 0; }\\n\\t\\twhile (white-- > 0) { nums[i++] = 1;}\\n\\t\\twhile (blue-- > 0) { nums[i++] = 2;}\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\t\\n        int red = 0, white = 0, blue = 0;\\n\\t\\tfor (int i : nums) {\\n\\t\\t\\tif (i == 0) { red++;}\\n\\t\\t\\tif (i == 1) { white++;}\\n\\t\\t\\tif (i == 2) { blue++;}\\n\\t\\t}\\n        int i = 0;\\n\\t\\twhile (red-- > 0) {\\tnums[i++] = 0; }\\n\\t\\twhile (white-- > 0) { nums[i++] = 1;}\\n\\t\\twhile (blue-- > 0) { nums[i++] = 2;}\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2830083,
                "title": "python-solution-using-pointers-explained",
                "content": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        l=0 #left pointer\\n        mid=0 #traverse from left\\n        r=len(nums)-1 #right pinter\\n        while mid<=r:\\n            if nums[mid]==0: #if found 0 put it at first of nums, so swap from left pointer\\n                nums[mid],nums[l]=nums[l],nums[mid]\\n                #after swapping move to increment indeces\\n                mid+=1 \\n                l+=1\\n                \\n            #if found 1 leave it as it is (should be bw 0 and 2)\\n            elif nums[mid]==1: \\n                mid+=1\\n                \\n            #if found 2, so swap from right pointer\\n            else: \\n                nums[mid],nums[r]=nums[r],nums[mid]\\n                r-=1 #move the right pointer\\n                \\n            \\n```\\n**PLEASE UPVOTE IF YOU FOUND THE SOLUTION HELPFUL**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        l=0 #left pointer\\n        mid=0 #traverse from left\\n        r=len(nums)-1 #right pinter\\n        while mid<=r:\\n            if nums[mid]==0: #if found 0 put it at first of nums, so swap from left pointer\\n                nums[mid],nums[l]=nums[l],nums[mid]\\n                #after swapping move to increment indeces\\n                mid+=1 \\n                l+=1\\n                \\n            #if found 1 leave it as it is (should be bw 0 and 2)\\n            elif nums[mid]==1: \\n                mid+=1\\n                \\n            #if found 2, so swap from right pointer\\n            else: \\n                nums[mid],nums[r]=nums[r],nums[mid]\\n                r-=1 #move the right pointer\\n                \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2753230,
                "title": "o-n-with-count-sort",
                "content": "```\\n\\tdef sortColors(self, nums: List[int]) -> None:\\n        counts = [0, 0, 0]\\n        for i in nums:\\n            counts[i] += 1\\n        \\n        i = 0\\n        for k in range(3):\\n            while counts[k] > 0:\\n                nums[i] = k\\n                i += 1\\n                counts[k] -= 1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n\\tdef sortColors(self, nums: List[int]) -> None:\\n        counts = [0, 0, 0]\\n        for i in nums:\\n            counts[i] += 1\\n        \\n        i = 0\\n        for k in range(3):\\n            while counts[k] > 0:\\n                nums[i] = k\\n                i += 1\\n                counts[k] -= 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2184767,
                "title": "easy-to-understand-and-100-fast-solution",
                "content": "the main aim here is to put all 2,s at the last of the array and all 0\\'s at the first...so start iterating in the array and wherever you find 2 send it to the last and as you put 2 at the last then decrease the last index by 1 and similarly when we found zero ,put this at starting of index and then increase there index by 1...by doing so we will be able to sort 0,1,2 without using sort function...\\n\\n\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        \\n        int k=0,j=nums.size()-1;\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==2 && i<j)\\n            {\\n                swap(nums[i],nums[j]);\\n                j--;\\n                i--;\\n             }\\n            else if(nums[i]==0)\\n            {\\n                swap(nums[k],nums[i]);\\n                k++;\\n            }\\n            \\n        }\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        \\n        int k=0,j=nums.size()-1;\\n        \\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==2 && i<j)\\n            {\\n                swap(nums[i],nums[j]);\\n                j--;\\n                i--;\\n             }",
                "codeTag": "Java"
            },
            {
                "id": 1796797,
                "title": "python-3-25ms-o-n-count-0s-1s-solution-faster-than-95",
                "content": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a,b=nums.count(0),nums.count(1)\\n        for i in range(len(nums)):\\n            if a!=0:\\n                nums[i]=0\\n                a-=1\\n            elif b!=0:\\n                nums[i]=1\\n                b-=1\\n            else:\\n                nums[i]=2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        a,b=nums.count(0),nums.count(1)\\n        for i in range(len(nums)):\\n            if a!=0:\\n                nums[i]=0\\n                a-=1\\n            elif b!=0:\\n                nums[i]=1\\n                b-=1\\n            else:\\n                nums[i]=2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1543602,
                "title": "c-python-java-o-n-and-o-n-n-approach-easy-and-clean",
                "content": "**SOLUTIONS** *[Github Repo Link Here](https://github.com/bhaumikmaan/Competitve-Programming-Solutions)*\\n\\n**O(N)** 100% Faster\\n<iframe src=\"https://leetcode.com/playground/J9eKUETX/shared\" frameBorder=\"0\" width=\"500\" height=\"450\"></iframe>\\n\\n**O(N*N)**\\n<iframe src=\"https://leetcode.com/playground/9ZSpPUVn/shared\" frameBorder=\"0\" width=\"500\" height=\"350\"></iframe>\\n\\nUpvote if you found this helpful <3",
                "solutionTags": [],
                "code": "**SOLUTIONS** *[Github Repo Link Here](https://github.com/bhaumikmaan/Competitve-Programming-Solutions)*\\n\\n**O(N)** 100% Faster\\n<iframe src=\"https://leetcode.com/playground/J9eKUETX/shared\" frameBorder=\"0\" width=\"500\" height=\"450\"></iframe>\\n\\n**O(N*N)**\\n<iframe src=\"https://leetcode.com/playground/9ZSpPUVn/shared\" frameBorder=\"0\" width=\"500\" height=\"350\"></iframe>\\n\\nUpvote if you found this helpful <3",
                "codeTag": "Unknown"
            },
            {
                "id": 1543311,
                "title": "dutch-national-flag-algorithm-to-sort-in-one-pass-no-extra-space",
                "content": "1. This algorithm uses 3 pointers : **low** , **mid** and **high**.\\n2. Initially low and mid pointers are placed at starting index of the array whereas high is placed at the end of the array.\\n3. This algorithm is based on the fact that all elements to the left of low are 0 and all elements to the right of high are 2.\\n4. We will use mid pointer to traverse over the array (till it crosses high pointer).\\n5. Their are 3 possibilities :\\n\\t\\t **nums[mid] = 0**  :   We will swap values at index low and mid. Also will increment both low                                                    and mid pointer.\\n\\t\\t **nums[mid] = 1**  : just move mid pointer by 1.\\n\\t\\t**nums[mid] = 2**   : We will swap values at high and mid. Also decrement high pointer.\\n\\t\\t\\n\\t\\t\\n```\\nvoid sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int low = 0;\\n        int mid = 0;\\n        int high = n-1;\\n        \\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[low] , nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            \\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else{\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n```\\n\\n**Time Complexity:** O(n)\\n**Space Complexity:** O(1)",
                "solutionTags": [],
                "code": "```\\nvoid sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int low = 0;\\n        int mid = 0;\\n        int high = n-1;\\n        \\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                swap(nums[low] , nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            \\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else{\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1368805,
                "title": "very-simple-python-o-n-time-o-1-space",
                "content": "```\\ndef sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        p = 0\\n        for n in [0,1,2]: # Integers are fixed so we are allowed\\n            for i in range(len(nums)):\\n                if nums[i] == n:\\n                    nums[p], nums[i] = nums[i], nums[p]\\n                    p += 1\\n```\\n\\nSpace is O(3) -> O(1)\\nTime is O(3 * n) -> O(n)",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        p = 0\\n        for n in [0,1,2]: # Integers are fixed so we are allowed\\n            for i in range(len(nums)):\\n                if nums[i] == n:\\n                    nums[p], nums[i] = nums[i], nums[p]\\n                    p += 1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1137080,
                "title": "sort-0-s-1-s-and-2-s",
                "content": "**Simplest and efficient Java Code for Dutch National Flag Problem..**\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low=0;\\n        int high=nums.length-1;\\n        int mid=0;\\n        int temp;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                temp=nums[mid];\\n                nums[mid]=nums[low];\\n                nums[low]=temp;\\n                low++;\\n                mid++;\\n            }else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }else if(nums[mid]==2)\\n            {\\n                temp=nums[high];\\n                nums[high]=nums[mid];\\n                nums[mid]=temp;\\n                high--;\\n            }\\n        }\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public void sortColors(int[] nums) {\\n        int low=0;\\n        int high=nums.length-1;\\n        int mid=0;\\n        int temp;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                temp=nums[mid];\\n                nums[mid]=nums[low];\\n                nums[low]=temp;\\n                low++;\\n                mid++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1049578,
                "title": "python-3-dutch-national-flag-solution",
                "content": "Most optimal approach to solve this problem is Dutch National Flag Solution \\n\\nThis will help us to solve this problem in O(n) time and O(1) space complexity.\\n\\nThe trick is to use three pointers Low, Mid and High and idea is to move 0\\'s to left and 2\\'s to right of the array \\n\\nStep 1. Initialize value for `Low, mid =0,0` , `High=Len(nums) - 1` \\nStep 2. \\n\\t\\tCase 1. \\n\\t\\t\\tWhenever `nums[Mid]` is 0 we should swap nums[Low] and nums[mid] and increment both pointers Low++, Mid++\\n\\t\\tCase 2.\\n\\t\\t\\tWhenever `nums[mid]` is 2 we should swap nums[High] with nums[Mid] and decrement `High --`\\n\\t\\tCase 3:\\n\\t\\t\\tIf `nums[mid]` is 1 just increment mid++\\n\\t\\t\\t\\nSample Solution: \\n\\n```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        low = 0\\n        high = len(nums) - 1\\n        mid = 0\\n        \\n        while mid <= high:\\n            if nums[mid] == 0:\\n                nums[low], nums[mid] = nums[mid], nums[low]\\n                low += 1\\n                mid+=1\\n            elif nums[mid] == 2:\\n                nums[high], nums[mid] = nums[mid], nums[high]\\n                high -= 1\\n            else:\\n                mid += 1\\n        \\n                \\n        \\n        \\n                \\n        \\n\\n",
                "solutionTags": [],
                "code": "Most optimal approach to solve this problem is Dutch National Flag Solution \\n\\nThis will help us to solve this problem in O(n) time and O(1) space complexity.\\n\\nThe trick is to use three pointers Low, Mid and High and idea is to move 0\\'s to left and 2\\'s to right of the array \\n\\nStep 1. Initialize value for `Low, mid =0,0` , `High=Len(nums) - 1` \\nStep 2. \\n\\t\\tCase 1. \\n\\t\\t\\tWhenever `nums[Mid]` is 0 we should swap nums[Low] and nums[mid] and increment both pointers Low++, Mid++\\n\\t\\tCase 2.\\n\\t\\t\\tWhenever `nums[mid]` is 2 we should swap nums[High] with nums[Mid] and decrement `High --`\\n\\t\\tCase 3:\\n\\t\\t\\tIf `nums[mid]` is 1 just increment mid++\\n\\t\\t\\t\\nSample Solution: \\n\\n```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        low = 0\\n        high = len(nums) - 1\\n        mid = 0\\n        \\n        while mid <= high:\\n            if nums[mid] == 0:\\n                nums[low], nums[mid] = nums[mid], nums[low]\\n                low += 1\\n                mid+=1\\n            elif nums[mid] == 2:\\n                nums[high], nums[mid] = nums[mid], nums[high]\\n                high -= 1\\n            else:\\n                mid += 1\\n        \\n                \\n        \\n        \\n                \\n        \\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 767480,
                "title": "o-n-c-solution",
                "content": "```\\nvoid sortColors(int* nums, int numsSize){\\n    int two_ptr = numsSize -1;\\n    int zero_ptr = 0;\\n    int one_ptr = 0;\\n    while (one_ptr <= two_ptr)\\n    {\\n        if (nums[one_ptr] == 0)\\n        {\\n            int save = nums[zero_ptr];\\n            nums[zero_ptr] = nums[one_ptr];\\n            nums[one_ptr] = save;\\n            one_ptr++; zero_ptr++;\\n        }\\n        else if (nums[one_ptr] == 1)\\n        {\\n            one_ptr++;\\n        }\\n        else\\n        {\\n            int save = nums[two_ptr];\\n            nums[two_ptr] = nums[one_ptr];\\n            nums[one_ptr] = save;\\n            two_ptr--;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nvoid sortColors(int* nums, int numsSize){\\n    int two_ptr = numsSize -1;\\n    int zero_ptr = 0;\\n    int one_ptr = 0;\\n    while (one_ptr <= two_ptr)\\n    {\\n        if (nums[one_ptr] == 0)\\n        {\\n            int save = nums[zero_ptr];\\n            nums[zero_ptr] = nums[one_ptr];\\n            nums[one_ptr] = save;\\n            one_ptr++; zero_ptr++;\\n        }\\n        else if (nums[one_ptr] == 1)\\n        {\\n            one_ptr++;\\n        }\\n        else\\n        {\\n            int save = nums[two_ptr];\\n            nums[two_ptr] = nums[one_ptr];\\n            nums[one_ptr] = save;\\n            two_ptr--;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 416304,
                "title": "c-one-pass-beats-100-on-everything-with-explanation",
                "content": "```\\n// Usually the more variables you reserve for yourself with these types of problems \\n// the more you can work with and the more agile you can become.\\n    void sortColors(vector<int>& nums) {\\n        int i = 0, j = nums.size() - 1, x = 0; \\n        while (x <= j) {\\n            if (nums[x] == 0) { // Meet a 0? Send it back !\\n                swap(nums[x++], nums[i++]);\\n            } else if (nums[x] == 2) { // Meet a 2? Send it forward, but don\\'t move forward yourself,\\n                swap(nums[j--], nums[x]); // You might have just swapped a two with a 0.\\n            } else { // In that case, you\\'d need to swap it back. If I wrote nums[x++], I would have missed it!\\n                x++; // Keep walking, x.\\n            }\\n        }\\n        return;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n// Usually the more variables you reserve for yourself with these types of problems \\n// the more you can work with and the more agile you can become.\\n    void sortColors(vector<int>& nums) {\\n        int i = 0, j = nums.size() - 1, x = 0; \\n        while (x <= j) {\\n            if (nums[x] == 0) { // Meet a 0? Send it back !\\n                swap(nums[x++], nums[i++]);\\n            } else if (nums[x] == 2) { // Meet a 2? Send it forward, but don\\'t move forward yourself,\\n                swap(nums[j--], nums[x]); // You might have just swapped a two with a 0.\\n            } else { // In that case, you\\'d need to swap it back. If I wrote nums[x++], I would have missed it!\\n                x++; // Keep walking, x.\\n            }\\n        }\\n        return;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 26690,
                "title": "java-single-pass",
                "content": "Use two pointers. One for the place to insert 0 ***(zero)*** and another for the place to insert 2 ***(two)***. \\n\\nIterate through this array, if 0 is found, swap its value with ***zero***. if 2 is found, swap its value with ***two***. If 1 is found, go to the next position until it exceeds ***two*** or fall behind by ***zero***. \\n\\n    public class Solution {\\n        public void sortColors(int[] nums) {\\n            if (nums == null || nums.length == 0) return;\\n            int zero = 0, count = 0, two = nums.length - 1;\\n            while (count <= two && count >= zero) {\\n                while (count <= two && count >= zero) {\\n                    if (nums[count] == 0) {\\n                        swap(nums, count, zero);\\n                        zero++;\\n                    }\\n                    if (nums[count] == 2) {\\n                        swap(nums, count, two);\\n                        two--;\\n                    }\\n                    if (nums[count] == 1) break;\\n                }\\n                count++;\\n            }\\n        }\\n        \\n        private void swap(int[] nums, int i, int j) {\\n            int temp = nums[i];\\n            nums[i] = nums[j];\\n            nums[j] = temp;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public void sortColors(int[] nums) {\\n            if (nums == null || nums.length == 0) return;\\n            int zero = 0, count = 0, two = nums.length - 1;\\n            while (count <= two && count >= zero) {\\n                while (count <= two && count >= zero) {\\n                    if (nums[count] == 0) {\\n                        swap(nums, count, zero);\\n                        zero++;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 3364495,
                "title": "easiest-python-solution-using-just-three-pointers-time-complexity-o-n",
                "content": "\\n# Code\\n```\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        r,w,b=0,0,len(nums)-1\\n        while w<=b:\\n            if nums[w]==0:\\n                nums[r],nums[w]=nums[w],nums[r]\\n                r+=1\\n                w+=1\\n            elif nums[w]==1:\\n                w+=1\\n            else:\\n                nums[b],nums[w]=nums[w],nums[b]\\n                b-=1\\n            print(nums)\\n        return nums\\n                \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sortColors(self, nums):\\n        \"\"\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        r,w,b=0,0,len(nums)-1\\n        while w<=b:\\n            if nums[w]==0:\\n                nums[r],nums[w]=nums[w],nums[r]\\n                r+=1\\n                w+=1\\n            elif nums[w]==1:\\n                w+=1\\n            else:\\n                nums[b],nums[w]=nums[w],nums[b]\\n                b-=1\\n            print(nums)\\n        return nums\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3241599,
                "title": "c-solution-easy-and-simple-explanation-0ms-runtime-o-n-solution-o-1-space",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThere are two approaches :  \\n**APPROACH 1:**\\n1. Count the number of zeros, ones and twos as it is already gievn that array contains only these three elements.\\n2. First fill the zeros then ones and at last twos in the array.\\n\\n\\n**APPROACH 2:**\\n This is a three pointer approach \\n1. First pointer is pointing to the index where the next zero is going to be stored.\\n2. Second pointer is pointing to the index where the next one is going to be stored.\\n3. On encountering the zeros and ones swap these elements with the respected pointers which points to their exact positions.\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        // Approach 1\\n        // int z = 0, o = 0, t = 0;\\n        // for (auto i : nums){\\n        //     if (i == 0) z++;\\n        //     else if (i == 1) o++;\\n        //     else t++;\\n        // }\\n        // int i = 0;\\n        // while(z--){\\n        //     nums[i]= 0; i++;\\n        // }\\n        // while(o--){\\n        //     nums[i] = 1; i++;\\n        // }\\n        // while(t--){\\n        //     nums[i] = 2; i++;\\n        // }\\n\\n        // three ponter approach \\n        int n = nums.size(),k = 0, j = 0;\\n        for (int i = 0 ; i < n ; i++){\\n            if (nums[i] == 0){\\n                swap(nums[i],nums[j]);\\n                swap(nums[j],nums[k]);\\n                k++;j++;\\n            }\\n            else if(nums[i] == 1){\\n                swap(nums[i], nums[j]);\\n                j++;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        // Approach 1\\n        // int z = 0, o = 0, t = 0;\\n        // for (auto i : nums){\\n        //     if (i == 0) z++;\\n        //     else if (i == 1) o++;\\n        //     else t++;\\n        // }\\n        // int i = 0;\\n        // while(z--){\\n        //     nums[i]= 0; i++;\\n        // }\\n        // while(o--){\\n        //     nums[i] = 1; i++;\\n        // }\\n        // while(t--){\\n        //     nums[i] = 2; i++;\\n        // }\\n\\n        // three ponter approach \\n        int n = nums.size(),k = 0, j = 0;\\n        for (int i = 0 ; i < n ; i++){\\n            if (nums[i] == 0){\\n                swap(nums[i],nums[j]);\\n                swap(nums[j],nums[k]);\\n                k++;j++;\\n            }\\n            else if(nums[i] == 1){\\n                swap(nums[i], nums[j]);\\n                j++;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3200051,
                "title": "c-python-100-faster-using-pointers-o-n",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` C++ [0]\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int left = 0, right = nums.size() - 1;\\n        for(int i = 0; i <= right; i++) {\\n            while(nums[i] == 2 && i < right) {\\n                swap(nums[i], nums[right--]);\\n            }\\n            while(nums[i] == 0 && i > left) {\\n                swap(nums[i], nums[left++]);\\n            }\\n        }\\n    }\\n};\\n```\\n``` Python [1]\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        left = i = 0\\n        right = len(nums) - 1\\n        while i <= right :\\n            while(nums[i] == 2 and i < right):\\n                nums[i], nums[right] = nums[right], nums[i]\\n                right -= 1\\n            while(nums[i] == 0 and i > left):\\n                nums[i], nums[left] = nums[left], nums[i]\\n                left +=1\\n            i += 1\\n    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` C++ [0]\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int left = 0, right = nums.size() - 1;\\n        for(int i = 0; i <= right; i++) {\\n            while(nums[i] == 2 && i < right) {\\n                swap(nums[i], nums[right--]);\\n            }\\n            while(nums[i] == 0 && i > left) {\\n                swap(nums[i], nums[left++]);\\n            }\\n        }\\n    }\\n};\\n```\n``` Python [1]\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        left = i = 0\\n        right = len(nums) - 1\\n        while i <= right :\\n            while(nums[i] == 2 and i < right):\\n                nums[i], nums[right] = nums[right], nums[i]\\n                right -= 1\\n            while(nums[i] == 0 and i > left):\\n                nums[i], nums[left] = nums[left], nums[i]\\n                left +=1\\n            i += 1\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2595038,
                "title": "java-space-complexity-o-1-time-complexity-o-n",
                "content": "Hi Family,\\n\\nI put the proper comment in the code for your understanding\\nIf you get the code then Please Please Upvote the Solution\\n\\n```\\n\\tpublic void sortColors(int[] nums) {\\n        int zero = 0;\\n        int one = 0;\\n        int two = 0;\\n        // take the frequency of 0\\'s,  1\\'s,  2\\'s\\n        for (int i=0;i<nums.length;i++){\\n            if (nums[i] == 0) zero++;\\n            if (nums[i] == 1) one++;\\n            if (nums[i] == 2) two++;\\n        }\\n        \\n        // put the zero,one,two in the array one - one\\n        \\n        int index = 0;\\n        while (zero-- > 0) nums[index++] = 0;\\n        while (one-- > 0) nums[index++] = 1;\\n        while (two-- > 0) nums[index++] = 2;\\n    }\\n```\\nThanks!!!",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\tpublic void sortColors(int[] nums) {\\n        int zero = 0;\\n        int one = 0;\\n        int two = 0;\\n        // take the frequency of 0\\'s,  1\\'s,  2\\'s\\n        for (int i=0;i<nums.length;i++){\\n            if (nums[i] == 0) zero++;\\n            if (nums[i] == 1) one++;\\n            if (nums[i] == 2) two++;\\n        }\\n        \\n        // put the zero,one,two in the array one - one\\n        \\n        int index = 0;\\n        while (zero-- > 0) nums[index++] = 0;\\n        while (one-- > 0) nums[index++] = 1;\\n        while (two-- > 0) nums[index++] = 2;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2264649,
                "title": "java-o-n-dutch-national-flag-algorithm",
                "content": "**If you liked my solution , upvote is highly appreciate\\nIf you have any doubts or suggestions feel free to comment **\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.length - 1;\\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                int temp = nums[mid];\\n                nums[mid] = nums[low];\\n                nums[low] = temp;\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--;\\n            }\\n        }\\n        \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.length - 1;\\n        while(mid <= high){\\n            if(nums[mid] == 0){\\n                int temp = nums[mid];\\n                nums[mid] = nums[low];\\n                nums[low] = temp;\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid] == 1){\\n                mid++;\\n            }\\n            else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--;\\n            }\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2186646,
                "title": "go-o-n-count-the-number-of-zero-one-two",
                "content": "```\\nfunc sortColors(nums []int)  {\\n    nZeros, nOnes, nTwos := 0, 0, 0\\n    \\n    for i := 0; i < len(nums); i++ {\\n        if nums[i] == 0 {\\n            nZeros++\\n        } else if nums[i] == 1{\\n            nOnes++\\n        } else {\\n            nTwos++\\n        }\\n    }\\n    \\n    i := 0\\n\\n    for nZeros > 0 {\\n        nums[i] = 0\\n        nZeros--\\n        i++\\n    }\\n    \\n    for nOnes > 0 {\\n        nums[i] = 1\\n        nOnes--\\n        i++\\n    }\\n    \\n    for nTwos > 0 {\\n        nums[i] = 2\\n        nTwos--\\n        i++\\n    }\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc sortColors(nums []int)  {\\n    nZeros, nOnes, nTwos := 0, 0, 0\\n    \\n    for i := 0; i < len(nums); i++ {\\n        if nums[i] == 0 {\\n            nZeros++\\n        } else if nums[i] == 1{\\n            nOnes++\\n        } else {\\n            nTwos++\\n        }\\n    }\\n    \\n    i := 0\\n\\n    for nZeros > 0 {\\n        nums[i] = 0\\n        nZeros--\\n        i++\\n    }\\n    \\n    for nOnes > 0 {\\n        nums[i] = 1\\n        nOnes--\\n        i++\\n    }\\n    \\n    for nTwos > 0 {\\n        nums[i] = 2\\n        nTwos--\\n        i++\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2141756,
                "title": "c-average-runtime-o-1-memory-two-different-codes",
                "content": "```\\nvoid sortColors(vector<int>& nums) {\\n        int n = nums.size(),zero=0,one=0,two=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0)\\n                zero++;\\n            else if(nums[i]==1)\\n                one++;\\n            else \\n                two++;\\n        }\\n        nums.clear();\\n        // while(zero--)\\n        //     nums.push_back(0);\\n        // while(one--)\\n        //     nums.push_back(1);\\n        // while(two--)\\n        //     nums.push_back(2);\\n        for(int i=0;i<n;i++){\\n            if(zero!=0)\\n                nums.push_back(0),zero--;\\n            else if(one!=0)\\n                nums.push_back(1),one--;\\n            else \\n                nums.push_back(2),two--;\\n        }\\n        \\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nvoid sortColors(vector<int>& nums) {\\n        int n = nums.size(),zero=0,one=0,two=0;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0)\\n                zero++;\\n            else if(nums[i]==1)\\n                one++;\\n            else \\n                two++;\\n        }\\n        nums.clear();\\n        // while(zero--)\\n        //     nums.push_back(0);\\n        // while(one--)\\n        //     nums.push_back(1);\\n        // while(two--)\\n        //     nums.push_back(2);\\n        for(int i=0;i<n;i++){\\n            if(zero!=0)\\n                nums.push_back(0),zero--;\\n            else if(one!=0)\\n                nums.push_back(1),one--;\\n            else \\n                nums.push_back(2),two--;\\n        }\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1906342,
                "title": "cpp-100-faster",
                "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n    \\n        int low=0;\\n        int mid=0;\\n        int high=n-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else if(nums[mid]==2)\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n    \\n        int low=0;\\n        int mid=0;\\n        int high=n-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1790665,
                "title": "java-100-o-n-solution-3-pointers",
                "content": "//Basically keep putting 2s in the end and 0s in the first position and fixing their positions, then moving forward.\\n//Quite difficult to come up with on the spot, in my opinion, unless you have seen the implementation before. But geniuses do exist. Good luck!\\n\\n//Time complexity : O(N), since it\\'s one pass along the array of length N.\\n//Space complexity : O(1), since it\\'s a constant space solution.\\n\\n//Visualization: (p0 is low & p2 is high)\\n___________________________________________________________________________________________________________________________________\\n![image](https://assets.leetcode.com/users/images/38eeb90d-75d8-4bc7-baa1-2ed5d0ac2805_1645507859.439233.png)\\n![image](https://assets.leetcode.com/users/images/c3c645a2-911c-4cc5-bb57-aa4f81c90e41_1645508098.4051604.png)\\n![image](https://assets.leetcode.com/users/images/4e7e70f2-62d1-4edf-8fc7-17a3000b35a2_1645508365.6535902.png)\\n___________________________________________________________________________________________________________________________________\\n\\n\\n\\n\\n\\nclass Solution {\\n    \\n    public void sortColors(int[] nums) \\n    {\\n        int low=0, high=nums.length-1, cur=0;\\n        while(cur<=high)\\n        {\\n            if(nums[cur]==2)\\n            {\\n                swap(nums,cur,high);\\n                high--;\\n            }\\n            else if(nums[cur]==0)\\n            {\\n                swap(nums,cur,low);\\n                cur++;\\n                low++;\\n            }\\n            else if(nums[cur]==1)\\n                cur++;\\n        }        \\n    }\\n\\n    private void swap(int[] nums, int i, int j) {\\n        int temp = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = temp;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    \\n    public void sortColors(int[] nums) \\n    {\\n        int low=0, high=nums.length-1, cur=0;\\n        while(cur<=high)\\n        {\\n            if(nums[cur]==2)\\n            {\\n                swap(nums,cur,high);\\n                high--;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1722783,
                "title": "java-intuitive-and-easy-to-understand-one-pass",
                "content": "The idea is to maintain count of zeros, ones and twos seen so far while iterating through an array and then handling special cases of these counts for the current element in the iteration.\\n\\nNOTE: If you found this post helpful then please do upvote! \\n\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n\\t\\t// zeros , ones, twos maintains the count of 0s, 1s and 2s seen so far\\n        int zeros=0,ones=0,twos=0,n=nums.length;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){\\n                nums[zeros++]=0;\\n\\t\\t\\t\\t//no ones seen so far - only 0s and 2s are present - 00..22..\\n                if(ones==0 && twos!=0){\\n                    nums[i]=2;\\n                }\\n\\t\\t\\t\\t//no twos seen so far - only 0s and 1s are present - 00..111..\\n                else if(ones!=0 && twos==0){\\n                       nums[i]=1; \\n                }\\n\\t\\t\\t\\t// 0s , 1s, 2s are present - 00..111..22..\\n                else if(ones!=0 && twos!=0){\\n                    nums[zeros+ones-1]=1;\\n                    nums[i]=2;\\n                }\\n            }\\n            else if(nums[i]==1){\\n                ones++;\\n\\t\\t\\t\\t//no twos seen so far - only 0s and 1s are present - 00..111..\\n                if(twos==0){\\n                   nums[i]=1; \\n                }\\n\\t\\t\\t\\t// 0s , 1s, 2s are present - 00..111..22..\\n                else{\\n                    nums[zeros+ones-1]=1;\\n                    nums[i]=2;\\n                }\\n            }\\n            else{\\n                twos++;\\n            }    \\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n\\t\\t// zeros , ones, twos maintains the count of 0s, 1s and 2s seen so far\\n        int zeros=0,ones=0,twos=0,n=nums.length;\\n        for(int i=0;i<n;i++){\\n            if(nums[i]==0){\\n                nums[zeros++]=0;\\n\\t\\t\\t\\t//no ones seen so far - only 0s and 2s are present - 00..22..\\n                if(ones==0 && twos!=0){\\n                    nums[i]=2;\\n                }\\n\\t\\t\\t\\t//no twos seen so far - only 0s and 1s are present - 00..111..\\n                else if(ones!=0 && twos==0){\\n                       nums[i]=1; \\n                }\\n\\t\\t\\t\\t// 0s , 1s, 2s are present - 00..111..22..\\n                else if(ones!=0 && twos!=0){\\n                    nums[zeros+ones-1]=1;\\n                    nums[i]=2;\\n                }\\n            }\\n            else if(nums[i]==1){\\n                ones++;\\n\\t\\t\\t\\t//no twos seen so far - only 0s and 1s are present - 00..111..\\n                if(twos==0){\\n                   nums[i]=1; \\n                }\\n\\t\\t\\t\\t// 0s , 1s, 2s are present - 00..111..22..\\n                else{\\n                    nums[zeros+ones-1]=1;\\n                    nums[i]=2;\\n                }\\n            }\\n            else{\\n                twos++;\\n            }    \\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1365429,
                "title": "simple-o-1-space-and-o-n-time-complexity-javascript",
                "content": "```/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar sortColors = function(nums) {\\n    let low= 0, high= nums.length- 1, mid= 0, temp= 0;\\n    \\n    while(mid <= high) {\\n        if(nums[mid] === 0) {\\n            // swap mid and low pointers values\\n            temp= nums[low];\\n            nums[low] = nums[mid];\\n            nums[mid]= temp;\\n            \\n            low++;\\n            mid++;\\n        } else if(nums[mid] === 2) {\\n            // swap mid and high pointers values\\n            temp= nums[high];\\n            nums[high]= nums[mid];\\n            nums[mid]= temp;\\n            \\n            high--;\\n        } else {\\n            mid++\\n        }\\n    }\\n    \\n    return nums;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar sortColors = function(nums) {\\n    let low= 0, high= nums.length- 1, mid= 0, temp= 0;\\n    \\n    while(mid <= high) {\\n        if(nums[mid] === 0) {\\n            // swap mid and low pointers values\\n            temp= nums[low];\\n            nums[low] = nums[mid];\\n            nums[mid]= temp;\\n            \\n            low++;\\n            mid++;\\n        } else if(nums[mid] === 2) {\\n            // swap mid and high pointers values\\n            temp= nums[high];\\n            nums[high]= nums[mid];\\n            nums[mid]= temp;\\n            \\n            high--;\\n        } else {\\n            mid++\\n        }\\n    }\\n    \\n    return nums;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1013892,
                "title": "kotlin-minimalistic-and-beautiful",
                "content": "```\\nclass Solution {\\n    fun sortColors(nums: IntArray): Unit {\\n        val count = IntArray(3)\\n        nums.forEach { count[it]++ }\\n        var k = 0\\n        count.forEachIndexed { i, n ->\\n            repeat(n) { nums[k++] = i }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun sortColors(nums: IntArray): Unit {\\n        val count = IntArray(3)\\n        nums.forEach { count[it]++ }\\n        var k = 0\\n        count.forEachIndexed { i, n ->\\n            repeat(n) { nums[k++] = i }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 971167,
                "title": "single-pass-o-n-time-o-1-space-python3",
                "content": "```\\nclass Solution:\\n    def sortColors(self, a: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        j = 0\\n        n = len(a)\\n        k = n-1\\n        while(i<=k):\\n            if a[i]==0:\\n                a[i],a[j] = a[j],a[i]\\n                j+=1\\n            if a[i]==2:\\n                a[i],a[k] = a[k],a[i]\\n                k-=1\\n                i-=1\\n            i+=1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sortColors(self, a: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        i = 0\\n        j = 0\\n        n = len(a)\\n        k = n-1\\n        while(i<=k):\\n            if a[i]==0:\\n                a[i],a[j] = a[j],a[i]\\n                j+=1\\n            if a[i]==2:\\n                a[i],a[k] = a[k],a[i]\\n                k-=1\\n                i-=1\\n            i+=1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 914676,
                "title": "easiest-1-pass-2-pointers-approach-faster-than-100",
                "content": "```\\n\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, high = nums.length-1;\\n        for(int i=0; i<=high;){\\n            if(nums[i]==0){\\n                swap(nums, i, low);\\n                i++;\\n                low++;\\n            }\\n            else if(nums[i] == 1){\\n                i++;\\n            }\\n            else{\\n                swap(nums, i, high); // this is for nums[i] == 2\\n                 high--;\\n            }\\n        }\\n    }\\n    \\n    private void swap(int[] nums, int i, int j){\\n        int store = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = store;\\n    }\\n}\\n\\n```\\n\\nTime Complexity : O(N)\\nSpace Complexity : O(1)\\n\\nIf you like this solution give upvote :)",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, high = nums.length-1;\\n        for(int i=0; i<=high;){\\n            if(nums[i]==0){\\n                swap(nums, i, low);\\n                i++;\\n                low++;\\n            }\\n            else if(nums[i] == 1){\\n                i++;\\n            }\\n            else{\\n                swap(nums, i, high); // this is for nums[i] == 2\\n                 high--;\\n            }\\n        }\\n    }\\n    \\n    private void swap(int[] nums, int i, int j){\\n        int store = nums[i];\\n        nums[i] = nums[j];\\n        nums[j] = store;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 892170,
                "title": "java-one-pass-and-constant-space-with-picture-and-explanation",
                "content": "# Pointer Explanation\\n* Pointer i (red): everything before it needs to be a 0; aka beginning of 1\\'s\\n* Pointer j (blue): needs to always point to a 1 (the \"iterating\" pointer)\\n* Pointer k (green): everything after it needs to be a 2; aka end of 1\\'s\\n\\n![image](https://assets.leetcode.com/users/images/0459ad7e-937c-4f67-b225-c2de72c6e884_1602561016.9415524.png)\\n\\n\\n\\n\\n# Running through an example\\n![image](https://assets.leetcode.com/users/images/a74c4db2-d5e7-46f3-a756-da5c770cdf35_1602561153.9220176.png)\\n\\n\\n# Code\\n```\\npublic void sortColors(int[] nums) {\\n    int i = 0, j = 0, k = nums.length - 1;\\n    while (j <= k) {    \\n        if (nums[j] == 0)           swap(i++, j++, nums);  \\n        else if (nums[j] == 1)      j++;\\n        else if (nums[j] == 2)      swap(j, k--, nums);\\n    }\\n}",
                "solutionTags": [],
                "code": "# Pointer Explanation\\n* Pointer i (red): everything before it needs to be a 0; aka beginning of 1\\'s\\n* Pointer j (blue): needs to always point to a 1 (the \"iterating\" pointer)\\n* Pointer k (green): everything after it needs to be a 2; aka end of 1\\'s\\n\\n![image](https://assets.leetcode.com/users/images/0459ad7e-937c-4f67-b225-c2de72c6e884_1602561016.9415524.png)\\n\\n\\n\\n\\n# Running through an example\\n![image](https://assets.leetcode.com/users/images/a74c4db2-d5e7-46f3-a756-da5c770cdf35_1602561153.9220176.png)\\n\\n\\n# Code\\n```\\npublic void sortColors(int[] nums) {\\n    int i = 0, j = 0, k = nums.length - 1;\\n    while (j <= k) {    \\n        if (nums[j] == 0)           swap(i++, j++, nums);  \\n        else if (nums[j] == 1)      j++;\\n        else if (nums[j] == 2)      swap(j, k--, nums);\\n    }\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 849331,
                "title": "rust-one-pass",
                "content": "```rust\\nimpl Solution {\\n    pub fn sort_colors(nums: &mut Vec<i32>) {\\n        /* \\n        The idea is iterating through to push 0s and 2s to sides\\n        Indices i0 and i2 mark the boundary so that\\n            0s over [0, i0)\\n            1s over [i0, i2)\\n            2s over [i2, len)\\n        */\\n        let (mut i, mut i0, mut i2) = (0, 0, nums.len());\\n        \\n        while i < i2 {\\n            match nums[i] {\\n                0 => { nums.swap(i, i0); i0 += 1; i += 1; },\\n                2 => { i2 -= 1; nums.swap(i, i2); },\\n                _ => { i += 1 },\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn sort_colors(nums: &mut Vec<i32>) {\\n        /* \\n        The idea is iterating through to push 0s and 2s to sides\\n        Indices i0 and i2 mark the boundary so that\\n            0s over [0, i0)\\n            1s over [i0, i2)\\n            2s over [i2, len)\\n        */\\n        let (mut i, mut i0, mut i2) = (0, 0, nums.len());\\n        \\n        while i < i2 {\\n            match nums[i] {\\n                0 => { nums.swap(i, i0); i0 += 1; i += 1; },\\n                2 => { i2 -= 1; nums.swap(i, i2); },\\n                _ => { i += 1 },\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 499396,
                "title": "c-6-approaches-to-solve-the-dutch-national-flag-problem",
                "content": "This problem can be used to optimize the naive quicksort implementation (group elements into smaller ones, equal ones, larger ones). Smaller ones correspond to 0\\'s, equal ones correspond to 1\\'s, larger ones correspond to 2\\'s.\\n\\nThere are several approaches (different levels of optimization) to solve this problem as shown below: \\n\\n\\n**********************************************************************\\n\\nApproach #1\\n\\ntrivial \\n\\n`O(n)` time, `O(n)` space\\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        vector<int> smaller, equal, larger;\\n        for(auto el: nums){\\n            if(el == 0) smaller.push_back(el);\\n            else if(el == 1) equal.push_back(el);\\n            else larger.push_back(el);\\n        }\\n        nums.clear();\\n        for(auto el: smaller) nums.push_back(el);\\n        for(auto el: equal) nums.push_back(el);\\n        for(auto el: larger) nums.push_back(el);\\n    }\\n```\\n\\n**********************************************************************\\n\\nApproach #2\\n\\nCounting sort (in fact this is equivalent to the above one)\\n\\n`O(n)` time, `O(1)` space\\n\\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        int smaller = 0, equal = 0, larger = 0;\\n        for(auto el: nums){\\n            if(el == 0) smaller++;\\n            else if(el == 1) equal++;\\n            else larger++;\\n        }\\n        nums.clear();\\n        for(int i = 0; i < smaller; i++) nums.push_back(0);\\n        for(int i = 0; i < equal; i++) nums.push_back(1);\\n        for(int i = 0; i < larger; i++) nums.push_back(2);\\n    }\\n```\\n\\n**********************************************************************\\n\\nApproach #3\\n\\nComparison sort (quick sort has been chosen for the implementation)\\n\\n`O(n log(n) )` time, `O( log(n) )` best-case space complexity, `O(n)` average-case space complexity (function call stack)\\n\\n```c++\\n\\tvoid quickSort(vector<int>& nums, int l, int r){\\n        if(l >= r) return;\\n        int i = l;\\n        for(int j = l; j < r; j++)\\n            if(nums[j] <= nums[r]) \\n                swap(nums[i++], nums[j]);\\n        swap(nums[i], nums[r]);\\n        quickSort(nums, l, i - 1);\\n        quickSort(nums, i + 1, r);\\n    }\\n    \\n    void sortColors(vector<int>& nums) {\\n        quickSort(nums, 0, nums.size() - 1);\\n    }\\n```\\n\\n**********************************************************************\\n\\nApproach #4\\n\\nTwo-pass `O(n^2)` time, `O(1)` space\\n\\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        for(int i = 0; i < nums.size(); i++)\\n            for(int j = i + 1; j < nums.size(); j++)\\n                if(nums[j] == 0){\\n                    swap(nums[i], nums[j]);\\n                    break;\\n                }\\n        for(int i = nums.size() - 1; i >= 0; i--)\\n            for(int j = i - 1; j >= 0; j--)\\n                if(nums[j] == 2){\\n                    swap(nums[i], nums[j]);\\n                    break;\\n                }\\n    }\\n```\\n\\n*****************************************************************\\n\\nApproach #5\\n\\nTwo-pass `O(n)` time, `O(1)` space\\n\\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        int i = 0;\\n        for(int j = 0; j < nums.size(); j++)\\n            if(nums[j] == 0)\\n                swap(nums[i++], nums[j]);\\n        i = nums.size() - 1;\\n        for(int j = nums.size() - 1; j >= 0; j--)\\n            if(nums[j] == 2)\\n                swap(nums[i--], nums[j]);\\n    }\\n```\\n\\n*****************************************************************\\n\\nApproach #6\\n\\nOne-pass `O(n)` time, `O(1)` space\\n\\nBy assuming the following: \\n\\n* `[0 : smaller - 1]` smaller part\\n* `[smaller : equal - 1]` equal part\\n* `[equal : larger - 1]` unclassified part\\n* `[larger : nums.size() - 1]` larger part\\n\\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        int smaller = 0, equal = 0, larger = nums.size();\\n        while(equal < larger){\\n            if(nums[equal] == 0) swap(nums[smaller++], nums[equal++]);\\n            else if(nums[equal] == 1) equal++;\\n            else swap(nums[--larger], nums[equal]);\\n        }\\n    }\\n```\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        vector<int> smaller, equal, larger;\\n        for(auto el: nums){\\n            if(el == 0) smaller.push_back(el);\\n            else if(el == 1) equal.push_back(el);\\n            else larger.push_back(el);\\n        }\\n        nums.clear();\\n        for(auto el: smaller) nums.push_back(el);\\n        for(auto el: equal) nums.push_back(el);\\n        for(auto el: larger) nums.push_back(el);\\n    }\\n```\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        int smaller = 0, equal = 0, larger = 0;\\n        for(auto el: nums){\\n            if(el == 0) smaller++;\\n            else if(el == 1) equal++;\\n            else larger++;\\n        }\\n        nums.clear();\\n        for(int i = 0; i < smaller; i++) nums.push_back(0);\\n        for(int i = 0; i < equal; i++) nums.push_back(1);\\n        for(int i = 0; i < larger; i++) nums.push_back(2);\\n    }\\n```\n```c++\\n\\tvoid quickSort(vector<int>& nums, int l, int r){\\n        if(l >= r) return;\\n        int i = l;\\n        for(int j = l; j < r; j++)\\n            if(nums[j] <= nums[r]) \\n                swap(nums[i++], nums[j]);\\n        swap(nums[i], nums[r]);\\n        quickSort(nums, l, i - 1);\\n        quickSort(nums, i + 1, r);\\n    }\\n    \\n    void sortColors(vector<int>& nums) {\\n        quickSort(nums, 0, nums.size() - 1);\\n    }\\n```\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        for(int i = 0; i < nums.size(); i++)\\n            for(int j = i + 1; j < nums.size(); j++)\\n                if(nums[j] == 0){\\n                    swap(nums[i], nums[j]);\\n                    break;\\n                }\\n        for(int i = nums.size() - 1; i >= 0; i--)\\n            for(int j = i - 1; j >= 0; j--)\\n                if(nums[j] == 2){\\n                    swap(nums[i], nums[j]);\\n                    break;\\n                }\\n    }\\n```\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        int i = 0;\\n        for(int j = 0; j < nums.size(); j++)\\n            if(nums[j] == 0)\\n                swap(nums[i++], nums[j]);\\n        i = nums.size() - 1;\\n        for(int j = nums.size() - 1; j >= 0; j--)\\n            if(nums[j] == 2)\\n                swap(nums[i--], nums[j]);\\n    }\\n```\n```c++\\n\\tvoid sortColors(vector<int>& nums) {\\n        int smaller = 0, equal = 0, larger = nums.size();\\n        while(equal < larger){\\n            if(nums[equal] == 0) swap(nums[smaller++], nums[equal++]);\\n            else if(nums[equal] == 1) equal++;\\n            else swap(nums[--larger], nums[equal]);\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 494027,
                "title": "java-easiest-swapping-solution-with-explanation-must-read",
                "content": "So the idea is very simple here. We maintain two pointers, I call them reds and blues. We use them to move all the red colors or 0 to the left and all the blue colors or 2 to the right. We achieve this by swapping elements within the array in place. \\n\\n```\\npublic void sortColors(int[] nums) {\\n\\tint reds = 0, blues = nums.length-1;\\n\\tfor(int i = 0; i <= blues;) {\\n\\t\\tif(nums[i] == 0) swap(nums, i++, reds++);\\n\\t\\telse if(nums[i] == 2) swap(nums, i, blues--);   // see below why i is not incremented\\n\\t\\telse i++;\\n\\t}\\n}\\n\\npublic void swap(int nums[], int i, int j) {\\n\\tint temp = nums[i];\\n\\tnums[i] = nums[j];\\n\\tnums[j] = temp;\\n}\\n```\\n\\n**NOTE** We cannot increment i after each swap, because the new color 2 is swapped with could be 0 as in the case of [1,2,0] -> [1,0,2] which hence would require another swap operation to get the correct result.",
                "solutionTags": [],
                "code": "```\\npublic void sortColors(int[] nums) {\\n\\tint reds = 0, blues = nums.length-1;\\n\\tfor(int i = 0; i <= blues;) {\\n\\t\\tif(nums[i] == 0) swap(nums, i++, reds++);\\n\\t\\telse if(nums[i] == 2) swap(nums, i, blues--);   // see below why i is not incremented\\n\\t\\telse i++;\\n\\t}\\n}\\n\\npublic void swap(int nums[], int i, int j) {\\n\\tint temp = nums[i];\\n\\tnums[i] = nums[j];\\n\\tnums[j] = temp;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 329200,
                "title": "shortest-one-pass-solution-o-n-time-o-1-space",
                "content": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int p0 = 0, p1 = 0, p2 = 0;\\n        for (int num : nums) {\\n            nums[p2++] = 2;\\n            if (num < 2) nums[p1++] = 1;\\n            if (num < 1) nums[p0++] = 0;\\n        }\\n    }\\n}\\n```\\n\\nQuick eplaination:\\n* We always increase pointer p2 because no matter what value we\\'re facing, p2 will go up. **Reason:** if `num == 2` when we must add a new 2, which means p2 goes up. Otherwise, we must add a `0` or a `1` which push p2 to the right, meaning p2 goes up.\\n* If value we\\'re facing is 0 or 1 (<2), p1 will go up. So increase it.\\n* Only increase pointer p0 when we see a 0.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int p0 = 0, p1 = 0, p2 = 0;\\n        for (int num : nums) {\\n            nums[p2++] = 2;\\n            if (num < 2) nums[p1++] = 1;\\n            if (num < 1) nums[p0++] = 0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 314052,
                "title": "swift-99-beat-linear-o-n-speed-make-mistakes-when-you-try-this",
                "content": "Mistakes are how U learn. Duh.\\n\\n```\\nclass Solution {\\n    func sortColors(_ nums: inout [Int]) {\\n        var first = 0\\n        var mid = 0\\n        var last = nums.count - 1\\n        var i = 0\\n        while mid <= last {\\n            if nums[mid] < 1 {\\n                nums.swapAt(first, mid)\\n                first += 1\\n                mid += 1\\n            } else if nums[mid] > 1 {\\n                nums.swapAt(last, mid)\\n                last -= 1\\n                \\n            } else {\\n                mid += 1\\n            }\\n            i += 1\\n        }\\n    }\\n}\\n```\\n\\nThe more you fail the bigger you win. Kaboom, baby. This is a great trick.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func sortColors(_ nums: inout [Int]) {\\n        var first = 0\\n        var mid = 0\\n        var last = nums.count - 1\\n        var i = 0\\n        while mid <= last {\\n            if nums[mid] < 1 {\\n                nums.swapAt(first, mid)\\n                first += 1\\n                mid += 1\\n            } else if nums[mid] > 1 {\\n                nums.swapAt(last, mid)\\n                last -= 1\\n                \\n            } else {\\n                mid += 1\\n            }\\n            i += 1\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 170277,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0;\\n        int high = nums.length - 1;\\n        int i = 0;\\n        while (i <= high){\\n            if (nums[i] == 0){\\n                swap(low, i, nums);\\n                low++;\\n                i++;  // first I thought it could be omitted, but consider this situation,[0,0,2,2], i will not increase at all\\n            }         \\n            else if (nums[i] == 2){\\n                swap(high, i, nums);\\n                high--;       // no i++, cause we do not know what is replaced in index i, maybe 0, 1 or 2\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n    }\\n    private void swap(int a, int b, int[] nums){  // you have to pass nums with index a and index b, you cannot just pass two \\n        int temp = nums[a];                       // integers\\n        nums[a] = nums[b];\\n        nums[b] = temp;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0;\\n        int high = nums.length - 1;\\n        int i = 0;\\n        while (i <= high){\\n            if (nums[i] == 0){\\n                swap(low, i, nums);\\n                low++;\\n                i++;  // first I thought it could be omitted, but consider this situation,[0,0,2,2], i will not increase at all\\n            }         \\n            else if (nums[i] == 2){\\n                swap(high, i, nums);\\n                high--;       // no i++, cause we do not know what is replaced in index i, maybe 0, 1 or 2\\n            }\\n            else{\\n                i++;\\n            }\\n        }\\n    }\\n    private void swap(int a, int b, int[] nums){  // you have to pass nums with index a and index b, you cannot just pass two \\n        int temp = nums[a];                       // integers\\n        nums[a] = nums[b];\\n        nums[b] = temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 26557,
                "title": "c-counting-sort",
                "content": "seems like many solutions are using swapping and calling that 1 pass, but if you are accessing 2 elements on each iteration that is more like 2 pass, no?  In any case counting sort is 2 pass and logically very simple.  For this problem it is also O(1) space as we know we only have 3 values to keep counts for.\\n\\n```\\n\\n    public void SortColors(int[] nums) \\n    {\\n        int[] counts = new int[3];\\n        foreach (int x in nums)\\n        {\\n            counts[x]++;\\n        }\\n        \\n        int index = 0;\\n        for (int x = 0; x <= 2; x++)\\n        {\\n            while (counts[x]-- > 0)\\n            {\\n                nums[index++] = x;\\n            }\\n        }\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\n    public void SortColors(int[] nums) \\n    {\\n        int[] counts = new int[3];\\n        foreach (int x in nums)\\n        {\\n            counts[x]++;\\n        }\\n        \\n        int index = 0;\\n        for (int x = 0; x <= 2; x++)\\n        {\\n            while (counts[x]-- > 0)\\n            {\\n                nums[index++] = x;\\n            }\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 26675,
                "title": "concise-1-pass-java-solution",
                "content": "The basic idea is using two pointers: left boundary, right boundary. Then \\n\\n    1) put 0 to the left of the left boundary;    \\n    2) put 2 to the right of the right boundary.\\n\\nAs the following:\\n\\n\\n     left boundary|         |right boundary\\n            00000 | 1111111 | 22222222\\n\\n**JAVA Code: Time complexity O(n)**\\n\\nAs each element is only checked once, so the time complexity should be O(n).\\n\\n    public void sortColors(int[] nums) { \\n        if (nums == null || nums.length == 0) return;\\n        int left = 0, right = nums.length - 1;// Left, right boundary\\n        for (int i = 0; i <= right; i++) {\\n        \\tif (nums[i] == 0 && i != left)// Only swap if i != left\\n        \\t\\tswap(nums, i--, left++);\\n        \\telse if (nums[i] == 2 && i != right)// Only swap if i != right \\n        \\t\\tswap(nums, i--, right--);        \\t\\n        }        \\n    }\\n    void swap(int[] nums, int i, int j) {\\n    \\tint tmp = nums[i];\\n    \\tnums[i] = nums[j];\\n    \\tnums[j] = tmp;\\n    }",
                "solutionTags": [],
                "code": "The basic idea is using two pointers: left boundary, right boundary. Then \\n\\n    1) put 0 to the left of the left boundary;    \\n    2) put 2 to the right of the right boundary.\\n\\nAs the following:\\n\\n\\n     left boundary|         |right boundary\\n            00000 | 1111111 | 22222222\\n\\n**JAVA Code: Time complexity O(n)**\\n\\nAs each element is only checked once, so the time complexity should be O(n).\\n\\n    public void sortColors(int[] nums) { \\n        if (nums == null || nums.length == 0) return;\\n        int left = 0, right = nums.length - 1;// Left, right boundary\\n        for (int i = 0; i <= right; i++) {\\n        \\tif (nums[i] == 0 && i != left)// Only swap if i != left\\n        \\t\\tswap(nums, i--, left++);\\n        \\telse if (nums[i] == 2 && i != right)// Only swap if i != right \\n        \\t\\tswap(nums, i--, right--);        \\t\\n        }        \\n    }\\n    void swap(int[] nums, int i, int j) {\\n    \\tint tmp = nums[i];\\n    \\tnums[i] = nums[j];\\n    \\tnums[j] = tmp;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 26692,
                "title": "0ms-and-one-pass-solution-with-c",
                "content": "    void sortColors(int* nums, int numsSize)\\n    {\\n\\t int i = 0;\\n\\tint red = 0;\\n\\tint blue = numsSize - 1;\\n\\twhile (i <= blue)\\n\\t{\\n\\t\\tif (nums[i] == 0)\\n\\t\\t{\\n\\t\\t\\tnums[i] = nums[red];\\n\\t\\t\\tnums[red] = 0;\\n\\t\\t\\tif (i == red)\\n\\t\\t\\t\\ti++;\\n\\t\\t\\tred++;\\n\\t\\t}\\n\\t\\telse if (nums[i] == 2)\\n\\t\\t{\\n\\t\\t\\tnums[i] = nums[blue];\\n\\t\\t\\tnums[blue] = 2;\\n\\t\\t\\tblue--;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t}\\n    }",
                "solutionTags": [],
                "code": "    void sortColors(int* nums, int numsSize)\\n    {\\n\\t int i = 0;\\n\\tint red = 0;\\n\\tint blue = numsSize - 1;\\n\\twhile (i <= blue)\\n\\t{\\n\\t\\tif (nums[i] == 0)\\n\\t\\t{\\n\\t\\t\\tnums[i] = nums[red];\\n\\t\\t\\tnums[red] = 0;\\n\\t\\t\\tif (i == red)\\n\\t\\t\\t\\ti++;\\n\\t\\t\\tred++;\\n\\t\\t}\\n\\t\\telse if (nums[i] == 2)\\n\\t\\t{\\n\\t\\t\\tnums[i] = nums[blue];\\n\\t\\t\\tnums[blue] = 2;\\n\\t\\t\\tblue--;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t}\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 26731,
                "title": "share-my-one-loop-c-solution",
                "content": "    class Solution {\\n    public:\\n        void sortColors(vector<int>& nums) {\\n            int s[3] = {0,0,0};\\n            for (int i = 0; i < nums.size(); i++) {\\n                if (nums[i] == 0) {\\n                    nums[s[2]++] = 2;\\n                    nums[s[1]++] = 1;\\n                    nums[s[0]++] = 0;\\n                } else if (nums[i] == 1) {\\n                    nums[s[2]++] = 2;\\n                    nums[s[1]++] = 1;\\n                } else {\\n                    nums[s[2]++] = 2;\\n                }\\n            }\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        void sortColors(vector<int>& nums) {\\n            int s[3] = {0,0,0}",
                "codeTag": "Java"
            },
            {
                "id": 26767,
                "title": "python-one-pass-solution",
                "content": "The problem is called dutch national flag problem.\\n\\nGist below:\\n\\na) Traverse from left to right\\nb) Maintain the most recent position of 0 and the position of 2.\\nc) When 0 is encountered move to the left and for 2 move to right. (increment/decrement the pointers accordingly)\\nd) When 1 is encountered do nothing.\\n\\nCode below:\\n\\n    def sortColors(self, A):\\n    \\n        leftindex = zeropos = 0\\n        right_index = len(A) - 1\\n    \\n        while left_index <= right_index:\\n            if A[left_index] == 0:\\n               A[left_index], A[zero_pos] = A[zero_pos], A[left_index]\\n               left_index += 1\\n               zero_pos += 1\\n            elif A[left_index] == 2:\\n               A[right_index], A[left_index] = A[left_index], A[right_index]\\n               right_index -= 1\\n            else:\\n               left_index += 1",
                "solutionTags": [],
                "code": "The problem is called dutch national flag problem.\\n\\nGist below:\\n\\na) Traverse from left to right\\nb) Maintain the most recent position of 0 and the position of 2.\\nc) When 0 is encountered move to the left and for 2 move to right. (increment/decrement the pointers accordingly)\\nd) When 1 is encountered do nothing.\\n\\nCode below:\\n\\n    def sortColors(self, A):\\n    \\n        leftindex = zeropos = 0\\n        right_index = len(A) - 1\\n    \\n        while left_index <= right_index:\\n            if A[left_index] == 0:\\n               A[left_index], A[zero_pos] = A[zero_pos], A[left_index]\\n               left_index += 1\\n               zero_pos += 1\\n            elif A[left_index] == 2:\\n               A[right_index], A[left_index] = A[left_index], A[right_index]\\n               right_index -= 1\\n            else:\\n               left_index += 1",
                "codeTag": "Python3"
            },
            {
                "id": 3853294,
                "title": "best-optimised-solution-in-c-using-dutch-national-flag-algorithm",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires us to sort an array of integers representing colors in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We are given that the colors red, white, and blue are represented by the integers 0, 1, and 2 respectively.\\n\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nDutch National Flag algorithm\\nThe Dutch National Flag algorithm, also known as 3-way partitioning, is an algorithm for sorting an array containing three distinct values. The algorithm was designed to solve the problem of sorting an array containing only 0s, 1s, and 2s, which is similar to the problem in the given question.\\n\\nThe algorithm works by maintaining three pointers: low, mid, and high. The low pointer points to the beginning of the array, the high pointer points to the end of the array, and the mid pointer starts at the beginning of the array and moves through it.\\n\\nThe idea behind the algorithm is to keep all the 0s before the low pointer, all the 2s after the high pointer, and all the 1s between the low and high pointers. The algorithm moves the mid pointer through the array, comparing the value at each position with 1. If the value is 0, the element is swapped with the element at the low pointer, and the low and mid pointers are incremented. If the value is 2, the element is swapped with the element at the high pointer, and the high pointer is decremented. If the value is 1, the mid pointer is simply incremented.\\n\\nThe algorithm terminates when the mid pointer crosses the high pointer, indicating that all the elements have been processed and the array is sorted.\\n\\nThe Dutch National Flag algorithm is called one-pass because it sorts the array in a single pass through the elements. The time complexity of the algorithm is O(n), where n is the size of the array.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n//Deutsch National Flag algorithm vaparlay\\n//TC: O(N).     SC:O(1)\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n//Deutsch National Flag algorithm vaparlay\\n//TC: O(N).     SC:O(1)\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3793790,
                "title": "solution-for-sort-colors-leetcode-problem-75",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given Solution class provides a method sortColors that sorts an array containing 0s, 1s, and 2s. The problem is commonly known as the \"Dutch National Flag\" problem. The goal is to sort the array in-place such that all 0s come before all 1s, and all 1s come before all 2s.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe solution uses the Dutch National Flag algorithm, which is an efficient method to sort an array with three distinct values (0, 1, and 2). The algorithm uses three pointers: start, mid, and end. The start pointer points to the position where the next 0 should be placed, the mid pointer traverses the array, and the end pointer points to the position where the next 2 should be placed. The algorithm follows these steps:\\n\\nInitialize start, mid, and end pointers to the beginning, the beginning, and the end of the array, respectively.\\nWhile the mid pointer is less than or equal to the end pointer:\\nIf the element at mid is 0, swap the elements at start and mid, increment both start and mid pointers.\\nIf the element at mid is 1, just increment the mid pointer.\\nIf the element at mid is 2, swap the elements at mid and end, decrement the end pointer.\\nThe above steps ensure that all 0s move to the left side of the array, all 2s move to the right side of the array, and all 1s are automatically placed in the middle.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the sortColors method is O(n), where n is the number of elements in the array. The algorithm traverses the array once, and each element is visited at most twice during the swapping operations.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the sortColors method is O(1) because it sorts the array in-place without using any additional data structures. The sorting is done by swapping elements within the input array, and the number of extra variables used for the algorithm remains constant, irrespective of the size of the input array.\\n\\n# Code\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) \\n    {\\n        int start = 0;\\n        int mid = 0;\\n        int end = nums.length - 1;\\n\\n        while (mid <= end) {\\n\\n            switch (nums[mid]) {\\n            case 0:\\n                // Swap with start index\\n                swap(nums, start, mid);\\n                mid++;\\n                start++;\\n                break;\\n\\n            case 1:\\n                mid++;\\n                break;\\n\\n            case 2:\\n                // Swap with end index\\n                swap(nums, mid, end);\\n                end--;\\n                break;\\n      }\\n    }\\n    }\\n\\n    private void swap(int[] arr, int pos1, int pos2) {\\n    int temp = arr[pos1];\\n    arr[pos1] = arr[pos2];\\n    arr[pos2] = temp;\\n    }\\n        \\n}\\n```\\n![upvote.jpeg](https://assets.leetcode.com/users/images/b22c06d6-f77a-4d8c-b277-bd6863c69f7e_1689875839.0660408.jpeg)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) \\n    {\\n        int start = 0;\\n        int mid = 0;\\n        int end = nums.length - 1;\\n\\n        while (mid <= end) {\\n\\n            switch (nums[mid]) {\\n            case 0:\\n                // Swap with start index\\n                swap(nums, start, mid);\\n                mid++;\\n                start++;\\n                break;\\n\\n            case 1:\\n                mid++;\\n                break;\\n\\n            case 2:\\n                // Swap with end index\\n                swap(nums, mid, end);\\n                end--;\\n                break;\\n      }\\n    }\\n    }\\n\\n    private void swap(int[] arr, int pos1, int pos2) {\\n    int temp = arr[pos1];\\n    arr[pos1] = arr[pos2];\\n    arr[pos2] = temp;\\n    }\\n        \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3694023,
                "title": "using-dutch-flag-algorithm-easy-approach",
                "content": "void sortColors(vector<int>& nums) {\\n     int l=0;\\n     int m=0;\\n     int h =nums.size()-1;\\n    while(m<=h){\\n         if(nums[m]==0){\\n           swap(nums[l++],nums[m++]);\\n         }\\n         else if(nums[m]==1){\\n             m++;\\n         }\\n         else{\\n             swap(nums[m],nums[h--]);\\n         }\\n     }\\n         \\n    }\\n\\t\\n# \\t**Please upvote me if you liked the approach",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "void sortColors(vector<int>& nums) {\\n     int l=0;\\n     int m=0;\\n     int h =nums.size()-1;\\n    while(m<=h){\\n         if(nums[m]==0){\\n           swap(nums[l++],nums[m++]);\\n         }\\n         else if(nums[m]==1){\\n             m++;\\n         }\\n         else{\\n             swap(nums[m],nums[h--]);\\n         }\\n     }\\n         \\n    }\\n\\t\\n# \\t**Please upvote me if you liked the approach",
                "codeTag": "Unknown"
            },
            {
                "id": 3652745,
                "title": "java-0ms-100-faster-clean-implementation",
                "content": "# Intuition\\n\\n**DUTCH NATIONAL FLAG ALGORITHM**\\n\\nthere will be 3 pointers \"low\", \"mid\" and \"high\"\\nlow and mid pointing at the begining of the array ,\\nhigh pointing at the end\\nTraverse linearly the \\'mid\\' pointer : \\nfor 0, swap its position with the mid and increament both the mid and low by 1\\nfor 1, continue traversing the mid pointer\\nfor 2, swap its position with high and decrease high by 1\\n\\neverything to the left of low pointer will be 0\\neverything to the right of high pointer will be 2\\neverything between low and mid - 1 will be 1 \\n\\nswitch case is used in case of conditional if because : **A switch statement is significantly faster than an if-else ladder if there are many nested if-else\\'s involved.**\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1;\\n        int temp;\\n        while(mid <= high) {\\n            switch(nums[mid]) {\\n                case 0 : {\\n                    temp = nums[low];\\n                    nums[low] = nums[mid];\\n                    nums[mid] = temp;\\n                    mid ++;\\n                    low ++;\\n                    break;\\n                }\\n                case 1 : {\\n                    mid ++;\\n                    break;\\n                }\\n                case 2 : {\\n                    temp = nums[mid];\\n                    nums[mid] = nums[high];\\n                    nums[high] = temp;\\n                    high --;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers",
                    "Sorting",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int low = 0, mid = 0, high = nums.length - 1;\\n        int temp;\\n        while(mid <= high) {\\n            switch(nums[mid]) {\\n                case 0 : {\\n                    temp = nums[low];\\n                    nums[low] = nums[mid];\\n                    nums[mid] = temp;\\n                    mid ++;\\n                    low ++;\\n                    break;\\n                }\\n                case 1 : {\\n                    mid ++;\\n                    break;\\n                }\\n                case 2 : {\\n                    temp = nums[mid];\\n                    nums[mid] = nums[high];\\n                    nums[high] = temp;\\n                    high --;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3520780,
                "title": "beats-100-using-dutch-national-flag-algorithm-dnf-algo",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        // Dutch national flag approach\\n        int low=0;\\n        int mid=0;\\n        int high=nums.size()-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else if(nums[mid]==2)\\n            {\\n                swap(nums[high],nums[mid]);\\n                \\n                high--;\\n            }\\n        }\\n        \\n    }\\n};\\n\\n\\n<!-- DO UPVOTE IF YOU FIND IT INTERSTING AND HELPFUL,THANKS **Bold**:) -->\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        // Dutch national flag approach\\n        int low=0;\\n        int mid=0;\\n        int high=nums.size()-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else if(nums[mid]==2)\\n            {\\n                swap(nums[high],nums[mid]);\\n                \\n                high--;\\n            }\\n        }\\n        \\n    }\\n};\\n\\n\\n<!-- DO UPVOTE IF YOU FIND IT INTERSTING AND HELPFUL,THANKS **Bold**:) -->\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3423847,
                "title": "cpp-beats-100-constant-space",
                "content": "\\n\\n# Approach\\nThis question is a famous Dutch National Flag alogrithm . The Dutch National Flag algorithm is a sorting algorithm that partitions an array containing elements of three distinct values (for example, 0s, 1s, and 2s) into three parts, in a single traversal of the array. The algorithm is named after the Dutch national flag, which has three horizontal stripes of red, white, and blue.\\n\\nThe algorithm uses three pointers to partition the array into three sections:\\n\\n1. A[0...s-1] contains all elements that are smaller than the middle value (in the example above, the 0s).\\n2. A[s...e] contains all elements that are equal to the middle value (in the example above, the 1s).\\n3. A[e+1...n-1] contains all elements that are larger than the middle value (in the example above, the 2s).\\nInitially, the pointer s points to the beginning of the array, and the pointer e points to the end of the array. A third pointer, i, starts at the beginning of the array and moves forward one element at a time.\\n\\nThe algorithm continues until the i pointer reaches the end of the array. If the element at A[i] is smaller than the middle value, it is swapped with the element at A[s], and both pointers i and s are incremented. If the element at A[i] is larger than the middle value, it is swapped with the element at A[e], and the pointer e is decremented. If the element at A[i] is equal to the middle value, the pointer i is incremented.\\n\\nThis algorithm works because, at any point in time during the while loop, the following invariants hold true:\\n\\n1. All elements before s are smaller than the middle value.\\n2. All elements after e are larger than the middle value.\\n3. All elements between s and i-1 are equal to the middle value.\\n4. All elements between i and e are unprocessed.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the given code is O(N), where N is the number of elements in the input array. This is because the code performs a single pass through the array, swapping at most N elements, which takes linear time.\\n\\n- Space complexity:\\nThe space complexity of the code is O(1), which means that it uses constant extra space regardless of the input size. This is because the code does not use any additional data structures or arrays to store elements. It only uses the three pointers s, mid, and e to partition the input array in-place, which requires only constant space.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int s=0;\\n        int e=nums.size()-1;\\n        int mid=0;\\n         while(mid<=e){\\n           if(nums[mid]==0){\\n               swap(nums[s++],nums[mid++]);\\n           }\\n           else if(nums[mid]==1){\\n               mid++;\\n           }\\n           else{\\n               swap(nums[e--],nums[mid]);\\n           }\\n       }\\n\\n    }\\n};\\n<!-- PLEASE UPVOTE :) -->\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int s=0;\\n        int e=nums.size()-1;\\n        int mid=0;\\n         while(mid<=e){\\n           if(nums[mid]==0){\\n               swap(nums[s++],nums[mid++]);\\n           }\\n           else if(nums[mid]==1){\\n               mid++;\\n           }\\n           else{\\n               swap(nums[e--],nums[mid]);\\n           }\\n       }\\n\\n    }\\n};\\n<!-- PLEASE UPVOTE :) -->\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3334741,
                "title": "dutch-national-flag-algorithm-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nApplying Dutch National flag algorithm\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        //  Dutch National flag algorithm\\n        int low = 0 , mid = 0 , high = nums.size() -1 ;\\n        while( mid <= high   )\\n        {\\n            if( nums[mid] == 1)\\n            {\\n                mid++;\\n                continue;\\n            }\\n            if(nums[mid] == 0 )\\n            {\\n                swap( nums[mid] , nums[low]);\\n                mid++ , low++;\\n                continue;\\n            }\\n            if(nums[mid] == 2)\\n            {\\n                swap( nums[mid] , nums[high]);\\n                high-- ;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        //  Dutch National flag algorithm\\n        int low = 0 , mid = 0 , high = nums.size() -1 ;\\n        while( mid <= high   )\\n        {\\n            if( nums[mid] == 1)\\n            {\\n                mid++;\\n                continue;\\n            }\\n            if(nums[mid] == 0 )\\n            {\\n                swap( nums[mid] , nums[low]);\\n                mid++ , low++;\\n                continue;\\n            }\\n            if(nums[mid] == 2)\\n            {\\n                swap( nums[mid] , nums[high]);\\n                high-- ;\\n            }\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3181681,
                "title": "75-sort-colors-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # Two pointer approach\\n        # Keep track of the position of 0s and 2s and swap the rest of the elements to their correct positions\\n        left = 0\\n        right = len(nums) - 1\\n        current = 0\\n        \\n        while current <= right:\\n            if nums[current] == 0:\\n                nums[current], nums[left] = nums[left], nums[current]\\n                left += 1\\n                current += 1\\n            elif nums[current] == 2:\\n                nums[current], nums[right] = nums[right], nums[current]\\n                right -= 1\\n            else:\\n                current += 1\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # Two pointer approach\\n        # Keep track of the position of 0s and 2s and swap the rest of the elements to their correct positions\\n        left = 0\\n        right = len(nums) - 1\\n        current = 0\\n        \\n        while current <= right:\\n            if nums[current] == 0:\\n                nums[current], nums[left] = nums[left], nums[current]\\n                left += 1\\n                current += 1\\n            elif nums[current] == 2:\\n                nums[current], nums[right] = nums[right], nums[current]\\n                right -= 1\\n            else:\\n                current += 1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085218,
                "title": "c-fast-and-easy-3-pointers",
                "content": "# Intuition\\nIf we bring all 0\\'s to the left side of the array and 2\\'s to the right of the array 1\\'s will automatically get to its correct position. Hence array will be sorted.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int ptr0 = 0, ptr1 = 0, ptr2 = n-1;\\n\\n        while(ptr1<=ptr2){\\n            if(nums[ptr1]==0){\\n                swap(nums[ptr0],nums[ptr1]);\\n                ptr0++,ptr1++;\\n            }\\n            else if(nums[ptr1] == 1){\\n                ptr1++;\\n            }\\n            else{\\n                swap(nums[ptr1],nums[ptr2]);\\n                ptr2--;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int ptr0 = 0, ptr1 = 0, ptr2 = n-1;\\n\\n        while(ptr1<=ptr2){\\n            if(nums[ptr1]==0){\\n                swap(nums[ptr0],nums[ptr1]);\\n                ptr0++,ptr1++;\\n            }\\n            else if(nums[ptr1] == 1){\\n                ptr1++;\\n            }\\n            else{\\n                swap(nums[ptr1],nums[ptr2]);\\n                ptr2--;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3080047,
                "title": "with-n-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==0){\\n                a++;\\n            }\\n            if(nums[i]==1){\\n                b++;\\n            }\\n            if(nums[i]==2){\\n                c++;\\n            }\\n        }\\n        for(int i=0;i<a;i++){\\n            nums[i]=0;\\n        }\\n        for(int i=a;i<a+b;i++){\\n            nums[i]=1;\\n        }\\n        for(int i=a+b;i<a+b+c;i++){\\n            nums[i]=2;\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            System.out.print(nums[i]+\" \");\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==0){\\n                a++;\\n            }\\n            if(nums[i]==1){\\n                b++;\\n            }\\n            if(nums[i]==2){\\n                c++;\\n            }\\n        }\\n        for(int i=0;i<a;i++){\\n            nums[i]=0;\\n        }\\n        for(int i=a;i<a+b;i++){\\n            nums[i]=1;\\n        }\\n        for(int i=a+b;i<a+b+c;i++){\\n            nums[i]=2;\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            System.out.print(nums[i]+\" \");\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2988591,
                "title": "c-best-approach-dutch-national-flag-algo-dnf-sort-easy-explained-line-by-line",
                "content": "The Dutch National Flag Algorithm is a linear-time sorting algorithm for sorting elements that can be classified into three different categories. It is commonly used to sort arrays that consist of only 0s, 1s, and 2s.\\n\\nHere are the steps for implementing the Dutch National Flag Algorithm:\\n\\n1. Initialize three pointers, low, mid, and high, to the beginning, middle, and end of the array.\\n2. Set mid to low.\\n3. While mid is less than or equal to high:\\n    - If the element at mid is 0, swap it with the element at low and increment both low and mid.\\n    - If the element at mid is 1, increment only mid.\\n    - If the element at mid is 2, swap it with the element at high and decrement high.\\n4. The array is now sorted.\\n\\n# Code\\n```\\n//Dutch National Flag Sort Algorithm\\n//for sorting problem with 3 unique values \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0 ; //1st mid value ; \\n        //Before which everthing is low(Blue)\\n        int mid = 0 ; //1st Unknown Value :\\n        //low to mid is mid value about which we dont care to swap ;\\n        //mid to high all unknown values\\n        int high = nums.size()-1 ; //last Unknown Value\\n        //after mid all highs(Red) ;\\n\\n\\n        int blue = 0 ;\\n        int white = 1 ;\\n        int red = 2 ;\\n\\n        while(mid <= high) { // as mid crossed high i.e 1st unknow val crossed last unknown val\\n        //i.e no more unknown value remains\\n\\n            if (nums[mid] == blue) {//here\\n                swap(nums[mid] , nums[low]) ;\\n                low++ ; //as low ke peeche saare blue ;\\n                mid++ ;//val at mid was revealed somove it further to continue being 1st unknown\\n            }\\n            else if (nums[mid] == red) {\\n                swap(nums[mid] , nums[high]) ;\\n                high-- ; //as red ke right mai saar red\\n                //here mid wont be updated cause we have swapped it with unknown val at red\\n                //so mid  still 1st unknown ;\\n            }\\n            else if (nums[mid] == white) {\\n                //we dont care about white , no swap ;\\n                //but to maintain mid as the 1st unknown \\n                mid++ ;\\n            }\\n        }\\n\\n    }\\n};\\n```\\n\\n---\\n\\n**For Professional Connect**\\n[LINKEDIN](https://www.linkedin.com/in/piyushbhawsar/)\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n//Dutch National Flag Sort Algorithm\\n//for sorting problem with 3 unique values \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int low = 0 ; //1st mid value ; \\n        //Before which everthing is low(Blue)\\n        int mid = 0 ; //1st Unknown Value :\\n        //low to mid is mid value about which we dont care to swap ;\\n        //mid to high all unknown values\\n        int high = nums.size()-1 ; //last Unknown Value\\n        //after mid all highs(Red) ;\\n\\n\\n        int blue = 0 ;\\n        int white = 1 ;\\n        int red = 2 ;\\n\\n        while(mid <= high) { // as mid crossed high i.e 1st unknow val crossed last unknown val\\n        //i.e no more unknown value remains\\n\\n            if (nums[mid] == blue) {//here\\n                swap(nums[mid] , nums[low]) ;\\n                low++ ; //as low ke peeche saare blue ;\\n                mid++ ;//val at mid was revealed somove it further to continue being 1st unknown\\n            }\\n            else if (nums[mid] == red) {\\n                swap(nums[mid] , nums[high]) ;\\n                high-- ; //as red ke right mai saar red\\n                //here mid wont be updated cause we have swapped it with unknown val at red\\n                //so mid  still 1st unknown ;\\n            }\\n            else if (nums[mid] == white) {\\n                //we dont care about white , no swap ;\\n                //but to maintain mid as the 1st unknown \\n                mid++ ;\\n            }\\n        }\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2835464,
                "title": "python-easy-solution-o-1-space",
                "content": "\\n\\t  \\n\\t  \\n\\t  def sortColors(self, nums: List[int]) -> None:\\n        zero=nums.count(0)\\n        one=nums.count(1)\\n        two=nums.count(2)\\n        for x in range(len(nums)):\\n            if two:\\n                nums.pop()\\n                nums.insert(0,2)\\n                two-=1\\n            elif one:\\n                nums.pop()\\n                nums.insert(0,1)\\n                one-=1\\n            else:\\n                nums.pop()\\n                nums.insert(0,0)",
                "solutionTags": [
                    "Python",
                    "Array",
                    "Sorting"
                ],
                "code": "\\n\\t  \\n\\t  \\n\\t  def sortColors(self, nums: List[int]) -> None:\\n        zero=nums.count(0)\\n        one=nums.count(1)\\n        two=nums.count(2)\\n        for x in range(len(nums)):\\n            if two:\\n                nums.pop()\\n                nums.insert(0,2)\\n                two-=1\\n            elif one:\\n                nums.pop()\\n                nums.insert(0,1)\\n                one-=1\\n            else:\\n                nums.pop()\\n                nums.insert(0,0)",
                "codeTag": "Python3"
            },
            {
                "id": 2818098,
                "title": "java-counting-without-counting",
                "content": "\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Without Counting | 1 Pass\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int ind0 = 0;\\n        int ind2 = nums.length-1;\\n        int ind = 0;\\n        while(ind <= ind2){\\n            if(nums[ind] == 0){\\n                nums[ind] = 1;\\n                nums[ind0++] = 0;\\n            }else if(nums[ind] == 2){\\n                while(ind2 > ind && nums[ind2] == 2){\\n                    ind2--;\\n                }\\n                if(nums[ind2] == 0){\\n                    nums[ind] = 1;\\n                    nums[ind0++] = 0;\\n                    nums[ind2--] = 2;\\n                }else{\\n                    nums[ind] = 1;\\n                    nums[ind2--] = 2;\\n                }\\n            }\\n            ind++;\\n        }\\n    }\\n}\\n```\\n\\n# Counting | 2 Pass\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int c0 = 0, c1 = 0;\\n        for(int i = 0; i < nums.length; i++){\\n            if(nums[i] == 0){\\n                c0++;\\n            }else if(nums[i] == 1){\\n                c1++;\\n            }\\n            nums[i] = 2;\\n        }\\n        for(int i = 0; i < c0 + c1; i++){\\n            if(i < c0){\\n                nums[i] = 0;\\n            }else{\\n                nums[i] = 1;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int ind0 = 0;\\n        int ind2 = nums.length-1;\\n        int ind = 0;\\n        while(ind <= ind2){\\n            if(nums[ind] == 0){\\n                nums[ind] = 1;\\n                nums[ind0++] = 0;\\n            }else if(nums[ind] == 2){\\n                while(ind2 > ind && nums[ind2] == 2){\\n                    ind2--;\\n                }\\n                if(nums[ind2] == 0){\\n                    nums[ind] = 1;\\n                    nums[ind0++] = 0;\\n                    nums[ind2--] = 2;\\n                }else{\\n                    nums[ind] = 1;\\n                    nums[ind2--] = 2;\\n                }\\n            }\\n            ind++;\\n        }\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int c0 = 0, c1 = 0;\\n        for(int i = 0; i < nums.length; i++){\\n            if(nums[i] == 0){\\n                c0++;\\n            }else if(nums[i] == 1){\\n                c1++;\\n            }\\n            nums[i] = 2;\\n        }\\n        for(int i = 0; i < c0 + c1; i++){\\n            if(i < c0){\\n                nums[i] = 0;\\n            }else{\\n                nums[i] = 1;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2787787,
                "title": "sort-colors-cpp-easy-o-n-time-and-o-1-extra-space-solution",
                "content": "```class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int l=0,mid=0,r=nums.size()-1;\\n        while(mid<=r)\\n        {\\n            if(nums[mid]==1) mid++;\\n            else if(nums[mid]==0) \\n            {\\n                swap(nums[mid],nums[l]);\\n                l++;mid++;\\n            }\\n            else \\n            {\\n                swap(nums[mid],nums[r]);\\n                r--;           \\n            } \\n        }\\n    }\\n};```",
                "solutionTags": [],
                "code": "```class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int l=0,mid=0,r=nums.size()-1;\\n        while(mid<=r)\\n        {\\n            if(nums[mid]==1) mid++;\\n            else if(nums[mid]==0) \\n            {\\n                swap(nums[mid],nums[l]);\\n                l++;mid++;\\n            }\\n            else \\n            {\\n                swap(nums[mid],nums[r]);\\n                r--;           \\n            } \\n        }\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 2786089,
                "title": "c-dutch-national-flag-problem-o-n",
                "content": "*Dutch National Flag Problem*\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        \\n        int s = 0, e = nums.size() - 1;\\n        int mid = 0;\\n        \\n        while (mid <= e) {\\n            switch(nums[mid]) {\\n                case 0: \\n                    swap(nums[mid++], nums[s++]);\\n                    break;\\n                    \\n                case 1: \\n                    mid++;\\n                    break;\\n                    \\n                case 2:\\n                    swap(nums[mid], nums[e--]);\\n                    break;\\n            }\\n        }\\n \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\n\\xA0\\xA0\\xA0\\xA0}\\n};\\n```\\n\\n_Please upvote if you found it useful!_\\n\\n_Follow my **[Github](https://github.com/HimeshKohad)** for more such solutions and DSA content._",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        \\n        int s = 0, e = nums.size() - 1;\\n        int mid = 0;\\n        \\n        while (mid <= e) {\\n            switch(nums[mid]) {\\n                case 0: \\n                    swap(nums[mid++], nums[s++]);\\n                    break;\\n                    \\n                case 1: \\n                    mid++;\\n                    break;\\n                    \\n                case 2:\\n                    swap(nums[mid], nums[e--]);\\n                    break;\\n            }\\n        }\\n \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\n\\xA0\\xA0\\xA0\\xA0}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2558828,
                "title": "runtime-0-ms-faster-than-100-00-of-java-online-submissions-for-sort-colors",
                "content": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int start=0;\\n        int end=nums.length-1;\\n        int mid=0;\\n        while(start<=end && mid<=end)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums, start, mid);\\n                mid++;\\n                start++;\\n            }\\n            else if(nums[mid]==2)\\n            {\\n                swap(nums, end, mid);\\n                end--;\\n            }\\n            else mid++;\\n        }\\n    }\\n    public static void swap(int []nums, int i, int j)\\n    {\\n        int temp=nums[i];\\n        nums[i]=nums[j];\\n        nums[j]=temp;\\n    }\\n}\\n```\\n// Please vote my solution guys....",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        int start=0;\\n        int end=nums.length-1;\\n        int mid=0;\\n        while(start<=end && mid<=end)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums, start, mid);\\n                mid++;\\n                start++;\\n            }\\n            else if(nums[mid]==2)\\n            {\\n                swap(nums, end, mid);\\n                end--;\\n            }\\n            else mid++;\\n        }\\n    }\\n    public static void swap(int []nums, int i, int j)\\n    {\\n        int temp=nums[i];\\n        nums[i]=nums[j];\\n        nums[j]=temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2509109,
                "title": "javascript-solution-with-3-methods-and-all-are-in-o-n",
                "content": "Two Pointer \\n\\n```\\nvar sortColors = function(nums) {\\n    let i = 0, j =nums.length-1;\\n    while(i <=j) {\\n        if (nums[j] === 0) {\\n            do {\\n                if(i >j) break\\n                nums.splice(j, 1);\\n                nums.unshift(0);\\n                ++i;\\n            } while (nums[j] === 0)\\n        } else if(nums[j] === 2) {\\n            do {\\n                if(i >j) break\\n                nums.splice(j,1);\\n                nums.push(2);\\n                --j;\\n            } while(nums[j] === 2)\\n        } else {\\n            do {\\n                if(i >j) break\\n                --j;\\n            } while(nums[j] === 1)\\n        }\\n    }\\n};\\n```\\n\\n\\nArray\\n```\\nvar sortColors = function(nums) {\\n    let zero = [], one = [], two = [];\\n    for (let num of nums) {\\n        if (num === 0) {\\n            zero.push(0)\\n        } else if (num === 1) {\\n            one.push(1)\\n        } else {\\n            two.push(2)\\n        }\\n    }\\n    nums.length =0\\n    nums.push(...zero)\\n    nums.push(...one)\\n    nums.push(...two)\\n};\\n```\\n\\n\\nHashmap & Array\\n```\\nvar sortColors = function(nums) {\\n    let mapping = {0:0, 1:0, 2:0};\\n    for (let num of nums) {\\n        mapping[num]++\\n    }\\n    nums.length =0\\n    nums.push(... Array(mapping[0]).fill(0))\\n    nums.push(...Array(mapping[1]).fill(1))\\n    nums.push(... Array(mapping[2]).fill(2))\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nvar sortColors = function(nums) {\\n    let i = 0, j =nums.length-1;\\n    while(i <=j) {\\n        if (nums[j] === 0) {\\n            do {\\n                if(i >j) break\\n                nums.splice(j, 1);\\n                nums.unshift(0);\\n                ++i;\\n            } while (nums[j] === 0)\\n        } else if(nums[j] === 2) {\\n            do {\\n                if(i >j) break\\n                nums.splice(j,1);\\n                nums.push(2);\\n                --j;\\n            } while(nums[j] === 2)\\n        } else {\\n            do {\\n                if(i >j) break\\n                --j;\\n            } while(nums[j] === 1)\\n        }\\n    }\\n};\\n```\n```\\nvar sortColors = function(nums) {\\n    let zero = [], one = [], two = [];\\n    for (let num of nums) {\\n        if (num === 0) {\\n            zero.push(0)\\n        } else if (num === 1) {\\n            one.push(1)\\n        } else {\\n            two.push(2)\\n        }\\n    }\\n    nums.length =0\\n    nums.push(...zero)\\n    nums.push(...one)\\n    nums.push(...two)\\n};\\n```\n```\\nvar sortColors = function(nums) {\\n    let mapping = {0:0, 1:0, 2:0};\\n    for (let num of nums) {\\n        mapping[num]++\\n    }\\n    nums.length =0\\n    nums.push(... Array(mapping[0]).fill(0))\\n    nums.push(...Array(mapping[1]).fill(1))\\n    nums.push(... Array(mapping[2]).fill(2))\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2233108,
                "title": "c-all-approaches-sort-counting-sort-dutch-national-flag-algo",
                "content": "**Brute Force : Using Sort function (STL) \\nTime Complexity: O(nlogn)\\nSpace Complexity: O(1)**\\n\\n**Code :**\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n       sort(nums.begin(),nums.end());\\n    }\\n};\\n```\\n\\n**Better : using Counting Sort \\nTime Complexity: O(n+n)=O(n) (2 passes one for Frequency array and other for copying back to array)\\nSpace Complexity: O(size of max element in the array)**\\n\\n**Code :**\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n       int maxx = *max_element(nums.begin(), nums.end());\\n        vector<int> count(maxx + 1, 0);\\n        for (int i = 0; i < nums.size(); i++) // freq array creation\\n        {\\n            count[nums[i]]++;\\n        }\\n        int i = 0, j = 0;\\n        while (i < maxx + 1)\\n        {\\n            if (count[i] > 0)\\n            {\\n                nums[j++] = i; // overwrite with sorted values\\n                count[i]--;\\n            }\\n            else\\n                i++;\\n        }\\n    }\\n};\\n```\\n\\n**Optimal : using Dutch National FLag (variation) \\nTime Complexity: O(n)\\nSpace Complexity: O(1)**\\n\\n**Dutch National Flag Algo (Approach) : 3 pointers used ( low, mid, high ) value\\u2019s left of low are 0\\'s values right of high are 2\\'s values between low and mid-1 are 1\\'s.**\\n\\n**Code :**\\n   ```\\n void sortColors(vector<int>& nums) {\\n        int low=0,high=nums.size()-1,mid=0;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n                swap(nums[mid++],nums[low++]);\\n            else if(nums[mid]==1)\\n                mid++;\\n            else if(nums[mid]==2)\\n                swap(nums[mid],nums[high--]);   \\n        }\\n    }\\n};\\n```\\n\\nPlease Upvote \\uD83D\\uDC4D\\uD83C\\uDFFB and Motivate \\uD83D\\uDD25",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting",
                    "Counting Sort"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n       sort(nums.begin(),nums.end());\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n       int maxx = *max_element(nums.begin(), nums.end());\\n        vector<int> count(maxx + 1, 0);\\n        for (int i = 0; i < nums.size(); i++) // freq array creation\\n        {\\n            count[nums[i]]++;\\n        }\\n        int i = 0, j = 0;\\n        while (i < maxx + 1)\\n        {\\n            if (count[i] > 0)\\n            {\\n                nums[j++] = i; // overwrite with sorted values\\n                count[i]--;\\n            }\\n            else\\n                i++;\\n        }\\n    }\\n};\\n```\n```\\n void sortColors(vector<int>& nums) {\\n        int low=0,high=nums.size()-1,mid=0;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n                swap(nums[mid++],nums[low++]);\\n            else if(nums[mid]==1)\\n                mid++;\\n            else if(nums[mid]==2)\\n                swap(nums[mid],nums[high--]);   \\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2191923,
                "title": "easiest-solution-in-java-c-o-n-one-pass",
                "content": "**Code in Java**\\n```\\npublic void sortColors(int[] nums) {\\n        int l=0;\\n        int r=nums.length-1;\\n        while(l<r){\\n            if(nums[l] == 2) {\\n                swap(nums, l, r);\\n                r--;\\n            }\\n            else if(nums[l] == 1){\\n                int temp = l+1;\\n                while(temp < r && nums[temp] != 0) temp++;\\n                if(nums[temp] == 0) swap(nums, l, temp);\\n                l++;\\n            }\\n            else l++;\\n        }\\n    }\\n    private void swap(int[] nums, int a, int b){\\n        int temp = nums[a];\\n        nums[a] = nums[b];\\n        nums[b] = temp;\\n    }\\n```\\n\\n**Code in C**\\n```\\nvoid swap(int* nums, int a, int b){\\n    int temp = nums[a];\\n    nums[a] = nums[b];\\n    nums[b] = temp;\\n    }\\n\\nvoid sortColors(int* nums, int numsSize){\\n    int l=0;\\n    int r=numsSize-1;\\n    while(l<r){\\n        if(nums[l] == 2) {\\n            swap(nums, l, r);\\n            r--;\\n        }\\n        else if(nums[l] == 1){\\n            int temp = l+1;\\n            while(temp < r && nums[temp] != 0) temp++;\\n            if(nums[temp] == 0) swap(nums, l, temp);\\n            l++;\\n        }\\n        else l++;\\n    }\\n}\\n```\\n\\n**Please upvote if the solution helped you**\\n*Feel free to ask any questions in the comment section*",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\npublic void sortColors(int[] nums) {\\n        int l=0;\\n        int r=nums.length-1;\\n        while(l<r){\\n            if(nums[l] == 2) {\\n                swap(nums, l, r);\\n                r--;\\n            }\\n            else if(nums[l] == 1){\\n                int temp = l+1;\\n                while(temp < r && nums[temp] != 0) temp++;\\n                if(nums[temp] == 0) swap(nums, l, temp);\\n                l++;\\n            }\\n            else l++;\\n        }\\n    }\\n    private void swap(int[] nums, int a, int b){\\n        int temp = nums[a];\\n        nums[a] = nums[b];\\n        nums[b] = temp;\\n    }\\n```\n```\\nvoid swap(int* nums, int a, int b){\\n    int temp = nums[a];\\n    nums[a] = nums[b];\\n    nums[b] = temp;\\n    }\\n\\nvoid sortColors(int* nums, int numsSize){\\n    int l=0;\\n    int r=numsSize-1;\\n    while(l<r){\\n        if(nums[l] == 2) {\\n            swap(nums, l, r);\\n            r--;\\n        }\\n        else if(nums[l] == 1){\\n            int temp = l+1;\\n            while(temp < r && nums[temp] != 0) temp++;\\n            if(nums[temp] == 0) swap(nums, l, temp);\\n            l++;\\n        }\\n        else l++;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2185206,
                "title": "javascript-fast-two-pointers-solution",
                "content": "```\\nfunction swap(arr, i, j) {\\n    let temp = arr[i];\\n    arr[i] = arr[j];\\n    arr[j] = temp;\\n}\\n// O(n) time | O(1) space\\nvar sortColors = function(arr) {\\n    let n = arr.length;\\n    let left = 0;\\n    let right = n - 1;\\n    let i = 0;\\n    \\n    while(i <= right) {\\n        // if the number is 2, then place it at the end, swapping it\\n        // with the element in the right index\\n        // decrement right by 1\\n        // here we don\\'t increment i because after the swapping\\n        // the element in position i may be a 0 (or a 2)\\n        // and in that case we should place it at the left index (or at the right)\\n        if(arr[i] == 2) {\\n            swap(arr, i, right);\\n            right--;\\n        }\\n        // if the number is 0, then place it at the beginning, swapping it with the element in the left index\\n        // increment left by 1\\n        // here we increment i by 1 because after the swapping\\n        // the element in position i must be a 1, since the index i\\n        // already went through left position\\n        else if(arr[i] == 0) {\\n            swap(arr, i, left);\\n            left++;\\n            i++;\\n        }\\n        // if the element is 1, just continue\\n        else {\\n            i++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Two Pointers"
                ],
                "code": "```\\nfunction swap(arr, i, j) {\\n    let temp = arr[i];\\n    arr[i] = arr[j];\\n    arr[j] = temp;\\n}\\n// O(n) time | O(1) space\\nvar sortColors = function(arr) {\\n    let n = arr.length;\\n    let left = 0;\\n    let right = n - 1;\\n    let i = 0;\\n    \\n    while(i <= right) {\\n        // if the number is 2, then place it at the end, swapping it\\n        // with the element in the right index\\n        // decrement right by 1\\n        // here we don\\'t increment i because after the swapping\\n        // the element in position i may be a 0 (or a 2)\\n        // and in that case we should place it at the left index (or at the right)\\n        if(arr[i] == 2) {\\n            swap(arr, i, right);\\n            right--;\\n        }\\n        // if the number is 0, then place it at the beginning, swapping it with the element in the left index\\n        // increment left by 1\\n        // here we increment i by 1 because after the swapping\\n        // the element in position i must be a 1, since the index i\\n        // already went through left position\\n        else if(arr[i] == 0) {\\n            swap(arr, i, left);\\n            left++;\\n            i++;\\n        }\\n        // if the element is 1, just continue\\n        else {\\n            i++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2154039,
                "title": "best-approach-o-n-time-and-o-1-space-easy-implementation",
                "content": "![image](https://assets.leetcode.com/users/images/53058367-9eec-4739-82bd-d44f641ce0cc_1655278798.7682872.jpeg)\\n\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int curr_element = 0;\\n        int next_zero = 0;\\n        int next_two = nums.size()-1;\\n        while(curr_element<=next_two)\\n        {\\n            if(nums[curr_element]==0)\\n            {\\n                swap(nums[curr_element],nums[next_zero]);\\n                curr_element++;\\n                next_zero++;\\n            }\\n            else if(nums[curr_element]==1)\\n            {\\n                curr_element++;\\n\\n            }\\n            else if(nums[curr_element]==2)\\n            {\\n                swap(nums[curr_element],nums[next_two]);\\n                next_two--;\\n            }\\n        }\\n        \\n        \\n    }\\n};\\n```\\n\\n\\n",
                "solutionTags": [
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int curr_element = 0;\\n        int next_zero = 0;\\n        int next_two = nums.size()-1;\\n        while(curr_element<=next_two)\\n        {\\n            if(nums[curr_element]==0)\\n            {\\n                swap(nums[curr_element],nums[next_zero]);\\n                curr_element++;\\n                next_zero++;\\n            }\\n            else if(nums[curr_element]==1)\\n            {\\n                curr_element++;\\n\\n            }\\n            else if(nums[curr_element]==2)\\n            {\\n                swap(nums[curr_element],nums[next_two]);\\n                next_two--;\\n            }\\n        }\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2144720,
                "title": "visually-explained-easy-solution-o-n-two-approaches-optimization-using-dutch-flag-algorithm",
                "content": "A simple and fairly easy solution that requires three pointers which holds the number of 0\\'s, 1\\'s and 2\\'s since these are the only visible elements in the array we can count them and increment the respective pointers using if/else or switch cases and the iterate over the same array again and fill it up accordingly with the count from the pointers. \\n\\nMore explaination in the code inline\\n\\n```\\n\\t\\tint zeros = 0;\\n        int ones = 0;\\n        int twos = 0;\\n        \\n\\t\\t//Count the number of 0\\'s, 1\\'s and 2\\'s that appear in the array.\\n        for(int i = 0; i < nums.length; i++)\\n        {\\n            if(nums[i] == 0)\\n                zeros++;\\n            else if(nums[i] == 1)\\n                ones++;\\n            else if(nums[i] == 2)\\n                twos++;\\n        }\\n        \\n\\t\\t//Now fill up the array with the information from the previous computation.\\n        for(int i = 0; i < nums.length; i++ )\\n        {\\n\\t\\t\\t//Exhaust all 0\\'s first\\n            if(zeros != 0)\\n            {\\n                nums[i] = 0;\\n                zeros--;\\n            }\\n\\t\\t\\t//Exhaust all 1\\'s once all 0\\'s have been exhausted\\n            else if(ones != 0)\\n            {\\n                nums[i] = 1;\\n                ones--;\\n            }\\n\\t\\t\\t//Exhaust all 2\\'s at last\\n            else\\n            {\\n                nums[i] = 2;\\n                twos--;\\n            }\\n        }\\n```\\n\\nIf you look this would be a O(2N) time complexity since we are making two passes.\\n1. To calculate the number of 0\\'s, 1\\'s and 2\\'s\\n2. To fill up the array with the calculated number of 0\\'s,1\\'s and 2\\'s.\\n\\nA better approach to this problem would be using the **Dutch Flag Algorithm**\\n\\nThe solution to this algorithm will require 3 pointers to iterate throughout the array, swapping the necessary elements.\\n\\n1. Create a low pointer at the beginning of the array and a high pointer at the end of the array.\\n2. Create a mid pointer that starts at the beginning of the array and iterates through each element.\\n3. **If the element at arr[mid] is a 2, then swap arr[mid] and arr[high] and decrease the high pointer by 1.**\\n4. **If the element at arr[mid] is a 0, then swap arr[mid] and arr[low] and increase the low and mid pointers by 1.**\\n5. **If the element at arr[mid] is a 1, don\\'t swap anything and just increase the mid pointer by 1.**\\n\\nEverything highlighted in **bold** are three important assumptions to follow above.\\n\\nAfter the entire array is sorted  the thing to look is that high pointer will always be at the start of all 2\\'s and mid pointer, low pointer will always be at the end of 1\\'s and 0\\'s.\\n\\n![image](https://assets.leetcode.com/users/images/0a94332d-f419-418d-84ad-a8714ed39eb0_1655071660.3559823.jpeg)\\n\\nOkay enough talk now lets look at the code -\\n\\n```\\n    public void sortColors(int[] nums) \\n    {\\n        \\n        //Dutch national flag algorithm\\n        \\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.length - 1; \\n        \\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n                swap(mid++,low++,nums);\\n            else if(nums[mid] == 1)\\n                mid++;\\n            else\\n                swap(mid,high--,nums);\\n        }\\n    }\\n    \\n    private void swap(int a , int b, int[] nums)\\n    {\\n        //Neat little code to quickly swap without using the third variable and in one line.\\n        nums[b] = (nums[a] + nums[b]) - (nums[a] = nums[b]);\\n    }\\n```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\t\\tint zeros = 0;\\n        int ones = 0;\\n        int twos = 0;\\n        \\n\\t\\t//Count the number of 0\\'s, 1\\'s and 2\\'s that appear in the array.\\n        for(int i = 0; i < nums.length; i++)\\n        {\\n            if(nums[i] == 0)\\n                zeros++;\\n            else if(nums[i] == 1)\\n                ones++;\\n            else if(nums[i] == 2)\\n                twos++;\\n        }\\n        \\n\\t\\t//Now fill up the array with the information from the previous computation.\\n        for(int i = 0; i < nums.length; i++ )\\n        {\\n\\t\\t\\t//Exhaust all 0\\'s first\\n            if(zeros != 0)\\n            {\\n                nums[i] = 0;\\n                zeros--;\\n            }\\n\\t\\t\\t//Exhaust all 1\\'s once all 0\\'s have been exhausted\\n            else if(ones != 0)\\n            {\\n                nums[i] = 1;\\n                ones--;\\n            }\\n\\t\\t\\t//Exhaust all 2\\'s at last\\n            else\\n            {\\n                nums[i] = 2;\\n                twos--;\\n            }\\n        }\\n```\n```\\n    public void sortColors(int[] nums) \\n    {\\n        \\n        //Dutch national flag algorithm\\n        \\n        int low = 0;\\n        int mid = 0;\\n        int high = nums.length - 1; \\n        \\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n                swap(mid++,low++,nums);\\n            else if(nums[mid] == 1)\\n                mid++;\\n            else\\n                swap(mid,high--,nums);\\n        }\\n    }\\n    \\n    private void swap(int a , int b, int[] nums)\\n    {\\n        //Neat little code to quickly swap without using the third variable and in one line.\\n        nums[b] = (nums[a] + nums[b]) - (nums[a] = nums[b]);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2132777,
                "title": "python-counting-sort-o-n",
                "content": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        bins = [0 for _ in range(3)]\\n        for col in nums:\\n            bins[col] += 1\\n        for i in range(len(nums)):\\n            if bins[0]:\\n                nums[i] = 0\\n                bins[0] -= 1\\n            elif bins[1]:\\n                nums[i] = 1\\n                bins[1] -= 1\\n            else:\\n                nums[i] = 2\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        bins = [0 for _ in range(3)]\\n        for col in nums:\\n            bins[col] += 1\\n        for i in range(len(nums)):\\n            if bins[0]:\\n                nums[i] = 0\\n                bins[0] -= 1\\n            elif bins[1]:\\n                nums[i] = 1\\n                bins[1] -= 1\\n            else:\\n                nums[i] = 2\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2074657,
                "title": "o-n-solution-in-cpp-without-any-extra-space",
                "content": "Since we only have 3 cases of input, we can just keep the count of each type of element, that is 0,1 and 2...\\nNow, we simply loop using this three counts and fill our original array...\\n\\n**Pls Upvote this thread if you found this code helpful**\\n\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0=0, count1=0, count2=0;\\n        for(int i=0;i<nums.size();i++) {\\n            if(nums[i]==0) count0++;\\n            if(nums[i]==1) count1++;\\n            if(nums[i]==2) count2++;\\n        }\\n        \\n        for(int i=0;i<count0;i++) nums[i]=0;\\n        for(int i=count0;i<(count1+count0);i++) nums[i]=1;\\n        for(int i=(count1+count0);i<nums.size();i++) nums[i]=2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int count0=0, count1=0, count2=0;\\n        for(int i=0;i<nums.size();i++) {\\n            if(nums[i]==0) count0++;\\n            if(nums[i]==1) count1++;\\n            if(nums[i]==2) count2++;\\n        }\\n        \\n        for(int i=0;i<count0;i++) nums[i]=0;\\n        for(int i=count0;i<(count1+count0);i++) nums[i]=1;\\n        for(int i=(count1+count0);i<nums.size();i++) nums[i]=2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2038657,
                "title": "easiest-and-most-efficient-solution-java-c",
                "content": "class Solution {\\n    public void sortColors(int[] arr) {\\n        \\n        int low = 0;\\n        int mid = 0;\\n        int high = arr.length - 1;\\n        \\n        while(mid<=high){\\n            if(arr[mid] == 0){\\n                int temp = arr[mid];\\n                arr[mid] = arr[low];\\n                arr[low] = temp;\\n                mid++;\\n                low++;\\n            }else if(arr[mid]==1){\\n                mid++;\\n            }else{\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n                high--;\\n                    \\n            }\\n        }\\n    }\\n}\\n# Press the up button if u understand it",
                "solutionTags": [],
                "code": "class Solution {\\n    public void sortColors(int[] arr) {\\n        \\n        int low = 0;\\n        int mid = 0;\\n        int high = arr.length - 1;\\n        \\n        while(mid<=high){\\n            if(arr[mid] == 0){\\n                int temp = arr[mid];\\n                arr[mid] = arr[low];\\n                arr[low] = temp;\\n                mid++;\\n                low++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1819217,
                "title": "easy-concise-java-solution",
                "content": "```\\nclass Solution {\\n    public void swap(int[] nums,int i,int j)\\n    {\\n        int temp=nums[i];\\n        nums[i]=nums[j];\\n        nums[j]=temp;\\n    }\\n    public void sortColors(int[] nums) {\\n        int n=nums.length;\\n        int i=0,j=0,k=n-1;\\n        \\n        while(j<=k)\\n        {\\n            if(nums[j]==0)\\n            {\\n                swap(nums,i,j);\\n                i++;\\n                j++;\\n            }\\n            else if(nums[j]==1)\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                swap(nums,j,k);\\n                k--;\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public void swap(int[] nums,int i,int j)\\n    {\\n        int temp=nums[i];\\n        nums[i]=nums[j];\\n        nums[j]=temp;\\n    }\\n    public void sortColors(int[] nums) {\\n        int n=nums.length;\\n        int i=0,j=0,k=n-1;\\n        \\n        while(j<=k)\\n        {\\n            if(nums[j]==0)\\n            {\\n                swap(nums,i,j);\\n                i++;\\n                j++;\\n            }\\n            else if(nums[j]==1)\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                swap(nums,j,k);\\n                k--;\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1815602,
                "title": "c-solution-using-dutch-national-flag-problem",
                "content": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int l=0,mid=0,r=nums.size()-1;\\n        while(mid<=r)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[l],nums[mid]);\\n                l++;\\n            }\\n            else if(nums[mid]==2)\\n            {\\n                swap(nums[r],nums[mid]);\\n                r--;\\n                continue;\\n            }\\n            mid++;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int l=0,mid=0,r=nums.size()-1;\\n        while(mid<=r)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[l],nums[mid]);\\n                l++;\\n            }\\n            else if(nums[mid]==2)\\n            {\\n                swap(nums[r],nums[mid]);\\n                r--;\\n                continue;\\n            }\\n            mid++;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1721447,
                "title": "sort-colors-0ms-solved-in-c-easy-explaination",
                "content": "**Sort Colors**\\nUsed A really simple way to solve it.\\n\\n1. Create A map `map<int,int>m` and then \\n2. traverse the array- count num of zeros, ones and twos.\\n3. then store the value of each value.\\n4. empty the existing vector `v.clear()`\\n5. push_back(0) ,  push_back(1) ,   push_back(2)  and you are done in `O(N)` \\n\\nUPVOTE :)\\n\\n```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& v) {\\n    map<int,int>m;\\n    for(int x:v)\\n    {\\n        m[x]=m[x]+1;\\n    }\\n    int zero=0,one=0,two=0;\\n    for(auto x:m)\\n    { \\n       if(x.first == 0)\\n       {\\n           zero=x.second;\\n       }\\n        else if(x.first == 1)\\n       {\\n           one=x.second;\\n       }\\n         else if(x.first == 2)\\n       {\\n           two=x.second;\\n       }\\n    }\\n    v.clear();\\n    for(int i=0;i<zero;i++)\\n    {\\n        v.push_back(0);\\n    }\\n      for(int i=0;i<one;i++)\\n    {\\n        v.push_back(1);\\n    }\\n      for(int i=0;i<two;i++)\\n    {\\n        v.push_back(2);\\n    }\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& v) {\\n    map<int,int>m;\\n    for(int x:v)\\n    {\\n        m[x]=m[x]+1;\\n    }\\n    int zero=0,one=0,two=0;\\n    for(auto x:m)\\n    { \\n       if(x.first == 0)\\n       {\\n           zero=x.second;\\n       }\\n        else if(x.first == 1)\\n       {\\n           one=x.second;\\n       }\\n         else if(x.first == 2)\\n       {\\n           two=x.second;\\n       }\\n    }\\n    v.clear();\\n    for(int i=0;i<zero;i++)\\n    {\\n        v.push_back(0);\\n    }\\n      for(int i=0;i<one;i++)\\n    {\\n        v.push_back(1);\\n    }\\n      for(int i=0;i<two;i++)\\n    {\\n        v.push_back(2);\\n    }\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1627248,
                "title": "perfect-walk-through-solutions-for-interviews",
                "content": "Easy walk through for making proper impression on the interviewer.\\nFirstly, talking about the **method 1 : Counting Sort Method**\\n\\n-> In this method, we simply need to traverse the array and count number of occurrences of 0, 1 and 2.\\n-> Then, doing in-place operation by placing 0\\'s upto count0, 1\\'s upto count1 and 2\\'s upto count2.\\n\\n```\\nint c0=0, c1=0, c2=0;\\n        for(int i=0; i<n; i++){\\n            if(nums[i] == 0)\\n                c0++;\\n            else if(nums[i] == 1)\\n                c1++;\\n            else\\n                c2++;\\n        }\\n        int i = 0;\\n        while(c0--)\\n            nums[i++] = 0;\\n        while(c1--)\\n            nums[i++] = 1;\\n        while(c2--)\\n            nums[i++] = 2;\\n```\\n\\n\\n**Method 2 : Dutch National Flag Algorithm**\\n\\n-> In this method, we consider 3 variables vis. low, mid, high\\n-> [0, low) => 0\\n-> [low, mid) => 1\\n-> [high, ) => 2\\n\\n```\\nint low=0, mid=low, high=n-1;\\n        while(mid<=high){\\n            if(nums[mid] == 0)\\n                swap(nums[low++], nums[mid++]);\\n            else if(nums[mid] == 1)\\n                mid++;\\n            else\\n                swap(nums[high--], nums[mid]);\\n        }\\n```\\n\\n\\n**Method 3 : Pure Observational Method**\\n-> This will be very impressive if you tell this approach to interviewer as it is simply based on observation and testing.\\n\\n```\\nint c0=-1, c1=-1, c2=-1;\\n        for(int i=0; i<n; i++){\\n            if(nums[i] == 0)\\n                nums[++c2]=2, nums[++c1]=1, nums[++c0]=0;\\n            else if(nums[i] == 1)\\n                nums[++c2]=2, nums[++c1]=1;\\n            else\\n                nums[++c2]=2;\\n        }\\n```\\n\\n\\n**Give an upvote, Good Luck for your Interviews.**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint c0=0, c1=0, c2=0;\\n        for(int i=0; i<n; i++){\\n            if(nums[i] == 0)\\n                c0++;\\n            else if(nums[i] == 1)\\n                c1++;\\n            else\\n                c2++;\\n        }\\n        int i = 0;\\n        while(c0--)\\n            nums[i++] = 0;\\n        while(c1--)\\n            nums[i++] = 1;\\n        while(c2--)\\n            nums[i++] = 2;\\n```\n```\\nint low=0, mid=low, high=n-1;\\n        while(mid<=high){\\n            if(nums[mid] == 0)\\n                swap(nums[low++], nums[mid++]);\\n            else if(nums[mid] == 1)\\n                mid++;\\n            else\\n                swap(nums[high--], nums[mid]);\\n        }\\n```\n```\\nint c0=-1, c1=-1, c2=-1;\\n        for(int i=0; i<n; i++){\\n            if(nums[i] == 0)\\n                nums[++c2]=2, nums[++c1]=1, nums[++c0]=0;\\n            else if(nums[i] == 1)\\n                nums[++c2]=2, nums[++c1]=1;\\n            else\\n                nums[++c2]=2;\\n        }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1619943,
                "title": "java-easy-solution-three-pointers",
                "content": "**Upvote if you like the solution :)**\\n```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        //three pointers method/A variation of Dutch National Flag Algorithm\\n        \\n        int low=0;\\n        int mid=0;\\n        int high=nums.length-1;\\n        int temp;\\n        \\n        /*Idea- when nums[mid]=1  --->  increase mid pointer\\n                 when nums[mid]=0 ----> swap it with low pointer and low++ , mid++\\n                 when nums[mid]=2 ----> swap with high and high--,mid++ */\\n        \\n        while(mid<=high){\\n            \\n            switch(nums[mid]){\\n                case 0:\\n                    temp = nums[low];\\n                    nums[low]=nums[mid];\\n                    nums[mid]=temp;\\n                    low+=1;\\n                    mid+=1;\\n                    break;\\n                    \\n                case 1:\\n                    mid+=1;\\n                    break;\\n                    \\n                case 2:\\n                    temp = nums[mid];\\n                    nums[mid]=nums[high];\\n                    nums[high]=temp;\\n                    \\n                    high--;\\n                    \\n                    break;\\n            }\\n        }\\n    } \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n        //three pointers method/A variation of Dutch National Flag Algorithm\\n        \\n        int low=0;\\n        int mid=0;\\n        int high=nums.length-1;\\n        int temp;\\n        \\n        /*Idea- when nums[mid]=1  --->  increase mid pointer\\n                 when nums[mid]=0 ----> swap it with low pointer and low++ , mid++\\n                 when nums[mid]=2 ----> swap with high and high--,mid++ */\\n        \\n        while(mid<=high){\\n            \\n            switch(nums[mid]){\\n                case 0:\\n                    temp = nums[low];\\n                    nums[low]=nums[mid];\\n                    nums[mid]=temp;\\n                    low+=1;\\n                    mid+=1;\\n                    break;\\n                    \\n                case 1:\\n                    mid+=1;\\n                    break;\\n                    \\n                case 2:\\n                    temp = nums[mid];\\n                    nums[mid]=nums[high];\\n                    nums[high]=temp;\\n                    \\n                    high--;\\n                    \\n                    break;\\n            }\\n        }\\n    } \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1604340,
                "title": "0ms-100-faster-simple-java-solution",
                "content": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n          int i=0,z=0,o=0;\\n        for( i=0;i<nums.length;i++)\\n            {\\n            if(nums[i]==0)z++;\\n            if(nums[i]==1)o++;\\n            }\\n        for(i=0;i<z;i++)\\n            nums[i]=0;\\n        for(i=z;i<(o+z) ;i++)\\n            nums[i]=1;\\n        for(i=(o+z) ;i<nums.length;i++)\\n            nums[i]=2;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public void sortColors(int[] nums) {\\n          int i=0,z=0,o=0;\\n        for( i=0;i<nums.length;i++)\\n            {\\n            if(nums[i]==0)z++;\\n            if(nums[i]==1)o++;\\n            }\\n        for(i=0;i<z;i++)\\n            nums[i]=0;\\n        for(i=z;i<(o+z) ;i++)\\n            nums[i]=1;\\n        for(i=(o+z) ;i<nums.length;i++)\\n            nums[i]=2;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1571854,
                "title": "100-faster-java-solution-with-one-loop-only",
                "content": "**Approach is simple:**\\n\\nif current element= 0 send it to left\\nor\\nif  current element=2 send it to right, \\nor\\nif  current element=1 then do nothing(skip current element).\\n\\n```\\nclass Solution {\\n    \\npublic static void sortColors(int[] arr) {\\nint l=0;\\nint m=0; \\nint h=arr.length-1;\\nwhile(m<=h)\\n{\\n    if(arr[m]==0){ //element is 0\\n        swap(arr,l,m);\\n        l++;\\n        m++;\\n    } else if(arr[m]==2){\\n        swap(arr,m,h);\\n        h--;\\n    }\\n    else m++;\\n}\\n  }\\n  \\n private static void swap(int[] array, int i, int j) {\\n    int temp = array[i];\\n    array[i] = array[j];\\n    array[j] = temp;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\npublic static void sortColors(int[] arr) {\\nint l=0;\\nint m=0; \\nint h=arr.length-1;\\nwhile(m<=h)\\n{\\n    if(arr[m]==0){ //element is 0\\n        swap(arr,l,m);\\n        l++;\\n        m++;\\n    } else if(arr[m]==2){\\n        swap(arr,m,h);\\n        h--;\\n    }\\n    else m++;\\n}\\n  }\\n  \\n private static void swap(int[] array, int i, int j) {\\n    int temp = array[i];\\n    array[i] = array[j];\\n    array[j] = temp;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1563366,
                "title": "python-commented-solution",
                "content": "```\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # start => place next to \\'0\\'s end or first \\'1\\' index, mid => place at unknown value from start (after \\'1\\' index) , end => unkown value from end (before 2)\\n        # [00001111XXXXXXX22222]\\n        start = mid = 0\\n        end = len(nums) -1\\n        while mid <= end:\\n            if nums[mid] == 0:\\n                nums[mid],nums[start] = nums[start],nums[mid]\\n                mid+=1 # mid is always at unknown ie. X\\n                start +=1 # start is always at last \\'0\\' index + 1 or first \\'1\\' index\\n            elif nums[mid] == 2:\\n                nums[mid],nums[end] = nums[end],nums[mid]\\n                end -=1 # end is always at unknown ie. X\\n            else:\\n                mid +=1\\n        return nums\\n\\t\\t# like if you find it useful\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n    def sortColors(self, nums: List[int]) -> None:\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n        # start => place next to \\'0\\'s end or first \\'1\\' index, mid => place at unknown value from start (after \\'1\\' index) , end => unkown value from end (before 2)\\n        # [00001111XXXXXXX22222]\\n        start = mid = 0\\n        end = len(nums) -1\\n        while mid <= end:\\n            if nums[mid] == 0:\\n                nums[mid],nums[start] = nums[start],nums[mid]\\n                mid+=1 # mid is always at unknown ie. X\\n                start +=1 # start is always at last \\'0\\' index + 1 or first \\'1\\' index\\n            elif nums[mid] == 2:\\n                nums[mid],nums[end] = nums[end],nums[mid]\\n                end -=1 # end is always at unknown ie. X\\n            else:\\n                mid +=1\\n        return nums\\n\\t\\t# like if you find it useful\\n```",
                "codeTag": "Python3"
            }
        ],
        "discussions": [
            {
                "id": 1568101,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1743445,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1569592,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1576778,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1566548,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1738042,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1804719,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1566068,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1571173,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1568895,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1568101,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1743445,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1569592,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1576778,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1566548,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1738042,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1804719,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1566068,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1571173,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 1568895,
                "content": [
                    {
                        "username": "timkillis",
                        "content": "I had a hard time grasping this one so I thought I\\'d write it down, maybe it will help you too.\\n\\nIterate over the array, maintaining two pointers, one at the \"low\" index, 0, and one at the \"high\", nums.length - 1.\\n\\nEverything to the left of low in the array and everything to the right of high in the array will be assumed sorted. As we iterate through the array, we update our pointers, taking account for two cases\\n\\nIf the index in the array is equal to 0, we swap that with our current low index and then increment the low index, since we know that everything to the left of that index is properly sorted.\\n\\nElse if the index in the array is equal to 2, we swap that with our current high index and decrement the high index, since everything to right of the high index is sorted. Also take care in this case to decrement i since we will want to reconsider the inserted element.\\n\\nWe\\'ve accounted for if the indexes are 0 or 2, the only other option is if the index is a 1, in which case we will just leave it in place.\\n\\nOur loop ends when we meet the high index, since we know everything to the right of high is properly sorted.\\n"
                    },
                    {
                        "username": "SamareshDas",
                        "content": "You became a life saver"
                    },
                    {
                        "username": "knotri",
                        "content": "[@_tarunreddy_](/_tarunreddy_) array[index] == 0"
                    },
                    {
                        "username": "_tarunreddy_",
                        "content": "what do you mean by \"If the index in the array is equal to 0\""
                    },
                    {
                        "username": "ShashankChaturvedi",
                        "content": "the task is to bring all zeros to left and all twos to right. that\\'s it\\n\\ndetailed hint below\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n1)- use three pointers one for left end , one for right end and one for iteration.\\n2)-if you see 0 swap it with left pointer and increase the left pointer by one.\\n3)-if you see 2 swap it with right pointer and decrease right pointer by one.\\n4)-else increase the iterating pointer.\\n5)-run this loop while the iterating pointer<=right pointer.\\nright pointer=n-1\\nleft pointer=0\\niterating pointer =0 runs while it is<=right pointer."
                    },
                    {
                        "username": "SalvadorDali",
                        "content": "Example of overcomplication for a sake of overcomplication.\\n\\nNo matter how the one pass solution is implemented, it will be 2-3 times slower than the intuitive 2 pass solution. It provides zero benefits: being one pass it is not a streaming algorithm as it needs to access elements from some other positions.\\n\\nOn the other hand the drawbacks are clear: complex to understand, non-intuitive, 2-3 times slower. \\n\\nBoth counting and this take O(1) memory."
                    },
                    {
                        "username": "martynov-94",
                        "content": "Like most problems on this site, it's for the sake of training. You don't go to gym because you need to carry some heavy objects from one place to another, right? You lift them because you want to train your muscles.\n\nMost of the times when I open a comment section, I see complaints about how impractical the problem is. But when you're pressed to find some non-obvious solution, you need to tackle the problem from various angles, and you get much better understanding of how things work under the hood. It's good to find different approaches, even if it's not the most optimised. "
                    },
                    {
                        "username": "kartik21928",
                        "content": "![image](https://assets.leetcode.com/users/images/8aac4b91-e82f-4123-8239-c390600402d5_1653064303.0474055.jpeg)\\n"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "psonlinux",
                        "content": "This post explained the working with proof for O(n) solution .\\nhttp://users.monash.edu/~lloyd/tildeAlgDS/Sort/Flag/"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "xAdvitya",
                        "content": "Study about DNF algorithm "
                    },
                    {
                        "username": "Ebad1001",
                        "content": "For those who don\\'t know : DNF stands for Dutch National Flag Algorithm"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "For DNF it shows time limit exeed"
                    },
                    {
                        "username": "betrayy",
                        "content": "I second this. It\\'s a famous algorithm"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "I acually solved it using the library sort().\\n\\nnow i feel bad.  I am going to try to solve it without now."
                    },
                    {
                        "username": "talibmaster99",
                        "content": "[@UNDeF1ND1](/UNDeF1ND1) yay"
                    },
                    {
                        "username": "UNDeF1ND1",
                        "content": "Update:   I did it.  I no longer feel bad  "
                    },
                    {
                        "username": "its_dark",
                        "content": "can someone please post the one-pass solution that uses constant space .\\nI have been able to do it in two pass only."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "lettuce",
                        "content": "It seems as though every time I run the same code I may get a vastly different runtime depending on the time or day I run it."
                    },
                    {
                        "username": "learningToCode",
                        "content": "    def sortColors(self, nums):\\n        nums[:] = [0]*nums.count(0) + [1]*nums.count(1) + [2]*nums.count(2)"
                    },
                    {
                        "username": "alighraibeh87",
                        "content": "[@youpsla](/youpsla) \\nits not inplace you are creating new array"
                    },
                    {
                        "username": "youpsla",
                        "content": "WIth some improvements:\n``` \ndef sortColors(self, nums: List[int]) -> None:\n        len_nums = len(nums)\n        red = nums.count(0)\n        white = nums.count(1)\n\n        nums[:] = [0]*red + [1]*white + [2]*(len_nums - (red+white))\n```"
                    },
                    {
                        "username": "Shangyuan_LIU",
                        "content": "jesus...... u make others look stupid"
                    },
                    {
                        "username": "iamrdwn",
                        "content": "This made me chuckle. Genius!\\n"
                    }
                ]
            },
            {
                "id": 2015872,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 1573917,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 1571174,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 1780741,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 2075976,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 2066737,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 2064928,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 2063208,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 2060247,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 2049756,
                "content": [
                    {
                        "username": "GeForceGroot",
                        "content": "I actually solved it using selection sort. it\\'s great and easy approach for this problem."
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "i solved it using bubble sort,its fine right?\\n"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[Link to Solution](https://youtu.be/cr1OUfCRuD8):\\n\\n\\n"
                    },
                    {
                        "username": "baojialiang",
                        "content": "In this sort color question, it only tells us to separate the different colors by sorting, but it does not mention we need to sort the colors exactly according to the size of the color numbers.\\n\\nFor instance, if the input is {1, 2, 1,  0}, the result can be {1,1, 2, 0}. But the OJ answer is only {0, 1, 1, 2}, which does not make sense, because {1, 2, 1,  0} has already separated different color, correct?"
                    },
                    {
                        "username": "sabka_bwb",
                        "content": "Problem Statement states tha order in which the colors are to be arranged...\\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, WITH THE COLORS IN THE ORDER RED, WHITE AND BLUE."
                    },
                    {
                        "username": "navneet1083",
                        "content": "normal `sort` would have worked for this problem, isn\\'t it !!!"
                    },
                    {
                        "username": "pseudo_Coder1",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& a) {\\n        int right=a.size()-1;\\n        int len=a.size();\\n        int left=0;\\n        int i=0;\\n        while(i<=right){\\n                cout<<endl<<\"S T E P\"<<endl;\\n                for(int i=0;i<len;i++){\\n                    cout<<a[i]<<\" \";\\n                }\\n                cout<<endl;\\n\\n                if (a[i] == 0) {\\n                    swap(a[i],a[left]);\\n                    left=left+1;\\n                    i=i+1;\\n                }\\n                else if(a[i]==2){\\n                    swap(a[i],a[right]);\\n                    right=right-1;\\n                }\\n                else{\\n                    i=i+1;\\n                }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Nitkapur30",
                        "content": "We use the Dutch National Flag Algorithm to solve this question. The steps to the following are given below:\\n\\nStep 1) Take three pointers named low, mid and high, where low and mid=0 and high = a.size()-1.\\n\\nStep 2) Now, we will solve the question in the assumption that a part of the array is already sorted. (low to mid-1 already contains all 0s, high to end of array already contains all 2s and only the mid portion needs to be sorted)\\n\\nStep 3) Hence, we will apply a while loop till mid<=high.\\n\\nStep 4) If element at mid (initially index 0)==0, then we will simply swap mid element with low element(which is also initially at index 0) and increment both mid and low.\\n\\nStep 5) If mid == 1, then we can say that array is already in its sorted position and increment mid.\\n\\nStep 6) If mid == 2 then we will swap mid with high in order to get back 2 to its destined sorted position and decrement high.\\n\\nSolution:\\nhttps://leetcode.com/problems/sort-colors/solutions/4071342/step-by-step-dutch-national-flag-algo/"
                    },
                    {
                        "username": "anilbillupati",
                        "content": "if you don't know any of the approach then use any sorting algorithm to sort it \nin my case I used quicksort(which implemented internally in Collection framework java)"
                    },
                    {
                        "username": "rushichitte1998",
                        "content": "use Doutch National flag algorithm its also known as 3 pointer algorithm"
                    },
                    {
                        "username": "Aditya_179",
                        "content": "i solved this using bubble sort, is this a right approach to solve this problem?"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "yes you can solve it using it but it is the brute force approach ......\\nthe better approach is first count all the o\\'s , 1\\'s and 2\\'s then according fill 0,1,2 in the array acc. to their counts in the order 012........\\nthe final most optimal approach is DNF algo (dutch national flag ) refer Stiver on yt for that solution"
                    },
                    {
                        "username": "mattsthilaire1",
                        "content": "Apparently selection sort works here too lol "
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "Counting sort ftw"
                    }
                ]
            },
            {
                "id": 2039858,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2035752,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2035390,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2031007,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2027494,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2026622,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2020617,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2019279,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2014501,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 2012823,
                "content": [
                    {
                        "username": "pijushmondal617",
                        "content": "Use Dutch National Flag Algorithm. whenever  u r given a 3 distinct integer, and asked to sort. "
                    },
                    {
                        "username": "imraklr",
                        "content": "dude this question was just asked in my interview and I could not answer it. I did this question by replicating a code behavior and I forgot the solution. Can anyone suggest a better approach to Competitive Coding and DSA?"
                    },
                    {
                        "username": "125156048",
                        "content": "rip djikstra"
                    },
                    {
                        "username": "RudrSharma",
                        "content": "can we sole this question in O(nlogn)\\nvoid merge (vector<int> & v1 , vector <int> & v2 , vector <int> & nums){\\n    int a  = 0 , b = 0 , k = 0 ; \\n    while(a < v1.size() && b < v2.size() ){\\n        if (v1[a] < v2[b]){\\n            nums[k++] = v1[a++] ; \\n        }\\n        else nums[k++] = v2[b++] ; \\n    }\\n    if (a == v1.size() ) while(b < v2.size() ) nums[k++] = v2[b++] ; \\n    else if ( b == v2.size()) while(a < v1.size() ) nums[k++] = v1[a++] ; \\n}\\n\\nvoid mergesort (vector <int> & nums ){\\n    int n = nums.size() ; \\n    if (n == 1) return ;  \\n    int n1 = n / 2 , n2 = n - (n/2) ; \\n    vector <int> v1(n1) , v2(n2) ;\\n    for (int a = 0 ;a < n1 ;a++){\\n        v1[a] = nums[a] ;\\n    } \\n    for (int b = 0 ;b < n2 ; b++){\\n        v2[b] = nums[b+n1] ;\\n    }\\n    mergesort (v1) ; \\n    mergesort(v2) ; \\n    merge(v1 ,v2, nums) ; \\n    v1.clear () ; \\n    v2.clear () ;   \\n} \\n    void sortColors(vector<int>& nums) {\\n        \\n        return mergesort(nums) ; \\n    }"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "Yes, normal sort will work but that\\'s not the point\\nIf you were to solve with selection sort, nums.sort(), this won\\'t really be medium"
                    },
                    {
                        "username": "dpmax11",
                        "content": "nums.sort()"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "If i use counting sort , would that still be considered O(1) since it\\'s just 3 flags"
                    },
                    {
                        "username": "Pranshu_682",
                        "content": "func sortColors(nums []int)  {\\n    flag0 := false\\n    for i := 0; i<len(nums); i++ {\\n        if flag0 == false {\\n            if nums[i] != 0 {\\n                flag0 = true\\n                i--\\n            }\\n            continue\\n        }\\n        if nums[i] == 1 {\\n            continue\\n        } else if nums[i] == 0 {\\n            if i == 0 {\\n                continue\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append([]int{0}, nums...)\\n            i++\\n        } else if nums[i] == 2 {\\n            if i == len(nums)-1 {\\n                break\\n            }\\n            nums = append(nums[:i], nums[i+1:]...)\\n            nums = append(nums, 2)\\n            i--\\n        }\\n        fmt.Println(nums)\\n    }\\n    fmt.Println(nums)\\n}\\n\\nCan anyone tell me why this go code doesn\\'t work"
                    },
                    {
                        "username": "raaven_4321",
                        "content": "lol"
                    },
                    {
                        "username": "Rohit___mh09",
                        "content": "Use simple sorting algorithm. "
                    }
                ]
            },
            {
                "id": 1995844,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1973132,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1964209,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1957407,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1944624,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1937405,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1930329,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1927003,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1915656,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1902567,
                "content": [
                    {
                        "username": "Shanthinath",
                        "content": "\\nStriver approach \\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int low=0,mid=0,high=n-1;\\n        while(mid<=high)\\n        {\\n            if(nums[mid]==0)\\n            {\\n                swap(nums[low],nums[mid]);\\n                mid++;\\n                low++;\\n            }\\n            else if(nums[mid]==1)\\n            {\\n                mid++;\\n            }\\n            else\\n            {\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        }\\n\\n    }\\n};"
                    },
                    {
                        "username": "Adarsh_Manjunath_Naik",
                        "content": "Selection Sort Application question . \\n\\n"
                    },
                    {
                        "username": "smit_02",
                        "content": "The desperate urge to write `nums.sort()`. But not the way to solve this. "
                    },
                    {
                        "username": "iam_gauravkumar",
                        "content": "We can use Dutch National Flag algorithm."
                    },
                    {
                        "username": "apexabim09",
                        "content": "DNF algorithm is the key"
                    },
                    {
                        "username": "aseshbasub1",
                        "content": "This isnt accepted here in leetcode but runs fine on my laptop ide. why?\\na,b,c=[],[],[]\\nfor i in nums:\\n    if i==0:\\n        a.append(i)\\n    elif i==1:\\n        b.append(i)\\n    elif i==2:\\n        c.append(i)\\nnums=a+b+c\\n"
                    },
                    {
                        "username": "4mithm",
                        "content": "If I am creating a new list of a+b+c and sending its reference to the variable \"nums\", there is a possibility that LeetCode is still referring to the old \"nums\" reference."
                    },
                    {
                        "username": "gs9672",
                        "content": "[@JackWoah](/JackWoah) what is difference between both like nums[]=a+b+c and nums[:]=a+b+c"
                    },
                    {
                        "username": "JackWoah",
                        "content": "nums[:]=a+b+c will work"
                    },
                    {
                        "username": "piyush_11",
                        "content": "int low = 0, mid = 0, high = n - 1; // 3 pointers\\n\\n        while (mid <= high) {\\n            if (arr[mid] == 0) {\\n                // swapping arr[low] and arr[mid]\\n                int temp = arr[low];\\n                arr[low] = arr[mid];\\n                arr[mid] = temp;\\n\\n                low++;\\n                mid++;\\n\\n            } else if (arr[mid] == 1) {\\n                mid++;\\n\\n            } else {\\n                // swapping arr[mid] and arr[high]\\n                int temp = arr[mid];\\n                arr[mid] = arr[high];\\n                arr[high] = temp;\\n\\n                high--;\\n            }\\nusing Dutch National Flag Algorithm -- one pas  - O(N) SC - O(1).   (JAVA)\\n"
                    },
                    {
                        "username": "sahil_gpt11",
                        "content": "why can\\'t we use mergesort here?"
                    },
                    {
                        "username": "kokushibo627",
                        "content": "you can use merge sort, but the complexity would be O(nlogn), while by using DNF Algo/3 way partitioning, we do it in O(n) and the array is traversed just once\\nyou can also use 2 pass algorithm to do it in O(n), but that requires to traverse the array twice\\n"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "why is this code giving a wrong output?\\ninstead of taking if ,else,else if conditions i have taken 3 if conditions why is it wrong?\\n\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        //DNF SORT\\n        int low  =0, mid =0;\\n        int high = nums.size() - 1;\\n        while(mid<=high){\\n            if(nums[mid] == 1){\\n                mid++;\\n            }\\n            if(nums[mid] == 0){\\n                swap(nums[low],nums[mid]);\\n                low++;\\n                mid++;\\n            }\\n            if(nums[mid] == 2){\\n                swap(nums[mid],nums[high]);\\n                high--;\\n            }\\n        } \\n    }\\n};"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "[@mohdsiddiq74432](/mohdsiddiq74432)  if nums[mid] condition evaluates how is mid incremented?\\n "
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "because if u r not using \"else if\" then the code evaluates for nums[mid] after every if statement, where mid is incremented...hence usage of else if avoids re evalution of nums[mid] in the same iteration. "
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "I wonder why two pointer one from beginning and one from end while(l<=r) with swapping and conditions is not sorting the array\\n"
                    }
                ]
            },
            {
                "id": 1897980,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1897348,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1889478,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1873492,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1865732,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1864644,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1860568,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1856798,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1850714,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1849471,
                "content": [
                    {
                        "username": "NidhiChaudhary2002",
                        "content": "If anyone wondering about it being a medium level ques .This question aims to make you learn Dutch National Flag Algorithm."
                    },
                    {
                        "username": "BobIAmCalled",
                        "content": "My Python3 code works fine when I run it on my own laptop, but on LeetCode it returns the wrong output. Why is this?\\n\\nCode:\\n\\n    class Solution:\\n        def sortColors(self, nums: List[int]) -> None:\\n            for i in range(len(nums)):\\n                if nums[len(nums) - 1 - i] == 2:\\n                    toAdd = nums.pop(len(nums) - 1 - i)\\n                    nums = nums + [toAdd]\\n            for i in range(len(nums)):\\n                if nums[i] == 0:\\n                    nums = [nums.pop(i)] + nums\\n        \"\"\"\\n        Do not return anything, modify nums in-place instead.\\n        \"\"\"\\n\\nSpecifically, with the input [2,0,2,1,1,0] it correctly returns [0,0,1,1,2,2] on my laptop, but returns [2,0,1,1,0] on LeetCode.\\n\\nSimilarly, with the input [2,0,1] it correctly returns [0,1,2] on my laptop, but returns [0,1] on LeetCode.\\n"
                    },
                    {
                        "username": "satyam2303",
                        "content": "i only did\\nsort(nums.begin(),nums.end());\\nand it will get accepted"
                    },
                    {
                        "username": "niteshsaxena03",
                        "content": "but thats not the way,how it should be done"
                    },
                    {
                        "username": "NIRBHAI1729",
                        "content": "we shouldn\\'t use any inbuilt functions "
                    },
                    {
                        "username": "kalebalti",
                        "content": "Isn\\'t it just fancy type of asking \"do any kind of sorting in increasing order\"?"
                    },
                    {
                        "username": "2004divija",
                        "content": " void sortColors(vector<int>& nums) {\\n        for(int i =0;i<nums.size();i++)\\n        {\\n            for(int j =i+1;j<nums.size();j++)\\n            {\\n                if(nums[i]>nums[j])\\n                {\\n                    swap(nums[i],nums[j]);\\n                }\\n                else\\n                {\\n                    continue;\\n                }\\n            }\\n        }\\n\\n    }"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "princetiwari97940",
                        "content": "can\\'t we just sort using any sorting algo ?"
                    },
                    {
                        "username": "mohdsiddiq74432",
                        "content": "No sorting Algo can do it in one pass."
                    },
                    {
                        "username": "AmSumit02",
                        "content": "I have implemented it using multiset. I am getting the right answer but still, the editor is saying it\\'s wrong.\\n `class Solution {\\npublic:\\n    \\n    vector<int> sortColors(vector<int>& nums) {\\n    \\n        multiset<int> mult(nums.begin(),nums.end());\\n        vector<int> v;\\n        \\n        for(auto x : mult){\\n           v.push_back(x);\\n        }\\n        return v;\\n    }\\n};\\n\\'\\n"
                    },
                    {
                        "username": "Hiding_as",
                        "content": "Just count the number of 0s 1s and 2s passing once. Rewrite the original array using the count as reference? "
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Since there are only three numbers in an array,  one type of partitions can guarantee this distribution"
                    }
                ]
            },
            {
                "id": 1847038,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1845968,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1814236,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1809906,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1808524,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1804334,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1794072,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1794071,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1781001,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1760155,
                "content": [
                    {
                        "username": "JainSarthak19",
                        "content": "im not able to use frequency method can anyone help me out here.!!"
                    },
                    {
                        "username": "nurbolnygmanov",
                        "content": "Dijkstra three way partition can help to solve in O(n)"
                    },
                    {
                        "username": "RECRUITER_1-",
                        "content": "  `   ArrayList<Integer> list= new ArrayList<>();\\n\\n        int fir=0;\\n        for(int i=0;i<nums.length;i++){\\n            if(fir==nums[i]){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==1){\\n                list.add(nums[i]);\\n            }\\n        }\\n        for(int i=0;i<nums.length;i++){\\n            if(nums[i]==2){\\n                list.add(nums[i]);\\n            }\\n        }\\n        System.out.println(list);`\\n\\ncan anyone tell me what is wrong with this solution ,because when i am running it in the intellij it is showing the correct output but here in leet code it is showing wrong output"
                    },
                    {
                        "username": "hkumar0132",
                        "content": "This is the kind of problem you should have solved before going for an interview. Btw it\\'s a really bad interview problem imho."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Why? There are much more complex problems available than this one"
                    },
                    {
                        "username": "Rajmehra09887766",
                        "content": " `your inline code...your inline code...\\n\\n`class Solution {\\n    public void sortColors(int[] nums) {\\n        for(int i=0; i<nums.length;i++){\\n         int j=i-1;\\n         while(j>=0){\\n            if(nums[i]<nums[j]){\\n                int c=nums[i];\\n                nums[i]=nums[j];\\n                nums[j]=c;\\n            i=j;\\n            \\n            }\\n            \\n            j--;\\n             }\\n        }\\n\\n        \\n    }\\n}\\n\\n\\n\\neasy soln for short an array;"
                    },
                    {
                        "username": "mohitgarg85",
                        "content": "optimal solution of this question will be done by dutch flag algorithm.\\nI am attaching the link of that algorithm within this post.\\n\\nhttps://takeuforward.org/data-structure/sort-an-array-of-0s-1s-and-2s/\\nhttps://www.youtube.com/watch?v=oaVa-9wmpns"
                    },
                    {
                        "username": "Ryuk00",
                        "content": "I don\\'t know why this is not working Can Anyone help me by reviewing my solution (in cpp)\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n    int l=0,m=0,h=nums.size()-1;\\n    while(m<=h){\\n        if(nums[m]==0)swap(nums[m++],nums[l++]);\\n        if(nums[m]==2)swap(nums[m],nums[h--]);\\n        if(nums[m]==1)m++;\\n    }\\n    }\\n};"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": "using three pointet technique"
                    },
                    {
                        "username": "SharmaAyush",
                        "content": " 100 % beat time\\n\\n\\n\\nclass Solution {\\npublic:\\n      void sortColors(vector<int>&arr)\\n    {\\n    int n= arr.size();\\n\\n    int curr = 0;\\n    int left  =0;\\n    int right = n-1;\\n\\n    while(curr <=right){\\n\\n        if(arr[curr] ==0){\\n            swap(arr[curr],arr[left]);\\n            curr++;\\n            left++;\\n        }else if(arr[curr] ==2){\\n            swap(arr[curr],arr[right]);\\n            right--;\\n        }\\n        else{\\n            curr++;\\n        }\\n    }\\n\\n}   \\n\\n\\n};"
                    },
                    {
                        "username": "shekharaditya",
                        "content": "million dollar code : )\\n sort(nums.begin(),nums.end());"
                    },
                    {
                        "username": "ac2147020",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(nums[i]==0)a++;\\n          if(nums[i]==1)b++;\\n           if(nums[i]==2)c++;\\n        }\\n       \\n        for(int i=0;i<a;i++)\\n        {\\n            nums[i]=0;\\n            \\n\\n        }\\n      \\n         for(int i=0;i<b;i++)\\n        {\\n            nums[i+a]=1;\\n\\n        }\\n for(int i=0;i<c;i++)\\n        {\\n            nums[i+b+a]=2;\\n\\n        }\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1757903,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1754129,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1751601,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1748383,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1745693,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1741856,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1735133,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1729439,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1726503,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1726501,
                "content": [
                    {
                        "username": "shivangisinghhappy",
                        "content": "I am very confused with this problem, this is the code which is passing nearly half the test cases.\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n        int left = 0;\\n        int right = nums.size()-1;\\n\\n        for (int k=0; k<nums.size(); k++) {\\n\\n            if (right<k) break;\\n\\n            if (nums[left] > nums[right]) {\\n                swap(nums[left], nums[right]);\\n            }\\n\\n            if (k>left && nums[k] < nums[left]) {\\n                swap(nums[k], nums[left]);\\n            }\\n\\n            if (k<left && nums[k] > nums[left]) {\\n                swap(nums[left], nums[k]);\\n            }\\n\\n            if (nums[k] > nums[right]) {\\n                swap(nums[k], nums[right]);\\n            }\\n\\n            if (nums[left] == 0) left++;\\n            if (nums[right] == 2) right--;\\n\\n        }\\n    }\\n};`\\nIf anyone can help how can I improve this code to submit other test cases."
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "ADNAN56",
                        "content": "use bucket sort\\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "question based on quick sort -> partition function \\nsimply simple approch with one extra pointer fixed at end  "
                    },
                    {
                        "username": "tapegun",
                        "content": "I\\'m such a beta I used an ORDERED hashmap lol"
                    },
                    {
                        "username": "ACoder07",
                        "content": "Doing question using simple stack method is a correct approach?"
                    },
                    {
                        "username": "Mohsin_Qureshi",
                        "content": "count 0\\'s , 1\\'s , and 2\\'s in array \\nand iterate through array again and chand the index values from start to the count of the respective numbers.\\n"
                    },
                    {
                        "username": "kamdarveer",
                        "content": "Brute force approach with time complexity as O(n)\\n\\n `class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n\\n    vector<int> ans;\\n    int n= (int)nums.size();\\n        \\n        int red=0;\\n        int white=0;\\n        int blue=0;\\n\\n        //Counting the number of colors!\\n\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            red++;\\n\\n            else if(nums[i]==1)\\n            white++;\\n\\n            else\\n            blue++;\\n        }\\n\\n        for(int i=0; i<red;i++)\\n        {\\n            nums[i]=0;\\n        }\\n\\n        for(int i=red; i<red+white ; i++)\\n        {\\n            nums[i]=1;\\n        }\\n        \\n        for(int i=red+white; i<n;i++)\\n        {\\n            nums[i]=2;\\n        }\\n    }\\n};`"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": "beats 100%  C++"
                    },
                    {
                        "username": "gauravkumar050996",
                        "content": " `your inline code...your inline code...`class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n     int p1 = 0;\\n     int p2 = 0;\\n\\n     for(int i=0; i<nums.size(); i++)\\n     {\\n         if(nums[i]==0)\\n         {\\n             nums[i] = 2;\\n             nums[p2++] = 1;\\n             nums[p1++] = 0;\\n         }\\n         else if(nums[i]==1)\\n         {\\n                nums[i] = 2;\\n                nums[p2++] =1; \\n         }\\n     }\\n\\n        \\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1721261,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1721212,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1715502,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1710926,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1710925,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1707308,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1706547,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1702326,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1702278,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1699978,
                "content": [
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/75_sort_colours.cpp"
                    },
                    {
                        "username": "pathak_priya",
                        "content": "This can be solved in single pass and using constant space using dutch flag algorithm."
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n=nums.size();\\n        int a=0,b=0,c=n-1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n            {\\n                swap(nums[i],nums[a]);\\n                a++;\\n            }\\n            else if(nums[i]==2)\\n            {\\n                swap(nums[i],nums[c]);\\n                c--,n--,i--;\\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "gauravsinghbhadauriya06",
                        "content": "Most Optimized"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": "class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "Praveensarathy",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] a) {\\n\\t\\tint j=0,z=0,t=0,o=0;\\n\\t\\tint res[] = new int[a.length];\\n\\t\\tfor(int i:a) {\\n\\t\\t\\tif(i==0) {\\n\\t\\t\\t\\tz++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==1) {\\n\\t\\t\\t\\to++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(i==2) {\\n\\t\\t\\t\\tt++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile(z!=0) {\\n\\t\\t\\ta[j++] =0;\\n\\t\\t\\tz--;\\n\\t\\t}\\n\\t\\twhile(o!=0) {\\n\\t\\t\\ta[j++] =1;\\n\\t\\t\\to--;\\n\\t\\t}\\n\\t\\twhile(t!=0) {\\n\\t\\t\\ta[j++] =2;\\n\\t\\t\\tt--;\\n\\t\\t}\\n    }\\n}"
                    },
                    {
                        "username": "VISHNUPRATAPSINGH",
                        "content": " `your inline code...your inline code...`class Solution {\\n    public void sortColors(int[] nums) {\\n        int mid =0;\\n        int left =0; \\n        int right = nums.length-1;\\n\\n       while(mid<=right){\\n           if(nums[mid]==0){\\n               int temp = nums[left];\\n               nums[left]=nums[mid];\\n               nums[mid]=temp;\\n               left++;\\n               mid++;\\n           }else if(nums[mid] == 2){\\n               int temp = nums[mid];\\n               nums[mid]=nums[right];\\n               nums[right]=temp;\\n               \\n               right--;\\n           }else if(nums[mid]==1){\\n               mid++;\\n           }\\n       }\\n    }\\n}"
                    },
                    {
                        "username": "madhusweety",
                        "content": "worst it\\'s working in my normal compiler"
                    },
                    {
                        "username": "DorukYelken",
                        "content": "My code is working on Eclipse but it is giving this error in leetcode.\\nMethod sortColors in class Solution cannot be applied to given types; [in __Driver__.java]"
                    },
                    {
                        "username": "Azmankhan",
                        "content": "void sortColors(vector<int>& nums) {\\n        sort (nums.begin(), nums.end());\\n    }"
                    },
                    {
                        "username": "thanmaisai",
                        "content": "Java Solution with commented code and basic logic\\n\\n**Logic:**\\nlow and mid = 0 and high = nums.length \\nmid == 0 \\u21D2 swap low and mid then mid++,low++\\nmid == 1 \\u21D2 mid++ mid == 2 =\\u21D2 swap mid and high then high--\\n\\n**Code**\\n```\\n class  Solution {\\n    public  void  sortColors(int[] nums)\\n    {\\n     //step1: first declare the low,mid,high and temp for swapping later\\n      int  low = 0;\\n     int  mid = 0;\\n     int  high = nums.length-1;\\n     int  temp;\\n     //step2: use loop to iterate nums[] and switch case to see if value is 0 or 1 or 2\\n    while(mid<=high){ // because the loop wont swap if mid>high\\n        switch(nums[mid]){\\n          case  0: // now as mid == 0 swap mid with low and increment mid and low by 1\\n             temp = nums[low];\\n             nums[low] = nums[mid];\\n             nums[mid] = temp;\\n             low++;mid++;break;\\n\\n         case  1:// now as mid == 1 we will just increment mid by 1\\n         mid++; break;\\n\\n          case  2:// as mid == 2 swap mid with high and only decrement high by 1\\n           temp = nums[mid];\\n           nums[mid] = nums[high];\\n           nums[high] = temp;\\n          high--;\\n          break;\\n             } // end of switch\\n         } //end of while\\n     }\\n}\\n```"
                    }
                ]
            },
            {
                "id": 1694078,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1694074,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1691806,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1687277,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1682935,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1678850,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1676308,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1671629,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1664998,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            },
            {
                "id": 1657802,
                "content": [
                    {
                        "username": "Anonymous_user_79",
                        "content": "Dutch National Flag Algo:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int i=0,j=0,r=nums.size()-1;\\n        while(j<=r)\\n        {\\n            switch(nums[j])\\n            {\\n                case 0: swap(nums[i++],nums[j++]);\\n                        break;\\n                case 1: j++;\\n                        break;\\n                case 2: swap(nums[j],nums[r--]);\\n                        break;                \\n            }\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Anonymous_user_79",
                        "content": "Counting Sort CPP Solution:\\nclass Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        int n = nums.size();\\n        int c1=0,c2=0,c3=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(nums[i]==0)\\n                  c1++;\\n            else if(nums[i]==1)\\n                  c2++;\\n            else \\n                  c3++;            \\n        } \\n        int j=0;\\n        for(;j<c1;j++)\\n        {\\n            nums[j]=0;\\n        }\\n        for(;j<c2+c1;j++)\\n        {\\n            nums[j]=1;\\n        }\\n        for(;j<c1+c2+c3;j++)\\n        {\\n            nums[j]=2;\\n        }\\n    }\\n};"
                    },
                    {
                        "username": "Harshal-Tupe",
                        "content": "\n// C++ Solution  \nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n             int zero = 0;\n             int one = 0;\n             int two = 0;\n        int s = nums.size();\n        vector<int> ans;\n        for(int i = 0; i<s; i++){\n            if(nums[i] == 0){\n                zero++;\n            }\n            if(nums[i] == 1){\n                one++;\n            }\n            if(nums[i] == 2){\n                two++;\n            }\n        }\n        nums.clear();\n        for(int i = 0; i<zero; i++){\n            nums.push_back(0);\n        }\n         for(int i = zero; i<zero+one; i++){\n            nums.push_back(1);\n        }\n         for(int i = zero+one; i<s; i++){\n            nums.push_back(2);\n        } \n    }\n};"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9 3 DIFFERENT APPROACHES | UBER\\uD83D\\uDE97 SDE-1 INTERVIEW\\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "bekki3",
                        "content": "Best way is to use QuickSort. "
                    },
                    {
                        "username": "gargie20",
                        "content": "Can we solve this question using Arrays.sort(arr) ??"
                    },
                    {
                        "username": "gargie20",
                        "content": "[@yashodint](/yashodint) okay. Thanks \\n"
                    },
                    {
                        "username": "yashodint",
                        "content": "Yes, you can. but you need to solve the problem in O(n) T.C. Arrays.sort() has O(nlogn) T.C."
                    },
                    {
                        "username": "Mridulcse",
                        "content": "https://www.youtube.com/watch?v=9pdkbqGwUhs\\nsee this video,you will understand it better.\\n\\n `public void sortColors(int[] nums) {\\n        int start = 0;\\n        int mid = 0;\\n        int high = nums.length-1;\\n\\n        while(mid<=high)\\n        {\\n            if(nums[mid] == 0)\\n            {\\n                int temp = nums[mid];\\n                nums[mid] = nums[start];\\n                nums[start] = temp;\\n                start++;\\n                mid++;\\n            }else if(nums[mid] == 1)\\n            {\\n                mid++;\\n            }else{\\n                int temp = nums[mid];\\n                nums[mid] = nums[high];\\n                nums[high] = temp;\\n                high--; \\n            }\\n        }\\n    }`"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# 🚩 3 DIFFERENT APPROACHES | UBER🚗 SDE-1 INTERVIEW\n\nhttps://leetcode.com/problems/sort-colors/solutions/2358550/3-different-approaches-uber-sde-1-interview/"
                    },
                    {
                        "username": "Pranay_24",
                        "content": "class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        q = nums.count(\"0\")\\n        r = nums.count(\"1\")\\n        s = nums.count(\"2\")\\n        nums.clear()\\n        for i in range(q):\\n            nums.append(\"0\")\\n        for i in range(r):\\n            nums.append(\"1\")\\n        for i in range(s):\\n            nums.append(\"2\")\\n        return nums\\n\\n\\nwhy isnt it working?"
                    },
                    {
                        "username": "PhilipSmith",
                        "content": "Problem should really be rated easy. No difficult algorithmic trick to memorize here, just think about the problem for a moment."
                    }
                ]
            }
        ]
    },
    {
        "title": "Combine Two Tables",
        "question_content": "<p>Table: <code>Person</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| personId    | int     |\n| lastName    | varchar |\n| firstName   | varchar |\n+-------------+---------+\npersonId is the primary key (column with unique values) for this table.\nThis table contains information about the ID of some persons and their first and last names.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Address</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| addressId   | int     |\n| personId    | int     |\n| city        | varchar |\n| state       | varchar |\n+-------------+---------+\naddressId is the primary key (column with unique values) for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to report the first name, last name, city, and state of each person in the <code>Person</code> table. If the address of a <code>personId</code> is not present in the <code>Address</code> table, report <code>null</code> instead.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1        | Wang     | Allen     |\n| 2        | Alice    | Bob       |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city          | state      |\n+-----------+----------+---------------+------------+\n| 1         | 2        | New York City | New York   |\n| 2         | 3        | Leetcode      | California |\n+-----------+----------+---------------+------------+\n<strong>Output:</strong> \n+-----------+----------+---------------+----------+\n| firstName | lastName | city          | state    |\n+-----------+----------+---------------+----------+\n| Allen     | Wang     | Null          | Null     |\n| Bob       | Alice    | New York City | New York |\n+-----------+----------+---------------+----------+\n<strong>Explanation:</strong> \nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.\n</pre>\n",
        "solutions": [
            {
                "id": 2593063,
                "title": "2-ways-to-write-the-same-query-using-left-join-easy-explanation",
                "content": "### **Explanation:**\\nThe questuion asks us to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\\n\\nLEFT JOIN works here since it exactly does the same. It returns all the records from the 1st table and the corresponding information from the 2nd table. If there\\'s no matching data in the 2nd table, it returns NULL for those fields.\\n\\nNow the same query can be written in 2 ways. Here they are :\\n\\n#### **1st way (table1 LEFT JOIN table2 ON condition)**\\n```\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P LEFT JOIN Address A\\non P.personId = A.personId\\n```\\n\\n#### **2nd way (table1 LEFT JOIN table2 USING column_name)**\\n```\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P\\nLEFT JOIN Address A USING (personId)\\n```\\n\\nIf it helped or you learned a new way, kindly upvote. Thanks :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P LEFT JOIN Address A\\non P.personId = A.personId\\n```\n```\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P\\nLEFT JOIN Address A USING (personId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52928,
                "title": "its-a-simple-question-of-left-join-my-solution-attached",
                "content": "    SELECT Person.FirstName, Person.LastName, Address.City, Address.State from Person LEFT JOIN Address on Person.PersonId = Address.PersonId;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "    SELECT Person.FirstName, Person.LastName, Address.City, Address.State from Person LEFT JOIN Address on Person.PersonId = Address.PersonId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2498322,
                "title": "two-methods-by-join-and-union",
                "content": "*\\uD83D\\uDE0ADO UPVOTE IF YOU FIND HELPFUL \\uD83D\\uDE0A*\\n\\n**METHOD -> JOIN**\\n```\\nSELECT p.firstName, p.lastName, a.city, a.state \\nFROM Person p left join Address a\\nON p.personId = a.personId;\\n```\\n**METHOD2 -> UNION**\\n```\\nSELECT p.firstName, p.lastName, a.city, a.state from Person p, Address a\\nWHERE p.personId = a.personId\\nUNION\\nSELECT  p.firstName, p.lastName, null, null from Person p\\nWHERE p.personId NOT IN (Select personId from Address);\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT p.firstName, p.lastName, a.city, a.state \\nFROM Person p left join Address a\\nON p.personId = a.personId;\\n```\n```\\nSELECT p.firstName, p.lastName, a.city, a.state from Person p, Address a\\nWHERE p.personId = a.personId\\nUNION\\nSELECT  p.firstName, p.lastName, null, null from Person p\\nWHERE p.personId NOT IN (Select personId from Address);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1757541,
                "title": "simple-2-lines-with-explanation-you-ll-love-it-guaranteed",
                "content": "Here we have to use Outer Joins in order to get expected results. because we want every row from Person( which is we are specifying first using SELECT statement.) table so we are using LEFT JOIN on contrary if we wanted every row from address table we would have used RIGHT JOIN. I hope you have understood.\\n\\nHow to remember what is left, what is right?\\n-Simple\\nWhatever you are accessing first = LEFT -----  1 = LEFT\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t2 = RIGHT\\n\\n```\\nSELECT p.firstName, p.lastName, a.city, a.state FROM Person p  --accessing first hench LEFT\\nLEFT JOIN Address a USING (personId) -- accessing second hence RIGHT. but we want every row in person so LEFT JOIN.\\n```\\n\\nIf you Learned something new please give it upvote;\\notherwise thank you for having a look \\uD83D\\uDE4F\\uD83C\\uDFFB",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.firstName, p.lastName, a.city, a.state FROM Person p  --accessing first hench LEFT\\nLEFT JOIN Address a USING (personId) -- accessing second hence RIGHT. but we want every row in person so LEFT JOIN.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52930,
                "title": "comparative-solution-between-left-join-left-join-using-and-natural-left-join",
                "content": "basic left join: 902ms.\\n\\n    SELECT FirstName, LastName, City, State\\n    FROM Person\\n    LEFT JOIN Address\\n    ON Person.PersonId = Address.PersonId;\\n\\nleft join + using: 907ms\\n\\n    SELECT FirstName, LastName, City, State\\n    FROM Person\\n    LEFT JOIN Address\\n    USING(PersonId);\\n\\nnatural left join: 940ms\\n\\n    SELECT FirstName, LastName, City, State\\n    FROM Person\\n    NATURAL LEFT JOIN Address;\\n\\nleft join is the fastest compare to the two others.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "basic left join: 902ms.\\n\\n    SELECT FirstName, LastName, City, State\\n    FROM Person\\n    LEFT JOIN Address\\n    ON Person.PersonId = Address.PersonId;\\n\\nleft join + using: 907ms\\n\\n    SELECT FirstName, LastName, City, State\\n    FROM Person\\n    LEFT JOIN Address\\n    USING(PersonId);\\n\\nnatural left join: 940ms\\n\\n    SELECT FirstName, LastName, City, State\\n    FROM Person\\n    NATURAL LEFT JOIN Address;\\n\\nleft join is the fastest compare to the two others.",
                "codeTag": "Unknown"
            },
            {
                "id": 52931,
                "title": "why-cannot-using-where",
                "content": "    select p.FirstName, p.LastName, a.City, a. State\\n    from Person p, Address a \\n    where p.PersonId = a.PersonId;\\n\\ndidnt using sql for two years, might be a stupid question",
                "solutionTags": [],
                "code": "    select p.FirstName, p.LastName, a.City, a. State\\n    from Person p, Address a \\n    where p.PersonId = a.PersonId;\\n\\ndidnt using sql for two years, might be a stupid question",
                "codeTag": "Unknown"
            },
            {
                "id": 3823934,
                "title": "100-easy-fast-clean-solution",
                "content": "IF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE !\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT p.firstName,\\n       p.lastName,\\n       a.city,\\n       a.state \\nfrom Person p left outer join Address a \\non p.personId=a.personId;\\n```\\nIF THIS WILL BE HELPFUL TO YOU PLEASE UPVOTE \\u2705![5kej8w.jpg](https://assets.leetcode.com/users/images/f1e6cb67-cf9a-4ee0-be9d-f1a685709e13_1690464424.995609.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT p.firstName,\\n       p.lastName,\\n       a.city,\\n       a.state \\nfrom Person p left outer join Address a \\non p.personId=a.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3542837,
                "title": "easy-approach-left-join-using-simple-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMain focus of posting this solution to make you all aware of **USING()** function is SQL and how you use it make your code easier to understand.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n###### We will follow approaches of inner join in this: \\n\\nAt first we will get the required columns (attributes) from the tables then we will join them by using `LEFT JOIN` i.e.\\n\\n```\\nselect p.firstName , p.lastName, a.city , a.state \\n    from Person p LEFT JOIN Address a ........\\n``` \\n\\nThen the main thing comes what I am going to teach you guys\\n    \\n**Approach 1:**  Using conventional method by making equal both the attributes of the table to join them \\ni.e.     `on p.personId  = a.personId `\\n\\n**Approach 2:** We can see that both the attributes of the table to compare have same name i.e. personId, so instead of writing it multiple time we will use `USING()` function \\ni.e. `USING(personId)`\\n\\n\\n#### I hope this helps you understand it easily :) \\n\\n\\n# Code\\n\\n**Approach 1:**\\n```\\nselect p.firstName , p.lastName, a.city , a.state \\n    from Person p LEFT JOIN Address a on p.personId  = a.personId  \\n\\n```\\n\\n**Approach 2 :** Try learning this and implementing this in your another questions.\\n```\\nselect p.firstName , p.lastName, a.city , a.state \\n    from Person p LEFT JOIN Address a USING(personId) \\n\\n```\\n\\n![please-upvote-and.jpg](https://assets.leetcode.com/users/images/faf2f121-376c-4aac-943e-341e41d6c8aa_1684525186.4883614.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle",
                    "Database"
                ],
                "code": "```\\nselect p.firstName , p.lastName, a.city , a.state \\n    from Person p LEFT JOIN Address a ........\\n```\n```\\nselect p.firstName , p.lastName, a.city , a.state \\n    from Person p LEFT JOIN Address a on p.personId  = a.personId  \\n\\n```\n```\\nselect p.firstName , p.lastName, a.city , a.state \\n    from Person p LEFT JOIN Address a USING(personId) \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52932,
                "title": "my-solution-and-question-with-union",
                "content": "Just come up with this idea to do it. Does anyone have any advises to make it better?\\nBy the way, besides using join, does anybody have any idea to do it by using CASE? \\n```\\nSELECT per.FirstName, per.LastName, addr.City, addr.State\\nFROM Person per, Address addr\\nWHERE per.PersonId = addr.PersonId\\nUNION\\nSELECT per.FirstName, per.LastName, NULL as City, NULL as State\\nFROM Person per\\nWHERE per.PersonId NOT IN (SELECT PersonId from Address);\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT per.FirstName, per.LastName, addr.City, addr.State\\nFROM Person per, Address addr\\nWHERE per.PersonId = addr.PersonId\\nUNION\\nSELECT per.FirstName, per.LastName, NULL as City, NULL as State\\nFROM Person per\\nWHERE per.PersonId NOT IN (SELECT PersonId from Address);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 276217,
                "title": "mysql-outer-join-with-using",
                "content": "Hello,\\nI just want to share the fact that we can use `USING` instead of `ON`:\\n\\n```\\nSELECT FirstName, LastName, City, State\\nFROM Person LEFT JOIN Address USING (PersonId)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT FirstName, LastName, City, State\\nFROM Person LEFT JOIN Address USING (PersonId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3212884,
                "title": "175-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis problem can be solved using a LEFT JOIN to combine the Person and Address tables based on their common column personId. The query would look like this:\\n```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;\\n\\n```\\nHere, we select the firstName and lastName columns from the Person table, and the city and state columns from the Address table. We use a LEFT JOIN to combine the tables based on their personId columns. If a personId in the Person table doesn\\'t have a corresponding entry in the Address table, the city and state columns will be NULL. We then return the resulting table.\\n\\nThis query should produce the desired output:\\n```\\n+-----------+----------+---------------+----------+\\n| firstName | lastName | city          | state    |\\n+-----------+----------+---------------+----------+\\n| Allen     | Wang     | NULL          | NULL     |\\n| Bob       | Alice    | New York City | New York |\\n+-----------+----------+---------------+----------+\\n\\n```\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;\\n\\n```\n```\\n+-----------+----------+---------------+----------+\\n| firstName | lastName | city          | state    |\\n+-----------+----------+---------------+----------+\\n| Allen     | Wang     | NULL          | NULL     |\\n| Bob       | Alice    | New York City | New York |\\n+-----------+----------+---------------+----------+\\n\\n```\n```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1977552,
                "title": "clean-solution",
                "content": "```\\nSELECT p.firstName,\\n       p.lastName, \\n       a.city, \\n       a.state \\n  FROM Person p \\n  LEFT JOIN Address a ON a.personId = p.personId\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nSELECT p.firstName,\\n       p.lastName, \\n       a.city, \\n       a.state \\n  FROM Person p \\n  LEFT JOIN Address a ON a.personId = p.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2685050,
                "title": "combine-two-tables",
                "content": "```\\nSELECT firstName, lastName, city, state FROM Address\\nRIGHT JOIN Person\\nON Person.personId = Address.personId;\\n// upvote if helpful\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT firstName, lastName, city, state FROM Address\\nRIGHT JOIN Person\\nON Person.personId = Address.personId;\\n// upvote if helpful\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1071262,
                "title": "really-cute-solution",
                "content": "```\\nSELECT Person.FirstName, Person.LastName, Address.City, Address.State\\nFROM Person LEFT JOIN Address\\non Person.PersonId = Address.PersonId",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Person.FirstName, Person.LastName, Address.City, Address.State\\nFROM Person LEFT JOIN Address\\non Person.PersonId = Address.PersonId",
                "codeTag": "Unknown"
            },
            {
                "id": 834462,
                "title": "sql-left-join-simple-solution",
                "content": "```\\nSELECT FirstName, LastName, City, State\\nFROM Person left join Address\\non Person.PersonId = Address.PersonId\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT FirstName, LastName, City, State\\nFROM Person left join Address\\non Person.PersonId = Address.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2996381,
                "title": "mysql-solution",
                "content": "# Code 1\\n```\\n# Write your MySQL query statement below\\nselect firstName, lastName, city, state \\nfrom Person natural left join Address;\\n```\\n\\n# Code 2\\n```\\n# Write your MySQL query statement below\\nselect firstName, lastName, city, state \\nfrom Person left join Address on Person.personId = Address.personId;\\n```\\n\\n# Code 3\\n```\\n# Write your MySQL query statement below\\nselect firstName, lastName, city, state \\nfrom Person left join Address using(personId);\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect firstName, lastName, city, state \\nfrom Person natural left join Address;\\n```\n```\\n# Write your MySQL query statement below\\nselect firstName, lastName, city, state \\nfrom Person left join Address on Person.personId = Address.personId;\\n```\n```\\n# Write your MySQL query statement below\\nselect firstName, lastName, city, state \\nfrom Person left join Address using(personId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1538730,
                "title": "simple-left-join-solution",
                "content": "```\\nselect FirstName, LastName, City, State\\nfrom Person\\nleft join Address\\non Person.PersonId = Address.PersonId\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect FirstName, LastName, City, State\\nfrom Person\\nleft join Address\\non Person.PersonId = Address.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3955959,
                "title": "easy-solution",
                "content": "**SELECT Clause**: You want to select specific columns from both the Person and Address tables. These columns include firstName and lastName from the Person table, and city and state from the Address table.\\n\\n**FROM Clause**: You start by querying the Person table, denoted as p, and you want to perform a left join operation with the Address table, denoted as a.\\n\\n**LEFT JOIN**: The left join operation ensures that you include all rows from the Person table in the result, even if there\\'s no matching entry in the Address table for a specific person.\\n\\n**ON Clause**: The ON clause defines the condition for joining the two tables. In this case, you join the Person table with the Address table using the personId column as the common attribute. This ensures that you\\'re linking the right person with their corresponding address (if available).\\n\\n**Result**: The result will include all persons from the Person table. For each person, if there is a corresponding address entry in the Address table, the query will fetch the city and state. If there\\'s no corresponding address entry (as indicated by the left join), the city and state values will be NULL.\\n\\n\\nThis way, the query gives you a comprehensive overview of each person\\'s details along with their associated city and state information, or ***NULL*** values if an address is not available for that person.\\n\\nThe key to the correct query is to establish the join between the tables based on the personId column, which is the common identifier between the two tables.\\n\\n\\n\\n# Code\\n```\\nSELECT p.firstName, p.lastName, a.city, a.state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\n\\n \\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.firstName, p.lastName, a.city, a.state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\n\\n \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2665791,
                "title": "mysql-easy-beginner-friendly",
                "content": "```\\n\\n```# Write your MySQL query statement below\\n\\n select p.firstName,p.lastName,a.city,a.state\\n from Person as p left join Address as a\\n on p.personId=a.personId ;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2647401,
                "title": "two-approach-join-and-union-easy-to-understand",
                "content": "**METHOD -> JOIN**\\n\\nSELECT P.firstName, P.lastName, A.city, A.state \\nFROM Person P left join Address A\\nON P.personId = A.personId;\\n\\n\\n**METHOD2 -> UNION**\\n\\nSelect P.firstName, P.lastName,  A.city, A.state From Person P, Address A\\n    where P.personId=A.PersonId\\nUnion\\nSelect P.firstName, P.lastName, null, null From  Person P \\n    where p.personId not in (Select personId from Address)\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "**METHOD -> JOIN**\\n\\nSELECT P.firstName, P.lastName, A.city, A.state \\nFROM Person P left join Address A\\nON P.personId = A.personId;\\n\\n\\n**METHOD2 -> UNION**\\n\\nSelect P.firstName, P.lastName,  A.city, A.state From Person P, Address A\\n    where P.personId=A.PersonId\\nUnion\\nSelect P.firstName, P.lastName, null, null From  Person P \\n    where p.personId not in (Select personId from Address)\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2067725,
                "title": "easy-and-simple-solution-with-explanation",
                "content": "As we want to display first name, last name, city, and state of **each person** in the Person table. So we use **LEFT JOIN** here. \\n ![image](https://assets.leetcode.com/users/images/18579613-91be-4c19-ae24-c15af1400307_1653331994.4420538.jpeg)\\nThis diagram clears the the all doubt, why we are using **LEFT JOIN** as we want **each** person of person table.\\n```\\n# Write your MySQL query statement below\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\n    FROM Person LEFT JOIN Address \\n        ON Person.personId = Address.personId;\\n```\\n\\nRuntime: 403 ms, faster than 51.73% of MySQL online submissions for Combine Two Tables.\\nMemory Usage: 0B, less than **100.00%** of MySQL online submissions for Combine Two Tables.\\n\\n**Happy Coding** \\uD83D\\uDE0A!!!\\nIf you get value from this, then show some love by ***upvoting*** it !!",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\n    FROM Person LEFT JOIN Address \\n        ON Person.personId = Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1728755,
                "title": "mysql-easy-left-join-combine-two-tables",
                "content": "```\\nSELECT person.firstname, person.lastname, address.city, address.state \\nFROM person \\nLEFT OUTER JOIN address \\nON person.personid = address.personid;\\n```\\nPlease **UpVote**, if you understood the problem.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT person.firstname, person.lastname, address.city, address.state \\nFROM person \\nLEFT OUTER JOIN address \\nON person.personid = address.personid;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3919364,
                "title": "pandas-absolutely-100-beating-easy-solution",
                "content": "# Intuition\\nI love pandas and its simplicity)\\n# Approach\\nWe use the pandas \"merge\" function and combine two tables based on the left (person) by person IDs, if there is no such ID in the second table, then pandas will put \"Null\" value for us.\\n\\n\\n![Leercode 100% beating.png](https://assets.leetcode.com/users/images/679a1f65-cf2e-475c-95a0-1d8dc3f4fd47_1692209542.424886.png)\\n\\nUpvote please, if you like my solution, thanks <3\\n# Code\\n```\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    return pd.merge(left=person, right=address, how=\\'left\\', on=\\'personId\\')[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n```",
                "solutionTags": [
                    "Database",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    return pd.merge(left=person, right=address, how=\\'left\\', on=\\'personId\\')[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3523677,
                "title": "mysql-solution-for-combine-two-tables-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal of this SQL query is to retrieve the first name, last name, city, and state of all people in the Person table, along with their corresponding address information from the Address table \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Use a LEFT JOIN to join the Person table with the Address table on the PersonId column.\\n2. Select the FirstName, LastName, City, and State columns from the resulting joined table.\\n3. The LEFT JOIN ensures that all rows from the Person table are included in the result, even if there is no corresponding row in the Address table.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query depends on the size of the Person and Address tables and the efficiency of the database engine\\'s query optimizer. In general, the time complexity of a LEFT JOIN operation is O(m * n), where m is the number of rows in the left table (Person in this case) and n is the number of rows in the right table (Address in this case). However, the query optimizer may be able to optimize the query execution plan to reduce the actual time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this query depends on the size of the result set and the size of the columns being selected. In this case, the result set will have at most as many rows as the Person table, and each row will have four columns (FirstName, LastName, City, and State). Therefore, the space complexity is O(m), where m is the number of rows in the Person table.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect FirstName, LastName, City, State from Person as p left join Address as a on p.PersonId = a.PersonId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect FirstName, LastName, City, State from Person as p left join Address as a on p.PersonId = a.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2607373,
                "title": "175-combine-two-tables",
                "content": "```\\nSELECT person.firstName, person.lastName, address.city, address.state\\nFROM person\\nLEFT JOIN ADDRESS on address.personID = person.personID\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT person.firstName, person.lastName, address.city, address.state\\nFROM person\\nLEFT JOIN ADDRESS on address.personID = person.personID\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2420659,
                "title": "mysql-easy-understanding-left-join",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n____________________________________________________________________________________________________________________________\\n\\u2705 **MySQL Code :**\\n```\\nSelect firstName,lastName,city,state\\nFROM Person \\nLEFT JOIN Address\\n    on Person.PersonId=Address.PersonId;\\n\\n```\\n____________________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect firstName,lastName,city,state\\nFROM Person \\nLEFT JOIN Address\\n    on Person.PersonId=Address.PersonId;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 266706,
                "title": "simple-solution",
                "content": "select p.FirstName, p.LastName, a.City,a.State\\nfrom person as p\\nleft join Address as a\\non p.PersonId=a.PersonId;",
                "solutionTags": [],
                "code": "select p.FirstName, p.LastName, a.City,a.State\\nfrom person as p\\nleft join Address as a\\non p.PersonId=a.PersonId;",
                "codeTag": "Unknown"
            },
            {
                "id": 3467379,
                "title": "left-join-and-selecting-columns-to-pull",
                "content": "# Intuition\\nI need to merge both tables and pull four columns.\\n\\n# Approach\\nI pulled the four columns and joined the data tables using a LEFT JOIN.\\n\\n# Complexity\\n- Time complexity:\\nn/a\\n\\n- Space complexity:\\nn/a\\n\\n# Code\\n```\\nSelect Person.firstName,Person.lastName,Address.city,Address.state FROM Person\\nLEFT JOIN Address\\nOn Person.personId = Address.personId\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect Person.firstName,Person.lastName,Address.city,Address.state FROM Person\\nLEFT JOIN Address\\nOn Person.personId = Address.personId\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3303921,
                "title": "sql-server-clean-easy",
                "content": "Here\\'s an SQL query that should solve the problem:\\n\\n```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\nFROM Person LEFT JOIN Address\\nON Person.personId = Address.personId\\n```\\n\\nExplanation:\\n\\nWe perform a LEFT JOIN between the Person and Address tables using the personId column as the join condition. This will ensure that we keep all rows from the Person table, even if there is no corresponding row in the Address table.\\nWe select the firstName and lastName columns from the Person table, and the city and state columns from the Address table.\\nIf there is no corresponding row in the Address table, the values for city and state will be NULL.",
                "solutionTags": [],
                "code": "```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state\\nFROM Person LEFT JOIN Address\\nON Person.personId = Address.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3277421,
                "title": "mysql",
                "content": "# Please upvote guys!\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect firstName,lastName,city,state\\nfrom Person\\nleft join Address\\non person.personID  = Address.personID\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect firstName,lastName,city,state\\nfrom Person\\nleft join Address\\non person.personID  = Address.personID\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3254375,
                "title": "easy-sql-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.firstname,p.lastname,a.city,a.state from person p LEFT  OUTER JOIN address  a on p.PersonId=a.PersonId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.firstname,p.lastname,a.city,a.state from person p LEFT  OUTER JOIN address  a on p.PersonId=a.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2873490,
                "title": "mysql-using",
                "content": "\\n# Code\\n```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT JOIN Address\\nUSING (personId);\\n```\\n# Using clause\\nThere are matching column \\'personID\\' between 2 tables, by applying \\'Using\\' clause may help us spare some time.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT JOIN Address\\nUSING (personId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2616098,
                "title": "ms-sql-left-join-on",
                "content": "```\\nSELECT\\n    firstName,\\n    lastName,\\n    city,\\n    state\\nFROM\\n    Person AS P\\nLEFT JOIN\\n    Address AS A\\nON\\n    P.personId = A.personId\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    firstName,\\n    lastName,\\n    city,\\n    state\\nFROM\\n    Person AS P\\nLEFT JOIN\\n    Address AS A\\nON\\n    P.personId = A.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2569947,
                "title": "very-easy-solutions",
                "content": "```\\nselect firstName, lastName, city, state\\nfrom Person\\nleft join Address\\non Person.personId = Address.personId;\\n```",
                "solutionTags": [],
                "code": "```\\nselect firstName, lastName, city, state\\nfrom Person\\nleft join Address\\non Person.personId = Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2519789,
                "title": "175-combine-two-tables",
                "content": "```\\nSELECT person.firstName, person.lastName, address.city, address.state\\nFROM person\\nLEFT JOIN ADDRESS on address.personID = person.personID",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT person.firstName, person.lastName, address.city, address.state\\nFROM person\\nLEFT JOIN ADDRESS on address.personID = person.personID",
                "codeTag": "Unknown"
            },
            {
                "id": 2214137,
                "title": "mysql-left-join",
                "content": "```\\nSELECT P.FIRSTNAME, P.LASTNAME, A.CITY, A.STATE\\nFROM PERSON P LEFT JOIN ADDRESS A\\nON P.PERSONID = A.PERSONID\\n\\n```\\nPLEASE **UPVOTE**.",
                "solutionTags": [],
                "code": "```\\nSELECT P.FIRSTNAME, P.LASTNAME, A.CITY, A.STATE\\nFROM PERSON P LEFT JOIN ADDRESS A\\nON P.PERSONID = A.PERSONID\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2102871,
                "title": "sql-easy-sol",
                "content": "```\\n# Write your MySQL query statement below\\n# method 1\\n# note : we are using left join because we have to access all the rows from the person table. vice versa for right. \\nselect person.firstName, person.lastName, Address.city, Address.state\\nfrom person\\nLEFT JOIN Address \\non person.personId=Address.personId;\\n# method 2\\nselect firstName, lastName, city, state\\nfrom person\\nLEFT JOIN Address \\non person.personId=Address.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# method 1\\n# note : we are using left join because we have to access all the rows from the person table. vice versa for right. \\nselect person.firstName, person.lastName, Address.city, Address.state\\nfrom person\\nLEFT JOIN Address \\non person.personId=Address.personId;\\n# method 2\\nselect firstName, lastName, city, state\\nfrom person\\nLEFT JOIN Address \\non person.personId=Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2021881,
                "title": "union-solution-sql",
                "content": "```\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Person p, Address a\\nwhere p.personId = a.personId\\nunion\\nselect p.firstName, p.lastName, null, null \\nfrom Person p\\nwhere p.personId not in (select a.personId from Address a)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Person p, Address a\\nwhere p.personId = a.personId\\nunion\\nselect p.firstName, p.lastName, null, null \\nfrom Person p\\nwhere p.personId not in (select a.personId from Address a)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2004146,
                "title": "mysql-using-simple-l-r-join",
                "content": "select  \\nFirstName,\\nLastName, \\nCity, State from Person p \\nleft join Address a on p.PersonId = a.PersonId",
                "solutionTags": [],
                "code": "select  \\nFirstName,\\nLastName, \\nCity, State from Person p \\nleft join Address a on p.PersonId = a.PersonId",
                "codeTag": "Unknown"
            },
            {
                "id": 1930213,
                "title": "simple-and-easy-one-line-left-join-solution-faster",
                "content": "```\\nselect firstName,lastName,city,state from Person left join Address using (personId);\\n```",
                "solutionTags": [],
                "code": "```\\nselect firstName,lastName,city,state from Person left join Address using (personId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1791081,
                "title": "combine-two-tables-solution",
                "content": "SELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonId = Address.PersonId",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonId = Address.PersonId",
                "codeTag": "Unknown"
            },
            {
                "id": 1621703,
                "title": "mysql-solution",
                "content": "```\\nselect firstname, lastname, city, state \\nfrom person left join address\\non person.personid=address.personid;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect firstname, lastname, city, state \\nfrom person left join address\\non person.personid=address.personid;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1579091,
                "title": "simple-left-join",
                "content": "```\\n# Write your MySQL query statement below\\nselect firstName,lastName,city,state\\nfrom\\nperson\\nleft join\\naddress on person.personid=address.personid;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect firstName,lastName,city,state\\nfrom\\nperson\\nleft join\\naddress on person.personid=address.personid;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 224274,
                "title": "test-data-is-wrong",
                "content": "Test data is wrong.\\n```\\n{\"headers\": {\"Person\": [\"PersonId\", \"LastName\", \"FirstName\"], \"Address\": [\"AddressId\", \"PersonId\", \"City\", \"State\"]}, \"rows\": {\"Person\": [[1, \"Wang\", \"Allen\"]], \"Address\": [[1, 2, \"New York City\", \"New York\"]]}}\\n```\\nWhen you check the data for Address Table, PersonId is two (2) while the PersonId is one (1) in the Person Table. The join should not happen.\\nHow come people can pass this example?\\n",
                "solutionTags": [],
                "code": "```\\n{\"headers\": {\"Person\": [\"PersonId\", \"LastName\", \"FirstName\"], \"Address\": [\"AddressId\", \"PersonId\", \"City\", \"State\"]}, \"rows\": {\"Person\": [[1, \"Wang\", \"Allen\"]], \"Address\": [[1, 2, \"New York City\", \"New York\"]]}}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52936,
                "title": "so-watch-your-capitalization-carefully-uff01",
                "content": "\\n```\\nSELECT person.firstname,person.lastname,address.city,address.state \\nFROM person \\nLEFT JOIN address \\nON person.personid=address.personid\\nORDER BY person.personid;\\n```\\n\\u200bWRONG!!!\\n#\\u6ce8\\u610f\\u5927\\u5c0f\\u5199\\uff01\\uff01\\uff01\\n\\u200b\\n```\\nSELECT Person.FirstName,Person.LastName,Address.City,Address.State \\nFROM Person \\nLEFT JOIN Address \\nON Person.PersonId=Address.PersonId\\nORDER BY Person.PersonId;\\n```\\nRIGHT!!!",
                "solutionTags": [],
                "code": "```\\nSELECT person.firstname,person.lastname,address.city,address.state \\nFROM person \\nLEFT JOIN address \\nON person.personid=address.personid\\nORDER BY person.personid;\\n```\n```\\nSELECT Person.FirstName,Person.LastName,Address.City,Address.State \\nFROM Person \\nLEFT JOIN Address \\nON Person.PersonId=Address.PersonId\\nORDER BY Person.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051076,
                "title": "pandas-sql-easy-combine-two-tables",
                "content": "[See the Accepted and Successful Submission Detail](https://leetcode.com/submissions/detail/1050775699/)\\n```\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    # Let\\'s merge the two DataFrames using a left outer join on \\'personId\\'\\n    merged_df = pd.merge(person, address, on=\\'personId\\', how=\\'left\\')\\n    \\n    # Then we select the specific columns \\'firstName\\', \\'lastName\\', \\'city\\', and \\'state\\'\\n    selected_columns = merged_df[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n    \\n    return selected_columns\\n```\\n\\n**SQL**\\n[See the Accepted and Successful Submission Detail](https://leetcode.com/submissions/detail/1061396660/)\\n```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT OUTER JOIN address\\nON person.personId = address.personId;\\n```\\n\\n```\\n-- Selecting columns \"firstName,\" \"lastName,\" \"city,\" and \"state\" from the tables\\nSELECT firstName, lastName, city, state\\n\\n-- Specifying the source table as \"Person\" from which data will be retrieved\\nFROM Person \\n\\n-- Performing a LEFT OUTER JOIN between \"Person\" and \"address\" tables\\n-- This join combines records from both tables based on the condition that \"personId\" in \"Person\" matches \"personId\" in \"address\"\\nLEFT OUTER JOIN address\\nON person.personId = address.personId;\\n\\n```\\n\\n![image](https://assets.leetcode.com/users/images/f94d4271-69e7-4a44-aad2-db00c938b341_1695221837.87254.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    # Let\\'s merge the two DataFrames using a left outer join on \\'personId\\'\\n    merged_df = pd.merge(person, address, on=\\'personId\\', how=\\'left\\')\\n    \\n    # Then we select the specific columns \\'firstName\\', \\'lastName\\', \\'city\\', and \\'state\\'\\n    selected_columns = merged_df[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n    \\n    return selected_columns\\n```\n```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT OUTER JOIN address\\nON person.personId = address.personId;\\n```\n```\\n-- Selecting columns \"firstName,\" \"lastName,\" \"city,\" and \"state\" from the tables\\nSELECT firstName, lastName, city, state\\n\\n-- Specifying the source table as \"Person\" from which data will be retrieved\\nFROM Person \\n\\n-- Performing a LEFT OUTER JOIN between \"Person\" and \"address\" tables\\n-- This join combines records from both tables based on the condition that \"personId\" in \"Person\" matches \"personId\" in \"address\"\\nLEFT OUTER JOIN address\\nON person.personId = address.personId;\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3813470,
                "title": "easy-solution-with-left-join",
                "content": "# Code\\n```\\nSELECT p.firstName, p.lastName, a.city, a.state FROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT p.firstName, p.lastName, a.city, a.state FROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3739670,
                "title": "easy-mysql-solution-using-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3659411,
                "title": "ms-sql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P LEFT JOIN Address A\\non P.personId = A.personId\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P LEFT JOIN Address A\\non P.personId = A.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3479968,
                "title": "easy-to-understand-mysql-left-join",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT p.firstName,p.lastName,a.city,a.state FROM Person as P LEFT JOIN Address as a on p.personId=a.personId;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT p.firstName,p.lastName,a.city,a.state FROM Person as P LEFT JOIN Address as a on p.personId=a.personId;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3361601,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect Person.firstName, Person.lastName, Address.city, Address.state from person left join Address on Person.personId=Address.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect Person.firstName, Person.lastName, Address.city, Address.state from person left join Address on Person.personId=Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3266958,
                "title": "left-outer-join-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT FIRSTNAME,LASTNAME,CITY,STATE FROM PERSON LEFT OUTER JOIN ADDRESS ON (PERSON.PERSONID=ADDRESS.PERSONID);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT FIRSTNAME,LASTNAME,CITY,STATE FROM PERSON LEFT OUTER JOIN ADDRESS ON (PERSON.PERSONID=ADDRESS.PERSONID);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3265200,
                "title": "using-left-join-mysql",
                "content": "**USING LEFT JOIN**\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT Person.FirstName, Person.LastName, Address.City, Address.State \\nFROM Person \\nLEFT JOIN Address \\nON Person.PersonId = Address.PersonId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT Person.FirstName, Person.LastName, Address.City, Address.State \\nFROM Person \\nLEFT JOIN Address \\nON Person.PersonId = Address.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3171094,
                "title": "sql-easy-approach",
                "content": "Here is my MYSQL code for this problem.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p.firstName, p.lastName, a.city, a.state from Person as p left join Address as a on p.personID=a.personID;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.firstName, p.lastName, a.city, a.state from Person as p left join Address as a on p.personID=a.personID;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3140049,
                "title": "mysql-simple-and-easy",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT firstName, lastName, city, state FROM Person LEFT JOIN Address ON Person.personId=Address.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT firstName, lastName, city, state FROM Person LEFT JOIN Address ON Person.personId=Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3112100,
                "title": "two-simple-solutions-explained-in-detail-for-beginners",
                "content": "We can solve this using two ways mentioned below,\\neach of them use leftjoin, why? because we need each entry from table 1 the entries from second table can be taken as null and that is exactly what left join do.\\nIf we use full join, then it would give us the rows that are present in both the tables, while right join will give us all the values from table 2 no matter whether they are present in table 1 or not, like opposite of left join.\\n\\nMethod 1 using on:-\\n```\\nselect firstname, lastname, city, state\\nfrom person left join address\\non person.personid = address.personid\\n\\n```\\non can also be used when the column name is different in both the tables, like \\nif personid was named as p_id in address table then we use the below statement\\n```\\non person.personid=address.p_id\\n```\\nI hope this is clear.\\n\\nMethod 2:- \\n```\\n\\nselect firstname, lastname, city, state\\nfrom person left join address using (personid);\\n```\\n\\'using\\' can only be used when columns from both the table have same name otherwise it won\\'t work,\\nfor this question this is more better approach because the column name is same.\\n\\nFeel free to ask anything in the comments.\\nIf you found this helpful please upvote.\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect firstname, lastname, city, state\\nfrom person left join address\\non person.personid = address.personid\\n\\n```\n```\\non person.personid=address.p_id\\n```\n```\\n\\nselect firstname, lastname, city, state\\nfrom person left join address using (personid);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3092336,
                "title": "mysql-solution-beats-98",
                "content": "# Code\\n```\\nSELECT Person.FirstName, Person.LastName, Address.City, Address.State from Person LEFT JOIN Address on Person.PersonId = Address.PersonId;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT Person.FirstName, Person.LastName, Address.City, Address.State from Person LEFT JOIN Address on Person.PersonId = Address.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3088916,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT Person.firstName, Person.lastName,Address.city,Address.state\\nFROM Person\\nLeft JOIN Address ON Person.personId=Address.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT Person.firstName, Person.lastName,Address.city,Address.state\\nFROM Person\\nLeft JOIN Address ON Person.personId=Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2900206,
                "title": "mysql-left-join",
                "content": "https://leetcode.com/submissions/detail/857988684/\\n```\\n# Write your MySQL query statement below\\nselect p.firstname, p.lastname, a.city, a.state\\nfrom Person as p left join Address as a\\non p.personId = a.personID\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.firstname, p.lastname, a.city, a.state\\nfrom Person as p left join Address as a\\non p.personId = a.personID\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2809458,
                "title": "99-faster-left-join",
                "content": "![image](https://assets.leetcode.com/users/images/d1585e11-31eb-4913-af83-9dec929c40e4_1668318733.873789.png)\\n\\n```\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P \\nLEFT JOIN Address A\\nON P.personId = A.personId\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT P.firstName, P.lastName, A.city, A.state\\nFROM Person P \\nLEFT JOIN Address A\\nON P.personId = A.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2756801,
                "title": "sql-joins-easy-explanation-beginners",
                "content": "# JOIN EXPLANATION \\n\\nLeft Join -> inner join + take the value from left join which are not matching with right join\\n\\nExplanation \\n\\n# Table \\n\\nPERSON1  \\n  2\\n  3\\n  1\\n\\nPERSON2\\n  2\\n  2\\n  1      \\n\\n\\n# INNER JOIN \\n\\n 1. Look at the above table PERSON1 ,take the first row value is 2 , it will look for value 2 in PERSON2 table\\n 2. we can find two rows in PERSON2 having value 2 so in the NEWTABLE(this means combained inner join table) insert the value 2 twice\\n\\n\\t                               NEWTABLE\\n                                     2\\n                                     2\\n\\n 3. Again move to next row in PERSON1 take the Value 3 and check weather three is present in PERSON2,finally its not present,so no insertion\\n 4. Then move to the next row in PERSON1 take the value 1 and check for match in PERSON2, yes last row in PERSON2 is matched,so insert the value 1 in NEWTABLE\\n\\n\\t                               NEWTABLE\\n                                     2\\n                                     2\\n                                     1\\n\\n\\n5.our inner Join is ready.\\n\\n# LEFT JOIN\\n\\n1.Here after doing inner join take the new table and here person 1 is left table so add the value which are left in PERSON1 table ie) we left 3 because it is not matching, so insert 3 here\\n\\n                                NEWTABLE\\n                                     2\\n                                     2\\n                                     1\\n                                     3\\n\\n# RIGHT JOIN \\n\\n Vice versa of left join ie) inner join + right table values which are not matching  with left table\\n\\n# COMMENT THE NEWTABLE FOR RIGHT JOIN ! THANK YOU\\n\\n# CODE\\nselect firstName,lastName,city,state from Person t1 left join Address t2 on t1.personId = t2.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# JOIN EXPLANATION \\n\\nLeft Join -> inner join + take the value from left join which are not matching with right join\\n\\nExplanation \\n\\n# Table \\n\\nPERSON1  \\n  2\\n  3\\n  1\\n\\nPERSON2\\n  2\\n  2\\n  1      \\n\\n\\n# INNER JOIN \\n\\n 1. Look at the above table PERSON1 ,take the first row value is 2 , it will look for value 2 in PERSON2 table\\n 2. we can find two rows in PERSON2 having value 2 so in the NEWTABLE(this means combained inner join table) insert the value 2 twice\\n\\n\\t                               NEWTABLE\\n                                     2\\n                                     2\\n\\n 3. Again move to next row in PERSON1 take the Value 3 and check weather three is present in PERSON2,finally its not present,so no insertion\\n 4. Then move to the next row in PERSON1 take the value 1 and check for match in PERSON2, yes last row in PERSON2 is matched,so insert the value 1 in NEWTABLE\\n\\n\\t                               NEWTABLE\\n                                     2\\n                                     2\\n                                     1\\n\\n\\n5.our inner Join is ready.\\n\\n# LEFT JOIN\\n\\n1.Here after doing inner join take the new table and here person 1 is left table so add the value which are left in PERSON1 table ie) we left 3 because it is not matching, so insert 3 here\\n\\n                                NEWTABLE\\n                                     2\\n                                     2\\n                                     1\\n                                     3\\n\\n# RIGHT JOIN \\n\\n Vice versa of left join ie) inner join + right table values which are not matching  with left table\\n\\n# COMMENT THE NEWTABLE FOR RIGHT JOIN ! THANK YOU\\n\\n# CODE\\nselect firstName,lastName,city,state from Person t1 left join Address t2 on t1.personId = t2.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2717390,
                "title": "2-way-logic-thinking-solution",
                "content": "```\\n1)\\nselect lastname, firstname, \\n         (select top 1 city\\n             from address \\n          where personid = p.personid\\n             ) as city,\\n            \\n         (select top 1 state\\n             from address\\n          where personid = p.personid\\n             ) as  state\\nfrom person p\\n\\n2)\\nselect p.lastName, p.firstname , a.city,a.state\\nfrom person p left join address a on p.personId = a.personId\\n```",
                "solutionTags": [],
                "code": "```\\n1)\\nselect lastname, firstname, \\n         (select top 1 city\\n             from address \\n          where personid = p.personid\\n             ) as city,\\n            \\n         (select top 1 state\\n             from address\\n          where personid = p.personid\\n             ) as  state\\nfrom person p\\n\\n2)\\nselect p.lastName, p.firstname , a.city,a.state\\nfrom person p left join address a on p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2629695,
                "title": "sql-join-easy",
                "content": "**UPVOTE IF IT HELPS**\\n\\n\\'\\'\\'\\n\\n\\n\\tselect p.firstName , p.lastName , a.city , a.state\\n\\tfrom person as p\\n\\tleft join Address as a \\n\\ton p.personId = a.personId\\n\\n\\'\\'\\'",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "**UPVOTE IF IT HELPS**\\n\\n\\'\\'\\'\\n\\n\\n\\tselect p.firstName , p.lastName , a.city , a.state\\n\\tfrom person as p\\n\\tleft join Address as a \\n\\ton p.personId = a.personId\\n\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2536401,
                "title": "left-join-sql",
                "content": "SELECT p.firstName, p.lastName, a.city, a.state \\nFROM Person as p Left join address as a\\non p.personId = a.personId;",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "SELECT p.firstName, p.lastName, a.city, a.state \\nFROM Person as p Left join address as a\\non p.personId = a.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2459956,
                "title": "oracle-left-join-faster-than-99",
                "content": "```\\nselect p.firstName,p.lastName,a.city,a.state from Person p left join address a on\\np.personid = a.personid;\\n```\\n![image](https://assets.leetcode.com/users/images/69e97f0d-d48b-4396-bee4-9f46b44a3d1a_1661100186.12899.png)\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect p.firstName,p.lastName,a.city,a.state from Person p left join address a on\\np.personid = a.personid;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2431734,
                "title": "mysql-easy-to-understand-left-join",
                "content": "```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId=Address.personId;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId=Address.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2367420,
                "title": "easy-mysql-solution-using-left-join",
                "content": "* SELECT firstname,lastname,Address.city,Address.state FROM person left join Address ON person.personId=address.personId",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "* SELECT firstname,lastname,Address.city,Address.state FROM person left join Address ON person.personId=address.personId",
                "codeTag": "Unknown"
            },
            {
                "id": 2317802,
                "title": "simple-2-approaches-left-join-right-join",
                "content": "**Right Join solution**\\n```\\nSELECT Person.firstname, Person.lastname, Address.city, Address.state\\nFROM Address RIGHT JOIN Person \\nON Person.personId = Address.personId;\\n```\\n\\n\\n\\n**Left Join solution**\\n\\n```\\nSELECT Person.firstname, Person.lastname, Address.city, Address.state\\nFROM Person LEFT JOIN Address \\nON Person.personId = Address.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Person.firstname, Person.lastname, Address.city, Address.state\\nFROM Address RIGHT JOIN Person \\nON Person.personId = Address.personId;\\n```\n```\\nSELECT Person.firstname, Person.lastname, Address.city, Address.state\\nFROM Person LEFT JOIN Address \\nON Person.personId = Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2313953,
                "title": "simplest-solution-mysql",
                "content": "SELECT p.firstname, p.lastname, a.state, a.city\\nFROM Person p\\nLEFT JOIN address a ON p.personId = a.personID",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT p.firstname, p.lastname, a.state, a.city\\nFROM Person p\\nLEFT JOIN address a ON p.personId = a.personID",
                "codeTag": "Unknown"
            },
            {
                "id": 2246841,
                "title": "simple-and-easy-solution-mysql-left-join",
                "content": "```\\nselect firstName, lastName, city, state\\nfrom Person p left join Address a\\non p.personId=a.personId\\n```\\n\\n**Please UpVote if it was Helpful :)**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect firstName, lastName, city, state\\nfrom Person p left join Address a\\non p.personId=a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2225545,
                "title": "left-join-mysql-explanation",
                "content": "Here in the question it is given the two tables i,e.\\n\\nPerson : (personId, lastname, firstName)\\nAddress: (addressId, personId,city,state)\\n\\nHere in the both tables one attribute is common which is \"PersonId\" through which the DBMS concept say us that Join occurs only when there is an same attribute in both the tables and if they are same then one must be ```primary key``` and other must be the ```foreign key```. So for this condition we can join both the tables.\\n\\nRemember\\n```\\nPersonId in Person table is primary Key and\\nPersonId in Address table is Foreign Key\\n```\\n\\nThere are many joins which should be used?? \\n>> At mind, the mostly used is [RIGHT,LEFT,FULL]\\n>> **RIGHT**: It starts selecting data from the right table and matching it with the rows from the left table.\\n>> **LEFT**: It returns all the rows from the left table even if there are no matches in right table.\\n>> **FULL**: It returns all the rows from both joined tables whether they have a matching row or not.\\n\\nFrom both the tables we want firstName, lastName, city and state. We don\\'t  need PersonId, AddressId.\\n\\nWe have to join => Person JOIN Address. Selected items should be selected from query. Person table had been on the left and we want the left table extending to the right table through which we can get all the attributes excepting some of them.\\n\\nSolution:\\n```\\nSELECT firstName, lastName, city, state \\nFROM Person LEFT JOIN Address\\nON Person.personID = Address.addressId;\\n```\\n\\n***Explanation of Solution:***\\n```\\nWe are selecting the firstName, lastName, city and state from both the tables where PersonId in both the tables are common attributes.\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```primary key```\n```foreign key```\n```\\nPersonId in Person table is primary Key and\\nPersonId in Address table is Foreign Key\\n```\n```\\nSELECT firstName, lastName, city, state \\nFROM Person LEFT JOIN Address\\nON Person.personID = Address.addressId;\\n```\n```\\nWe are selecting the firstName, lastName, city and state from both the tables where PersonId in both the tables are common attributes.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1999046,
                "title": "mysql-union-solution",
                "content": "```\\n# NON-NULL CASE\\nselect Person.firstName, Person.lastName, Address.city, Address.state from Person, Address where Person.personId = Address.personId\\nunion\\n# NULL CASE\\nselect Person.firstName, Person.lastName, null, null from Person where Person.personId not in (select Address.personId from Address);\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# NON-NULL CASE\\nselect Person.firstName, Person.lastName, Address.city, Address.state from Person, Address where Person.personId = Address.personId\\nunion\\n# NULL CASE\\nselect Person.firstName, Person.lastName, null, null from Person where Person.personId not in (select Address.personId from Address);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1947356,
                "title": "easy-left-join-concept",
                "content": "![image](https://assets.leetcode.com/users/images/95917b07-d2d6-4c59-b308-22fea57e7227_1649959926.220577.png)\\n\\nSELECT \\n    Person.firstName, Person.lastName, Address.city, Address.state\\nFROM\\n    Person\\nLEFT JOIN\\n    Address\\nON\\n    Person.personId = Address.personId\\n;",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/95917b07-d2d6-4c59-b308-22fea57e7227_1649959926.220577.png)\\n\\nSELECT \\n    Person.firstName, Person.lastName, Address.city, Address.state\\nFROM\\n    Person\\nLEFT JOIN\\n    Address\\nON\\n    Person.personId = Address.personId\\n;",
                "codeTag": "Unknown"
            },
            {
                "id": 1935795,
                "title": "easy-code-join-clean-code-mysql",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT \\n    Person.firstName, Person.lastName, Address.city, Address.state\\nFROM\\n    Person\\nLEFT JOIN\\n    Address\\nON\\n    Person.personId = Address.personId\\n;\\n```\\n\\n __Check out all [my](https://leetcode.com/siddp6/) recent solutions [here](https://github.com/sidd6p/LeetCode)__\\n\\n \\n __Feel Free to Ask Doubts\\nAnd Please Share Some Suggestions\\nHAPPY CODING :)__\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT \\n    Person.firstName, Person.lastName, Address.city, Address.state\\nFROM\\n    Person\\nLEFT JOIN\\n    Address\\nON\\n    Person.personId = Address.personId\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1916563,
                "title": "simple-faster-easy-mysql",
                "content": "**MYSQL LEFT JOIN**\\n\\n```\\nselect firstName,lastName,city,state from Person p\\nleft join Address a on p.personId=a.personId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect firstName,lastName,city,state from Person p\\nleft join Address a on p.personId=a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1803598,
                "title": "best-easiest-simplest-mysql-solution-175-combine-two-tables",
                "content": "```\\nselect firstName, lastName,city, state\\nfrom Person LEFT JOIN Address ON Person.personId = Address.personId;\\n\\n#pls upvote if you found the solution easy ..!! thanks\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect firstName, lastName,city, state\\nfrom Person LEFT JOIN Address ON Person.personId = Address.personId;\\n\\n#pls upvote if you found the solution easy ..!! thanks\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1701296,
                "title": "simple-mysql-solution",
                "content": "```\\nselect \\np.firstName,\\np.lastName,\\na.city,\\na.state\\nfrom person p\\nleft join address a on a.personId = p.personId #include all values from p, resulting in null values in a\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\np.firstName,\\np.lastName,\\na.city,\\na.state\\nfrom person p\\nleft join address a on a.personId = p.personId #include all values from p, resulting in null values in a\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1486103,
                "title": "oracle-sql-easy-with-readable-sql-format",
                "content": "```\\nselect p.FirstName\\n    , p.LastName\\n    , a.City\\n    , a.State\\n    from Person p\\n    left join Address a\\n    on p.PersonId = a.PersonId\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nselect p.FirstName\\n    , p.LastName\\n    , a.City\\n    , a.State\\n    from Person p\\n    left join Address a\\n    on p.PersonId = a.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1282866,
                "title": "left-join-from-table-person-to-table-address",
                "content": "**Here we need to use left join because they asked all rows need to be printed which need not to be in address table so we need to print all person table rows and even the rows which is intersected with address table so we need to perform left join from person table to address table.**\\n\\n\\n```\\n# Write your MySQL query statement below\\nSELECT Person.FirstName,Person.LastName,Address.City,Address.State \\nfrom Person \\nLEFT OUTER JOIN Address\\nON Person.PersonId = Address.PersonId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT Person.FirstName,Person.LastName,Address.City,Address.State \\nfrom Person \\nLEFT OUTER JOIN Address\\nON Person.PersonId = Address.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1167890,
                "title": "beats-100-memory-left-join-concept",
                "content": "SELECT Person.FirstName, Person.LastName, Address.City, Address.State\\nFROM Person\\nLEFT JOIN Address ON Person.PersonId=Address.PersonId\\nORDER BY Person.FirstName;\\n",
                "solutionTags": [],
                "code": "SELECT Person.FirstName, Person.LastName, Address.City, Address.State\\nFROM Person\\nLEFT JOIN Address ON Person.PersonId=Address.PersonId\\nORDER BY Person.FirstName;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 659282,
                "title": "simple-query-with-left-join",
                "content": "SELECT p.FirstName, p.LastName,a.City,a.State\\nFROM Person p LEFT JOIN Address a \\nON a.PersonId = p.PersonId\\n",
                "solutionTags": [],
                "code": "SELECT p.FirstName, p.LastName,a.City,a.State\\nFROM Person p LEFT JOIN Address a \\nON a.PersonId = p.PersonId\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 372231,
                "title": "mysql-left-join",
                "content": "```\\nSELECT FirstName, LastName, City, State FROM Person LEFT JOIN Address ON Person.PersonId = Address.PersonId\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT FirstName, LastName, City, State FROM Person LEFT JOIN Address ON Person.PersonId = Address.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3933974,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT FIRSTNAME,LASTNAME,CITY,STATE FROM PERSON LEFT OUTER JOIN ADDRESS ON (PERSON.PERSONID=ADDRESS.PERSONID);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT FIRSTNAME,LASTNAME,CITY,STATE FROM PERSON LEFT OUTER JOIN ADDRESS ON (PERSON.PERSONID=ADDRESS.PERSONID);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3929353,
                "title": "2-lines-sql-pandas",
                "content": "# Intuition\\nWe want to combine information from two tables based on a common column (personId), the initial intuition is to use a join operation. \\n\\nSpecifically, a left join will allow us to retain all records from the left table (person) and match them with corresponding records from the right table (address).\\n\\n---\\n\\n# Approach\\nPerform a left join on the personId column between the person and address DataFrames using the merge function in pandas.\\n\\nSelect the desired columns (\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\') from the merged DataFrame to create the result DataFrame.\\n\\n# Complexity\\n- Time complexity:\\nThe merge operation complexity would be approximately O(n + m), as it involves creating an index and matching rows based on the personId column.\\n\\n- Space complexity:\\nThe space complexity involves the memory required to store the merged DataFrame and the result DataFrame. \\n\\n# Code \\n```SQL []\\n# Write your MySQL query statement below\\n\\nSELECT p.firstName, p.lastName, a.city, a.state FROM Person p\\nLEFT JOIN Address a ON p.personId = a.per\\n```\\n```Pandas []\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    merged_df = person.merge(address, on=\\'personId\\', how=\\'left\\')\\n    result_df = merged_df[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n    return result_df\\n```\\n\\n> \\uD83D\\uDCA1",
                "solutionTags": [
                    "MySQL",
                    "Database",
                    "Pandas"
                ],
                "code": "```SQL []\\n# Write your MySQL query statement below\\n\\nSELECT p.firstName, p.lastName, a.city, a.state FROM Person p\\nLEFT JOIN Address a ON p.personId = a.per\\n```\n```Pandas []\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    merged_df = person.merge(address, on=\\'personId\\', how=\\'left\\')\\n    result_df = merged_df[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3919352,
                "title": "pandas-simple-left-join-be-carefull-with-returning-columns-by-their-position",
                "content": "# Intuition\\nSimplest left join. One thing that is actually interesting to notice, you **CAN NOT** return columns by their position:\\n\\n`return person.merge(address, on = \\'personId\\',how = \\'left\\').iloc[:,[2,1,4,5]]`\\n \\nIt works as long as tables are populated, but if tables are empty it messes order or columns => you **HAVE TO** specify their names, as in solution, try both solutions.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    return person.merge(address, on = \\'personId\\',how = \\'left\\')[[\\'firstName\\',\\'lastName\\',\\'city\\',\\'state\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    return person.merge(address, on = \\'personId\\',how = \\'left\\')[[\\'firstName\\',\\'lastName\\',\\'city\\',\\'state\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3918996,
                "title": "mysql-simple-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT firstName,lastName,city,state\\nFROM Person\\nLeft JOIN Address\\nUSING(PersonId)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT firstName,lastName,city,state\\nFROM Person\\nLeft JOIN Address\\nUSING(PersonId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3913719,
                "title": "pandas-simple-solution-using-merge",
                "content": "\\n```\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    combined = pd.merge(person, address, how=\\'left\\', on=\\'personId\\')\\n    return combined[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef combine_two_tables(person: pd.DataFrame, address: pd.DataFrame) -> pd.DataFrame:\\n    combined = pd.merge(person, address, how=\\'left\\', on=\\'personId\\')\\n    return combined[[\\'firstName\\', \\'lastName\\', \\'city\\', \\'state\\']]\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3820343,
                "title": "oracle-easy-solution-memory-beats-100",
                "content": "# Code\\n```\\nSelect firstName,lastName,city,state From Person Left Outer Join Address On (Person.personId=Address.personId)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSelect firstName,lastName,city,state From Person Left Outer Join Address On (Person.personId=Address.personId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3820096,
                "title": "combine-two-tables-mysql-solution-code",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect person.firstname, person.lastName, Address.city, Address.state \\nfrom person \\nleft join Address\\non person.personId  = Address.personId ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect person.firstname, person.lastName, Address.city, Address.state \\nfrom person \\nleft join Address\\non person.personId  = Address.personId ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3739673,
                "title": "sql-solution-with-91-68-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3642922,
                "title": "simple-sql-solution-left-join",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT\\n  p.firstName,\\n  p.lastName,\\n  a.city,\\n  a.state\\nFROM Person p\\nLEFT JOIN Address a\\nON p.personId = a.personId;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n  p.firstName,\\n  p.lastName,\\n  a.city,\\n  a.state\\nFROM Person p\\nLEFT JOIN Address a\\nON p.personId = a.personId;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3379948,
                "title": "combine-two-table-left-join",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect p1.firstName,p1.lastName,a1.city,a1.state\\nfrom Person as p1\\nleft join \\nAddress as a1\\non p1.personId=a1.personId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p1.firstName,p1.lastName,a1.city,a1.state\\nfrom Person as p1\\nleft join \\nAddress as a1\\non p1.personId=a1.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3227811,
                "title": "easy-mysql-solution-left-join-explain",
                "content": "`It is typical demonstration of LEFT JOIN operation`\\n## LEFT JOIN\\n> The LEFT JOIN keyword returns all records from the left table (table A), and the matching records from the right table (table B). The result is 0 records from the right side, if there is no match.\\n\\n##### SYNTAX\\n```\\nSELECT column_name(s)\\nFROM table_A\\nLEFT JOIN table_B\\nON table_A.column_name = table_B.column_name;\\n```\\n![left-join.png](https://assets.leetcode.com/users/images/30c00392-267d-482f-9a25-b152cdf3d7fb_1677309313.8535137.png)\\n\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECt p.firstname, p.lastName, a.city, a.state\\nFROM Person p LEFT JOIN Address a\\nON p.personId = a.personId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT column_name(s)\\nFROM table_A\\nLEFT JOIN table_B\\nON table_A.column_name = table_B.column_name;\\n```\n```\\n# Write your MySQL query statement below\\nSELECt p.firstname, p.lastName, a.city, a.state\\nFROM Person p LEFT JOIN Address a\\nON p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3081319,
                "title": "simple-query-combine-two-tables",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect firstname,lastname,city,state from Person left join Address on Person.personId=Address.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect firstname,lastname,city,state from Person left join Address on Person.personId=Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2673353,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```# Write your MySQL query statement below\\n\\n\\nSELECT firstName,lastName,city,state FROM Person LEFT JOIN Address on Person.personId = Address.personId;\\n# Write your MySQL query statement below\\n\\n\\nSELECT firstName,lastName,city,state FROM Person LEFT JOIN Address on Person.personId = Address.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```# Write your MySQL query statement below\\n\\n\\nSELECT firstName,lastName,city,state FROM Person LEFT JOIN Address on Person.personId = Address.personId;\\n# Write your MySQL query statement below\\n\\n\\nSELECT firstName,lastName,city,state FROM Person LEFT JOIN Address on Person.personId = Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2638357,
                "title": "mysql",
                "content": "```\\nselect firstName , lastName , city , state from Person left outer join Address on Person.personId = Address.personId\\n```",
                "solutionTags": [],
                "code": "```\\nselect firstName , lastName , city , state from Person left outer join Address on Person.personId = Address.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2632606,
                "title": "simple-solution-using-left-join",
                "content": "select p.firstName,p.lastName,a.city,a.state from Person as p left join Address as a on p.personId=a.personId;",
                "solutionTags": [],
                "code": "select p.firstName,p.lastName,a.city,a.state from Person as p left join Address as a on p.personId=a.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2626809,
                "title": "c-solution",
                "content": "***Left Join***\\n```\\nselect firstName, lastName, city, state from Person p left join Address a on p.personId=a.personId;\\n```",
                "solutionTags": [
                    "MySQL",
                    "C"
                ],
                "code": "```\\nselect firstName, lastName, city, state from Person p left join Address a on p.personId=a.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2600679,
                "title": "easy-join",
                "content": "```\\nSELECT p.firstName, p.lastname, a.city, a.state\\nFROM Person p\\nLEFT JOIN Address a\\nON p.personId = a.personId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.firstName, p.lastname, a.city, a.state\\nFROM Person p\\nLEFT JOIN Address a\\nON p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2563763,
                "title": "mysql-shortest-solution-one-line",
                "content": "***Please UPVOTE \\uD83D\\uDD25***\\n```\\nSELECT firstName,lastName, city , state FROM Person LEFT JOIN Address ON Person.personID = Address.personID \\n\\n```\\n\\n*  **Another  solution**  (*just to see the differenc*e)\\n\\n```\\nSELECT \\n\\tfirstName,\\n    lastName, \\n    (CASE WHEN \\n        (SELECT city FROM Address WHERE Address.personID =  Person.personID)IS NULL \\n\\t\\tTHEN NULL \\n\\t\\tELSE (SELECT city FROM Address WHERE Address.personID = Person.personID) \\n\\t\\tEND)AS city ,\\n    (CASE WHEN \\n        (SELECT state FROM Address WHERE Address.personID = Person.personID)IS NULL \\n\\t\\tTHEN NULL \\n\\t\\tELSE  (SELECT state FROM Address WHERE Address.personID = Person.personID) \\n\\t\\tEND) AS state\\nFROM Person \\n```\\n***Please UPVOTE \\uD83D\\uDD25***",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT firstName,lastName, city , state FROM Person LEFT JOIN Address ON Person.personID = Address.personID \\n\\n```\n```\\nSELECT \\n\\tfirstName,\\n    lastName, \\n    (CASE WHEN \\n        (SELECT city FROM Address WHERE Address.personID =  Person.personID)IS NULL \\n\\t\\tTHEN NULL \\n\\t\\tELSE (SELECT city FROM Address WHERE Address.personID = Person.personID) \\n\\t\\tEND)AS city ,\\n    (CASE WHEN \\n        (SELECT state FROM Address WHERE Address.personID = Person.personID)IS NULL \\n\\t\\tTHEN NULL \\n\\t\\tELSE  (SELECT state FROM Address WHERE Address.personID = Person.personID) \\n\\t\\tEND) AS state\\nFROM Person \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2548535,
                "title": "simple-and-easy",
                "content": "select firstname,lastname,city,state from person left join address on person.personId = address.personid",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select firstname,lastname,city,state from person left join address on person.personId = address.personid",
                "codeTag": "Unknown"
            },
            {
                "id": 2525895,
                "title": "mysql-union-solution",
                "content": "```sql\\nselect firstName, lastName, null as city, null as state\\nfrom person \\nwhere personId not in (select personId from address)\\n\\nunion\\n\\nselect person.firstName, person.lastName, address.city, address.state\\nfrom person inner join address \\nwhere person.personId = address.personId\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```sql\\nselect firstName, lastName, null as city, null as state\\nfrom person \\nwhere personId not in (select personId from address)\\n\\nunion\\n\\nselect person.firstName, person.lastName, address.city, address.state\\nfrom person inner join address \\nwhere person.personId = address.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2494435,
                "title": "easiest-sql-solution",
                "content": "##### **just join both the tables on the common attribute i.e. personID****\\nSELECT firstname,lastname,city,state FROM (Person LEFT JOIN Address on person.personID=Address.personID);",
                "solutionTags": [],
                "code": "##### **just join both the tables on the common attribute i.e. personID****\\nSELECT firstname,lastname,city,state FROM (Person LEFT JOIN Address on person.personID=Address.personID);",
                "codeTag": "Unknown"
            },
            {
                "id": 2478562,
                "title": "sql-like-pizza",
                "content": "```\\nselect \\np.firstname as firstname,\\np.lastname as lastname,\\na.city as city,\\na.state as state\\nfrom person p\\nleft join address a on p.personId = a.personId \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect \\np.firstname as firstname,\\np.lastname as lastname,\\na.city as city,\\na.state as state\\nfrom person p\\nleft join address a on p.personId = a.personId \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2441191,
                "title": "simple-left-outer-join-mysql",
                "content": "```\\nselect firstName,lastName,city,state\\nfrom Person p left outer join Address a\\non p.personId = a.personId;",
                "solutionTags": [],
                "code": "```\\nselect firstName,lastName,city,state\\nfrom Person p left outer join Address a\\non p.personId = a.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2421687,
                "title": "faster-than-99-33-of-submissions",
                "content": "```\\n# Selecting columns using table aliases\\nSELECT p.firstName, p.lastName, a.city, a.state\\n# Start with the Person table\\n    FROM Person as p\\n\\t# Left Join Address table\\n    LEFT JOIN Address as a\\n\\t# Joining on personID, using \"USING\", \\n\\t# since id names are identical in both tables.\\n        USING(personId);\\n```\\n![image](https://assets.leetcode.com/users/images/b24b2a69-3a22-44d9-8599-239ed0d93fd5_1660431721.3093936.png)\\n",
                "solutionTags": [],
                "code": "```\\n# Selecting columns using table aliases\\nSELECT p.firstName, p.lastName, a.city, a.state\\n# Start with the Person table\\n    FROM Person as p\\n\\t# Left Join Address table\\n    LEFT JOIN Address as a\\n\\t# Joining on personID, using \"USING\", \\n\\t# since id names are identical in both tables.\\n        USING(personId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2406562,
                "title": "mysql-solution-using-left-join-and-natural-left-join",
                "content": "# Using Natural Left Join\\n```select Person.firstName, Person.lastName, Address.city, Address.state from Person Natural left join Address;```\\n\\n# using left join\\n```select Person.firstName, Person.lastName, Address.city, Address.state from Person left join Address using(personId);```\\n",
                "solutionTags": [],
                "code": "```select Person.firstName, Person.lastName, Address.city, Address.state from Person Natural left join Address;```\n```select Person.firstName, Person.lastName, Address.city, Address.state from Person left join Address using(personId);```",
                "codeTag": "Unknown"
            },
            {
                "id": 2337440,
                "title": "left-join",
                "content": "```\\n# Write your MySQL query statement below\\n\\nSELECT firstName,lastName,city,state\\nFROM Person LEFT JOIN \\nAddress on Person.personId = Address.personID;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT firstName,lastName,city,state\\nFROM Person LEFT JOIN \\nAddress on Person.personId = Address.personID;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2328341,
                "title": "mysql-easy",
                "content": "Straight forward solution, comment below if there\\'re any suggestions or doubts :)\\n\\n```\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonId = Address.PersonID;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonId = Address.PersonID;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2301968,
                "title": "mysql-left-outer-join",
                "content": "```\\nselect firstName,lastName,city,state from Person left outer join Address on Person.personId = Address.personId\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect firstName,lastName,city,state from Person left outer join Address on Person.personId = Address.personId\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2295035,
                "title": "ms-sql-left-join",
                "content": "```\\nSELECT firstName, lastName, city, state\\nFROM Person P\\nLEFT JOIN Address A ON A.personId = P.personId\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT firstName, lastName, city, state\\nFROM Person P\\nLEFT JOIN Address A ON A.personId = P.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2281115,
                "title": "oracle",
                "content": "```\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId;",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2268188,
                "title": "using-join",
                "content": "```\\nSELECT FirstName, LastName, City, State FROM Person LEFT JOIN Address ON Person.PersonId = Address.PersonId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT FirstName, LastName, City, State FROM Person LEFT JOIN Address ON Person.PersonId = Address.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2266172,
                "title": "mysql-simple-mysql-solution-using-left-join",
                "content": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 400 ms, faster than 64.40% of MySQL online submissions for Combine Two Tables.\\n# Memory Usage: 0B, less than 100.00% of MySQL online submissions for Combine Two Tables.\\n\\n\\tselect p1.firstName, p1.lastName, a1.city, a1.state from person as p1\\n\\tleft join address as a1 on p1.personId = a1.personId\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# If You like the Solution, Don\\'t Forget To UpVote Me, Please UpVote! \\uD83D\\uDD3C\\uD83D\\uDE4F\\n# Runtime: 400 ms, faster than 64.40% of MySQL online submissions for Combine Two Tables.\\n# Memory Usage: 0B, less than 100.00% of MySQL online submissions for Combine Two Tables.\\n\\n\\tselect p1.firstName, p1.lastName, a1.city, a1.state from person as p1\\n\\tleft join address as a1 on p1.personId = a1.personId\\n\\n# Thank You \\uD83E\\uDD73\\u270C\\uD83D\\uDC4D",
                "codeTag": "Unknown"
            },
            {
                "id": 2245759,
                "title": "solution-to-combine-to-two-tables",
                "content": "When you want all the records from table one even there is no related records for them in table b then we use left join.\\n\\nUpvote if you find this is helpful. \\n\\n```\\nselect \\n    a.firstname,\\n    a.lastname, \\n    b.city, \\n    b.state \\nfrom \\n    Person a \\nleft join \\n    Address b\\non \\n    a.personId = b.personId\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n    a.firstname,\\n    a.lastname, \\n    b.city, \\n    b.state \\nfrom \\n    Person a \\nleft join \\n    Address b\\non \\n    a.personId = b.personId\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2240486,
                "title": "oracle-with-union",
                "content": "```\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId;\\nUNION\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId;",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId;\\nUNION\\nSELECT firstName, lastName, city, state FROM Person p LEFT JOIN Address a ON p.personId = a.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2237179,
                "title": "simplest-oracle-solution-using-left-outer-join",
                "content": "select P.firstName,P.lastName,A.city,A.state\\nfrom Person P left outer join Address A\\non P.personId=A.personId",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "select P.firstName,P.lastName,A.city,A.state\\nfrom Person P left outer join Address A\\non P.personId=A.personId",
                "codeTag": "Unknown"
            },
            {
                "id": 2209507,
                "title": "the-easiest-solution-and-easy-to-understand",
                "content": "select FirstName, LastName, City, State from person p\\nleft join address a on p.personID= a.personID\\n",
                "solutionTags": [],
                "code": "select FirstName, LastName, City, State from person p\\nleft join address a on p.personID= a.personID\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2200455,
                "title": "faster-than-98-13-of-ms-sql-server-submissions",
                "content": "SELECT p.firstName, p.lastname, a.city, a.state \\nFROM person p\\nLEFT JOIN Address a\\nON p.personId = a.personId",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "SELECT p.firstName, p.lastname, a.city, a.state \\nFROM person p\\nLEFT JOIN Address a\\nON p.personId = a.personId",
                "codeTag": "Unknown"
            },
            {
                "id": 2184556,
                "title": "mysql-left-join-notes-of-all-join-operation-supported-by-sql",
                "content": "```\\nSelect firstName, lastName, city, state \\nFrom Person Left Join Address\\non Person.personId = Address.personId;\\n```\\n\\nTypes of Joins\\n![image](https://assets.leetcode.com/users/images/624dc14b-4d9d-4f05-b5ea-6f28e49671c7_1656342616.1009154.png)\\n![image](https://assets.leetcode.com/users/images/7e440f2d-0b09-4c1b-aa69-74a4a293acac_1656342660.3972323.png)\\n![image](https://assets.leetcode.com/users/images/f4082167-7057-4398-b210-15b2f9978807_1656342673.8611495.png)\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect firstName, lastName, city, state \\nFrom Person Left Join Address\\non Person.personId = Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2161584,
                "title": "oracle-very-easy-solution",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nselect p.firstName,p.lastName,a.city,a.state from Person p left join Address a on p.personId=a.personId\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect p.firstName,p.lastName,a.city,a.state from Person p left join Address a on p.personId=a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2153302,
                "title": "top-99-11-solution",
                "content": "## Solution possible ony if you upvote :-\\n\\nIf you don\\'t get the desired output in top 99.11% , probably it would be because of \\npremium feature.\\n\\n![image](https://assets.leetcode.com/users/images/58f00414-1ef8-4d8c-bc35-8b0d3cff3e73_1655265813.7566879.gif)\\n\\n\\n```\\nSELECT firstname,lastname ,city,state from person p\\nleft join Address  a on p.personid=a.personid;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT firstname,lastname ,city,state from person p\\nleft join Address  a on p.personid=a.personid;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2117770,
                "title": "sql-easy-solution",
                "content": "Please do upvote if u find this solution useful\\n```\\n# Write your MySQL query statement below\\nSelect Person.firstName, Person.lastname , Address.city, Address.state\\nfrom Person \\nleft join Address \\non Person.personId=Address.personId;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "Please do upvote if u find this solution useful\\n```\\n# Write your MySQL query statement below\\nSelect Person.firstName, Person.lastname , Address.city, Address.state\\nfrom Person \\nleft join Address \\non Person.personId=Address.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 2015481,
                "title": "combine-two-tables-mysql",
                "content": "*The **LEFT JOIN** keyword returns all records from the left table (table1), and the matching records from the right table (table2). The result is 0 records from the right side, if there is no match.*\\n![image](https://assets.leetcode.com/users/images/ac34c2f1-e7ea-4f0c-bdad-c3f452e2763f_1651902937.555098.gif)\\n\\n\\n```\\n# Write your MySQL query statement below\\nSELECT P.firstName,P.lastName ,a.city,a.state from Person p LEFT join Address a ON p.personId = a.personId\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT P.firstName,P.lastName ,a.city,a.state from Person p LEFT join Address a ON p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1958078,
                "title": "mysql-solution",
                "content": "# Solution\\n```\\nselect  firstName , lastName , city , state  \\nfrom Person p\\nleft join Address a on p.personId = a.personId\\n```\\n**PersonId** is *FK* to table **Person**  in **Adress**.\\nLeft join give us all from left table and replace **city** and **state** to *null* how we need in description.\\nIf you find this **solution** and **explanation** helpful, please **upvote** it for others people.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect  firstName , lastName , city , state  \\nfrom Person p\\nleft join Address a on p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1952650,
                "title": "python-left-join",
                "content": "```\\nselect firstName, lastName, city, state\\nfrom \\nPerson a left join Address b\\non a.personId= b.personId",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nselect firstName, lastName, city, state\\nfrom \\nPerson a left join Address b\\non a.personId= b.personId",
                "codeTag": "Unknown"
            },
            {
                "id": 1952642,
                "title": "mysql-easy-implementation",
                "content": "```\\nSELECT p.firstName, p.lastName, a.city, a.state\\nFROM Person p LEFT JOIN Address a \\nON p.personId = a.personId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT p.firstName, p.lastName, a.city, a.state\\nFROM Person p LEFT JOIN Address a \\nON p.personId = a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1942861,
                "title": "sql-left-join",
                "content": "```\\n# Write your MySQL query statement below\\n\\nselect  firstName, lastName, city, state\\n\\t FROM Person left join Address\\n     on\\n     (Person.personId=Address.personId);\\n\\n```\\nIf Helpful Please Like and Upvoke",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect  firstName, lastName, city, state\\n\\t FROM Person left join Address\\n     on\\n     (Person.personId=Address.personId);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1937306,
                "title": "left-join-89-72-time-100-space",
                "content": "```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state from PERSON\\nLEFT JOIN Address ON Person.personId = Address.personId;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT Person.firstName, Person.lastName, Address.city, Address.state from PERSON\\nLEFT JOIN Address ON Person.personId = Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1935141,
                "title": "mysql-easy-solution-using-left-join",
                "content": "```\\n# Write your MySQL query statement below\\nselect p.firstname, p.lastname, a.city, a.state from Person as p left join Address as a on p.personid = a.personid",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect p.firstname, p.lastname, a.city, a.state from Person as p left join Address as a on p.personid = a.personid",
                "codeTag": "Unknown"
            },
            {
                "id": 1904037,
                "title": "mysql-simple-left-join",
                "content": "```\\nSELECT  p.firstName, p.lastName, a.city,a.state\\nFROM Person p LEFT JOIN Address a\\nON p.personID=a.personID\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT  p.firstName, p.lastName, a.city,a.state\\nFROM Person p LEFT JOIN Address a\\nON p.personID=a.personID\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1818416,
                "title": "simple-question-of-left-join",
                "content": "```\\nSELECT P.FirstName,\\n\\t   P.LastName,\\n\\t   A.City,\\n\\t   A.State\\nfrom \\n\\t  Person as P \\nLEFT JOIN \\n     Address as A\\non \\n     P.PersonId = A.PersonId;\\n````\\n\\nPlease **Upvote** if you like the solution.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT P.FirstName,\\n\\t   P.LastName,\\n\\t   A.City,\\n\\t   A.State\\nfrom \\n\\t  Person as P \\nLEFT JOIN \\n     Address as A\\non \\n     P.PersonId = A.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1786762,
                "title": "simple-solution-left-outer-join",
                "content": "```\\nselect firstName, lastName, city, state from Person\\nleft outer join Address\\non Address.personId = Person.personId\\n```\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect firstName, lastName, city, state from Person\\nleft outer join Address\\non Address.personId = Person.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1775811,
                "title": "easy-solution-join-tables-using-left-join",
                "content": "```\\nselect Person.firstName, Person.LastName, Address.city, Address.state \\nfrom Person\\nLeft Join Address\\nON Person.personId=Address.personId;\\n```",
                "solutionTags": [],
                "code": "```\\nselect Person.firstName, Person.LastName, Address.city, Address.state \\nfrom Person\\nLeft Join Address\\nON Person.personId=Address.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1760130,
                "title": "would-this-answer-work-too",
                "content": "Wondering if this answer is acceptable too -- \\n\\nselect \\n    P.firstName\\n    ,P.lastName\\n    ,A.city\\n    ,A.state\\nfrom \\n    Person P\\nleft join \\n    Address A\\non P.personId = A.personId",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "Wondering if this answer is acceptable too -- \\n\\nselect \\n    P.firstName\\n    ,P.lastName\\n    ,A.city\\n    ,A.state\\nfrom \\n    Person P\\nleft join \\n    Address A\\non P.personId = A.personId",
                "codeTag": "Unknown"
            },
            {
                "id": 1722625,
                "title": "simple-mysql-solution",
                "content": "```\\nselect p.firstName, p.lastName,a.city, a.state\\nfrom Person p left join Address a\\non p.personId=a.personId\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.firstName, p.lastName,a.city, a.state\\nfrom Person p left join Address a\\non p.personId=a.personId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1721012,
                "title": "combine-two-tables-simple-and-near",
                "content": "```\\nSELECT p.firstname,\\n       p.lastname,\\n       a.city,\\n       a.state\\nFROM person p\\nLEFT JOIN address a\\nON p.personid = a.personid\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT p.firstname,\\n       p.lastname,\\n       a.city,\\n       a.state\\nFROM person p\\nLEFT JOIN address a\\nON p.personid = a.personid\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1684768,
                "title": "sql-left-join",
                "content": "```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT JOIN Address ON\\nPerson.PersonId = Address.PersonId\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT firstName, lastName, city, state\\nFROM Person\\nLEFT JOIN Address ON\\nPerson.PersonId = Address.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1610841,
                "title": "mysql-explanation-with-code",
                "content": "In this question we have to print some columns from the both the table such that the fullname and lastname should not be null but address part could be.\\nthats why we use here left join in place of inner join. \\nAnd we know that to join the tables we have to do it with respect to some key which should be primary key for one of the table and foreign key of the another table.\\nAnd thats it :)\\n```\\nSELECT firstName, lastName, city, state\\n from person \\n  left join address \\n    on person.personId = address.personId;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "In this question we have to print some columns from the both the table such that the fullname and lastname should not be null but address part could be.\\nthats why we use here left join in place of inner join. \\nAnd we know that to join the tables we have to do it with respect to some key which should be primary key for one of the table and foreign key of the another table.\\nAnd thats it :)\\n```\\nSELECT firstName, lastName, city, state\\n from person \\n  left join address \\n    on person.personId = address.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 1595374,
                "title": "simple-solution",
                "content": "\\n#inner join is not used because it won\\'t work when person id will be missing in other table.\\n\\nSELECT firstName,lastName,city,state\\nFROM Person left join Address \\non Person.personId = Address.personId;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\n#inner join is not used because it won\\'t work when person id will be missing in other table.\\n\\nSELECT firstName,lastName,city,state\\nFROM Person left join Address \\non Person.personId = Address.personId;",
                "codeTag": "Unknown"
            },
            {
                "id": 1568653,
                "title": "using-cases",
                "content": "# Using Mysql cases\\n\\n```\\n   select p.firstName,p.lastName,\\n          case \\n              when (select count(a.personId) from address a where a.personId=p.personId)=0\\n              then null\\n              else (select a.city from address a where  a.personId=p.personId limit 1)\\n           End as city,\\n           case \\n              when (select count(a.personId) from address a where a.personId=p.personId)=0\\n              then null\\n              else (select a.state from address a where  a.personId=p.personId limit 1) \\n           End as state\\n            from person p\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n   select p.firstName,p.lastName,\\n          case \\n              when (select count(a.personId) from address a where a.personId=p.personId)=0\\n              then null\\n              else (select a.city from address a where  a.personId=p.personId limit 1)\\n           End as city,\\n           case \\n              when (select count(a.personId) from address a where a.personId=p.personId)=0\\n              then null\\n              else (select a.state from address a where  a.personId=p.personId limit 1) \\n           End as state\\n            from person p\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1557788,
                "title": "sql",
                "content": "```\\nselect firstName,lastName,city,state \\nfrom Person LEFT JOIN Address\\non person.personId=Address.personId ;\\n```",
                "solutionTags": [],
                "code": "```\\nselect firstName,lastName,city,state \\nfrom Person LEFT JOIN Address\\non person.personId=Address.personId ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1554380,
                "title": "mysql-left-join",
                "content": "```\\n# Write your MySQL query statement below\\nselect firstName,lastname,city,state FROM Person AS p LEFT JOIN Address AS a on p.personId=a.personId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect firstName,lastname,city,state FROM Person AS p LEFT JOIN Address AS a on p.personId=a.personId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1539656,
                "title": "left-join-some-explanation",
                "content": "No need to use OUTER LEFT JOIN since LEFT JOIN alreay implicitly means OUTER JOIN. \\nSince no duplicated cols in Person & Address tables, no need to get a alias for each table and give prefix to selected cols. \\n```\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address USING(PersonId)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address USING(PersonId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1512650,
                "title": "ms-sql",
                "content": "#### Question \\n````\\nSQL Schema\\nTable: Person\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| PersonId    | int     |\\n| FirstName   | varchar |\\n| LastName    | varchar |\\n+-------------+---------+\\nPersonId is the primary key column for this table.\\nThis table contains information about the ID of some persons and their first and last names.\\n \\n\\nTable: Address\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| AddressId   | int     |\\n| PersonId    | int     |\\n| City        | varchar |\\n| State       | varchar |\\n+-------------+---------+\\nAddressId is the primary key column for this table.\\nEach row of this table containts information about the city and state of one person with ID = PersonId.\\n \\n\\nWrite an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a PersonId is not present in the Address table, report null instead.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n \\n\\nExample 1:\\n\\nInput: \\nPerson table:\\n+----------+----------+-----------+\\n| PersonId | LastName | FirstName |\\n+----------+----------+-----------+\\n| 1        | Wang     | Allen     |\\n| 2        | Alice    | Bob       |\\n+----------+----------+-----------+\\nAddress table:\\n+-----------+----------+---------------+------------+\\n| AddressId | PersonId | City          | State      |\\n+-----------+----------+---------------+------------+\\n| 1         | 2        | New York City | New York   |\\n| 2         | 3        | Leetcode      | California |\\n+-----------+----------+---------------+------------+\\nOutput: \\n+-----------+----------+---------------+----------+\\n| FirstName | LastName | City          | State    |\\n+-----------+----------+---------------+----------+\\n| Allen     | Wang     | Null          | Null     |\\n| Bob       | Alice    | New York City | New York |\\n+-----------+----------+---------------+----------+\\nExplanation: \\nThere is no address in the address table for the PersonId = 1 so we return null in their city and state.\\nAddressId = 1 contains information about the address of PersonId = 2.\\n````\\n\\n#### answer\\n````/* Write your T-SQL query statement below */\\nselect p.FirstName, p.LastName, a.City, a.State \\nfrom Person as P left join Address a on a.PersonId = p.PersonId\\n\\n\\n",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "````\\nSQL Schema\\nTable: Person\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| PersonId    | int     |\\n| FirstName   | varchar |\\n| LastName    | varchar |\\n+-------------+---------+\\nPersonId is the primary key column for this table.\\nThis table contains information about the ID of some persons and their first and last names.\\n \\n\\nTable: Address\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| AddressId   | int     |\\n| PersonId    | int     |\\n| City        | varchar |\\n| State       | varchar |\\n+-------------+---------+\\nAddressId is the primary key column for this table.\\nEach row of this table containts information about the city and state of one person with ID = PersonId.\\n \\n\\nWrite an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a PersonId is not present in the Address table, report null instead.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n \\n\\nExample 1:\\n\\nInput: \\nPerson table:\\n+----------+----------+-----------+\\n| PersonId | LastName | FirstName |\\n+----------+----------+-----------+\\n| 1        | Wang     | Allen     |\\n| 2        | Alice    | Bob       |\\n+----------+----------+-----------+\\nAddress table:\\n+-----------+----------+---------------+------------+\\n| AddressId | PersonId | City          | State      |\\n+-----------+----------+---------------+------------+\\n| 1         | 2        | New York City | New York   |\\n| 2         | 3        | Leetcode      | California |\\n+-----------+----------+---------------+------------+\\nOutput: \\n+-----------+----------+---------------+----------+\\n| FirstName | LastName | City          | State    |\\n+-----------+----------+---------------+----------+\\n| Allen     | Wang     | Null          | Null     |\\n| Bob       | Alice    | New York City | New York |\\n+-----------+----------+---------------+----------+\\nExplanation: \\nThere is no address in the address table for the PersonId = 1 so we return null in their city and state.\\nAddressId = 1 contains information about the address of PersonId = 2.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1503246,
                "title": "faster-than-65-vs-85-runtime-submissions",
                "content": "--Runtime: faster than 65.17% of MS SQL Server online submissions for Combine Two Tables.\\n\\nselect FirstName,LastName,City,State\\nfrom Person p LEFT OUTER JOIN Address a\\nON p.PersonId = a.PersonId\\n\\n--Runtime: faster than 85.28% of MS SQL Server online submissions for Combine Two Tables.\\n\\nselect p.FirstName,p.LastName,a.City,a.State\\nfrom Person p LEFT OUTER JOIN Address a\\nON p.PersonId = a.PersonId\\n\\nAlthough not required, explicitly mentioning table alias names in select clause reduced runtime further.",
                "solutionTags": [],
                "code": "--Runtime: faster than 65.17% of MS SQL Server online submissions for Combine Two Tables.\\n\\nselect FirstName,LastName,City,State\\nfrom Person p LEFT OUTER JOIN Address a\\nON p.PersonId = a.PersonId\\n\\n--Runtime: faster than 85.28% of MS SQL Server online submissions for Combine Two Tables.\\n\\nselect p.FirstName,p.LastName,a.City,a.State\\nfrom Person p LEFT OUTER JOIN Address a\\nON p.PersonId = a.PersonId\\n\\nAlthough not required, explicitly mentioning table alias names in select clause reduced runtime further.",
                "codeTag": "Unknown"
            },
            {
                "id": 1451581,
                "title": "mysql-solution-using-left-join",
                "content": "```\\n######################################################\\n\\n#   Runtime: 270ms   -   94.71%\\n#   Memory: 0B  -   100.00%\\n\\n######################################################\\n\\nSELECT Firstname, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonId = Address.PersonId;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n######################################################\\n\\n#   Runtime: 270ms   -   94.71%\\n#   Memory: 0B  -   100.00%\\n\\n######################################################\\n\\nSELECT Firstname, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonId = Address.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1443582,
                "title": "mysql-solution-96-faster",
                "content": "```\\nselect p.FirstName, p.LastName, a.City, a.State from Person p left outer join Address a on a.PersonId=p.PersonId\\n```",
                "solutionTags": [],
                "code": "```\\nselect p.FirstName, p.LastName, a.City, a.State from Person p left outer join Address a on a.PersonId=p.PersonId\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1418000,
                "title": "mysql-100-faster",
                "content": "```\\n\\nSELECT FirstName,LastName,City,State FROM Person LEFT JOIN Address \\n           ON Person.PersonId=Address.PersonId;\\n```",
                "solutionTags": [],
                "code": "```\\n\\nSELECT FirstName,LastName,City,State FROM Person LEFT JOIN Address \\n           ON Person.PersonId=Address.PersonId;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1389576,
                "title": "using-using-and-left-join",
                "content": "```\\nSELECT FirstName, LastName, City, State \\nFROM Person LEFT JOIN Address\\nUSING (PersonId)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT FirstName, LastName, City, State \\nFROM Person LEFT JOIN Address\\nUSING (PersonId)",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1570224,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1574600,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1572135,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1572960,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1575583,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1576938,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1567418,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1575428,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1575079,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1573093,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1570224,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1574600,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1572135,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1572960,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1575583,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1576938,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1567418,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1575428,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1575079,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1573093,
                "content": [
                    {
                        "username": "leihua",
                        "content": "#The key to this SQL question is to understand the structure of data: we want to keep the full records of one dataset (**Person**) and don\\'t concern too much about the other (**Address**). so, a left JOIN is perfect. \\n\\nSELECT FirstName,LastName,City,State\\nFROM Person \\nLEFT JOIN Address\\nUSING(PersonId)"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "[@user4175bH](/user4175bH) Because you don\\'t need to. LEFT JOIN is an OUTER join and hence will include all the rows no matter whether the ON clause is satisfied or not. Here, in the problem we are required to output NULL for cases where personId does not exist in the Address table. And that is exactly what LEFT JOIN will do by default. In case we were to output something else in city and state columns, we would not have gotten away with a simple LEFT JOIN."
                    },
                    {
                        "username": "user4175bH",
                        "content": "why can\\'t we use a where clause like where a.personid is null after left join ? Any comments will be of great help."
                    },
                    {
                        "username": "ankitkum20",
                        "content": "**why are we using left join here?\\nwhy cannot we use right join , full outer join ...?**\\n**can somebody explain how to identify where to use left join and where to use right join?**\\n**sry for silly question :)**"
                    },
                    {
                        "username": "AayushiTrivedi_13",
                        "content": "it is mentioned in the question that they want each name from person table.\\nSo we can use left join"
                    },
                    {
                        "username": "bbbssqa",
                        "content": "To get all the values for first table and second table will show null for the field which is null then we need to use left outer join."
                    },
                    {
                        "username": "anandadhoni77",
                        "content": "why here we are using left join is the question is to get the output in the null where addressid not matches with person id.\\naddressid is the second table that means it is in the right side, so we are using left join\\nto get the matching rows between two tables and all the leftside table rows"
                    },
                    {
                        "username": "ajinkya_kadhe",
                        "content": "It\\'s to late but here is explanation \\nThe reason for using a LEFT JOIN in this query is because the goal is to display all records from the \"Person\" table, along with the corresponding address information from the \"Address\" table if available. If a matching record is not present in the \"Address\" table, the values for \"city\" and \"state\" should be null.\\n\\nA RIGHT JOIN would return all records from the \"Address\" table and the matching records from the \"Person\" table. If a matching record is not found in the \"Person\" table, the values for \"firstName\" and \"lastName\" would be null. In this case, it is not desired to display the records from the \"Address\" table if there is no corresponding record in the \"Person\" table.\\n\\nA FULL OUTER JOIN would return all records from both the \"Person\" and \"Address\" tables, regardless of whether a matching record exists in both tables or not. This may result in duplicate records or records with null values in both tables, which is not the desired outcome for this particular query.\\n\\nTherefore, a LEFT JOIN is the most appropriate choice for this query to display all records from the \"Person\" table and the matching address information from the \"Address\" table if available."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "Hey, I know it is too late but to answer your question RIGHT JOIN WILL WORK.\nHere is my solution which scored faster than 81% which was faster than my LEFT JOIN solution:\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Address as a\nRIGHT JOIN Person as p\nON a.personId = p.personId\n\nIn this problem, RIGHT and LEFT does not matter if you just swap the tables before the JOIN clause. However, it is intuitive to use LEFT JOIN and that is why most people think that RIGHT JOIN will not work. Here is the same query with LEFT JOIN. You can quickly notice the difference. Swap the places that's all.\n\nselect p.firstName, p.lastName, a.city, a.state\nfrom Person as p\nLEFT JOIN Address as a\nON p.personId = a.personId"
                    },
                    {
                        "username": "sabreenashraf22894",
                        "content": "because in requirement for this problem he need person with no address so we should use left join as our left table is person and this is meaning of left join get all row fro left join and put null if one value has not value from right table"
                    },
                    {
                        "username": "Teja767",
                        "content": "[@Srivastava_Swapnil](/Srivastava_Swapnil) can u please check my both the queries and reply........?"
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@Teja767](/Teja767) here right join will not work."
                    },
                    {
                        "username": "Teja767",
                        "content": "we use left join when we need full data from leftside table and only common data from rightside table\\nselect a.firstname ,a.lastname , b.city , b.state from person a left outer join address b on a.personid=b.personid; \\n\\nwe also can use right join when we need full data from rightside table and only common data from leftside table\\nselect a.firstname ,a.lastname , b.city , b.state from address b right outer join person a on a.personid=b.personid; \\n\\n\\nso here are the multiple solutions for the given prob using left and right both joins\\n\\nplease upvote me if it is useful to u\\n\\n\\n"
                    },
                    {
                        "username": "SterlsR",
                        "content": "W3 Schools has a great concise article with the venn diagrams you\\'re describing.\\nhttps://www.w3schools.com/mysql/mysql_join.asp"
                    },
                    {
                        "username": "choisauce",
                        "content": "Almost 2 years late but here\\'s the explanation.\\nSo the table in the FROM clause is the left table, while the table in the Join clause is the right table.\\n\\nImagine the tables overlapping as a vendiagram and the overlapping portion is the part that is joined.\\n\\nLeft join takes the data from the joined portion and the left table even  if there is no corresponding value on the right table. In this question left join would give us Allen Wang with the joined portion even though his personId is not in the Address table.\\n\\nRight join would do the same except with the right table. This would give us the joined portion and Leetcode, California, even thought the personId for the person living there is not included in the Person table.\\n\\nInner join would only give us the data that is joined together, which would exclude everything from either side. So we would ONLY get, Bob Alice New York City, New York\\n\\nOuter join will give us all the selected data from both tables even if the data isn\\'t joined anywhere."
                    },
                    {
                        "username": "XueyingDing",
                        "content": "what\\'s wrong with this:\\nSELECT FirstName, LastName, City, State\\nFROM Person FULL OUTER JOIN Address\\nON Person.PersonId = Address.PersonId;"
                    },
                    {
                        "username": "joeliu0322",
                        "content": "[@unnotedme](/unnotedme) just run your code and you will find whats wrong with it."
                    },
                    {
                        "username": "unnotedme",
                        "content": "you are supposed to left join instead of full outer join. in your case, all the informations would be joined and we don\\'t want that."
                    },
                    {
                        "username": "s9811219",
                        "content": "Hi, \\nHere\\'s the Mandarin Chinese version to explain this problem by MySQL.\\n\\n[LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790 (01): #175 Combine Two Tables](https://medium.com/@s9811219/leetcode-database-my-sql-175-combine-two-tables-ef9d18627c5)\\n\\nWelcome to discuss together!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566964082.png)\\n"
                    },
                    {
                        "username": "Gautam_24",
                        "content": "\\nselect FirstName,LastName,City,State from Person P left join Address A on P.PersonID=A.PersonID"
                    },
                    {
                        "username": "user0794ip",
                        "content": "\\nselect firstName, lastName, (case when city is Null then Null else city end) as city,\\n(case when state is Null then Null else state end) as state\\nfrom person as p\\nleft join address as a on p.personId=a.personId\\n"
                    },
                    {
                        "username": "haoyu6427",
                        "content": "{\\'mysql\\': \\'# Write your MySQL query statement below\\\\n\\', \\'mssql\\': \\'/* Write your T-SQL query statement below */\\\\n\\', \\'oraclesql\\': \\'/* Write your PL/SQL query statement below */\\\\n\\'}\\n\\nI type my SQL query and run it. Nothing show up in output and expected"
                    },
                    {
                        "username": "rdetsch",
                        "content": "Visualize Joins via website \\nhttps://joins.spathon.com/"
                    },
                    {
                        "username": "user4244w",
                        "content": "Why does the following code doesn\\'t work?\\n\\nSELECT p.FirstName, p.LastName, a.City, a.State\\nFROM Person p\\nINNER JOIN Address a ON p.PersonId = a.PersonId;\\n\\nI am doing inner join on PersonId then it should only take PersonId as the matching criteria.\\n\\nCan someone help me with this?"
                    },
                    {
                        "username": "GiggyJung",
                        "content": "You need to use \\n\"LEFT JOIN\" instead \"INNER JOIN\""
                    },
                    {
                        "username": "Srivastava_Swapnil",
                        "content": "[@choisauce](/choisauce) yes innerjoin will return only records matching in both tables but we need to return null if the record is not matching too"
                    },
                    {
                        "username": "choisauce",
                        "content": "Over a year but thought I\\'d help answer this.\\ninner join only returns the portion of data that is joined together and excludes anything that doesn\\'t match anything from the other table.\\n\\nIn this case we want to query the name Allen Wang even though his Id isn\\'t joined with the Address table. We do this by using a left join if the person table is in the from clause, or a right join if the person table is in the join clause.\\n\\nWe wouldn\\'t use outer join since we don\\'t want to include Leetcode, California."
                    },
                    {
                        "username": "user8951FL",
                        "content": "How do you decide to use left joint? I think we could also use right..."
                    },
                    {
                        "username": "anuradhanda4498",
                        "content": "Here we choosing:\\nPerson: Table_1 \\nAddress: Table_2\\nWe want every value from the Table_1 and every value related to it in Table_2.\\nAs for Allen Wang we don\\'t have any value in address table, but we still want that to show it.\\nThis we can do with the help of Left_Table\\n\\n#upvote If you find it helping \\n"
                    },
                    {
                        "username": "alex_arpit",
                        "content": "1. if we will use right join it will select values from 2nd table i.e it will show null,null,leetcode,california .\\n\\n2.if we will use left join then it will focus on 1st table and will show wang,allen,null,null.\\n\\n MySQL query statement below\\nSELECT firstName,lastName,(case when city is Null then null else city end)as city,(case when state is Null then null else state end) as state from Person \\nleft join Address on Person.personId=Address.personId order by firstName;"
                    }
                ]
            },
            {
                "id": 1572390,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 1571384,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 1565958,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 1570804,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 2073089,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 2046336,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 2037918,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 2015209,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 2006296,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 2000411,
                "content": [
                    {
                        "username": "rongy2018",
                        "content": "this is an example of poorly dedesigned relational model. \\nlet personId in the Address table causes data redundency.  in addition\\uFF0C the person table  and address table have  a many to many relationship, therefore a junction table shall be introduced."
                    },
                    {
                        "username": "ya4",
                        "content": "below is my code, if I change inner join instead of left join, it's output is null? why? \\n\\n\\nselect Person.Firstname, Person.lastname,Address.city, Address. state\\n from Person\\nleft join Address\\non Person.PersonId = Address.PersonId"
                    },
                    {
                        "username": "greg6837",
                        "content": "My solution pass the runcode fine, but when I submit it keep saying it\\'s wrong.\\nNeed another pair of eyes to take a look.\\n\\nThank!\\n\\'\\'\\'\\nSELECT FirstName, LastName, City, State\\nFROM Person\\nLEFT JOIN Address\\nON Person.PersonID = Address.PersonID\\n;\\n\\'\\'\\'"
                    },
                    {
                        "username": "aryandec25",
                        "content": "##### key note here, which type of join to use.\\nSelect A.FirstName,\\nA.LastName, \\nB.City,\\nB.State \\nfrom Person A left JOIN Address B on\\nA.PersonId=B.PersonId"
                    },
                    {
                        "username": "Shadowpii",
                        "content": " `SELECT p.firstName,p.lastName,a.city,a.state\\nFROM Person as p\\nLEFT JOIN Address as a ON p.personId = a.presonId`\\n\\nwhat\\'s wrong with this code"
                    },
                    {
                        "username": "alextsevilla",
                        "content": "As a tip, if you are using CASE, don\\'t write null as a string!! "
                    },
                    {
                        "username": "bhuvanasetty97",
                        "content": "huii"
                    },
                    {
                        "username": "guilhermelinosp",
                        "content": "SELECT [TB_Person].[firstName]\\n      ,[TB_Person].[lastName]\\n      ,[TB_Address].[city]\\n      ,[TB_Address].[state]\\nFROM Person AS [TB_Person]\\nLEFT JOIN [Address] [TB_Address] ON [TB_Address].[personId] = [TB_Person].[personId]"
                    },
                    {
                        "username": "nourlx",
                        "content": "We just need to insert a NULL function.\\nHere is my solution :\\n\\nSELECT\\n    firstName,\\n    lastName,\\n    ISNULL(city, NULL) AS city,\\n    ISNULL(state, NULL) AS state\\nFROM Person \\nLEFT JOIN Address \\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "siddhantvh11",
                        "content": "Seriously why we use left join only??\\nwhy we are not using left join??"
                    }
                ]
            },
            {
                "id": 1966884,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1950889,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1949143,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1948266,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1917603,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1915047,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1896290,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1883402,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1870399,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1867628,
                "content": [
                    {
                        "username": "Sanjeevbk123",
                        "content": "SELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personIdSELECT a.firstName, a.lastName, b.city, b.state\\nfrom Person a\\nleft join Address b\\non a.personId=b.personId"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste\\n"
                    },
                    {
                        "username": "yancerqueira",
                        "content": "teste"
                    },
                    {
                        "username": "KuoDarren",
                        "content": "SELECT\\nfirstName,\\nlastName,\\nIFNULL(city,null) as city,\\nIFNULL(state,null) as state\\nFROM Person\\nLEFT JOIN Address\\nON Person.personId = Address.personId"
                    },
                    {
                        "username": "Savithri_Hariharan7",
                        "content": "select p.firstName,p.lastName,a.city,a.state from Person p, Address a where p.personId=a.personId"
                    },
                    {
                        "username": "imtiaz_py",
                        "content": "First query returns the same output as expected, yet it is not getting accepted. The Second on gets accepted. Could somebody tell me why the first one is not acceptable?\\n\\n# Doesn\\'t get accepted\\n`SELECT p.firstName, p.lastName, IFNULL(a.city, \\'null\\') as city, IFNULL(a.state, \\'null\\') as state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`\\n# Accepted\\n`SELECT p.firstName, p.lastName, a.city, a.state from Person p LEFT JOIN Address a ON p.personId = a.personId;\\n`"
                    },
                    {
                        "username": "shadab1",
                        "content": "can you guys help me here and tell me , where am I wrong in this query  : \\n\\nSelect\\nperson.firstname as \\'First name\\',\\nperson.lastname as \\'Last name\\',\\naddress.city as \\'City\\',\\naddress.state as \\'State\\'\\nfrom\\nperson \\nleft join\\naddress\\non\\nperson.personId = address.personId\\norder by\\nfirstname \\n\\n"
                    },
                    {
                        "username": "Linco011",
                        "content": "SELECT firstName,lastName,city,state FROM person\\nLEFT JOIN Address\\nON Person.personId = Address.personId;"
                    },
                    {
                        "username": "user5290DC",
                        "content": "Hello guys, i\\'m recieving this error message and i don\\'t know what to do:\\n\\n\"SELECT command denied to user \\'student\\'@\\'localhost\\' for table \\'p\\'\""
                    }
                ]
            },
            {
                "id": 1859865,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1857333,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1853216,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1848687,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1844180,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1834992,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1820656,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1812550,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1804789,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1791095,
                "content": [
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the solution that I wrote,\\nselect P.FirstName,P.LastName,A.City,A.State from Person as P left outer join Address as A ON P.PersonId=A.PersonId"
                    },
                    {
                        "username": "HasanFarazi1234",
                        "content": " `your inline code...your inline code...`[leetcode](https://leetcode.com)[leetcode](https://leetcode.com)[leetcode](https://leetcode.com) `your inline code...your inline code...`"
                    },
                    {
                        "username": "gokulpilot007",
                        "content": "why we are not using foreign key ??using foreign key also we get the same output but i dont know how to make it"
                    },
                    {
                        "username": "Babul955719",
                        "content": "select  firstName, lastName , city , state\\nfrom  Person \\nleft join Address\\non Person.personId = Address.personId - finally got it after trying 4 times , i am begineer in SQL"
                    },
                    {
                        "username": "jasurbekabdunazarov111",
                        "content": "SELECT p.lastName, p.firstName, a.city,a.state \\nFROM Person p \\nLEFT JOIN Address a \\nON p.personId=a.personId;"
                    },
                    {
                        "username": "8500423404",
                        "content": "select p.firstName,p.lastName,a.state,a.city \\nfrom Person p\\nleft join Address a \\non p.personId = a.personId"
                    },
                    {
                        "username": "MousePotatoa",
                        "content": "SELECT firstName, \\nlastName, \\nIF(city IS NOT NULL, city, \\'null\\') AS city, \\nIF(state IS NOT NULL, state, \\'null\\') AS state\\nFROM Person p\\nLEFT JOIN Address a ON p.personId = a.personId;\\n\\nI get expected output, test isn\\'t validated :O! Maybe I\\'ve stared at a screen too long for today.."
                    },
                    {
                        "username": "rkdapp",
                        "content": "\\nThis would be the best way\\n\\nselect p.firstName,p.lastName,a.city,a.state\\nfrom person p\\nleft JOIN Address a ON p.PersonId = a.PersonId"
                    },
                    {
                        "username": "Doctorma999",
                        "content": "Select p.firstName, p.lastName, a.city, a.state from Person p\\nLeft join Address a on p.personId=a.addressId\\n\\nRan this and got the wrong output, the city column shows as \\'Leetcode\\' instead of null. How do I report a null value if the column text isn\\'t correct?"
                    },
                    {
                        "username": "user2392CP",
                        "content": "select firstName, lastName, city, state from person as p LEFT JOIN  Address as a\\non p.personId = a.personId"
                    }
                ]
            },
            {
                "id": 1783622,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1779399,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1772183,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1763381,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1755336,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1750111,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1749289,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1744227,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1743144,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            },
            {
                "id": 1734285,
                "content": [
                    {
                        "username": "ajinkya_kadhe",
                        "content": " `SELECT lastName , firstName ,city , state FROM Person LEFT JOIN Address ON\\nPerson.personId = Address.personId`\\nAbove SQL query to report the last name, first name, city, and state of each person in the \"Person\" table, along with the null value for missing address information. The query uses a LEFT JOIN clause to join the \"Person\" and \"Address\" tables on the \"personId\" column. This allows the query to return all records from the \"Person\" table, even if the matching record is not present in the \"Address\" table. If a record is not found, the values for \"city\" and \"state\" will be null."
                    },
                    {
                        "username": "arkapravabhunia4",
                        "content": "how to solve the error \\nTable \\'test.persion\\' doesn\\'t exist\\n"
                    },
                    {
                        "username": "Almas02",
                        "content": "SELECT FirstName,LastName,City,State from Person  left join Address  on Person.PersonID=Address.PersonID"
                    },
                    {
                        "username": "imranansari9835",
                        "content": "SELECT P.firstName,P.lastName,A.city,A.state\\nFROM Person AS P\\nLEFT JOIN Address AS A ON P.personId=A.personId;"
                    },
                    {
                        "username": "paljugnu50",
                        "content": "elect Person.firstName,Person.lastName,Address.city,Address.state from Person  LEFT JOIN Address on Person.personId = Address.personId  ;"
                    },
                    {
                        "username": "somnathdutta2001",
                        "content": "when I try it with outer join it give syntax error.\\nwhy? anybody  can help? with the same code I just use left join it works. \\n\\nouter join will not right answer , it\\'s ok but why syntax error?"
                    },
                    {
                        "username": "nirbhayr",
                        "content": "The thing is outer join is a concept not an actual SYNTAX (at least in MySQL). Outer joins  include LEFT, RIGHT, and FULL OUTER JOIN. And that is the reason LEFT JOIN worked for you. Check the infograph on this page:https://mode.com/sql-tutorial/sql-outer-joins/\\n\\nHere is a bonus for you:\\n\\nselect p.firstName, p.lastName, a.city, a.state\\nfrom Address as a\\nRIGHT JOIN Person as p\\nON p.personId = a.personId \\n\\nYes! It is a RIGHT JOIN solution. Try it for yourself!!"
                    },
                    {
                        "username": "IamAJ22",
                        "content": "Solution :\\n`select firstname,lastname, city, state from person left join address on address.personid=person.personid;`"
                    },
                    {
                        "username": "Jhanvi_chaudhary",
                        "content": "SELECT firstName, lastName, city, state \\nFROM Person LEFT OUTER JOIN Address \\nON Person.personId=Address.personId;"
                    },
                    {
                        "username": "user4175bH",
                        "content": "select p.firstName ,p.lastName ,a.city ,a.state   FROM Person p left join Address a on      p.personId = a.personId \\n\\nI have a doubt,when I kept a where condition saying where  a.personid is null ,it showed an error."
                    },
                    {
                        "username": "nirbhayr",
                        "content": "I can\\'t say why it showed an error unless I can see the whole code but I can tell you why WHERE a.personId IS NULL won\\'t work here. \\n\\na.personId IS NULL checks where there is no data in the Address table for a particular person. However, if you read the problem carefully, you can see that it is not what is asked of you. It is easy to think along these lines and even I did when I first attempted the problem. The thing that is asked of us is to check if a given personId exists in both Address table and Person table. When you do the LEFT JOIN ON a.perosnId = p.PersonId, it is exactly what is being checked.  Hope it clears your doubt. Let me know if you need any further clarifications. "
                    },
                    {
                        "username": "piotrkow93",
                        "content": "Read about left join, and difference between joins"
                    }
                ]
            }
        ]
    },
    {
        "title": "H-Index II",
        "question_content": "<p>Given an array of integers <code>citations</code> where <code>citations[i]</code> is the number of citations a researcher received for their <code>i<sup>th</sup></code> paper and <code>citations</code> is sorted in <strong>ascending order</strong>, return <em>the researcher&#39;s h-index</em>.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">definition of h-index on Wikipedia</a>: The h-index is defined as the maximum value of <code>h</code> such that the given researcher has published at least <code>h</code> papers that have each been cited at least <code>h</code> times.</p>\n\n<p>You must write an algorithm that runs in logarithmic time.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> citations = [0,1,3,5,6]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> citations = [1,2,100]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == citations.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= citations[i] &lt;= 1000</code></li>\n\t<li><code>citations</code> is sorted in <strong>ascending order</strong>.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 71063,
                "title": "standard-binary-search",
                "content": "Just binary search, each time check citations[mid]\\ncase 1: citations[mid] == len-mid, then it means there are citations[mid] papers that have at least citations[mid] citations.\\ncase 2: citations[mid] > len-mid, then it means there are citations[mid] papers that have moret than citations[mid] citations, so we should continue searching in the left half\\ncase 3:  citations[mid] < len-mid, we should continue searching in the right side\\nAfter iteration, it is guaranteed that right+1 is the one we need to find (i.e. len-(right+1) papars have at least len-(righ+1) citations)\\n\\n\\n    class Solution {\\n    public:\\n        int hIndex(vector<int>& citations) {\\n            int left=0, len = citations.size(), right= len-1,  mid;\\n            while(left<=right)\\n            {\\n                mid=(left+right)>>1;\\n                if(citations[mid]== (len-mid)) return citations[mid];\\n                else if(citations[mid] > (len-mid)) right = mid - 1;\\n                else left = mid + 1;\\n            }\\n            return len - (right+1);\\n        }\\n    };\\n\\nor simplified version\\n\\n    class Solution {\\n    public:\\n        int hIndex(vector<int>& citations) {\\n            int left=0, len = citations.size(), right= len-1,  mid;\\n            while(left<=right)\\n            {\\n                mid=left+ (right-left)/2;\\n                if(citations[mid] >= (len-mid)) right = mid - 1;\\n                else left = mid + 1;\\n            }\\n            return len - left;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int hIndex(vector<int>& citations) {\\n            int left=0, len = citations.size(), right= len-1,  mid;\\n            while(left<=right)\\n            {\\n                mid=(left+right)>>1;\\n                if(citations[mid]== (len-mid)) return citations[mid];\\n                else if(citations[mid] > (len-mid)) right = mid - 1;\\n                else left = mid + 1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 71124,
                "title": "java-binary-search-simple-and-clean",
                "content": "The idea is to search for the first index from the sorted array so that :\\n<br> <i>citations[index] >= length(citations) - index.</I> <br>\\nAnd return (length - index) as the result.\\nHere is the code:\\n\\n    public int hIndex(int[] citations) {\\n\\t\\tint len = citations.length;\\n\\t\\tint lo = 0, hi = len - 1;\\n\\t\\twhile (lo <= hi) {\\n\\t\\t\\tint med = (hi + lo) / 2;\\n\\t\\t\\tif (citations[med] == len - med) {\\n\\t\\t\\t\\treturn len - med;\\n\\t\\t\\t} else if (citations[med] < len - med) {\\n\\t\\t\\t\\tlo = med + 1;\\n\\t\\t\\t} else { \\n\\t\\t\\t\\t//(citations[med] > len-med), med qualified as a hIndex,\\n\\t\\t\\t    // but we have to continue to search for a higher one.\\n\\t\\t\\t\\thi = med - 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn len - lo;\\n\\t}",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "The idea is to search for the first index from the sorted array so that :\\n<br> <i>citations[index] >= length(citations) - index.</I> <br>\\nAnd return (length - index) as the result.\\nHere is the code:\\n\\n    public int hIndex(int[] citations) {\\n\\t\\tint len = citations.length;\\n\\t\\tint lo = 0, hi = len - 1;\\n\\t\\twhile (lo <= hi) {\\n\\t\\t\\tint med = (hi + lo) / 2;\\n\\t\\t\\tif (citations[med] == len - med) {\\n\\t\\t\\t\\treturn len - med;\\n\\t\\t\\t} else if (citations[med] < len - med) {\\n\\t\\t\\t\\tlo = med + 1;\\n\\t\\t\\t} else { \\n\\t\\t\\t\\t//(citations[med] > len-med), med qualified as a hIndex,\\n\\t\\t\\t    // but we have to continue to search for a higher one.\\n\\t\\t\\t\\thi = med - 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn len - lo;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 693427,
                "title": "c-both-o-logn-and-o-n-solution-with-explanation",
                "content": "First we will look at O(N) solution to understand the problem then we will optimise it with binary search.\\n\\n**The Idea behind the problem**\\nLet us consider the following example:\\n```\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\\nHere the ans is 6.\\n\\nWhy not 5 or 7?\\n\\nnumber of papers with citation alteast 7 is only 5.\\nWheras for 6 it is 6 i.e. among 12 papers 6 papers have citation atleast 6.\\n\\nAnd though number of paper with citation atleast 5 is more than that of 6, 6 is higher value compared to 5 and also the quantity 6 is a better tradeoff.\\n\\n------------------(Credits: @greeneggsandsam)---------------------------------------------------------------------------\\n\"A scientist has index h if h of his/her N papers have at least h citations each, and the other N \\u2212 h papers have no more than h citations each.\"\\n\\n5 of the papers have at least 5 citations, but among the other 7 papers, one (value 6) has more than 5 citations.\\n------------------------------------------------------------------------------------------------------------------------------\\nThe key concept here is to understand that the problem requires a value that has a proper weight with significant quantity.\\n\\nOne more observation we can make here is that more consecutive integers the value at the middle is good as the quantity and weight is bettered compared to other elements.\\n```\\nThe O(N) approach: \\n\\nThis approach is straight forward traverse the array and when you find the first element such that the value of that element is greater than or equal to the amount of elements remaining that is our ans so we return the length of array after that point. If no such element exisits return 0;\\n\\nCODE: \\n\\n```\\nint hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        for(int i=0;i<n;i++){\\n             if(c[i] >= n-i) return n-i;   // The first element whose value is more than the length of remaining array. \\n\\t\\t\\t //So we return the remaining length which is the answer.\\n\\t\\t\\t // eg [0,1,3,4,6]  c[2] = 3 >2(length of remaing array) so n-i = length of remaining array + that element\\n        }\\n        return 0;\\n    }\\n```\\n\\nThe O(logn) approach | Binary Search\\n\\nIt is clear now that we need to find such an element as discussed in O(n) solution but faster so we need binary search. We will store our answer in ans variable.  Once our condition is hit we store the length of remaing array on ans and continue with our binary search as we want the first element that satisfies this condition.\\n\\nCODE: \\n```\\nint hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        int low =0,high=n-1;\\n        int ans = 0;\\n        while(low<=high){\\n            int mid  = low + (high-low)/2;\\n            if(c[mid] >= n-mid){\\n                ans = n-mid;\\n                high = mid - 1;\\n            }else{\\n                low  = mid + 1;\\n            }\\n        }\\n        \\n        return ans;\\n\\t}\\n```\\nHope this helps! :)\\nForgive me for any ambiguous sentences.\\n",
                "solutionTags": [],
                "code": "```\\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\\nHere the ans is 6.\\n\\nWhy not 5 or 7?\\n\\nnumber of papers with citation alteast 7 is only 5.\\nWheras for 6 it is 6 i.e. among 12 papers 6 papers have citation atleast 6.\\n\\nAnd though number of paper with citation atleast 5 is more than that of 6, 6 is higher value compared to 5 and also the quantity 6 is a better tradeoff.\\n\\n------------------(Credits: @greeneggsandsam)---------------------------------------------------------------------------\\n\"A scientist has index h if h of his/her N papers have at least h citations each, and the other N \\u2212 h papers have no more than h citations each.\"\\n\\n5 of the papers have at least 5 citations, but among the other 7 papers, one (value 6) has more than 5 citations.\\n------------------------------------------------------------------------------------------------------------------------------\\nThe key concept here is to understand that the problem requires a value that has a proper weight with significant quantity.\\n\\nOne more observation we can make here is that more consecutive integers the value at the middle is good as the quantity and weight is bettered compared to other elements.\\n```\n```\\nint hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        for(int i=0;i<n;i++){\\n             if(c[i] >= n-i) return n-i;   // The first element whose value is more than the length of remaining array. \\n\\t\\t\\t //So we return the remaining length which is the answer.\\n\\t\\t\\t // eg [0,1,3,4,6]  c[2] = 3 >2(length of remaing array) so n-i = length of remaining array + that element\\n        }\\n        return 0;\\n    }\\n```\n```\\nint hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        int low =0,high=n-1;\\n        int ans = 0;\\n        while(low<=high){\\n            int mid  = low + (high-low)/2;\\n            if(c[mid] >= n-mid){\\n                ans = n-mid;\\n                high = mid - 1;\\n            }else{\\n                low  = mid + 1;\\n            }\\n        }\\n        \\n        return ans;\\n\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 693380,
                "title": "python-2-solutions-binary-search-o-log-n-and-oneliner-o-n-explained",
                "content": "### Binary search\\nIn this problem data is already sorted for you, so we should take advantage of it. What you think what you need to search in sorted data? The answer is **binary search**. Of course you can not apply it like this, you need to adapt it to our problem. Let us start with example `[1,3,3,3,4,4,7]` and then consider general case. \\n\\n`......X`\\n`......X`\\n`......X`\\n`....XXX`\\n`.XXXXXX`\\n`.XXXXXX`\\n`XXXXXXX`\\n\\nWhat is the answer fo this data? It is `3`, because there is `3` publications with at least `3` citations:\\n\\n`......X`\\n`......X`\\n`......X`\\n`....XXX`\\n`.XXXOOO`\\n`.XXXOOO`\\n`XXXXOOO`\\n\\nI denoted found elements as `O`. We can see, that what we actually need to find, is the size of biggest **square** which is inside our sorted data. Mathematically speaking, we look for smallest index `i`, such that `i + citations[i] >= n` and then we return `n-i`. In our example `n=7`, `i = 4` and answer is `7 - 4 = 3`. How we find this smallest index `i`? Using **binary search** of course, because sequence `i + citations[i]` is non-decreasing.\\n\\nWe can not use `bisect` library here, because for this we need to calculate `i + citations[i]` for every `i`, which can be done only in `O(n)`, so we need to apply vanila binary search by hands.\\n\\n**Complexity**: time complexity is `O(log n)` and additional space complexity is `O(1)`.\\n\\n```\\nclass Solution:\\n    def hIndex(self, citations):\\n        if not citations: return 0\\n        n = len(citations)\\n        beg, end = 0, n - 1\\n        while beg <= end:\\n            mid = (beg + end)//2\\n            if mid + citations[mid] >= n:\\n                end = mid - 1\\n            else:\\n                beg = mid + 1                \\n        return n - beg\\n```\\n\\n### Oneliner \\n\\nIf we do not use binary search, we can solve problem in one line, using linear search. We need to add `[0]` in the end to handle some border cases.\\n\\n```\\nclass Solution:\\n    def hIndex(self, c):\\n        return ([i+j>=len(c) for i,j in enumerate(c)][::-1]+[0]).index(0)\\n```\\n\\nSee also my solution of **254** problem **H-Index**:\\nhttps://leetcode.com/problems/h-index/discuss/656820/Python-O(n)-timeandspace-with-explanation\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations):\\n        if not citations: return 0\\n        n = len(citations)\\n        beg, end = 0, n - 1\\n        while beg <= end:\\n            mid = (beg + end)//2\\n            if mid + citations[mid] >= n:\\n                end = mid - 1\\n            else:\\n                beg = mid + 1                \\n        return n - beg\\n```\n```\\nclass Solution:\\n    def hIndex(self, c):\\n        return ([i+j>=len(c) for i,j in enumerate(c)][::-1]+[0]).index(0)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71071,
                "title": "o-logn-time-o-1-space-easy-solution-with-detailed-explanations-c-java-python",
                "content": "The basic idea of this solution is to use **binary search** to find the minimum `index` such that\\n\\n    citations[index] >= length(citations) - index\\n\\nAfter finding this `index`, the answer is `length(citations) - index`.\\n\\nThis logic is very similar to the C++ function `lower_bound` or `upper_bound`.\\n\\n----------\\n\\nComplexities:\\n\\n- Time: O(log *n*)\\n- Space: O(1)\\n\\n----------\\n\\n\\n**C++:**\\n\\n    class Solution {\\n    public:\\n        int hIndex(vector<int>& citations) {\\n            int size = citations.size();\\n\\n            int first = 0;\\n            int mid;\\n            int count = size;\\n            int step;\\n            \\n            while (count > 0) {\\n                step = count / 2;\\n                mid = first + step;\\n                if (citations[mid] < size - mid) {\\n                    first = mid + 1;\\n                    count -= (step + 1);\\n                }\\n                else {\\n                    count = step;\\n                }\\n            }\\n            \\n            return size - first;\\n        }\\n    };\\n\\n\\n\\n\\n**Java:**\\n\\n    public class Solution {\\n        public int hIndex(int[] citations) {\\n            int len = citations.length;\\n\\n            int first = 0;\\n            int mid;\\n            int count = len;\\n            int step;\\n            \\n            while (count > 0) {\\n                step = count / 2;\\n                mid = first + step;\\n                if (citations[mid] < len - mid) {\\n                    first = mid + 1;\\n                    count -= (step + 1);\\n                }\\n                else {\\n                    count = step;\\n                }\\n            }\\n            \\n            return len - first;\\n        }\\n    }\\n\\n**Python:**\\n\\n    class Solution(object):\\n        def hIndex(self, citations):\\n            \"\"\"\\n            :type citations: List[int]\\n            :rtype: int\\n            \"\"\"\\n            \\n            length = len(citations)\\n            \\n            first = 0\\n            count = length\\n            \\n            while count > 0:\\n                step = count / 2\\n                mid = first + step\\n                if citations[mid] < length - mid:\\n                    first = mid + 1\\n                    count -= (step + 1)\\n                else:\\n                    count = step\\n            \\n            return length - first\\n            \\n------------------\\n\\n**@daviantan1890  @ruichang** Thank you for your comments and discussions.\\n\\nI am very sure that two-branch binary search is more efficient than three branch binary search.\\nand (low + high) is not good idea since it may rely on the overflow behavior.\\nIn fact, using `count` `step` `first` `mid` is the standard implement way of C++, so I do not think there are better ways to implement the binary search.",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int hIndex(vector<int>& citations) {\\n            int size = citations.size();\\n\\n            int first = 0;\\n            int mid;\\n            int count = size;\\n            int step;\\n            \\n            while (count > 0) {\\n                step = count / 2;\\n                mid = first + step;\\n                if (citations[mid] < size - mid) {\\n                    first = mid + 1;\\n                    count -= (step + 1);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 71093,
                "title": "short-python-o-log-n-solution",
                "content": "The idea is to do binary search to find the min index such that `citations[i] >= len(citations) - i`, then the answer is `len(citations)-i`\\n\\n    def hIndex(self, citations):\\n        n = len(citations)\\n        l, r = 0, n-1\\n        while l <= r:\\n            mid = (l+r)/2\\n            if citations[mid] >= n-mid:\\n                r = mid - 1\\n            else:\\n                l = mid + 1\\n        return n-l",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "The idea is to do binary search to find the min index such that `citations[i] >= len(citations) - i`, then the answer is `len(citations)-i`\\n\\n    def hIndex(self, citations):\\n        n = len(citations)\\n        l, r = 0, n-1\\n        while l <= r:\\n            mid = (l+r)/2\\n            if citations[mid] >= n-mid:\\n                r = mid - 1\\n            else:\\n                l = mid + 1\\n        return n-l",
                "codeTag": "Python3"
            },
            {
                "id": 71115,
                "title": "very-standard-binary-search-using-start-1-end",
                "content": "    public class Solution {\\n        public int hIndex(int[] citations) {\\n            int length = citations.length;\\n            if (length == 0) return 0;\\n            int start = 0, end = length-1;\\n            while (start + 1 < end) {\\n                int mid = start + (end-start)/2;\\n                if (citations[mid] == length-mid) {\\n                    return length-mid;\\n                } else if (citations[mid] > length-mid) {\\n                    end = mid;\\n                } else {\\n                    start = mid;\\n                }\\n            }\\n            // once jump out, always check start & end\\n            if (citations[start] >= length-start) return length-start;\\n            if (citations[end] >= length-end) return length-end;\\n            return 0;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int hIndex(int[] citations) {\\n            int length = citations.length;\\n            if (length == 0) return 0;\\n            int start = 0, end = length-1;\\n            while (start + 1 < end) {\\n                int mid = start + (end-start)/2;\\n                if (citations[mid] == length-mid) {\\n                    return length-mid;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 71090,
                "title": "most-clear-explanation-binary-search-java-solution",
                "content": "We use two pinter to solve this problem: pointer l (low) and pointer h (high).\\n\\nSay n = citations.length. \\nBecause the range of H-index is [0,n], at the beginning we must point high pointer after the last element of the array: h = n. In this way we can generate all possible value without worrying about annoying corner case.\\n\\nThe rest is standard binary search, we find middle point m and compare **citations[m]** with **n-m** (n-m means number of papers has at least citations[m] citations.)\\n1. citations[m] == n-m : we find the answer\\n2. citations[m] < n-m : more papers has at least this number of citations we should raise the bar of citations so we go to the right part: l = m+1.\\n3. citations[m] > n-m : we should lower the bar so we go to the left part: h = m.\\n\\nIn the end **l == r** and the H-index is n-l.\\n\\n```\\npublic class Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int l=0, h=citations.length;\\n        while(l<h){\\n            int m=l+h>>>1;\\n            if(citations[m]==n-m)\\n                return n-m;\\n            else if(citations[m]<n-m){\\n                l=m+1;\\n            }else{\\n                h=m;\\n            }\\n        }\\n        return n-l;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\npublic class Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int l=0, h=citations.length;\\n        while(l<h){\\n            int m=l+h>>>1;\\n            if(citations[m]==n-m)\\n                return n-m;\\n            else if(citations[m]<n-m){\\n                l=m+1;\\n            }else{\\n                h=m;\\n            }\\n        }\\n        return n-l;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71117,
                "title": "share-my-c-o-logn-solution-with-explanation",
                "content": "The basic idea comes from the description **h of his/her N papers have at least h citations each**.\\nTherefore, we know `if \"mid + 1\" is a valid h index, it means value of position \"citationsSize - mid - 1\" must exceed \"mid\"`. After we find a valid h index, we go on searching on the right part to see if we can find a larger h index.\\nIf it's not a valid h index, the h index can be found in the left part and we simply follow the standard binary search to solve this problem. \\n    \\n    int hIndex(int* citations, int citationsSize) {\\n        int lo = 0, hi = citationsSize, mid, index = 0;\\n        while (lo <= hi) {\\n            mid = lo + ((hi - lo) >> 1);\\n            if (citations[citationsSize - mid - 1] > mid) {\\n                lo = mid + 1;\\n                index = lo;\\n            } else {\\n                hi = mid - 1;\\n            }\\n        }\\n        return index;\\n    }",
                "solutionTags": [],
                "code": "The basic idea comes from the description **h of his/her N papers have at least h citations each**.\\nTherefore, we know `if \"mid + 1\" is a valid h index, it means value of position \"citationsSize - mid - 1\" must exceed \"mid\"`. After we find a valid h index, we go on searching on the right part to see if we can find a larger h index.\\nIf it's not a valid h index, the h index can be found in the left part and we simply follow the standard binary search to solve this problem. \\n    \\n    int hIndex(int* citations, int citationsSize) {\\n        int lo = 0, hi = citationsSize, mid, index = 0;\\n        while (lo <= hi) {\\n            mid = lo + ((hi - lo) >> 1);\\n            if (citations[citationsSize - mid - 1] > mid) {\\n                lo = mid + 1;\\n                index = lo;\\n            } else {\\n                hi = mid - 1;\\n            }\\n        }\\n        return index;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 71097,
                "title": "c-binary-search",
                "content": "    class Solution {\\n    public:\\n        int hIndex(vector<int>& citations) {\\n            if (citations.empty()) return 0;\\n            int start = 0, len = citations.size(), end = len - 1;\\n            while (start <= end) {\\n                int mid = (start + end)/2;\\n                if (citations[mid] < len - mid)\\n                    start = mid + 1;\\n                else if (citations[mid] > len - mid)\\n                    end = mid - 1;\\n                else return len - mid;\\n            }\\n            return len - start;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        int hIndex(vector<int>& citations) {\\n            if (citations.empty()) return 0;\\n            int start = 0, len = citations.size(), end = len - 1;\\n            while (start <= end) {\\n                int mid = (start + end)/2;\\n                if (citations[mid] < len - mid)\\n                    start = mid + 1;\\n                else if (citations[mid] > len - mid)\\n                    end = mid - 1;\\n                else return len - mid;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 71148,
                "title": "binary-search-in-python",
                "content": "Binary Search With Runtime Complexity of O(log n):\\n\\n    class Solution(object):\\n        def hIndex(self, citations):\\n            \"\"\"\\n            :type citations: List[int]\\n            :rtype: int\\n            \"\"\"\\n            N = len(citations)\\n            low, high = 0, N - 1\\n            while low <= high:\\n                mid = (low + high) / 2\\n                if N - mid > citations[mid]:\\n                    low = mid + 1\\n                else:\\n                    high = mid - 1\\n            return N - low\\n\\nRef: [http://bookshadow.com/weblog/2015/09/04/leetcode-h-index-ii/][1]\\n\\n\\n  [1]: http://bookshadow.com/weblog/2015/09/04/leetcode-h-index-ii/",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "Binary Search With Runtime Complexity of O(log n):\\n\\n    class Solution(object):\\n        def hIndex(self, citations):\\n            \"\"\"\\n            :type citations: List[int]\\n            :rtype: int\\n            \"\"\"\\n            N = len(citations)\\n            low, high = 0, N - 1\\n            while low <= high:\\n                mid = (low + high) / 2\\n                if N - mid > citations[mid]:\\n                    low = mid + 1\\n                else:\\n                    high = mid - 1\\n            return N - low\\n\\nRef: [http://bookshadow.com/weblog/2015/09/04/leetcode-h-index-ii/][1]\\n\\n\\n  [1]: http://bookshadow.com/weblog/2015/09/04/leetcode-h-index-ii/",
                "codeTag": "Java"
            },
            {
                "id": 404677,
                "title": "here-s-a-very-concise-7-line-c-solution-why-is-everyone-writing-messy-binary-search",
                "content": "Some solutions with high votes really sting my eyes. \\nHowever, it does take some experience to write a good binary search sometimes.\\n\\n```C++\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size(), l = 0, r = n;\\n        while(l < r){\\n            int mid = l + (r - l) / 2;\\n            if(citations[mid] >= n - mid) r = mid;\\n            else l = mid + 1;\\n        }\\n        return n - r;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```C++\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size(), l = 0, r = n;\\n        while(l < r){\\n            int mid = l + (r - l) / 2;\\n            if(citations[mid] >= n - mid) r = mid;\\n            else l = mid + 1;\\n        }\\n        return n - r;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71119,
                "title": "c-binary-search-h-index-ii",
                "content": "    int hIndex(vector<int>& citations) {\\n        const int size_c = citations.size();\\n        int left = 0, right = size_c - 1;\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] < size_c - mid) left = mid + 1;\\n            else right = mid - 1;\\n        }\\n        return size_c - left;\\n    }",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "    int hIndex(vector<int>& citations) {\\n        const int size_c = citations.size();\\n        int left = 0, right = size_c - 1;\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] < size_c - mid) left = mid + 1;\\n            else right = mid - 1;\\n        }\\n        return size_c - left;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3420753,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) \\n    {\\n        int n = citations.size();\\n        int min = 0, max = n - 1;\\n        int mid;\\n        while (min <= max)\\n         {\\n            mid = (min + max) / 2;\\n            if (citations[mid] < n - mid) \\n            {\\n                min = mid + 1;\\n            } \\n            else \\n            {\\n                max = mid - 1;\\n            }\\n        }\\n        return n - min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) \\n    {\\n        int n = citations.size();\\n        int min = 0, max = n - 1;\\n        int mid;\\n        while (min <= max)\\n         {\\n            mid = (min + max) / 2;\\n            if (citations[mid] < n - mid) \\n            {\\n                min = mid + 1;\\n            } \\n            else \\n            {\\n                max = mid - 1;\\n            }\\n        }\\n        return n - min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235216,
                "title": "275-time-98-1-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe problem is a follow-up to the H-Index problem with the added constraint that the input array is sorted in ascending order. As a result, we can take advantage of this property to optimize the solution.\\n\\nThe basic idea is to use binary search to find the h-index. Since the array is sorted in ascending order, we can use the index to represent the citation count. For example, citations[3] means the number of papers that have at least 4 citations.\\n\\nLet\\'s take the example [0, 1, 3, 5, 6] and the length of the array n = 5. We start by initializing the left and right pointers to 0 and n - 1, respectively. The mid index is (left + right) // 2 = 2. The corresponding citation count is citations[2] = 3. Since there are 3 papers with at least 3 citations, and the remaining two papers have no more than 3 citations, the h-index is 3.\\n\\nIf citations[2] is less than n - 2, then we need to move the left pointer to mid + 1, and if citations[2] is greater than or equal to n - 2, then we need to move the right pointer to mid - 1. We repeat the process until left > right.\\n\\nThe time complexity of the algorithm is O(log n), and the space complexity is O(1).\\n\\n# Complexity\\n- Time complexity:\\n98.1%\\n\\n- Space complexity:\\n75.12%\\n\\n# Code\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n = len(citations)\\n        left, right = 0, n - 1\\n        while left <= right:\\n            mid = (left + right) // 2\\n            if citations[mid] == n - mid:\\n                return n - mid\\n            elif citations[mid] < n - mid:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return n - left\\n\\n```\\n\\nNote that we return n - left instead of n - mid because left may not be at the exact position of the h-index. However, we know that left is the smallest index that satisfies citations[left] >= n - left, so n - left is the correct answer.",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n = len(citations)\\n        left, right = 0, n - 1\\n        while left <= right:\\n            mid = (left + right) // 2\\n            if citations[mid] == n - mid:\\n                return n - mid\\n            elif citations[mid] < n - mid:\\n                left = mid + 1\\n            else:\\n                right = mid - 1\\n        return n - left\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71144,
                "title": "two-solutions-o-log-n-o-n",
                "content": "1. O(lg n)\\n\\n        int hIndex(vector<int>& citations) {\\n\\t\\t   int left = 0;\\n\\t       int right = citations.size() - 1;\\n  \\t\\t   int n = citations.size();\\n\\t\\t   int last = 0;\\n\\n\\t\\t   while (left <= right) {\\n\\t\\t  \\t  int mid = left + (right - left) / 2;\\n\\t\\t\\t  if (citations[mid] == n - mid)\\n\\t\\t\\t  \\treturn n - mid;\\n\\n\\t\\t\\t  if (n - mid < citations[mid]) {\\n\\t\\t\\t\\tright = mid - 1;\\n\\t\\t\\t\\tlast = n - mid;\\n\\t\\t\\t  }\\n\\t\\t\\t  else\\n\\t\\t\\t\\tleft = mid + 1;\\n\\t\\t   }\\n\\n\\t\\t   return last;\\n\\t    }\\n\\n\\n\\n\\n2. O(n)\\n\\n        int hIndex(vector<int>& citations) {\\n           int n = citations.size();\\n           for(int i = 0; i<citations.size(); i++) {\\n              if(n - i <= citations[i])\\n                   return n - i;\\n           }\\n        \\n           return 0;\\n        }",
                "solutionTags": [],
                "code": "1. O(lg n)\\n\\n        int hIndex(vector<int>& citations) {\\n\\t\\t   int left = 0;\\n\\t       int right = citations.size() - 1;\\n  \\t\\t   int n = citations.size();\\n\\t\\t   int last = 0;\\n\\n\\t\\t   while (left <= right) {\\n\\t\\t  \\t  int mid = left + (right - left) / 2;\\n\\t\\t\\t  if (citations[mid] == n - mid)\\n\\t\\t\\t  \\treturn n - mid;\\n\\n\\t\\t\\t  if (n - mid < citations[mid]) {\\n\\t\\t\\t\\tright = mid - 1;\\n\\t\\t\\t\\tlast = n - mid;\\n\\t\\t\\t  }\\n\\t\\t\\t  else\\n\\t\\t\\t\\tleft = mid + 1;\\n\\t\\t   }\\n\\n\\t\\t   return last;\\n\\t    }\\n\\n\\n\\n\\n2. O(n)\\n\\n        int hIndex(vector<int>& citations) {\\n           int n = citations.size();\\n           for(int i = 0; i<citations.size(); i++) {\\n              if(n - i <= citations[i])\\n                   return n - i;\\n           }\\n        \\n           return 0;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 3296545,
                "title": "java-clear-explanation-binary-search",
                "content": "We use the concept of Binary Search where low=0 and high=n-1(last element).\\n\\nSay n = citations.length.\\nBecause the range of H-index is [0,n], at the beginning we must point high pointer at the last element of the array: h = n-1. In this way whenever we compute and find the answer we can store the answer in  another variable ANS.\\n\\nThe rest is standard binary search, we find middle point m and compare citations[m] with n-m (n-m means number of papers has at least citations[m] citations.)\\n\\ncitations[m] == n-m : we find the answer where the n-m means number of papers has at least citations[m] citations.\\ncitations[m] < n-m : Here the citations in (n-m) is more so to reduce it we must Increase m so move right i.e l=m+1.\\ncitations[m] > n-m : Here the citations in (n-m) is less so to Increase it we must reeduce m so move left i.e h=m-1.\\n\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        \\n        int n=citations.length;\\n        int low=0;\\n        int high=n-1;\\n        int ans=-1;\\n        while(low<=high){\\n            int mid=low+(high-low)/2;\\n            \\n            if(citations[mid]==n-mid){\\n                ans=n-mid;\\n                return ans;\\n                \\n            }\\n            else if(citations[mid]<n-mid){\\n                low=mid+1;\\n            }else if(citations[mid]>n-mid){\\n                high=mid-1;\\n            }\\n            \\n            \\n            \\n        }\\n        return n-low;\\n    }\\n}\\n```\\n\\n\\n\\nThanks.\\nIf any doubt post in comment section.",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        \\n        int n=citations.length;\\n        int low=0;\\n        int high=n-1;\\n        int ans=-1;\\n        while(low<=high){\\n            int mid=low+(high-low)/2;\\n            \\n            if(citations[mid]==n-mid){\\n                ans=n-mid;\\n                return ans;\\n                \\n            }\\n            else if(citations[mid]<n-mid){\\n                low=mid+1;\\n            }else if(citations[mid]>n-mid){\\n                high=mid-1;\\n            }\\n            \\n            \\n            \\n        }\\n        return n-low;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3093362,
                "title": "easy-python-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        citations=citations[::-1]\\n        for i in range(len(citations)):\\n            if citations[i]<=i:\\n                return i\\n        return len(citations)     \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        citations=citations[::-1]\\n        for i in range(len(citations)):\\n            if citations[i]<=i:\\n                return i\\n        return len(citations)     \\n```",
                "codeTag": "Java"
            },
            {
                "id": 693522,
                "title": "python-o-log-n-with-explanation",
                "content": "Explanation:\\nI will break this down in to two cases.\\n\\nCase 1\\uFF1AIf n-mid==citations[mid]: \\nWe cannot increase the h-index anymore. (If we increase it by 1, the citation before will be excluded, and the number of citations>=h-index will definitely be less than h-index)\\n\\nCase 2: We exit the binary search without hitting the n-mid==citations[mid] condition\\uFF1A\\nWe know that the binary search will stop at the index where citations[low-1]<h-index< citations[low], the maximum h-index possible will be the length of citations[low:]. \\n\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n=len(citations)\\n        if n==0:return 0\\n        low=0;high=n\\n        while high>low:\\n            mid=(low+high)//2\\n            if n-mid==citations[mid]:\\n                return n-mid\\n            if n-mid>citations[mid]:\\n                low=mid+1\\n            else:\\n                high=mid\\n        return n-low\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n=len(citations)\\n        if n==0:return 0\\n        low=0;high=n\\n        while high>low:\\n            mid=(low+high)//2\\n            if n-mid==citations[mid]:\\n                return n-mid\\n            if n-mid>citations[mid]:\\n                low=mid+1\\n            else:\\n                high=mid\\n        return n-low\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71146,
                "title": "easy-o-logn-c-8ms-solution",
                "content": "    int hIndex(vector<int>& citations) {\\n        int size = citations.size();\\n        if (size == 0) {\\n            return 0;\\n        }\\n        int l = 0, r = size - 1; \\n        while (l < r) {\\n            int m = (l + r) / 2;\\n            if (citations[m] < size - m) {\\n                l = m + 1;\\n            } else {\\n                r = m;\\n            }\\n        }\\n        if (!citations[r]) {\\n            return 0;\\n        } else {\\n            return size - r;\\n        }\\n    }",
                "solutionTags": [
                    "C++",
                    "Binary Tree"
                ],
                "code": "    int hIndex(vector<int>& citations) {\\n        int size = citations.size();\\n        if (size == 0) {\\n            return 0;\\n        }\\n        int l = 0, r = size - 1; \\n        while (l < r) {\\n            int m = (l + r) / 2;\\n            if (citations[m] < size - m) {\\n                l = m + 1;\\n            } else {\\n                r = m;\\n            }\\n        }\\n        if (!citations[r]) {\\n            return 0;\\n        } else {\\n            return size - r;\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3825641,
                "title": "100-faster-sufficient-intuition-binary-search",
                "content": "# Intuition\\n  100 % faster solution:\\uD83C\\uDFC6\\uD83C\\uDFC6\\n   \\n![Screenshot 2023-07-28 001104.png](https://assets.leetcode.com/users/images/2875fa6f-32b7-48ec-9647-7ca1645e7751_1690486356.7312574.png)\\n\\n****we require atleast m numbers of papers, which having greater or equal to m citations.****\\n\\neg. [ 3 , 2 , 5 , 1 , 7 , 4] in this array [5,7,4] these are the elements that we can select (**because these 3 papers citations are >= 3).**\\n\\n****if we select [3,5,7,4] from input array then there should be atleast 4 elements(in this problem called research paper) which have to greater than or equal to 4 . but in above selected array 3 element is not greater than 4 . which is not valid for citation criteria****\\n\\nSo,we can\\'t include 3. hence ans will be 3 which is [5 , 7, 4]\\uD83D\\uDE80\\n\\n# Complexity\\n- Time complexity:\\n   O(log N)\\n\\n- Space complexity:\\n  O(1)\\n\\n **if you find helpful Kindly Upvote**\\uD83D\\uDE80\\uD83D\\uDE80\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int l = 0 , h = n-1;\\n        int ans = 0 ;\\n        while( l <= h ){\\n            int mid = l + (h-l)/2;\\n            int idx = n - mid ;\\n            if(citations[mid] >= idx){\\n                ans = idx ;\\n                h = mid-1;\\n            }\\n            else{\\n                l = mid+1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int l = 0 , h = n-1;\\n        int ans = 0 ;\\n        while( l <= h ){\\n            int mid = l + (h-l)/2;\\n            int idx = n - mid ;\\n            if(citations[mid] >= idx){\\n                ans = idx ;\\n                h = mid-1;\\n            }\\n            else{\\n                l = mid+1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2914648,
                "title": "c-solution-binary-search-clean-concise-code",
                "content": "\\n# Complexity\\n- Time complexity: O(log N . Range)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- \\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& c) {\\n        ios::sync_with_stdio(0);\\n        cin.tie(NULL);\\n        \\n        int n = c.size();\\n        int low = 0, high = n - 1, mid;\\n        while(low <= high) {\\n            //To Avoid overflow Condition\\n            int mid = low + (high - low) / 2;\\n            if(c[mid] == (n - mid))\\n                return c[mid];\\n            \\n            else if(c[mid] > (n - mid))\\n                high = mid - 1;\\n            else\\n                low = mid + 1;\\n        }\\n        return n - low;\\n    }\\n};\\n```\\n\\n\\nPlease **Upvote** this simple solution!!\\nHappy Coding:)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& c) {\\n        ios::sync_with_stdio(0);\\n        cin.tie(NULL);\\n        \\n        int n = c.size();\\n        int low = 0, high = n - 1, mid;\\n        while(low <= high) {\\n            //To Avoid overflow Condition\\n            int mid = low + (high - low) / 2;\\n            if(c[mid] == (n - mid))\\n                return c[mid];\\n            \\n            else if(c[mid] > (n - mid))\\n                high = mid - 1;\\n            else\\n                low = mid + 1;\\n        }\\n        return n - low;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2729382,
                "title": "python3-solution-binary-search-o-logn",
                "content": "`Time Complexity` : `O(logn)`\\n`Space Complexity` : `O(1)`\\n```\\nclass Solution:\\n    def hIndex(self, A):\\n        n = len(A)\\n        l, r = 0, n - 1\\n        while l < r:\\n            m = (l + r + 1) // 2\\n            if A[m] > n - m: r = m - 1\\n            else: l = m\\n        return n - l - (A[l] < n - l)\\n```",
                "solutionTags": [
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, A):\\n        n = len(A)\\n        l, r = 0, n - 1\\n        while l < r:\\n            m = (l + r + 1) // 2\\n            if A[m] > n - m: r = m - 1\\n            else: l = m\\n        return n - l - (A[l] < n - l)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2004229,
                "title": "c-2-solutions-with-without-priority-queue-same-code-for-274-h-index",
                "content": "//same solution for [274. H-Index ](https://leetcode.com/problems/h-index/)\\n**WITH PRIORITY QUEUE**\\n\\n\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint hIndex(vector<int>& citations) {\\n\\t\\t\\t\\tint index;\\n\\t\\t\\t\\tpriority_queue<int> pq(begin(citations), end(citations));\\n\\n\\t\\t\\t\\tfor (index = 0; !pq.empty() && index < pq.top();index++)\\n\\t\\t\\t\\t\\tpq.pop();  \\n\\n\\t\\t\\t\\treturn index;\\n\\t\\t\\t}\\n\\t\\t};\\n**WITHOUT PRIORITY QUEUE**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint hIndex(vector<int>& citations) {\\n\\t\\t\\tint index;\\n\\t\\t\\tsort(citations.begin(),citations.end(),greater<int>());\\n\\t\\t\\tint n=citations.size();\\n\\t\\t\\tfor (index = 0;index<n;index++){\\n\\t\\t\\t\\tif(index>=citations[index])break;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn index;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tint hIndex(vector<int>& citations) {\\n\\t\\t\\t\\tint index;\\n\\t\\t\\t\\tpriority_queue<int> pq(begin(citations), end(citations));\\n\\n\\t\\t\\t\\tfor (index = 0; !pq.empty() && index < pq.top();index++)\\n\\t\\t\\t\\t\\tpq.pop();  \\n\\n\\t\\t\\t\\treturn index;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1939699,
                "title": "c-easy-binary-100",
                "content": "The array is sorted and we need to find the h-index in O(logN), only one thing clicks in mind and that is binary search. See the code for implementation.\\n\\n```\\n\\nclass Solution {\\npublic:\\n    bool check(int x, vector<int>& a){\\n        \\n        // length of array from mid to end\\n        int len = a.size() - x;\\n        \\n        if(x > 0){\\n            // Checking for the definition of h-index mentioned in question\\n            if(a[x-1] <= len && a[x] >= len)\\n                return true;\\n            else\\n                return false;\\n        }\\n        else{\\n            if(a[x] >= len)\\n                return true;\\n            else\\n                return false;\\n        }\\n    }\\n    \\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        \\n        // For binary search we are taking low & high as value index of elements of array\\n        int low = 0, high = n-1;\\n        int ans = 0;\\n\\n        while(low <= high){\\n            // mid = index of element of minimum number of citations which is >= h\\n            // Here h = (n - mid) = length of array from mid to end\\n            int mid = low + (high - low)/2;\\n            \\n            // Checking if this value satisfies as h-index\\n            if(check(mid, citations)){\\n                // If yes then we are changing high because we now want to check for higher\\n                // values and as we increase h-index we need to increase the length of array\\n                // from mid to end, therefore high decreased (not low increased)\\n                ans = n - mid;\\n                high = mid - 1;\\n            }\\n            else{\\n                // Here length of array from mid is greater than citations number but we need\\n                // to have comparable values in both so we need to increase citation value and\\n                // decrease length from mid to end therefore low is increased\\n                if(n - mid > citations[mid])\\n                    low = mid + 1;\\n                else\\n                    high = mid - 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\n```\\nUpvote if you found my solution helpful :-)",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    bool check(int x, vector<int>& a){\\n        \\n        // length of array from mid to end\\n        int len = a.size() - x;\\n        \\n        if(x > 0){\\n            // Checking for the definition of h-index mentioned in question\\n            if(a[x-1] <= len && a[x] >= len)\\n                return true;\\n            else\\n                return false;\\n        }\\n        else{\\n            if(a[x] >= len)\\n                return true;\\n            else\\n                return false;\\n        }\\n    }\\n    \\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        \\n        // For binary search we are taking low & high as value index of elements of array\\n        int low = 0, high = n-1;\\n        int ans = 0;\\n\\n        while(low <= high){\\n            // mid = index of element of minimum number of citations which is >= h\\n            // Here h = (n - mid) = length of array from mid to end\\n            int mid = low + (high - low)/2;\\n            \\n            // Checking if this value satisfies as h-index\\n            if(check(mid, citations)){\\n                // If yes then we are changing high because we now want to check for higher\\n                // values and as we increase h-index we need to increase the length of array\\n                // from mid to end, therefore high decreased (not low increased)\\n                ans = n - mid;\\n                high = mid - 1;\\n            }\\n            else{\\n                // Here length of array from mid is greater than citations number but we need\\n                // to have comparable values in both so we need to increase citation value and\\n                // decrease length from mid to end therefore low is increased\\n                if(n - mid > citations[mid])\\n                    low = mid + 1;\\n                else\\n                    high = mid - 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 694394,
                "title": "c-solution-and-explanation",
                "content": "Intuition: Since the vector is sorted in ascending order, this problem is to find the first element i which satisfy: citation[i] >= n-i, where n=citations.size. (Notice that citation[i] is the smallest among the elements from i to the last one). For the following element j larger than i, since citation[j] will become larger while n-j will become smaller, the reqirement will always be meet for the elements on the right. Therefor the problem is implicitly sorted, we can use binery search.\\n\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n=citations.size();\\n        int l=0, r=citations.size();\\n        while(l<r){\\n            int m=l+(r-l)/2;\\n            if(citations[m]>=n-m) r=m;\\n            else l=m+1;\\n        }\\n        \\n        return n-l;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n=citations.size();\\n        int l=0, r=citations.size();\\n        while(l<r){\\n            int m=l+(r-l)/2;\\n            if(citations[m]>=n-m) r=m;\\n            else l=m+1;\\n        }\\n        \\n        return n-l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693553,
                "title": "javascript-binary-search",
                "content": "To better understand, please visit to link:\\nhttps://youtu.be/tQ15fhm2d6s?t=2\\n```\\n/**\\n * @param {number[]} citations\\n * @return {number}\\n */\\nvar hIndex = function(citations) {\\n    let start = 0, end = citations.length-1\\n    while(start <= end){\\n        let mid = Math.floor((start+end)/2)\\n        if(mid+1 <= citations[citations.length-mid-1]){\\n            start = mid + 1\\n            continue\\n        }\\n        end=mid-1\\n    }\\n    return start\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Binary Search"
                ],
                "code": "```\\n/**\\n * @param {number[]} citations\\n * @return {number}\\n */\\nvar hIndex = function(citations) {\\n    let start = 0, end = citations.length-1\\n    while(start <= end){\\n        let mid = Math.floor((start+end)/2)\\n        if(mid+1 <= citations[citations.length-mid-1]){\\n            start = mid + 1\\n            continue\\n        }\\n        end=mid-1\\n    }\\n    return start\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 71109,
                "title": "clean-python-code",
                "content": "    class Solution(object):\\n        def hIndex(self, citations):\\n            n = len(citations)\\n    \\n            low, high = 0, n - 1\\n            while low <= high:\\n                mid = low + high >> 1\\n                if citations[mid] < n - mid:\\n                    low = mid + 1\\n                else:\\n                    if mid == 0 or citations[mid - 1] < n - mid + 1:\\n                        return n - mid\\n                    high = mid - 1\\n            return 0",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution(object):\\n        def hIndex(self, citations):\\n            n = len(citations)\\n    \\n            low, high = 0, n - 1\\n            while low <= high:\\n                mid = low + high >> 1\\n                if citations[mid] < n - mid:\\n                    low = mid + 1\\n                else:\\n                    if mid == 0 or citations[mid - 1] < n - mid + 1:\\n                        return n - mid\\n                    high = mid - 1\\n            return 0",
                "codeTag": "Java"
            },
            {
                "id": 4012453,
                "title": "h-index-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        int low =0,high=n-1;\\n        int ans = 0;\\n        while(low<=high){\\n            int mid  = low + (high-low)/2;\\n            if(c[mid] >= n-mid){\\n                ans = n-mid;\\n                high = mid - 1;\\n            }else{\\n                low  = mid + 1;\\n            }\\n        }\\n        \\n        return ans;\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        int low =0,high=n-1;\\n        int ans = 0;\\n        while(low<=high){\\n            int mid  = low + (high-low)/2;\\n            if(c[mid] >= n-mid){\\n                ans = n-mid;\\n                high = mid - 1;\\n            }else{\\n                low  = mid + 1;\\n            }\\n        }\\n        \\n        return ans;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3775351,
                "title": "both-o-n-using-linear-and-o-logn-using-binary-search",
                "content": "# Complexity\\n- Time complexity: $$O(logn)$$ \\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        // O(n) Time Complexity\\n        // int n = citations.length;\\n        // int index = 0;\\n        // while(index < n && n - index > citations[index]){\\n        //     index++;\\n        // }\\n        // return n - index;\\n\\n        // O(logn) Time Complexity // Binary Search:- Since Sorted Array\\n        int left = 0, right = citations.length - 1;\\n        int n = citations.length;\\n        while(left <= right){\\n            int mid = left + (right - left) / 2;\\n            if(citations[mid] == n - mid) return n - mid;\\n            else if(citations[mid] < n - mid) left = mid + 1;\\n            else right = mid - 1;\\n        }\\n        return n - left;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        // O(n) Time Complexity\\n        // int n = citations.length;\\n        // int index = 0;\\n        // while(index < n && n - index > citations[index]){\\n        //     index++;\\n        // }\\n        // return n - index;\\n\\n        // O(logn) Time Complexity // Binary Search:- Since Sorted Array\\n        int left = 0, right = citations.length - 1;\\n        int n = citations.length;\\n        while(left <= right){\\n            int mid = left + (right - left) / 2;\\n            if(citations[mid] == n - mid) return n - mid;\\n            else if(citations[mid] < n - mid) left = mid + 1;\\n            else right = mid - 1;\\n        }\\n        return n - left;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3733755,
                "title": "binary-search-explained-c-neat-and-short-code-o-log-n-time-o-1-space-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSince the word montonic is given we can easily think of searching through binary search.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSo, now this one is example of binary search on answer so we make analyze the search space as the min can be 1 and max can be n so range becomes[1,citations.size()] and we simply apply binary searching on this search space and alayze the condition by making a chk function.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(log(n))\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    static bool chk(int mid, vector<int> &citations){\\n        int cnt=citations.size();\\n        for(auto&x:citations){\\n            if(x<mid)cnt--;\\n        }\\n        return (cnt>=mid);\\n    }\\n    int hIndex(vector<int>& citations) {\\n        int lo=1, hi=citations.size();\\n        int ans=0;\\n        while(lo<=hi){\\n            int mid=lo+(hi-lo)/2;\\n            if(chk(mid,citations)){\\n                ans=max(ans,mid);\\n                lo=mid+1;\\n            }\\n            else{\\n                hi=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    static bool chk(int mid, vector<int> &citations){\\n        int cnt=citations.size();\\n        for(auto&x:citations){\\n            if(x<mid)cnt--;\\n        }\\n        return (cnt>=mid);\\n    }\\n    int hIndex(vector<int>& citations) {\\n        int lo=1, hi=citations.size();\\n        int ans=0;\\n        while(lo<=hi){\\n            int mid=lo+(hi-lo)/2;\\n            if(chk(mid,citations)){\\n                ans=max(ans,mid);\\n                lo=mid+1;\\n            }\\n            else{\\n                hi=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2758962,
                "title": "c-binary-search-only-easy-to-understand",
                "content": "class Solution {\\npublic:\\n\\n    int hIndex(vector<int>& arr) {\\n        \\n        int n = arr.size();\\n\\n        int st = 0;\\n        int end = n-1;\\n        \\n        while(st <= end){\\n            int mid = st + (end-st)/2;\\n            \\n            if(arr[mid] == n-mid){\\n                return arr[mid];\\n            }\\n            \\n            else if(arr[mid] > n-mid){\\n                end = mid-1;\\n            }\\n            else st = mid+1;\\n            \\n        }\\n        return n-st;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int hIndex(vector<int>& arr) {\\n        \\n        int n = arr.size();\\n\\n        int st = 0;\\n        int end = n-1;\\n        \\n        while(st <= end){\\n            int mid = st + (end-st)/2;\\n            \\n            if(arr[mid] == n-mid){\\n                return arr[mid];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2668023,
                "title": "c-nive-solution-easy-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n     int hIndex(vector<int>& citations) {\\n        int i = 0, j = citations.size() - 1;\\n        while(j >= 0 && citations[j] > i) i++, j--;\\n        return i;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     int hIndex(vector<int>& citations) {\\n        int i = 0, j = citations.size() - 1;\\n        while(j >= 0 && citations[j] > i) i++, j--;\\n        return i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2570904,
                "title": "fastest-java-solution",
                "content": "class Solution {\\n    public int hIndex(int[] citations) {\\n        int li=0;\\n        int hi=citations.length-1;\\n        \\n        int n = citations.length;\\n        \\n        while(li<=hi){\\n            int mi=li+(hi-li)/2;\\n            if(citations[mi]==(n-mi)){\\n                return citations[mi];\\n            }\\n            else if(citations[mi]>(n-mi)){\\n                hi=mi-1;\\n            }\\n            else{\\n                li=mi+1;\\n            }\\n        }\\n        return n-li;\\n    }\\n}",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "class Solution {\\n    public int hIndex(int[] citations) {\\n        int li=0;\\n        int hi=citations.length-1;\\n        \\n        int n = citations.length;\\n        \\n        while(li<=hi){\\n            int mi=li+(hi-li)/2;\\n            if(citations[mi]==(n-mi)){\\n                return citations[mi];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2106897,
                "title": "c-binary-search-on-answer-o-log-n",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isPossible(vector<int>& nums, int k){\\n        int n=nums.size();\\n        if(k!=0 and nums[n-k]>=k and nums[n-k-1]<=k){\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    int hIndex(vector<int>& nums) {\\n        int n=nums.size();\\n\\n        if(nums[0]>=n){\\n            return n;\\n        }\\n        \\n        \\n        int l=1,r=n;\\n        int res=0;\\n        while(l<=r){\\n            int mid=l+(r-l)/2;\\n            if(isPossible(nums,mid)){\\n                res=mid;\\n                l=mid+1;\\n            }else{\\n                if(nums[n-mid]>=mid and nums[n-mid-1]>mid){\\n                    l=mid+1;\\n                }else{\\n                    r=mid-1;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isPossible(vector<int>& nums, int k){\\n        int n=nums.size();\\n        if(k!=0 and nums[n-k]>=k and nums[n-k-1]<=k){\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    int hIndex(vector<int>& nums) {\\n        int n=nums.size();\\n\\n        if(nums[0]>=n){\\n            return n;\\n        }\\n        \\n        \\n        int l=1,r=n;\\n        int res=0;\\n        while(l<=r){\\n            int mid=l+(r-l)/2;\\n            if(isPossible(nums,mid)){\\n                res=mid;\\n                l=mid+1;\\n            }else{\\n                if(nums[n-mid]>=mid and nums[n-mid-1]>mid){\\n                    l=mid+1;\\n                }else{\\n                    r=mid-1;\\n                }\\n            }\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2101967,
                "title": "c-binary-search-o-logn",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int low = 0;\\n        int high = citations.size()-1;\\n\\n        while(low <= high){\\n            int mid = (low + high)/2;\\n            if(citations[mid] == ((n - mid))){\\n                return citations[mid];\\n            }\\n            else if(citations[mid]  < (n - mid)){\\n                low = mid +  1;\\n            }\\n            else if(citations[mid] > (n-mid)){\\n                high = mid - 1;\\n            }\\n            \\n        }\\n        return n - low;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int low = 0;\\n        int high = citations.size()-1;\\n\\n        while(low <= high){\\n            int mid = (low + high)/2;\\n            if(citations[mid] == ((n - mid))){\\n                return citations[mid];\\n            }\\n            else if(citations[mid]  < (n - mid)){\\n                low = mid +  1;\\n            }\\n            else if(citations[mid] > (n-mid)){\\n                high = mid - 1;\\n            }\\n            \\n        }\\n        return n - low;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1975890,
                "title": "python3-binary-search-simple-clean",
                "content": "```\\ndef hIndex(self, citations: List[int]) -> int:\\n        l, r = 0, citations[-1]\\n        while l < r:\\n            m = (l + r + 1) >> 1\\n            cnt = sum([c >= m for c in citations])\\n            if cnt < m:\\n                r = m - 1\\n            else:\\n                l = m\\n        return r\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```\\ndef hIndex(self, citations: List[int]) -> int:\\n        l, r = 0, citations[-1]\\n        while l < r:\\n            m = (l + r + 1) >> 1\\n            cnt = sum([c >= m for c in citations])\\n            if cnt < m:\\n                r = m - 1\\n            else:\\n                l = m\\n        return r\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1968913,
                "title": "java-beats-100-00-memory-speed-0ms-april-2022",
                "content": "\\n    class Solution {\\n\\t\\n    public int hIndex(int[] citations) \\n    {\\n        int maximalIndex = 0;\\n        int hIndex = 1;\\n        \\n        \\n        // Handle the singleton case\\n        if(citations.length == 1)\\n        {\\n            if(citations[0] != 0) return 1;\\n            else return 0;\\n        }\\n        \\n        Arrays.sort(citations);\\n\\n        // Parition : (n-h):(h) papers - h/n have at least h citations\\n        int low = 0;\\n        int high = citations.length - 1;\\n        while(low <= high)\\n        {\\n            int mid = ( low + high ) / 2; // low + ((high-low)/2);\\n            hIndex = citations.length - mid;\\n            if(citations[mid] >= hIndex)\\n            {\\n                if(mid == 0) // can not grow hIndex any more here\\n                {\\n                    maximalIndex = hIndex;\\n                    break;\\n                }\\n                if(mid != 0 && citations[mid-1] <= hIndex) // the other (n-h) have no more values\\n                {\\n                    maximalIndex = hIndex;\\n                    high = mid - 1; // check above now\\n                }\\n                else\\n                {\\n                    high = mid - 1;\\n                }\\n            }\\n            else\\n            {\\n                low = mid + 1; // any ( array indices <= mid ) fail already ; no greater h-index works\\n            }\\n            \\n        }\\n        return maximalIndex;\\n    }\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\n    public int hIndex(int[] citations) \\n    {\\n        int maximalIndex = 0;\\n        int hIndex = 1;\\n        \\n        \\n        // Handle the singleton case\\n        if(citations.length == 1)\\n        {\\n            if(citations[0] != 0) return 1;\\n            else return 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1960955,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public int hIndex(int[] c) {\\n        int l=0,h=c.length-1,k=c.length;\\n        while(l<=h)\\n        {\\n            int m=(l+h)/2;\\n            if(c[m]==(k-m))\\n                return k-m;\\n            else if(c[m]>(k-m))\\n                h=m-1;\\n            else\\n                l=m+1;\\n        }\\n        return k-l;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "class Solution {\\n    public int hIndex(int[] c) {\\n        int l=0,h=c.length-1,k=c.length;\\n        while(l<=h)\\n        {\\n            int m=(l+h)/2;\\n            if(c[m]==(k-m))\\n                return k-m;\\n            else if(c[m]>(k-m))\\n                h=m-1;\\n            else\\n                l=m+1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1846915,
                "title": "c-simple-o-logn-solution-simple-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    //t.c. logn\\n    int hIndex(vector<int>& c) {\\n        int n=c.size();\\n        int l=0;\\n        int h=n-1;\\n        while(l<=h){\\n            int mid=l+(h-l)/2;\\n            if(c[mid]==n-mid){\\n                return c[mid];//our optimal ans for all time when c[mid]==n-mid\\n            }\\n            else if(c[mid]>n-mid){\\n                h=mid-1;\\n            }\\n            else{\\n                l=mid+1;\\n            }\\n        }\\n        return n-l;//if we did not find c[mid]==n-mid we return all elemnt righthand side\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    //t.c. logn\\n    int hIndex(vector<int>& c) {\\n        int n=c.size();\\n        int l=0;\\n        int h=n-1;\\n        while(l<=h){\\n            int mid=l+(h-l)/2;\\n            if(c[mid]==n-mid){\\n                return c[mid];//our optimal ans for all time when c[mid]==n-mid\\n            }\\n            else if(c[mid]>n-mid){\\n                h=mid-1;\\n            }\\n            else{\\n                l=mid+1;\\n            }\\n        }\\n        return n-l;//if we did not find c[mid]==n-mid we return all elemnt righthand side\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1325353,
                "title": "java-binary-search-solution-o-logn-time-o-1-space",
                "content": "```\\n/*\\nTHOUGHT PROCESS : \\nthis is the binary search equivalent to the \"H-index\" problem [ 274 ] \\nURL ( for H-index ) = https://leetcode.com/problems/h-index/\\nURL ( for H-Index-II ) = https://leetcode.com/problems/h-index-ii/\\n\\nCan copy-paste highly similar code\\n\\nMajor gotchas\\n(a) Linearly probe the element right behind you in some cases \\n(b) Must account for hIndex =  ( citations.len - mid )  => think in the opposite direction now\\n\\nTrick : use (n-h:h) partitioning and sorted property to induct on a sorted sequence ( in ascending/descending order ) and guarantee proper convergence to some solution here\\n\\nThe cool part of binary search : is just like a linear search, but not auxillary space needed\\n\\n*/\\n\\nclass Solution \\n{\\n    public int hIndex(int[] citations) \\n    {\\n        int maximalIndex = 0;\\n        int hIndex = 1;\\n        \\n        \\n        // Handle the singleton case\\n        if(citations.length == 1)\\n        {\\n            if(citations[0] != 0) return 1;\\n            else return 0;\\n        }\\n        \\n        Arrays.sort(citations);\\n\\n        // Parition : (n-h):(h) papers - h/n have at least h citations\\n        int low = 0;\\n        int high = citations.length - 1;\\n        while(low <= high)\\n        {\\n            int mid = ( low + high ) / 2; // low + ((high-low)/2);\\n            hIndex = citations.length - mid;\\n            if(citations[mid] >= hIndex)\\n            {\\n                if(mid == 0) // can not grow hIndex any more here\\n                {\\n                    maximalIndex = hIndex;\\n                    break;\\n                }\\n                if(mid != 0 && citations[mid-1] <= hIndex) // the other (n-h) have no more values\\n                {\\n                    maximalIndex = hIndex;\\n                    high = mid - 1; // check above now\\n                }\\n                else\\n                {\\n                    high = mid - 1;\\n                }\\n            }\\n            else\\n            {\\n                low = mid + 1; // any ( array indices <= mid ) fail already ; no greater h-index works\\n            }\\n            \\n        }\\n        return maximalIndex;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\n/*\\nTHOUGHT PROCESS : \\nthis is the binary search equivalent to the \"H-index\" problem [ 274 ] \\nURL ( for H-index ) = https://leetcode.com/problems/h-index/\\nURL ( for H-Index-II ) = https://leetcode.com/problems/h-index-ii/\\n\\nCan copy-paste highly similar code\\n\\nMajor gotchas\\n(a) Linearly probe the element right behind you in some cases \\n(b) Must account for hIndex =  ( citations.len - mid )  => think in the opposite direction now\\n\\nTrick : use (n-h:h) partitioning and sorted property to induct on a sorted sequence ( in ascending/descending order ) and guarantee proper convergence to some solution here\\n\\nThe cool part of binary search : is just like a linear search, but not auxillary space needed\\n\\n*/\\n\\nclass Solution \\n{\\n    public int hIndex(int[] citations) \\n    {\\n        int maximalIndex = 0;\\n        int hIndex = 1;\\n        \\n        \\n        // Handle the singleton case\\n        if(citations.length == 1)\\n        {\\n            if(citations[0] != 0) return 1;\\n            else return 0;\\n        }\\n        \\n        Arrays.sort(citations);\\n\\n        // Parition : (n-h):(h) papers - h/n have at least h citations\\n        int low = 0;\\n        int high = citations.length - 1;\\n        while(low <= high)\\n        {\\n            int mid = ( low + high ) / 2; // low + ((high-low)/2);\\n            hIndex = citations.length - mid;\\n            if(citations[mid] >= hIndex)\\n            {\\n                if(mid == 0) // can not grow hIndex any more here\\n                {\\n                    maximalIndex = hIndex;\\n                    break;\\n                }\\n                if(mid != 0 && citations[mid-1] <= hIndex) // the other (n-h) have no more values\\n                {\\n                    maximalIndex = hIndex;\\n                    high = mid - 1; // check above now\\n                }\\n                else\\n                {\\n                    high = mid - 1;\\n                }\\n            }\\n            else\\n            {\\n                low = mid + 1; // any ( array indices <= mid ) fail already ; no greater h-index works\\n            }\\n            \\n        }\\n        return maximalIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1285317,
                "title": "c-binary-search-logn",
                "content": "C++ | Binary Search | logn\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& a) {\\n        \\n        int n = a.size();\\n        \\n        // using predicate p(x): a[mid] >= n - mid.\\n        // this will result in FFFFTTTT.\\n        // I am looking for first T.\\n        \\n        int lo = 0, hi = n - 1;\\n        \\n        while(lo < hi){\\n            int mid = lo + (hi - lo) / 2;\\n            \\n            if(a[mid] >= n - mid ){\\n                hi = mid;\\n            } else{\\n                lo = mid + 1;\\n            }\\n        }\\n        // sanity check.\\n        if(a[lo] >= n - lo)\\n            return n - lo;\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& a) {\\n        \\n        int n = a.size();\\n        \\n        // using predicate p(x): a[mid] >= n - mid.\\n        // this will result in FFFFTTTT.\\n        // I am looking for first T.\\n        \\n        int lo = 0, hi = n - 1;\\n        \\n        while(lo < hi){\\n            int mid = lo + (hi - lo) / 2;\\n            \\n            if(a[mid] >= n - mid ){\\n                hi = mid;\\n            } else{\\n                lo = mid + 1;\\n            }\\n        }\\n        // sanity check.\\n        if(a[lo] >= n - lo)\\n            return n - lo;\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1196609,
                "title": "old-school-binary-search",
                "content": "```\\nimport static java.lang.Math.ceil;\\nimport static java.lang.Math.max;\\nclass Solution {\\n    //already in ascending order\\n    public int hIndex(int[] citations) {\\n       return bisectArray(citations, 1, citations.length); \\n    }\\n    \\n    public int bisectArray(int[] citations, int start, int end) {\\n        // terminal case of recursion\\n        if(start > end) {\\n           return 0;\\n        }\\n        int mid = (int)(start+end)/2;\\n        int result = 0;\\n        \\n        if(citations[citations.length-mid] >= mid) {\\n            result = max(mid, bisectArray(citations, mid +1, end));\\n       \\n        } else {\\n            result = bisectArray(citations, start, mid-1);\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimport static java.lang.Math.ceil;\\nimport static java.lang.Math.max;\\nclass Solution {\\n    //already in ascending order\\n    public int hIndex(int[] citations) {\\n       return bisectArray(citations, 1, citations.length); \\n    }\\n    \\n    public int bisectArray(int[] citations, int start, int end) {\\n        // terminal case of recursion\\n        if(start > end) {\\n           return 0;\\n        }\\n        int mid = (int)(start+end)/2;\\n        int result = 0;\\n        \\n        if(citations[citations.length-mid] >= mid) {\\n            result = max(mid, bisectArray(citations, mid +1, end));\\n       \\n        } else {\\n            result = bisectArray(citations, start, mid-1);\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1130345,
                "title": "java-binary-search-solution",
                "content": "```\\nclass Solution{\\n   public int hIndex(int[] citations) {\\n     int len = citations.length;\\n     int left = 0;\\n     int right = len-1;\\n     \\n     while (left <= right){\\n      int mid = left + (right - left) / 2;\\n      if (citations[mid] < len - mid)\\n        left = mid + 1;\\n      else if(citations[mid] >= len - mid)\\n        right = mid - 1;\\n     }\\n     return len - left; \\n   }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution{\\n   public int hIndex(int[] citations) {\\n     int len = citations.length;\\n     int left = 0;\\n     int right = len-1;\\n     \\n     while (left <= right){\\n      int mid = left + (right - left) / 2;\\n      if (citations[mid] < len - mid)\\n        left = mid + 1;\\n      else if(citations[mid] >= len - mid)\\n        right = mid - 1;\\n     }\\n     return len - left; \\n   }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1008611,
                "title": "clean-python-solution-binary-search",
                "content": "```Python\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n = len(citations)\\n        left, right = 0, n\\n        \\n        while left < right:\\n            mid = left + (right - left) // 2\\n            if citations[mid] >= n - mid:\\n                right = mid\\n            else:\\n                left = mid + 1\\n            \\n        return n - left",
                "solutionTags": [
                    "Python3",
                    "Binary Tree"
                ],
                "code": "```Python\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n = len(citations)\\n        left, right = 0, n\\n        \\n        while left < right:\\n            mid = left + (right - left) // 2\\n            if citations[mid] >= n - mid:\\n                right = mid\\n            else:\\n                left = mid + 1\\n            \\n        return n - left",
                "codeTag": "Java"
            },
            {
                "id": 694894,
                "title": "python-by-binary-search-w-comment",
                "content": "Python by binary search. \\n\\n---\\n\\n**Implementation** by binary search:\\n\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        \\n        left, right = 0, len(citations)-1\\n        \\n        size = len(citations)\\n        \\n        while left <= right:\\n            \\n            mid = left + (right - left)//2\\n            \\n            the_number_of_larger_equal_to_current = size - mid\\n            h_index = citations[mid]\\n            \\n            \\n            if h_index < the_number_of_larger_equal_to_current:\\n                # current h index is too small, make it larger\\n                left = mid + 1\\n                    \\n            elif h_index > the_number_of_larger_equal_to_current:\\n                # current h index is to large, make it smaller\\n                right = mid - 1\\n            \\n            else:\\n                # meet the definition of h-index\\n                return h_index\\n            \\n        return size - left \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Tree",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        \\n        left, right = 0, len(citations)-1\\n        \\n        size = len(citations)\\n        \\n        while left <= right:\\n            \\n            mid = left + (right - left)//2\\n            \\n            the_number_of_larger_equal_to_current = size - mid\\n            h_index = citations[mid]\\n            \\n            \\n            if h_index < the_number_of_larger_equal_to_current:\\n                # current h index is too small, make it larger\\n                left = mid + 1\\n                    \\n            elif h_index > the_number_of_larger_equal_to_current:\\n                # current h index is to large, make it smaller\\n                right = mid - 1\\n            \\n            else:\\n                # meet the definition of h-index\\n                return h_index\\n            \\n        return size - left \\n```",
                "codeTag": "Java"
            },
            {
                "id": 694810,
                "title": "it-seems-to-be-only-one-possible-h-index",
                "content": "Since the array is sorted, if we find an answer ```h```, then we can partition the array to two parts.\\n```arr[0,i) <=h && arr[i, n) >=h, h = n - i```.\\nIf we want to valid that if ```h+1``` can be a possible answer, we may found it impossible.\\nBecause, if ```h+1``` can be a candidate, that means we should have a value in ```arr[0, i)<=h``` i.e. ```arr[i-1]``` to be no less than ```h+1```.\\nSo I think it is impossible.\\nIf I\\'m wrong, please correct me.",
                "solutionTags": [],
                "code": "```h```\n```arr[0,i) <=h && arr[i, n) >=h, h = n - i```\n```h+1```\n```h+1```\n```arr[0, i)<=h```\n```arr[i-1]```\n```h+1```",
                "codeTag": "Unknown"
            },
            {
                "id": 693731,
                "title": "c-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int size = citations.size();\\n        int low = 0, high = size;\\n        while (low < high) {\\n            int mid = low + (high - low) / 2;\\n            if (size - mid <= citations[mid])\\n                high = mid;\\n            else\\n                low = mid + 1;\\n        }\\n        return size - high;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int size = citations.size();\\n        int low = 0, high = size;\\n        while (low < high) {\\n            int mid = low + (high - low) / 2;\\n            if (size - mid <= citations[mid])\\n                high = mid;\\n            else\\n                low = mid + 1;\\n        }\\n        return size - high;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693646,
                "title": "c-simplest-solution-o-log-n-binary-search",
                "content": "**Basic idea:**\\nIf we read the question carefully, we find some key points,\\n1. The array is sorted (must be utilized for our solution)\\n2. h index value is the number where `arr[hindex] == arr.size() - hindex` (as exactly N - h values are there with value less than h)\\n3. It is possible to not have an exact number which is our h index but a number in between 2 values.\\n\\n**Solution:**\\nAs we can see, the question gives us an idea of iterating on the whole array, but an array is sorted we can use a **binary search**.\\nUsing a binary search will lower the time complexity to `log n` rather than `n` from linear search.\\ncase 1: If value exist in array, we find the value where `arr[hindex] == arr.size() - hindex` condition satisfies and return its value.\\ncase 2: if the value doesn\\'t exist we find the lower bound`(lb)` of the hindex present in the array and return `N - lb`\\n```\\nint hIndex(vector<int>& arr) {\\n\\tif (arr.size() == 0) {\\n\\t\\treturn 0;\\n\\t}\\n\\tint si = 0, size = arr.size(), ei = size - 1;\\n\\twhile(si <= ei) {\\n\\t\\tint mid = (si + ei) >> 1;\\n\\t\\tif (arr[mid] == size - mid) {\\n\\t\\t\\treturn arr[mid];\\n\\t\\t} else if(arr[mid] > size - mid) {\\n\\t\\t\\tei = mid - 1;\\n\\t\\t} else {\\n\\t\\t\\tsi = mid + 1;\\n\\t\\t}\\n\\t}\\n\\treturn size - si;\\n}\\n```\\nplease suggest improvements if you find any, I\\'ll appreciate your suggestions :)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nint hIndex(vector<int>& arr) {\\n\\tif (arr.size() == 0) {\\n\\t\\treturn 0;\\n\\t}\\n\\tint si = 0, size = arr.size(), ei = size - 1;\\n\\twhile(si <= ei) {\\n\\t\\tint mid = (si + ei) >> 1;\\n\\t\\tif (arr[mid] == size - mid) {\\n\\t\\t\\treturn arr[mid];\\n\\t\\t} else if(arr[mid] > size - mid) {\\n\\t\\t\\tei = mid - 1;\\n\\t\\t} else {\\n\\t\\t\\tsi = mid + 1;\\n\\t\\t}\\n\\t}\\n\\treturn size - si;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 693644,
                "title": "c-simple-binary-search-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int low = 0;\\n        int size = citations.size();\\n        int high = size-1;\\n        int cnt = 0;\\n        while(low<=high){\\n            int mid = low + (high-low)/2;\\n            if(citations[mid] >= (size-mid)){\\n                cnt=size-mid;\\n                high = mid-1;\\n            }\\n            else{\\n                low = mid+1;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```\\nHere, we just have to see if the numbers of element is less than `citations[mid]` or not. If yes, then we will to left side to capture more elements. In this way, we are fulfilling the condition given in question.\\n`Happy Coding !! :) `",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int low = 0;\\n        int size = citations.size();\\n        int high = size-1;\\n        int cnt = 0;\\n        while(low<=high){\\n            int mid = low + (high-low)/2;\\n            if(citations[mid] >= (size-mid)){\\n                cnt=size-mid;\\n                high = mid-1;\\n            }\\n            else{\\n                low = mid+1;\\n            }\\n        }\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693507,
                "title": "python-3-binary-search-iterative-solution",
                "content": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n , left , right = len(citations) , 0 , len(citations)\\n        while left < right:\\n            mid = left + (right - left) // 2\\n            numGreater = n - mid\\n            if numGreater <= citations[mid]:\\n                right = mid\\n            else:\\n                left = mid + 1\\n        return n - left\\n```",
                "solutionTags": [
                    "Python3",
                    "Binary Search",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n , left , right = len(citations) , 0 , len(citations)\\n        while left < right:\\n            mid = left + (right - left) // 2\\n            numGreater = n - mid\\n            if numGreater <= citations[mid]:\\n                right = mid\\n            else:\\n                left = mid + 1\\n        return n - left\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693430,
                "title": "simple-java-solution-with-explaination-0ms-100-faster-linear-and-binary-search-both",
                "content": "Naive approach is to use linear search and go from 0 to length and check if element at current index >= length-currentIndex. If condition true return length-currentIndex.\\nIf loop finishes return 0.\\nBetter approach is to use binary search as we know data is sorted.\\nApply classic binary search \\nif arr[mid]==arr[length-mid] return length-mid. \\nelse if arr[mid]>arr[length-mid] set end=mid-1\\nelse set start=mid+1;\\nonce loop terminates we know start will be at correct position and since we wanted to return count. Answer will be length-start.\\n\\nliner search - \\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        for(int i=0;i<citations.length;i++){\\n            if(citations[i]>=citations.length-i){\\n                return citations.length-i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```\\nbinary search - \\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int start = 0;\\n        int end = citations.length-1;\\n        while(start<=end) {\\n            int mid = end + (end-start)/2;\\n            if(citations[mid]==citations.length-mid) {\\n                return citations.length-mid;\\n            } else if(citations[mid]>citations.length-mid) {\\n                end=mid-1;\\n            } else {\\n                start=mid+1;\\n            }\\n        }\\n        return citations.length-start;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        for(int i=0;i<citations.length;i++){\\n            if(citations[i]>=citations.length-i){\\n                return citations.length-i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int start = 0;\\n        int end = citations.length-1;\\n        while(start<=end) {\\n            int mid = end + (end-start)/2;\\n            if(citations[mid]==citations.length-mid) {\\n                return citations.length-mid;\\n            } else if(citations[mid]>citations.length-mid) {\\n                end=mid-1;\\n            } else {\\n                start=mid+1;\\n            }\\n        }\\n        return citations.length-start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693374,
                "title": "javascript-binary-search",
                "content": "```\\nvar hIndex = function(citations) {\\n        \\n    let start = 0, end = citations.length-1;\\n    \\n    while (start <= end) {\\n        \\n        let mid = Math.floor((start+end)/2);\\n        \\n        if (citations.length - mid - 1 < citations[mid]) {\\n            \\n            end = mid - 1;\\n        } else {\\n            \\n            start = mid + 1;\\n        }\\n    }\\n    \\n    return citations.length - start;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\nvar hIndex = function(citations) {\\n        \\n    let start = 0, end = citations.length-1;\\n    \\n    while (start <= end) {\\n        \\n        let mid = Math.floor((start+end)/2);\\n        \\n        if (citations.length - mid - 1 < citations[mid]) {\\n            \\n            end = mid - 1;\\n        } else {\\n            \\n            start = mid + 1;\\n        }\\n    }\\n    \\n    return citations.length - start;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 682947,
                "title": "runtime-0-ms-faster-than-100-online-submission",
                "content": "class Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        if(n==0)\\n            return 0;\\n        if(n==1 && citations[0]==0)\\n            return 0;\\n        //range=1-n\\n        int lo=0,hi=n,mid=0;\\n        \\n        while(lo<=hi)\\n        {\\n            mid=lo+(int)((hi-lo+1)/2);\\n                \\n            if(valuesmax(citations,mid)>=mid && valuesmin(citations,mid)>=n-mid)\\n                return mid;\\n            else if(valuesmax(citations,mid)>=mid)\\n                lo=mid;\\n            else\\n                hi=mid-1;       \\n        }\\n        return 0;\\n    }\\n    \\n    public int valuesmax(int[] arr,int a)\\n    {\\n      int low=0,high=arr.length-1,mid=0;\\n        while(low<high)\\n        {\\n           mid=low + (int)((high-low)/2);\\n               \\n           if(arr[mid]<a)\\n               low=mid+1;\\n            else\\n               high=mid;\\n        }\\n        if(arr[low]>=a)\\n        return arr.length-low;\\n        else\\n        return 0;\\n    }\\n    \\n    public int valuesmin(int[] arr,int a)\\n    {\\n         int lo=0,hi=arr.length-1,mid=0;\\n        while(lo<hi)\\n        {\\n           mid=lo+(int)((hi-lo+1)/2);\\n            \\n          if(arr[mid]<=a)\\n              lo=mid;\\n          else\\n              hi=mid-1;\\n        }\\n        if(arr[lo]<=a)\\n        return lo+1;\\n        else\\n        return 0;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        if(n==0)\\n            return 0;\\n        if(n==1 && citations[0]==0)\\n            return 0;\\n        //range=1-n\\n        int lo=0,hi=n,mid=0;\\n        \\n        while(lo<=hi)\\n        {\\n            mid=lo+(int)((hi-lo+1)/2);\\n                \\n            if(valuesmax(citations,mid)>=mid && valuesmin(citations,mid)>=n-mid)\\n                return mid;\\n            else if(valuesmax(citations,mid)>=mid)\\n                lo=mid;\\n            else\\n                hi=mid-1;       \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 622343,
                "title": "c-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        \\n        int n = citations.size();\\n        int l = 0;\\n        int r = n-1;\\n        \\n        while (l <= r) {\\n            int m = l + (r-l)/2;\\n            \\n            if (citations[m] == n-m)\\n                return n-m;\\n            else if (citations[m] > n-m)\\n                r = m-1;\\n            else\\n                l = m+1;\\n        }\\n        \\n        return n-l;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        \\n        int n = citations.size();\\n        int l = 0;\\n        int r = n-1;\\n        \\n        while (l <= r) {\\n            int m = l + (r-l)/2;\\n            \\n            if (citations[m] == n-m)\\n                return n-m;\\n            else if (citations[m] > n-m)\\n                r = m-1;\\n            else\\n                l = m+1;\\n        }\\n        \\n        return n-l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 485524,
                "title": "python-bisect-search",
                "content": "```\\ndef hIndex(self, citations: List[int]) -> int:\\n        length = len(citations)\\n        class Range():\\n            def __getitem__(self, key):\\n                return length - key <= citations[key]\\n        index = bisect.bisect_left(Range(), True, 0, length)\\n        return length - index if index < length else 0\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef hIndex(self, citations: List[int]) -> int:\\n        length = len(citations)\\n        class Range():\\n            def __getitem__(self, key):\\n                return length - key <= citations[key]\\n        index = bisect.bisect_left(Range(), True, 0, length)\\n        return length - index if index < length else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 404956,
                "title": "easy-c-binary-search-solution-12ms-beats-99",
                "content": "Runtime: 12 ms, faster than 99.26% of C++ online submissions for H-Index II.\\nMemory Usage: 12.5 MB, less than 60.00% of C++ online submissions for H-Index II.\\n\\n```\\nint n = citations.size();\\n        int low = 0;\\n        int high = n;\\n        \\n        while(low < high)\\n        {\\n            int mid = low + (high - low)/2;\\n            if(n - mid <= citations[mid])\\n                high = mid;\\n            else \\n                low = mid+1;\\n        }\\n        \\n        return n-high;\\n    }",
                "solutionTags": [
                    "Binary Search"
                ],
                "code": "Runtime: 12 ms, faster than 99.26% of C++ online submissions for H-Index II.\\nMemory Usage: 12.5 MB, less than 60.00% of C++ online submissions for H-Index II.\\n\\n```\\nint n = citations.size();\\n        int low = 0;\\n        int high = n;\\n        \\n        while(low < high)\\n        {\\n            int mid = low + (high - low)/2;\\n            if(n - mid <= citations[mid])\\n                high = mid;\\n            else \\n                low = mid+1;\\n        }\\n        \\n        return n-high;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 71098,
                "title": "clear-and-easy-c-solution",
                "content": "\\tint hIndex(vector<int>& citations) {\\n\\t\\tint n = citations.size(), res = 0;\\n\\t\\tint start = 0, end = n - 1;\\n\\t\\twhile (start <= end) {\\n\\t\\t\\tint mid = start + (end - start) / 2;\\n\\t\\t\\tif (citations[mid] >= n - mid) {\\n\\t\\t\\t\\tres = n - mid;\\n\\t\\t\\t\\tend = mid - 1;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tstart = mid + 1;\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}",
                "solutionTags": [],
                "code": "\\tint hIndex(vector<int>& citations) {\\n\\t\\tint n = citations.size(), res = 0;\\n\\t\\tint start = 0, end = n - 1;\\n\\t\\twhile (start <= end) {\\n\\t\\t\\tint mid = start + (end - start) / 2;\\n\\t\\t\\tif (citations[mid] >= n - mid) {\\n\\t\\t\\t\\tres = n - mid;\\n\\t\\t\\t\\tend = mid - 1;\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tstart = mid + 1;\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 71095,
                "title": "simple-13ms-java-solution",
                "content": "    public class Solution {\\n        public int hIndex(int[] citations) {\\n            int start = 0;\\n            int end = citations.length-1;\\n            int len = citations.length;\\n            int result = 0;\\n            int mid;\\n            while(start <= end){\\n                mid = start + (end-start)/2;\\n                if(citations[mid] >= (len - mid)){\\n                    result = (len-mid);\\n                    end = mid-1;\\n                }\\n                else{\\n                    start = mid + 1;\\n                }\\n            }\\n            return result;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int hIndex(int[] citations) {\\n            int start = 0;\\n            int end = citations.length-1;\\n            int len = citations.length;\\n            int result = 0;\\n            int mid;\\n            while(start <= end){\\n                mid = start + (end-start)/2;\\n                if(citations[mid] >= (len - mid)){\\n                    result = (len-mid);\\n                    end = mid-1;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 71139,
                "title": "1-liner-in-ruby",
                "content": "**Solution**\\n\\n    def h_index(citations)\\n      (0...citations.size).bsearch { |i| citations[~i] <= i } || citations.size\\n    end\\n\\nOr a bit shorter, by adding a virtual dummy paper with zero citations:\\n\\n    def h_index(citations)\\n      (0..citations.size).bsearch { |i| (citations[~i] || 0) <= i }\\n    end\\n\\n---\\n\\n**Explanation**\\n\\nThink/access in reversed order, for example input [0,1,3,5,6] is:\\n\\n                          i:  0 1 2 3 4\\n    citations of i-th paper:  6 5 3 1 0        (implemented as citations[~i])\\n\\nThe index of the first paper having too few citations (`citations[~i] <= i`) is the number of papers with enough citations.",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "**Solution**\\n\\n    def h_index(citations)\\n      (0...citations.size).bsearch { |i| citations[~i] <= i } || citations.size\\n    end\\n\\nOr a bit shorter, by adding a virtual dummy paper with zero citations:\\n\\n    def h_index(citations)\\n      (0..citations.size).bsearch { |i| (citations[~i] || 0) <= i }\\n    end\\n\\n---\\n\\n**Explanation**\\n\\nThink/access in reversed order, for example input [0,1,3,5,6] is:\\n\\n                          i:  0 1 2 3 4\\n    citations of i-th paper:  6 5 3 1 0        (implemented as citations[~i])\\n\\nThe index of the first paper having too few citations (`citations[~i] <= i`) is the number of papers with enough citations.",
                "codeTag": "Python3"
            },
            {
                "id": 71147,
                "title": "binary-search-to-solve-it-uff0c-python-38ms",
                "content": "    def hIndex(self, citations):\\n        \"\"\"\\n        :type citations: List[int]\\n        :rtype: int\\n        \"\"\"\\n        if len(citations) == 0 or not citations:\\n            return 0\\n        low, high, length = 0, len(citations)-1, len(citations)\\n        while low <= high:\\n            mid = (low + high) // 2\\n            if citations[mid] < length - mid:\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return length - high - 1",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "    def hIndex(self, citations):\\n        \"\"\"\\n        :type citations: List[int]\\n        :rtype: int\\n        \"\"\"\\n        if len(citations) == 0 or not citations:\\n            return 0\\n        low, high, length = 0, len(citations)-1, len(citations)\\n        while low <= high:\\n            mid = (low + high) // 2\\n            if citations[mid] < length - mid:\\n                low = mid + 1\\n            else:\\n                high = mid - 1\\n        return length - high - 1",
                "codeTag": "Python3"
            },
            {
                "id": 3811437,
                "title": "go-o-log-n-one-liner",
                "content": "```\\nfunc hIndex(citations []int) int {\\n    return sort.Search(len(citations), func(i int) bool { return citations[len(citations) - 1 - i] <= i })\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc hIndex(citations []int) int {\\n    return sort.Search(len(citations), func(i int) bool { return citations[len(citations) - 1 - i] <= i })\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3784263,
                "title": "concise-for-loop-approach-binary-search-made-easy",
                "content": "```\\nclass Solution {\\n    public int hIndex(int[] c) {\\n        int x=0;\\n        for(int i=0, n=c.length, j=n-1, m=0; i<=j;x=i, m=(i+j)/2){\\n            if(c[m]==n-m) return n-m;\\n            if(c[m]<n-m) i=m+1;\\n            else j=m-1;\\n        }\\n        return c.length-x;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] c) {\\n        int x=0;\\n        for(int i=0, n=c.length, j=n-1, m=0; i<=j;x=i, m=(i+j)/2){\\n            if(c[m]==n-m) return n-m;\\n            if(c[m]<n-m) i=m+1;\\n            else j=m-1;\\n        }\\n        return c.length-x;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3629719,
                "title": "simple-fast-go-solution-with-approach",
                "content": "# Approach\\n\\n- In first step of checking we check exceptionts like last elemnt is no 0 (if last one is 0, then all elements are 0 because we have sorted array) and array len is > 1 (if array len is 1 and one elemet is not 0 => h index = 1, i dont know, im just checking)\\n- In second step of checking we start for and we go through each element from array end, if the condition is satisfied by the new maximum h index\\n\\n# Code\\n```\\n\\nfunc hIndex(citations []int) int {\\n\\tcitationsSize := len(citations)\\n\\n\\tif citations[citationsSize-1] == 0 {\\n\\t\\treturn 0\\n\\t} else if citationsSize == 1 {\\n\\t\\treturn 1\\n\\t}\\n\\n\\th_index := 0\\n\\n\\tfor h:=1; h<=citationsSize; h++  {\\n\\t\\tif citations[citationsSize-h] >= h {\\n\\t\\t\\th_index = h\\n\\t\\t} else {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n\\n\\treturn h_index\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Array"
                ],
                "code": "```\\n\\nfunc hIndex(citations []int) int {\\n\\tcitationsSize := len(citations)\\n\\n\\tif citations[citationsSize-1] == 0 {\\n\\t\\treturn 0\\n\\t} else if citationsSize == 1 {\\n\\t\\treturn 1\\n\\t}\\n\\n\\th_index := 0\\n\\n\\tfor h:=1; h<=citationsSize; h++  {\\n\\t\\tif citations[citationsSize-h] >= h {\\n\\t\\t\\th_index = h\\n\\t\\t} else {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t}\\n\\n\\treturn h_index\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3549293,
                "title": "c-solution-using-binary-search",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int s = 0;\\n        int e = n-1;\\n        int n = citations.size();\\n        \\n        int ans =0;\\n        while(s<=e){\\n            int mid = s+(e-s)/2;\\n           if(citations[mid]<n-mid){\\n               s=mid+1;\\n              \\n               \\n           }\\n           else{\\n               e=mid-1;\\n           }\\n           \\n        }\\n        return n-s;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int s = 0;\\n        int e = n-1;\\n        int n = citations.size();\\n        \\n        int ans =0;\\n        while(s<=e){\\n            int mid = s+(e-s)/2;\\n           if(citations[mid]<n-mid){\\n               s=mid+1;\\n              \\n               \\n           }\\n           else{\\n               e=mid-1;\\n           }\\n           \\n        }\\n        return n-s;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3508572,
                "title": "just-3-lines-of-code-beats-100-java-easy-to-understand-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        for (int i=0; i < n; i++)\\n            if(citations[i]>=n-i) return n-i;\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        for (int i=0; i < n; i++)\\n            if(citations[i]>=n-i) return n-i;\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3504416,
                "title": "easy-way-to-kotlin",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    fun hIndex(citations: IntArray): Int {\\n        var hIndex = citations.size\\n        \\n        citations.forEachIndexed { index, i -> \\n            if(i >= hIndex - index){\\n                return hIndex - index\\n            }\\n        }\\n        return 0\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun hIndex(citations: IntArray): Int {\\n        var hIndex = citations.size\\n        \\n        citations.forEachIndexed { index, i -> \\n            if(i >= hIndex - index){\\n                return hIndex - index\\n            }\\n        }\\n        return 0\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3496883,
                "title": "binary-search-simple-solution-cpp-97-speed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int low=0, high =citations.size()-1;\\n        int ans=0;\\n        int n = citations.size();\\n        while(low<=high){\\n            int mid = low + (high - low)/2;\\n            if(citations[mid]==0){\\n                low=mid+1;\\n            }\\n            else{\\n                if(citations[mid] <= n - mid){\\n                    ans=max(ans,citations[mid]);\\n                    low = mid + 1;\\n                }\\n                else{\\n                    ans=max(ans, n -mid);\\n                    high = mid - 1;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int low=0, high =citations.size()-1;\\n        int ans=0;\\n        int n = citations.size();\\n        while(low<=high){\\n            int mid = low + (high - low)/2;\\n            if(citations[mid]==0){\\n                low=mid+1;\\n            }\\n            else{\\n                if(citations[mid] <= n - mid){\\n                    ans=max(ans,citations[mid]);\\n                    low = mid + 1;\\n                }\\n                else{\\n                    ans=max(ans, n -mid);\\n                    high = mid - 1;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3452591,
                "title": "c-binary-search-solution-20-lines-detailed-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs the given array`citations`is sorted in ascending order, we think of Binary Search. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n`mid=(low+high)/2`.\\n- If number of elements ahead of`citations[mid]`i.e.`n-mid`elements are less than`citations[mid]`, then`h`can be`n-mid` and as we are asked to maximize the value of`h`, we move behind to check if we can get a larger value of`n-mid`.\\n- If above condition fails, it means that we need to go ahead and so,`low=mid+1`.\\n\\n# Complexity\\n- Time complexity:`O(log(n))`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:`O(1)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n=citations.size();\\n        int low=0, high=n-1;\\n        int ans=0;\\n        while(low<=high){\\n            int mid=low+(high-low)/2;\\n            if(citations[mid]>=n-mid){\\n                ans=max(ans, n-mid);\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n=citations.size();\\n        int low=0, high=n-1;\\n        int ans=0;\\n        while(low<=high){\\n            int mid=low+(high-low)/2;\\n            if(citations[mid]>=n-mid){\\n                ans=max(ans, n-mid);\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3232245,
                "title": "java-solution-100-faster-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int l=0,r=citations.length-1,h=0;\\n        while(l<=r){\\n            int mid=(l+r)/2;\\n            if(citations.length-mid<=citations[mid]){\\n                h=citations.length-mid;\\n                r=mid-1;\\n            }\\n            else{\\n                l=mid+1;\\n            }\\n        }\\n        return h;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int l=0,r=citations.length-1,h=0;\\n        while(l<=r){\\n            int mid=(l+r)/2;\\n            if(citations.length-mid<=citations[mid]){\\n                h=citations.length-mid;\\n                r=mid-1;\\n            }\\n            else{\\n                l=mid+1;\\n            }\\n        }\\n        return h;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3227168,
                "title": "c",
                "content": "# Complexity\\n- Time complexity: $$O(log(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int min = 0, max = n - 1;\\n        int mid;\\n\\n        while (min <= max) {\\n            mid = (min + max) / 2;\\n            if (citations[mid] < n - mid) {\\n                min = mid + 1;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return n - min;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int min = 0, max = n - 1;\\n        int mid;\\n\\n        while (min <= max) {\\n            mid = (min + max) / 2;\\n            if (citations[mid] < n - mid) {\\n                min = mid + 1;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n\\n        return n - min;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3227107,
                "title": "c-binary-search",
                "content": "# Complexity\\n- Time complexity: $$O(nlog(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int min = 0, max = citations.size();\\n        int mid;\\n\\n        while (min < max) {\\n            mid = (min + max + 1) / 2;\\n            if (isH(mid, citations)) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    bool isH(int h, vector<int>& citations) {\\n        int count = citations.size();\\n        for (auto citation: citations) {\\n            if (citation < h) count -= 1;\\n            if (count < h) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int min = 0, max = citations.size();\\n        int mid;\\n\\n        while (min < max) {\\n            mid = (min + max + 1) / 2;\\n            if (isH(mid, citations)) {\\n                min = mid;\\n            } else {\\n                max = mid - 1;\\n            }\\n        }\\n        return min;\\n    }\\n\\n    bool isH(int h, vector<int>& citations) {\\n        int count = citations.size();\\n        for (auto citation: citations) {\\n            if (citation < h) count -= 1;\\n            if (count < h) return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3128711,
                "title": "java-solution-0-ms-beats-100",
                "content": "# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int lower = 0;\\n        int upper = 5000;\\n        int index = -1;\\n        \\n        while(lower < upper) {\\n            int mid = lower + (upper - lower+1)/2;\\n            if(graterThanOrEqual(citations,mid,0,citations.length-1) >= mid) {\\n                lower = mid;\\n            } else {\\n                upper = mid-1; \\n            }\\n        }\\n        \\n        return lower;\\n    }\\n\\n    int graterThanOrEqual(int [] arr , int num , int start , int end) {\\n        while(start < end) {\\n            int mid = start + (end - start)/2;\\n\\n            if(arr[mid] >= num) {\\n                end = mid;\\n            } else start = mid+1;\\n        }\\n\\n        if(arr[start] < num)\\n            return 0;\\n\\n        return arr.length - start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int lower = 0;\\n        int upper = 5000;\\n        int index = -1;\\n        \\n        while(lower < upper) {\\n            int mid = lower + (upper - lower+1)/2;\\n            if(graterThanOrEqual(citations,mid,0,citations.length-1) >= mid) {\\n                lower = mid;\\n            } else {\\n                upper = mid-1; \\n            }\\n        }\\n        \\n        return lower;\\n    }\\n\\n    int graterThanOrEqual(int [] arr , int num , int start , int end) {\\n        while(start < end) {\\n            int mid = start + (end - start)/2;\\n\\n            if(arr[mid] >= num) {\\n                end = mid;\\n            } else start = mid+1;\\n        }\\n\\n        if(arr[start] < num)\\n            return 0;\\n\\n        return arr.length - start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3046241,
                "title": "simple-js-solution-beats-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nMake use of ascending order and the property that if it is in decending then for every ith paper. all the preview values are greater than current paper. Eg 10, 9, 8, 5, 4 ans is 4 as till 4th paper all values are gte than the value which is 5. But here we have ascending data so start from end and keep it as paper 1st and move left \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} citations\\n * @return {number}\\n */\\nconst hIndex = (citations) => {\\n  let hIndex = 0;\\n  let ind = citations.length -1;\\n  for (let i = 1; i <= citations.length; i++) {\\n    if (citations[ind] >= i) {\\n      hIndex = i;\\n    } else {\\n        break;\\n    }\\n    ind--;\\n  }\\n  return hIndex;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} citations\\n * @return {number}\\n */\\nconst hIndex = (citations) => {\\n  let hIndex = 0;\\n  let ind = citations.length -1;\\n  for (let i = 1; i <= citations.length; i++) {\\n    if (citations[ind] >= i) {\\n      hIndex = i;\\n    } else {\\n        break;\\n    }\\n    ind--;\\n  }\\n  return hIndex;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2946478,
                "title": "c-binary-search-easy-approach",
                "content": "Here is my c++ code for this problem.\\n\\n# Complexity\\n- Time complexity:O(NlogN)\\n\\n- Space complexity:O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        sort(citations.begin(), citations.end());\\n        int i=0, j=1e9, n=citations.size(), ans=0;\\n        while(i<=j){\\n            int mid=i+(j-i)/2;\\n            int cnt=lower_bound(citations.begin(), citations.end(), mid)-citations.begin();\\n            if(n-cnt>=mid){\\n                ans=mid;\\n                i=mid+1;\\n            }\\n            else{\\n                j=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        sort(citations.begin(), citations.end());\\n        int i=0, j=1e9, n=citations.size(), ans=0;\\n        while(i<=j){\\n            int mid=i+(j-i)/2;\\n            int cnt=lower_bound(citations.begin(), citations.end(), mid)-citations.begin();\\n            if(n-cnt>=mid){\\n                ans=mid;\\n                i=mid+1;\\n            }\\n            else{\\n                j=mid-1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2792616,
                "title": "simple-java-solution-easy-to-understand-binary-search-trick",
                "content": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        \\n        int start = 0;\\n        int end = citations.length - 1;\\n        \\n        while(start <= end){\\n            \\n            int mid = start + (end - start) / 2;\\n            \\n            if(citations[mid] == citations.length - mid){\\n                return citations[mid];\\n            }\\n            else if(citations[mid] > citations.length - mid){\\n                end = mid - 1;\\n            }\\n            else{\\n                start = mid + 1;\\n            }\\n        }\\n        \\n        \\n        return citations.length - start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        \\n        int start = 0;\\n        int end = citations.length - 1;\\n        \\n        while(start <= end){\\n            \\n            int mid = start + (end - start) / 2;\\n            \\n            if(citations[mid] == citations.length - mid){\\n                return citations[mid];\\n            }\\n            else if(citations[mid] > citations.length - mid){\\n                end = mid - 1;\\n            }\\n            else{\\n                start = mid + 1;\\n            }\\n        }\\n        \\n        \\n        return citations.length - start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2753211,
                "title": "c-3-lines-lower-bound",
                "content": "This is mainly to demonstrate how we can use element index in a custom comparator inside ```lower_bound``` in C++:\\n```\\nint hIndex(vector<int>& v) {\\n\\tauto it=lower_bound(v.begin(), v.end(), v.size(), [&v](int& elt, const int &n)\\n\\t{ int idx=&elt-&v[0];  return elt+idx<n; });\\n\\treturn distance(it, v.end());\\n}\\n```",
                "solutionTags": [],
                "code": "```lower_bound```\n```\\nint hIndex(vector<int>& v) {\\n\\tauto it=lower_bound(v.begin(), v.end(), v.size(), [&v](int& elt, const int &n)\\n\\t{ int idx=&elt-&v[0];  return elt+idx<n; });\\n\\treturn distance(it, v.end());\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2521349,
                "title": "runtime-0-ms-faster-than-100-00-java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int start=0;\\n        int end=citations.length-1;\\n        int n = end+1;\\n        while(start<=end)\\n        {\\n            int mid = (start+end)/2;\\n            if(citations[mid]<n-mid){\\n                start=mid+1;\\n            }\\n            else{\\n                end=mid-1;\\n            }\\n        }\\n        return n-start;   \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int hIndex(int[] citations) {\\n        int start=0;\\n        int end=citations.length-1;\\n        int n = end+1;\\n        while(start<=end)\\n        {\\n            int mid = (start+end)/2;\\n            if(citations[mid]<n-mid){\\n                start=mid+1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2445506,
                "title": "java-solution-binary-search-o-logn-time-o-1-space",
                "content": "```java\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int start=0;\\n        int end=citations.length-1;\\n        int n = end+1;\\n        while(start<=end)\\n        {\\n            int mid = (start+end)/2;\\n            if(citations[mid]<n-mid){\\n                start=mid+1;\\n            }\\n            else{\\n                end=mid-1;\\n            }\\n        }\\n        return n-start;   \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int start=0;\\n        int end=citations.length-1;\\n        int n = end+1;\\n        while(start<=end)\\n        {\\n            int mid = (start+end)/2;\\n            if(citations[mid]<n-mid){\\n                start=mid+1;\\n            }\\n            else{\\n                end=mid-1;\\n            }\\n        }\\n        return n-start;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2071333,
                "title": "java-solution-has-explaination-faster-than-100",
                "content": "We realize that h-index will be in range (0, n) inclusive. So we will binary with left=0 and right=n. Let mid = (left+right)/2. if mid is our h-index, it has to satisfy conditions: citations[n-mid]>=mid (exactly mid paper has at least mid citations) and citations[n-mid-1]<=mid (other n-mid paper has no more than mid citations each). Let res be the result.If citations[n-mid]<mid, then res < mid. If citations[n-mid-1]>mid, then res > mid. \\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int l=0;\\n        int r=n;\\n        int res=0;\\n        while(l<=r){\\n            int m=(l+r)/2;\\n            if(m!=0 && citations[n-m]<m){\\n                r=m-1;\\n            }\\n            else if(n!=m && citations[n-m-1]>m){\\n                l=m+1;\\n            }\\n            else {\\n                res=m;\\n                l=m+1;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int l=0;\\n        int r=n;\\n        int res=0;\\n        while(l<=r){\\n            int m=(l+r)/2;\\n            if(m!=0 && citations[n-m]<m){\\n                r=m-1;\\n            }\\n            else if(n!=m && citations[n-m-1]>m){\\n                l=m+1;\\n            }\\n            else {\\n                res=m;\\n                l=m+1;\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2048914,
                "title": "2-ways-to-solve-python",
                "content": "First approach: binary search on the answer search space O(log n):\\n\\n```\\nlo, hi = 0, len(citations)\\n\\nwhile lo < hi:\\n\\tmid = hi - (hi - lo) // 2         # ceil(mid)\\n\\tif citations[-mid] >= mid:        # are there enough papers with at-least \"mid\" no. of citations ? \\n\\t\\tlo = mid                      # yes, mid is possible answer, keep searching for better\\n\\telse:\\n\\t\\thi = mid - 1                  # no, search for lower h-index\\n\\nreturn lo\\n```\\n\\nSecond approach: Greedy linear search with early stopping O(n):\\n```\\nh = len(citations)  # H-index cannot be more than the number of papers\\n\\nfor c in citations:     \\n\\tif c >= h:      # all papers to the right have at-least as many citations as h\\n\\t\\treturn h\\n\\th -= 1          # else: nope, so H-index cannot be so high, reduce and keep checking\\n\\nreturn h            # at this point, H-index is 0\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\nlo, hi = 0, len(citations)\\n\\nwhile lo < hi:\\n\\tmid = hi - (hi - lo) // 2         # ceil(mid)\\n\\tif citations[-mid] >= mid:        # are there enough papers with at-least \"mid\" no. of citations ? \\n\\t\\tlo = mid                      # yes, mid is possible answer, keep searching for better\\n\\telse:\\n\\t\\thi = mid - 1                  # no, search for lower h-index\\n\\nreturn lo\\n```\n```\\nh = len(citations)  # H-index cannot be more than the number of papers\\n\\nfor c in citations:     \\n\\tif c >= h:      # all papers to the right have at-least as many citations as h\\n\\t\\treturn h\\n\\th -= 1          # else: nope, so H-index cannot be so high, reduce and keep checking\\n\\nreturn h            # at this point, H-index is 0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2035750,
                "title": "using-binary-search-in-java",
                "content": "```\\nclass Solution {\\n    public int f(int[] c,int m)\\n    {\\n        int count=0;\\n        for(int e:c) if(e>=m) count++;\\n        return count;\\n    }\\n    public int hIndex(int[] c) {\\n        int l=1;\\n        int m,ans=0;\\n        int h=Integer.MIN_VALUE;\\n        for(int e:c) if(e>h) h=e;\\n        while(l<=h)\\n        {\\n            m=((h-l)/2)+l;\\n            int x=f(c,m);\\n            if(x>=m)\\n            {\\n                 ans=m;\\n                l=m+1;\\n            }\\n            else h=m-1;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int f(int[] c,int m)\\n    {\\n        int count=0;\\n        for(int e:c) if(e>=m) count++;\\n        return count;\\n    }\\n    public int hIndex(int[] c) {\\n        int l=1;\\n        int m,ans=0;\\n        int h=Integer.MIN_VALUE;\\n        for(int e:c) if(e>h) h=e;\\n        while(l<=h)\\n        {\\n            m=((h-l)/2)+l;\\n            int x=f(c,m);\\n            if(x>=m)\\n            {\\n                 ans=m;\\n                l=m+1;\\n            }\\n            else h=m-1;\\n        }\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2017242,
                "title": "python-c-c-simple-binary-search",
                "content": "**Code : C++**\\n```\\nint hIndex(vector<int>& citations) {\\n\\tint start = 0, end = citations.size()-1, ans = 0;\\n\\twhile(start<=end){\\n\\t\\tint mid = start + (end - start)/2;\\n\\t\\tif(citations[mid] >= citations.size() - mid) {\\n\\t\\t\\tans = max(ans,(int)citations.size() - mid); end = mid - 1;\\n\\t\\t}\\n\\t\\telse start = mid + 1;\\n\\t}\\n\\treturn ans;\\n}\\n```\\n**Code : C**\\n```\\nint hIndex(int* citations, int citationsSize){\\n\\tint start = 0, end = citationsSize-1, ans = 0;\\n\\twhile(start<=end){\\n\\t\\tint mid = start + (end - start)/2;\\n\\t\\tif(citations[mid] >= citationsSize - mid) {\\n\\t\\t\\tans = fmax(ans,(int)citationsSize - mid); end = mid - 1;\\n\\t\\t}\\n\\t\\telse start = mid + 1;\\n\\t}\\n\\treturn ans;\\n}\\n```\\n**Code : Python/Python3**\\n```\\ndef hIndex(self, citations):\\n\\tstart = 0\\n\\tend = len(citations)-1\\n\\tans = 0\\n\\twhile start <= end:\\n\\t\\tmid = start + (end - start)//2\\n\\t\\tif citations[mid] >= len(citations) - mid:\\n\\t\\t\\tans = max(ans,len(citations)-mid)\\n\\t\\t\\tend = mid - 1\\n\\t\\telse: start = mid + 1\\n\\treturn ans\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nint hIndex(vector<int>& citations) {\\n\\tint start = 0, end = citations.size()-1, ans = 0;\\n\\twhile(start<=end){\\n\\t\\tint mid = start + (end - start)/2;\\n\\t\\tif(citations[mid] >= citations.size() - mid) {\\n\\t\\t\\tans = max(ans,(int)citations.size() - mid); end = mid - 1;\\n\\t\\t}\\n\\t\\telse start = mid + 1;\\n\\t}\\n\\treturn ans;\\n}\\n```\n```\\nint hIndex(int* citations, int citationsSize){\\n\\tint start = 0, end = citationsSize-1, ans = 0;\\n\\twhile(start<=end){\\n\\t\\tint mid = start + (end - start)/2;\\n\\t\\tif(citations[mid] >= citationsSize - mid) {\\n\\t\\t\\tans = fmax(ans,(int)citationsSize - mid); end = mid - 1;\\n\\t\\t}\\n\\t\\telse start = mid + 1;\\n\\t}\\n\\treturn ans;\\n}\\n```\n```\\ndef hIndex(self, citations):\\n\\tstart = 0\\n\\tend = len(citations)-1\\n\\tans = 0\\n\\twhile start <= end:\\n\\t\\tmid = start + (end - start)//2\\n\\t\\tif citations[mid] >= len(citations) - mid:\\n\\t\\t\\tans = max(ans,len(citations)-mid)\\n\\t\\t\\tend = mid - 1\\n\\t\\telse: start = mid + 1\\n\\treturn ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1964767,
                "title": "accepted-solution-for-swift",
                "content": "```swift\\nclass Solution {\\n    func hIndex(_ c: [Int]) -> Int {\\n        var lhs = 0, rhs = c.count\\n        while lhs < rhs {\\n            let mid = lhs + (rhs - lhs + 1) >> 1\\n            c[c.count - mid] >= mid ? (lhs = mid) : (rhs = mid - 1)\\n        }\\n        return lhs\\n    }\\n}\\n```\\n\\n<hr>\\n\\n<details>\\n<summary><img src=\"https://git.io/JDblm\" height=\"24\"> <b>TEST CASES</b></summary>\\n\\n<pre>\\nResult: Executed 2 tests, with 0 failures (0 unexpected) in 0.009 (0.011) seconds\\n</pre>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n\\n    private let solution = Solution()\\n    \\n    // [0,1,3,5,6] means the researcher has 5 papers in total and each\\n    // of them had received 0, 1, 3, 5, 6 citations respectively.\\n    // Since the researcher has 3 papers with at least 3 citations each and\\n    // the remaining two with no more than 3 citations each, their h-index is 3.\\n    func test0() {\\n        let value = solution.hIndex([0,1,3,5,6])\\n        XCTAssertEqual(value, 3)\\n    }\\n    \\n    func test1() {\\n        let value = solution.hIndex([1,2,100])\\n        XCTAssertEqual(value, 2)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func hIndex(_ c: [Int]) -> Int {\\n        var lhs = 0, rhs = c.count\\n        while lhs < rhs {\\n            let mid = lhs + (rhs - lhs + 1) >> 1\\n            c[c.count - mid] >= mid ? (lhs = mid) : (rhs = mid - 1)\\n        }\\n        return lhs\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n\\n    private let solution = Solution()\\n    \\n    // [0,1,3,5,6] means the researcher has 5 papers in total and each\\n    // of them had received 0, 1, 3, 5, 6 citations respectively.\\n    // Since the researcher has 3 papers with at least 3 citations each and\\n    // the remaining two with no more than 3 citations each, their h-index is 3.\\n    func test0() {\\n        let value = solution.hIndex([0,1,3,5,6])\\n        XCTAssertEqual(value, 3)\\n    }\\n    \\n    func test1() {\\n        let value = solution.hIndex([1,2,100])\\n        XCTAssertEqual(value, 2)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1928316,
                "title": "simple-solution-0ms",
                "content": "```\\npublic int hIndex(int[] citations) {\\n\\tint count = 0, index = citations.length - 1;\\n\\twhile( index >= 0 && citations[index] > count ) {\\n\\t\\tcount++;\\n\\t\\tindex--;\\n\\t}\\n\\treturn count;\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int hIndex(int[] citations) {\\n\\tint count = 0, index = citations.length - 1;\\n\\twhile( index >= 0 && citations[index] > count ) {\\n\\t\\tcount++;\\n\\t\\tindex--;\\n\\t}\\n\\treturn count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1898954,
                "title": "simple-easy-to-understand-c-implementation",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& arr) {\\n        int s=0,e=arr.size()-1;\\n        int mid;\\n        //Binary Search\\n        while(s<=e){\\n            mid=s+(e-s)/2;\\n            if(arr[mid]>=arr.size()-mid){\\n                e=mid-1;\\n            }\\n            else\\n                s=mid+1;\\n        }\\n        return arr.size()-s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& arr) {\\n        int s=0,e=arr.size()-1;\\n        int mid;\\n        //Binary Search\\n        while(s<=e){\\n            mid=s+(e-s)/2;\\n            if(arr[mid]>=arr.size()-mid){\\n                e=mid-1;\\n            }\\n            else\\n                s=mid+1;\\n        }\\n        return arr.size()-s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1858202,
                "title": "python-275-h-index-ii-recursive-solution",
                "content": "``` class Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        \\n        \\n        max_citations  = 0\\n        def binary_search(low, high):\\n            nonlocal max_citations\\n            \\n            if low > high:\\n                return\\n            \\n            mid = low + (high - low)//2\\n            number_papers = len(citations) - mid\\n            \\n            if citations[mid] >= number_papers:\\n                max_citations = max(max_citations, number_papers)\\n                binary_search(low, mid-1)\\n            else:\\n                binary_search(mid + 1, high)\\n                \\n        binary_search(0, len(citations)-1)\\n        return max_citations ```",
                "solutionTags": [
                    "Python",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "``` class Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        \\n        \\n        max_citations  = 0\\n        def binary_search(low, high):\\n            nonlocal max_citations\\n            \\n            if low > high:\\n                return\\n            \\n            mid = low + (high - low)//2\\n            number_papers = len(citations) - mid\\n            \\n            if citations[mid] >= number_papers:\\n                max_citations = max(max_citations, number_papers)\\n                binary_search(low, mid-1)\\n            else:\\n                binary_search(mid + 1, high)\\n                \\n        binary_search(0, len(citations)-1)\\n        return max_citations ```",
                "codeTag": "Java"
            },
            {
                "id": 1778376,
                "title": "java-easy-solution-binary-search-o-logn-tc-o-1-sc",
                "content": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int ans=0;\\n        int low=0;\\n        int high=n-1;\\n        while(low<=high){\\n            int mid=(low+high)/2;\\n            if(citations[mid]>=n-mid){\\n                ans=n-mid;\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n       return ans; \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int ans=0;\\n        int low=0;\\n        int high=n-1;\\n        while(low<=high){\\n            int mid=(low+high)/2;\\n            if(citations[mid]>=n-mid){\\n                ans=n-mid;\\n                high=mid-1;\\n            }\\n            else{\\n                low=mid+1;\\n            }\\n        }\\n       return ans; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1775712,
                "title": "c-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n         int ans = 0;\\n         int lo = 0, hi = citations.size() - 1;\\n         int n = citations.size();\\n        \\n         while(lo <= hi){\\n             int mid = lo + (hi - lo) / 2;\\n             if(citations[mid] >= (n - mid)){\\n                 ans = n - mid;\\n                 hi = mid - 1;\\n             }\\n             else lo = mid + 1;\\n         }\\n        return ans;\\n    }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "class Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n         int ans = 0;\\n         int lo = 0, hi = citations.size() - 1;\\n         int n = citations.size();\\n        \\n         while(lo <= hi){\\n             int mid = lo + (hi - lo) / 2;\\n             if(citations[mid] >= (n - mid)){\\n                 ans = n - mid;\\n                 hi = mid - 1;\\n             }",
                "codeTag": "Java"
            },
            {
                "id": 1738553,
                "title": "understand-the-solution",
                "content": "Let\\'s analyze the problem. \\n\\tThe given array is named citations and the comparion array(which is used in code as n-mid) is named hindex\\n\\t\\n\\t(1) normal cases where we can find an exact match:\\n\\t\\n\\tcitations: [0, 1, 3, 5, 6]\\n    hIndex(n-mid): [5, 4, 3, 2, 1] (from right to left, if c[i]>h[i], then at least h[i] paper that higher than h[i]), notice that c is ascending and h is descending.\\n\\t\\n\\tthree conditions will appear:\\n       1.  if (h[i] == c[i]) : the cross point, return h[i];\\n       \\n       2.  if (h[i] < c[i]) : at least h[i] paper has equal or more h[i] index. the answer is found, but we are looking for better answer(bigger h index), so we continue left.\\n       \\n       3.  if (h[i] > c[i]) : meaningless. we need a correct answer so we continue right(smaller h index)\\n       \\n\\t(2)  if cross point is not found, we can consider two cases:\\n        1. all the number are small: \\n        citations: [0, 0, 0, 0, 0]\\n    hIndex(n-mid): [5, 4, 3, 2, 1]\\n        in this case, c[i] is always smaller than h[i], which will continue moves pointer rightwards. thus lo will become really big and n-lo will be 0;\\n\\t\\t\\n        2. all teh numbers are big:\\n        citations: [6, 6, 6, 6, 6]\\n    hIndex(n-mid): [5, 4, 3, 2, 1]\\n        in this case, c[i] is alwasys larger than h[i], which will continue moves pointer leftwards. thus lo will become really small and n-lo will be 5, which is the correct answer.\\n\\t\\t\\n        so we will return n - lo when we can\\'t find an exact match.\\n\\t\\tcode is below:\\n\\t\\t\\n```\\t\\t\\n    public int hIndex(int[] citations) {\\n        int lo = 0, hi = citations.length - 1, n = citations.length;\\n        while (lo <= hi) {\\n            int mid = lo + (hi - lo)/2;\\n            if (citations[mid] == n-mid) {\\n                return citations[mid];\\n            } else if (citations[mid] < n-mid) {\\n                lo = mid+1;\\n            } else hi = mid-1;\\n        }\\n        return n - lo;\\n    }\\n\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\t\\t\\n    public int hIndex(int[] citations) {\\n        int lo = 0, hi = citations.length - 1, n = citations.length;\\n        while (lo <= hi) {\\n            int mid = lo + (hi - lo)/2;\\n            if (citations[mid] == n-mid) {\\n                return citations[mid];\\n            } else if (citations[mid] < n-mid) {\\n                lo = mid+1;\\n            } else hi = mid-1;\\n        }\\n        return n - lo;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1650450,
                "title": "c-8ms-99-65-binary-search",
                "content": "Runtime: 8 ms, faster than 99.65% of C++ online submissions for H-Index II.\\nMemory Usage: 18.7 MB, less than 47.03% of C++ online submissions for H-Index II.\\n```\\nclass Solution {\\npublic:\\n  int hIndex(vector<int>& citations) {\\n    int l = 0, r = citations.size() - 1, n = citations.size();\\n    \\n    for(int m = (l + r)>>1; l <= r; m = (l + r)>>1)\\n      citations[m] >= n - m ? r = m - 1 : l = m + 1;\\n    \\n    return l == n ? citations.back() > n ? n : citations.back() : min(citations[l], n - l);\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  int hIndex(vector<int>& citations) {\\n    int l = 0, r = citations.size() - 1, n = citations.size();\\n    \\n    for(int m = (l + r)>>1; l <= r; m = (l + r)>>1)\\n      citations[m] >= n - m ? r = m - 1 : l = m + 1;\\n    \\n    return l == n ? citations.back() > n ? n : citations.back() : min(citations[l], n - l);\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1367355,
                "title": "100-python-solution-explained-logn-with-other-similar-problems",
                "content": "```python\\n\"\"\"\\nTime: O(LogN)\\nSpace: O(1)\\n\\nSince citations is sorted,\\ni = N-1, if 1<=citations[i], it means that at least 1 of the citations is larger than 1. h-index is 1.\\ni = N-2, if 2<=citations[i], it means that at least 2 of the citations is larger than 2. h-index is 2.\\n...\\ni = 0, if N<=citations[i], it means that at least N of the citations is larger than N. h-index is N.\\n\\nWe can iterate from N-1 to 0. See what h-index ends up. Using O(N) of time.\\n\\nWe can also binary search the i, see which i match the condition.\\n\"\"\"\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        N = len(citations)\\n        \\n        l = 0\\n        r = N-1\\n        \\n        while l<r:\\n            i = (l+r)/2\\n            h = N-i\\n\\n            if citations[i]>=h:\\n                #h may be the h-index, check larger h.\\n                r = i\\n            else:\\n                #h is not h-index, check smaller h.\\n                l = i+1\\n        \\n        #now, l is equal to r\\n\\n        return N-l if citations[l]!=0 else 0  #take care of edge case [0], [0, 0] or [0, 0, 0]\\n\\n\"\"\"\\nRelated Problems:\\nSearch Insert Position\\nMedian of Two Sorted Arrays\\nFind Minimum in Rotated Sorted Array: I, II\\nFind First and Last Position of Element in Sorted Array\\nGuess Number Higher or Lower\\nFirst Bad Version\\nSearch in Rotated Array:I, II\\nLongest Increasing Subsequence, Count of Smaller Numbers After Self\\nRussian Doll Envelopes\\nH-Index, H-Index II\\n\\nFor more other topics similar problems, check out my GitHub.\\nIt took me a lots of time to make the solution. Becuase I want to help others like me.\\nPlease give me a star if you like it. Means a lot to me.\\nhttps://github.com/wuduhren/leetcode-python\\n\"\"\"\\n```",
                "solutionTags": [],
                "code": "```python\\n\"\"\"\\nTime: O(LogN)\\nSpace: O(1)\\n\\nSince citations is sorted,\\ni = N-1, if 1<=citations[i], it means that at least 1 of the citations is larger than 1. h-index is 1.\\ni = N-2, if 2<=citations[i], it means that at least 2 of the citations is larger than 2. h-index is 2.\\n...\\ni = 0, if N<=citations[i], it means that at least N of the citations is larger than N. h-index is N.\\n\\nWe can iterate from N-1 to 0. See what h-index ends up. Using O(N) of time.\\n\\nWe can also binary search the i, see which i match the condition.\\n\"\"\"\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        N = len(citations)\\n        \\n        l = 0\\n        r = N-1\\n        \\n        while l<r:\\n            i = (l+r)/2\\n            h = N-i\\n\\n            if citations[i]>=h:\\n                #h may be the h-index, check larger h.\\n                r = i\\n            else:\\n                #h is not h-index, check smaller h.\\n                l = i+1\\n        \\n        #now, l is equal to r\\n\\n        return N-l if citations[l]!=0 else 0  #take care of edge case [0], [0, 0] or [0, 0, 0]\\n\\n\"\"\"\\nRelated Problems:\\nSearch Insert Position\\nMedian of Two Sorted Arrays\\nFind Minimum in Rotated Sorted Array: I, II\\nFind First and Last Position of Element in Sorted Array\\nGuess Number Higher or Lower\\nFirst Bad Version\\nSearch in Rotated Array:I, II\\nLongest Increasing Subsequence, Count of Smaller Numbers After Self\\nRussian Doll Envelopes\\nH-Index, H-Index II\\n\\nFor more other topics similar problems, check out my GitHub.\\nIt took me a lots of time to make the solution. Becuase I want to help others like me.\\nPlease give me a star if you like it. Means a lot to me.\\nhttps://github.com/wuduhren/leetcode-python\\n\"\"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1003276,
                "title": "java-0-ms-binary-search",
                "content": "```\\nclass Solution {\\n    public int hIndex(int[] nums) {\\n        int n = nums.length;\\n        int left = 0, right = n-1;\\n        \\n        while(left <= right){\\n            int mid = left + (right-left)/2;\\n            if(nums[mid] == n-mid){\\n                return nums[mid];\\n            } else if(nums[mid] > n-mid){\\n                right = mid-1;\\n            } else {\\n                left = mid+1;\\n            }\\n        }\\n        \\n        return n-left;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] nums) {\\n        int n = nums.length;\\n        int left = 0, right = n-1;\\n        \\n        while(left <= right){\\n            int mid = left + (right-left)/2;\\n            if(nums[mid] == n-mid){\\n                return nums[mid];\\n            } else if(nums[mid] > n-mid){\\n                right = mid-1;\\n            } else {\\n                left = mid+1;\\n            }\\n        }\\n        \\n        return n-left;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 788971,
                "title": "python-solution-with-explanation-o-log-n-faster-than-96-97",
                "content": "For H-Index, we require the array to be in reverse sorted order. Since the input is in sorted order,  we need to return the `length - index(left)`\\nPerform a normal binary search to get the index.\\n\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        if not citations:\\n            return 0\\n        \\n        n = len(citations)\\n        l, r = 0, n\\n        while l < r:\\n            \\n            m = (l+r) // 2\\n            if citations[m] >= n - m:\\n                r = m \\n            else:\\n                l = m + 1\\n        \\n        return n - l \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        if not citations:\\n            return 0\\n        \\n        n = len(citations)\\n        l, r = 0, n\\n        while l < r:\\n            \\n            m = (l+r) // 2\\n            if citations[m] >= n - m:\\n                r = m \\n            else:\\n                l = m + 1\\n        \\n        return n - l \\n```",
                "codeTag": "Java"
            },
            {
                "id": 769579,
                "title": "python-two-approaches-explained-beats-99-19",
                "content": "So the follow-up in the description hints that this problem should be solved via a binary search since it asks us to achieve logarithmic time complexity.  The binary search solution is shown at the end.  \\n\\nTo better understand the binary-search solution, let\\'s first look at the linear time complexity solution (slow).  \\n\\n```python\\ndef hIndex(self, citations: List[int]) -> int:\\n\\tfor h in range(1, len(citations)+1):\\n\\t\\tif citations[-h] < h:\\n\\t\\t\\treturn h - 1\\n\\treturn len(citations)\\n```\\n\\nWhat we are doing here is looking for the first paper that is cited (```citations[-h]```) fewer times than it\\'s rank (```h```).  Here is a step by step walkthrough, starting by comparing the most cited paper (```6```) to a rank of ```h = 1```.  \\n\\nFor the given example: ```[0,1,3,5,6]```\\n\\nWe start at ```h = 1``` and ```citations[-1] = 6``` since ```6 >= 1``` we proceed\\nNext, ```h = 2``` and ```citations[-2] = 5``` since ```5 >= 2``` we proceed\\nNext, ```h = 3``` and ```citations[-3] = 3``` since ```3 >= 3``` we proceed\\nLast, ```h = 4``` and ```citations[-4] = 1``` since ```1 >= 4``` is False, we return the last true value which is ```h = 3```\\n\\nSince we are searching in a sorted list, we can speed up the process through binary search, shown below.  The goal is the same - to locate the least cited paper that has at least as many citations as it\\'s rank.  \\n\\n```python\\ndef hIndex(self, citations: List[int]) -> int:\\n\\tif not citations: return 0\\n\\tif len(citations) == 1: return int(bool(citations.pop()))\\n\\n\\ti = 0\\n\\tj = len(citations) - 1\\n\\twhile i < j:\\n\\t\\tg = (i + j) >> 1\\n\\t\\tif len(citations) - g > citations[g]:\\n\\t\\t\\ti = g + 1\\n\\t\\telse:\\n\\t\\t\\tj = g\\n\\treturn 0 if len(citations) - j > citations[j] else len(citations) - j \\n```\\n<img src=\"https://assets.leetcode.com/users/images/c1d85174-cbb6-4c9e-a1d9-e54341d3f9a7_1596396606.740443.png\" width=\"450px\">\\n",
                "solutionTags": [],
                "code": "```python\\ndef hIndex(self, citations: List[int]) -> int:\\n\\tfor h in range(1, len(citations)+1):\\n\\t\\tif citations[-h] < h:\\n\\t\\t\\treturn h - 1\\n\\treturn len(citations)\\n```\n```citations[-h]```\n```h```\n```6```\n```h = 1```\n```[0,1,3,5,6]```\n```h = 1```\n```citations[-1] = 6```\n```6 >= 1```\n```h = 2```\n```citations[-2] = 5```\n```5 >= 2```\n```h = 3```\n```citations[-3] = 3```\n```3 >= 3```\n```h = 4```\n```citations[-4] = 1```\n```1 >= 4```\n```h = 3```\n```python\\ndef hIndex(self, citations: List[int]) -> int:\\n\\tif not citations: return 0\\n\\tif len(citations) == 1: return int(bool(citations.pop()))\\n\\n\\ti = 0\\n\\tj = len(citations) - 1\\n\\twhile i < j:\\n\\t\\tg = (i + j) >> 1\\n\\t\\tif len(citations) - g > citations[g]:\\n\\t\\t\\ti = g + 1\\n\\t\\telse:\\n\\t\\t\\tj = g\\n\\treturn 0 if len(citations) - j > citations[j] else len(citations) - j \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 764586,
                "title": "c-easy-iterative-b-search-explained-in-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int low = 0 , high = citations.size() - 1, hindex = 0, cunt = 0;\\n         \\n        while(low <= high)\\n        {\\n            int mid = (low + high)/2;\\n\\t\\t\\t\\n\\t\\t\\t// If no.elements in the right subarray is less than the min element(citations[mid])\\n\\t\\t\\t// then length of this subarray can be possible h-index\\n\\t\\t\\t// then recurse to left subarray to find bigger hfactor\\n            if(citations[mid] >= int(citations.size() - mid) ) {\\n                hindex = max(hindex,int(citations.size() - mid));\\n                high = mid - 1;\\n            }\\n            else {\\n\\t\\t\\t// If it cant be hfactor, then go to right subarray\\n                low = mid + 1;\\n            }\\n        }\\n    return hindex;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int low = 0 , high = citations.size() - 1, hindex = 0, cunt = 0;\\n         \\n        while(low <= high)\\n        {\\n            int mid = (low + high)/2;\\n\\t\\t\\t\\n\\t\\t\\t// If no.elements in the right subarray is less than the min element(citations[mid])\\n\\t\\t\\t// then length of this subarray can be possible h-index\\n\\t\\t\\t// then recurse to left subarray to find bigger hfactor\\n            if(citations[mid] >= int(citations.size() - mid) ) {\\n                hindex = max(hindex,int(citations.size() - mid));\\n                high = mid - 1;\\n            }\\n            else {\\n\\t\\t\\t// If it cant be hfactor, then go to right subarray\\n                low = mid + 1;\\n            }\\n        }\\n    return hindex;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 744943,
                "title": "easy-python-binary-search",
                "content": "**Easy Python | Binary Search**\\n\\n```\\nclass Solution:\\n    def hIndex(self, A):\\n        L     = len(A)\\n        valid = lambda i: A[i]>=(L-i)\\n        i,j   = 0, L-1 \\n        best  = L\\n        #\\n        while i<=j:\\n            mid = (i+j)//2\\n            if valid(mid):\\n                best = mid # After a match, \" (j = mid - 1) < mid \", so the latest match is always the minimum\\n                j = mid - 1 # try even lower\\n            else:\\n                i = mid + 1 # index must be higher\\n        return L-best\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, A):\\n        L     = len(A)\\n        valid = lambda i: A[i]>=(L-i)\\n        i,j   = 0, L-1 \\n        best  = L\\n        #\\n        while i<=j:\\n            mid = (i+j)//2\\n            if valid(mid):\\n                best = mid # After a match, \" (j = mid - 1) < mid \", so the latest match is always the minimum\\n                j = mid - 1 # try even lower\\n            else:\\n                i = mid + 1 # index must be higher\\n        return L-best\\n```",
                "codeTag": "Java"
            },
            {
                "id": 696166,
                "title": "c-solution",
                "content": "```\\n/*\\n    Time: O(n)\\n    Space: O(1)\\n*/\\n\\npublic class Solution {\\n    public int HIndex(int[] citations) {\\n        \\n        // at index i, paper i is cited citations[i] times\\n        // the number of papers who have at least citations[i] is (n - i)\\n        // h-index is the max (n - i) value, so we need to find the smallest i that meet the criteria\\n        \\n        int n = citations.Length; \\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            // (n-i) papers have at least citation[i]\\n            if(citations[i] >= n - i)\\n                return n - i;\\n        }\\n\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\n    Time: O(n)\\n    Space: O(1)\\n*/\\n\\npublic class Solution {\\n    public int HIndex(int[] citations) {\\n        \\n        // at index i, paper i is cited citations[i] times\\n        // the number of papers who have at least citations[i] is (n - i)\\n        // h-index is the max (n - i) value, so we need to find the smallest i that meet the criteria\\n        \\n        int n = citations.Length; \\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            // (n-i) papers have at least citation[i]\\n            if(citations[i] >= n - i)\\n                return n - i;\\n        }\\n\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 694850,
                "title": "binary-search-apporch",
                "content": "\\n        n=len(c)\\n        l,r=0,n-1\\n        \\n        while l<=r:\\n            mid=(l+r)//2\\n            \\n            if c[mid]<n-mid:\\n                l=mid+1\\n            else:\\n                r=mid-1\\n        return n-l",
                "solutionTags": [],
                "code": "\\n        n=len(c)\\n        l,r=0,n-1\\n        \\n        while l<=r:\\n            mid=(l+r)//2\\n            \\n            if c[mid]<n-mid:\\n                l=mid+1\\n            else:\\n                r=mid-1\\n        return n-l",
                "codeTag": "Unknown"
            },
            {
                "id": 694760,
                "title": "java-0ms-binary-search-o-logn-simple-solution",
                "content": "Please upvote if you like the solution.\\n\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int hIndex=0;\\n        int start=0;\\n        int end=citations.length-1;    \\n        int len=citations.length;\\n        \\n        while(start<=end) {\\n            int mid = start + (end-start)/2;\\n            if(citations[mid]<=len-mid) {\\n                hIndex=hIndex<citations[mid]?citations[mid]:hIndex;\\n                start=mid+1;\\n            } else {\\n                hIndex=hIndex<len-mid?len-mid:hIndex;\\n                end=mid-1;\\n            }\\n        }\\n        return hIndex;\\n    }\\n}\\n```\\n\\n**Runtime**: beats 100.00 % of java submissions\\n**Memory usage**: beats 90.31 % of java submissions",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int hIndex=0;\\n        int start=0;\\n        int end=citations.length-1;    \\n        int len=citations.length;\\n        \\n        while(start<=end) {\\n            int mid = start + (end-start)/2;\\n            if(citations[mid]<=len-mid) {\\n                hIndex=hIndex<citations[mid]?citations[mid]:hIndex;\\n                start=mid+1;\\n            } else {\\n                hIndex=hIndex<len-mid?len-mid:hIndex;\\n                end=mid-1;\\n            }\\n        }\\n        return hIndex;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 694718,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& cit) {\\n        int index=0;\\n        for(int j=cit.size()-1; j>=0; j--){\\n            if(cit[j]>index) index++;\\n            else break;\\n        }\\n        return index;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& cit) {\\n        int index=0;\\n        for(int j=cit.size()-1; j>=0; j--){\\n            if(cit[j]>index) index++;\\n            else break;\\n        }\\n        return index;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 694273,
                "title": "python3-bisect-right-and-bisect-left-h-index-ii",
                "content": "There are two ways to do this:  bisect_right and bisect_left.\\n\\nIf you want to bisect the answer directly, you can only use bisect_right because a smaller number (number in the left part of the array) of papers with least citation larger than the number of papers can be the answer (e.g. `[1,2]`) but not vice versa and bisect_right finds the smallest number that\\'s not the answer so the answer should be `lo - 1`. For this reason, `hi` initially should be `n+1` instead of `n`.\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        if not citations:\\n            return 0\\n        n = len(citations)\\n        lo, hi = 0, n+1\\n        while lo < hi:\\n            mid = (lo + hi)//2\\n            if citations[-mid] < mid:\\n                hi = mid\\n            else:\\n                lo = mid + 1\\n        return max(lo-1, 0)\\n```\\n\\nIf you don\\'t bisect the answer directly but the diff between the answer and `n`, you can use bisect_left, which looks nicer.\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n = len(citations)\\n        lo, hi = 0, n\\n        while lo < hi:\\n            mid = (lo + hi)//2\\n            if citations[mid] < n - mid:\\n                lo = mid + 1\\n            else:\\n                hi = mid\\n        return n - lo\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        if not citations:\\n            return 0\\n        n = len(citations)\\n        lo, hi = 0, n+1\\n        while lo < hi:\\n            mid = (lo + hi)//2\\n            if citations[-mid] < mid:\\n                hi = mid\\n            else:\\n                lo = mid + 1\\n        return max(lo-1, 0)\\n```\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        n = len(citations)\\n        lo, hi = 0, n\\n        while lo < hi:\\n            mid = (lo + hi)//2\\n            if citations[mid] < n - mid:\\n                lo = mid + 1\\n            else:\\n                hi = mid\\n        return n - lo\\n```",
                "codeTag": "Java"
            },
            {
                "id": 694031,
                "title": "100-faster-binary-search-recursion-self-explanatory",
                "content": "```\\npublic int hIndex(int[] citations) {\\n        int n=citations.length;\\n        if(n==0)return 0;\\n        return util(citations,0,n-1,n);\\n    }\\n    \\n    int max=0;\\n    public int util(int arr[],int start,int end,int n){\\n        int mid=(start+end)/2;\\n    \\n        if(start>end) return max;\\n        \\n        if(arr[mid]>=n-mid)\\n        {\\n            max=Math.max(max,n-mid);\\n            util(arr,start,mid-1,n);   \\n        }\\n        else{\\n            util(arr,mid+1,end,n);\\n        }\\n        \\n        return max;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int hIndex(int[] citations) {\\n        int n=citations.length;\\n        if(n==0)return 0;\\n        return util(citations,0,n-1,n);\\n    }\\n    \\n    int max=0;\\n    public int util(int arr[],int start,int end,int n){\\n        int mid=(start+end)/2;\\n    \\n        if(start>end) return max;\\n        \\n        if(arr[mid]>=n-mid)\\n        {\\n            max=Math.max(max,n-mid);\\n            util(arr,start,mid-1,n);   \\n        }\\n        else{\\n            util(arr,mid+1,end,n);\\n        }\\n        \\n        return max;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 693903,
                "title": "c",
                "content": "```C++\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        \\n        int H = 0;\\n        \\n        if (citations.size() == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] != 0)\\n            return 1;\\n        \\n        sort(citations.begin(), citations.end(), greater<int>());\\n        \\n        for (int i = 0; i < citations.size(); i++)\\n        {\\n            if ( citations[i] <= i )\\n            {\\n                break;\\n            }\\n            else\\n            {\\n                H++;\\n            }\\n        }\\n        \\n        return H;\\n    }\\n};\\n```\\n\\n[\\u53C2\\u8003](https://leetcode.com/problems/h-index-ii/discuss/693427/C%2B%2B-or-BOTH-O(logn)-and-O(n)-solution-with-explanation)\\n\\n```C++\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        \\n        if (citations.size() == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] != 0)\\n            return 1;\\n        \\n        int low = 0, high = citations.size()-1;\\n        \\n        int mid = 0, H = 0;\\n        \\n        while (low <= high)\\n        {\\n            mid = (low + high) / 2;\\n            \\n            if ( citations[mid] >= citations.size() - mid)\\n            {\\n                H = citations.size() - mid;\\n            \\n                high = mid - 1;\\n            }\\n                \\n            else\\n            {\\n                low = mid + 1;\\n            }\\n        }\\n        \\n        return H;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```C++\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        \\n        int H = 0;\\n        \\n        if (citations.size() == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] != 0)\\n            return 1;\\n        \\n        sort(citations.begin(), citations.end(), greater<int>());\\n        \\n        for (int i = 0; i < citations.size(); i++)\\n        {\\n            if ( citations[i] <= i )\\n            {\\n                break;\\n            }\\n            else\\n            {\\n                H++;\\n            }\\n        }\\n        \\n        return H;\\n    }\\n};\\n```\n```C++\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        \\n        if (citations.size() == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] == 0)\\n            return 0;\\n        \\n        if (citations.size() == 1 && citations[0] != 0)\\n            return 1;\\n        \\n        int low = 0, high = citations.size()-1;\\n        \\n        int mid = 0, H = 0;\\n        \\n        while (low <= high)\\n        {\\n            mid = (low + high) / 2;\\n            \\n            if ( citations[mid] >= citations.size() - mid)\\n            {\\n                H = citations.size() - mid;\\n            \\n                high = mid - 1;\\n            }\\n                \\n            else\\n            {\\n                low = mid + 1;\\n            }\\n        }\\n        \\n        return H;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693635,
                "title": "are-there-arrays-which-haven-t-got-solutions",
                "content": "Lets make a function *f* (works with non-negative rational numbers), which assigns to every rational number x the number of numbers in the array that at least x.\\nAnd another one *g* which is just *f(x)=x*.\\n\\nIf f(x)=g(x), x is a valid solution.\\nLet\\'s plot the function graphs!\\n\\n![image](https://assets.leetcode.com/users/meljandavid/image_1592475854.png)\\n\\nAfter this, we can construct our own arrays, which haven\\'t got any solutions.\\nFor example **citations=[0, 1, 3]** have no correct H-Index.\\n![image](https://assets.leetcode.com/users/meljandavid/image_1592475844.png)\\n\\nI had acceptance with this Python solution, but it\\'s just throws a bad answer for the mentioned array.\\n```\\ndef hIndex(self, citations: List[int])->int:\\n\\tN = len(citations)\\n\\thead=0\\n\\ttail=N\\n\\twhile head<tail:\\n\\t\\tmid=(head+tail)//2\\n\\t\\tbigger=N-mid\\n\\n\\t\\tif bigger<=citations[mid]:\\n\\t\\t\\ttail=mid\\n\\t\\telse:\\n\\t\\t\\thead=mid+1\\n\\n\\treturn N-head\\n```\\n\\nEdit: we can see, we can maximum 1 correct H-Index (because g strictly monotonically grows, f decreases)",
                "solutionTags": [],
                "code": "```\\ndef hIndex(self, citations: List[int])->int:\\n\\tN = len(citations)\\n\\thead=0\\n\\ttail=N\\n\\twhile head<tail:\\n\\t\\tmid=(head+tail)//2\\n\\t\\tbigger=N-mid\\n\\n\\t\\tif bigger<=citations[mid]:\\n\\t\\t\\ttail=mid\\n\\t\\telse:\\n\\t\\t\\thead=mid+1\\n\\n\\treturn N-head\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 693408,
                "title": "python-easy-and-self-explanatory-solution",
                "content": "Please comment for any doubt\\n\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        l=len(citations)\\n        res=0\\n        for i in range(l):\\n            if citations[l-i-1]>=(res+1):res+=1\\n            else:return res\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        l=len(citations)\\n        res=0\\n        for i in range(l):\\n            if citations[l-i-1]>=(res+1):res+=1\\n            else:return res\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 693348,
                "title": "c-i-have-done-my-best",
                "content": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) \\n    {\\n        int n = citations.size();\\n        int l = 0,r = n-1;\\n        while (l <= r) \\n        {\\n            int mid = l + (r-l)/2;\\n            if (citations[mid] == n-mid)\\n            return n-mid;\\n            else if(citations[mid] > n-mid)\\n            r = mid-1;\\n            else\\n            l = mid+1;\\n        }\\n        return n-l;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) \\n    {\\n        int n = citations.size();\\n        int l = 0,r = n-1;\\n        while (l <= r) \\n        {\\n            int mid = l + (r-l)/2;\\n            if (citations[mid] == n-mid)\\n            return n-mid;\\n            else if(citations[mid] > n-mid)\\n            r = mid-1;\\n            else\\n            l = mid+1;\\n        }\\n        return n-l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 513958,
                "title": "python-3-runtime-144-standard-binary-search",
                "content": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        low,hight, n = 0, len(citations)-1, len(citations)\\n        while low<=hight:\\n            middle = low+(hight-low)//2\\n            if (n - middle) == citations[middle]:\\n                return citations[middle]\\n            if (n - middle) < citations[middle]:\\n                hight = middle -1\\n            if (n - middle) > citations[middle]:\\n                low = middle +1 \\n        return n-low\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        low,hight, n = 0, len(citations)-1, len(citations)\\n        while low<=hight:\\n            middle = low+(hight-low)//2\\n            if (n - middle) == citations[middle]:\\n                return citations[middle]\\n            if (n - middle) < citations[middle]:\\n                hight = middle -1\\n            if (n - middle) > citations[middle]:\\n                low = middle +1 \\n        return n-low\\n```",
                "codeTag": "Java"
            },
            {
                "id": 447298,
                "title": "python-solution-with-binary-search",
                "content": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        lo, hi = 0, len(citations)\\n        while lo < hi:\\n            mid = (lo + hi) // 2\\n            if citations[~mid] > mid:\\n                lo = mid + 1\\n            else:\\n                hi = mid\\n        return lo\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        lo, hi = 0, len(citations)\\n        while lo < hi:\\n            mid = (lo + hi) // 2\\n            if citations[~mid] > mid:\\n                lo = mid + 1\\n            else:\\n                hi = mid\\n        return lo\\n```",
                "codeTag": "Java"
            },
            {
                "id": 401532,
                "title": "java-loop-invariant-explanation",
                "content": "Loop Invariant Explaination:\\nhttp://www.cs.cornell.edu/courses/cs2112/2015fa/lectures/lec_loopinv/index.html\\n\\nFor this question:\\n1. Establishment: The final answer must present in index [0, length - 1].\\n2. Preservation: \\n\\t- mid point situation: val < num. mid + 1 point situation: bigger val, smaller num, at least same H. We can ensure answer will present in [mid + 1, right]\\n\\t- mid point situation: val > num. mid - 1 point situation: smaller val, bigger num, at least same H. We can ensure answer will present in [left, mid - 1].\\n\\t- Thus: Loop invariance is preserved.\\n\\n3. Post-condition: The only situation we can exit the loop is left > right. The only situation we have left > right is when left == mid and val > num. We know we have the loop invariance, answer is in [left, right] in every loop. Thus, after right = mid - 1 = left - 1, left is the only point that is still valid as an answer. Then, return size - left. \\n\\n```\\npublic int hIndex(int[] citations) {\\n\\n        // corner case\\n        if (citations == null || citations.length == 0) return 0;\\n        \\n        int size = citations.length;\\n\\t\\t\\n\\t\\t// establishment\\n        int left = 0, right = size - 1;\\n        \\n        while (left <= right) {\\n            \\n            int mid = (right - left) / 2 + left;\\n            int val = citations[mid];\\n            int num = size - mid;\\n            \\n\\t\\t\\t// preservation\\n            if (val < num) {\\n                left = mid + 1;\\n            } else if (val > num) {\\n                right = mid - 1;\\n            } else {\\n                return num;\\n            }\\n        }\\n        \\n\\t\\t// postcondition\\n        return size - left;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int hIndex(int[] citations) {\\n\\n        // corner case\\n        if (citations == null || citations.length == 0) return 0;\\n        \\n        int size = citations.length;\\n\\t\\t\\n\\t\\t// establishment\\n        int left = 0, right = size - 1;\\n        \\n        while (left <= right) {\\n            \\n            int mid = (right - left) / 2 + left;\\n            int val = citations[mid];\\n            int num = size - mid;\\n            \\n\\t\\t\\t// preservation\\n            if (val < num) {\\n                left = mid + 1;\\n            } else if (val > num) {\\n                right = mid - 1;\\n            } else {\\n                return num;\\n            }\\n        }\\n        \\n\\t\\t// postcondition\\n        return size - left;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 335332,
                "title": "c-native-binary-search",
                "content": "The possible HIndex for every element is  **hIndex = array_size - element_index**, use binary search to find the first element with \\n**citation[element_index] >=hIndex**, if none meets this requirement, return 0;\\n\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        if (citations.empty()) return 0;\\n        \\n        int i = 0;\\n        int size = citations.size();\\n        int j = size - 1;\\n        \\n        while (i < j)\\n        {\\n            int mid = i + (j - i) / 2;\\n            int value = citations[mid];\\n            int hIndex = size - mid;\\n            if (value == hIndex) return value;\\n            else if (value > hIndex) j = mid;\\n            else i = mid + 1;\\n        }\\n        \\n        if (j < 0 || (citations[j] < (size - j))) return 0;\\n        return size - i;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        if (citations.empty()) return 0;\\n        \\n        int i = 0;\\n        int size = citations.size();\\n        int j = size - 1;\\n        \\n        while (i < j)\\n        {\\n            int mid = i + (j - i) / 2;\\n            int value = citations[mid];\\n            int hIndex = size - mid;\\n            if (value == hIndex) return value;\\n            else if (value > hIndex) j = mid;\\n            else i = mid + 1;\\n        }\\n        \\n        if (j < 0 || (citations[j] < (size - j))) return 0;\\n        return size - i;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 295483,
                "title": "super-simple-o-n-solution",
                "content": "Explanations:\\ncitations.length -i is the number of papers that has been citated more than citations[i] times. \\nBesides, the array is already sorted so it must be non-decreasing, thus we know that the previous 0 to i-1 th papers must have been citated less than citations[i] times.\\n\\ncorner case:\\nwhen none of the papers been citated, we return 0;\\n\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        for(int i = 0; i<citations.length; i++){\\n            if(citations[i]>= citations.length -i){\\n                return citations.length -i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        for(int i = 0; i<citations.length; i++){\\n            if(citations[i]>= citations.length -i){\\n                return citations.length -i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 272594,
                "title": "simple-java-solution-with-explanation-using-binary-search-beat-100",
                "content": "Main idea: the h-index should be in range of (1, citation.length). So we use binary search to find the biggest n in range of (1, citation.length) where the citation of the last n papers are all bigger than n. The ONLY Change we should do by using the classical binary search is to find the first elment of the last n papers and compare it value to n. \\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        if (citations == null || citations.length == 0) return 0;\\n        int start = 1;\\n        int end   = citations.length;\\n        while (start <= end) {\\n            int mid = start + (end - start)/2;       \\n            int index = citations.length - mid;      \\n            if (citations[index] >= mid) start = mid + 1;    \\n            else end = mid - 1;                      \\n        }\\n        return end;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int hIndex(int[] citations) {\\n        if (citations == null || citations.length == 0) return 0;\\n        int start = 1;\\n        int end   = citations.length;\\n        while (start <= end) {\\n            int mid = start + (end - start)/2;       \\n            int index = citations.length - mid;      \\n            if (citations[index] >= mid) start = mid + 1;    \\n            else end = mid - 1;                      \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 174752,
                "title": "python-solution",
                "content": "Binary search:\\n```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        \"\"\"\\n        :type citations: List[int]\\n        :rtype: int\\n        \"\"\"\\n        n = len(citations)\\n        if n == 0:\\n            return 0\\n        i = 0\\n        j = n-1\\n        while i < j:\\n            mid = (i+j) / 2\\n            if citations[mid] == n-mid:\\n                return n-mid\\n            elif citations[mid] < n-mid:\\n                i = mid+1\\n            else:\\n                j = mid\\n        return min(citations[i],n-i)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        \"\"\"\\n        :type citations: List[int]\\n        :rtype: int\\n        \"\"\"\\n        n = len(citations)\\n        if n == 0:\\n            return 0\\n        i = 0\\n        j = n-1\\n        while i < j:\\n            mid = (i+j) / 2\\n            if citations[mid] == n-mid:\\n                return n-mid\\n            elif citations[mid] < n-mid:\\n                i = mid+1\\n            else:\\n                j = mid\\n        return min(citations[i],n-i)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 155445,
                "title": "beats-100-java-easiest-simplest",
                "content": "```\\n public int hIndex(int[] citations) {\\n        int i=0,j=citations.length-1;\\n        while(i<=j)\\n        {\\n            int mid=(i+j)/2;                 \\n            if(citations[mid]>=(citations.length-mid))\\n                j=mid-1;\\n            else\\n                i=mid+1;\\n        }\\n        return citations.length-i;\\n    }",
                "solutionTags": [],
                "code": "```\\n public int hIndex(int[] citations) {\\n        int i=0,j=citations.length-1;\\n        while(i<=j)\\n        {\\n            int mid=(i+j)/2;                 \\n            if(citations[mid]>=(citations.length-mid))\\n                j=mid-1;\\n            else\\n                i=mid+1;\\n        }\\n        return citations.length-i;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 71069,
                "title": "clear-java-code-using-binary-search-easy-to-understand",
                "content": "```\\npublic int hIndex(int[] citations) {\\n    int n=citations.length;\\n    int lo=0,hi=n;\\n    while(lo<hi){\\n        int mid=(lo+hi+1)/2;//mid represents current h value, not the current position \\n        if(citations[n-mid]<mid){\\n            hi=mid-1;\\n        }else{\\n            lo=mid;\\n        }\\n    }\\n    return lo;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int hIndex(int[] citations) {\\n    int n=citations.length;\\n    int lo=0,hi=n;\\n    while(lo<hi){\\n        int mid=(lo+hi+1)/2;//mid represents current h value, not the current position \\n        if(citations[n-mid]<mid){\\n            hi=mid-1;\\n        }else{\\n            lo=mid;\\n        }\\n    }\\n    return lo;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 71084,
                "title": "o-log-n-c-binary-search",
                "content": "* I spent lots of time on understanding what H is. In fact just image the vector like a bar and the value of each citations[i] is the height of each factor. \\n\\n* **Definition: \"A scientist has index h if h of his/her N papers have at least h citations each, and the other N \\u2212 h papers have no more than h citations each.\"**\\n\\n* Now you use the H from 0 to n (included) to test all of the factors in the vector. You should find one number of H which makes that that some certain citations[k], the n - k ==  citations[k], where the k is the value of our expected H.\\n\\n* So binary search is applied for Time O(lg n).\\n\\n\\n    class Solution {\\n    public:\\n    int hIndex(vector<int>& citations) {\\n        if(citations.empty()) return 0;\\n        int n = citations.size();\\n        int a = 0, b = n;// because the index range is [0,n].\\n        while(a < b){\\n            int i = a + (b - a)/2;\\n            if(citations[i] > n - i){\\n                b = i;\\n            }\\n            else if(citations[i] < n - i){\\n                a = i + 1;\\n            }\\n            else if(citations[i] == n - i){\\n                return n - i;\\n            }\\n        }\\n        return n - a;\\n    }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    int hIndex(vector<int>& citations) {\\n        if(citations.empty()) return 0;\\n        int n = citations.size();\\n        int a = 0, b = n;// because the index range is [0,n].\\n        while(a < b){\\n            int i = a + (b - a)/2;\\n            if(citations[i] > n - i){\\n                b = i;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 71088,
                "title": "c-o-log-n-solution-by-binary-search-with-explanation",
                "content": "Simply find the maximum k that satisfies ```citations[n-1-k] > k``` by binary search.\\nReturn ```k+1``` as the answer.\\n```\\nclass Solution {\\npublic:\\n    bool valid(vector<int>& citations, int n, int k) {\\n        if (k < n)\\n            return (citations[n-1-k] > k);\\n        else\\n            return false;\\n    }\\n    \\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        if (!n) return 0;\\n        int st = 0;\\n        int ed = n - 1;\\n        if (!valid(citations, n, st)) return 0;\\n        if (valid(citations, n, ed)) return n;\\n        while (ed - st > 1) {\\n            int mid = (st+ed)/2;\\n            if (valid(citations, n, mid))\\n                st = mid;\\n            else\\n                ed = mid;\\n        }\\n        return st+1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Binary Search"
                ],
                "code": "```citations[n-1-k] > k```\n```k+1```\n```\\nclass Solution {\\npublic:\\n    bool valid(vector<int>& citations, int n, int k) {\\n        if (k < n)\\n            return (citations[n-1-k] > k);\\n        else\\n            return false;\\n    }\\n    \\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        if (!n) return 0;\\n        int st = 0;\\n        int ed = n - 1;\\n        if (!valid(citations, n, st)) return 0;\\n        if (valid(citations, n, ed)) return n;\\n        while (ed - st > 1) {\\n            int mid = (st+ed)/2;\\n            if (valid(citations, n, mid))\\n                st = mid;\\n            else\\n                ed = mid;\\n        }\\n        return st+1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71089,
                "title": "efficient-solution-in-c-well-explained",
                "content": "### Solution\\nThere is only one possible result and the demonstration logic is as follows:\\nSuppose, we have two different H-index in n citations and `a<b`.\\n\\n- First, as for b, there are `b` citations that are bigger or equal to `b`.\\n- Second, as for a, there are `a` citations that are bigger or equal to `a` and the rest `n-a` citations are equal to or less than `a`;\\n- But, since `b>a` then there are at least `b` citations that are bigger than `a` (according to the First) and then at most there will be `n-b` that are less than or equal to `a` which is a contradiction against the fact that there will be `n-a` that is equal to or less than `a` (according to the Second). \\n\\nSo once it's sorted, the index can be used to partition the array and do binary searching.\\n\\n- First, the splitting element should be `citations[m]` and `citations.size()-m` and once they are equal, we should directly return otherwise continue the binary searching.\\n- Second, due to the special condition in the First, then we should  use `l=m+1` or `r=m-1` to select the next range and as a result the termination condition should be `l<=r`.\\n\\n>**Note** Corner cases: [1], [0].\\n\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) \\n    {\\n        if(citations.empty()) return 0;\\n        int l = 0, r = citations.size()-1;\\n        while(l <= r)\\n        {\\n            int m = l+((r-l)>>1);\\n            if(citations.size()-m == citations[m]) return citations[m];\\n            else if(citations.size()-m > citations[m]) l = m+1;\\n            else if(citations.size()-m < citations[m]) r = m-1;\\n        }\\n        return citations.size()-l;\\n    }\\n};\\n```\\n\\nAlways welcome new ideas and `practical` tricks, just leave them in the comments!",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) \\n    {\\n        if(citations.empty()) return 0;\\n        int l = 0, r = citations.size()-1;\\n        while(l <= r)\\n        {\\n            int m = l+((r-l)>>1);\\n            if(citations.size()-m == citations[m]) return citations[m];\\n            else if(citations.size()-m > citations[m]) l = m+1;\\n            else if(citations.size()-m < citations[m]) r = m-1;\\n        }\\n        return citations.size()-l;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71091,
                "title": "a-little-more-than-just-binary-search",
                "content": "Binary search the correct index (from which are the papers counted to H-index) came first in my head:\\n```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        # Binary Search using number of papers\\n        n = len(citations)\\n        l = 0; r = n\\n        while l < r:\\n            m = (l+r)/2\\n            if citations[m] == n-m: return n-m\\n            elif citations[m] < n-m: l = m+1\\n            else: r = m\\n        return n-l\\n```\\nThat one takes 124ms. \\nThen I thought, wait, we can also binary guess the correct H-index by doing this:\\n```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        # Binary Search on paper's highest citation: binary guess the h-index\\n        n = len(citations)\\n        if n == 0: return 0\\n        l = 0; r = min(citations[-1], n)\\n        while l < r:\\n            m = l + r - (l+r)/2\\n            if citations[n-m] == m: return m\\n            elif citations[n-m] < m: r = m-1\\n            else: l = m\\n        return l\\n```\\nThe second one took 120ms.\\nNow, do you see how we can optimize the solution a little bit more? For example, when there are many papers with low-index (The second solution does this better than the first one)? Or, when there are very few papers but with high H-index (The first solution handles this better than the second one)?\\n\\nYes, you're right: combining them! Here is the final solution (which is a little faster than the 2 first ones with 112ms and beats 95% submissions, but when you add more variations to the dataset, it will make a lot of difference): \\n```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        n = len(citations)\\n        if n == 0: return 0\\n        \\n        if citations[-1] > n:\\n            # Binary Search on number of papers: binary search the index\\n            l = 0; r = n\\n            while l < r:\\n                m = (l+r)/2\\n                if citations[m] == n-m: return n-m\\n                elif citations[m] < n-m: l = m+1\\n                else: r = m\\n            return n-l\\n        \\n        else:\\n            # Binary Search on paper's highest citation: binary guess the h-index\\n            l = 0; r = citations[-1]\\n            while l < r:\\n                m = l + r - (l+r)/2\\n                if citations[n-m] == m: return m\\n                elif citations[n-m] < m: r = m-1\\n                else: l = m\\n            return l\\n```\\n![0_1469395339958_Screen Shot 2016-07-24 at 2.11.39 PM.png](/uploads/files/1469395339743-screen-shot-2016-07-24-at-2.11.39-pm.png)",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        # Binary Search using number of papers\\n        n = len(citations)\\n        l = 0; r = n\\n        while l < r:\\n            m = (l+r)/2\\n            if citations[m] == n-m: return n-m\\n            elif citations[m] < n-m: l = m+1\\n            else: r = m\\n        return n-l\\n```\n```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        # Binary Search on paper's highest citation: binary guess the h-index\\n        n = len(citations)\\n        if n == 0: return 0\\n        l = 0; r = min(citations[-1], n)\\n        while l < r:\\n            m = l + r - (l+r)/2\\n            if citations[n-m] == m: return m\\n            elif citations[n-m] < m: r = m-1\\n            else: l = m\\n        return l\\n```\n```\\nclass Solution(object):\\n    def hIndex(self, citations):\\n        n = len(citations)\\n        if n == 0: return 0\\n        \\n        if citations[-1] > n:\\n            # Binary Search on number of papers: binary search the index\\n            l = 0; r = n\\n            while l < r:\\n                m = (l+r)/2\\n                if citations[m] == n-m: return n-m\\n                elif citations[m] < n-m: l = m+1\\n                else: r = m\\n            return n-l\\n        \\n        else:\\n            # Binary Search on paper's highest citation: binary guess the h-index\\n            l = 0; r = citations[-1]\\n            while l < r:\\n                m = l + r - (l+r)/2\\n                if citations[n-m] == m: return m\\n                elif citations[n-m] < m: r = m-1\\n                else: l = m\\n            return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 71099,
                "title": "share-my-bs-solution-with-explanation",
                "content": "Based on the algorithm described in [this wikipedia article][1], when the citations are sorted in descending order, the h-index is the position of the last publication that has citation larger than or equal to its position. Note that the position here starts from 1. Based on the question's information, the input is sorted in ascending order. Then what we need to find is the last element in the array from end to start that satisfies the requirement. Suppose its index is i, and the total number of publications is n, then we need to find the last i from end to start that citations[i] >= n - i. Based on these, we can come up with a natural binary search approach.\\n\\n    public int hIndex(int[] citations) {\\n        if (citations == null || citations.length == 0) return 0;\\n        int n = citations.length;\\n        int l = 0, r = n - 1;\\n        while (l < r) {\\n            int m = l + (r - l) / 2;\\n            if (citations[m] >= n - m) r = m;\\n            else l = m + 1;\\n        }\\n        return citations[l] >= n - l ? n - l : 0;\\n    }\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/H-index",
                "solutionTags": [
                    "Java"
                ],
                "code": "Based on the algorithm described in [this wikipedia article][1], when the citations are sorted in descending order, the h-index is the position of the last publication that has citation larger than or equal to its position. Note that the position here starts from 1. Based on the question's information, the input is sorted in ascending order. Then what we need to find is the last element in the array from end to start that satisfies the requirement. Suppose its index is i, and the total number of publications is n, then we need to find the last i from end to start that citations[i] >= n - i. Based on these, we can come up with a natural binary search approach.\\n\\n    public int hIndex(int[] citations) {\\n        if (citations == null || citations.length == 0) return 0;\\n        int n = citations.length;\\n        int l = 0, r = n - 1;\\n        while (l < r) {\\n            int m = l + (r - l) / 2;\\n            if (citations[m] >= n - m) r = m;\\n            else l = m + 1;\\n        }\\n        return citations[l] >= n - l ? n - l : 0;\\n    }\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/H-index",
                "codeTag": "Unknown"
            },
            {
                "id": 71100,
                "title": "two-different-binary-search-solutions-in-c-accepted-as-best",
                "content": "    //AC - 4ms;\\n    int hIndex1(int* nums, int size)\\n    {\\n        int l=0, r=size-1;\\n        while(l <= r)\\n        {\\n            int m = l+(r-l)/2;\\n            if(size-m < nums[m]) r = m-1;\\n            else if(size-m > nums[m]) l = m+1;\\n            else r--; //ensure the loop will terminate properly;\\n        }\\n        return size-l;\\n    }\\n\\n\\n----------\\n \\nActually we can just return if **size-m == nums[m]** since the array is ordered the left side will always be equal to or smaller than nums[m]. \\n\\n    \\n    //AC - 4ms;\\n    int hIndex(int* nums, int size)\\n    {\\n        int l=0, r=size-1;\\n        while(l <= r)\\n        {\\n            int m = l+(r-l)/2;\\n            if(size-m == nums[m]) return nums[m]; //exactly fit in, just return;\\n            if(size-m < nums[m]) r = m-1;\\n            else l = m+1;\\n        }\\n        return size-l;\\n    }",
                "solutionTags": [],
                "code": "    //AC - 4ms;\\n    int hIndex1(int* nums, int size)\\n    {\\n        int l=0, r=size-1;\\n        while(l <= r)\\n        {\\n            int m = l+(r-l)/2;\\n            if(size-m < nums[m]) r = m-1;\\n            else if(size-m > nums[m]) l = m+1;\\n            else r--; //ensure the loop will terminate properly;\\n        }\\n        return size-l;\\n    }\\n\\n\\n----------\\n \\nActually we can just return if **size-m == nums[m]** since the array is ordered the left side will always be equal to or smaller than nums[m]. \\n\\n    \\n    //AC - 4ms;\\n    int hIndex(int* nums, int size)\\n    {\\n        int l=0, r=size-1;\\n        while(l <= r)\\n        {\\n            int m = l+(r-l)/2;\\n            if(size-m == nums[m]) return nums[m]; //exactly fit in, just return;\\n            if(size-m < nums[m]) r = m-1;\\n            else l = m+1;\\n        }\\n        return size-l;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 71101,
                "title": "straightforward-standard-very-clean-binary-search",
                "content": "The idea is simple, if you want to have x as h-index, your citation[N-x] must have at least x citations. This is simplified like finding the largest number that satisfy citation[N-x]>=x. So like Find the First Bad Version, code is simple BS:\\n\\n    public int hIndex(int[] c) {\\n\\t\\t\\tint N = c.length;\\n\\t\\t\\tint lo = 0, hi = N;\\n\\t\\t\\twhile (lo < hi) {\\n                // only different, +1 to avoid infinity loop when mid == lo \\n\\t\\t\\t\\tint mid = (hi + lo + 1) / 2;\\n\\t\\t\\t\\tif (c[N - mid] >= mid) {\\n\\t\\t\\t\\t\\tlo = mid;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thi = mid - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn lo;\\n\\t}",
                "solutionTags": [],
                "code": "The idea is simple, if you want to have x as h-index, your citation[N-x] must have at least x citations. This is simplified like finding the largest number that satisfy citation[N-x]>=x. So like Find the First Bad Version, code is simple BS:\\n\\n    public int hIndex(int[] c) {\\n\\t\\t\\tint N = c.length;\\n\\t\\t\\tint lo = 0, hi = N;\\n\\t\\t\\twhile (lo < hi) {\\n                // only different, +1 to avoid infinity loop when mid == lo \\n\\t\\t\\t\\tint mid = (hi + lo + 1) / 2;\\n\\t\\t\\t\\tif (c[N - mid] >= mid) {\\n\\t\\t\\t\\t\\tlo = mid;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\thi = mid - 1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn lo;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 71111,
                "title": "short-binary-search-c-code",
                "content": "\\n    int hIndex(vector<int>& citations) {\\n        int left = 0, right = citations.size(), idx = right;\\n        while( left < right ) {\\n            idx = (left+right)/2;\\n            if( citations[idx] < citations.size() - idx ) left = idx+1;\\n            else right = idx;\\n        }\\n        return citations.size() - right;\\n    }",
                "solutionTags": [],
                "code": "\\n    int hIndex(vector<int>& citations) {\\n        int left = 0, right = citations.size(), idx = right;\\n        while( left < right ) {\\n            idx = (left+right)/2;\\n            if( citations[idx] < citations.size() - idx ) left = idx+1;\\n            else right = idx;\\n        }\\n        return citations.size() - right;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 71121,
                "title": "binary-search-solution",
                "content": "    int hIndex(vector<int>& citations) {\\n        if (citations.size() <= 0) return 0;\\n        \\n        int n = citations.size() - 1;\\n        int m = 0, l = 0, r= n;\\n        while (l < r) {\\n            m = l + (r - l) / 2;\\n            if (citations[m] >= n - m + 1)\\n                r = m;\\n            else \\n                l = m + 1;\\n        }\\n        \\n        // finally l is the index satisfy the h-index\\n        return min(citations[l], n - l + 1);\\n    }",
                "solutionTags": [],
                "code": "    int hIndex(vector<int>& citations) {\\n        if (citations.size() <= 0) return 0;\\n        \\n        int n = citations.size() - 1;\\n        int m = 0, l = 0, r= n;\\n        while (l < r) {\\n            m = l + (r - l) / 2;\\n            if (citations[m] >= n - m + 1)\\n                r = m;\\n            else \\n                l = m + 1;\\n        }\\n        \\n        // finally l is the index satisfy the h-index\\n        return min(citations[l], n - l + 1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 71127,
                "title": "ac-python-48-ms-solution-o-log-n",
                "content": "    def hIndex(self, citations):\\n        r = n = len(citations)\\n        l = 0\\n        while l != r:\\n            m = (l + r) >> 1\\n            if citations[m] == n - m:\\n                return n - m\\n            if citations[m] > n - m:\\n                r = m\\n            else:\\n                l = m + 1\\n        return n - l\\n\\n    # 82 / 82 test cases passed.\\n    # Status: Accepted\\n    # Runtime: 48 ms\\n\\n\\nJust simple binary search.",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "    def hIndex(self, citations):\\n        r = n = len(citations)\\n        l = 0\\n        while l != r:\\n            m = (l + r) >> 1\\n            if citations[m] == n - m:\\n                return n - m\\n            if citations[m] > n - m:\\n                r = m\\n            else:\\n                l = m + 1\\n        return n - l\\n\\n    # 82 / 82 test cases passed.\\n    # Status: Accepted\\n    # Runtime: 48 ms\\n\\n\\nJust simple binary search.",
                "codeTag": "Python3"
            },
            {
                "id": 71131,
                "title": "my-binary-search-solution",
                "content": "\\n\\n    public int hIndex(int[] citations) {\\n        if(citations.length==0||citations[citations.length-1]<=0) return 0;\\n        int l=0,r=citations.length-1;\\n        while(l<r){\\n            int mid=(r+l)/2;\\n            if(citations[mid]>citations.length-mid) r=mid;\\n            else if(citations[mid]<citations.length-mid) l=mid+1;\\n            else return citations.length-mid;\\n        }\\n        return citations.length-l;\\n    }",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "\\n\\n    public int hIndex(int[] citations) {\\n        if(citations.length==0||citations[citations.length-1]<=0) return 0;\\n        int l=0,r=citations.length-1;\\n        while(l<r){\\n            int mid=(r+l)/2;\\n            if(citations[mid]>citations.length-mid) r=mid;\\n            else if(citations[mid]<citations.length-mid) l=mid+1;\\n            else return citations.length-mid;\\n        }\\n        return citations.length-l;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 71140,
                "title": "easy-and-concise-standard-binary-search-solution-in-java-with-detailed-explanation",
                "content": "    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        \\n        int l = 0;\\n        int r = citations.length - 1;\\n        \\n        while (l <= r) {\\n            int m = (l + r) / 2;\\n            if (citations[m] >= n - m) { // It checks if it's a valid H-Index\\n                r = m - 1;\\n            } else {\\n                l = m + 1;\\n            }\\n        }\\n        \\n        return n - l;\\n    }\\n\\nThe basic idea is that the sorted citations can be treated as two part: the left half of array are not H-index and the right half of array are H-index, our goal is to get the leftmost index of the right half so that the right half part will have maximum number of elements (what question asked). In this case, we can use standard binary search to search for this leftmost element. If m is in the right half, we make `r = m - 1` , else `l = m + 1`.\\n\\nNote: I use `while (l <= r)` for two reasons:\\n\\n 1. If all the elements in array are 0s, pointer `l` will end up with index n (length of array), then `return n - l` will return 0.\\n 2. Since `r = m - 1` will cause pointer `r` end up with being the rightmost element in left half, `l <= r` can make sure pointer `l` stops at index to the right of `r` which is the leftmost element of right half.",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        \\n        int l = 0;\\n        int r = citations.length - 1;\\n        \\n        while (l <= r) {\\n            int m = (l + r) / 2;\\n            if (citations[m] >= n - m) { // It checks if it's a valid H-Index\\n                r = m - 1;\\n            } else {\\n                l = m + 1;\\n            }\\n        }\\n        \\n        return n - l;\\n    }\\n\\nThe basic idea is that the sorted citations can be treated as two part: the left half of array are not H-index and the right half of array are H-index, our goal is to get the leftmost index of the right half so that the right half part will have maximum number of elements (what question asked). In this case, we can use standard binary search to search for this leftmost element. If m is in the right half, we make `r = m - 1` , else `l = m + 1`.\\n\\nNote: I use `while (l <= r)` for two reasons:\\n\\n 1. If all the elements in array are 0s, pointer `l` will end up with index n (length of array), then `return n - l` will return 0.\\n 2. Since `r = m - 1` will cause pointer `r` end up with being the rightmost element in left half, `l <= r` can make sure pointer `l` stops at index to the right of `r` which is the leftmost element of right half.",
                "codeTag": "Unknown"
            },
            {
                "id": 4103866,
                "title": "easy-solution-using-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int left=0;\\n        int right=n-1;\\n        while(left<=right){\\n            int mid=left+(right-left)/2;\\n            if(citations[mid]==n-mid){\\n                return n-mid;\\n            }\\n            else if(citations[mid]<n-mid){\\n                left=mid+1;\\n            }\\n            else{\\n                right=mid-1;\\n            }\\n        }\\n        return n-left;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n=citations.length;\\n        int left=0;\\n        int right=n-1;\\n        while(left<=right){\\n            int mid=left+(right-left)/2;\\n            if(citations[mid]==n-mid){\\n                return n-mid;\\n            }\\n            else if(citations[mid]<n-mid){\\n                left=mid+1;\\n            }\\n            else{\\n                right=mid-1;\\n            }\\n        }\\n        return n-left;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4101214,
                "title": "simple-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach : Binary Search \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(log n )\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int start=0;\\n        int end=citations.length-1;\\n        int cou=0;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            int k=citations.length-mid;\\n            if(citations[mid]>=k){\\n                end=mid-1;\\n                cou=k;\\n            }\\n            else{\\n                start=mid+1;\\n            }\\n        }\\n        return cou;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int start=0;\\n        int end=citations.length-1;\\n        int cou=0;\\n        while(start<=end){\\n            int mid=start+(end-start)/2;\\n            int k=citations.length-mid;\\n            if(citations[mid]>=k){\\n                end=mid-1;\\n                cou=k;\\n            }\\n            else{\\n                start=mid+1;\\n            }\\n        }\\n        return cou;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090413,
                "title": "binary-search-java-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        int low = 0;\\n        int high = n - 1;\\n        while(low <= high) {\\n            int mid = low + (high - low)/2;\\n            if(citations[mid] == (n - mid))\\n                return citations[mid];\\n            else if(citations[mid] > (n - mid)) \\n                high = mid - 1;\\n            else \\n                low = mid + 1;\\n        }\\n        return n - low;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        int low = 0;\\n        int high = n - 1;\\n        while(low <= high) {\\n            int mid = low + (high - low)/2;\\n            if(citations[mid] == (n - mid))\\n                return citations[mid];\\n            else if(citations[mid] > (n - mid)) \\n                high = mid - 1;\\n            else \\n                low = mid + 1;\\n        }\\n        return n - low;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4080017,
                "title": "simple-binary-search-c-code-beats-83-05-with-explanation",
                "content": "# Intuition\\nThe problem requires us to find the H-Index, which is a metric used to measure the impact and productivity of a researcher\\'s work. The H-Index represents the number of papers with at least `h` citations, where `h` is the largest possible value. We need to find this `h` value.\\n\\n# Approach\\n1. We begin with an efficient binary search approach to find the H-Index.\\n\\n2. We initialize `start` to 0 and `end` to the last index of the `citations` array. `ans` is initialized to 0, and `mid` and `cmt` are used to keep track of the middle index and the number of papers with at least `h` citations, respectively.\\n\\n3. We enter a binary search loop while `start` is less than or equal to `end`.\\n\\n4. In each iteration of the loop, we calculate the `mid` index as the average of `start` and `end`. We also calculate `cmt`, which represents the number of papers with at least `h` citations if `mid` is the H-Index.\\n\\n5. We check if the number of citations at index `mid` is greater than or equal to `cmt`. If it is, it means that `mid` could be a valid H-Index. We update `ans` to `citations.size() - mid`, indicating that we have found a candidate H-Index.\\n\\n6. If `citations[mid] >= cmt`, we adjust the `end` pointer to `mid - 1` to explore lower values of `mid` for a potentially higher H-Index.\\n\\n7. If `citations[mid]` is less than `cmt`, we adjust the `start` pointer to `mid + 1` to explore higher values of `mid`.\\n\\n8. We continue this binary search until `start` is greater than `end`, at which point we have found the largest possible H-Index, and `ans` contains the answer.\\n\\n9. We return `ans` as the H-Index.\\n\\n# Complexity\\n- Time complexity: $$O(log n)$$, where n is the number of citations. The binary search reduces the search space efficiently.\\n- Space complexity: $$O(1)$$, as we only use a few variables for tracking and calculations.\\n# Example\\nSuppose `citations` is [0, 1, 3, 5, 6]. Here\\'s how the code works:\\n\\n- Initially, `start` is 0 and `end` is 4.\\n- In the first iteration, `mid` is calculated as 2, and `cmt` is 3. Since `citations[2]` (3) is greater than or equal to `cmt` (3), we update `ans` to 3 and set `end` to 1.\\n- In the second iteration, `mid` is calculated as 0, and `cmt` is 5. Since `citations[0]` (0) is less than `cmt` (5), we set `start` to 1.\\n- In the third iteration, `start` is now greater than `end`, so we exit the loop. The H-Index is 3, and `ans` contains the answer.\\n\\nThe final result is `ans = 3`, which represents the H-Index.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int start = 0;\\n        int end = citations.size() - 1;\\n        int ans = 0,mid = 0,cmt = 0;\\n        while (start <= end) {\\n            mid = (start + end) / 2;\\n            cmt = citations.size() - mid;\\n            if (citations[mid]>= cmt) {\\n                ans = citations.size() - mid;\\n                end = mid - 1;\\n            }\\n            else{\\n                start = mid + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int start = 0;\\n        int end = citations.size() - 1;\\n        int ans = 0,mid = 0,cmt = 0;\\n        while (start <= end) {\\n            mid = (start + end) / 2;\\n            cmt = citations.size() - mid;\\n            if (citations[mid]>= cmt) {\\n                ans = citations.size() - mid;\\n                end = mid - 1;\\n            }\\n            else{\\n                start = mid + 1;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4058228,
                "title": "optiminize-solution-using-binary-search-100-beats-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(logN)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int left = 0;\\n        int right = citations.length-1;\\n\\n        while(left <= right){\\n            int mid = left + (right-left)/2;\\n            if(citations[mid] < citations.length-mid){\\n                left = mid+1;\\n            } else {\\n                right = mid-1;\\n            }\\n        }\\n        return citations.length-left;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int left = 0;\\n        int right = citations.length-1;\\n\\n        while(left <= right){\\n            int mid = left + (right-left)/2;\\n            if(citations[mid] < citations.length-mid){\\n                left = mid+1;\\n            } else {\\n                right = mid-1;\\n            }\\n        }\\n        return citations.length-left;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4053452,
                "title": "binarysearch-solution-95-for-time-and-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        left, right = 0, len(citations) - 1\\n        ans = 0\\n        while left <= right:\\n            mid = (left + right) // 2\\n            if citations[mid] >= len(citations) - mid:\\n                ans = max(ans, len(citations) - mid)\\n                right = mid - 1\\n            else: left = mid + 1\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def hIndex(self, citations: List[int]) -> int:\\n        left, right = 0, len(citations) - 1\\n        ans = 0\\n        while left <= right:\\n            mid = (left + right) // 2\\n            if citations[mid] >= len(citations) - mid:\\n                ans = max(ans, len(citations) - mid)\\n                right = mid - 1\\n            else: left = mid + 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034766,
                "title": "binary-search-log-n-beats-100",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        if(citations.length == 1){\\n            return citations[0]==0?0:1;\\n        }\\n        int lo = 0;\\n        int hi = citations.length-1;\\n        if(citations[hi]==0){\\n            return 0;\\n        }\\n        while(lo<hi){\\n            int mid = (lo+hi)/2;\\n            int val = citations[mid];\\n            int n = citations.length-mid;\\n            if(val>=n){\\n                hi = mid;\\n            }else{\\n                lo = mid+1;\\n            }\\n        }\\n        return citations.length-hi;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        if(citations.length == 1){\\n            return citations[0]==0?0:1;\\n        }\\n        int lo = 0;\\n        int hi = citations.length-1;\\n        if(citations[hi]==0){\\n            return 0;\\n        }\\n        while(lo<hi){\\n            int mid = (lo+hi)/2;\\n            int val = citations[mid];\\n            int n = citations.length-mid;\\n            if(val>=n){\\n                hi = mid;\\n            }else{\\n                lo = mid+1;\\n            }\\n        }\\n        return citations.length-hi;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032339,
                "title": "h-index-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n    final int n = citations.length;\\n    int l = 0;\\n    int r = n;\\n\\n    while (l < r) {\\n      final int m = (l + r) / 2;\\n      if (citations[m] >= n - m)\\n        r = m;\\n      else\\n        l = m + 1;\\n    }\\n\\n    return n - l;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n    final int n = citations.length;\\n    int l = 0;\\n    int r = n;\\n\\n    while (l < r) {\\n      final int m = (l + r) / 2;\\n      if (citations[m] >= n - m)\\n        r = m;\\n      else\\n        l = m + 1;\\n    }\\n\\n    return n - l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031748,
                "title": "my-o-n-time-and-o-1-space-complexity-4-line-solution-c",
                "content": "# Intuition\\nIterate from the end. Check if $c[i]>=no\\\\_of\\\\_papers_before$ (i.e check if the no. of papers with c[i] or more ciatations is h or not if yes then h index becomes h, then continue). \\n\\n# Complexity\\n- Time complexity:\\n$O(n)$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int hIndex(vector<int>& c) \\n    {\\n        int ans=0;\\n        for(int i=c.size()-1;i>=0;i--)\\n        {\\n            int h=c.size()-i;\\n\\n            if(c[i]>=h)\\n            ans=h;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    int hIndex(vector<int>& c) \\n    {\\n        int ans=0;\\n        for(int i=c.size()-1;i>=0;i--)\\n        {\\n            int h=c.size()-i;\\n\\n            if(c[i]>=h)\\n            ans=h;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026750,
                "title": "beats-most-of-the-solutions-binary-search-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        long long end = citations.size()-1;\\n        long long start =0;\\n        long long mid =(end + start)/2;\\n        int num = 0;\\n        while(start <= end){\\n            if(citations[mid] < citations.size()-mid)\\n            {\\n                start = mid +1;\\n            }\\n            else if(citations[mid] > citations.size()-mid){\\n                end = mid -1;\\n            }\\n            else{\\n                if(citations[mid]>num){\\n                    num = citations[mid];\\n                }\\n                start = mid +1;\\n            }\\n            mid = (end + start)/2;\\n        }\\n\\n        return num > (citations.size()-end-1)?num:(citations.size()-end-1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        long long end = citations.size()-1;\\n        long long start =0;\\n        long long mid =(end + start)/2;\\n        int num = 0;\\n        while(start <= end){\\n            if(citations[mid] < citations.size()-mid)\\n            {\\n                start = mid +1;\\n            }\\n            else if(citations[mid] > citations.size()-mid){\\n                end = mid -1;\\n            }\\n            else{\\n                if(citations[mid]>num){\\n                    num = citations[mid];\\n                }\\n                start = mid +1;\\n            }\\n            mid = (end + start)/2;\\n        }\\n\\n        return num > (citations.size()-end-1)?num:(citations.size()-end-1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4022438,
                "title": "best-solution-using-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHere\\'s how the algorithm works:\\n\\nInitialize left to 0 and right to the last index of the array.\\nRun a binary search to find the h-index.\\nIn each iteration, calculate mid.\\nCheck if citations[mid] is greater than or equal to n - mid. If it is, it means there are at least n - mid papers with at least n - mid citations.\\nIf the condition is met, move right to mid - 1 to search for a smaller h-index.\\nIf the condition is not met, move left to mid + 1 to search for a larger h-index.\\nRepeat the binary search until left is greater than right.\\nThe h-index is equal to n - left after the binary search.\\n# Complexity\\n- Time complexity:     logarithmic\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:   O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int hIndex(int[] citations) {\\n        int left = 0;\\n        int right = citations.length - 1;\\n        int n = citations.length;\\n        \\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] >= n - mid) {\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n        \\n        return n - left;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\npublic class Solution {\\n    public int hIndex(int[] citations) {\\n        int left = 0;\\n        int right = citations.length - 1;\\n        int n = citations.length;\\n        \\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] >= n - mid) {\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n        \\n        return n - left;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017844,
                "title": "binary-search-c-o-n-log-n",
                "content": "# Intuition\\nBinary search on the possible value of $h$ indices. If $h$ is a possible answer then so is $h-1$. So it forms a monotone space. We can take our low as $low=0$ and $max=n$ and binary search on the possible value. If we get a possible value, move forward. \\n\\n\\n# Complexity\\n- Time complexity:\\n$O(n*log(n))$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    //check if h index of x is possible or not\\n    //i.e check if there exist atleast x paper with atleast x ciatations\\n    bool check(vector<int>&a, int x)\\n    {\\n        int count=0;\\n        auto it=lower_bound(a.begin(),a.end(),x);\\n        count=a.size()-(it-a.begin());//number of papers with atleast x ciatations\\n\\n        return count>=x;//check if the no. of papers with atleast x ciatations is greater than x or not\\n    }\\n    int hIndex(vector<int>& c) \\n    {\\n        int mi=INT_MAX,mx=INT_MIN;\\n\\n        for(int i=0;i<c.size();i++)\\n        {\\n            mi=min(c[i],mi);\\n            mx=max(c[i],mx);\\n        }\\n\\n        //possible value of h index is a monotone space, here our ans will be max h index, if h is possible so id h-1\\n        int l=0,h=c.size(),mid,ans=0;\\n\\n        while(l<=h)\\n        {\\n            mid=(l+h)/2;\\n\\n            if(check(c,mid))\\n            {\\n                ans=mid;\\n                l=mid+1;\\n            }\\n            else \\n            {\\n                h=mid-1;\\n            }\\n        }    \\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    //check if h index of x is possible or not\\n    //i.e check if there exist atleast x paper with atleast x ciatations\\n    bool check(vector<int>&a, int x)\\n    {\\n        int count=0;\\n        auto it=lower_bound(a.begin(),a.end(),x);\\n        count=a.size()-(it-a.begin());//number of papers with atleast x ciatations\\n\\n        return count>=x;//check if the no. of papers with atleast x ciatations is greater than x or not\\n    }\\n    int hIndex(vector<int>& c) \\n    {\\n        int mi=INT_MAX,mx=INT_MIN;\\n\\n        for(int i=0;i<c.size();i++)\\n        {\\n            mi=min(c[i],mi);\\n            mx=max(c[i],mx);\\n        }\\n\\n        //possible value of h index is a monotone space, here our ans will be max h index, if h is possible so id h-1\\n        int l=0,h=c.size(),mid,ans=0;\\n\\n        while(l<=h)\\n        {\\n            mid=(l+h)/2;\\n\\n            if(check(c,mid))\\n            {\\n                ans=mid;\\n                l=mid+1;\\n            }\\n            else \\n            {\\n                h=mid-1;\\n            }\\n        }    \\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011441,
                "title": "java-beats-100-binary-search",
                "content": "# Intuition\\nFrom the definition of H-index, it is clear that we need to find the index such that it\\'s value is greater than or equal to it\\'s position in the array. As the array is sorted in ascending order, we will use binary search and compare the value at the index with the length of the remaining part of the array.\\n\\n# Complexity\\n- Time complexity:\\n$$O(log(n))$$ \\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        long l=0, r=citations.length-1, len=citations.length, ans=0;\\n        while(l<=r){\\n            long mid = (l+r)/2;\\n            if(len-mid <= citations[(int)mid]){\\n                ans = (int)(len-mid);\\n                r = mid-1;\\n            }else{\\n                l = mid+1;\\n            }\\n        }\\n        return (int)ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        long l=0, r=citations.length-1, len=citations.length, ans=0;\\n        while(l<=r){\\n            long mid = (l+r)/2;\\n            if(len-mid <= citations[(int)mid]){\\n                ans = (int)(len-mid);\\n                r = mid-1;\\n            }else{\\n                l = mid+1;\\n            }\\n        }\\n        return (int)ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002315,
                "title": "without-binary-search",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        for (int i=0; i < citations.length; i++){\\n            if(n-i <= citations[i]){\\n                return n-i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int n = citations.length;\\n        for (int i=0; i < citations.length; i++){\\n            if(n-i <= citations[i]){\\n                return n-i;\\n            }\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984550,
                "title": "time-100-space-98-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> Binary Search\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. --> Binary Search\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ --> No clue\\n\\n# Code\\n```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int left = 0; int right = citations.length - 1;\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] < citations.length - mid) {\\n                left = mid + 1;\\n            } else if (citations[mid] > citations.length - mid) { // Corrected condition\\n                right = mid - 1;\\n            } else {\\n                return citations[mid];\\n            }\\n        }\\n        return citations.length - left;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int hIndex(int[] citations) {\\n        int left = 0; int right = citations.length - 1;\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] < citations.length - mid) {\\n                left = mid + 1;\\n            } else if (citations[mid] > citations.length - mid) { // Corrected condition\\n                right = mid - 1;\\n            } else {\\n                return citations[mid];\\n            }\\n        }\\n        return citations.length - left;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981903,
                "title": "easy-to-code-c-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUtilize binary search to find the smallest h that satisfies the h-index condition in a sorted citations list.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nImplement a binary search algorithm to locate the minimum h satisfying the h-index criteria.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(log n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int left = 0;\\n        int right = n - 1;\\n\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] >= n - mid) {\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n\\n        return n - left;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& citations) {\\n        int n = citations.size();\\n        int left = 0;\\n        int right = n - 1;\\n\\n        while (left <= right) {\\n            int mid = left + (right - left) / 2;\\n            if (citations[mid] >= n - mid) {\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n\\n        return n - left;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972487,
                "title": "h-index-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int HIndex(int[] citations) {\\n        int left = 0;\\n        int right = citations.Length - 1;\\n\\n        while(left <= right){\\n            int mid = left + (right - left) / 2;\\n            if(citations[mid] >= (citations.Length - mid)){\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n\\n        return  citations.Length - left;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int HIndex(int[] citations) {\\n        int left = 0;\\n        int right = citations.Length - 1;\\n\\n        while(left <= right){\\n            int mid = left + (right - left) / 2;\\n            if(citations[mid] >= (citations.Length - mid)){\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        }\\n\\n        return  citations.Length - left;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3968346,
                "title": "simple-solution-using-binary-search",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    boolean count(int[] arr,int i){\\n\\n        int c=0;\\n        for(int x:arr){\\n            if(x>=i){\\n                c++;\\n            }\\n        }\\n\\n        if(c>=i){\\n            return true;\\n        }\\n\\n        return false;\\n\\n    }\\n\\n    public int hIndex(int[] arr) {\\n        \\n        if(arr.length==1){\\n\\n            return arr[0]>0?1:0;\\n\\n        }\\n\\n        int l=0;\\n        int h=arr[arr.length-1];\\n        int maxx=0;\\n\\n        while(l<=h){\\n\\n            int m=l+(h-l)/2;\\n\\n            if(count(arr,m)){\\n                maxx=Math.max(maxx,m);\\n                l=m+1;\\n            }\\n            else{\\n                h=m-1;\\n            }\\n\\n        }\\n\\n        return maxx;\\n\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n\\n    boolean count(int[] arr,int i){\\n\\n        int c=0;\\n        for(int x:arr){\\n            if(x>=i){\\n                c++;\\n            }\\n        }\\n\\n        if(c>=i){\\n            return true;\\n        }\\n\\n        return false;\\n\\n    }\\n\\n    public int hIndex(int[] arr) {\\n        \\n        if(arr.length==1){\\n\\n            return arr[0]>0?1:0;\\n\\n        }\\n\\n        int l=0;\\n        int h=arr[arr.length-1];\\n        int maxx=0;\\n\\n        while(l<=h){\\n\\n            int m=l+(h-l)/2;\\n\\n            if(count(arr,m)){\\n                maxx=Math.max(maxx,m);\\n                l=m+1;\\n            }\\n            else{\\n                h=m-1;\\n            }\\n\\n        }\\n\\n        return maxx;\\n\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957215,
                "title": "90-faster-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        int low =0,high=n-1;\\n        int ans = 0;\\n        while(low<=high){\\n            int mid  = low + (high-low)/2;\\n            if(c[mid] >= n-mid){\\n                ans = n-mid;\\n                high = mid - 1;\\n            }else{\\n                low  = mid + 1;\\n            }\\n        }\\n        \\n        return ans;\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int hIndex(vector<int>& c) {\\n        int n = c.size();\\n        if(!n) return 0;\\n        int low =0,high=n-1;\\n        int ans = 0;\\n        while(low<=high){\\n            int mid  = low + (high-low)/2;\\n            if(c[mid] >= n-mid){\\n                ans = n-mid;\\n                high = mid - 1;\\n            }else{\\n                low  = mid + 1;\\n            }\\n        }\\n        \\n        return ans;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3956684,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} citations\\n * @return {number}\\n */\\nvar hIndex = function(citations) {\\n    let hIndex = 0;\\n    let ind = citations.length -1;\\n    for (let i = 1; i <= citations.length; i++) {\\n        if (citations[ind] >= i) {\\n        hIndex = i;\\n        } else {\\n            break;\\n        }\\n        ind--;\\n    }\\n    return hIndex;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} citations\\n * @return {number}\\n */\\nvar hIndex = function(citations) {\\n    let hIndex = 0;\\n    let ind = citations.length -1;\\n    for (let i = 1; i <= citations.length; i++) {\\n        if (citations[ind] >= i) {\\n        hIndex = i;\\n        } else {\\n            break;\\n        }\\n        ind--;\\n    }\\n    return hIndex;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3954497,
                "title": "best-java-solution-binary-search-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    // coppied\\n    public int hIndex(int[] arr) {\\n        int n = arr.length;\\n\\n    \\n        int i=0;\\n        int j = n-1;\\n\\n        int ans = 0;\\n        while(i<=j){\\n            int mid = i+(j-i)/2;\\n\\n            if(n-mid<=arr[mid]){\\n                ans = n-mid;\\n                j=mid-1; \\n            }else i=mid+1;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    // coppied\\n    public int hIndex(int[] arr) {\\n        int n = arr.length;\\n\\n    \\n        int i=0;\\n        int j = n-1;\\n\\n        int ans = 0;\\n        while(i<=j){\\n            int mid = i+(j-i)/2;\\n\\n            if(n-mid<=arr[mid]){\\n                ans = n-mid;\\n                j=mid-1; \\n            }else i=mid+1;\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3951339,
                "title": "code-undertsand-line-by-line-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nmain oal of question is that it is asking to apply binary search on answer\\n//start from 1 to max vlue of array to apply binary search on this\\n//then by binary search find out mid and ye jo mid hoga na to compare kya ye mid jo hai atleast mid no of paper hai array me jinka citations mid times hai\\n//.e main goal is to find max value m such that atleast m no of paper with atleast n ctatons\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- time complexcity is although twice of binary search i.e o(logn*logmax(array)) as logn time lga hame frst occurence khone me and log max(array) as ham 1 to max element k bich dekh rhe the kon sa aisa no hai jispe ye condition meet hoga h index ka as yhi hme khojna tha\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n/*If you have a list of citations [0, 1, 3, 5, 6], where each number represents the number of citations for a specific publication, you would calculate the h-index as follows:\\n\\nSort the list in descending order: [6, 5, 3, 1, 0]\\nFind the highest number \\'h\\' such that there are at least \\'h\\' elements in the list that have a value greater than or equal to \\'h\\'.\\nIn this case, there are three elements (6, 5, and 3) that are greater than or equal to 3. So, the h-index is 3, indicating that there are three publications that each have at least 3 citations.\\n\\nI apologize for any confusion earlier. Thank you for providing the example, and I hope this explanation clarifies the calculation of the h-index in this context.\\n\\n\\nThe algorithm focuses on finding the point in the sorted array where the citation value becomes greater than or equal to the number of papers with at least that many citations. It employs binary search to quickly narrow down the search space and efficiently find the h-index.\\n*/\\n\\n//READ IN ANOTHER EXPECT KI JITNA ARRAY KA SIZE HAI MEAN UTNA TO NO OF BOOK PUBLISHED HO CHUKA HAI\\n//LET OTH INDEX PE HAI TO OTH INDEX PE VALUE 0 HAI N [0,1,3,5,6] TO H INDEX VO HOTA HAI JO iTH CITATIONS K LIYE ATLEAST Ith ITNA PAPER PUBLISHH KR DENA CHAIYE TO 0TH CITATIONS K LIYE OTH PAPER TLEAST HONNA CHIYE TO JAHA MID HAI USSKO SIZE SEE MINUS KR DO TO VO DE DEGA KI KITNA BOOK US INDEX SE PUBLISH HO CHUKA HAI AGE USKO INCLUDE KRKE\\nint howsmall( vector<int>citations,int num)\\n{\\n    int lo=0;\\n    int hi=citations.size()-1;\\n    int ans=0;\\n    while(lo<=hi)\\n    {\\n      int mid=lo+(hi-lo)/2;\\n      if(citations[mid]>=num) //ham sabse lower bound khoj rhe hai isliye ans me store krek hm left ja rhe hai\\n      //agr citations==mid pe return kr jata to sbse frst jo just 3 hi hai ya 3 se jst bada hai let vo nhi mil pta  [7 7 7 7 7 7 7] isme hamko fst occurence hi dhndhna pdega na isly  ans=mid m store krke hi=mid-1 trf chl diye ki kya pata iske left me aur ho jo ki frst appearcnce ho is mid ka\\n      {\\n           ans=mid;\\n          hi=mid-1;//as hame upper bound hona hai na agr right me gya to sare bade hi milenge na isliye h=mid-1 kr diya\\n        \\n      }\\n      else\\n      {\\n          lo=mid+1;\\n      }\\n    }\\n    return ans;\\n}\\n    int hIndex(vector<int>& citations) {\\n      int lo=1;\\n      int hi=citations[citations.size()-1];//hmlog answer pe binary search lgainge\\n      int n=citations.size();\\n      int ans=0;\\n      while(lo<=hi)  \\n      {\\n          int mid=lo+(hi-lo)/2;\\n          int k=howsmall(citations,mid);\\n          if(n-k>=mid)\\n          {\\n              ans=mid;\\n              lo=mid+1;\\n          }\\n          else\\n          {\\n              hi=mid-1;\\n          }\\n          \\n      }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n/*If you have a list of citations [0, 1, 3, 5, 6], where each number represents the number of citations for a specific publication, you would calculate the h-index as follows:\\n\\nSort the list in descending order: [6, 5, 3, 1, 0]\\nFind the highest number \\'h\\' such that there are at least \\'h\\' elements in the list that have a value greater than or equal to \\'h\\'.\\nIn this case, there are three elements (6, 5, and 3) that are greater than or equal to 3. So, the h-index is 3, indicating that there are three publications that each have at least 3 citations.\\n\\nI apologize for any confusion earlier. Thank you for providing the example, and I hope this explanation clarifies the calculation of the h-index in this context.\\n\\n\\nThe algorithm focuses on finding the point in the sorted array where the citation value becomes greater than or equal to the number of papers with at least that many citations. It employs binary search to quickly narrow down the search space and efficiently find the h-index.\\n*/\\n\\n//READ IN ANOTHER EXPECT KI JITNA ARRAY KA SIZE HAI MEAN UTNA TO NO OF BOOK PUBLISHED HO CHUKA HAI\\n//LET OTH INDEX PE HAI TO OTH INDEX PE VALUE 0 HAI N [0,1,3,5,6] TO H INDEX VO HOTA HAI JO iTH CITATIONS K LIYE ATLEAST Ith ITNA PAPER PUBLISHH KR DENA CHAIYE TO 0TH CITATIONS K LIYE OTH PAPER TLEAST HONNA CHIYE TO JAHA MID HAI USSKO SIZE SEE MINUS KR DO TO VO DE DEGA KI KITNA BOOK US INDEX SE PUBLISH HO CHUKA HAI AGE USKO INCLUDE KRKE\\nint howsmall( vector<int>citations,int num)\\n{\\n    int lo=0;\\n    int hi=citations.size()-1;\\n    int ans=0;\\n    while(lo<=hi)\\n    {\\n      int mid=lo+(hi-lo)/2;\\n      if(citations[mid]>=num) //ham sabse lower bound khoj rhe hai isliye ans me store krek hm left ja rhe hai\\n      //agr citations==mid pe return kr jata to sbse frst jo just 3 hi hai ya 3 se jst bada hai let vo nhi mil pta  [7 7 7 7 7 7 7] isme hamko fst occurence hi dhndhna pdega na isly  ans=mid m store krke hi=mid-1 trf chl diye ki kya pata iske left me aur ho jo ki frst appearcnce ho is mid ka\\n      {\\n           ans=mid;\\n          hi=mid-1;//as hame upper bound hona hai na agr right me gya to sare bade hi milenge na isliye h=mid-1 kr diya\\n        \\n      }\\n      else\\n      {\\n          lo=mid+1;\\n      }\\n    }\\n    return ans;\\n}\\n    int hIndex(vector<int>& citations) {\\n      int lo=1;\\n      int hi=citations[citations.size()-1];//hmlog answer pe binary search lgainge\\n      int n=citations.size();\\n      int ans=0;\\n      while(lo<=hi)  \\n      {\\n          int mid=lo+(hi-lo)/2;\\n          int k=howsmall(citations,mid);\\n          if(n-k>=mid)\\n          {\\n              ans=mid;\\n              lo=mid+1;\\n          }\\n          else\\n          {\\n              hi=mid-1;\\n          }\\n          \\n      }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564845,
                "content": [
                    {
                        "username": "qjhdtc001",
                        "content": "apeuiofadfhfaoefwapfiejfoijfopdjfjopj"
                    },
                    {
                        "username": "teqarine",
                        "content": "yeah exactly! you got it right!\\n"
                    },
                    {
                        "username": "yusufm09",
                        "content": "[@jerryy147](/jerryy147) yes"
                    },
                    {
                        "username": "jerryy147",
                        "content": "best comment i've seen on leetcode"
                    },
                    {
                        "username": "gary16",
                        "content": "*\"A scientist has index h if h of his/her N papers **have at least h citations** each, and ... ...\"*\\n\\ntest case: `citation = [1,2,3,5,8,9]` \\nresult: `h= 3`\\n\\nso by answer 3 of 6 papers have at least 3 citaitons each, but clearly by definition 4 of 6 papers have at least 3 citations each. \\n"
                    },
                    {
                        "username": "SeineAle",
                        "content": "Bro, H papers must have atleast H citations. So if U chose H to be 4 than 4 papers must have more than 4 citations.\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "This question is very logical and good application of __discrete binary search__. Why is this downvoted by so many??"
                    },
                    {
                        "username": "tanish34",
                        "content": "[@interpreter](/interpreter)  ig the reason its expecting 1 is because there is 1 research paper with atleast 1 citation(which can be 1 or more than 1)"
                    },
                    {
                        "username": "interpreter",
                        "content": "Because test case is wrong when people are submitting correct code its not expecting.\\n\\nInput as [100] should expect answer 0 because it doesn\\'t have 100 experiments with at least citation value 100. But it\\'s expecting 1.\\n\\nBecause of such test cases only 827 likes and 1.2k dislikes. I have already given feedback with details waiting for correction.\\n\\nThanks\\n"
                    },
                    {
                        "username": "mjmanoj",
                        "content": "exactly"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Too Confusing Got to Do it again.\\nConsumed Whole Day."
                    },
                    {
                        "username": "IRafael",
                        "content": "The funny thing is, if the first part is solved optimally, then to solve this one, you just need to remove the sorting of the initial array)"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "hanzichi",
                        "content": "as title, nothing else to say..."
                    }
                ]
            },
            {
                "id": 1569763,
                "content": [
                    {
                        "username": "qjhdtc001",
                        "content": "apeuiofadfhfaoefwapfiejfoijfopdjfjopj"
                    },
                    {
                        "username": "teqarine",
                        "content": "yeah exactly! you got it right!\\n"
                    },
                    {
                        "username": "yusufm09",
                        "content": "[@jerryy147](/jerryy147) yes"
                    },
                    {
                        "username": "jerryy147",
                        "content": "best comment i've seen on leetcode"
                    },
                    {
                        "username": "gary16",
                        "content": "*\"A scientist has index h if h of his/her N papers **have at least h citations** each, and ... ...\"*\\n\\ntest case: `citation = [1,2,3,5,8,9]` \\nresult: `h= 3`\\n\\nso by answer 3 of 6 papers have at least 3 citaitons each, but clearly by definition 4 of 6 papers have at least 3 citations each. \\n"
                    },
                    {
                        "username": "SeineAle",
                        "content": "Bro, H papers must have atleast H citations. So if U chose H to be 4 than 4 papers must have more than 4 citations.\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "This question is very logical and good application of __discrete binary search__. Why is this downvoted by so many??"
                    },
                    {
                        "username": "tanish34",
                        "content": "[@interpreter](/interpreter)  ig the reason its expecting 1 is because there is 1 research paper with atleast 1 citation(which can be 1 or more than 1)"
                    },
                    {
                        "username": "interpreter",
                        "content": "Because test case is wrong when people are submitting correct code its not expecting.\\n\\nInput as [100] should expect answer 0 because it doesn\\'t have 100 experiments with at least citation value 100. But it\\'s expecting 1.\\n\\nBecause of such test cases only 827 likes and 1.2k dislikes. I have already given feedback with details waiting for correction.\\n\\nThanks\\n"
                    },
                    {
                        "username": "mjmanoj",
                        "content": "exactly"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Too Confusing Got to Do it again.\\nConsumed Whole Day."
                    },
                    {
                        "username": "IRafael",
                        "content": "The funny thing is, if the first part is solved optimally, then to solve this one, you just need to remove the sorting of the initial array)"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "hanzichi",
                        "content": "as title, nothing else to say..."
                    }
                ]
            },
            {
                "id": 1573338,
                "content": [
                    {
                        "username": "qjhdtc001",
                        "content": "apeuiofadfhfaoefwapfiejfoijfopdjfjopj"
                    },
                    {
                        "username": "teqarine",
                        "content": "yeah exactly! you got it right!\\n"
                    },
                    {
                        "username": "yusufm09",
                        "content": "[@jerryy147](/jerryy147) yes"
                    },
                    {
                        "username": "jerryy147",
                        "content": "best comment i've seen on leetcode"
                    },
                    {
                        "username": "gary16",
                        "content": "*\"A scientist has index h if h of his/her N papers **have at least h citations** each, and ... ...\"*\\n\\ntest case: `citation = [1,2,3,5,8,9]` \\nresult: `h= 3`\\n\\nso by answer 3 of 6 papers have at least 3 citaitons each, but clearly by definition 4 of 6 papers have at least 3 citations each. \\n"
                    },
                    {
                        "username": "SeineAle",
                        "content": "Bro, H papers must have atleast H citations. So if U chose H to be 4 than 4 papers must have more than 4 citations.\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "This question is very logical and good application of __discrete binary search__. Why is this downvoted by so many??"
                    },
                    {
                        "username": "tanish34",
                        "content": "[@interpreter](/interpreter)  ig the reason its expecting 1 is because there is 1 research paper with atleast 1 citation(which can be 1 or more than 1)"
                    },
                    {
                        "username": "interpreter",
                        "content": "Because test case is wrong when people are submitting correct code its not expecting.\\n\\nInput as [100] should expect answer 0 because it doesn\\'t have 100 experiments with at least citation value 100. But it\\'s expecting 1.\\n\\nBecause of such test cases only 827 likes and 1.2k dislikes. I have already given feedback with details waiting for correction.\\n\\nThanks\\n"
                    },
                    {
                        "username": "mjmanoj",
                        "content": "exactly"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Too Confusing Got to Do it again.\\nConsumed Whole Day."
                    },
                    {
                        "username": "IRafael",
                        "content": "The funny thing is, if the first part is solved optimally, then to solve this one, you just need to remove the sorting of the initial array)"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "hanzichi",
                        "content": "as title, nothing else to say..."
                    }
                ]
            },
            {
                "id": 1819578,
                "content": [
                    {
                        "username": "qjhdtc001",
                        "content": "apeuiofadfhfaoefwapfiejfoijfopdjfjopj"
                    },
                    {
                        "username": "teqarine",
                        "content": "yeah exactly! you got it right!\\n"
                    },
                    {
                        "username": "yusufm09",
                        "content": "[@jerryy147](/jerryy147) yes"
                    },
                    {
                        "username": "jerryy147",
                        "content": "best comment i've seen on leetcode"
                    },
                    {
                        "username": "gary16",
                        "content": "*\"A scientist has index h if h of his/her N papers **have at least h citations** each, and ... ...\"*\\n\\ntest case: `citation = [1,2,3,5,8,9]` \\nresult: `h= 3`\\n\\nso by answer 3 of 6 papers have at least 3 citaitons each, but clearly by definition 4 of 6 papers have at least 3 citations each. \\n"
                    },
                    {
                        "username": "SeineAle",
                        "content": "Bro, H papers must have atleast H citations. So if U chose H to be 4 than 4 papers must have more than 4 citations.\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "This question is very logical and good application of __discrete binary search__. Why is this downvoted by so many??"
                    },
                    {
                        "username": "tanish34",
                        "content": "[@interpreter](/interpreter)  ig the reason its expecting 1 is because there is 1 research paper with atleast 1 citation(which can be 1 or more than 1)"
                    },
                    {
                        "username": "interpreter",
                        "content": "Because test case is wrong when people are submitting correct code its not expecting.\\n\\nInput as [100] should expect answer 0 because it doesn\\'t have 100 experiments with at least citation value 100. But it\\'s expecting 1.\\n\\nBecause of such test cases only 827 likes and 1.2k dislikes. I have already given feedback with details waiting for correction.\\n\\nThanks\\n"
                    },
                    {
                        "username": "mjmanoj",
                        "content": "exactly"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Too Confusing Got to Do it again.\\nConsumed Whole Day."
                    },
                    {
                        "username": "IRafael",
                        "content": "The funny thing is, if the first part is solved optimally, then to solve this one, you just need to remove the sorting of the initial array)"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "hanzichi",
                        "content": "as title, nothing else to say..."
                    }
                ]
            },
            {
                "id": 1910918,
                "content": [
                    {
                        "username": "qjhdtc001",
                        "content": "apeuiofadfhfaoefwapfiejfoijfopdjfjopj"
                    },
                    {
                        "username": "teqarine",
                        "content": "yeah exactly! you got it right!\\n"
                    },
                    {
                        "username": "yusufm09",
                        "content": "[@jerryy147](/jerryy147) yes"
                    },
                    {
                        "username": "jerryy147",
                        "content": "best comment i've seen on leetcode"
                    },
                    {
                        "username": "gary16",
                        "content": "*\"A scientist has index h if h of his/her N papers **have at least h citations** each, and ... ...\"*\\n\\ntest case: `citation = [1,2,3,5,8,9]` \\nresult: `h= 3`\\n\\nso by answer 3 of 6 papers have at least 3 citaitons each, but clearly by definition 4 of 6 papers have at least 3 citations each. \\n"
                    },
                    {
                        "username": "SeineAle",
                        "content": "Bro, H papers must have atleast H citations. So if U chose H to be 4 than 4 papers must have more than 4 citations.\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "This question is very logical and good application of __discrete binary search__. Why is this downvoted by so many??"
                    },
                    {
                        "username": "tanish34",
                        "content": "[@interpreter](/interpreter)  ig the reason its expecting 1 is because there is 1 research paper with atleast 1 citation(which can be 1 or more than 1)"
                    },
                    {
                        "username": "interpreter",
                        "content": "Because test case is wrong when people are submitting correct code its not expecting.\\n\\nInput as [100] should expect answer 0 because it doesn\\'t have 100 experiments with at least citation value 100. But it\\'s expecting 1.\\n\\nBecause of such test cases only 827 likes and 1.2k dislikes. I have already given feedback with details waiting for correction.\\n\\nThanks\\n"
                    },
                    {
                        "username": "mjmanoj",
                        "content": "exactly"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Too Confusing Got to Do it again.\\nConsumed Whole Day."
                    },
                    {
                        "username": "IRafael",
                        "content": "The funny thing is, if the first part is solved optimally, then to solve this one, you just need to remove the sorting of the initial array)"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "hanzichi",
                        "content": "as title, nothing else to say..."
                    }
                ]
            },
            {
                "id": 1757558,
                "content": [
                    {
                        "username": "qjhdtc001",
                        "content": "apeuiofadfhfaoefwapfiejfoijfopdjfjopj"
                    },
                    {
                        "username": "teqarine",
                        "content": "yeah exactly! you got it right!\\n"
                    },
                    {
                        "username": "yusufm09",
                        "content": "[@jerryy147](/jerryy147) yes"
                    },
                    {
                        "username": "jerryy147",
                        "content": "best comment i've seen on leetcode"
                    },
                    {
                        "username": "gary16",
                        "content": "*\"A scientist has index h if h of his/her N papers **have at least h citations** each, and ... ...\"*\\n\\ntest case: `citation = [1,2,3,5,8,9]` \\nresult: `h= 3`\\n\\nso by answer 3 of 6 papers have at least 3 citaitons each, but clearly by definition 4 of 6 papers have at least 3 citations each. \\n"
                    },
                    {
                        "username": "SeineAle",
                        "content": "Bro, H papers must have atleast H citations. So if U chose H to be 4 than 4 papers must have more than 4 citations.\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "This question is very logical and good application of __discrete binary search__. Why is this downvoted by so many??"
                    },
                    {
                        "username": "tanish34",
                        "content": "[@interpreter](/interpreter)  ig the reason its expecting 1 is because there is 1 research paper with atleast 1 citation(which can be 1 or more than 1)"
                    },
                    {
                        "username": "interpreter",
                        "content": "Because test case is wrong when people are submitting correct code its not expecting.\\n\\nInput as [100] should expect answer 0 because it doesn\\'t have 100 experiments with at least citation value 100. But it\\'s expecting 1.\\n\\nBecause of such test cases only 827 likes and 1.2k dislikes. I have already given feedback with details waiting for correction.\\n\\nThanks\\n"
                    },
                    {
                        "username": "mjmanoj",
                        "content": "exactly"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Too Confusing Got to Do it again.\\nConsumed Whole Day."
                    },
                    {
                        "username": "IRafael",
                        "content": "The funny thing is, if the first part is solved optimally, then to solve this one, you just need to remove the sorting of the initial array)"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "hanzichi",
                        "content": "as title, nothing else to say..."
                    }
                ]
            },
            {
                "id": 1571515,
                "content": [
                    {
                        "username": "qjhdtc001",
                        "content": "apeuiofadfhfaoefwapfiejfoijfopdjfjopj"
                    },
                    {
                        "username": "teqarine",
                        "content": "yeah exactly! you got it right!\\n"
                    },
                    {
                        "username": "yusufm09",
                        "content": "[@jerryy147](/jerryy147) yes"
                    },
                    {
                        "username": "jerryy147",
                        "content": "best comment i've seen on leetcode"
                    },
                    {
                        "username": "gary16",
                        "content": "*\"A scientist has index h if h of his/her N papers **have at least h citations** each, and ... ...\"*\\n\\ntest case: `citation = [1,2,3,5,8,9]` \\nresult: `h= 3`\\n\\nso by answer 3 of 6 papers have at least 3 citaitons each, but clearly by definition 4 of 6 papers have at least 3 citations each. \\n"
                    },
                    {
                        "username": "SeineAle",
                        "content": "Bro, H papers must have atleast H citations. So if U chose H to be 4 than 4 papers must have more than 4 citations.\\n"
                    },
                    {
                        "username": "hardfault",
                        "content": "This question is very logical and good application of __discrete binary search__. Why is this downvoted by so many??"
                    },
                    {
                        "username": "tanish34",
                        "content": "[@interpreter](/interpreter)  ig the reason its expecting 1 is because there is 1 research paper with atleast 1 citation(which can be 1 or more than 1)"
                    },
                    {
                        "username": "interpreter",
                        "content": "Because test case is wrong when people are submitting correct code its not expecting.\\n\\nInput as [100] should expect answer 0 because it doesn\\'t have 100 experiments with at least citation value 100. But it\\'s expecting 1.\\n\\nBecause of such test cases only 827 likes and 1.2k dislikes. I have already given feedback with details waiting for correction.\\n\\nThanks\\n"
                    },
                    {
                        "username": "mjmanoj",
                        "content": "exactly"
                    },
                    {
                        "username": "AKA_RAN",
                        "content": "Too Confusing Got to Do it again.\\nConsumed Whole Day."
                    },
                    {
                        "username": "IRafael",
                        "content": "The funny thing is, if the first part is solved optimally, then to solve this one, you just need to remove the sorting of the initial array)"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/-Qpk2XJ5XJQ"
                    },
                    {
                        "username": "hanzichi",
                        "content": "as title, nothing else to say..."
                    }
                ]
            }
        ]
    }
]