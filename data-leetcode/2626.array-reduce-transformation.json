[
    {
        "title": "Array Reduce Transformation",
        "question_content": "Given an integer array&nbsp;nums, a reducer function&nbsp;fn, and an initial value&nbsp;init, return a&nbsp;reduced&nbsp;array.\nA&nbsp;reduced&nbsp;array is created by applying the following operation:&nbsp;val = fn(init, nums[0]), val&nbsp;= fn(val, nums[1]),&nbsp;val&nbsp;= fn(val, nums[2]),&nbsp;...&nbsp;until every element in the array has been processed. The final value of&nbsp;val&nbsp;is returned.\nIf the length of the array is 0, it should return&nbsp;init.\nPlease solve it without using the built-in Array.reduce method.\n&nbsp;\nExample 1:\n\nInput: \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr; }\ninit = 0\nOutput: 10\nExplanation:\ninitially, the value is init=0.\n(0) + nums[0] = 1\n(1) + nums[1] = 3\n(3) + nums[2] = 6\n(6) + nums[3] = 10\nThe final answer is 10.\n\nExample 2:\n\nInput: \nnums = [1,2,3,4]\nfn = function sum(accum, curr) { return accum + curr * curr; }\ninit = 100\nOutput: 130\nExplanation:\ninitially, the value is init=100.\n(100) + nums[0]^2 = 101\n(101) + nums[1]^2 = 105\n(105) + nums[2]^2 = 114\n(114) + nums[3]^2 = 130\nThe final answer is 130.\n\nExample 3:\n\nInput: \nnums = []\nfn = function sum(accum, curr) { return 0; }\ninit = 25\nOutput: 25\nExplanation: For empty arrays, the answer is always init.\n\n&nbsp;\nConstraints:\n\n\t0 <= nums.length <= 1000\n\t0 <= nums[i] <= 1000\n\t0 <= init <= 1000",
        "solutions": [
            {
                "id": 3506475,
                "title": "5-diff-method-solution-in-typescript-and-js-learn-js-with-question-day-6",
                "content": "# Intuition\\nThe` reduce function `is a higher-order function that takes an array, a reducer function, and an initial value, and returns a single accumulated value by applying the reducer function to each element of the array.\\n\\n# Approach\\nTo implement the `reduce function`, we can iterate over each element of the array, apply the reducer function to the current value and the current element, and update the accumulated value. We can use a for loop, forEach method, or a for...of loop to perform the iteration.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the reduce function implementation is O(n), where n is the length of the array, because the function iterates over each element of the array exactly once. \\n\\n- Space complexity:\\nO(1), as it only uses a single variable to store the accumulated value.\\n\\n# What We Learn \\nBy implementing the reduce function, we learn how to use higher-order functions to transform and reduce data in an array. We also learn how to use different approaches, such as for loops, forEach method, or for...of loops, to iterate over arrays.\\n\\n# Additional information:\\nThe `fn parameter `is a function that takes two arguments: the accumulated value and the current element of the` array.` The purpose of the fn function is to perform a specific operation on these two values and return the result.\\n\\n# Code In JavaScript\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let val = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n};\\n```\\n\\n# Code In TypeScript \\n```\\ntype Reducer<T, U> = (acc: T, curr: U) => T;\\n\\nfunction reduce<T, U>(nums: U[], fn: Reducer<T, U>, init: T): T {\\n  let val: T = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n}\\n\\n```\\n# Using forEach loop\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let val = init;\\n  nums.forEach(num => {\\n    val = fn(val, num);\\n  });\\n  return val;\\n};\\n\\n```\\n\\n# Using reduceRight\\n\\n```\\nfunction reduceArray(nums, fn, init) {\\n  return nums.reverse().reduceRight((val, num) => fn(val, num), init);\\n}\\n\\n```\\n\\n# Using recursion\\n```\\nfunction reduceArray(nums, fn, init) {\\n  if (nums.length === 0) {\\n    return init;\\n  } else {\\n    const head = nums[0];\\n    const tail = nums.slice(1);\\n    const val = fn(init, head);\\n    return reduceArray4(tail, fn, val);\\n  }\\n}\\n\\n```\\n\\n# Using for...of loop\\n```\\nfunction reduceArray(nums, fn, init) {\\n  let val = init;\\n  for (const num of nums) {\\n    val = fn(val, num);\\n  }\\n  return val;\\n}\\n\\n```\\n\\n![upvote-1.png](https://assets.leetcode.com/users/images/85bf72b5-16de-4457-9093-91536e0d5586_1683678139.3167114.png)\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let val = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n};\\n```\n```\\ntype Reducer<T, U> = (acc: T, curr: U) => T;\\n\\nfunction reduce<T, U>(nums: U[], fn: Reducer<T, U>, init: T): T {\\n  let val: T = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n}\\n\\n```\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let val = init;\\n  nums.forEach(num => {\\n    val = fn(val, num);\\n  });\\n  return val;\\n};\\n\\n```\n```\\nfunction reduceArray(nums, fn, init) {\\n  return nums.reverse().reduceRight((val, num) => fn(val, num), init);\\n}\\n\\n```\n```\\nfunction reduceArray(nums, fn, init) {\\n  if (nums.length === 0) {\\n    return init;\\n  } else {\\n    const head = nums[0];\\n    const tail = nums.slice(1);\\n    const val = fn(init, head);\\n    return reduceArray4(tail, fn, val);\\n  }\\n}\\n\\n```\n```\\nfunction reduceArray(nums, fn, init) {\\n  let val = init;\\n  for (const num of nums) {\\n    val = fn(val, num);\\n  }\\n  return val;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506682,
                "title": "4-different-ways-to-solve-array-reduction-in-javascript-typescript-for-beginners",
                "content": "## Problem Summary: \\nWe are given a `nums` array and a `reducer function`. The question is to apply the `reducer function` to each element of `nums` array and return the final `reduced array`.\\n***\\n## Approaches: \\n1. **Using a loop and an accumulator variable:**\\n* This approach involves initializing an `accumulator` variable to the `initial` value, and then looping through each element in the array, applying the `reducer function` to the current `accumulator` value and the `current element`, and updating the accumulator with the result.\\n* The final value of the `accumulator` is returned as the output.\\n\\n**Javascript Solution:**\\n```\\nvar reduce = function(nums, fn, init) {\\n  let acc = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    acc = fn(acc, nums[i]);\\n  }\\n  return acc;\\n};\\n```\\n**Typescript  Solution:** \\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let acc = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    acc = fn(acc, nums[i]);\\n  }\\n  return acc;\\n};\\n```\\n**Time complexity: O(n)\\nSpace complexity: O(1)**\\n***\\n2. **Using Array.forEach():**\\n* This approach uses the `Array.forEach()` method to loop through each element in the array and apply the `reducer function` to the current `accumulator` value and the `current element`. \\n* The final value of the accumulator is returned as the output.\\n\\n**Javascript Solution:**\\n```\\nvar reduce = function(nums, fn, init) {\\n  let acc = init;\\n  nums.forEach((element) => {\\n    acc = fn(acc, element);\\n  });\\n  return acc;\\n};\\n```\\n**Typescript Solution:** \\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let acc = init;\\n  nums.forEach((element: number) => {\\n    acc = fn(acc, element);\\n  });\\n  return acc;\\n};\\n```\\n**Time complexity: O(n)\\nSpace complexity: O(1)**\\n***\\n3. **Using recursion:** \\n* This approach recursively applies the `reducer function` to the `current element` and the result of applying the `reducer function` to the remaining elements in the array.\\n* The initial value is used as the `accumulator` value for the first call to the recursive function.\\n```\\nvar reduce = function(nums, fn, init) {\\n  let acc = init;\\n  nums.forEach((element) => {\\n    acc = fn(acc, element);\\n  });\\n  return acc;\\n};\\n```\\n**Time complexity: O(n)\\nSpace complexity: O(n)**\\n***\\n4. **Using Array.reduce:** \\n* This approach uses the built-in` Array.reduce()` method to process each element of the array and update the `accumulator variable`.\\n```\\nvar reduce = function(nums, fn, init) {\\n  return nums.reduce((acc, element) => fn(acc, element), init);\\n};\\n```\\n**Time complexity: O(n)\\nSpace complexity: O(1)**\\n\\n***\\nYou can support this article by upvoitng \\u2B06\\u2B06!\\nFeel free to comment for any doubts or appreciation!!\\n***",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n  let acc = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    acc = fn(acc, nums[i]);\\n  }\\n  return acc;\\n};\\n```\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let acc = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    acc = fn(acc, nums[i]);\\n  }\\n  return acc;\\n};\\n```\n```\\nvar reduce = function(nums, fn, init) {\\n  let acc = init;\\n  nums.forEach((element) => {\\n    acc = fn(acc, element);\\n  });\\n  return acc;\\n};\\n```\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let acc = init;\\n  nums.forEach((element: number) => {\\n    acc = fn(acc, element);\\n  });\\n  return acc;\\n};\\n```\n```\\nvar reduce = function(nums, fn, init) {\\n  let acc = init;\\n  nums.forEach((element) => {\\n    acc = fn(acc, element);\\n  });\\n  return acc;\\n};\\n```\n```\\nvar reduce = function(nums, fn, init) {\\n  return nums.reduce((acc, element) => fn(acc, element), init);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3507209,
                "title": "2626-array-reduce-level-up-your-javascript-skills-with-these-intuitive-implementations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n>The `reduce` function takes an array of integers, a reducer function, and an initial value as input. It returns a single value that is the result of applying the reducer function to every element in the array. The reducer function takes two parameters - an accumulator and a current value - and returns a new accumulator value. The `reduce` function applies the reducer function to the initial value and the first element in the array to get a new accumulator value, and then applies the reducer function to the new accumulator value and the second element in the array, and so on, until every element in the array has been processed. The final accumulator value is returned as the result.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n>We start by checking if the input array is empty. If it is, we simply return the initial value.\\n\\n>If the input array is not empty, we initialize the accumulator to the initial value. We then loop through the array, applying the reducer function to the accumulator and the current element in each iteration. The result of each iteration becomes the new accumulator value for the next iteration.\\n\\n>After looping through all the elements in the array, we return the final accumulator value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n>The time complexity of the `reduce` function is O(n), where n is the length of the input array. This is because we need to loop through every element in the array and apply the reducer function to it.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n>The space complexity of the `reduce` function is O(1), because we only use a constant amount of additional memory to store the accumulator and the loop index variable. The space required by the input array and the reducer function is not counted as additional memory usage by the `reduce` function.\\n\\n# Code\\n``` JS []\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) {\\n        return init;\\n    }\\n    let val = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n};\\n```\\n```TS []\\nfunction reduce(nums: number[], fn: Function, init: number): number {\\n  if (nums.length === 0) {\\n    return init;\\n  }\\n  let val: number = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n}\\n\\n```\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n> There are multiple ways to implement the reduce function. Here are a few alternatives:\\n\\n\\n1. Using the `forEach` method:\\n```\\nfunction reduce(nums, fn, init) {\\n  let val = init;\\n  nums.forEach(num => val = fn(val, num));\\n  return val;\\n}\\n\\n```\\n2. Using the `reduceRight` method:\\n```\\nfunction reduce(nums, fn, init) {\\n  return nums.reduceRight(fn, init);\\n}\\n\\n```\\n3. Using a `for...of` loop:\\n```\\nfunction filter(arr, fn) {\\n  return Array.from(arr, (val, index) => fn(val, index) && val);\\n}\\n```\\n4. Using recursion:\\n```\\nfunction reduce(nums, fn, init) {\\n  if (nums.length === 0) {\\n    return init;\\n  } else if (nums.length === 1) {\\n    return fn(init, nums[0]);\\n  } else {\\n    const mid = Math.floor(nums.length / 2);\\n    const left = nums.slice(0, mid);\\n    const right = nums.slice(mid);\\n    return fn(reduce(left, fn, init), reduce(right, fn, init));\\n  }\\n}\\n\\n```\\n5. Using `Array.prototype.reduce.call`:\\n```\\nfunction reduce(nums, fn, init) {\\n  return Array.prototype.reduce.call(nums, fn, init);\\n}\\n```\\n\\n6. Using the `Array.from` method:\\n```\\nfunction reduce(nums, fn, init) {\\n  return Array.from(nums).reduce(fn, init);\\n}\\n\\n```\\n# Important topic to Learn\\n\\n| Sr No. | Topic |\\n|-----|-----|\\n1.|Array methods|\\n2.|Functional programming|\\n3.|Higher-order functions|\\n\\n\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "``` JS []\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) {\\n        return init;\\n    }\\n    let val = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n};\\n```\n```TS []\\nfunction reduce(nums: number[], fn: Function, init: number): number {\\n  if (nums.length === 0) {\\n    return init;\\n  }\\n  let val: number = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n}\\n\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```\\nfunction reduce(nums, fn, init) {\\n  let val = init;\\n  nums.forEach(num => val = fn(val, num));\\n  return val;\\n}\\n\\n```\n```\\nfunction reduce(nums, fn, init) {\\n  return nums.reduceRight(fn, init);\\n}\\n\\n```\n```\\nfunction filter(arr, fn) {\\n  return Array.from(arr, (val, index) => fn(val, index) && val);\\n}\\n```\n```\\nfunction reduce(nums, fn, init) {\\n  if (nums.length === 0) {\\n    return init;\\n  } else if (nums.length === 1) {\\n    return fn(init, nums[0]);\\n  } else {\\n    const mid = Math.floor(nums.length / 2);\\n    const left = nums.slice(0, mid);\\n    const right = nums.slice(mid);\\n    return fn(reduce(left, fn, init), reduce(right, fn, init));\\n  }\\n}\\n\\n```\n```\\nfunction reduce(nums, fn, init) {\\n  return Array.prototype.reduce.call(nums, fn, init);\\n}\\n```\n```\\nfunction reduce(nums, fn, init) {\\n  return Array.from(nums).reduce(fn, init);\\n}\\n\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506619,
                "title": "easy-javascript-solution-using-reduce-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n Since we have to reduce array to a single value , we will use reduce method of javascript.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n We will implement our own reduce method.\\n   1. Initialize val=init\\n ```\\n   for(var v of nums)\\n   {\\n       val=fn(val,v);\\n   }\\n```\\n  3. val is our result.\\n# Complexity\\n- Time complexity: O(N) \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val=init;\\n    for(var x of nums)\\n    {\\n        val=fn(val,x);\\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n   for(var v of nums)\\n   {\\n       val=fn(val,v);\\n   }\\n```\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val=init;\\n    for(var x of nums)\\n    {\\n        val=fn(val,x);\\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3408714,
                "title": "very-simple-and-self-explanatory-solution-using-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing for loop\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let answer = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        answer = fn(answer, nums[i])\\n    }\\n    return answer\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let answer = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        answer = fn(answer, nums[i])\\n    }\\n    return answer\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3508325,
                "title": "easy-javascript-solution-beat-100-run-time-o-n",
                "content": "# Intuition\\nWe are reusing the returned value from fn(init,nums[i]). \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length==0) return init;\\n    for(let i = 0;i<nums.length;i++) {\\n        init = fn(init,nums[i])\\n    }\\n    return init;\\n};\\n```\\nUPVOTE IF IT HELPS \\uD83D\\uDE03",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length==0) return init;\\n    for(let i = 0;i<nums.length;i++) {\\n        init = fn(init,nums[i])\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3431221,
                "title": "reduce",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n  let res = init;\\n\\n  for (const i of nums) {\\n    res = fn(res, i);\\n  }\\n  \\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n  let res = init;\\n\\n  for (const i of nums) {\\n    res = fn(res, i);\\n  }\\n  \\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3507548,
                "title": "fully-explained-o-n-array-reduce-with-bakery-example-flow-diagram-why-array-reduce",
                "content": "# Introduction \\n\\nIn this problem, we are given an array `nums`, a reducer function `fn`, and an initial value `init`. We need to return a reduced array by applying the given operation on every element of the input array, starting from the initial value.\\n\\nWe need to solve this problem without using the built-in `Array.reduce()` method. In this solution, we will discuss an approach to solve this problem and the reasons why we should use the `array.reduce()` method instead of the corresponding brute force array transformation.\\n\\n# How does array.reduce() work?\\n\\nThe `array.reduce()` method in JavaScript is a powerful tool that can be used to perform a wide range of operations on arrays. The method takes a reducer function as an argument and applies it to each element in the array, resulting in a single, accumulated value.\\n\\nTo understand how `array.reduce()` works, let\\'s consider a real-life example. Imagine that you are organizing a bake sale for a charity event. You have a list of baked goods and their corresponding prices that you want to sell, and you need to calculate the total amount of money that you expect to raise from the sale.\\n\\n![](https://media.giphy.com/media/DZXgs2OSwOqGY/giphy.gif)\\n\\nOne way to do this is to use the `array.reduce()` method. You can create an array of the prices of each baked good, and then use the method to add up all the prices to get the total amount.\\n\\nHere is an example implementation in JavaScript:\\n\\n```javascript\\nconst bakedGoods = [\\n  { name: \\'Chocolate Chip Cookies\\', price: 2.50 },\\n  { name: \\'Cupcakes\\', price: 3.00 },\\n  { name: \\'Brownies\\', price: 2.00 },\\n  { name: \\'Lemon Bars\\', price: 2.50 }\\n];\\n\\nconst totalAmount = bakedGoods.reduce((acc, item) => acc + item.price, 0);\\n\\nconsole.log(totalAmount); // Output: 10.00\\n```\\n\\nIn this example, we have an array `bakedGoods` that contains four objects, each representing a baked good and its price. We use `array.reduce()` to iterate through the array and add up all the prices, starting from an initial value of 0. The reducer function takes two arguments: an accumulator `acc`, which is the accumulated value from the previous iteration, and the current `item` in the array. We add the price of the current `item` to the accumulator and return the updated accumulator value.\\n\\nThe final result of `array.reduce()` is the total amount of money that we expect to raise from the bake sale.\\n\\n# Approach to Solve the Problem \\n\\nIn this problem, we need to apply a reducer function on each element of the input array, starting from the initial value, until we have processed every element of the array. We can implement this logic using a `for-loop` or a `forEach()` method.\\n\\nHowever, since we are not allowed to use the built-in `array.reduce()` method, we will use a loop to iterate through the input array and apply the reducer function on each element. We will store the intermediate results in a new array and return the final element of this array as the answer.\\n\\nHere is a flow diagram of this approach:\\n\\n![](https://res.cloudinary.com/dzy4r0fgy/image/upload/v1683700427/Untitled-2023-02-28-0954-28_g4dnfb.png)\\n\\nLet\\'s implement this approach in JavaScript:\\n\\n## Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let len = nums.length;\\n    if(len==0) return init;\\n    let newArr = [];\\n    nums.forEach((element,index)=>{\\n        newArr[index] = index == 0 ? fn(init,nums[index]) : fn(newArr[index-1],nums[index]);\\n    })\\n    return newArr[len-1];\\n};\\n```\\n\\n\\n# Complexity Analysis\\n\\n- The **time complexity** of this code is **O(n)**, where n is the length of the `nums` array, because the code iterates through the `nums` array once using the `forEach()` method, which has a time complexity of O(n). Inside the `forEach()` method, each operation is constant time, so the total time complexity is O(n).\\n\\n- The **space complexity** of this code is **O(n)**, where n is the length of the `nums` array, because a new array `newArr` is created with the same length as `nums`. Therefore, the space required by this algorithm increases linearly with the size of the input `nums` array. Additionally, the space complexity does not depend on the size of the `init` parameter, since it is a constant size.\\n\\n# Why do we use array.reduce() and not its corresponding brute force transformation?\\n\\n- The `array.reduce()` method provides a simple and elegant way to reduce an array to a single value. It is a higher-order function that abstracts away the details of iteration and accumulation of values, and allows us to focus on the reducer function.\\n\\n- Using a brute force array transformation requires us to write more code and handle the iteration and accumulation of values ourselves. It can also be error-prone and harder to read, especially for more complex operations.\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nconst bakedGoods = [\\n  { name: \\'Chocolate Chip Cookies\\', price: 2.50 },\\n  { name: \\'Cupcakes\\', price: 3.00 },\\n  { name: \\'Brownies\\', price: 2.00 },\\n  { name: \\'Lemon Bars\\', price: 2.50 }\\n];\\n\\nconst totalAmount = bakedGoods.reduce((acc, item) => acc + item.price, 0);\\n\\nconsole.log(totalAmount); // Output: 10.00\\n```\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let len = nums.length;\\n    if(len==0) return init;\\n    let newArr = [];\\n    nums.forEach((element,index)=>{\\n        newArr[index] = index == 0 ? fn(init,nums[index]) : fn(newArr[index-1],nums[index]);\\n    })\\n    return newArr[len-1];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506735,
                "title": "day-6-easy-commented-with-examples",
                "content": "The **reduce** function is a higher-order function in JavaScript that allows you to reduce an array of values to a single value using a provided function.\\nIt takes three arguments:\\nnums: An array of values to be reduced.\\nfn: A function that is used to perform the reduction. \\nThis function takes two **arguments**, an accumulator and the current value from the array, and returns a new accumulator.\\n***init: An optional initial value for the accumulator.***\\nThe reduce function works by iterating over each value in the array and applying the provided function to the current accumulator and the current value. \\nThe result of this function call becomes the new accumulator, which is then used in the next iteration.\\n\\nHere\\'s an example of using the reduce function to sum the values in an array:\\n\\n```\\nconst nums = [1, 2, 3, 4, 5];\\nconst sum = reduce(nums, (acc, val) => acc + val, 0);\\nconsole.log(sum); // Output: 15\\n\\n```\\nIn this example, the ***reduce function*** is used to sum the values in the nums array. The fn argument is a function that takes the current accumulator acc and adds the current value val to it.\\nThe initial value for the accumulator init is set to 0.\\n\\nAnother example is to use the ***reduce function*** to find the maximum value in an array:\\n\\n```\\nconst nums = [1, 2, 3, 4, 5];\\nconst max = reduce(nums, (acc, val) => Math.max(acc, val), -Infinity);\\nconsole.log(max); // Output: 5\\n\\n```\\n\\nIn this example, the ***reduce function*** is used to find the maximum value in the nums array. The fn argument is a function that takes the current accumulator acc and the current value val and returns the maximum of the two using the ***Math.max functio***n. The initial value for the accumulator init is set to -Infinity to ensure that any value in the array is greater than the ***initial accumulator valu***e.\\n\\n***Here is the solution to the given problem :-***\\n\\n\\n```\\n\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    ans = fn(ans, nums[i]);\\n  }\\n  return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\nconst nums = [1, 2, 3, 4, 5];\\nconst sum = reduce(nums, (acc, val) => acc + val, 0);\\nconsole.log(sum); // Output: 15\\n\\n```\n```\\nconst nums = [1, 2, 3, 4, 5];\\nconst max = reduce(nums, (acc, val) => Math.max(acc, val), -Infinity);\\nconsole.log(max); // Output: 5\\n\\n```\n```\\n\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    ans = fn(ans, nums[i]);\\n  }\\n  return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506846,
                "title": "explained-solution-in-javascript-and-typescript-daily-problem-of-javascript-30-days",
                "content": "# Intuition\\nTransform array according to given function.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1) Edge case: if `arr.length == 0` then return `init`.\\n2) The first `val` will be passed in the function as `init`, after 1st iteration `init` will be replaced by `val`.\\n```\\nif(n > 1){\\n    val = fn(init, nums[0]);\\n        for(var i = 1; i < n; i++){\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n```\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n---\\n> I am in initial stage of learning javascript. If you have any suggestion to improve myself please suggest.\\n---\\n\\n# Code\\n``` JavaScript []\\nvar reduce = function(nums, fn, init) {\\n    var n = nums.length, val = 0;\\n    if(n == 0){\\n        return init;\\n    }\\n    if(n == 1){\\n        val = fn(init, nums[0]);\\n        return val;\\n    }\\n    if(n > 1){\\n        val = fn(init, nums[0]);\\n        for(var i = 1; i < n; i++){\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n    return val;\\n};\\n```\\n``` TypeScript []\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    var n = nums.length, val = 0;\\n    if(n == 0){\\n        return init;\\n    }\\n    if(n == 1){\\n        val = fn(init, nums[0]);\\n        return val;\\n    }\\n    if(n > 1){\\n        val = fn(init, nums[0]);\\n        for(var i = 1; i < n; i++){\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nif(n > 1){\\n    val = fn(init, nums[0]);\\n        for(var i = 1; i < n; i++){\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n```\n``` JavaScript []\\nvar reduce = function(nums, fn, init) {\\n    var n = nums.length, val = 0;\\n    if(n == 0){\\n        return init;\\n    }\\n    if(n == 1){\\n        val = fn(init, nums[0]);\\n        return val;\\n    }\\n    if(n > 1){\\n        val = fn(init, nums[0]);\\n        for(var i = 1; i < n; i++){\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n    return val;\\n};\\n```\n``` TypeScript []\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    var n = nums.length, val = 0;\\n    if(n == 0){\\n        return init;\\n    }\\n    if(n == 1){\\n        val = fn(init, nums[0]);\\n        return val;\\n    }\\n    if(n > 1){\\n        val = fn(init, nums[0]);\\n        for(var i = 1; i < n; i++){\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506808,
                "title": "java-script-solution-for-array-reduce-transformation-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code implements the reduce function, which applies a given function to each element of an array, accumulating the results into a single value. The reduce function takes an array, a function, and an initial value as input parameters.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Initialize the accumulator variable with the provided initial value.\\n- Iterate over each element in the given array using a for...in loop.\\n- Apply the given function to the current element and the accumulator, updating the accumulator with the result.\\n- Return the final value of the accumulator after iterating through all elements in the array.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this solution is O(n), where n is the number of elements in the input array. The code iterates over each element in the array exactly once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1) because the code only uses a constant amount of additional space to store the accumulator and loop variables. The space usage does not depend on the size of the input array.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let accumulator = init;\\n  for (const index in nums) {\\n    accumulator = fn(accumulator, nums[index]);\\n  } \\n  return accumulator;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let accumulator = init;\\n  for (const index in nums) {\\n    accumulator = fn(accumulator, nums[index]);\\n  } \\n  return accumulator;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3459322,
                "title": "one-liner-trick-with-foreach-you-should-remember",
                "content": "# Intuition\\nSelf-explanatory\\n\\n# Code\\n```\\nreduce=(s,f,i)=>s.forEach(n=>i=f(i,n))||i\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nreduce=(s,f,i)=>s.forEach(n=>i=f(i,n))||i\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3829317,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let val = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let val = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    val = fn(val, nums[i]);\\n  }\\n  return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3509925,
                "title": "super-duper-easy-reduce-method-javascript-typescript-brownie-tip",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe objective of this problem is to write a function that performs a reduction transformation based on the output of a callback function with arguments `accumulator` and `current value`. The value obtained by calling fn must be taken `accumulator` for next function call.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis probelm is require to create our `Custom Reduce` function but not in `Array.prototype`.\\n\\nTo achieve this, we can create a variable named `accumulator` which will assign with initial value and start looping over each element in the `nums` array. For each element, we call the fn function with `accumulator` and value as arguments, and reassign accumulator with returned value. At last return the accumulator.\\n\\nBy using this approach, we can reduce out the input array efficiently and elegantly.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n``` javascript []\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let accumulator = init;\\n    nums.forEach(num => {\\n        accumulator = fn(accumulator, num)\\n    })\\n\\n    return accumulator\\n};\\n```\\n``` typescript []\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    let accumulator = init;\\n    nums.forEach(num => {\\n        accumulator = fn(accumulator, num)\\n    })\\n\\n    return accumulator\\n};\\n```\\n\\n# Brownie Learning :\\nIf you understand the above function then to make it run similar to JS reduce HOC method. We just need to change 3 things.\\n1. remove the first `nums` argument from function defination.\\n2. create a variable name `nums` and assign it with keyword `this`. Why ? because keyword `this` will hold the array on which our custom reduce method called.\\n3. assign reduce method to `Array.prototype[CUSTOME_REDUCE_METHOD_NAME] = reduce`\\n\\nHurray! We have our own custom reduce method similar to JS reduce method.\\n\\n``` javascript\\nArray.prototype.myReduce = function(fn, init) {\\n    let nums = this\\n    let accumulator = init;\\n    nums.forEach(num => {\\n        accumulator = fn(accumulator, num)\\n    })\\n\\n    return accumulator\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript",
                    "Array"
                ],
                "code": "``` javascript []\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let accumulator = init;\\n    nums.forEach(num => {\\n        accumulator = fn(accumulator, num)\\n    })\\n\\n    return accumulator\\n};\\n```\n``` typescript []\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    let accumulator = init;\\n    nums.forEach(num => {\\n        accumulator = fn(accumulator, num)\\n    })\\n\\n    return accumulator\\n};\\n```\n``` javascript\\nArray.prototype.myReduce = function(fn, init) {\\n    let nums = this\\n    let accumulator = init;\\n    nums.forEach(num => {\\n        accumulator = fn(accumulator, num)\\n    })\\n\\n    return accumulator\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3507593,
                "title": "3-different-method-beginner-friendly-day-6-explained",
                "content": "# Using Built in reduce\\nIn this method we use built in ```reduce()``` which is provided by javascript.\\n\\n# Code\\n```\\nvar reduce = function (nums, fn, init) {\\n  return nums.reduce(fn,init);\\n};\\n```\\n\\n# Using For Loop\\nIn this solution we use conventional for loop to iterate each element of array. Firstly we take ans variable ans and assign it to inital value then we itreate over array using for loop and pass ans and element of array to function ```ans = fn(ans,nums[i])``` .\\n\\n# Code\\n```\\nvar reduce = function (nums, fn, init) {\\n  let ans = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    ans = fn(ans, nums[i]);\\n  }\\n  return ans;\\n};\\n```\\n\\n# Using forEach \\n\\nIn this we use builtin ```forEach()``` which is provided by javascript.\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n\\n    nums.forEach((n) => {\\n        ans = fn(ans,n);\\n    });\\n\\n    return ans;\\n};\\n```\\n![478xve.jpg](https://assets.leetcode.com/users/images/996b2059-933d-42cd-bf7e-820cc4ba5e91_1683701398.1942718.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```reduce()```\n```\\nvar reduce = function (nums, fn, init) {\\n  return nums.reduce(fn,init);\\n};\\n```\n```ans = fn(ans,nums[i])```\n```\\nvar reduce = function (nums, fn, init) {\\n  let ans = init;\\n  for (let i = 0; i < nums.length; i++) {\\n    ans = fn(ans, nums[i]);\\n  }\\n  return ans;\\n};\\n```\n```forEach()```\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n\\n    nums.forEach((n) => {\\n        ans = fn(ans,n);\\n    });\\n\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3507129,
                "title": "1-line-2-line-javascript-typescript",
                "content": "# Code\\n`1 Line`\\n\\n`Javascript`\\n```\\nvar reduce = function(nums, fn, init,i = 0) {\\n    return (i === nums.length ? init : reduce(nums,fn,fn(init,nums[i]),i+1));\\n};\\n```\\n`Typescript`\\n```\\nfunction reduce(nums: number[], fn: Fn, init: number,i: number = 0): number {\\n    return i === nums.length ? init : reduce(nums,fn,fn(init,nums[i]),i + 1);\\n};\\n```\\n\\n`2 Line`\\n\\n`Javascript`\\n```\\nvar reduce = function(nums, fn, init) {\\n    for(let i=0;i<nums.length;i++) init = fn(init,nums[i]);\\n    return init;\\n};\\n```\\n\\n`Typescript`\\n```\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    for(let i=0;i<nums.length;i++) init = fn(init,nums[i]);\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init,i = 0) {\\n    return (i === nums.length ? init : reduce(nums,fn,fn(init,nums[i]),i+1));\\n};\\n```\n```\\nfunction reduce(nums: number[], fn: Fn, init: number,i: number = 0): number {\\n    return i === nums.length ? init : reduce(nums,fn,fn(init,nums[i]),i + 1);\\n};\\n```\n```\\nvar reduce = function(nums, fn, init) {\\n    for(let i=0;i<nums.length;i++) init = fn(init,nums[i]);\\n    return init;\\n};\\n```\n```\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    for(let i=0;i<nums.length;i++) init = fn(init,nums[i]);\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506466,
                "title": "easy-approach-100-understandable",
                "content": "This is my first JS program to participate\\nso, encourage me to do more and more...\\nvote up to do more problem....\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init){\\n    if(nums.length==0){\\n        return init;\\n    }\\n    let x=fn(init,nums[0]);\\n    let i =1;\\n    for(i=1;i<nums.length;i++){\\n        x=fn(x,nums[i]);\\n    }\\n    return x;\\n};\\n```\\n**vote up for more solutions**\\n**\\uD83D\\uDC49VOTE UP\\uD83D\\uDC48**",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init){\\n    if(nums.length==0){\\n        return init;\\n    }\\n    let x=fn(init,nums[0]);\\n    let i =1;\\n    for(i=1;i<nums.length;i++){\\n        x=fn(x,nums[i]);\\n    }\\n    return x;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3433185,
                "title": "easy-simple-javascript-solution",
                "content": "\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans=init;\\n    for(const i of nums){\\n        ans=fn(ans,i);\\n\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans=init;\\n    for(const i of nums){\\n        ans=fn(ans,i);\\n\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3419474,
                "title": "robust-code-with-explanation",
                "content": "# Intuition\\nThe **reduce** function is used to apply a given function to each element of an array and return a single accumulated value.\\n\\n# Approach\\n- Check if the input array is empty. If it is, return the initial value.\\n- If an initial value is provided, set the accumulator to the initial value. Otherwise, set it to the first element of the array.\\n- Determine the starting index for the loop based on whether an initial value was provided. If an initial value was provided, start the loop at index 0. Otherwise, start at index 1.\\n- Iterate over the input array using a simple for loop starting at the determined starting index.\\n- Apply the given function to the accumulator and the current element of the array, and update the accumulator with the result.\\n- Once all elements of the array have been processed, return the final accumulated value.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    // Return init value if array is empty\\n    if (nums.length === 0) return init;\\n\\n    // If init value is undefine then first item in the array is assigned\\n    let accumilate = init ?? nums[0];\\n\\n    // If first item of the the array is assigned, then start count from 1 if not 0\\n    let start = (accumilate === init) ? 0 : 1;\\n\\n    // Simple for loop\\n    for (let i = start; i < nums.length; i++) {\\n        accumilate = fn(accumilate, nums[i]);\\n    }\\n\\n    return accumilate;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    // Return init value if array is empty\\n    if (nums.length === 0) return init;\\n\\n    // If init value is undefine then first item in the array is assigned\\n    let accumilate = init ?? nums[0];\\n\\n    // If first item of the the array is assigned, then start count from 1 if not 0\\n    let start = (accumilate === init) ? 0 : 1;\\n\\n    // Simple for loop\\n    for (let i = start; i < nums.length; i++) {\\n        accumilate = fn(accumilate, nums[i]);\\n    }\\n\\n    return accumilate;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3409287,
                "title": "easy-to-understand-100-space-and-time-solution",
                "content": "# Intuition \\uD83E\\uDD14\\nThe problem is to create a function that applies a function to each element of an array and returns a single value by reducing the array to a single value.\\n\\n# Approach \\uD83D\\uDE80\\nThe approach used in the provided code is to create a reduce function that takes an array, a function to apply, and an initial value as arguments, and returns a single value. The function starts by setting the initial value to ans. It then iterates over each element of the input array and applies the provided function fn to accumulate the values into a single output.\\n\\nThis approach ensures that the function can be used to apply any function to an array and accumulate the output into a single value.\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n    for (let i of nums)\\n        ans = fn(ans, i);\\n    \\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n    for (let i of nums)\\n        ans = fn(ans, i);\\n    \\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3407392,
                "title": "typescript-recursive-one-liner",
                "content": "Fun but probably not performant, since we with each call we create a new array via `Array.slice()`.\\n\\ni think whether there\\'s tail-call optimization depends on the JavaScript engine used.\\n\\n```typescript\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    return nums.length === 0\\n        ? init\\n        : reduce(nums.slice(1), fn, fn(init, nums[0]));\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Recursion"
                ],
                "code": "```typescript\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    return nums.length === 0\\n        ? init\\n        : reduce(nums.slice(1), fn, fn(init, nums[0]));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406812,
                "title": "simple-solution-using-array-foreach-method",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length){nums.forEach(num=> init = fn(init, num))}\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length){nums.forEach(num=> init = fn(init, num))}\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3951494,
                "title": "2626-array-reduce-transformation-simple-javascript-solution-memory-beats-96-58",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    val=init\\n    for (i=0;i<nums.length;i++){\\n        val=fn(val,nums[i])\\n    }\\n    \\n    return val\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    val=init\\n    for (i=0;i<nums.length;i++){\\n        val=fn(val,nums[i])\\n    }\\n    \\n    return val\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3568092,
                "title": "day-6-of-js-challenge-easy-solution-with-explanation-beginner-friendly",
                "content": "\\n# Approach\\n1. To implement the `reduce` function, we can iterate over each element of the array using a `for loop`\\n2. apply the reducer function to the current value and the current element and store it as `val`. \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val=init; //set current value\\n    for(let i=0;i<nums.length;i++){ //iterate over each ele in array\\n        val = fn(val, nums[i]);//store the val as function of the current val with the element\\n    }\\n    return val;//output\\n};\\n```\\nKindly upvote if you found this helpful!Happy learning!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val=init; //set current value\\n    for(let i=0;i<nums.length;i++){ //iterate over each ele in array\\n        val = fn(val, nums[i]);//store the val as function of the current val with the element\\n    }\\n    return val;//output\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3536980,
                "title": "easy-simple-fast-with-detailed-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nCalling out the function for the whole array and returning the value init if the array is empty.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$ \\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let out=init;\\n    if(nums.length === 0)\\n        return init;\\n    for(let i=0;i< nums.length;i++){\\n        out= fn(out,nums[i])\\n    }\\n    return out;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let out=init;\\n    if(nums.length === 0)\\n        return init;\\n    for(let i=0;i< nums.length;i++){\\n        out= fn(out,nums[i])\\n    }\\n    return out;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3510057,
                "title": "js-solution-day-6",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for(let i =  0;i < nums.length; i++) val = fn(val, nums[i]);\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for(let i =  0;i < nums.length; i++) val = fn(val, nums[i]);\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3509914,
                "title": "day-6-javascript-challenge-easy-o-n",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) return init;\\n    let val = 0;\\n    for(let i = 0;i < nums.length;i++){\\n        if(i === 0) val = fn(init,nums[i]);\\n        else val = fn(val,nums[i]); \\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) return init;\\n    let val = 0;\\n    for(let i = 0;i < nums.length;i++){\\n        if(i === 0) val = fn(init,nums[i]);\\n        else val = fn(val,nums[i]); \\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3509795,
                "title": "javascript-day-6-of-30-days-challange",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n\\n    for(let i=0; i<nums.length; i++){\\n        init = fn(init, nums[i]);\\n    }\\n\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n\\n    for(let i=0; i<nums.length; i++){\\n        init = fn(init, nums[i]);\\n    }\\n\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3509233,
                "title": "easy-to-understand-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  if(!nums.length){\\n       return init;\\n   } \\n   let sum=init;\\n   for(let value of nums){\\n       sum = fn(sum, value);\\n   }\\n   return sum; \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  if(!nums.length){\\n       return init;\\n   } \\n   let sum=init;\\n   for(let value of nums){\\n       sum = fn(sum, value);\\n   }\\n   return sum; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3508944,
                "title": "simple-easy-js",
                "content": "/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\n```\\nvar reduce = function(nums, fn, init) {\\n    let val = init \\n    for( let i = 0 ; i < nums.length ; i++ ){\\n        val =fn(val,nums[i])\\n    }\\n    return val\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    let val = init \\n    for( let i = 0 ; i < nums.length ; i++ ){\\n        val =fn(val,nums[i])\\n    }\\n    return val\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3508424,
                "title": "easy-and-simple-approach",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var ans=init;\\n    for(var i=0; i<nums.length; i++){\\n        ans=fn(ans, nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var ans=init;\\n    for(var i=0; i<nums.length; i++){\\n        ans=fn(ans, nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3507361,
                "title": "4-different-methods",
                "content": "\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\n\\n //Method 1\\n\\n// var reduce = function(nums, fn, init) {\\n//     let val=init;\\n//     for(let i=0;i<nums.length;i++){\\n//         val=fn(val,nums[i]);\\n//     }\\n//     return val;\\n// };\\n\\n// METHOD 2\\n// var reduce = function(nums, fn, init) {\\n//     let val=init;\\n//     for(const i of nums){ //used \\'of\\' as we are accessing directly values\\n//         val=fn(val,i);\\n//     }\\n//     return val;\\n// };\\n\\n//METHOD 3\\n// var reduce=function(nums,fn,init){\\n//     let val=init;\\n//     nums.forEach((n)=> val=fn(val,n));\\n//     return val;\\n// }\\n\\n//METHOD 4 directly use reduce function\\nvar reduce =function(nums,fn,init){\\n    return nums.reduce(fn,init)\\n   \\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\n\\n //Method 1\\n\\n// var reduce = function(nums, fn, init) {\\n//     let val=init;\\n//     for(let i=0;i<nums.length;i++){\\n//         val=fn(val,nums[i]);\\n//     }\\n//     return val;\\n// };\\n\\n// METHOD 2\\n// var reduce = function(nums, fn, init) {\\n//     let val=init;\\n//     for(const i of nums){ //used \\'of\\' as we are accessing directly values\\n//         val=fn(val,i);\\n//     }\\n//     return val;\\n// };\\n\\n//METHOD 3\\n// var reduce=function(nums,fn,init){\\n//     let val=init;\\n//     nums.forEach((n)=> val=fn(val,n));\\n//     return val;\\n// }\\n\\n//METHOD 4 directly use reduce function\\nvar reduce =function(nums,fn,init){\\n    return nums.reduce(fn,init)\\n   \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3507208,
                "title": "very-easy-and-simple-solution-in-javascript-wow-0-o",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506599,
                "title": "array-reduce",
                "content": "we are using an arrow function to define the `reduce` function itself, and another arrow function to define the function passed to the `forEach` loop. The `forEach` loop iterates through each element of the `nums` array and applies the `reducer` function `fn` to it and the accumulated value. We update the accumulated value at each iteration, starting with the initial value `init`. Finally, we return the final accumulated value.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = (nums, fn, init) => {\\n  let val = init;\\n  nums.forEach(num => {\\n    val = fn(val, num);\\n  });\\n  return val;\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = (nums, fn, init) => {\\n  let val = init;\\n  nums.forEach(num => {\\n    val = fn(val, num);\\n  });\\n  return val;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3506479,
                "title": "4-easy-solution-with-video-explanation-in-js-ts-learn-concepts-first",
                "content": "\\n# Video explanation \\n[Video link](https://youtu.be/10iEbeg30mE)\\n\\n___\\n\\n\\n## Intution - steps to think (explained in video too)\\n* The problem is asking us to return a reduced array \\n* we will start by declaring the variable and return it\\n* between declaration and return, we will loop over the array and try to apply the given function to it.\\n\\n\\n---\\n\\n\\n# Complexity\\n\\n### Time complexity:\\nThe time complexity of the above solution is O(n), where n is the length of the input array arr.\\n\\n### Space complexity:\\nThe space complexity of the solution is O(1) as well. This is because we are just using the variable to store the result, nothing else.\\n\\n# Code\\n\\n\\n```javascript []\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        res = fn(res, nums[i])\\n    }\\n    return res\\n};\\n```\\n```typescript []\\nconst reduce = function(nums: number[], fn: (acc: number, curr: number) => number, init: number): number {\\n    let res: number = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        res = fn(res, nums[i])\\n    }\\n    return res\\n};\\n```\\n\\n```javascript []\\n\\n\\n/*Solution 2*/\\n var reduce = function (nums, fn, init) {\\n   let res = init;\\n    nums.map(x => (res = fn(res, x)));\\n\\n    return res;\\n};\\n\\n/* Solution 3 */\\n// var reduce = function (nums, fn, init) {\\n//    let res = init;\\n//    nums.forEach(x => (res = fn(res, x)));\\n\\n//    return res;\\n// };\\n\\n/*Solution 4*/\\n// var reduce = function(nums, fn, init) {\\n//     let ans = init;\\n//     for (let i of nums)\\n//         ans = fn(ans, i);\\n    \\n//     return ans;\\n// };\\n\\n\\n```\\n\\n\\nOther good resources:-\\n* [My video explanation]()\\n* [Loops in JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration)\\n* [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\\n* [Filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\\n* [Reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\\n\\n\\n# Important links\\n* [Join 100+ other JS lovers](https://discord.gg/2BxFN63EFc) \\uD83D\\uDE80\\n* [Reach out to me on Linkedin.](https://www.linkedin.com/in/anshulontech/) \\uD83D\\uDE4F\\uD83C\\uDFFB\\n\\n\\n\\n![upvote me.jpeg](https://assets.leetcode.com/users/images/bc2afe3a-768d-42cb-aba8-39023ef69af2_1683593182.9982169.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript []\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        res = fn(res, nums[i])\\n    }\\n    return res\\n};\\n```\n```typescript []\\nconst reduce = function(nums: number[], fn: (acc: number, curr: number) => number, init: number): number {\\n    let res: number = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        res = fn(res, nums[i])\\n    }\\n    return res\\n};\\n```\n```javascript []\\n\\n\\n/*Solution 2*/\\n var reduce = function (nums, fn, init) {\\n   let res = init;\\n    nums.map(x => (res = fn(res, x)));\\n\\n    return res;\\n};\\n\\n/* Solution 3 */\\n// var reduce = function (nums, fn, init) {\\n//    let res = init;\\n//    nums.forEach(x => (res = fn(res, x)));\\n\\n//    return res;\\n// };\\n\\n/*Solution 4*/\\n// var reduce = function(nums, fn, init) {\\n//     let ans = init;\\n//     for (let i of nums)\\n//         ans = fn(ans, i);\\n    \\n//     return ans;\\n// };\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3442501,
                "title": "my-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n   if(!nums.length){\\n       return init;\\n   } \\n   let sum=init;\\n   for(let value of nums){\\n       sum = fn(sum, value);\\n   }\\n   return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n   if(!nums.length){\\n       return init;\\n   } \\n   let sum=init;\\n   for(let value of nums){\\n       sum = fn(sum, value);\\n   }\\n   return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3407037,
                "title": "easy-1-line-sol",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce(fn,init)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce(fn,init)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100655,
                "title": "array-reduce-transformation-javascript-solution-by-bharadwaj",
                "content": "# Approach\\nFunctional Programming\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    nums.forEach((num) => {\\n        val = fn(val, num)\\n    });\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    nums.forEach((num) => {\\n        val = fn(val, num)\\n    });\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4100275,
                "title": "use-foreach",
                "content": "# Solution Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nlet reduce = function(nums, fn, init) {\\n    let fnResult = init\\n    nums.forEach(el => {\\n        fnResult = fn(fnResult, el)\\n    })\\n    return fnResult\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nlet reduce = function(nums, fn, init) {\\n    let fnResult = init\\n    nums.forEach(el => {\\n        fnResult = fn(fnResult, el)\\n    })\\n    return fnResult\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4092095,
                "title": "beats-91-29-of-users-with-javascript",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init\\n    nums.forEach(e=>{\\n        ans = fn(ans,e)\\n    })\\n    return ans\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init\\n    nums.forEach(e=>{\\n        ans = fn(ans,e)\\n    })\\n    return ans\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091074,
                "title": "custom-array-reduction-function-in-javascript",
                "content": "# Intuition\\n The goal is to reduce an array using a custom reducer function.\\n I start with an initial value, apply the reducer function to each\\n element in the array, and accumulate the result.\\n\\n# Approach\\n1. Initialize the accumulator with the initial value.\\n2. Iterate through the array and apply the reducer function to each element.\\n3. Update the accumulator with the result of each iteration.\\n4. Return the final result.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$ \\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var accumulator = init;\\n    for (var i = 0; i < nums.length; i++) {\\n        accumulator = fn(accumulator, nums[i]);\\n    }\\n    return accumulator;\\n};\\n\\n\\nvar nums1 = [1, 2, 3, 4];\\nvar fn1 = function sum(accum, curr) { return accum + curr; };\\nvar init1 = 0;\\nvar result1 = reduce(nums1, fn1, init1);\\nconsole.log(result1);\\n\\n\\nvar nums2 = [1, 2, 3, 4];\\nvar fn2 = function sum(accum, curr) { return accum + curr * curr; };\\nvar init2 = 100;\\nvar result2 = reduce(nums2, fn2, init2);\\nconsole.log(result2);\\n\\n\\nvar nums3 = [];\\nvar fn3 = function sum(accum, curr) { return 0; };\\nvar init3 = 25;\\nvar result3 = reduce(nums3, fn3, init3);\\nconsole.log(result3);\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var accumulator = init;\\n    for (var i = 0; i < nums.length; i++) {\\n        accumulator = fn(accumulator, nums[i]);\\n    }\\n    return accumulator;\\n};\\n\\n\\nvar nums1 = [1, 2, 3, 4];\\nvar fn1 = function sum(accum, curr) { return accum + curr; };\\nvar init1 = 0;\\nvar result1 = reduce(nums1, fn1, init1);\\nconsole.log(result1);\\n\\n\\nvar nums2 = [1, 2, 3, 4];\\nvar fn2 = function sum(accum, curr) { return accum + curr * curr; };\\nvar init2 = 100;\\nvar result2 = reduce(nums2, fn2, init2);\\nconsole.log(result2);\\n\\n\\nvar nums3 = [];\\nvar fn3 = function sum(accum, curr) { return 0; };\\nvar init3 = 25;\\nvar result3 = reduce(nums3, fn3, init3);\\nconsole.log(result3);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090250,
                "title": "function-reduce-array",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for(i = 0; i < nums.length; i++){\\n        result = fn(result, nums[i])\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for(i = 0; i < nums.length; i++){\\n        result = fn(result, nums[i])\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4085832,
                "title": "easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUsing for loop\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n46ms\\nBeats 91.52%of users with JavaScript\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n42.28MB\\nBeats 58.98%of users with JavaScript\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = function(nums, fn, init) {\\n       \\n    for(let i=0;i<nums.length;i++)\\n    {   \\n               init=fn(init, nums[i])\\n            }\\n     return init\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = function(nums, fn, init) {\\n       \\n    for(let i=0;i<nums.length;i++)\\n    {   \\n               init=fn(init, nums[i])\\n            }\\n     return init\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083133,
                "title": "array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let t = init;\\n    for(let i=0;i<nums.length;i++){\\n     t = fn(t,nums[i])\\n    }\\n    return t;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let t = init;\\n    for(let i=0;i<nums.length;i++){\\n     t = fn(t,nums[i])\\n    }\\n    return t;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4076822,
                "title": "easy-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = (nums, fn, init) =>\\n{\\n    nums.forEach(val=>{\\n        init = fn(init , val)\\n    })    \\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = (nums, fn, init) =>\\n{\\n    nums.forEach(val=>{\\n        init = fn(init , val)\\n    })    \\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072995,
                "title": "2626-array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0){\\n       return init;\\n    }else{\\n        for(let i = 0; i<nums.length; i++){\\n        init =+ fn(init,nums[i]);\\n    }\\n    return init\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0){\\n       return init;\\n    }else{\\n        for(let i = 0; i<nums.length; i++){\\n        init =+ fn(init,nums[i]);\\n    }\\n    return init\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072713,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\n\\nconst reduce = (nums, fn, init) => {\\n    let result = init;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\n\\nconst reduce = (nums, fn, init) => {\\n    let result = init;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069615,
                "title": "js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) return init;\\n\\n    const numsLength = nums.length;\\n    let val = init;\\n\\n    for (let i = 0; i < numsLength; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) return init;\\n\\n    const numsLength = nums.length;\\n    let val = init;\\n\\n    for (let i = 0; i < numsLength; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067897,
                "title": "hiddes-masterpiece-simple-to-understand-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar reduce = function(nums, fn, init) {\\n    var val = 0;\\n    for (var i=0; i < nums.length; i++) {\\n        if (val >= 1) val = fn(val, nums[i]); \\n        else val = fn(init, nums[i]);\\n    }\\n    if (val == 0 && nums.length == 0) return init;\\n    else return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    var val = 0;\\n    for (var i=0; i < nums.length; i++) {\\n        if (val >= 1) val = fn(val, nums[i]); \\n        else val = fn(init, nums[i]);\\n    }\\n    if (val == 0 && nums.length == 0) return init;\\n    else return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4066830,
                "title": "array-reduce-transformation-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n        let val = init;\\n        for(let i = 0; i < nums.length; i++){\\n             val = (fn(val,nums[i]));\\n    }\\n    if(nums.length > 0){\\n        return val;\\n    }else{\\n        return init;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n        let val = init;\\n        for(let i = 0; i < nums.length; i++){\\n             val = (fn(val,nums[i]));\\n    }\\n    if(nums.length > 0){\\n        return val;\\n    }else{\\n        return init;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064810,
                "title": "simple-and-fast-solution-in-js-ts-beats-99-in-time-and-space",
                "content": "# Code\\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    nums.forEach((item) => init = fn(init, item));\\n\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    nums.forEach((item) => init = fn(init, item));\\n\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064671,
                "title": "easy-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n    for(let i = 0; i < nums.length; i++)\\n    {\\n      ans = fn(ans, nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let ans = init;\\n    for(let i = 0; i < nums.length; i++)\\n    {\\n      ans = fn(ans, nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4063893,
                "title": "very-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n     let len = nums.length;\\n     let ans = init;\\n\\n     for(let i = 0; i < len; i++){\\n         ans = fn(ans,nums[i])\\n     }\\n    \\n  return ans;\\n\\n  }\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n     let len = nums.length;\\n     let ans = init;\\n\\n     for(let i = 0; i < len; i++){\\n         ans = fn(ans,nums[i])\\n     }\\n    \\n  return ans;\\n\\n  }\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061950,
                "title": "using-foreach",
                "content": "# Intuition\\nThe problem seems to involve applying a reduction operation to a list of numbers using the reduce function. The goal is to accumulate a result by iterating through the list and applying a given function to each element.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nTo solve this problem, we can utilize the forEach method to iterate through each element in the nums array. In the callback function of forEach, we will apply the provided function fn to the current element and the accumulated result init. Subsequently, we will update the init variable with the result of the reduction operation for the current element.\\n\\nAfter iterating through all elements, we will return the final value of init as the result of the reduction\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    nums.forEach((num, i, )=>{\\n        init=fn(init,num);\\n    })\\n\\n    return init\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    nums.forEach((num, i, )=>{\\n        init=fn(init,num);\\n    })\\n\\n    return init\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058612,
                "title": "array-reduce-transformation",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    nums.forEach((element) => {\\n        init = fn(init, element);\\n    });\\n\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    nums.forEach((element) => {\\n        init = fn(init, element);\\n    });\\n\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4058388,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for (let i = 0; i < nums.length; i++) {\\n      if(nums.length !== 0){\\n          init = fn(init, nums[i]);  \\n      }else{\\n         return init\\n      }\\n    }\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for (let i = 0; i < nums.length; i++) {\\n      if(nums.length !== 0){\\n          init = fn(init, nums[i]);  \\n      }else{\\n         return init\\n      }\\n    }\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055920,
                "title": "the-simplest-solution-4-lines-of-code",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    if (nums.length == 0) return init;\\n    nums.forEach((el) => result = fn(result, el))\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    if (nums.length == 0) return init;\\n    nums.forEach((el) => result = fn(result, el))\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055299,
                "title": "easiest-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce(fn,init)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce(fn,init)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4049909,
                "title": "70-speed-70-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length===0){\\n        return init;\\n    }\\n    nums.forEach(num=>{\\n        init = fn(init,num)\\n    })\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length===0){\\n        return init;\\n    }\\n    nums.forEach(num=>{\\n        init = fn(init,num)\\n    })\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048289,
                "title": "2626-array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe goal is to reduce an array by iteratively applying a custom reducer function fn to each element, starting with an initial value init. If the array is empty, the function should return the initial value. The reducer function fn takes two arguments: the accumulated value so far and the current element from the array.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    Check if the nums array is empty. If it is, return the initial value init because there are no elements to reduce.\\n\\n    Initialize a variable result with the initial value init. This variable will store the accumulated result as we iterate through the array.\\n\\n    Use a for loop to iterate through each element in the nums array.\\n\\n    In each iteration, apply the reducer function fn to the current result and the current element in the array (nums[i]). Update the result with the new value.\\n\\n    After iterating through the entire array, the result will contain the final reduced value.\\n\\n    Return the result as the output.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) {\\n        return init; \\n    }\\n    \\n    let result = init; \\n    \\n    for (let i = 0; i < nums.length; i++) {\\n        result = fn(result, nums[i]); \\n    }\\n    \\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) {\\n        return init; \\n    }\\n    \\n    let result = init; \\n    \\n    for (let i = 0; i < nums.length; i++) {\\n        result = fn(result, nums[i]); \\n    }\\n    \\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043730,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    var val = init;\\n    for(var n of nums)\\n    {\\n        val=fn(val,n);\\n    }\\n    return val;\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    var val = init;\\n    for(var n of nums)\\n    {\\n        val=fn(val,n);\\n    }\\n    return val;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043719,
                "title": "beats-96-in-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nYou need to return init only\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nDo the manipulation with f(n) and store value in init. Don\\'t play with index. Directly use the value of arr not the index.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let num of nums){\\n        init = fn(init,num);\\n    }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let num of nums){\\n        init = fn(init,num);\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4042743,
                "title": "just-with-3-steps",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    let res=init\\n    for(let i=0;i<nums.length;i++){\\n        \\n        res=fn(res,nums[i])\\n        \\n    }\\n    return res\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    let res=init\\n    for(let i=0;i<nums.length;i++){\\n        \\n        res=fn(res,nums[i])\\n        \\n    }\\n    return res\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041476,
                "title": "only-using-array-reduce-functions",
                "content": "****Bold****# Intuition\\n \\nvar reduce = function(nums, fn, init) { \\n  return  nums.reduce(fn,init);\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "****Bold****# Intuition\\n \\nvar reduce = function(nums, fn, init) { \\n  return  nums.reduce(fn,init);\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041170,
                "title": "javascript-1-liner-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce((accumulator, currentValue) => fn(accumulator, currentValue), init)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce((accumulator, currentValue) => fn(accumulator, currentValue), init)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040925,
                "title": "beats-99-56-of-users-with-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for (let i = 0; i <= nums.length - 1; i++) {\\n    result = fn(result, nums[i]);\\n}\\nreturn result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for (let i = 0; i <= nums.length - 1; i++) {\\n    result = fn(result, nums[i]);\\n}\\nreturn result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039069,
                "title": "memo-to-remember-how-to-write-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI thought it means that I have to make my own `Array.reduce()`method.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initializing accumlator`accum` with `init`.\\n2. Using `for` loop until all elements of the given array`nums` are evaluated.\\n3. Updating `accum` value with the given function `fn` in each loop.\\n4. If `nums` is empty, `for`loop doesn\\'t work. Then `reduce`function gives us `accum` initialized with `init`.\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let accum = init;\\n    for(i=0; i<nums.length; i++)\\n        accum = fn(accum, nums[i])\\n    return accum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let accum = init;\\n    for(i=0; i<nums.length; i++)\\n        accum = fn(accum, nums[i])\\n    return accum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036577,
                "title": "array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for (let i=0; i<nums.length; i++){\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for (let i=0; i<nums.length; i++){\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4036383,
                "title": "javascript-easy-logic",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n  let res = init;\\n\\n  for (const i of nums) {\\n    res = fn(res, i);\\n  }\\n  \\n  return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n  let res = init;\\n\\n  for (const i of nums) {\\n    res = fn(res, i);\\n  }\\n  \\n  return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035556,
                "title": "array-reduce-implementation-beats-94",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\nlet reducedValue = init;\\nfor(let i = 0; i < nums.length; i++){\\nreducedValue = fn(reducedValue,nums[i])\\n}\\nreturn reducedValue\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\nlet reducedValue = init;\\nfor(let i = 0; i < nums.length; i++){\\nreducedValue = fn(reducedValue,nums[i])\\n}\\nreturn reducedValue\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034377,
                "title": "most-easiest-javascript-solution-using-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. --> javascript solution using map\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nin s initilized with int=0 then using map on nums\\ntraversing all element and passing in function and it will do sum then returning s\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let s=init;\\n    nums.map((e,i)=>{\\n        s=fn(s,nums[i])\\n    })\\n    return s;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let s=init;\\n    nums.map((e,i)=>{\\n        s=fn(s,nums[i])\\n    })\\n    return s;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034173,
                "title": "array-reduce-transformation",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$Big-O = O(n) - Linear$$\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    let newInit = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        newInit = fn(newInit, nums[i]);\\n    }\\n    return newInit;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    let newInit = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        newInit = fn(newInit, nums[i]);\\n    }\\n    return newInit;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033915,
                "title": "array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let arrLength=nums.length\\n    let value=init\\n    for(i=0;i<arrLength;i++){\\n        value=fn(value,nums[i])\\n    }\\n    return value\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let arrLength=nums.length\\n    let value=init\\n    for(i=0;i<arrLength;i++){\\n        value=fn(value,nums[i])\\n    }\\n    return value\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4031325,
                "title": "runtime-details-55ms-beats-77-30-of-users-with-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype Fn = (accum: number, curr: number) => number\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    let val:number=init;\\n    for(let i=0;i<nums.length;i++)val=fn(val,nums[i]);\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (accum: number, curr: number) => number\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    let val:number=init;\\n    for(let i=0;i<nums.length;i++)val=fn(val,nums[i]);\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025819,
                "title": "js-ts-best-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nconst reduce = (nums: number[], fn: Fn, init: number): number => {\\n    for(let i=0; i<nums.length; i++){\\n        init = fn(init, nums[i])\\n    }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nconst reduce = (nums: number[], fn: Fn, init: number): number => {\\n    for(let i=0; i<nums.length; i++){\\n        init = fn(init, nums[i])\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4024552,
                "title": "reduce-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n      return nums.reduce((val, num) => fn(val, num), init);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n      return nums.reduce((val, num) => fn(val, num), init);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4022961,
                "title": "reduce-method-solution-in-js-learn-js-with-question-day-6",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe `reduce function` is a higher-order function that takes an array, a reducer function, and an initial value, and returns a single accumulated value by applying the reducer function to each element of the array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo implement the `reduce function`, we can iterate over each element of the array, apply the reducer function to the current value and the current element, and update the accumulated value. We can use a for loop, forEach method, or a for...of loop to perform the iteration.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the reduce function implementation is O(n), where n is the length of the array, because the function iterates over each element of the array exactly once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1), as it only uses a single variable to store the accumulated value.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n  nums.forEach((element)=>{\\n      val = fn(val,element)\\n  })  \\n  return val;\\n};\\n```\\n\\n\\uD83D\\uDE4F\\uD83D\\uDE4F PLEASE UPVOTE. \\uD83D\\uDE4F\\uD83D\\uDE4F",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n  nums.forEach((element)=>{\\n      val = fn(val,element)\\n  })  \\n  return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4021096,
                "title": "array-reduce",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) {\\n        return init\\n    }\\n    for(let i =0; i< nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) {\\n        return init\\n    }\\n    for(let i =0; i< nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4018320,
                "title": "easy-simple-solution-beginner-friendly",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) {\\n        return init;\\n    }\\n\\n    // Initialize the result to the initial value\\n    let result = init;\\n\\n    // Iterate through the array and apply the reducer function\\n    for (const num of nums) {\\n        result = fn(result, num);\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if (nums.length === 0) {\\n        return init;\\n    }\\n\\n    // Initialize the result to the initial value\\n    let result = init;\\n\\n    // Iterate through the array and apply the reducer function\\n    for (const num of nums) {\\n        result = fn(result, num);\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4015279,
                "title": "easy-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for(let i=0; i<nums.length; i++){\\n    result = fn(result, nums[i])\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for(let i=0; i<nums.length; i++){\\n    result = fn(result, nums[i])\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014325,
                "title": "clean-solution-with-explanation",
                "content": "# Explanation\\n\\n- Just as the problem states, return init if the array is empty i.e.  `if(!nums.length) return init;`. \\n- Since the first time we need pass `init` as the `first argument` and `nums[0]` as `second argument`, we dont need to add it as part of the `for loop`. And then start the loop which `i = 1` and call` fn with the val and nums[i]` on every iteration.\\n- return `val`\\n\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(!nums.length) return init;\\n\\n    let val = fn(init, nums[0])\\n\\n    for(let i = 1; i < nums.length; i++){\\n        val = fn(val, nums[i])\\n    }\\n\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(!nums.length) return init;\\n\\n    let val = fn(init, nums[0])\\n\\n    for(let i = 1; i < nums.length; i++){\\n        val = fn(val, nums[i])\\n    }\\n\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4009085,
                "title": "ok",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    // var init =0;\\n    let val;\\n    for(var i=0;i<nums.length;i++){\\n        val = fn(init,nums[i]);\\n        init = val;\\n    }\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    // var init =0;\\n    let val;\\n    for(var i=0;i<nums.length;i++){\\n        val = fn(init,nums[i]);\\n        init = val;\\n    }\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4008176,
                "title": "simple-and-easy-typecript-solution",
                "content": "\\n# Code\\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    let ans = init;\\n    for(let i = 0; i < nums.length; i++){\\n        ans = fn(ans,nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    let ans = init;\\n    for(let i = 0; i < nums.length; i++){\\n        ans = fn(ans,nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4007572,
                "title": "so-array-reduce-transformation-easy-with-big-7-wrong-answers",
                "content": "# Intuition\\nRealy!\\n\\n# Approach\\nYou don\\'t really want to know ..\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nlet reduce = function(nums, fn, init){\\n    let val= init;\\n    if(nums.length === 0){  \\n        val += fn();\\n    }else{\\n        for(let i=0; i< nums.length; i++){\\n            if(nums[0] === 0){\\n                return 0;\\n            }\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n    return Number.isNaN(val)? init : val;\\n};\\n\\nlet sum= function(accum, curr){\\n    accum += curr;\\n    return accum;\\n};\\n\\nlet sum1= function(accum, curr){\\n    accum += curr*curr;\\n    return accum;\\n};\\n\\nlet sum2= function(accum, curr){\\n    return 0;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nlet reduce = function(nums, fn, init){\\n    let val= init;\\n    if(nums.length === 0){  \\n        val += fn();\\n    }else{\\n        for(let i=0; i< nums.length; i++){\\n            if(nums[0] === 0){\\n                return 0;\\n            }\\n            val = fn(val, nums[i]);\\n        }\\n    }\\n    return Number.isNaN(val)? init : val;\\n};\\n\\nlet sum= function(accum, curr){\\n    accum += curr;\\n    return accum;\\n};\\n\\nlet sum1= function(accum, curr){\\n    accum += curr*curr;\\n    return accum;\\n};\\n\\nlet sum2= function(accum, curr){\\n    return 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006085,
                "title": "easy-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for(let i=0; i<nums.length; i++) {\\n        val = fn(val, nums[i])\\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for(let i=0; i<nums.length; i++) {\\n        val = fn(val, nums[i])\\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4005015,
                "title": "use-custom-iteration-approach-to-iterate-array-elements",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let total=init;\\n   for(let i=0;i<nums.length;i++){\\ntotal = fn(total, nums[i]);\\n   }\\n   return total;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let total=init;\\n   for(let i=0;i<nums.length;i++){\\ntotal = fn(total, nums[i]);\\n   }\\n   return total;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3999254,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let reduce = init\\n   for (let i =0; i<nums.length;i++){\\n       reduce = fn(reduce,nums[i])\\n      \\n   }\\n   return reduce\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let reduce = init\\n   for (let i =0; i<nums.length;i++){\\n       reduce = fn(reduce,nums[i])\\n      \\n   }\\n   return reduce\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3997871,
                "title": "solution-from-a-beginner-d",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for (i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i]);\\n    }\\n\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for (i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i]);\\n    }\\n\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3994711,
                "title": "javascript-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI Initialized `val` to `init`. And then, I used the iteration statement to obtain the last `val`.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n\\n    let val = init;\\n    nums.forEach(num => {\\n        val = fn(val, num); \\n    });\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n\\n    let val = init;\\n    nums.forEach(num => {\\n        val = fn(val, num); \\n    });\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3993666,
                "title": "beats-98-79-easy-and-simple",
                "content": "# Intuition\\nupvote if it help\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\n<!-- upvote if it help -->\\n\\nvar reduce = function(nums, fn, init) {\\n   for(var i=0;i<nums.length;i++)\\n   {\\n       init =fn(init,nums[i]);\\n   }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\n<!-- upvote if it help -->\\n\\nvar reduce = function(nums, fn, init) {\\n   for(var i=0;i<nums.length;i++)\\n   {\\n       init =fn(init,nums[i]);\\n   }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3992677,
                "title": "too-quickly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n        let numss = init;\\n        for(let i = 0; i < nums.length; i++){\\n            numss = fn(numss,nums[i])\\n        }\\n        return numss;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n        let numss = init;\\n        for(let i = 0; i < nums.length; i++){\\n            numss = fn(numss,nums[i])\\n        }\\n        return numss;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990657,
                "title": "solving-it-using-array-reduce",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  return  nums.reduce( (acc,cur) => {\\n      let b= fn(acc,cur);\\n    return  acc=b;\\n  } ,init);\\n}; \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  return  nums.reduce( (acc,cur) => {\\n      let b= fn(acc,cur);\\n    return  acc=b;\\n  } ,init);\\n}; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985065,
                "title": "array-reduce-transformation",
                "content": "# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    for (let i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Math"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    for (let i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3984698,
                "title": "easy-solution",
                "content": "# Complexity\\nRuntime 53ms Beats 74.00%of users with JavaScript\\nMemory 41.89 MB Beats 91.65%of users with JavaScript\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(var i=0;i<nums.length;i++){\\n        init=fn(init,nums[i])\\n    }\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(var i=0;i<nums.length;i++){\\n        init=fn(init,nums[i])\\n    }\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3983656,
                "title": "quick-and-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val;\\n    if (nums.length > 0) {\\n    val = fn(init, nums[0]);\\n    for (let i = 1; i < nums.length; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n    } else {\\n        return init;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val;\\n    if (nums.length > 0) {\\n    val = fn(init, nums[0]);\\n    for (let i = 1; i < nums.length; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n    } else {\\n        return init;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3982188,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) \\n   {\\n   let  vall = init\\n   for(let i = 0; i< nums.length; i++)\\n   {\\n       vall = fn(vall, nums[i])\\n   }\\n   return vall\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) \\n   {\\n   let  vall = init\\n   for(let i = 0; i< nums.length; i++)\\n   {\\n       vall = fn(vall, nums[i])\\n   }\\n   return vall\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978904,
                "title": "using-array-reduce-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    const result =  nums.reduce((acc,curr) => {\\n        return fn(acc,curr);\\n    }, init);\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    const result =  nums.reduce((acc,curr) => {\\n        return fn(acc,curr);\\n    }, init);\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3975335,
                "title": "js-concise-for-loop-solution",
                "content": "```\\nvar reduce = function(nums, fn, init) {\\n    if (nums.lenght === 0) {\\n        return init;\\n    }\\n    \\n    for (let num of nums) {\\n        init = fn(init, num);\\n    }\\n    \\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    if (nums.lenght === 0) {\\n        return init;\\n    }\\n    \\n    for (let num of nums) {\\n        init = fn(init, num);\\n    }\\n    \\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972634,
                "title": "simplest-solution",
                "content": "# Overview\\nSimplest solution to this problem.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let x of nums){\\n      init = fn(init, x);\\n    }\\n\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let x of nums){\\n      init = fn(init, x);\\n    }\\n\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972202,
                "title": "one-liner-with-95-beats-in-memory",
                "content": "# Code\\n\\n``` javascript\\nvar reduce = (nums, fn, init = 0) => (\\n    nums.reduce(fn, init)\\n);\\n```\\n\\n# Approach\\n\\n* The `var` keyword declares a variable called `reduce`.\\n* The `reduce` function takes three arguments:\\n    * `nums`: An array of numbers.\\n    * `fn`: A function that takes two numbers as arguments and returns a number.\\n    * `init`: An optional initial value. If not specified, the default value is 0.\\n* The body of the `reduce` function is a arrow function that calls the `nums.reduce()` method. The `nums.reduce()` method takes the same three arguments as the `reduce` function, but it also has a default value for the `init` argument, which is undefined.\\n\\nThe `reduce` function works by repeatedly applying the `fn` function to the elements of the array, starting with the first element and ending with the last element. The first time the `fn` function is called, the first element of the array is passed as the first argument, and the `init` value is passed as the second argument. The result of the `fn` function is then stored in a variable. The next time the `fn` function is called, the stored value is passed as the first argument, and the next element of the array is passed as the second argument. This process continues until all of the elements of the array have been processed. The final result of the `reduce` function is the value that was returned by the `fn` function the last time it was called.\\n\\nHere is an example of how the `reduce` function can be used:\\n\\n```javascript\\nconst nums = [1, 2, 3, 4, 5];\\n\\nconst sum = nums.reduce((a, b) => a + b);\\n\\nconsole.log(sum); // 15\\n```\\n\\nIn this example, the `nums` array is passed to the `reduce` function. The `fn` function is a simple function that adds two numbers together. The `init` value is not specified, so the default value of 0 is used. The `reduce` function repeatedly adds the elements of the `nums` array together, starting with the first element and ending with the last element. The final result of the `reduce` function is the sum of all of the elements in the array, which is 15.\\n\\n\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "``` javascript\\nvar reduce = (nums, fn, init = 0) => (\\n    nums.reduce(fn, init)\\n);\\n```\n```javascript\\nconst nums = [1, 2, 3, 4, 5];\\n\\nconst sum = nums.reduce((a, b) => a + b);\\n\\nconsole.log(sum); // 15\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3963968,
                "title": "2626-array-reduce-transformation-easy-solution",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var val=0+init;\\n    for(let i=0;i<nums.length;i++){\\n        val=fn(val,nums[i]);\\n    }\\n\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var val=0+init;\\n    for(let i=0;i<nums.length;i++){\\n        val=fn(val,nums[i]);\\n    }\\n\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3962120,
                "title": "o-n-solution",
                "content": "# Intuition\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = function(nums, fn, init) {\\n\\n    if (!nums.length) return init\\n\\n     let result\\n\\n     for (let i = 0; i < nums.length; i++) {\\n         if (i === 0) {\\n            result = fn(init, nums[i])\\n         } else {\\n             result = fn(result, nums[i])\\n         } \\n     }\\n\\n     return result\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nconst reduce = function(nums, fn, init) {\\n\\n    if (!nums.length) return init\\n\\n     let result\\n\\n     for (let i = 0; i < nums.length; i++) {\\n         if (i === 0) {\\n            result = fn(init, nums[i])\\n         } else {\\n             result = fn(result, nums[i])\\n         } \\n     }\\n\\n     return result\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3961387,
                "title": "easy-method-without-array-reduce",
                "content": "\\n\\n# Code\\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    nums.forEach((v)=>{\\n        init=fn(init,v)\\n    })\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    nums.forEach((v)=>{\\n        init=fn(init,v)\\n    })\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3959833,
                "title": "simple-easy-to-understand-no-loop-required-just-use-if-and-else-javascript",
                "content": "SIMPLE CODE\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n  if (nums[0] === 0 && !nums[1]) {return 0}\\n    else return nums.length === 0 ? init : nums.reduce(fn, init);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n  if (nums[0] === 0 && !nums[1]) {return 0}\\n    else return nums.length === 0 ? init : nums.reduce(fn, init);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3956463,
                "title": "best-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length==0)\\n    return init\\n    const newx = nums.reduce(fn,init)\\n    return newx\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length==0)\\n    return init\\n    const newx = nums.reduce(fn,init)\\n    return newx\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3953634,
                "title": "array-reduce",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for(let i=0;i<nums.length;i++){\\n        result =fn(result,nums[i]);\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    for(let i=0;i<nums.length;i++){\\n        result =fn(result,nums[i]);\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3951060,
                "title": "one-line-accumulation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst reduce = (nums, fn, init) => {\\n    let accumlator = init;\\n    nums.forEach(element => accumlator = fn(accumlator, element) )\\n    return accumlator\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst reduce = (nums, fn, init) => {\\n    let accumlator = init;\\n    nums.forEach(element => accumlator = fn(accumlator, element) )\\n    return accumlator\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3950927,
                "title": "javascript-simple-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = init;\\n    nums.forEach((num) => {\\n        // console.log(num,res, fn(res, num));\\n        res = fn(res, num);\\n    });\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = init;\\n    nums.forEach((num) => {\\n        // console.log(num,res, fn(res, num));\\n        res = fn(res, num);\\n    });\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3947894,
                "title": "simple-javascript-solution",
                "content": "# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0){\\n        return init;\\n    }\\n\\n    for(let i=0; i<nums.length; i++){\\n        init = fn(init,nums[i]);\\n    }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0){\\n        return init;\\n    }\\n\\n    for(let i=0; i<nums.length; i++){\\n        init = fn(init,nums[i]);\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943865,
                "title": "javascript-simple-solution-foreach",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    let val = init;\\n    nums.forEach(num => {\\n        val = fn(val, num);\\n    });\\n\\n    return val;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    let val = init;\\n    nums.forEach(num => {\\n        val = fn(val, num);\\n    });\\n\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3942982,
                "title": "hindi-me-pura-bataya-hai-dekh-lo-ek-bar",
                "content": "To Bhaiyo, init ek initial value hai, fn ek reducer function hai to re\\nducer function me chahiye ek acummulator or ek current value to init \\nhamara accumulator ho gaya jo value ko sum up karta rahega and jo bhi \\ncurrent value hogi wo array jo ki nums[i] hai usme aati rahegi or init  usse add up karta rahega\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n     for(let i =0;i<nums.length;i++){\\n        \\n\\n \\n         init=fn(init,nums[i]);\\n         \\n     }\\n     return init;\\n};\\n```\\nUPVOTE KAR DENA AACHA LAGA TO \\uD83D\\uDC4D\\uD83D\\uDD90\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n     for(let i =0;i<nums.length;i++){\\n        \\n\\n \\n         init=fn(init,nums[i]);\\n         \\n     }\\n     return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3942087,
                "title": "simple-solution-using-less-space",
                "content": "# Approach\\nWe do not create another variable to sort the result but we save our accumulated value in the init variable to save space.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) return init\\n    for(let i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) return init\\n    for(let i = 0; i < nums.length; i++) {\\n        init = fn(init, nums[i])\\n    }\\n    return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937810,
                "title": "30-days-of-javascript-array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nInitiate Variable || Check Condition For Empty array || Update initiated variable in a For loop.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) Initiate Two variable, Result with initial value 0,\\nAnd Limmit to store init because it will updated A/C to fn logic. \\n2) A/C To problem Requirment return init value if array is empty.so apply in if condition check the array length, if get 0, then just return init.\\n3) In Else run a For loop, inside that update limmit and result\\n4)Finnaly Return Result \\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = 0;\\n    let limit = init;\\n    if(nums.length == 0){\\n        return limit;\\n    }\\nelse{\\n            for(let i = 0; i < nums.length; i++){\\n        const value = fn(limit,nums[i]);\\n        limit = value\\n        result = value;\\n    }\\n}\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = 0;\\n    let limit = init;\\n    if(nums.length == 0){\\n        return limit;\\n    }\\nelse{\\n            for(let i = 0; i < nums.length; i++){\\n        const value = fn(limit,nums[i]);\\n        limit = value\\n        result = value;\\n    }\\n}\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3934783,
                "title": "simple-easy-to-understand-methodess",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val=init;\\n    return nums.reduce(fn,init);\\n    // for(var i=0;i<nums.length;i++){\\n    // val=fn(val,nums[i])\\n    // }\\n    // return val;\\n    // nums.forEach(currElement=>{\\n    //     val=fn(val,currElement)\\n    // });\\n    // return val;\\n\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val=init;\\n    return nums.reduce(fn,init);\\n    // for(var i=0;i<nums.length;i++){\\n    // val=fn(val,nums[i])\\n    // }\\n    // return val;\\n    // nums.forEach(currElement=>{\\n    //     val=fn(val,currElement)\\n    // });\\n    // return val;\\n\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3927686,
                "title": "typescript-solution",
                "content": "# Complexity\\n- Time complexity: 62ms\\n\\n\\n- Space complexity: 44.46MB\\n\\n\\n# Code\\n```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    if(nums.length === 0) return init;\\n    let sum: number = init;\\n    let accum: number;\\n    for(let i = 0; i<nums.length; i++) {\\n        accum = fn(sum, nums[i]);\\n        sum = accum\\n       \\n    }\\n    return sum;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    if(nums.length === 0) return init;\\n    let sum: number = init;\\n    let accum: number;\\n    for(let i = 0; i<nums.length; i++) {\\n        accum = fn(sum, nums[i]);\\n        sum = accum\\n       \\n    }\\n    return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3924094,
                "title": "array-reduce-transformation-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe reduce() method of Array instances executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.\\n\\nThe first time that the callback is run there is no \"return value of the previous calculation\". If supplied, an initial value may be used in its place. Otherwise the array element at index 0 is used as the initial value and iteration starts from the next element (index 1 instead of index 0).\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ninitially, the value is init=0.\\n(0) + nums[0] = 1\\n(1) + nums[1] = 3\\n(3) + nums[2] = 6\\n(6) + nums[3] = 10\\nThe final answer is 10.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for(i in nums)\\n    val=fn(val,nums[i]);\\n    return val;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for(i in nums)\\n    val=fn(val,nums[i]);\\n    return val;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923311,
                "title": "easiest-javascript-solution",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: *```O(n)```*\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar reduce = function(nums, fn, init) {\\n    let arrLength = nums.length;\\n\\n    if(arrLength === 0)\\n        return init;\\n\\n    let val = init;\\n\\n    nums.forEach((element) => {\\n        val = fn(val, element);\\n    })\\n\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```O(n)```\n```\\nvar reduce = function(nums, fn, init) {\\n    let arrLength = nums.length;\\n\\n    if(arrLength === 0)\\n        return init;\\n\\n    let val = init;\\n\\n    nums.forEach((element) => {\\n        val = fn(val, element);\\n    })\\n\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3917306,
                "title": "shortest-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i =0; i< nums.length;i++){\\n      init = fn(init,nums[i])\\n    }\\n   return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i =0; i< nums.length;i++){\\n      init = fn(init,nums[i])\\n    }\\n   return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3911879,
                "title": "easy-and-simple-approach-of-how-to-use-reduce-method",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var ans=init;\\n    for(var i=0; i<nums.length; i++){\\n        ans=fn(ans, nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    var ans=init;\\n    for(var i=0; i<nums.length; i++){\\n        ans=fn(ans, nums[i]);\\n    }\\n    return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3908343,
                "title": "simple-solution-of-array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let v = init;\\n    for(let i=0;i<nums.length;i++)\\n    {\\n        v=fn(v,nums[i]);\\n    }\\n    return v;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let v = init;\\n    for(let i=0;i<nums.length;i++)\\n    {\\n        v=fn(v,nums[i]);\\n    }\\n    return v;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3904734,
                "title": "reduce-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nlet reduce = function (nums, fn, init) {\\n  if (nums.length == 0) {\\n    return init;\\n  }\\n  for (let i = 0; i < nums.length; i++) {\\n    init = fn(init, nums[i]);\\n  }\\n  return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet reduce = function (nums, fn, init) {\\n  if (nums.length == 0) {\\n    return init;\\n  }\\n  for (let i = 0; i < nums.length; i++) {\\n    init = fn(init, nums[i]);\\n  }\\n  return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3902540,
                "title": "javascript-solution",
                "content": "# Code\\n```\\nvar reduce = function(nums, fn, init) {\\n    let accum = init\\n    for (let i = 0; i < nums.length; i++) {\\n        accum = fn(accum, nums[i])\\n    }\\n    return accum\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    let accum = init\\n    for (let i = 0; i < nums.length; i++) {\\n        accum = fn(accum, nums[i])\\n    }\\n    return accum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3897151,
                "title": "beginner-solution",
                "content": "# Intuition && Approach\\nFor each item in \\'nums\\', update the value of \\'init\\' by calling the \\'fn\\' function with init and nums[i].\\n\\nSince init value is updated at each step, at any time it hold the accumulated value of the function. \\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(i=0;i<nums.length;i++){\\n        init = fn(init, nums[i])\\n    }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(i=0;i<nums.length;i++){\\n        init = fn(init, nums[i])\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3895358,
                "title": "the-simplest-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let counter = init;\\n\\n    for(let i = 0; i < nums.length; i++) {\\n        counter = fn(counter, nums[i]);\\n    }\\n\\n    return counter\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let counter = init;\\n\\n    for(let i = 0; i < nums.length; i++) {\\n        counter = fn(counter, nums[i]);\\n    }\\n\\n    return counter\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892837,
                "title": "simple-solution-javascript-for-loop-understandable-code",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach is clear as follows:\\n1. As given in the question , we will first check the condition ,  if the length of the array is 0 or not , if it is 0 , we will directly return 0.\\n2. Now we will iterate the nums array.\\n3. In every iteration , we will update the value of init according to the condition given.\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length===0) return init;\\n    for(let i=0;i<nums.length;i++){\\n        init = fn(init ,nums[i])\\n    }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length===0) return init;\\n    for(let i=0;i<nums.length;i++){\\n        init = fn(init ,nums[i])\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3886962,
                "title": "typescript-solution",
                "content": "# Code\\n```typescript\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    var result: number = init;\\n    for (let n of nums) {\\n        result = fn(result, n);\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```typescript\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n    var result: number = init;\\n    for (let n of nums) {\\n        result = fn(result, n);\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3885846,
                "title": "reduce-java-script",
                "content": "\\nnums: An array of elements over which the reduction operation will be performed.\\nfn: A function that will be applied to each element of the array. This function takes two arguments: an accumulator and the current element, and it returns a new accumulator value.\\ninit: An initial value for the accumulator. If not provided, the first element of the array will be used as the initial accumulator value.\\nThe function uses the reduce method to perform the reduction. The reduce method takes two arguments: the callback function (fn) and the initial value (init). The callback function is applied to each element of the array, and it accumulates a value based on the provided logic. The final result is returned.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    return res = nums.reduce(fn,init)\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    return res = nums.reduce(fn,init)\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3883828,
                "title": "simple-solution-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nVery similiar behaviour of [].reduce here. The base funcionality is way more primitive but works for the given examples.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Iterate over all nums;\\n- Set the init (or the accumulator) with the result of the function call;\\n- Give to the function the arguments it needs, ensuring the accumulator is constantly updated on each iteration;\\n- Return the result.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    nums.forEach((item) => {\\n        init =+ fn(init, item);\\n    });\\n\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    nums.forEach((item) => {\\n        init =+ fn(init, item);\\n    });\\n\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3882742,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i=0;i<nums.length;i++){\\n        init=fn(init,nums[i]);\\n    }\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i=0;i<nums.length;i++){\\n        init=fn(init,nums[i]);\\n    }\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3882178,
                "title": "sol-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  var val = init;\\n\\n  for (var i=0; i<nums.length; i++){\\n    val = fn(val, nums[i])\\n  }\\nreturn val;\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  var val = init;\\n\\n  for (var i=0; i<nums.length; i++){\\n    val = fn(val, nums[i])\\n  }\\nreturn val;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3878463,
                "title": "easy-fast-javascript",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n\\n    if(nums.length === 0){\\n        return init;\\n    }\\n\\n    \\n   let val = init; \\nfor(let i=0 ; i<nums.length; i++) {\\n\\nval = fn(val, nums[i])\\n\\n\\n}\\n\\nreturn val;\\n\\n    \\n};\\n/* here for loop is applied on function to iterate values in function and initial value of(val) is set to init.*/\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n\\n    if(nums.length === 0){\\n        return init;\\n    }\\n\\n    \\n   let val = init; \\nfor(let i=0 ; i<nums.length; i++) {\\n\\nval = fn(val, nums[i])\\n\\n\\n}\\n\\nreturn val;\\n\\n    \\n};\\n/* here for loop is applied on function to iterate values in function and initial value of(val) is set to init.*/\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3877304,
                "title": "execution-in-one-line-with-javascript-sudarshan-gondalwad",
                "content": "# Intuition\\nhere just to execute code i created another reduce function in that reduce function i returned a fn(defined) function once again\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    let ss = nums.reduce((acc,curr)=>{return fn(acc,curr)},init);\\n   \\n    return ss;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    \\n    let ss = nums.reduce((acc,curr)=>{return fn(acc,curr)},init);\\n   \\n    return ss;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3876538,
                "title": "simple-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = init;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        res = fn(res, nums[i])\\n    }\\n    return res \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = init;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        res = fn(res, nums[i])\\n    }\\n    return res \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3875610,
                "title": "without-use-of-reduce-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nlet init=0;\\nvar reduce = function(nums, fn, init) {\\n  let res=init;\\n  for(let i=0; i<nums.length; i++){\\n      if(nums.length===0){\\n          res=nums[i];\\n        //   console.log(res)\\n      }\\n      else{\\n         res= fn(res,nums[i]);\\n        //  console.log(res)\\n      }\\n  }\\n  return res\\n};\\nfn = function sum(accum, curr) { \\n             return accum + curr; \\n             \\n         }\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nlet init=0;\\nvar reduce = function(nums, fn, init) {\\n  let res=init;\\n  for(let i=0; i<nums.length; i++){\\n      if(nums.length===0){\\n          res=nums[i];\\n        //   console.log(res)\\n      }\\n      else{\\n         res= fn(res,nums[i]);\\n        //  console.log(res)\\n      }\\n  }\\n  return res\\n};\\nfn = function sum(accum, curr) { \\n             return accum + curr; \\n             \\n         }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3875580,
                "title": "array-reduce-transformation-in-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let len = nums.length\\n    if (len <= 0) {\\n        return init\\n    }\\n\\n    let val = init\\n    for (let i=0; i<len; i++){\\n        val = fn(val, nums[i])\\n    }\\n    \\n    return val\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let len = nums.length\\n    if (len <= 0) {\\n        return init\\n    }\\n\\n    let val = init\\n    for (let i=0; i<len; i++){\\n        val = fn(val, nums[i])\\n    }\\n    \\n    return val\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3874782,
                "title": "array-reduce-tranformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    \\n    if (nums.length) {\\n        nums.forEach((value, index) => {\\n            result = fn(result, value);\\n        });\\n    }\\n\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let result = init;\\n    \\n    if (nums.length) {\\n        nums.forEach((value, index) => {\\n            result = fn(result, value);\\n        });\\n    }\\n\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3874779,
                "title": "day-07-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) return init;\\n    let val =0;\\n    for(let i=0;i<nums.length;i++){\\n        if(i===0) val =fn(init,nums[i]);\\n        else val = fn(val,nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length === 0) return init;\\n    let val =0;\\n    for(let i=0;i<nums.length;i++){\\n        if(i===0) val =fn(init,nums[i]);\\n        else val = fn(val,nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3873864,
                "title": "easiest-solution-only-for-you",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(nums.length)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let reduced = init;\\n    for(let i=0; i<nums.length; i++){\\n        reduced = fn(reduced, nums[i]);\\n    }\\n    return reduced;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let reduced = init;\\n    for(let i=0; i<nums.length; i++){\\n        reduced = fn(reduced, nums[i]);\\n    }\\n    return reduced;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3873857,
                "title": "simple-solution-tc-beats-90",
                "content": "# Code\\n```\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar reduce = function(nums, fn, init) {\\n    let val = init;\\n    for (let i = 0; i < nums.length; i++) {\\n        val = fn(val, nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3873179,
                "title": "easy-and-best-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. intialize val and assign init to it.\\n2. write condition arr.length===0 and return val.\\n3. define for loop with the statement val=fn(val,nums[i]);.\\n4. after loop return val . \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n O(n)\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n     var val=init;\\n    if(nums.length===0){\\n        return val;\\n    }  \\nfor( var i=0;i<nums.length;i++){\\n    val=fn(val,nums[i]);\\n}\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n     var val=init;\\n    if(nums.length===0){\\n        return val;\\n    }  \\nfor( var i=0;i<nums.length;i++){\\n    val=fn(val,nums[i]);\\n}\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3872748,
                "title": "js-one-liner-the-right-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n $$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce((acc,num,i)=>fn(acc,num),init);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    return nums.reduce((acc,num,i)=>fn(acc,num),init);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3869390,
                "title": "mastering-array-reduction-in-javascript-a-guide-to-the-reduce-function",
                "content": "# Intuition\\nThe \"reduce\" function is a higher-order function commonly used in JavaScript to reduce an array to a single value based on a given accumulator function. It iterates through the input array and applies the accumulator function to each element, updating the accumulator with the result at each step. The final result is the accumulated value.\\n# Approach\\nThe approach used in this code is a simple iteration through the input array \"nums\" using a loop. For each element, the accumulator function \"fn\" is applied, taking the current accumulator value and the current element as arguments. The result of the accumulator function is then updated in the \"outPut\" variable, which acts as the accumulator. The process continues until all elements are processed, and the final accumulated value is returned.\\n# Complexity\\nTime complexity: O(n)\\n\\nThe function iterates through the input array once, performing a constant-time operation for each element.\\nSpace complexity: O(1)\\n\\nThe space complexity is constant because the function uses a fixed amount of space to store the accumulator and other variables, regardless of the input array size.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let outPut = init\\n    for(let i =0;i<nums.length;i++){\\n    outPut =fn(init,nums[i])\\n    init = outPut\\n    }\\n    return outPut\\n};\\n```\\nThis code can be used to reduce an array of numbers to a single value based on a given accumulator function and an initial value. Ensure to test the function with various inputs and accumulator functions to verify its correctness and efficiency.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n  let outPut = init\\n    for(let i =0;i<nums.length;i++){\\n    outPut =fn(init,nums[i])\\n    init = outPut\\n    }\\n    return outPut\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3856130,
                "title": "reduce-function-implementation-with-time-complexity-o-n-and-space-complexity-o-1-along-with-eg",
                "content": "# Intuition and Approach\\nThe code provided is an implementation of the reduce function in JavaScript. The reduce function is a higher-order function that is commonly used for aggregating values in an array. It takes three parameters:\\n\\nnums: An array of numbers (or any other data type) that we want to perform the reduction operation on.\\nfn: A callback function that will be applied to each element in the nums array. This function defines the reduction operation.\\ninit: The initial value to start the reduction. It serves as the initial accumulator value for the reduction operation.\\nLet\\'s go through the code step by step:\\n\\nThe function checks if the nums array is defined and not empty with the condition if (nums && nums.length). If the array is empty or null, it simply returns the init value since there is nothing to reduce.\\n\\nIf the array is not empty, the function initializes a variable called sum to the value of init. This will serve as the accumulator for the reduction process.\\n\\nThe function then iterates through the nums array using a for loop. For each element nums[i], it applies the provided callback function fn to the current accumulator value (sum) and the current element nums[i], and stores the result back in the sum variable. The callback function fn is expected to take two parameters: the accumulator (sum) and the current element from the array (nums[i]), and return a new value representing the updated accumulator.\\n\\nAfter processing all elements in the nums array, the function returns the final value of the sum, which represents the result of the reduction operation.\\n\\nHere\\'s an example of how you could use the reduce function:\\n\\n```\\n// Example 1: Summing all elements in an array\\nconst numbers = [1, 2, 3, 4, 5];\\nconst sum = reduce(numbers, (acc, num) => acc + num, 0);\\nconsole.log(sum); // Output: 15\\n\\n// Example 2: Concatenating all elements in an array\\nconst words = [\\'Hello\\', \\' \\', \\'world\\', \\'!\\'];\\nconst sentence = reduce(words, (acc, word) => acc + word, \\'\\');\\nconsole.log(sentence); // Output: \\'Hello world!\\'\\n\\n```\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    if (nums && nums.length) {\\n        let sum = init;\\n        for (let i = 0; i < nums.length; i++) {\\n            sum = fn(sum, nums[i]);\\n        }\\n        return sum\\n    } else return init\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Example 1: Summing all elements in an array\\nconst numbers = [1, 2, 3, 4, 5];\\nconst sum = reduce(numbers, (acc, num) => acc + num, 0);\\nconsole.log(sum); // Output: 15\\n\\n// Example 2: Concatenating all elements in an array\\nconst words = [\\'Hello\\', \\' \\', \\'world\\', \\'!\\'];\\nconst sentence = reduce(words, (acc, word) => acc + word, \\'\\');\\nconsole.log(sentence); // Output: \\'Hello world!\\'\\n\\n```\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function (nums, fn, init) {\\n    if (nums && nums.length) {\\n        let sum = init;\\n        for (let i = 0; i < nums.length; i++) {\\n            sum = fn(sum, nums[i]);\\n        }\\n        return sum\\n    } else return init\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3855210,
                "title": "fast-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:1 \\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val =init;\\n    if(nums.length==0) return val;\\n    else{\\n    for(const i of nums){\\n      val=fn(val,i);\\n    }\\n    return val;\\n}\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let val =init;\\n    if(nums.length==0) return val;\\n    else{\\n    for(const i of nums){\\n      val=fn(val,i);\\n    }\\n    return val;\\n}\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3853130,
                "title": "this-was-my-first-problem-that-i-solve-on-my-own-it-was-amazing",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n<b>how to solve the *problem*</b>\\nin order to solve this \\u23EB\\u23EB\\nyou must understand the questions\\nyou need to use <b>if</b>\\nand <b>for</b>loop\\n \\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nfirst you cheack to see if nums is emty\\nif so you will return init\\nand if not you use forloop and call fn \\nfunction and save that in temporary value\\nand return it\\n\\n\\n# Complexity\\n- Time complexity:45ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\uD83E\\uDD37\\u200D\\u2642\\uFE0F\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = null;\\n    if(nums.length==0){\\n        return init;\\n    }\\n    res = fn(init,nums[0]);\\n    for(let i=1;i<nums.length;i++){\\n        res = fn(res , nums[i]);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let res = null;\\n    if(nums.length==0){\\n        return init;\\n    }\\n    res = fn(init,nums[0]);\\n    for(let i=1;i<nums.length;i++){\\n        res = fn(res , nums[i]);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3853102,
                "title": "simple-and-fast-solution",
                "content": "# Intuition\\n\\n#### A simple solution, the essence of which is the operation of the cycle.\\n\\n1. The variable ***numb*** is set outside the loop and equated to ***init***.\\n\\n2. Then, by entering this variable into the **fn function** as **accum** and a list item with index ***i*** as **curr**, we get the necessary value, which is updated at each step of the loop.\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let numb = init;\\n    for (let i = 0; i < nums.length; ++i) {\\n        let step = fn(numb, nums[i])\\n        numb = step;\\n    }\\n    return numb;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    let numb = init;\\n    for (let i = 0; i < nums.length; ++i) {\\n        let step = fn(numb, nums[i])\\n        numb = step;\\n    }\\n    return numb;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3851027,
                "title": "o-n-solution-javascript-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length==0) return init;\\n    var val=init;\\n    for(var i=0;i<nums.length;i++){\\n        val=fn(val,nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length==0) return init;\\n    var val=init;\\n    for(var i=0;i<nums.length;i++){\\n        val=fn(val,nums[i]);\\n    }\\n    return val;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3847743,
                "title": "simple-approach-with-less-code",
                "content": "# Intuition\\nThis approach emphasizes achieving better performance and save memory with minimal code. Using **for loop instead of foreach loop** to make the execution faster.\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i = 0; i < nums.length; i++) init = fn(init, nums[i]);\\n    return init;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    for(let i = 0; i < nums.length; i++) init = fn(init, nums[i]);\\n    return init;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3847253,
                "title": "array-reduce-transformation-with-ai-powered-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe reduce function aims to reduce an array of numbers ```\\n(nums)\\n``` to a single value using a provided function ```(fn)``` and an initial value ```(init)```.\\nIt applies the function to each element of the array in sequence, updating the accumulated value along the way.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach used in the reduce function is straightforward. It starts with the initial value ```(init)``` and iterates over each element in the nums array. For each element, the provided function ```\\n(fn)``` is applied to the current accumulated value and the current element of the array. The result of the function becomes the new accumulated value. This process is repeated until all elements in the array have been processed.\\n# Complexity\\n- Time complexity: **60ms**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:**42.46mb**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length == 0) return init\\n    let val = init;\\n    for(let i=0; i<nums.length; i++){\\n        val = fn(val,nums[i]);\\n    }\\n    return val\\n};\\n```",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\n(nums)\\n```\n```(fn)```\n```(init)```\n```(init)```\n```\\n(fn)```\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n    if(nums.length == 0) return init\\n    let val = init;\\n    for(let i=0; i<nums.length; i++){\\n        val = fn(val,nums[i]);\\n    }\\n    return val\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3846415,
                "title": "array-reduce-transformation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->Initialize a variable to store the accumulated value. This variable will be updated in each iteration as the reducer function is applied to each element of the array.\\n\\nStart iterating through the input integer array using a loop, accessing each element one by one.\\n\\nApply the reducer function to the current element and the accumulated value. Update the accumulated value with the result.\\n\\nContinue the loop until all elements of the array have been processed.\\n\\nAfter the loop, the accumulated value will hold the reduced result.\\n\\nFinally, return the accumulated value as the output of the reduction operation.\\n\\nBy following these steps, we can implement the custom applyReducer function that performs the reduction operation as required without using the built-in Array.reduce method. The function will take care of handling the edge case when the array is empty and return the initial value in that scenario. The time complexity of the solution should be linear, and the space complexity should be constant, making it an efficient and optimal solution for the given problem.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->The problem requires us to create a reduced array by applying a reducer function to each element of the input array. The reducer function takes two arguments, an accumulator and the current element from the array. The goal is to perform a reduction operation, starting with an initial value and applying the reducer function to each element in a left-to-right order.\\n\\nTo solve the problem, we have created the applyReducer function, which takes three parameters:\\n\\nnums: The input integer array on which the reduction operation needs to be applied.\\nfn: The reducer function that will be used to combine the elements.\\ninit: The initial value for the reduction operation.\\nThe steps to solve the problem are as follows:\\n\\nInitialize a variable init to store the current accumulated value. It is set to the provided initial value.\\n\\nUse a loop to iterate through the input array nums.\\n\\nIn each iteration, update the init variable by applying the reducer function fn to the current element and the current value of init.\\n\\nAfter the loop, the init variable will hold the reduced value.\\n\\nReturn the final value of init as the result of the reduction operation.\\n\\nThe applyReducer function performs a left-to-right reduction of the input array nums, applying the provided reducer function fn to combine the elements. The implementation avoids using the built-in Array.reduce method and performs the reduction operation efficiently with a time complexity of O(n) and a space complexity of O(1), where \"n\" is the number of elements in the input array.\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n   for (let i = 0; i < nums.length; i++) {\\n    init = fn(init, nums[i]);\\n  }\\n  return init\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {Function} fn\\n * @param {number} init\\n * @return {number}\\n */\\nvar reduce = function(nums, fn, init) {\\n   for (let i = 0; i < nums.length; i++) {\\n    init = fn(init, nums[i]);\\n  }\\n  return init\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1889348,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1863990,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1888942,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1865579,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2007521,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1993683,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2072122,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2070432,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2066965,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2016533,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1889348,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1863990,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1888942,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1865579,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2007521,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1993683,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2072122,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2070432,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2066965,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2016533,
                "content": [
                    {
                        "username": "user0727se",
                        "content": "If we cannot use built in methods , how are these challenges javascript specific?"
                    },
                    {
                        "username": "Mshashikanth",
                        "content": "easy loop\\'s build my confidence\\uD83D\\uDE07\\uD83D\\uDE07\\uD83D\\uDE07"
                    },
                    {
                        "username": "adityadixit7054",
                        "content": "inside for loop:\\ninit=fn(init,arr[i])\\nafter execution of for loop return init."
                    },
                    {
                        "username": "Sabbir-Shuvo",
                        "content": "just follow the hints"
                    },
                    {
                        "username": "Dev_anand",
                        "content": "Is it okay to always check the hints?"
                    },
                    {
                        "username": "kissmycodee",
                        "content": "Whats wrong with this ?\\nfunction reduce(nums, fn, init) {\\n    let result = init;\\n\\n    for (let i = 0; i <= nums.length; i++) {\\n        result = fn(result, nums[i]);\\n    }\\n    return result;\\n};"
                    },
                    {
                        "username": "felix-mohrmann",
                        "content": "The condition of your for loop is not correct.. Try this:\n`i <= nums.length -1;`\n\nor just this: \n`i < nums.length;`"
                    },
                    {
                        "username": "KingCoderHK",
                        "content": "I\\'m curious as to why we cannot use a for..in loop here\\n`var reduce = function(nums, fn, init) {\\n let start = init; \\nfor (value in nums) {\\nstart = fn(start, value); }\\nreturn start; }`\\n\\nfor the case: [1, 2, 3, 4] with init = 0, this gives me 123??"
                    },
                    {
                        "username": "curiosit",
                        "content": "I have the same question, tried for (num in nums) and it did not work. However just changing to for(let i = 0; i < nums.length; i ++) solved it."
                    },
                    {
                        "username": "GatsuIncompetent",
                        "content": "var reduce = function(nums, fn, init) {\n    if (nums.length === 0) {\n        return init;\n    }else {\n    let val = init;\n    for( let i = 0; i < nums.length; i++){\n        val = fn(val, nums[i])\n    };\n        return val\n    }\n};"
                    },
                    {
                        "username": "moechacino",
                        "content": "omg this is my first thing i can do without surfing the answer in internet. Good for me to build my confidence as newbe\n\nvar reduce = function(nums, fn, init) {\n    if (nums.length != 0){\n        var val = fn(init, nums[0]);\n        for(let i = 1; i < nums.length; i++){\n            val = fn(val, nums[i]);\n        }\n        return val;\n    }\n    return init;\n};"
                    },
                    {
                        "username": "bhati25",
                        "content": "<img src = \"https://blog.webix.com/wp-content/uploads/2021/07/26.jpg\" width = \"150\" height = \"150\">"
                    },
                    {
                        "username": "rayhan-dev",
                        "content": "```\\ntype Fn = (accum: number, curr: number) => number\\n\\nfunction reduce(nums: number[], fn: Fn, init: number): number {\\n  let _result = init;\\n  nums.forEach(item => {\\n    _result = fn(_result, item);\\n  });\\n  return _result;\\n};\\n```"
                    }
                ]
            }
        ]
    }
]