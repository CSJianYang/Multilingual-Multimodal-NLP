[
    {
        "title": "Smallest Value of the Rearranged Number",
        "question_content": "You are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.\nReturn the rearranged number with minimal value.\nNote that the sign of the number does not change after rearranging the digits.\n&nbsp;\nExample 1:\n\nInput: num = 310\nOutput: 103\nExplanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. \nThe arrangement with the smallest value that does not contain any leading zeros is 103.\n\nExample 2:\n\nInput: num = -7605\nOutput: -7650\nExplanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.\n\n&nbsp;\nConstraints:\n\n\t-1015 <= num <= 1015",
        "solutions": [
            {
                "id": 1748511,
                "title": "sort-and-swap",
                "content": "We convert `num` to a string and then:\\n- If negative: sort descending, excluding the sign.\\n- If positive: sort ascending\\n\\t- Find first non-zero number (e.g. 000**2**37)\\n\\t- Swap it with the first number (e.g. **2**00**0**37)\\n\\n**Python**\\n```python\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        s = sorted(str(abs(num)), reverse = num < 0)\\n        non_zero = next((i for i, n in enumerate(s) if n != \\'0\\'), 0)\\n        s[0], s[non_zero] = s[non_zero], s[0]\\n        return int(\\'\\'.join(s)) * (1 if num >= 0 else -1)\\n```\\n**C++**\\n```cpp\\nlong long smallestNumber(long long num) {\\n    auto s = to_string(abs(num));\\n    sort(begin(s), end(s), [&](int a, int b){ return num < 0 ? a > b : a < b; });\\n    if (num > 0)\\n        swap(s[0], s[s.find_first_not_of(\\'0\\')]);\\n    return stoll(s) * (num < 0 ? -1 : 1);\\n}\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        s = sorted(str(abs(num)), reverse = num < 0)\\n        non_zero = next((i for i, n in enumerate(s) if n != \\'0\\'), 0)\\n        s[0], s[non_zero] = s[non_zero], s[0]\\n        return int(\\'\\'.join(s)) * (1 if num >= 0 else -1)\\n```\n```cpp\\nlong long smallestNumber(long long num) {\\n    auto s = to_string(abs(num));\\n    sort(begin(s), end(s), [&](int a, int b){ return num < 0 ? a > b : a < b; });\\n    if (num > 0)\\n        swap(s[0], s[s.find_first_not_of(\\'0\\')]);\\n    return stoll(s) * (num < 0 ? -1 : 1);\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748527,
                "title": "python-easy-and-concise-with-explanation",
                "content": "# **Explanation**\\nIf it\\'s negative, simple sort reversely all digits.\\nIf it\\'s positive, swap the fisrt digit and the first non-zero digit.\\n\\nNote that `0` is neither positive nor negative,\\ntake care of it.\\n<br>\\n\\n**C++**\\nall by @blackspinner\\n```cpp\\n    long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        sort(s.begin(), s.end());\\n        if (num <= 0) {\\n            return -1 * stoll(string(s.rbegin(), s.rend()));\\n        }\\n        int i = s.find_first_not_of(\\'0\\');\\n        swap(s[0], s[i]);\\n        return stoll(s);\\n    }\\n```\\n**Python**\\n```py\\n    def smallestNumber(self, a):\\n        s = sorted(str(abs(a)))\\n        if a <= 0:\\n            return -int(\\'\\'.join(s[::-1]))\\n        i = next(i for i,a in enumerate(s) if a > \\'0\\')\\n        s[i], s[0] = s[0], s[i]\\n        return int(\\'\\'.join(s))\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```cpp\\n    long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        sort(s.begin(), s.end());\\n        if (num <= 0) {\\n            return -1 * stoll(string(s.rbegin(), s.rend()));\\n        }\\n        int i = s.find_first_not_of(\\'0\\');\\n        swap(s[0], s[i]);\\n        return stoll(s);\\n    }\\n```\n```py\\n    def smallestNumber(self, a):\\n        s = sorted(str(abs(a)))\\n        if a <= 0:\\n            return -int(\\'\\'.join(s[::-1]))\\n        i = next(i for i,a in enumerate(s) if a > \\'0\\')\\n        s[i], s[0] = s[0], s[i]\\n        return int(\\'\\'.join(s))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1749751,
                "title": "c-sort-and-erase-east-understanding",
                "content": "\\uD83D\\uDC68\\u200D\\uD83D\\uDCBB Friend\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that motivates me to create a better post like this \\u270D\\uFE0F\\n____________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________\\n\\n#### \\u2714\\uFE0F **Question Conclusion**\\n* Make the number given number smallest\\n#### \\u2714\\uFE0F **Solution - I (Best Approach)**\\n##### **Intuition :-**\\n* convert integer into string and Sort and Erase.\\n##### **Code :-**\\n```\\nclass Solution\\n{\\npublic:\\n    long long smallestNumber(long long num)\\n    {\\n        if (num < 0)\\n        {\\n            string s = to_string(-num);\\n            sort(s.rbegin(), s.rend());\\n            return -stoll(s);\\n        }\\n        else if (num == 0)\\n            return 0;\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        int i = 0;\\n        while (s[i] == \\'0\\')\\n            i++;\\n        char c = s[i];\\n        s.erase(s.begin() + i);\\n        s = c + s;\\n        return stoll(s);\\n    }\\n};\\n```\\n_____________________________________________________________________________________________________________\\n_____________________________________________________________________________________________________________\\n\\n\\uD83D\\uDCBBIf there are any suggestions/questions in my post, comment below \\uD83D\\uDC47",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    long long smallestNumber(long long num)\\n    {\\n        if (num < 0)\\n        {\\n            string s = to_string(-num);\\n            sort(s.rbegin(), s.rend());\\n            return -stoll(s);\\n        }\\n        else if (num == 0)\\n            return 0;\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        int i = 0;\\n        while (s[i] == \\'0\\')\\n            i++;\\n        char c = s[i];\\n        s.erase(s.begin() + i);\\n        s = c + s;\\n        return stoll(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748635,
                "title": "java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num == 0){\\n            return 0;\\n        }\\n        boolean isNegative = num < 0;\\n        num  = num < 0 ? num * -1 : num;\\n        \\n        char[] c = String.valueOf(num).toCharArray();\\n        Arrays.sort(c);\\n        String str;\\n        if(!isNegative){\\n            int non = 0;\\n\\t\\t\\t//if not negative we need to find out the first non-leading zero then swap with first zero\\n            for(; non < c.length; non++){\\n                if(c[non] != \\'0\\'){\\n                    break;\\n                }\\n            }\\n            char temp = c[non];\\n            c[non] = c[0];\\n            c[0] = temp;\\n            str = new String(c);\\n        }else{\\n            str = new String(c);\\n            StringBuilder sb = new StringBuilder(str);\\n            str = \"-\".concat(sb.reverse().toString());\\n        }\\n        return Long.valueOf(str);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num == 0){\\n            return 0;\\n        }\\n        boolean isNegative = num < 0;\\n        num  = num < 0 ? num * -1 : num;\\n        \\n        char[] c = String.valueOf(num).toCharArray();\\n        Arrays.sort(c);\\n        String str;\\n        if(!isNegative){\\n            int non = 0;\\n\\t\\t\\t//if not negative we need to find out the first non-leading zero then swap with first zero\\n            for(; non < c.length; non++){\\n                if(c[non] != \\'0\\'){\\n                    break;\\n                }\\n            }\\n            char temp = c[non];\\n            c[non] = c[0];\\n            c[0] = temp;\\n            str = new String(c);\\n        }else{\\n            str = new String(c);\\n            StringBuilder sb = new StringBuilder(str);\\n            str = \"-\".concat(sb.reverse().toString());\\n        }\\n        return Long.valueOf(str);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2508270,
                "title": "o-n-c",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n        string s = to_string(num);\\n        unordered_map<char,int>map;\\n        \\n        for(auto &i : s) map[i]++;\\n        \\n        string t;\\n        \\n        if(num<0){\\n            for(char i = \\'9\\';i>=\\'0\\';i--){\\n                while(map[i]){\\n                    t+=i;\\n                    map[i]--;\\n                }\\n            }\\n            return stoll(t) * -1;\\n        }\\n        \\n        //if positive or 0\\n        for(char i = \\'1\\';i<=\\'9\\';i++){\\n            if(map[i]){                    \\n                t+=i;\\n                map[i]--;\\n                break;\\n            }\\n        }\\n        \\n        for(char i = \\'0\\';i<=\\'9\\';i++){\\n            while(map[i]){\\n                t+=i;\\n                map[i]--;\\n            }\\n        }\\n        \\n        return stoll(t);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n        string s = to_string(num);\\n        unordered_map<char,int>map;\\n        \\n        for(auto &i : s) map[i]++;\\n        \\n        string t;\\n        \\n        if(num<0){\\n            for(char i = \\'9\\';i>=\\'0\\';i--){\\n                while(map[i]){\\n                    t+=i;\\n                    map[i]--;\\n                }\\n            }\\n            return stoll(t) * -1;\\n        }\\n        \\n        //if positive or 0\\n        for(char i = \\'1\\';i<=\\'9\\';i++){\\n            if(map[i]){                    \\n                t+=i;\\n                map[i]--;\\n                break;\\n            }\\n        }\\n        \\n        for(char i = \\'0\\';i<=\\'9\\';i++){\\n            while(map[i]){\\n                t+=i;\\n                map[i]--;\\n            }\\n        }\\n        \\n        return stoll(t);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1794684,
                "title": "c-sort-0ms-east-to-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s=to_string(abs(num)); //long long to string\\n        sort(s.begin(),s.end()); // sort the string\\n        int i=0;\\n        long long res;\\n        if(num<=0){ //if negetive number\\n            reverse(s.begin(),s.end());  // reverse the string\\n            res= -stoll(s); //string to long long\\n        }\\n        else{ // if positive\\n            while(s[i]==\\'0\\'){ //come upto first non zero number\\n                i++;\\n            }\\n            swap(s[0],s[i]); // now swap first digit with first non zero number\\n            res= stoll(s); //string to long long \\n        }\\n        return res;\\n    }\\n};\\n```\\n*If you have any doubt, feel free to ask below.*\\n**Upvote if you like this!**",
                "solutionTags": [
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s=to_string(abs(num)); //long long to string\\n        sort(s.begin(),s.end()); // sort the string\\n        int i=0;\\n        long long res;\\n        if(num<=0){ //if negetive number\\n            reverse(s.begin(),s.end());  // reverse the string\\n            res= -stoll(s); //string to long long\\n        }\\n        else{ // if positive\\n            while(s[i]==\\'0\\'){ //come upto first non zero number\\n                i++;\\n            }\\n            swap(s[0],s[i]); // now swap first digit with first non zero number\\n            res= stoll(s); //string to long long \\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748615,
                "title": "c-sorting-digits",
                "content": "**Connect with me** [Linkedin](https://www.linkedin.com/in/sarvesh-khandelwal-206b171a7/)\\n```\\n long long smallestNumber(long long num) {\\n        \\n        \\n        \\n        vector<int> digits;\\n        \\n        if(num==0) return 0;\\n        if(num<0){\\n            num*=-1;\\n            \\n            \\n            while(num){\\n                digits.push_back(num%10);\\n                num/=10;\\n            }\\n            \\n            \\n            \\n            sort(digits.begin(),digits.end(),greater<int>());\\n            long long ans=0;\\n            \\n            for(int i=0;i<digits.size();i++){\\n                ans=ans*10 + digits[i];\\n            }\\n            \\n            \\n            return -1*ans;\\n        }\\n        else{\\n            \\n            \\n            \\n            while(num){\\n                digits.push_back(num%10);\\n                num/=10;\\n            }\\n            \\n            \\n            long long ans=0;\\n            sort(digits.begin(),digits.end());\\n            \\n            \\n            for(auto x: digits) cout<<x<<\" \";\\n            cout<<endl;\\n            int zero=0;\\n            \\n            \\n            int i=0;\\n            \\n            while(digits[i]==0) {\\n                zero+=1;\\n                i+=1;\\n            }\\n            \\n            ans=digits[i];\\n            \\n            \\n            while(zero--){\\n                ans=ans*10 + 0;\\n            }\\n            for(int j=i+1;j<digits.size();j++){\\n                ans=ans*10 + digits[j];\\n            }\\n            \\n            \\n            return ans;\\n        }\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n long long smallestNumber(long long num) {\\n        \\n        \\n        \\n        vector<int> digits;\\n        \\n        if(num==0) return 0;\\n        if(num<0){\\n            num*=-1;\\n            \\n            \\n            while(num){\\n                digits.push_back(num%10);\\n                num/=10;\\n            }\\n            \\n            \\n            \\n            sort(digits.begin(),digits.end(),greater<int>());\\n            long long ans=0;\\n            \\n            for(int i=0;i<digits.size();i++){\\n                ans=ans*10 + digits[i];\\n            }\\n            \\n            \\n            return -1*ans;\\n        }\\n        else{\\n            \\n            \\n            \\n            while(num){\\n                digits.push_back(num%10);\\n                num/=10;\\n            }\\n            \\n            \\n            long long ans=0;\\n            sort(digits.begin(),digits.end());\\n            \\n            \\n            for(auto x: digits) cout<<x<<\" \";\\n            cout<<endl;\\n            int zero=0;\\n            \\n            \\n            int i=0;\\n            \\n            while(digits[i]==0) {\\n                zero+=1;\\n                i+=1;\\n            }\\n            \\n            ans=digits[i];\\n            \\n            \\n            while(zero--){\\n                ans=ans*10 + 0;\\n            }\\n            for(int j=i+1;j<digits.size();j++){\\n                ans=ans*10 + digits[j];\\n            }\\n            \\n            \\n            return ans;\\n        }\\n    }\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1748778,
                "title": "java-solution-using-count-array-explained-with-comments",
                "content": "Use count array to maintain count of each digit. \\nUsing the count array form the rearranged number again.\\nIn case of positive number, make sure the minimum digit with non zero count comes first and then other digits can be included whose count are non zero (including the digit \\'0\\').\\n\\nIn case of negative number, count can be considered in reverse order, with count of digit 9 considered first, then 8 and likewise.\\n\\nBelow is the implementation of the approach:\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        int[] count = new int[10];\\n        long tempNum = num > 0 ? num : num * -1;\\n        int min = 10;\\n\\t\\t// get the count of each digit\\n        while (tempNum > 0) {\\n            int rem = (int)(tempNum % 10);\\n            if (rem != 0) {\\n                min = Math.min(min, rem);\\n            }\\n            count[rem]++;\\n            tempNum = tempNum / 10;\\n        }\\n\\t\\t\\n        long output = 0;\\n\\t\\t// positive number\\n        if (num > 0) {\\n            \\n            output = output * 10 + min; // add the min non zero digit first in the output\\n            count[min]--;  //decrement the count of that digit\\n         \\t// iterate all the digits from ) to 9 and get the count value to form the number\\n            for (int i = 0; i < 10; i++) {\\n                for (int j = 0; j < count[i]; j++) {\\n                    output = output * 10 + i;\\n                }\\n            }\\n        } else {  //negative number\\n\\t\\t   //iterate in reverse order (from 9 to 0)\\n            for (int i = 9; i >= 0; i--) {\\n                for (int j = 0; j < count[i]; j++) {\\n                    output = output * 10 + i;\\n                }\\n            }\\n            output = output * -1; //multiply with -1 to make output negative\\n        }\\n        return output;\\n    }\\n}\\n```\\n\\nSpace Complexity : O(k) k = 10, overall its a constant space.\\nTime Complexity : O(logN) : N is the given input.\\n",
                "solutionTags": [
                    "Java",
                    "Counting Sort"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        int[] count = new int[10];\\n        long tempNum = num > 0 ? num : num * -1;\\n        int min = 10;\\n\\t\\t// get the count of each digit\\n        while (tempNum > 0) {\\n            int rem = (int)(tempNum % 10);\\n            if (rem != 0) {\\n                min = Math.min(min, rem);\\n            }\\n            count[rem]++;\\n            tempNum = tempNum / 10;\\n        }\\n\\t\\t\\n        long output = 0;\\n\\t\\t// positive number\\n        if (num > 0) {\\n            \\n            output = output * 10 + min; // add the min non zero digit first in the output\\n            count[min]--;  //decrement the count of that digit\\n         \\t// iterate all the digits from ) to 9 and get the count value to form the number\\n            for (int i = 0; i < 10; i++) {\\n                for (int j = 0; j < count[i]; j++) {\\n                    output = output * 10 + i;\\n                }\\n            }\\n        } else {  //negative number\\n\\t\\t   //iterate in reverse order (from 9 to 0)\\n            for (int i = 9; i >= 0; i--) {\\n                for (int j = 0; j < count[i]; j++) {\\n                    output = output * 10 + i;\\n                }\\n            }\\n            output = output * -1; //multiply with -1 to make output negative\\n        }\\n        return output;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750022,
                "title": "clean-c-code-easy-to-understand",
                "content": "If number is `negative` , sort and just reverse. \\nAnd If number is `positive`, sort and check if first character is \\'0\\' then flip it with first non-negative.\\n\\n```  \\nclass Solution {\\npublic:\\n  \\n    #define ll long long;\\n    \\n    long long smallestNumber(long long num) {\\n        \\n        string str = to_string(num);\\n        sort(str.begin(), str.end());\\n        \\n        if(num < 0){\\n            reverse(str.begin(), str.end());      \\n            return -stoll(str); \\n        }\\n        \\n        \\n        if(str[0] == \\'0\\'){\\n            for(int i = 0; i < str.size(); i++){\\n                if(str[i] > \\'0\\'){\\n                    str[0] = str[i];\\n                    str[i] = \\'0\\';\\n                    break;\\n                }\\n            }\\n        }\\n        \\n        return stoll(str); \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n  \\n    #define ll long long;\\n    \\n    long long smallestNumber(long long num) {\\n        \\n        string str = to_string(num);\\n        sort(str.begin(), str.end());\\n        \\n        if(num < 0){\\n            reverse(str.begin(), str.end());      \\n            return -stoll(str); \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2685513,
                "title": "c-solution-beats-100-tc-o-n",
                "content": "# Easy C++ code with explanation:\\nAs, we need to rearrange the digits to form the smallest possible numbers, the most eficiient way would be to convert it to string. So,\\n1. First, we check if the number starts with a negative sign \\'-\\' and resize the string excluding the first index.\\n2. We create a frequency array to count the occurences of every digit.\\n3. Now, we have to add the digits to create the smallest possible number.\\n\\nFor this, there will be 2 cases - \\n1. If the number is negative:\\n* We have to create the largest number. \\n* For this, we will be traversing the array from the end and adding the available digits in descending order. \\n\\nFor negative:\\n\\n\\tfor(int i = 9; i>0; i--) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            }\\n\\n2. When the number is positive:\\n* \\tAs, we don\\'t want any leading zeroes, we will start traversing from index \\'1\\' and when count[i] > 0, we will add this to the ans and reduce the count by 1.\\n* \\tThen add all the remaining digits in the ascending order of indexes.\\n\\t\\t\\t\\t\\nFor positive \\n\\n\\tfor(int i = 1; i<10; i++) {\\n                if(v[i] > 0) {\\n                    v[i]--;\\n                    ans += to_string(i);\\n                    break;\\n                }\\n            }\\n            for(int i = 0; i<10; i++) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            }\\n\\t\\t\\t\\nHere is the final code with appropriate comments:\\n\\n    long long smallestNumber(long long num) {\\n        string ans = \"\";\\n        vector<int> v(10);\\n        // convert the integer to string\\n        string s = to_string(num);\\n        \\n        // check if the number is negative\\n        bool neg = false;\\n        if(s[0] == \\'-\\') {\\n            neg = true;\\n            s = s.substr(1, s.size()-1);\\n        }\\n\\n        for(long long i = 0; i<s.size(); i++) {\\n            v[s[i]-\\'0\\']++;\\n        }\\n        \\n        // for negative integer\\n        if(neg) {\\n            ans = \"-\";\\n            for(int i = 9; i>=0; i--) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            }\\n        }\\n        \\n        // for positive integer\\n        else {\\n            for(int i = 1; i<10; i++) {\\n                if(v[i] > 0) {\\n                    v[i]--;\\n                    ans += to_string(i);\\n                    break;\\n                }\\n            }\\n            for(int i = 0; i<10; i++) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            } \\n        }\\n\\t\\treturn stoll(ans);\\n    }",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "# Easy C++ code with explanation:\\nAs, we need to rearrange the digits to form the smallest possible numbers, the most eficiient way would be to convert it to string. So,\\n1. First, we check if the number starts with a negative sign \\'-\\' and resize the string excluding the first index.\\n2. We create a frequency array to count the occurences of every digit.\\n3. Now, we have to add the digits to create the smallest possible number.\\n\\nFor this, there will be 2 cases - \\n1. If the number is negative:\\n* We have to create the largest number. \\n* For this, we will be traversing the array from the end and adding the available digits in descending order. \\n\\nFor negative:\\n\\n\\tfor(int i = 9; i>0; i--) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            }\\n\\n2. When the number is positive:\\n* \\tAs, we don\\'t want any leading zeroes, we will start traversing from index \\'1\\' and when count[i] > 0, we will add this to the ans and reduce the count by 1.\\n* \\tThen add all the remaining digits in the ascending order of indexes.\\n\\t\\t\\t\\t\\nFor positive \\n\\n\\tfor(int i = 1; i<10; i++) {\\n                if(v[i] > 0) {\\n                    v[i]--;\\n                    ans += to_string(i);\\n                    break;\\n                }\\n            }\\n            for(int i = 0; i<10; i++) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            }\\n\\t\\t\\t\\nHere is the final code with appropriate comments:\\n\\n    long long smallestNumber(long long num) {\\n        string ans = \"\";\\n        vector<int> v(10);\\n        // convert the integer to string\\n        string s = to_string(num);\\n        \\n        // check if the number is negative\\n        bool neg = false;\\n        if(s[0] == \\'-\\') {\\n            neg = true;\\n            s = s.substr(1, s.size()-1);\\n        }\\n\\n        for(long long i = 0; i<s.size(); i++) {\\n            v[s[i]-\\'0\\']++;\\n        }\\n        \\n        // for negative integer\\n        if(neg) {\\n            ans = \"-\";\\n            for(int i = 9; i>=0; i--) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            }\\n        }\\n        \\n        // for positive integer\\n        else {\\n            for(int i = 1; i<10; i++) {\\n                if(v[i] > 0) {\\n                    v[i]--;\\n                    ans += to_string(i);\\n                    break;\\n                }\\n            }\\n            for(int i = 0; i<10; i++) {\\n                while(v[i]--) {\\n                    ans += to_string(i);\\n                }\\n            } \\n        }\\n\\t\\treturn stoll(ans);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1975706,
                "title": "sort-c-100-faster",
                "content": "To make a postive number smallest we just need to sort it in increasing order, but we need to remove the leading zeroes.\\nAnd to make a negative number smallest we just need to sort it in decreasing order.\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0) return 0;\\n        string s = to_string(num);\\n        int neg = 0;\\n        if(num<0) neg = 1;\\n        if(neg==0) {\\n            sort(s.begin(), s.end());\\n        } else {\\n            sort(s.begin(), s.end(), greater<int>());\\n        }\\n\\t\\t// we remove all leading zeroes from the front.\\n        int zeroes = 0;\\n        char val;\\n        for(int i = 0; i < s.length(); i++) {\\n            if(s[i] == \\'0\\') zeroes++;\\n            else {\\n                val = s[i];\\n                break;\\n            }\\n        }\\n        for(int i = 0; i <= zeroes; i++) {\\n            if(i==0) s[i] = val;\\n            else\\n                s[i] = \\'0\\';\\n        }\\n        num = stoll(s);\\n        if(neg == 1) num *= -1;\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0) return 0;\\n        string s = to_string(num);\\n        int neg = 0;\\n        if(num<0) neg = 1;\\n        if(neg==0) {\\n            sort(s.begin(), s.end());\\n        } else {\\n            sort(s.begin(), s.end(), greater<int>());\\n        }\\n\\t\\t// we remove all leading zeroes from the front.\\n        int zeroes = 0;\\n        char val;\\n        for(int i = 0; i < s.length(); i++) {\\n            if(s[i] == \\'0\\') zeroes++;\\n            else {\\n                val = s[i];\\n                break;\\n            }\\n        }\\n        for(int i = 0; i <= zeroes; i++) {\\n            if(i==0) s[i] = val;\\n            else\\n                s[i] = \\'0\\';\\n        }\\n        num = stoll(s);\\n        if(neg == 1) num *= -1;\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1771235,
                "title": "c-82-faster-comments-for-easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        //Edge case\\n        if(num == 0) return 0;\\n        //Checking if num is negative or positive\\n        bool flag = num < 0 ? true : false;\\n        \\n        string s = to_string(num);\\n        \\n        //For negative, digits will be sorted decreasing order -7605 -> 7650-\\n        if(flag) sort(s.begin(), s.end(), greater<char>());\\n        // else digits will be sorted increasing 310 -> 013\\n        else sort(s.begin(), s.end());\\n        \\n        //If there are leading zeroes, swap it with recent proper digit from left\\n        // 00559\\n        // ^ ^\\n        // | |\\n        // ---\\n        int i = 0;\\n        while(s[i] == \\'0\\' && i<s.length()){\\n            i++;\\n        }\\n        swap(s[i], s[0]);\\n        \\n        //Since there will be dash in end in negative after sorting, so we are simply \\n        //removing it and we\\'ll take care of that later.\\n        if(flag) s.erase(s.begin() + s.length()-1, s.end());\\n        \\n        //Building number from string \\n        long long finalval = 0;\\n        for(auto x: s)\\n            finalval = finalval*10 + (x - \\'0\\');\\n        \\n        //Handling negative case\\n        return flag ? 0 - finalval : finalval;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        //Edge case\\n        if(num == 0) return 0;\\n        //Checking if num is negative or positive\\n        bool flag = num < 0 ? true : false;\\n        \\n        string s = to_string(num);\\n        \\n        //For negative, digits will be sorted decreasing order -7605 -> 7650-\\n        if(flag) sort(s.begin(), s.end(), greater<char>());\\n        // else digits will be sorted increasing 310 -> 013\\n        else sort(s.begin(), s.end());\\n        \\n        //If there are leading zeroes, swap it with recent proper digit from left\\n        // 00559\\n        // ^ ^\\n        // | |\\n        // ---\\n        int i = 0;\\n        while(s[i] == \\'0\\' && i<s.length()){\\n            i++;\\n        }\\n        swap(s[i], s[0]);\\n        \\n        //Since there will be dash in end in negative after sorting, so we are simply \\n        //removing it and we\\'ll take care of that later.\\n        if(flag) s.erase(s.begin() + s.length()-1, s.end());\\n        \\n        //Building number from string \\n        long long finalval = 0;\\n        for(auto x: s)\\n            finalval = finalval*10 + (x - \\'0\\');\\n        \\n        //Handling negative case\\n        return flag ? 0 - finalval : finalval;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748581,
                "title": "easy-javascript-solution",
                "content": "```\\n\\nvar smallestNumber = function(num) {\\n    let arr = Array.from(String(num));\\n    if(num>0){\\n    arr.sort((a,b)=>{\\n         return a-b;\\n    })\\n    }\\n    else{\\n         arr.sort((a,b)=>{\\n              return b-a;\\n         })\\n    }\\n    for(let i=0;i<arr.length;i++){\\n       if(arr[i]!=0){\\n            [arr[0],arr[i]]=[arr[i],arr[0]];\\n            break;\\n       }\\n  }\\n    return arr.join(\"\");\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar smallestNumber = function(num) {\\n    let arr = Array.from(String(num));\\n    if(num>0){\\n    arr.sort((a,b)=>{\\n         return a-b;\\n    })\\n    }\\n    else{\\n         arr.sort((a,b)=>{\\n              return b-a;\\n         })\\n    }\\n    for(let i=0;i<arr.length;i++){\\n       if(arr[i]!=0){\\n            [arr[0],arr[i]]=[arr[i],arr[0]];\\n            break;\\n       }\\n  }\\n    return arr.join(\"\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2419368,
                "title": "c-string-conversion-stol-and-to-string-easiest-approach-explained",
                "content": "``` \\n<--- //PLEASE DO UPVOTE IF YOU DO UNDERSTAND THE APPROACH\\n\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n      \\n        string s = to_string(num);     // Covert number to string\\n      \\n\\t    // if number is -ve, reverse sort the string      \\n\\t\\t\\n        if(s[0] == \\'-\\'){               \\n\\t       sort(s.begin() + 1, s.end() ,greater<char>());  \\n         }\\n\\t\\t \\n      // for +ve number sort and bring the first non zero number to front  \\n\\t  \\n   \\t  else{      \\n            sort(s.begin() ,s.end());     \\n            for(int i = 0; i < s.length() ; ++i){\\n            if(s[i] != \\'0\\'){\\n            swap(s[i] ,s[0]);      \\n            break;\\n            }\\n       }   \\n  }\\n     \\n     long long res = stol(s);      // Convert the string to number again\\n    \\n     return res;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n      \\n        string s = to_string(num);     // Covert number to string\\n      \\n\\t    // if number is -ve, reverse sort the string      \\n\\t\\t\\n        if(s[0] == \\'-\\'){               \\n\\t       sort(s.begin() + 1, s.end() ,greater<char>());  \\n         }",
                "codeTag": "Java"
            },
            {
                "id": 1750761,
                "title": "c-simple-self-explanatory-sort-digits",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long n) {\\n        if(n==0)return 0;\\n        long long ans;\\n        // when n is negative arrange the digits of n in decreasing order\\n        if(n<0)\\n        {\\n            n=-n;\\n            string s=to_string(n);\\n            sort(s.begin(),s.end(),greater<char>());\\n            ans=stoll(s);\\n                return -ans;\\n        }\\n        // if n is positive, sort in increasing order and find first non-zero digit, and then start the number with it \\n        string s=to_string(n);\\n        sort(s.begin(),s.end());\\n        int i=0;\\n        while(s[i]==\\'0\\')i++;\\n        ans=s[i]-\\'0\\';\\n        for(int j=0;j<s.size();j++)\\n        {\\n            if(j==i)continue;\\n            ans=ans*10 + s[j]-\\'0\\';\\n        }\\n        return ans;\\n    }\\n};\\n```\\nIf it helps you, please do upvote it!!",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long n) {\\n        if(n==0)return 0;\\n        long long ans;\\n        // when n is negative arrange the digits of n in decreasing order\\n        if(n<0)\\n        {\\n            n=-n;\\n            string s=to_string(n);\\n            sort(s.begin(),s.end(),greater<char>());\\n            ans=stoll(s);\\n                return -ans;\\n        }\\n        // if n is positive, sort in increasing order and find first non-zero digit, and then start the number with it \\n        string s=to_string(n);\\n        sort(s.begin(),s.end());\\n        int i=0;\\n        while(s[i]==\\'0\\')i++;\\n        ans=s[i]-\\'0\\';\\n        for(int j=0;j<s.size();j++)\\n        {\\n            if(j==i)continue;\\n            ans=ans*10 + s[j]-\\'0\\';\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748730,
                "title": "simple-solution-using-stringstream",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if (num <= 10 && num >= -10)\\n                return num;\\n        if (num <= 100 && num >= -100 && num % 10 == 0)\\n            return num;\\n        if (num > 0)\\n        {\\n            string pos = to_string(num);\\n            sort(pos.begin(), pos.end());\\n            if (pos[0] == \\'0\\')\\n            {\\n                for (int i = 0; i < pos.length(); i++)\\n                    if (pos[i] != \\'0\\')\\n                    {\\n                        swap(pos[0], pos[i]);\\n                        break;\\n                    }\\n            }\\n            stringstream ans(pos);\\n            long long x = 0;\\n            ans >> x;\\n            return x;\\n        }\\n        \\n        else\\n        {\\n            string neg = to_string(num);\\n            sort(neg.begin(), neg.end(), greater<int>());\\n            stringstream ans(neg);\\n            long long x = 0;\\n            ans >> x;\\n            return -x;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```\\n**Use of stringstream**  - ```stringstream``` covert string to any data type like ```float```, ```int```, ```double```, ```long long``` etc. easily.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if (num <= 10 && num >= -10)\\n                return num;\\n        if (num <= 100 && num >= -100 && num % 10 == 0)\\n            return num;\\n        if (num > 0)\\n        {\\n            string pos = to_string(num);\\n            sort(pos.begin(), pos.end());\\n            if (pos[0] == \\'0\\')\\n            {\\n                for (int i = 0; i < pos.length(); i++)\\n                    if (pos[i] != \\'0\\')\\n                    {\\n                        swap(pos[0], pos[i]);\\n                        break;\\n                    }\\n            }\\n            stringstream ans(pos);\\n            long long x = 0;\\n            ans >> x;\\n            return x;\\n        }\\n        \\n        else\\n        {\\n            string neg = to_string(num);\\n            sort(neg.begin(), neg.end(), greater<int>());\\n            stringstream ans(neg);\\n            long long x = 0;\\n            ans >> x;\\n            return -x;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```\n```stringstream```\n```float```\n```int```\n```double```\n```long long```",
                "codeTag": "Java"
            },
            {
                "id": 3155918,
                "title": "2ms-c-o-n-count-digits",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    long long smallestNumber(long long num)\\n    {\\n        if (!num)\\n            return 0;\\n        bool a = (num < 0);\\n        num = abs(num);\\n        vector<int> v(10, 0);\\n        while (num)\\n        {\\n            v[num % 10]++;\\n            num /= 10;\\n        }\\n        num = 0;\\n        int i = 1;\\n        if (!a)\\n        {\\n            if (v[0])\\n            {\\n                while (v[i] == 0)\\n                {\\n                    i++;\\n                }\\n                num = i;\\n                v[i]--;\\n                while (v[0]--)\\n                {\\n                    num = num * 10;\\n                }\\n            }\\n            else\\n            {\\n                i = 1;\\n            }\\n            for (; i < 10; i++)\\n            {\\n                while (v[i]--)\\n                {\\n                    num = num * 10 + i;\\n                }\\n            }\\n            return num;\\n        }\\n        else\\n        {\\n\\n            for (i = 9; i >= 0; i--)\\n            {\\n                while (v[i]--)\\n                {\\n                    num = num * 10 + i;\\n                }\\n            }\\n            return -num;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    long long smallestNumber(long long num)\\n    {\\n        if (!num)\\n            return 0;\\n        bool a = (num < 0);\\n        num = abs(num);\\n        vector<int> v(10, 0);\\n        while (num)\\n        {\\n            v[num % 10]++;\\n            num /= 10;\\n        }\\n        num = 0;\\n        int i = 1;\\n        if (!a)\\n        {\\n            if (v[0])\\n            {\\n                while (v[i] == 0)\\n                {\\n                    i++;\\n                }\\n                num = i;\\n                v[i]--;\\n                while (v[0]--)\\n                {\\n                    num = num * 10;\\n                }\\n            }\\n            else\\n            {\\n                i = 1;\\n            }\\n            for (; i < 10; i++)\\n            {\\n                while (v[i]--)\\n                {\\n                    num = num * 10 + i;\\n                }\\n            }\\n            return num;\\n        }\\n        else\\n        {\\n\\n            for (i = 9; i >= 0; i--)\\n            {\\n                while (v[i]--)\\n                {\\n                    num = num * 10 + i;\\n                }\\n            }\\n            return -num;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2484081,
                "title": "java-easy-intuitive-solution",
                "content": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num > 0){\\n            String s = String.valueOf(num);\\n            char c[] = s.toCharArray();\\n            Arrays.sort(c);\\n            int i = 0;\\n            while(c[i] == \\'0\\')\\n                i++;\\n            char temp = c[0];\\n            c[0] = c[i];\\n            c[i] = temp;\\n            StringBuilder sb = new StringBuilder();\\n            for(char c1 : c){\\n                sb.append(c1);\\n            }\\n            return Long.parseLong(sb.toString());\\n        } \\n        else{\\n            String s = String.valueOf(num);\\n            s = s.replace(\"-\", \"\");\\n            char c[] = s.toCharArray();\\n            Arrays.sort(c);\\n            \\n            StringBuilder sb = new StringBuilder();\\n            for(char c1 : c){\\n                sb.append(c1);\\n            }\\n            return (-1)*Long.parseLong(sb.reverse().toString());\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num > 0){\\n            String s = String.valueOf(num);\\n            char c[] = s.toCharArray();\\n            Arrays.sort(c);\\n            int i = 0;\\n            while(c[i] == \\'0\\')\\n                i++;\\n            char temp = c[0];\\n            c[0] = c[i];\\n            c[i] = temp;\\n            StringBuilder sb = new StringBuilder();\\n            for(char c1 : c){\\n                sb.append(c1);\\n            }\\n            return Long.parseLong(sb.toString());\\n        } \\n        else{\\n            String s = String.valueOf(num);\\n            s = s.replace(\"-\", \"\");\\n            char c[] = s.toCharArray();\\n            Arrays.sort(c);\\n            \\n            StringBuilder sb = new StringBuilder();\\n            for(char c1 : c){\\n                sb.append(c1);\\n            }\\n            return (-1)*Long.parseLong(sb.reverse().toString());\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1758544,
                "title": "frequency-array-java-beats-99",
                "content": "**Approach:**\\n* We make an array \"digits\" and store occurence frequency of each digit.\\n* If the number was negative, we just need to iterate from index 9-0 and add that digit as many times as it occurred in the original number.\\n* If the number was positive, we need to avoid trailing zeroes first.\\n* So, we find the smallest non-zero value and set that as our first digit using our findFist() function.\\n* Then we can safely add the rest of the digits from index 0-9.\\n\\n**Code:**\\n\\n\\tpublic long smallestNumber(long num) {\\n\\t\\tint[] digits = new int[10];\\n\\t\\tlong temp = Math.abs(num);\\n\\t\\twhile(temp!=0){\\n\\t\\t\\tdigits[(int)(temp%10)]++;\\n\\t\\t\\ttemp = temp/10;\\n\\t\\t}\\n\\n\\t\\t//--NEGATIVE--\\n\\t\\tif(num<0){\\n\\t\\t\\tfor(int i=9;i>-1;i--)\\n\\t\\t\\t\\ttemp = addDigit(digits, i, temp);\\n\\t\\t\\treturn 0-temp;\\n\\t\\t}\\n\\n\\t\\t//--POSITIVE--\\n\\t\\ttemp = findFirst(digits);\\n\\t\\tif(temp==0)\\n\\t\\t\\treturn 0;\\n\\t\\tdigits[(int)temp]--;\\n\\t\\tfor(int i=0;i<10;i++)\\n\\t\\t\\ttemp = addDigit(digits, i, temp);\\n\\t\\treturn temp;\\n\\t}\\n\\n\\tint findFirst(int[] arr){\\n\\t\\tfor(int i=1;i<10;i++)\\n\\t\\t\\tif(arr[i]!=0)\\n\\t\\t\\t\\treturn i;\\n\\t\\treturn 0;\\n\\t}\\n\\tlong addDigit(int[] digit, int i, long temp){\\n\\t\\twhile(digit[i]!=0){\\n\\t\\t\\ttemp = temp*10+i;\\n\\t\\t\\tdigit[i]--;\\n\\t\\t}\\n\\t\\treturn temp;\\n\\t}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "**Approach:**\\n* We make an array \"digits\" and store occurence frequency of each digit.\\n* If the number was negative, we just need to iterate from index 9-0 and add that digit as many times as it occurred in the original number.\\n* If the number was positive, we need to avoid trailing zeroes first.\\n* So, we find the smallest non-zero value and set that as our first digit using our findFist() function.\\n* Then we can safely add the rest of the digits from index 0-9.\\n\\n**Code:**\\n\\n\\tpublic long smallestNumber(long num) {\\n\\t\\tint[] digits = new int[10];\\n\\t\\tlong temp = Math.abs(num);\\n\\t\\twhile(temp!=0){\\n\\t\\t\\tdigits[(int)(temp%10)]++;\\n\\t\\t\\ttemp = temp/10;\\n\\t\\t}\\n\\n\\t\\t//--NEGATIVE--\\n\\t\\tif(num<0){\\n\\t\\t\\tfor(int i=9;i>-1;i--)\\n\\t\\t\\t\\ttemp = addDigit(digits, i, temp);\\n\\t\\t\\treturn 0-temp;\\n\\t\\t}\\n\\n\\t\\t//--POSITIVE--\\n\\t\\ttemp = findFirst(digits);\\n\\t\\tif(temp==0)\\n\\t\\t\\treturn 0;\\n\\t\\tdigits[(int)temp]--;\\n\\t\\tfor(int i=0;i<10;i++)\\n\\t\\t\\ttemp = addDigit(digits, i, temp);\\n\\t\\treturn temp;\\n\\t}\\n\\n\\tint findFirst(int[] arr){\\n\\t\\tfor(int i=1;i<10;i++)\\n\\t\\t\\tif(arr[i]!=0)\\n\\t\\t\\t\\treturn i;\\n\\t\\treturn 0;\\n\\t}\\n\\tlong addDigit(int[] digit, int i, long temp){\\n\\t\\twhile(digit[i]!=0){\\n\\t\\t\\ttemp = temp*10+i;\\n\\t\\t\\tdigit[i]--;\\n\\t\\t}\\n\\t\\treturn temp;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1756499,
                "title": "commented-c-faster-than-100-submissions-sorting-and-swapping",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num<=10&&num>=0)\\n            return num;\\n        vector<long long> arr;\\n        long long sum=0;\\n        if(num>0){\\n            //for positive number\\n            while(num){\\n                arr.push_back(num%10);\\n                num/=10;\\n                \\n            }\\n            //sort in increasing order for +ve num\\n            sort(arr.begin(),arr.end());\\n            if(!arr[0]){\\n                for(long long i=0;i<arr.size();i++){\\n                    if(arr[i]){\\n                       swap(arr[i],arr[0]);\\n                        break;\\n                        \\n                    }\\n                        \\n                }\\n            }\\n            long long n= arr.size();\\n            for(long long i=0;i<arr.size();i++){\\n                sum=sum*10+arr[i];\\n                \\n            }\\n            \\n        }\\n        else{\\n            //for -ve number\\n            num*=-1; // making num +ve to carry operations\\n            while(num){\\n                arr.push_back(num%10);\\n                num/=10;\\n                \\n            }\\n            //sort in decreasing order for -ve num\\n            sort(arr.begin(),arr.end(),greater<long long>());\\n            long long n= arr.size();\\n            if(!arr[0]){\\n                for(long long i=0;i<n;i++){\\n                    if(arr[i]){\\n                       swap(arr[i],arr[0]);\\n                        break;\\n                        \\n                    }\\n                        \\n                }\\n            }\\n            \\n            for(long long i=0;i<arr.size();i++){\\n                sum=sum*10+arr[i];\\n                \\n            }\\n            // making num -ve\\n            sum*=-1;\\n            \\n        }\\n        return sum;\\n    }\\n};\\n```\\n\\n**Upvote if u liked it**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num<=10&&num>=0)\\n            return num;\\n        vector<long long> arr;\\n        long long sum=0;\\n        if(num>0){\\n            //for positive number\\n            while(num){\\n                arr.push_back(num%10);\\n                num/=10;\\n                \\n            }\\n            //sort in increasing order for +ve num\\n            sort(arr.begin(),arr.end());\\n            if(!arr[0]){\\n                for(long long i=0;i<arr.size();i++){\\n                    if(arr[i]){\\n                       swap(arr[i],arr[0]);\\n                        break;\\n                        \\n                    }\\n                        \\n                }\\n            }\\n            long long n= arr.size();\\n            for(long long i=0;i<arr.size();i++){\\n                sum=sum*10+arr[i];\\n                \\n            }\\n            \\n        }\\n        else{\\n            //for -ve number\\n            num*=-1; // making num +ve to carry operations\\n            while(num){\\n                arr.push_back(num%10);\\n                num/=10;\\n                \\n            }\\n            //sort in decreasing order for -ve num\\n            sort(arr.begin(),arr.end(),greater<long long>());\\n            long long n= arr.size();\\n            if(!arr[0]){\\n                for(long long i=0;i<n;i++){\\n                    if(arr[i]){\\n                       swap(arr[i],arr[0]);\\n                        break;\\n                        \\n                    }\\n                        \\n                }\\n            }\\n            \\n            for(long long i=0;i<arr.size();i++){\\n                sum=sum*10+arr[i];\\n                \\n            }\\n            // making num -ve\\n            sum*=-1;\\n            \\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1754976,
                "title": "c-code-using-vector-and-sort-0ms-beats100-soln",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num == 0)return 0;\\n        int isneg = 0;\\n        if(num < 0) isneg = 1 , num = -num;\\n        vector<int> digits;\\n        \\n        while(num > 0)\\n        {\\n            digits.push_back(num%10);\\n            num = num/10;\\n        }\\n     \\n        sort(digits.begin(),digits.end());\\n        long long res = 0;\\n        \\n        if(!isneg)\\n        {\\n            int i = 0;\\n        while(digits[i] == 0) \\n        {\\n            i++;\\n        }\\n        res = digits[i];\\n        digits[i] = -1;\\n        for(auto  it : digits)\\n        {\\n            if(it >= 0)\\n            res = res*10 + it;\\n        }\\n        \\n    }\\n        else\\n        {\\n            for(int index = digits.size() - 1; index >= 0 ; index--)\\n                res = res * 10 + digits[index];\\n            \\n            return -res;\\n        }\\n        \\n        return res;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num == 0)return 0;\\n        int isneg = 0;\\n        if(num < 0) isneg = 1 , num = -num;\\n        vector<int> digits;\\n        \\n        while(num > 0)\\n        {\\n            digits.push_back(num%10);\\n            num = num/10;\\n        }\\n     \\n        sort(digits.begin(),digits.end());\\n        long long res = 0;\\n        \\n        if(!isneg)\\n        {\\n            int i = 0;\\n        while(digits[i] == 0) \\n        {\\n            i++;\\n        }\\n        res = digits[i];\\n        digits[i] = -1;\\n        for(auto  it : digits)\\n        {\\n            if(it >= 0)\\n            res = res*10 + it;\\n        }\\n        \\n    }\\n        else\\n        {\\n            for(int index = digits.size() - 1; index >= 0 ; index--)\\n                res = res * 10 + digits[index];\\n            \\n            return -res;\\n        }\\n        \\n        return res;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1753230,
                "title": "c-3-ms-o-nlogn",
                "content": "**If you find this helpfull please upvote**\\n```\\nclass Solution {\\npublic:\\n    #define ll long long int\\n    long long smallestNumber(long long num) {\\n        vector<ll> v;\\n        if(num == 0) return 0;\\n        if(num>=-10 and num<=10) return num;\\n        while(num!=0){\\n            v.emplace_back(num%10);\\n            num/=10;\\n        }\\n        sort(v.begin(),v.end());\\n        int i=1;\\n        while(v[0] == 0){\\n            swap(v[0],v[i]);\\n            i++;\\n        }\\n        ll ans=0;\\n        for(auto it : v){\\n            ans=it+ans*10;\\n            cout<<it<<endl;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    #define ll long long int\\n    long long smallestNumber(long long num) {\\n        vector<ll> v;\\n        if(num == 0) return 0;\\n        if(num>=-10 and num<=10) return num;\\n        while(num!=0){\\n            v.emplace_back(num%10);\\n            num/=10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1749994,
                "title": "python-faster-than-100-short-code",
                "content": "Explanation :\\nconvert ```num``` to string\\n*  If ```num``` is negative:\\n\\t* exclude the sign , sort the string in descending order , add the sign , return .\\n* if ```num``` is positive:\\n\\t* append all the leading zeroes(if any) after the first non-zero digit , return .\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        lst=[i for i in str(num)]\\n        if num<0:\\n            return \\'\\'.join([\\'-\\'] + sorted(lst[1:],reverse=True))\\n        lst=sorted(lst)\\n        if \\'0\\' in lst:\\n            itr=0\\n            while itr<len(lst) and lst[itr]==\\'0\\':\\n                itr+=1\\n            if itr==len(lst):       #All zeroes\\n                return \\'\\'.join(lst)\\n            return \\'\\'.join([lst[itr]]+lst[:itr]+lst[itr+1:])\\n        return \\'\\'.join(lst)\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Sorting"
                ],
                "code": "```num```\n```num```\n```num```\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        lst=[i for i in str(num)]\\n        if num<0:\\n            return \\'\\'.join([\\'-\\'] + sorted(lst[1:],reverse=True))\\n        lst=sorted(lst)\\n        if \\'0\\' in lst:\\n            itr=0\\n            while itr<len(lst) and lst[itr]==\\'0\\':\\n                itr+=1\\n            if itr==len(lst):       #All zeroes\\n                return \\'\\'.join(lst)\\n            return \\'\\'.join([lst[itr]]+lst[:itr]+lst[itr+1:])\\n        return \\'\\'.join(lst)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748666,
                "title": "easy-to-understand-simple-c-faster-than-100",
                "content": "```class Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool flag=num>0;\\n        num=abs(num);\\n        if(flag){\\n            string s=to_string(num);\\n            sort(s.begin(), s.end());\\n            int i = 0;\\n            while (s[i] == \\'0\\')\\n                i++;\\n            swap(s[0], s[i]);\\n            num=stoll(s);\\n        }\\n        else{\\n            string s=to_string(num);\\n            sort(s.begin(), s.end(),greater<int>());\\n            s=\\'-\\'+s;\\n            num=stoll(s);\\n        }\\n        return num;\\n    }\\n};```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```class Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool flag=num>0;\\n        num=abs(num);\\n        if(flag){\\n            string s=to_string(num);\\n            sort(s.begin(), s.end());\\n            int i = 0;\\n            while (s[i] == \\'0\\')\\n                i++;\\n            swap(s[0], s[i]);\\n            num=stoll(s);\\n        }\\n        else{\\n            string s=to_string(num);\\n            sort(s.begin(), s.end(),greater<int>());\\n            s=\\'-\\'+s;\\n            num=stoll(s);\\n        }\\n        return num;\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 1748619,
                "title": "intutive-brute-force-hash-map",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s = to_string(num);\\n       if(num ==0)return 0;\\n        string w=\"\";\\n       \\n      //for -ve\\n        if(s[0]==\\'-\\'){\\n            map<char,int,greater<int>>mp; //descending map (greater -ve  smaller the number)\\n            for(auto i : s){\\n                mp[i]++;\\n            }\\n             for(auto i : mp){\\n               while(i.second){\\n                   w+=i.first;\\n                   i.second--;\\n               \\n               }\\n           }\\n            long long n = stoll(w);\\n            return -1*n;\\n        }\\n        //---------------------------------------------------------------------------\\n\\t\\t//For +ve\\n        else{\\n            map<char,int>mp;// ascending map\\n            \\n               for(auto i : s){\\n                mp[i]++;\\n            }\\n                \\n                \\n           for(auto i : mp){\\n               if(i.first != \\'0\\'){\\n                while(i.second){\\n                  w+=i.first;\\n                  i.second--;\\n\\t\\t\\t\\t  \\n\\t\\t\\t\\t  //handling case of \\'0\\' when positive number\\n                  if(mp.find(\\'0\\')!=mp.end()){\\n                    while(mp[\\'0\\']){\\n                        w+=\\'0\\';\\n                        mp[\\'0\\']--;\\n                    }\\n              }\\n             \\n           }\\n           }\\n           }\\n    \\n \\n            \\n          long long n = stoll(w);\\n            return n;\\n        }  \\n    }\\n    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s = to_string(num);\\n       if(num ==0)return 0;\\n        string w=\"\";\\n       \\n      //for -ve\\n        if(s[0]==\\'-\\'){\\n            map<char,int,greater<int>>mp; //descending map (greater -ve  smaller the number)\\n            for(auto i : s){\\n                mp[i]++;\\n            }\\n             for(auto i : mp){\\n               while(i.second){\\n                   w+=i.first;\\n                   i.second--;\\n               \\n               }\\n           }\\n            long long n = stoll(w);\\n            return -1*n;\\n        }\\n        //---------------------------------------------------------------------------\\n\\t\\t//For +ve\\n        else{\\n            map<char,int>mp;// ascending map\\n            \\n               for(auto i : s){\\n                mp[i]++;\\n            }\\n                \\n                \\n           for(auto i : mp){\\n               if(i.first != \\'0\\'){\\n                while(i.second){\\n                  w+=i.first;\\n                  i.second--;\\n\\t\\t\\t\\t  \\n\\t\\t\\t\\t  //handling case of \\'0\\' when positive number\\n                  if(mp.find(\\'0\\')!=mp.end()){\\n                    while(mp[\\'0\\']){\\n                        w+=\\'0\\';\\n                        mp[\\'0\\']--;\\n                    }\\n              }\\n             \\n           }\\n           }\\n           }\\n    \\n \\n            \\n          long long n = stoll(w);\\n            return n;\\n        }  \\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3509614,
                "title": "python-beats-100-of-runtime",
                "content": "# Approach\\n1- Check if num is **negative** or not\\n\\n2- **Store** all **digits** in num in an array **except** the **zeros**\\n\\n3- If num is **negative** -> you need to order the array in **descending** order and add all **zeros** to the **left**\\nif num is **positive** -> you need to order the array in **ascending** order and add all **zeros** to the **right** in the **second** **position**. Not in the first because the number can\\'t have any leading zeros.\\n\\nps: if you have any improvements, let me know :)\\n\\n\\n# Code\\n```\\nclass Solution(object):\\n    def smallestNumber(self, num):\\n\\n        if num == 0:\\n            return 0\\n        \\n        isNegative, nums, countZero, s = False, [], 0, str(num)\\n        \\n        if  num < 0:\\n            isNegative = True\\n            s = s[1:]\\n        \\n        for i in range(len(s)):\\n            if s[i] != \\'0\\':\\n                nums.append(s[i])\\n            else:\\n                countZero += 1\\n\\n        nums.sort(reverse=isNegative)\\n        newN = \\'\\'.join(nums)\\n\\n        if isNegative:\\n            return int(\\'-\\' + newN + \\'0\\' * countZero)\\n\\n        return int(newN[0] + \\'0\\' * countZero + newN[1:])\\n    \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution(object):\\n    def smallestNumber(self, num):\\n\\n        if num == 0:\\n            return 0\\n        \\n        isNegative, nums, countZero, s = False, [], 0, str(num)\\n        \\n        if  num < 0:\\n            isNegative = True\\n            s = s[1:]\\n        \\n        for i in range(len(s)):\\n            if s[i] != \\'0\\':\\n                nums.append(s[i])\\n            else:\\n                countZero += 1\\n\\n        nums.sort(reverse=isNegative)\\n        newN = \\'\\'.join(nums)\\n\\n        if isNegative:\\n            return int(\\'-\\' + newN + \\'0\\' * countZero)\\n\\n        return int(newN[0] + \\'0\\' * countZero + newN[1:])\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3504413,
                "title": "0ms-100-time-beats-99-53-memory-beats-beginner-friendly-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string a = to_string(num);\\n        int i = 0;\\n        long long ans = 0;\\n        if(num==0)\\n        return 0;\\n        if(num>=0) {\\n        sort(a.begin(),a.end());\\n        if(a[0]==\\'0\\'){\\n            while(i<a.length()) {\\n                if(a[i]!=\\'0\\')\\n                break;\\n                i++;\\n            }\\n            swap(a[0],a[i]);\\n        }\\n        int start = 0;\\n        while(start<a.length()) {\\n            int num = a[start] - \\'0\\';\\n            ans = (ans*10) + num;\\n            start++;\\n        }\\n        }\\n        else{\\n            sort(a.begin(),a.end(),greater<int> ());\\n            string b = \"-\";\\n            for(int i = 0; i<a.length()-1; i++ ) {\\n                b+=a[i];\\n            }\\n            a = b;\\n            int start = 1;\\n            while(start<a.length()) {\\n                int num = a[start] - \\'0\\';\\n                ans = (ans*10) + num;\\n                start++;\\n            }\\n            ans = ans * -1;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string a = to_string(num);\\n        int i = 0;\\n        long long ans = 0;\\n        if(num==0)\\n        return 0;\\n        if(num>=0) {\\n        sort(a.begin(),a.end());\\n        if(a[0]==\\'0\\'){\\n            while(i<a.length()) {\\n                if(a[i]!=\\'0\\')\\n                break;\\n                i++;\\n            }\\n            swap(a[0],a[i]);\\n        }\\n        int start = 0;\\n        while(start<a.length()) {\\n            int num = a[start] - \\'0\\';\\n            ans = (ans*10) + num;\\n            start++;\\n        }\\n        }\\n        else{\\n            sort(a.begin(),a.end(),greater<int> ());\\n            string b = \"-\";\\n            for(int i = 0; i<a.length()-1; i++ ) {\\n                b+=a[i];\\n            }\\n            a = b;\\n            int start = 1;\\n            while(start<a.length()) {\\n                int num = a[start] - \\'0\\';\\n                ans = (ans*10) + num;\\n                start++;\\n            }\\n            ans = ans * -1;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3440878,
                "title": "beats-100-java-easy-to-understand-o-n-log-n-time-complexity",
                "content": "# Complexity\\n- Time complexity:O(n log n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n\\n        if(num==0){\\n            return 0;\\n        }\\n\\n        long result=Math.abs(num);\\n        int freq[]=new int[10];\\n        \\n\\n        while(result>0){\\n            int temp=(int)(result%10);\\n            freq[temp]++;\\n            result/=10;\\n        }\\n\\n        if(num>0){\\n\\n            int i=1;\\n            int count_zero=freq[0];\\n\\n            while(freq[i]==0){\\n                i++;\\n            }\\n\\n            result=(result*10)+i;\\n            freq[i]--;\\n\\n            while(count_zero-->0){\\n                result=(result*10);\\n            }\\n\\n            while(i<10){\\n\\n                while(freq[i]>0){\\n                    result=(result*10)+i;\\n                    freq[i]--;\\n                }\\n\\n                i++;\\n\\n            }\\n        }else{\\n\\n            int i=9;\\n        \\n            while(i>=0){\\n\\n                while(freq[i]>0){\\n                    result=(result*10)+i;\\n                    freq[i]--;\\n                }\\n\\n                i--;\\n\\n            }\\n            result*=-1;\\n\\n        }\\n\\n        return result; \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n\\n        if(num==0){\\n            return 0;\\n        }\\n\\n        long result=Math.abs(num);\\n        int freq[]=new int[10];\\n        \\n\\n        while(result>0){\\n            int temp=(int)(result%10);\\n            freq[temp]++;\\n            result/=10;\\n        }\\n\\n        if(num>0){\\n\\n            int i=1;\\n            int count_zero=freq[0];\\n\\n            while(freq[i]==0){\\n                i++;\\n            }\\n\\n            result=(result*10)+i;\\n            freq[i]--;\\n\\n            while(count_zero-->0){\\n                result=(result*10);\\n            }\\n\\n            while(i<10){\\n\\n                while(freq[i]>0){\\n                    result=(result*10)+i;\\n                    freq[i]--;\\n                }\\n\\n                i++;\\n\\n            }\\n        }else{\\n\\n            int i=9;\\n        \\n            while(i>=0){\\n\\n                while(freq[i]>0){\\n                    result=(result*10)+i;\\n                    freq[i]--;\\n                }\\n\\n                i--;\\n\\n            }\\n            result*=-1;\\n\\n        }\\n\\n        return result; \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3414945,
                "title": "efficient-approach-sort-and-swap-cpp",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nBrute Force :-\\nRecursively generate all the permutations and store it in a data structure, discard the values which have leading zeros . Find minimum value amongst the remaining values.\\nThe constraints are 10^15 so the complexity in generating permutations will be O(15!) that will be a tle for sure.\\n\\nOptimized approach :-\\nType cast the number into a string. If the number is positive sort the string in increasing order. If first index is 0 then swap the first index with the first non-zero index.\\nIf it is a negative number sort it in decreasing order. \\nconvert it in long long and return the ans.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(nlogn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0){\\n            sort(s.begin() , s.end());\\n            \\n        }\\n        else{\\n            sort(s.begin() , s.end() , greater < int > ());\\n        }\\n        if(num > 0){\\n            int index = s.find_first_not_of(\\'0\\');\\n            swap(s[0] , s[index]);\\n\\n        }\\n        long long ans = stoll(s);\\n        if(num < 0){\\n            ans *= -1;\\n        \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0){\\n            sort(s.begin() , s.end());\\n            \\n        }\\n        else{\\n            sort(s.begin() , s.end() , greater < int > ());\\n        }\\n        if(num > 0){\\n            int index = s.find_first_not_of(\\'0\\');\\n            swap(s[0] , s[index]);\\n\\n        }\\n        long long ans = stoll(s);\\n        if(num < 0){\\n            ans *= -1;\\n        \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3003786,
                "title": "easy-c-submission-beats-100-time-complexity",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long ans = 0;\\n        vector <int> v;\\n        if(num==0)\\n        {\\n            return 0;\\n        }\\n        while(num!=0)\\n        {\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n\\n        sort(v.begin(),v.end());\\n        int n = v.size();\\n        int s=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if((v[0]==0) && (v[i]!=0))\\n            {\\n                s=i;\\n                break;\\n            }\\n        }\\n        swap(v[0],v[s]);\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            ans = ans + v[i]*pow(10,n-i-1);\\n        }\\n        return ans;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long ans = 0;\\n        vector <int> v;\\n        if(num==0)\\n        {\\n            return 0;\\n        }\\n        while(num!=0)\\n        {\\n            v.push_back(num%10);\\n            num=num/10;\\n        }\\n\\n        sort(v.begin(),v.end());\\n        int n = v.size();\\n        int s=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            if((v[0]==0) && (v[i]!=0))\\n            {\\n                s=i;\\n                break;\\n            }\\n        }\\n        swap(v[0],v[s]);\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            ans = ans + v[i]*pow(10,n-i-1);\\n        }\\n        return ans;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2874168,
                "title": "10-line-code-using-string-with-comments-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 15log(15)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 0(n);\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s=to_string(num);\\n        if(num>=0) sort(s.begin(),s.end());   //if no is positive\\n        else sort(s.begin(),s.end(),greater<char>()); //if no is negative then sort in decending order\\n\\n        if(num>0){ //if no is positive\\n            int ind=s.find_first_not_of(\\'0\\');  //s.find_first_not_of will find the first element which is non zero  \\n            //eg  00011199 it will give the index 3\\n            // and we will swap it with first 0 index now string become 10001199 \\n            swap(s[0],s[ind]);\\n        }\\n\\n        long long ans=stoll(s); // stio is for int for long long we use stoll\\n        if(num<0) ans*=-1;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s=to_string(num);\\n        if(num>=0) sort(s.begin(),s.end());   //if no is positive\\n        else sort(s.begin(),s.end(),greater<char>()); //if no is negative then sort in decending order\\n\\n        if(num>0){ //if no is positive\\n            int ind=s.find_first_not_of(\\'0\\');  //s.find_first_not_of will find the first element which is non zero  \\n            //eg  00011199 it will give the index 3\\n            // and we will swap it with first 0 index now string become 10001199 \\n            swap(s[0],s[ind]);\\n        }\\n\\n        long long ans=stoll(s); // stio is for int for long long we use stoll\\n        if(num<0) ans*=-1;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2653707,
                "title": "very-easy-javascript-solution",
                "content": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar smallestNumber = function (num) {\\n  let d = String(num).split(\"\");\\n\\n  //basic sorting based on num is positive or negative number\\n  num > 0\\n    ? d.sort((a, b) => parseInt(a) - parseInt(b))\\n    : d.sort((a, b) => parseInt(b) - parseInt(a));\\n\\n  // basic pushing zero from start to end\\n  for (let i = 0; i < d.length; i++) {\\n    if (parseInt(d[i]) != 0) {\\n      [d[0], d[i]] = [d[i], d[0]];\\n      break;\\n    }\\n  }\\n\\n  return Number(d.join(\"\"));\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sorting"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar smallestNumber = function (num) {\\n  let d = String(num).split(\"\");\\n\\n  //basic sorting based on num is positive or negative number\\n  num > 0\\n    ? d.sort((a, b) => parseInt(a) - parseInt(b))\\n    : d.sort((a, b) => parseInt(b) - parseInt(a));\\n\\n  // basic pushing zero from start to end\\n  for (let i = 0; i < d.length; i++) {\\n    if (parseInt(d[i]) != 0) {\\n      [d[0], d[i]] = [d[i], d[0]];\\n      break;\\n    }\\n  }\\n\\n  return Number(d.join(\"\"));\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2622345,
                "title": "c-easy-and-concise-solution-sorting-100-fast-working",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        string s=\"\";\\n        int c=0;\\n        if(num<0) c++;\\n        num=abs(num);\\n        while(num!=0)\\n        {\\n            s+=num%10+\\'0\\';\\n            num/=10;\\n        }\\n        long long n=0;\\n        if(c==0)\\n        {\\n            sort(s.begin(),s.end());\\n            cout<<s;\\n            if(s[0]==\\'0\\')\\n            {\\n                for(int i=1;i<s.size();i++)\\n                {\\n                    if(s[i]!=\\'0\\')\\n                    {\\n                        swap(s[i],s[0]);\\n                        break;\\n                    }\\n                }\\n            }\\n            int i=0;\\n            while(i<s.size())\\n            {\\n                n=n*10+(s[i]-\\'0\\');\\n                i++;\\n            }\\n        }\\n        else\\n        {\\n            sort(s.rbegin(),s.rend());  \\n            int i=0;\\n            while(i<s.size())\\n            {\\n                n=n*10+(s[i]-\\'0\\');\\n                i++;\\n            }\\n            n*=-1;\\n        }\\n        return n;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        string s=\"\";\\n        int c=0;\\n        if(num<0) c++;\\n        num=abs(num);\\n        while(num!=0)\\n        {\\n            s+=num%10+\\'0\\';\\n            num/=10;\\n        }\\n        long long n=0;\\n        if(c==0)\\n        {\\n            sort(s.begin(),s.end());\\n            cout<<s;\\n            if(s[0]==\\'0\\')\\n            {\\n                for(int i=1;i<s.size();i++)\\n                {\\n                    if(s[i]!=\\'0\\')\\n                    {\\n                        swap(s[i],s[0]);\\n                        break;\\n                    }\\n                }\\n            }\\n            int i=0;\\n            while(i<s.size())\\n            {\\n                n=n*10+(s[i]-\\'0\\');\\n                i++;\\n            }\\n        }\\n        else\\n        {\\n            sort(s.rbegin(),s.rend());  \\n            int i=0;\\n            while(i<s.size())\\n            {\\n                n=n*10+(s[i]-\\'0\\');\\n                i++;\\n            }\\n            n*=-1;\\n        }\\n        return n;        \\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2540010,
                "title": "use-sorting-cleaver-solution-o-n-logn-beats-98-86",
                "content": "\\n![image](https://assets.leetcode.com/users/images/8493dcc0-0038-41d8-bd32-38eb02d061d6_1662977841.0521178.png)\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num ==0 : return 0\\n        res , zero = \\'\\',\\'\\'\\n\\n        for i in str(num):\\n            if i != \\'-\\':\\n                if i==\\'0\\':\\n                    zero += i\\n                else:\\n                    res += i\\n                \\n        res = \\'\\'.join(sorted(res))\\n        \\n        if num < 0:\\n            return \\'-\\'+ res[::-1] + zero\\n        elif res and zero:\\n            return res[0] + zero + res[1:]\\n        else:\\n            return res\\n```",
                "solutionTags": [
                    "Python3",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num ==0 : return 0\\n        res , zero = \\'\\',\\'\\'\\n\\n        for i in str(num):\\n            if i != \\'-\\':\\n                if i==\\'0\\':\\n                    zero += i\\n                else:\\n                    res += i\\n                \\n        res = \\'\\'.join(sorted(res))\\n        \\n        if num < 0:\\n            return \\'-\\'+ res[::-1] + zero\\n        elif res and zero:\\n            return res[0] + zero + res[1:]\\n        else:\\n            return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2520850,
                "title": "java-solution-using-frequency-array",
                "content": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num >= -9 && num<= 9) {return num;}\\n      \\n        int digits[] = new int [10];\\n        long numCopy = Math.abs(num);\\n        long ans = 0;\\n      \\n        while(numCopy > 0) {\\n          int index = (int)(numCopy % 10);\\n          digits[index] = digits[index]+1;\\n          numCopy = numCopy/10;\\n        }\\n      \\n        if(num > 0) {\\n          for(int i = 1; i < 10; i++) {\\n            while(digits[i] > 0) {\\n              ans = ans*10 + i;\\n              while(digits[0] > 0) {\\n                ans = ans*10;\\n                digits[0]--;\\n              }\\n             digits[i]--;\\n            }\\n          }\\n        }\\n      \\n        else {\\n          for(int i = 9; i >= 0; i--) {\\n             while(digits[i] > 0) {\\n               ans = ans*10 + i;\\n               digits[i]--;\\n             }\\n          }\\n          ans = -ans;\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public long smallestNumber(long num) {\\n        if(num >= -9 && num<= 9) {return num;}",
                "codeTag": "Java"
            },
            {
                "id": 2504956,
                "title": "java-solution-sorting",
                "content": "### Please Upvote !!!\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        \\n        boolean isNegative = num < 0;\\n        \\n        num = Math.abs(num);\\n        \\n        char[] arr = (\"\" + num).toCharArray();\\n        \\n        if (arr.length == 1) return Long.parseLong(String.valueOf(arr));\\n        \\n        long ans = 0;\\n        Arrays.sort(arr);\\n        \\n        if (isNegative) {\\n            String ansStr = \"\";\\n            \\n            for (int i = arr.length - 1; i >= 0; i--) {\\n                ansStr += arr[i];\\n            }\\n            \\n            ans = - Long.parseLong(ansStr);\\n            \\n        } else {\\n            \\n            if (arr[0] == \\'0\\'){\\n                int i = 0;\\n                while (arr[i] == \\'0\\') i++;\\n\\n                if (i < arr.length) {\\n                    arr[0] = arr[i];\\n                    arr[i] = \\'0\\';\\n                }\\n            }\\n            \\n            ans = Long.parseLong(String.valueOf(arr));\\n        }\\n        \\n        return ans;\\n    }\\n}\\n\\n// TC: O(n * logn), SC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        \\n        boolean isNegative = num < 0;\\n        \\n        num = Math.abs(num);\\n        \\n        char[] arr = (\"\" + num).toCharArray();\\n        \\n        if (arr.length == 1) return Long.parseLong(String.valueOf(arr));\\n        \\n        long ans = 0;\\n        Arrays.sort(arr);\\n        \\n        if (isNegative) {\\n            String ansStr = \"\";\\n            \\n            for (int i = arr.length - 1; i >= 0; i--) {\\n                ansStr += arr[i];\\n            }\\n            \\n            ans = - Long.parseLong(ansStr);\\n            \\n        } else {\\n            \\n            if (arr[0] == \\'0\\'){\\n                int i = 0;\\n                while (arr[i] == \\'0\\') i++;\\n\\n                if (i < arr.length) {\\n                    arr[0] = arr[i];\\n                    arr[i] = \\'0\\';\\n                }\\n            }\\n            \\n            ans = Long.parseLong(String.valueOf(arr));\\n        }\\n        \\n        return ans;\\n    }\\n}\\n\\n// TC: O(n * logn), SC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2491836,
                "title": "easy-simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool check = (num > 0) ? 0 : 1;\\n        string temp = to_string(abs(num));\\n        if(!check) {\\n            sort(temp.begin(), temp.end());\\n            for(long long i = 0; i < temp.size(); i++) {\\n                if(temp[i] != \\'0\\') {\\n                    swap(temp[0], temp[i]);\\n                    break;\\n                }\\n            }\\n        }\\n        else {\\n            sort(temp.begin(), temp.end(), greater<char>());\\n        }\\n        return (check == 0) ? stol(temp) : (-1 * stol(temp));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool check = (num > 0) ? 0 : 1;\\n        string temp = to_string(abs(num));\\n        if(!check) {\\n            sort(temp.begin(), temp.end());\\n            for(long long i = 0; i < temp.size(); i++) {\\n                if(temp[i] != \\'0\\') {\\n                    swap(temp[0], temp[i]);\\n                    break;\\n                }\\n            }\\n        }\\n        else {\\n            sort(temp.begin(), temp.end(), greater<char>());\\n        }\\n        return (check == 0) ? stol(temp) : (-1 * stol(temp));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2356449,
                "title": "c-sort-reverse-if-negative-and-swap",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        \\n        if(!num) return num; \\n        \\n        int sign = (num>0)? 1 : -1;\\n        \\n        string s = to_string(abs(num));\\n        \\n        sort(s.begin(), s.end());\\n            \\n        if(sign==-1)\\n        {\\n            reverse(s.begin(), s.end());\\n        }\\n                \\n        int j=0;\\n        \\n        while(s[j]==\\'0\\')\\n        {\\n            j++;\\n        }\\n        \\n        swap(s[0],s[j]);\\n        \\n        return sign * stol(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        \\n        if(!num) return num; \\n        \\n        int sign = (num>0)? 1 : -1;\\n        \\n        string s = to_string(abs(num));\\n        \\n        sort(s.begin(), s.end());\\n            \\n        if(sign==-1)\\n        {\\n            reverse(s.begin(), s.end());\\n        }\\n                \\n        int j=0;\\n        \\n        while(s[j]==\\'0\\')\\n        {\\n            j++;\\n        }\\n        \\n        swap(s[0],s[j]);\\n        \\n        return sign * stol(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2321797,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long int ans=0;\\n        if(num<0)\\n        { \\n            long long n=abs(num);\\n            string str=to_string(n);\\n            sort(str.begin(),str.end(),greater());\\n            long long k=1;\\n            for(long long i=str.size()-1;i>=0;i--)\\n            {\\n                ans=ans+k*(str[i]-\\'0\\');\\n                k=k*10;\\n            }\\n            return -1*ans;\\n        }\\n        else\\n        {\\n            long long n=abs(num);\\n            string str=to_string(n);\\n            sort(str.begin(),str.end());\\n            long long temp=-1;\\n            for(long long i=0;i<str.size();i++)\\n            {\\n                if(str[i]!=\\'0\\')\\n                {\\n                    temp=i;\\n                    break;\\n                }\\n            }\\n            if(temp!=-1)\\n            {\\n                swap(str[0],str[temp]);\\n            }\\n            long long k=1;\\n            for(int i=str.size()-1;i>=0;i--)\\n            {\\n                ans=ans+k*(str[i]-\\'0\\');\\n                k=k*10;\\n            }\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long int ans=0;\\n        if(num<0)\\n        { \\n            long long n=abs(num);\\n            string str=to_string(n);\\n            sort(str.begin(),str.end(),greater());\\n            long long k=1;\\n            for(long long i=str.size()-1;i>=0;i--)\\n            {\\n                ans=ans+k*(str[i]-\\'0\\');\\n                k=k*10;\\n            }\\n            return -1*ans;\\n        }\\n        else\\n        {\\n            long long n=abs(num);\\n            string str=to_string(n);\\n            sort(str.begin(),str.end());\\n            long long temp=-1;\\n            for(long long i=0;i<str.size();i++)\\n            {\\n                if(str[i]!=\\'0\\')\\n                {\\n                    temp=i;\\n                    break;\\n                }\\n            }\\n            if(temp!=-1)\\n            {\\n                swap(str[0],str[temp]);\\n            }\\n            long long k=1;\\n            for(int i=str.size()-1;i>=0;i--)\\n            {\\n                ans=ans+k*(str[i]-\\'0\\');\\n                k=k*10;\\n            }\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1936562,
                "title": "python-3-97-faster",
                "content": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        def s(l):\\n            for i ,n in enumerate(l):\\n                if n!=\\'0\\':\\n                    t=l.pop(i)\\n                    break\\n            return str(t)+\\'\\'.join(l)\\n        if num>0:\\n            l=list(str(num))\\n            l.sort()\\n            return(s(l))\\n        else:\\n            l=list(str(num))\\n            l.sort(reverse=True)\\n            a=l.pop(-1)\\n            r=a+\\'\\'.join(l)\\n            return r\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        def s(l):\\n            for i ,n in enumerate(l):\\n                if n!=\\'0\\':\\n                    t=l.pop(i)\\n                    break\\n            return str(t)+\\'\\'.join(l)\\n        if num>0:\\n            l=list(str(num))\\n            l.sort()\\n            return(s(l))\\n        else:\\n            l=list(str(num))\\n            l.sort(reverse=True)\\n            a=l.pop(-1)\\n            r=a+\\'\\'.join(l)\\n            return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1850308,
                "title": "java",
                "content": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num == 0L){return 0L;}\\n        char[] arr = Long.toString(num).toCharArray();\\n        if(num > 0){\\n            Arrays.sort(arr);\\n            int i = 0;\\n            while(arr[i] == \\'0\\'){\\n                i ++;\\n            }\\n            char temp = arr[0];\\n            arr[0] = arr[i];\\n            arr[i] = temp;\\n\\n            StringBuffer sb = new StringBuffer();\\n            for(char c : arr){\\n                sb.append(c);\\n            }\\n            return Long.parseLong(sb.toString());\\n        }else{\\n            Character[] arr2 = new Character[arr.length-1];\\n            for (int i = 0; i < arr.length-1; i++) {\\n                arr2[i] = arr[i+1];\\n            }\\n           \\n            \\n            Arrays.sort(arr2, Collections.reverseOrder());\\n            StringBuffer sb = new StringBuffer();\\n            for(char c : arr2){\\n                sb.append(c);\\n            }\\n            return Long.parseLong(sb.toString()) * -1L;\\n        }\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num == 0L){return 0L;}\\n        char[] arr = Long.toString(num).toCharArray();\\n        if(num > 0){\\n            Arrays.sort(arr);\\n            int i = 0;\\n            while(arr[i] == \\'0\\'){\\n                i ++;\\n            }\\n            char temp = arr[0];\\n            arr[0] = arr[i];\\n            arr[i] = temp;\\n\\n            StringBuffer sb = new StringBuffer();\\n            for(char c : arr){\\n                sb.append(c);\\n            }\\n            return Long.parseLong(sb.toString());\\n        }else{\\n            Character[] arr2 = new Character[arr.length-1];\\n            for (int i = 0; i < arr.length-1; i++) {\\n                arr2[i] = arr[i+1];\\n            }\\n           \\n            \\n            Arrays.sort(arr2, Collections.reverseOrder());\\n            StringBuffer sb = new StringBuffer();\\n            for(char c : arr2){\\n                sb.append(c);\\n            }\\n            return Long.parseLong(sb.toString()) * -1L;\\n        }\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1811902,
                "title": "c-easy-solution-easy-to-understand-100-faster-comments-added",
                "content": "\\n\\n\\n    class Solution {\\n    public:\\n    long long smallestNumber(long long num) {\\n        long long ans=0;\\n        string s=to_string(abs(num)); // CONVERTING LONG LONG TO STRING\\n        sort(s.begin(),s.end()); //SORTING THE STRING\\n        int i=0;\\n        if(num<=0) // IF NUMBER IS LESS THAN OR EQUAL TO ZERO\\n        {\\n            reverse(s.begin(),s.end()); //WE HAVE TO FIND GREATER ELEMENT SO REVERSE THE \\n\\t\\t\\t // STRING(AS -510 IS SMALLER THAN -015)\\n            ans=-(stoll(s)); // CONVERTING STRING TO LONG LONG\\n        }\\n        else{\\n            while(s[i]==\\'0\\') //AS IN QUESTION THERE IS NO LEADING ZERO BUT AFTER SORTING WE GET \\n\\t\\t\\t//ZERO AT STARTING SO THIS STEP WILL SWAP THE LEADING ZERO WITH SMALLEST NON ZERO NUMBER\\n            {\\n                i++;\\n            }\\n            swap(s[0],s[i]); // SWAPPING OF ELEMENTS\\n            ans=stoll(s); // CONVERSION OF STRING TO LONG LONG \\n        }\\n        return ans;\\n    }\\n    };",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n    public:\\n    long long smallestNumber(long long num) {\\n        long long ans=0;\\n        string s=to_string(abs(num)); // CONVERTING LONG LONG TO STRING\\n        sort(s.begin(),s.end()); //SORTING THE STRING\\n        int i=0;\\n        if(num<=0) // IF NUMBER IS LESS THAN OR EQUAL TO ZERO\\n        {\\n            reverse(s.begin(),s.end()); //WE HAVE TO FIND GREATER ELEMENT SO REVERSE THE \\n\\t\\t\\t // STRING(AS -510 IS SMALLER THAN -015)\\n            ans=-(stoll(s)); // CONVERTING STRING TO LONG LONG\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1773726,
                "title": "c-stl-find-first-not-of-used",
                "content": "```\\nclass Solution {\\npublic:\\n   long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0){\\n            sort(s.begin(), s.end());\\n        }else{\\n            sort(s.begin(), s.end(), greater<char>());\\n        }        \\n        if(num > 0){\\n            int indx = s.find_first_not_of(\\'0\\');\\n            swap(s[0], s[indx]);\\n        }\\n        \\n        long long ans = stol(s);\\n        if(num < 0)\\n            ans = -ans;\\n        return ans;        \\n    }  \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n   long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0){\\n            sort(s.begin(), s.end());\\n        }else{\\n            sort(s.begin(), s.end(), greater<char>());\\n        }        \\n        if(num > 0){\\n            int indx = s.find_first_not_of(\\'0\\');\\n            swap(s[0], s[indx]);\\n        }\\n        \\n        long long ans = stol(s);\\n        if(num < 0)\\n            ans = -ans;\\n        return ans;        \\n    }  \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1763568,
                "title": "sort-and-swap-very-easy-solution-100-faster",
                "content": "DO UPVOTE PLS :)) IF U FIND IT USEFUL, I\\'HAVE JUST STARTED TO POST.\\n\\n\\'\\'\\'class Solution {\\npublic:\\n\\n    long long smallestNumber(long long num)\\n\\t\\n    {\\n\\t\\n\\t\\n       string s=to_string(num); //  i made number as string so that i can check digits easily without any loop\\n\\t   \\n          if(num>0){\\n\\t\\t  \\n            sort(s.begin(),s.end());\\n            if(s[0]==\\'0\\'){\\n                int i=0;\\n                while(s[i]==\\'0\\'){\\n                    i++;\\n                }\\n                swap(s[0],s[i]);\\n            }\\n        }\\n        else{\\n            sort(s.begin()+1,s.end(),greater<char>()); // I did \\'\\'s.begin()+1\" beaacuse we dont  want minus sign to be sorted right we want it at starting\\n        }\\n        return stoll(s);\\n    }\\n};\\'\\'\\'\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    long long smallestNumber(long long num)\\n\\t\\n    {\\n\\t\\n\\t\\n       string s=to_string(num); //  i made number as string so that i can check digits easily without any loop\\n\\t   \\n          if(num>0){\\n\\t\\t  \\n            sort(s.begin(),s.end());\\n            if(s[0]==\\'0\\'){\\n                int i=0;\\n                while(s[i]==\\'0\\'){\\n                    i++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1755847,
                "title": "python3-easy-solution",
                "content": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        \\n        if num == 0 : return 0 \\n        snum = sorted(str(num))\\n        if snum[0] == \\'-\\' :\\n            return -int(\"\".join(snum[:0:-1]))\\n        elif snum[0] == \\'0\\' :\\n            x = snum.count(\\'0\\')\\n            return \"\".join([snum[x]]+[\\'0\\'*x]+snum[x+1:])\\n        else :\\n            return \"\".join(snum)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        \\n        if num == 0 : return 0 \\n        snum = sorted(str(num))\\n        if snum[0] == \\'-\\' :\\n            return -int(\"\".join(snum[:0:-1]))\\n        elif snum[0] == \\'0\\' :\\n            x = snum.count(\\'0\\')\\n            return \"\".join([snum[x]]+[\\'0\\'*x]+snum[x+1:])\\n        else :\\n            return \"\".join(snum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1753473,
                "title": "2-approaches-with-comments-using-array-string-both-simple-easy-to-understand-c",
                "content": "Implementation\\n\\n**1st Approach\\nUsing one extra array\\nTime Complexity = O(NLogN) suppose N is :- Total number of digits in num\\nSpace Complexity = O(N)**\\n\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {        \\n        vector<long long> arr;\\n        \\n        // converting num into array\\n        while(num){\\n            arr.push_back(num%10);\\n            num /= 10;\\n        }\\n        \\n        // if num is greater than equal to 0, it means we need to to sort it into ascending order to make it smallest\\n        if(num >= 0){\\n            sort(arr.begin(), arr.end());\\n            \\n            // but when we are sorting it into ascending order, then 0 can come at 0th index, so we need to count the total 0, then count+1 index and 0th index we need to swap, to remove the leading 0\\'s\\n            if(arr.size() >= 2){\\n                \\n                long long i = 0;\\n                \\n                while(i < arr.size() && arr[i] == 0) i++;\\n                \\n                swap(arr[0], arr[i]);\\n            }\\n        }   // if num is negative, it means we need to to sort it into descending order to make it smallest\\n        else{\\n            sort(arr.begin(), arr.end(), greater<int>());\\n        }\\n        \\n        // after all process, we need to convert our array back to num to return the result\\n        long long n = 0;\\n        for(long long itr = 0; itr < arr.size(); itr++){\\n            n = n * 10 + arr[itr];\\n        }\\n        \\n        return n;\\n    }\\n};\\n```\\n\\n\\n\\n**2nd Approach\\nUsing extra string\\nTime Complexity = O(NLogN) suppose N is :- Total number of digits in num\\nSpace Complexity = O(N), considering string of N size**\\n\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n        // convert num into string\\n        string str = to_string(num);\\n        \\n        // if num is greater than 0, it means we need to to sort it into ascending order to make it smallest\\n        if(num > 0){\\n            sort(str.begin(), str.end());\\n            \\n            // but when we are sorting it into ascending order, then \\'0\\' can come at 0th index, so we need to count the total \\'0\\', then count+1 index and 0th index we need to swap, to remove the leading 0\\'s\\n            int i = 0;                \\n            while(i < str.size() && str[i] == \\'0\\') i++;\\n            \\n            swap(str[i], str[0]);\\n        }   // if num is negative, it means we need to to sort it into descending order to make it smallest\\n        else if(num < 0){\\n            sort(str.rbegin(), str.rend());\\n            return -stoll(str); // convert back into long long and also appending the - sign\\n        }\\n        return stoll(str);\\n    }\\n};\\n```\\nIf you find any issue in understanding the solution then comment below, will try to help you.\\nIf you found my solution useful.\\nSo **please do upvote and encourage me** to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {        \\n        vector<long long> arr;\\n        \\n        // converting num into array\\n        while(num){\\n            arr.push_back(num%10);\\n            num /= 10;\\n        }\\n        \\n        // if num is greater than equal to 0, it means we need to to sort it into ascending order to make it smallest\\n        if(num >= 0){\\n            sort(arr.begin(), arr.end());\\n            \\n            // but when we are sorting it into ascending order, then 0 can come at 0th index, so we need to count the total 0, then count+1 index and 0th index we need to swap, to remove the leading 0\\'s\\n            if(arr.size() >= 2){\\n                \\n                long long i = 0;\\n                \\n                while(i < arr.size() && arr[i] == 0) i++;\\n                \\n                swap(arr[0], arr[i]);\\n            }\\n        }   // if num is negative, it means we need to to sort it into descending order to make it smallest\\n        else{\\n            sort(arr.begin(), arr.end(), greater<int>());\\n        }\\n        \\n        // after all process, we need to convert our array back to num to return the result\\n        long long n = 0;\\n        for(long long itr = 0; itr < arr.size(); itr++){\\n            n = n * 10 + arr[itr];\\n        }\\n        \\n        return n;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n        // convert num into string\\n        string str = to_string(num);\\n        \\n        // if num is greater than 0, it means we need to to sort it into ascending order to make it smallest\\n        if(num > 0){\\n            sort(str.begin(), str.end());\\n            \\n            // but when we are sorting it into ascending order, then \\'0\\' can come at 0th index, so we need to count the total \\'0\\', then count+1 index and 0th index we need to swap, to remove the leading 0\\'s\\n            int i = 0;                \\n            while(i < str.size() && str[i] == \\'0\\') i++;\\n            \\n            swap(str[i], str[0]);\\n        }   // if num is negative, it means we need to to sort it into descending order to make it smallest\\n        else if(num < 0){\\n            sort(str.rbegin(), str.rend());\\n            return -stoll(str); // convert back into long long and also appending the - sign\\n        }\\n        return stoll(str);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1752794,
                "title": "c-sort-the-digits-cleaar-and-concise-solution-with-comments",
                "content": "**Hint-1:** For positive numbers, the leading digit should be the smallest nonzero digit. Then the remaining digits follow in ascending order.\\n**Hint-2:** For negative numbers, the digits should be arranged in descending order.\\n\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long ans = 0, orignalnum = num;\\n        vector<int> nums;\\n        while(num != 0){\\n                nums.push_back(num % 10);\\n                num /= 10;\\n        }\\n        sort(nums.begin(), nums.end()); // store the given no. in vector and sort it\\n        \\n        if(orignalnum > 0){\\n            int zeros = 0;\\n            for(int i = 0; i < nums.size(); i++){\\n                if(nums[i] == 0) \\n                    zeros++;  // count no. of zeros\\n                else{\\n                    ans = ans * 10 + nums[i];\\n        // place all zeros in ans once you find first non-zero element so that ans does not contain any leading zeros.\\n                    while(zeros > 0) zeros--, ans *= 10;\\n                }\\n            }\\n        } else {\\n            // In negative case, simply sort and put it in ans because of -ve sign vector will automatically be sorted in descending order \\n            for(int i = 0; i < nums.size(); i++)\\n                    ans = ans * 10 + nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n// Dry Run Code with given examples  for better Understanding\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long ans = 0, orignalnum = num;\\n        vector<int> nums;\\n        while(num != 0){\\n                nums.push_back(num % 10);\\n                num /= 10;\\n        }\\n        sort(nums.begin(), nums.end()); // store the given no. in vector and sort it\\n        \\n        if(orignalnum > 0){\\n            int zeros = 0;\\n            for(int i = 0; i < nums.size(); i++){\\n                if(nums[i] == 0) \\n                    zeros++;  // count no. of zeros\\n                else{\\n                    ans = ans * 10 + nums[i];\\n        // place all zeros in ans once you find first non-zero element so that ans does not contain any leading zeros.\\n                    while(zeros > 0) zeros--, ans *= 10;\\n                }\\n            }\\n        } else {\\n            // In negative case, simply sort and put it in ans because of -ve sign vector will automatically be sorted in descending order \\n            for(int i = 0; i < nums.size(); i++)\\n                    ans = ans * 10 + nums[i];\\n        }\\n        return ans;\\n    }\\n};\\n// Dry Run Code with given examples  for better Understanding\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1752053,
                "title": "easy-to-understand-c-code-sorting",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s=to_string(num);//convert no to string\\n        if(num>0)\\n        {\\n            sort(s.begin(),s.end());//if its greater than 0 sort it\\n        }\\n        else\\n        {\\n            sort(s.begin(),s.end(),greater<char>());//if negetive no sort it in decending order\\n        }\\n        if(num>0)\\n        {\\n            int ind=s.find_first_not_of(\\'0\\');//find the first occurance of 0 and swap it with first non 0 element\\n            swap(s[0],s[ind]);\\n        }\\n        long long ans=stoll(s);//convert string to num\\n        if(num<0)\\n            ans*=-1;//for neg no multiply by -1\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s=to_string(num);//convert no to string\\n        if(num>0)\\n        {\\n            sort(s.begin(),s.end());//if its greater than 0 sort it\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1750641,
                "title": "c-100-swap-and-sort",
                "content": "**Approach:**\\n* Convert long long to string. (**Remember to store only digit not sign i.e. Not \\'-\\'**)\\n* Here 2 cases possible:\\n\\t* If the number is positive, then sort in Ascending Order.\\n\\t* Else sort in descending. (***Because for Negative numbers Largest absolute value is the Smallest***)\\n* Find the First Non-Zero element and swap that number with the first string. This is done because we don\\'t want numbers starting with zero.\\n* Convert string to long long using stol function.\\n* Return the answer according to the sign.\\n\\n**C++ Code:**\\n```\\nlong long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0){\\n            sort(s.begin(), s.end());\\n        }else{\\n            sort(s.begin(), s.end(), greater<char>());\\n        }        \\n        if(num > 0){\\n            int indx = s.find_first_not_of(\\'0\\');\\n            swap(s[0], s[indx]);\\n        }\\n        \\n        long long ans = stol(s);\\n        if(num < 0)\\n            ans = -ans;\\n        return ans;        \\n    }\\n```\\n**Time:** O(N) \\n**Space:** O(1) \\n**Examples with Picture:**\\n![image](https://assets.leetcode.com/users/images/1173d742-e2d8-4c68-af6b-3ff84353333b_1644170382.9836884.png)\\n![image](https://assets.leetcode.com/users/images/1dda11bf-a4f7-4c40-b622-8807fcc9cead_1644170394.6463697.png)\\n",
                "solutionTags": [],
                "code": "```\\nlong long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0){\\n            sort(s.begin(), s.end());\\n        }else{\\n            sort(s.begin(), s.end(), greater<char>());\\n        }        \\n        if(num > 0){\\n            int indx = s.find_first_not_of(\\'0\\');\\n            swap(s[0], s[indx]);\\n        }\\n        \\n        long long ans = stol(s);\\n        if(num < 0)\\n            ans = -ans;\\n        return ans;        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1750419,
                "title": "java-too-much-code-inside",
                "content": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if (num == 0) return num;\\n        if (num < 0) {\\n            List<Long> list = new ArrayList<>();\\n            num *= -1;\\n            while (num != 0) {\\n                list.add(num % 10);\\n                num /= 10;\\n            }\\n            Collections.sort(list);\\n            Collections.reverse(list);\\n            String ans = \"\";\\n            for (int i = 0; i < list.size(); i++) {\\n                ans += list.get(i);\\n            }\\n            return -1 * Long.valueOf(ans);\\n        } else {\\n            List<Long> list = new ArrayList<>();\\n            String str = \"\"+num;\\n            boolean isZero = false;\\n            for (int i = 0; i < str.length(); i++) {\\n                if (str.charAt(i) - \\'0\\' == 0) isZero = true;\\n            }\\n            \\n             if (!isZero) {\\n                  while (num != 0) {\\n                  list.add(num % 10);\\n                  num /= 10;\\n                }\\n                Collections.sort(list);\\n                String ans = \"\";\\n                for (int i = 0; i < list.size(); i++) {\\n                    ans += list.get(i);\\n                }\\n                return Long.valueOf(ans);\\n            } else {\\n                 while (num != 0) {\\n                  list.add(num % 10);\\n                  num /= 10;\\n                }\\n                Collections.sort(list);\\n                char[] ch = new char[list.size()];\\n                 str = \"\";\\n                for (int i = 0; i < list.size(); i++) {\\n                    str += list.get(i);\\n                }\\n                 for (int i = 0; i < str.length(); i++) {\\n                    ch[i] = (char) str.charAt(i);\\n                } \\n                 \\n                int i = 0; \\n                int j = 0; \\n                while (j < ch.length && ch[j] == \\'0\\') {\\n                    j++;\\n                }\\n                 System.out.println(j);\\n                 char c = ch[0];\\n                 ch[0] = ch[j];\\n                 ch[j] = c;\\n                   // System.out.println(Arrays.toString(ch));\\n\\n                str = String.valueOf(ch);\\n                return Long.valueOf(str);\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if (num == 0) return num;\\n        if (num < 0) {\\n            List<Long> list = new ArrayList<>();\\n            num *= -1;\\n            while (num != 0) {\\n                list.add(num % 10);\\n                num /= 10;\\n            }\\n            Collections.sort(list);\\n            Collections.reverse(list);\\n            String ans = \"\";\\n            for (int i = 0; i < list.size(); i++) {\\n                ans += list.get(i);\\n            }\\n            return -1 * Long.valueOf(ans);\\n        } else {\\n            List<Long> list = new ArrayList<>();\\n            String str = \"\"+num;\\n            boolean isZero = false;\\n            for (int i = 0; i < str.length(); i++) {\\n                if (str.charAt(i) - \\'0\\' == 0) isZero = true;\\n            }\\n            \\n             if (!isZero) {\\n                  while (num != 0) {\\n                  list.add(num % 10);\\n                  num /= 10;\\n                }\\n                Collections.sort(list);\\n                String ans = \"\";\\n                for (int i = 0; i < list.size(); i++) {\\n                    ans += list.get(i);\\n                }\\n                return Long.valueOf(ans);\\n            } else {\\n                 while (num != 0) {\\n                  list.add(num % 10);\\n                  num /= 10;\\n                }\\n                Collections.sort(list);\\n                char[] ch = new char[list.size()];\\n                 str = \"\";\\n                for (int i = 0; i < list.size(); i++) {\\n                    str += list.get(i);\\n                }\\n                 for (int i = 0; i < str.length(); i++) {\\n                    ch[i] = (char) str.charAt(i);\\n                } \\n                 \\n                int i = 0; \\n                int j = 0; \\n                while (j < ch.length && ch[j] == \\'0\\') {\\n                    j++;\\n                }\\n                 System.out.println(j);\\n                 char c = ch[0];\\n                 ch[0] = ch[j];\\n                 ch[j] = c;\\n                   // System.out.println(Arrays.toString(ch));\\n\\n                str = String.valueOf(ch);\\n                return Long.valueOf(str);\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750191,
                "title": "c-another-direct-solution-and-with-string-convert",
                "content": "```\\npublic class Solution {\\n    public long SmallestNumber(long num) {\\n        long res = 0;\\n        var digits = new List<long>();\\n        while (num != 0) {\\n            digits.Add(num % 10);\\n            num /= 10;\\n        }\\n        digits.Sort();\\n        int zeroCnt = digits.Count(r => r == 0);\\n        for (int i = 0; i < digits.Count; i++) {\\n            if (zeroCnt > 0 && digits[i] > 0) {\\n                res += digits[i];\\n                res *= (long)Math.Pow(10, zeroCnt);\\n                zeroCnt = 0;\\n            } else res = res * 10 + digits[i];\\n        }\\n        return res;\\n    }\\n}\\n```\\n\\n**Solution with converting to String:**\\n```\\npublic class Solution {\\n    public long SmallestNumber(long num) {\\n        char[] chars = Math.Abs(num).ToString().ToCharArray();\\n        if (num <= 0) {\\n            Array.Sort(chars, (a, b) => b - a);\\n            return Convert.ToInt64(new string(chars)) * (-1);\\n        }\\n        Array.Sort(chars);\\n        int it = Array.FindIndex(chars, r => r != \\'0\\');\\n        char tmp = chars[0];\\n        chars[0] = chars[it];\\n        chars[it] = tmp;\\n        return Convert.ToInt64(new string(chars));\\n    }\\n}\\n```",
                "solutionTags": [
                    "String"
                ],
                "code": "```\\npublic class Solution {\\n    public long SmallestNumber(long num) {\\n        long res = 0;\\n        var digits = new List<long>();\\n        while (num != 0) {\\n            digits.Add(num % 10);\\n            num /= 10;\\n        }\\n        digits.Sort();\\n        int zeroCnt = digits.Count(r => r == 0);\\n        for (int i = 0; i < digits.Count; i++) {\\n            if (zeroCnt > 0 && digits[i] > 0) {\\n                res += digits[i];\\n                res *= (long)Math.Pow(10, zeroCnt);\\n                zeroCnt = 0;\\n            } else res = res * 10 + digits[i];\\n        }\\n        return res;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public long SmallestNumber(long num) {\\n        char[] chars = Math.Abs(num).ToString().ToCharArray();\\n        if (num <= 0) {\\n            Array.Sort(chars, (a, b) => b - a);\\n            return Convert.ToInt64(new string(chars)) * (-1);\\n        }\\n        Array.Sort(chars);\\n        int it = Array.FindIndex(chars, r => r != \\'0\\');\\n        char tmp = chars[0];\\n        chars[0] = chars[it];\\n        chars[it] = tmp;\\n        return Convert.ToInt64(new string(chars));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750090,
                "title": "c-basic-approach-by-using-swap",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n        if(num==0){\\n            return 0;\\n        }\\n      \\n        string s=to_string(num);\\n         \\n     if(s[0]==\\'-\\'){\\n           sort(s.begin()+1,s.end(),greater<int>());\\n       }\\n           else if(s[0]!=\\'-\\'){\\n           sort(s.begin(),s.end());\\n                int n=s.size();\\n                for(int i=0;i<s.size();i++){\\n                    if(s[i]==\\'0\\' && s[i+1]!=\\'0\\'){\\n                        swap(s[0],s[i+1]);\\n                        break;\\n                    }\\n                    \\n                    \\n                                  }\\n                \\n       }\\n        return stoll(s);\\n    }\\n};\\n```\\nIf you like it then please upvote!",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n        if(num==0){\\n            return 0;\\n        }\\n      \\n        string s=to_string(num);\\n         \\n     if(s[0]==\\'-\\'){\\n           sort(s.begin()+1,s.end(),greater<int>());\\n       }\\n           else if(s[0]!=\\'-\\'){\\n           sort(s.begin(),s.end());\\n                int n=s.size();\\n                for(int i=0;i<s.size();i++){\\n                    if(s[i]==\\'0\\' && s[i+1]!=\\'0\\'){\\n                        swap(s[0],s[i+1]);\\n                        break;\\n                    }\\n                    \\n                    \\n                                  }\\n                \\n       }\\n        return stoll(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1750014,
                "title": "python",
                "content": "class Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        nstr = list(str(num))\\n        if len(nstr)<2: return num \\n        ans = []\\n        if num<0:   \\n            ans.append(nstr[0])\\n            ans.extend(sorted(nstr[1:],reverse=True))     \\n            print(ans)\\n        elif num>0:\\n            nstr.sort()\\n            # print(nstr)\\n            n0 = nstr.count(\"0\")\\n            # print(n0)\\n\\n\\n            if n0>0:\\n                ans.append(nstr[n0])\\n                ans.extend(nstr[:n0])\\n                ans.extend(nstr[n0+1:])\\n            else:\\n                ans.extend(nstr)    \\n        else: return num    \\n\\n        return int(\\'\\'.join(ans))\\n",
                "solutionTags": [
                    "Python",
                    "Combinatorics"
                ],
                "code": "class Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        nstr = list(str(num))\\n        if len(nstr)<2: return num \\n        ans = []\\n        if num<0:   \\n            ans.append(nstr[0])\\n            ans.extend(sorted(nstr[1:],reverse=True))     \\n            print(ans)\\n        elif num>0:\\n            nstr.sort()\\n            # print(nstr)\\n            n0 = nstr.count(\"0\")\\n            # print(n0)\\n\\n\\n            if n0>0:\\n                ans.append(nstr[n0])\\n                ans.extend(nstr[:n0])\\n                ans.extend(nstr[n0+1:])\\n            else:\\n                ans.extend(nstr)    \\n        else: return num    \\n\\n        return int(\\'\\'.join(ans))\\n",
                "codeTag": "Java"
            },
            {
                "id": 1749828,
                "title": "python-type-casting",
                "content": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        \\n        l = len(str(num))\\n        res = 0\\n        sign = False if num > 0 else True\\n        \\n        if not sign:\\n            num = list(str(num))\\n            num.sort()\\n            for x, y in enumerate(num):\\n                if y != \\'0\\':\\n                    num.insert(0, y)\\n                    num.pop(x+1)\\n                    break\\n        else:\\n            num = list(str(num))\\n            num.sort(reverse = True)\\n            num.pop()\\n        \\n        for x in num:\\n            res *= 10\\n            res += int(x)\\n        if sign:res *= -1\\n        \\n        return res\\n            \\n            \\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        \\n        l = len(str(num))\\n        res = 0\\n        sign = False if num > 0 else True\\n        \\n        if not sign:\\n            num = list(str(num))\\n            num.sort()\\n            for x, y in enumerate(num):\\n                if y != \\'0\\':\\n                    num.insert(0, y)\\n                    num.pop(x+1)\\n                    break\\n        else:\\n            num = list(str(num))\\n            num.sort(reverse = True)\\n            num.pop()\\n        \\n        for x in num:\\n            res *= 10\\n            res += int(x)\\n        if sign:res *= -1\\n        \\n        return res\\n            \\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749574,
                "title": "python-beginners-friendly-100-faster-py-soln",
                "content": "LOGIC \\u2013 \\n***If number is less than 0 , we can just sort its digits (w/o \\u2018-\\u2018 sign) in descending order, and return the number multiplied by -1***\\nBut if number is greater than 0,\\n**first we\\u2019ll sort its digits in ascending order and find the smallest digit and add total number of 0s after it(provided 0s are present in the given number)***\\n\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:       \\n\\n        if num<0:\\n            n_str = list(str(num*(-1)))\\n            gt=sorted(n_str,reverse=1)\\n            ans = \\'\\'.join(gt)\\n            return (int(ans)*-1)\\n\\n        else:\\n            n_str = list(str(num))\\n            gt = sorted(n_str)\\n            m=n_str.count(\\'0\\')\\n            for t in range(m):\\n                gt.insert(m+1,\\'0\\')\\n            ans = \\'\\'.join(gt)\\n            return (int(ans))\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:       \\n\\n        if num<0:\\n            n_str = list(str(num*(-1)))\\n            gt=sorted(n_str,reverse=1)\\n            ans = \\'\\'.join(gt)\\n            return (int(ans)*-1)\\n\\n        else:\\n            n_str = list(str(num))\\n            gt = sorted(n_str)\\n            m=n_str.count(\\'0\\')\\n            for t in range(m):\\n                gt.insert(m+1,\\'0\\')\\n            ans = \\'\\'.join(gt)\\n            return (int(ans))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749372,
                "title": "c-greedy-sorting",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    long long solve(long long num, int sign){\\n        long long ans =0;\\n        vector<int> store;\\n        // if num is positive\\n        if(sign == 1){\\n            int zr =0;\\n            while(num){\\n                int dig = num % 10;\\n                if(dig == 0) zr++;\\n                store.push_back(dig);\\n                num /= 10;\\n            }\\n            \\n            if(zr == 0)\\n            { sort(store.begin(), store.end());\\n               for(int ele : store){\\n                   ans = ans * 10 + ele;\\n               }\\n                   \\n            }\\n                     \\n            else{ sort(store.begin(), store.end());\\n                  int i=0;\\n                  while(store[i] == 0) i++;\\n                  ans = ans * 10 + store[i];\\n                  i++;\\n                  while(zr--) ans = ans * 10 + 0;\\n                  while(i < store.size()) ans = ans*10 + store[i++];\\n            }\\n          }\\n\\t\\t  \\n\\t\\t  // if num is negative\\n        else{   num *= -1;\\n                while(num){\\n                int dig = num % 10;\\n\\n                store.push_back(dig);\\n                num /= 10;\\n            }\\n               sort(store.begin(), store.end(), greater<int>());\\n               for(int ele : store){\\n                   ans = ans * 10 + ele;\\n               }\\n        }\\n        \\n         return ans;\\n    } \\n    \\n    \\n    \\n    long long smallestNumber(long long num) {\\n        long long sign = num > 0 ? 1 : -1;\\n        long long ans;\\n        // we will try to minimize\\n        if(sign == 1){\\n           ans = solve(num, 1);\\n        }\\n        // we will try to maximize\\n        \\n        else{  \\n            ans = solve(num, -1);\\n        }\\n        \\n        return sign > 0 ? sign * ans : sign * ans;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    \\n    long long solve(long long num, int sign){\\n        long long ans =0;\\n        vector<int> store;\\n        // if num is positive\\n        if(sign == 1){\\n            int zr =0;\\n            while(num){\\n                int dig = num % 10;\\n                if(dig == 0) zr++;\\n                store.push_back(dig);\\n                num /= 10;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1749250,
                "title": "python-3-solution-and-explanation-sort-the-digit",
                "content": "\\n# [Python 3] Solution and Explanation \\uD83E\\uDD32Sort The Digit!\\uD83E\\uDD32\\n\\n\\n## 1\\uFE0F\\u20E3 Main Idea\\nWe seperate cases into two different way\\n1. Num >= 0 : We sort every digit in increasing order, and make sure first index of digit not 0, so we find first not zero element and swap with 0. Finally we return number\\n2. Num < 0 : We make num positive and sort in decreasing order, so we can find maximum num and then return - res\\n\\n## Complexity Analysis\\n* Time: O(N log N) : Let *N* be the number of digits.\\n* Space: O(1) \\n\\n## Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num >= 0:\\n            numList = [int(c) for c in str(num)]\\n            numList.sort()\\n            if numList[0] == 0:\\n                temp = 0\\n                while temp < len(numList) - 1 and numList[temp] == 0:\\n                    temp += 1\\n                self.swap(temp, 0, numList)\\n            res = 0\\n            for num in numList:\\n                res *= 10\\n                res += num\\n            return res\\n        else:\\n            num = abs(num)\\n            numList = [int(c) for c in str(num)]\\n            numList.sort(reverse = True)\\n            res = 0\\n            for num in numList:\\n                res *= 10\\n                res += num\\n            return  - res\\n    \\n    def swap(self, i, j, array):\\n        array[i], array[j] = array[j], array[i]\\n```\\n* See more 2022 Daily Challenge Solution : [GitHub](https://github.com/gcobs0834/2022-Daily-LeetCoding-Challenge-python3-)\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num >= 0:\\n            numList = [int(c) for c in str(num)]\\n            numList.sort()\\n            if numList[0] == 0:\\n                temp = 0\\n                while temp < len(numList) - 1 and numList[temp] == 0:\\n                    temp += 1\\n                self.swap(temp, 0, numList)\\n            res = 0\\n            for num in numList:\\n                res *= 10\\n                res += num\\n            return res\\n        else:\\n            num = abs(num)\\n            numList = [int(c) for c in str(num)]\\n            numList.sort(reverse = True)\\n            res = 0\\n            for num in numList:\\n                res *= 10\\n                res += num\\n            return  - res\\n    \\n    def swap(self, i, j, array):\\n        array[i], array[j] = array[j], array[i]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748974,
                "title": "easy-solution-with-comment",
                "content": "\\n//The Idea is to  form a number from sorted list of numbers(Integer/Long) \\n// if the given number is neative form  maximum else minimum number\\n\\n\\tclass Solution {\\n\\t\\tpublic long smallestNumber(long num) {\\n\\t\\t\\tboolean flag = false;\\n\\t\\t\\tList<Long>list = new ArrayList<>();\\n\\t\\t\\t// flag the neagtive(for further reference ) and make the number positve\\n\\t\\t\\tif(num < 0){\\n\\t\\t\\t\\tflag = true;\\n\\t\\t\\t\\tnum = num * -1;\\n\\t\\t\\t}\\n\\n\\t// storing the number in arraylist\\n\\t\\t\\twhile(num > 0){\\n\\t\\t\\t\\tlong rem = num % 10;\\n\\t\\t\\t\\tlist.add(rem);\\n\\t\\t\\t\\tnum = num /10;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t//sort the list as per flag value\\n\\t\\t\\tif(flag){\\n\\t\\t\\t\\tCollections.sort(list, Collections.reverseOrder());\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tCollections.sort(list);\\n\\t\\t\\t}\\n\\n\\t// if there will be multiple 0s in front \\n\\t\\t\\tint cnt = -1;\\n\\t\\t\\tfor(int i=0;i<list.size();i++){\\n\\t\\t\\t\\tif(list.get(i) == 0) cnt++;\\n\\t\\t\\t\\telse break;\\n\\t\\t\\t}\\n\\t\\t\\tlong sm = -1l;\\n\\t\\t\\tif(cnt != -1){\\n\\t\\t\\t\\tcnt = cnt+1;\\n\\t\\t\\t\\tif(list.size() > cnt){\\n\\t\\t\\t\\t\\tsm = list.get(cnt);\\n\\t\\t\\t\\t\\tlist.remove(cnt);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tlong res = 0;\\n\\t\\t\\tint itr = 0;\\n\\t\\t\\tif(sm != -1) res = sm;\\n\\t// Form the number\\n\\t\\t\\twhile(itr < list.size()){\\n\\t\\t\\t\\tlong mul = list.get(itr);\\n\\t\\t\\t\\tres = res  * 10 + mul;\\n\\t\\t\\t\\titr++;\\n\\t\\t\\t}\\n\\t// if given number was negative, make the result neagtive\\n\\t\\t\\tif(flag) res = res * -1;\\n\\n\\t\\t\\treturn res;\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\tpublic long smallestNumber(long num) {\\n\\t\\t\\tboolean flag = false;\\n\\t\\t\\tList<Long>list = new ArrayList<>();\\n\\t\\t\\t// flag the neagtive(for further reference ) and make the number positve\\n\\t\\t\\tif(num < 0){\\n\\t\\t\\t\\tflag = true;\\n\\t\\t\\t\\tnum = num * -1;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1748905,
                "title": "c-0ms-simple-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0)\\n            return 0;\\n        if(num>0)\\n        {\\n          string str=to_string(num);\\n            sort(str.begin(),str.end());\\n            int i=0;\\n            while(str[i]==\\'0\\')\\n                i++;\\n            swap(str[0],str[i]);\\n            num=stoll(str);\\n            \\n        }\\n        else\\n        {\\n            num=abs(num);\\n            string str=to_string(num);\\n            sort(str.begin(),str.end(),greater<int>());\\n            num=-1*stoll(str);\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0)\\n            return 0;\\n        if(num>0)\\n        {\\n          string str=to_string(num);\\n            sort(str.begin(),str.end());\\n            int i=0;\\n            while(str[i]==\\'0\\')\\n                i++;\\n            swap(str[0],str[i]);\\n            num=stoll(str);\\n            \\n        }\\n        else\\n        {\\n            num=abs(num);\\n            string str=to_string(num);\\n            sort(str.begin(),str.end(),greater<int>());\\n            num=-1*stoll(str);\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748877,
                "title": "c-using-map",
                "content": "Here, the idea is to the store the digits of the number along with their frequencies in a hashmap and then build the smallest possible number using those digits in increasing order(except for leading 0).\\n```\\n    long long smallestNumber(long long num) {\\n        if(num==0)\\n            return 0;\\n        long long x=num, min=0;\\n        int rem=0;\\n        map<int,int> hash;\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            x/=10;\\n            hash[rem]++;\\n        }\\n        map<int,int>:: iterator it=hash.begin();\\n        while(it->first==0)\\n            it++;\\n        min=min*10+(it->first);\\n        it->second--;\\n        it=hash.begin();\\n        while(it!=hash.end())\\n        {\\n            if(it->second>0)\\n            {\\n                min=min*10+(it->first);\\n                it->second--;\\n            }\\n            else\\n                it++;\\n        }\\n        return min;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\n    long long smallestNumber(long long num) {\\n        if(num==0)\\n            return 0;\\n        long long x=num, min=0;\\n        int rem=0;\\n        map<int,int> hash;\\n        while(x!=0)\\n        {\\n            rem=x%10;\\n            x/=10;\\n            hash[rem]++;\\n        }\\n        map<int,int>:: iterator it=hash.begin();\\n        while(it->first==0)\\n            it++;\\n        min=min*10+(it->first);\\n        it->second--;\\n        it=hash.begin();\\n        while(it!=hash.end())\\n        {\\n            if(it->second>0)\\n            {\\n                min=min*10+(it->first);\\n                it->second--;\\n            }\\n            else\\n                it++;\\n        }\\n        return min;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1748824,
                "title": "easy-c-solution",
                "content": "smjh\\n```\\n long long smallestNumber(long long num) {\\n      \\n    bool sign = num>0;\\n        num = abs(num);\\n        if(sign){\\n           string str = to_string(num);\\n            sort(str.begin(),str.end());\\n            int i= 0;\\n            while(str[i]==\\'0\\'){\\n                i++;\\n            }\\n            swap(str[0],str[i]);\\n            num=stoll(str);\\n            \\n        }\\n        else{\\n            \\n            string str = to_string(num);\\n            sort(str.begin(),str.end(),greater());\\n            num = stoll(str) * (-1);\\n        }\\n        return num;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n long long smallestNumber(long long num) {\\n      \\n    bool sign = num>0;\\n        num = abs(num);\\n        if(sign){\\n           string str = to_string(num);\\n            sort(str.begin(),str.end());\\n            int i= 0;\\n            while(str[i]==\\'0\\'){\\n                i++;\\n            }\\n            swap(str[0],str[i]);\\n            num=stoll(str);\\n            \\n        }\\n        else{\\n            \\n            string str = to_string(num);\\n            sort(str.begin(),str.end(),greater());\\n            num = stoll(str) * (-1);\\n        }\\n        return num;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1748660,
                "title": "java-100-fast-explained-with-comments",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        \\n        // convert the number into a string\\n        \\n        String str;\\n        \\n        if(num < 0)\\n        {\\n            long nums = num*(-1);\\n            str = String.valueOf(nums);\\n        }\\n        else\\n        {\\n            str = String.valueOf(num);\\n        }\\n        \\n        char arr[] = str.toCharArray();\\n        \\n        long ans;\\n        \\n        if(num < 0) //negative\\n        {\\n            //sort the character array in descending\\n            // with 0 \\n            \\n            Arrays.sort(arr);   // from this we will get the ascending order, but we need the opposite of it\\n            reverse(arr);\\n            \\n            String res = String.valueOf(arr);   //converting the charcter array back to string\\n            ans = Long.parseLong(res); //converting string to the long value \\n            ans = -ans;\\n        }\\n        else\\n        {\\n            //if the number is positive\\n            Arrays.sort(arr);\\n            \\n            //Here, we will have 0 in the front so, we have to swap it with the first non-zero element in the array    \\n            int i=0;\\n            \\n            for(i = 0;i<arr.length;i++)\\n            {\\n                if(arr[i] != \\'0\\')\\n                {\\n                    //we get the last i value where the 0 starts\\n                    break;\\n                }\\n            }\\n            \\n            if(i <= (arr.length-1)) //if there is an 0 in the array\\n            {\\n                char temp = arr[i];\\n                arr[i] = arr[0];\\n                arr[0] = temp;\\n            }\\n            \\n            String res = String.valueOf(arr);   //converting the charcter array back to string\\n            ans = Long.parseLong(res); //converting string to the long value \\n            \\n        }\\n        \\n        return ans;\\n    }\\n    \\n    public void reverse(char[] arr)\\n    {\\n        // we will traverse half of the array and will put all the element of the first half, in the last one.\\n        // in simle words 1st element as last, 2nd element as 2nd last ....\\n        \\n        int len = arr.length;\\n        \\n        for(int i=0;i<arr.length/2;i++)\\n        {\\n            char temp = arr[i];\\n            arr[i] = arr[len-i-1];\\n            arr[len-i-1] = temp;\\n        }\\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public long smallestNumber(long num) {\\n        \\n        // convert the number into a string\\n        \\n        String str;\\n        \\n        if(num < 0)\\n        {\\n            long nums = num*(-1);\\n            str = String.valueOf(nums);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1748636,
                "title": "python3-using-frequencies-handling-negative-and-postives-sep",
                "content": "\\tclass Solution:\\n\\t\\tdef smallestNumber(self, num: int) -> int:\\n\\t\\t\\tfrequency = [0]*10\\n\\t\\t\\tisPos = True if num > 0 else False\\n\\t\\t\\tnum = abs(num)\\n\\n\\t\\t\\twhile num:\\n\\t\\t\\t\\td=num%10\\n\\t\\t\\t\\tfrequency[d]+=1\\n\\t\\t\\t\\tnum=num//10\\n\\n\\t\\t\\tans = 0\\n\\t\\t\\tif isPos:\\n\\t\\t\\t\\tfor i in range(1, 10):\\n\\t\\t\\t\\t\\tif frequency[i]>0:\\n\\t\\t\\t\\t\\t\\tans = i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tfor i in range(0, 10):\\n\\t\\t\\t\\t\\twhile frequency[i]:\\n\\t\\t\\t\\t\\t\\tans = ans* 10 + i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor i in range(9, 0, -1):\\n\\t\\t\\t\\t\\tif frequency[i]>0:\\n\\t\\t\\t\\t\\t\\tans = i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tfor i in range(9,-1, -1):\\n\\t\\t\\t\\t\\twhile frequency[i]:\\n\\t\\t\\t\\t\\t\\tans = ans* 10 + i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\n\\t\\t\\treturn ans if isPos else -ans",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef smallestNumber(self, num: int) -> int:\\n\\t\\t\\tfrequency = [0]*10\\n\\t\\t\\tisPos = True if num > 0 else False\\n\\t\\t\\tnum = abs(num)\\n\\n\\t\\t\\twhile num:\\n\\t\\t\\t\\td=num%10\\n\\t\\t\\t\\tfrequency[d]+=1\\n\\t\\t\\t\\tnum=num//10\\n\\n\\t\\t\\tans = 0\\n\\t\\t\\tif isPos:\\n\\t\\t\\t\\tfor i in range(1, 10):\\n\\t\\t\\t\\t\\tif frequency[i]>0:\\n\\t\\t\\t\\t\\t\\tans = i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tfor i in range(0, 10):\\n\\t\\t\\t\\t\\twhile frequency[i]:\\n\\t\\t\\t\\t\\t\\tans = ans* 10 + i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tfor i in range(9, 0, -1):\\n\\t\\t\\t\\t\\tif frequency[i]>0:\\n\\t\\t\\t\\t\\t\\tans = i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\t\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\tfor i in range(9,-1, -1):\\n\\t\\t\\t\\t\\twhile frequency[i]:\\n\\t\\t\\t\\t\\t\\tans = ans* 10 + i\\n\\t\\t\\t\\t\\t\\tfrequency[i] -= 1\\n\\n\\t\\t\\treturn ans if isPos else -ans",
                "codeTag": "Java"
            },
            {
                "id": 1748570,
                "title": "solve-by-first-creating-an-array-of-all-digits",
                "content": "```\\n\\nimport java.util.Arrays;\\n\\npublic class SmallestValueOfRearrangedNumber {\\n\\n    public static long smallestNumber(long num) {\\n        boolean isPositive = false;\\n        if (num >= 0) {\\n            isPositive = true;\\n        } else {\\n            num *= -1;\\n        }\\n\\n        if (num == 0) {\\n            return num;\\n        }\\n\\n        int totalDigits = 0;\\n        long divider = 1;\\n\\n        while (divider <= num) {\\n            totalDigits++;\\n            divider *= 10;\\n        }\\n\\n        int[] digitsArray = new int[totalDigits];\\n        divider /= 10;\\n        int d = 0;\\n        for (int i = 0; i < totalDigits; i++) {\\n            d = (int) (num / divider);\\n            num = num % divider;\\n            divider /= 10;\\n            digitsArray[i] = d;\\n        }\\n\\n        Arrays.sort(digitsArray);\\n\\n        int numOfZeros = 0;\\n        for (int i = 0; i < digitsArray.length; i++) {\\n            if (digitsArray[i] == 0) {\\n                numOfZeros++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        long minimalNum = 0;\\n        int firstNonZeroIndex = numOfZeros;\\n\\n        if (isPositive) {\\n            minimalNum = digitsArray[firstNonZeroIndex];\\n            while (numOfZeros > 0) {\\n                minimalNum *= 10;\\n                numOfZeros--;\\n            }\\n            int i = firstNonZeroIndex + 1;\\n            while (i < digitsArray.length) {\\n                minimalNum *= 10;\\n                minimalNum += digitsArray[i];\\n                i++;\\n            }\\n        } else {\\n            int totalNonZeros = totalDigits - firstNonZeroIndex;\\n\\n            int i = totalDigits - 1;\\n            while (i >= firstNonZeroIndex) {\\n                minimalNum *= 10;\\n                minimalNum += digitsArray[i];\\n\\n                i--;\\n            }\\n            i = firstNonZeroIndex - 1;\\n            while (i >= 0) {\\n                minimalNum *= 10;\\n                i--;\\n            }\\n            minimalNum *= -1;\\n        }\\n\\n        return minimalNum;\\n    }\\n\\n    public static void main(String[] args) {\\n        System.out.println(smallestNumber(310));\\n        System.out.println(smallestNumber(-7605));\\n        System.out.println(smallestNumber(70047658));\\n        System.out.println(smallestNumber(-70047658));\\n        System.out.println(smallestNumber(435));\\n        System.out.println(smallestNumber(-435));\\n        System.out.println(smallestNumber(43597802));\\n        System.out.println(smallestNumber(-43597802));\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\n\\nimport java.util.Arrays;\\n\\npublic class SmallestValueOfRearrangedNumber {\\n\\n    public static long smallestNumber(long num) {\\n        boolean isPositive = false;\\n        if (num >= 0) {\\n            isPositive = true;\\n        } else {\\n            num *= -1;\\n        }\\n\\n        if (num == 0) {\\n            return num;\\n        }\\n\\n        int totalDigits = 0;\\n        long divider = 1;\\n\\n        while (divider <= num) {\\n            totalDigits++;\\n            divider *= 10;\\n        }\\n\\n        int[] digitsArray = new int[totalDigits];\\n        divider /= 10;\\n        int d = 0;\\n        for (int i = 0; i < totalDigits; i++) {\\n            d = (int) (num / divider);\\n            num = num % divider;\\n            divider /= 10;\\n            digitsArray[i] = d;\\n        }\\n\\n        Arrays.sort(digitsArray);\\n\\n        int numOfZeros = 0;\\n        for (int i = 0; i < digitsArray.length; i++) {\\n            if (digitsArray[i] == 0) {\\n                numOfZeros++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        long minimalNum = 0;\\n        int firstNonZeroIndex = numOfZeros;\\n\\n        if (isPositive) {\\n            minimalNum = digitsArray[firstNonZeroIndex];\\n            while (numOfZeros > 0) {\\n                minimalNum *= 10;\\n                numOfZeros--;\\n            }\\n            int i = firstNonZeroIndex + 1;\\n            while (i < digitsArray.length) {\\n                minimalNum *= 10;\\n                minimalNum += digitsArray[i];\\n                i++;\\n            }\\n        } else {\\n            int totalNonZeros = totalDigits - firstNonZeroIndex;\\n\\n            int i = totalDigits - 1;\\n            while (i >= firstNonZeroIndex) {\\n                minimalNum *= 10;\\n                minimalNum += digitsArray[i];\\n\\n                i--;\\n            }\\n            i = firstNonZeroIndex - 1;\\n            while (i >= 0) {\\n                minimalNum *= 10;\\n                i--;\\n            }\\n            minimalNum *= -1;\\n        }\\n\\n        return minimalNum;\\n    }\\n\\n    public static void main(String[] args) {\\n        System.out.println(smallestNumber(310));\\n        System.out.println(smallestNumber(-7605));\\n        System.out.println(smallestNumber(70047658));\\n        System.out.println(smallestNumber(-70047658));\\n        System.out.println(smallestNumber(435));\\n        System.out.println(smallestNumber(-435));\\n        System.out.println(smallestNumber(43597802));\\n        System.out.println(smallestNumber(-43597802));\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748548,
                "title": "easy-solution-using-priority-queue-with-explanation",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n            priority_queue<long long, vector<long long>, greater<long long>> minh;\\n            while(num) {\\n                minh.push(num%10); // adding each digit to priority_queue\\n                num/=10;\\n            }\\n            long long zerocount = 0;\\n            while(!minh.empty() && minh.top()==0) { // count the number of zeroes if number is positive incase of negative no need count the zeroes as it will come in last\\n                minh.pop();\\n                zerocount++;\\n            }\\n        if(minh.empty()) return 0; // if the number on top was 0.\\n            long long ans = minh.top(); // add first smallest other than zero.\\n            minh.pop();\\n            for(int i=0; i<zerocount; i++) { // add rest of the zeroes\\n                ans*=10;\\n            }\\n            while(!minh.empty()) { // add rest of the numbers in increasing order\\n                ans = ans*10+minh.top();\\n                minh.pop();\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        \\n            priority_queue<long long, vector<long long>, greater<long long>> minh;\\n            while(num) {\\n                minh.push(num%10); // adding each digit to priority_queue\\n                num/=10;\\n            }\\n            long long zerocount = 0;\\n            while(!minh.empty() && minh.top()==0) { // count the number of zeroes if number is positive incase of negative no need count the zeroes as it will come in last\\n                minh.pop();\\n                zerocount++;\\n            }\\n        if(minh.empty()) return 0; // if the number on top was 0.\\n            long long ans = minh.top(); // add first smallest other than zero.\\n            minh.pop();\\n            for(int i=0; i<zerocount; i++) { // add rest of the zeroes\\n                ans*=10;\\n            }\\n            while(!minh.empty()) { // add rest of the numbers in increasing order\\n                ans = ans*10+minh.top();\\n                minh.pop();\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748532,
                "title": "new-to-coding-need-help-with-this-dirty-bruteforce-approach",
                "content": "Sorry for the dirty code below but I don\\'t know much about DS and ALGO so all I have is bruteforce and dirty code.\\nBut can you please help me where this code went wrong.\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num<0){\\n            long ref=(-1)*num;\\n            int len=0;\\n        while(ref>0){\\n            len++;\\n            ref/=10;\\n        }\\n        ref=num;\\n        long [] test= new long[len];\\n        for(int i=0;i<len;i++){\\n            test[i]=ref%10;\\n            ref/=10;\\n        }\\n        Arrays.sort(test);\\n        ref=0;\\n        int tomultiply=1;\\n        for(int i=test.length-1;i>=0;i--){\\n            ref=test[i]*tomultiply+ref;\\n            tomultiply*=10;\\n        }\\n        return ref;\\n        }\\n        else if(num>=0){\\n                 long ref=num;\\n            int len=0;\\n        while(ref>0){\\n            len++;\\n            ref/=10;\\n        }\\n        ref=num;\\n            long [] test= new long[len];\\n        for(int i=0;i<len;i++){\\n            test[i]=ref%10;\\n            ref/=10;\\n        }\\n        Arrays.sort(test);\\n            int countOfZero=0;\\n        for(int i=0;i<len;i++){\\n            if(test[i]==0) countOfZero++;\\n            break;\\n        }\\n        long [] lmao = new long[len];\\n            lmao[0]=test[countOfZero];\\n            for(int i=1;i<=countOfZero;i++){\\n                lmao[i]=0;\\n            }\\n            for(int i=countOfZero+1;i<len;i++){\\n                lmao[i]=test[i];\\n            }\\n            ref=0;\\n        int tomultiply=1;\\n        for(int i=lmao.length-1;i>=0;i--){\\n            ref=lmao[i]*tomultiply+ref;\\n            tomultiply*=10;\\n        }\\n        return ref;\\n            \\n        }\\n        return 80085;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num<0){\\n            long ref=(-1)*num;\\n            int len=0;\\n        while(ref>0){\\n            len++;\\n            ref/=10;\\n        }\\n        ref=num;\\n        long [] test= new long[len];\\n        for(int i=0;i<len;i++){\\n            test[i]=ref%10;\\n            ref/=10;\\n        }\\n        Arrays.sort(test);\\n        ref=0;\\n        int tomultiply=1;\\n        for(int i=test.length-1;i>=0;i--){\\n            ref=test[i]*tomultiply+ref;\\n            tomultiply*=10;\\n        }\\n        return ref;\\n        }\\n        else if(num>=0){\\n                 long ref=num;\\n            int len=0;\\n        while(ref>0){\\n            len++;\\n            ref/=10;\\n        }\\n        ref=num;\\n            long [] test= new long[len];\\n        for(int i=0;i<len;i++){\\n            test[i]=ref%10;\\n            ref/=10;\\n        }\\n        Arrays.sort(test);\\n            int countOfZero=0;\\n        for(int i=0;i<len;i++){\\n            if(test[i]==0) countOfZero++;\\n            break;\\n        }\\n        long [] lmao = new long[len];\\n            lmao[0]=test[countOfZero];\\n            for(int i=1;i<=countOfZero;i++){\\n                lmao[i]=0;\\n            }\\n            for(int i=countOfZero+1;i<len;i++){\\n                lmao[i]=test[i];\\n            }\\n            ref=0;\\n        int tomultiply=1;\\n        for(int i=lmao.length-1;i>=0;i--){\\n            ref=lmao[i]*tomultiply+ref;\\n            tomultiply*=10;\\n        }\\n        return ref;\\n            \\n        }\\n        return 80085;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748526,
                "title": "c-sort-based-on-positive-or-negative-number",
                "content": "Not sure if this is the most optimal way, but here\\'s an approach. Given the input `num`, we notice that if the number is negative, we want to return the number with digits in descending order. If the number is positive, sort by ascending order, and then find the first non-zero digit\\'s index and swap it with the first zero.\\n\\n```cpp\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if (num == 0) {\\n            return 0;\\n        }\\n\\n        string numStr = to_string(num);\\n        if (numStr[0] == \\'-\\') {\\n            sort(numStr.begin() + 1, numStr.end(), [](const char& c1, const char& c2) {\\n                return c1 > c2;\\n            });\\n        }\\n        else {\\n            sort(numStr.begin(), numStr.end());\\n\\n            int firstNonZeroIdx = 0;\\n            while (numStr[firstNonZeroIdx] == \\'0\\') ++firstNonZeroIdx;\\n\\n            swap(numStr[0], numStr[firstNonZeroIdx]);\\n        }\\n\\n        return stoll(numStr);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if (num == 0) {\\n            return 0;\\n        }\\n\\n        string numStr = to_string(num);\\n        if (numStr[0] == \\'-\\') {\\n            sort(numStr.begin() + 1, numStr.end(), [](const char& c1, const char& c2) {\\n                return c1 > c2;\\n            });\\n        }\\n        else {\\n            sort(numStr.begin(), numStr.end());\\n\\n            int firstNonZeroIdx = 0;\\n            while (numStr[firstNonZeroIdx] == \\'0\\') ++firstNonZeroIdx;\\n\\n            swap(numStr[0], numStr[firstNonZeroIdx]);\\n        }\\n\\n        return stoll(numStr);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748516,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num<0){\\n            num=num*(-1);\\n            string s=to_string(num);\\n            sort(s.begin(),s.end(),greater<int>());\\n            stringstream g(s);\\n            long long  k=0;\\n            g>>k;\\n            return ((-1)*k);\\n        }\\n        string s=to_string(num);\\n        sort(s.begin(),s.end());\\n        if(s[0]==\\'0\\'){\\n            int j=1;\\n            while(s[j]==\\'0\\'){\\n                j++;\\n            }\\n            swap(s[0],s[j]);\\n        }\\n        stringstream g(s);\\n        long long k=0;\\n        g>>k;\\n        return (k);\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num<0){\\n            num=num*(-1);\\n            string s=to_string(num);\\n            sort(s.begin(),s.end(),greater<int>());\\n            stringstream g(s);\\n            long long  k=0;\\n            g>>k;\\n            return ((-1)*k);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1748482,
                "title": "easy-python",
                "content": "\\n\\nif num>0 then get the smallest number from num except 0\\nadd the smallest number in a new string followed with all the zeros and\\nadd the remaining numbers from num in sorted order to the new string\\n\\nif num<0 then sort the num in reverse order and return it\\n\\nif num =0 then return 0\\n\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num==0:\\n            return 0\\n        if num>=0:\\n            num=str(num)\\n            num=sorted(num)\\n            ans=\\'\\'\\n            z=num.count(\\'0\\')\\n            for i in range(z):\\n                num.pop(0)\\n            if len(num)>0:\\n                ans+=num[0]\\n            ans+=\\'0\\'*z\\n            for i in range(1,len(num)):\\n                ans+=num[i]\\n        else:\\n            num=str(num)\\n            num=sorted(num[1:])\\n            num.sort(reverse=True)\\n            ans=\\'-\\'\\n            for i in range(len(num)):\\n                ans+=num[i]\\n        return ans\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num==0:\\n            return 0\\n        if num>=0:\\n            num=str(num)\\n            num=sorted(num)\\n            ans=\\'\\'\\n            z=num.count(\\'0\\')\\n            for i in range(z):\\n                num.pop(0)\\n            if len(num)>0:\\n                ans+=num[0]\\n            ans+=\\'0\\'*z\\n            for i in range(1,len(num)):\\n                ans+=num[i]\\n        else:\\n            num=str(num)\\n            num=sorted(num[1:])\\n            num.sort(reverse=True)\\n            ans=\\'-\\'\\n            for i in range(len(num)):\\n                ans+=num[i]\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1748443,
                "title": "java",
                "content": "The idea is to maximize the number obtained from digits if the original number is negative and to minimize the number if positive.\\nI.e. **1234 < 4321 but -1234 > -4321**.\\n```\\nclass Solution\\n{\\n    public long smallestNumber(long num)\\n    {\\n        boolean neg = false;\\n        if(num < 0) //Remove negative sign\\n        {\\n            neg = true;\\n            num = -num;\\n        }\\n        char[] dig = String.valueOf(num).toCharArray();\\n        Arrays.sort(dig); // Ascending sort\\n        if(!neg) // For positive number, swap the first non zero with 0th index if 0 is present\\n        {\\n            int i = 0;\\n            for(i = 0; i < dig.length; i++)//Finding the first non zero\\n                if(dig[i] != \\'0\\')\\n                    break;\\n            if(i <= dig.length-1)//Swapping\\n            {\\n                char temp = dig[i];\\n                dig[i] = dig[0];\\n                dig[0] = temp;\\n            }\\n        }\\n        long ret = 0L;\\n        if(neg)//Requires descending sort, hence reverse traversal\\n        {\\n            StringBuilder sb = new StringBuilder();\\n            for(int i = dig.length-1; i >= 0; i--)\\n                sb.append(dig[i]);\\n            ret = Long.parseLong(sb.toString());\\n            ret = -ret;\\n        }\\n        else\\n            for(char c : dig)\\n                ret = ret * 10 + (c - \\'0\\');\\n        return ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public long smallestNumber(long num)\\n    {\\n        boolean neg = false;\\n        if(num < 0) //Remove negative sign\\n        {\\n            neg = true;\\n            num = -num;\\n        }\\n        char[] dig = String.valueOf(num).toCharArray();\\n        Arrays.sort(dig); // Ascending sort\\n        if(!neg) // For positive number, swap the first non zero with 0th index if 0 is present\\n        {\\n            int i = 0;\\n            for(i = 0; i < dig.length; i++)//Finding the first non zero\\n                if(dig[i] != \\'0\\')\\n                    break;\\n            if(i <= dig.length-1)//Swapping\\n            {\\n                char temp = dig[i];\\n                dig[i] = dig[0];\\n                dig[0] = temp;\\n            }\\n        }\\n        long ret = 0L;\\n        if(neg)//Requires descending sort, hence reverse traversal\\n        {\\n            StringBuilder sb = new StringBuilder();\\n            for(int i = dig.length-1; i >= 0; i--)\\n                sb.append(dig[i]);\\n            ret = Long.parseLong(sb.toString());\\n            ret = -ret;\\n        }\\n        else\\n            for(char c : dig)\\n                ret = ret * 10 + (c - \\'0\\');\\n        return ret;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078839,
                "title": "really-easy-using-vectors-beats-100-00-users-runtime-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->the problem is simple u just need to have two cases one for positive and secodn fro negative integers and store accordingly the numbers in the array and do as the question says to you.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Firstly check the number whether its positive or not\\n2. Accordingly if the number is positive then store the minimum non zero element first then sort the remaining array and after that with the minimum number store the next numbers by modulo and division.\\n3. Accordingly if the number is negative then just make the number positive then sort the number in revers order by storing it into the vector \\n4. Now at last again convert the number to negative by mutliplying it to -1\\n5. return the number accordingly in both the conditional cases\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        vector<int>ans;\\n        int mini=INT_MAX;\\n        if(num>0)\\n        {\\n        while(num>0)\\n        {\\n            ans.push_back(num%10);\\n            num/=10;\\n        }\\n        for(auto i:ans)\\n        {\\n            if(i>0)mini=min(mini,i);\\n        }\\n        long long answer=mini;\\n        sort(ans.begin(),ans.end());\\n        int count=1;\\n        for(auto i:ans)\\n        {\\n           if(i!=mini )\\n           {\\n             answer=answer*10+i;\\n           }\\n           if(i==mini and count==0)\\n           {\\n               answer=answer*10+i;\\n           }\\n           if(i==mini and count==1)\\n           {\\n               count--;\\n           }\\n        }\\n        return answer;\\n        }\\n        else \\n        {\\n            num*=(-1);\\n            vector<int>ans;\\n            while(num>0)\\n        {\\n            ans.push_back(num%10);\\n            num/=10;\\n        }\\n        sort(ans.rbegin(),ans.rend());\\n        long long answer=0;\\n         for(auto i:ans)\\n        {\\n            answer=answer*10+i;   \\n        }\\n        answer=answer*(-1);\\n         return answer;\\n        }\\n       \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        vector<int>ans;\\n        int mini=INT_MAX;\\n        if(num>0)\\n        {\\n        while(num>0)\\n        {\\n            ans.push_back(num%10);\\n            num/=10;\\n        }\\n        for(auto i:ans)\\n        {\\n            if(i>0)mini=min(mini,i);\\n        }\\n        long long answer=mini;\\n        sort(ans.begin(),ans.end());\\n        int count=1;\\n        for(auto i:ans)\\n        {\\n           if(i!=mini )\\n           {\\n             answer=answer*10+i;\\n           }\\n           if(i==mini and count==0)\\n           {\\n               answer=answer*10+i;\\n           }\\n           if(i==mini and count==1)\\n           {\\n               count--;\\n           }\\n        }\\n        return answer;\\n        }\\n        else \\n        {\\n            num*=(-1);\\n            vector<int>ans;\\n            while(num>0)\\n        {\\n            ans.push_back(num%10);\\n            num/=10;\\n        }\\n        sort(ans.rbegin(),ans.rend());\\n        long long answer=0;\\n         for(auto i:ans)\\n        {\\n            answer=answer*10+i;   \\n        }\\n        answer=answer*(-1);\\n         return answer;\\n        }\\n       \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042705,
                "title": "beats-100-c-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string numStr = to_string(num);\\n        if(num == 0)\\n        {\\n            return 0;\\n        }\\n        if (numStr[0] == \\'-\\') {\\n            // If the number is negative, exclude the \\'-\\' sign for sorting.\\n            sort(numStr.begin() + 1, numStr.end());\\n            reverse(numStr.begin() + 1, numStr.end());\\n        } else {\\n            sort(numStr.begin(), numStr.end());\\n        }\\n\\n        // Find the first non-zero digit (to eliminate leading zeros).\\n        int idx = 0;\\n        while (idx < numStr.size() && numStr[idx] == \\'0\\') {\\n            idx++;\\n        }\\n\\n        if (idx > 0) {\\n            // Swap the first non-zero digit with the first digit.\\n            swap(numStr[0], numStr[idx]);\\n        }\\n\\n        // Convert the string back to a long long.\\n        long long result = stoll(numStr);\\n\\n        return result;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string numStr = to_string(num);\\n        if(num == 0)\\n        {\\n            return 0;\\n        }\\n        if (numStr[0] == \\'-\\') {\\n            // If the number is negative, exclude the \\'-\\' sign for sorting.\\n            sort(numStr.begin() + 1, numStr.end());\\n            reverse(numStr.begin() + 1, numStr.end());\\n        } else {\\n            sort(numStr.begin(), numStr.end());\\n        }\\n\\n        // Find the first non-zero digit (to eliminate leading zeros).\\n        int idx = 0;\\n        while (idx < numStr.size() && numStr[idx] == \\'0\\') {\\n            idx++;\\n        }\\n\\n        if (idx > 0) {\\n            // Swap the first non-zero digit with the first digit.\\n            swap(numStr[0], numStr[idx]);\\n        }\\n\\n        // Convert the string back to a long long.\\n        long long result = stoll(numStr);\\n\\n        return result;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4041113,
                "title": "elementary-school-digits-in-the-number-and-sort-o-log10-n-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nGet the digits of number and sort them.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor negative number just form the maximum number.\\nFor positve number skip to first non-zero digit and then use all zeros\\n\\n# Complexity\\n- Time complexity: O(log10 n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(log10 n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long n = abs(num);\\n        vector<long long> digits;\\n        while(n > 0){\\n            digits.push_back(n%10);\\n            n = n/10;\\n        }\\n        sort(digits.begin(), digits.end());\\n        long long ans = 0;\\n\\n        if(num < 0){\\n            for(long long i=digits.size()-1; i >=0; i--)\\n                ans = ans*10 + digits[i];\\n            return -ans;\\n        }\\n        else{\\n            long long zero = 0;\\n            for(long long i=0; i < digits.size(); i++){\\n                if(digits[i] == 0)\\n                    zero++;\\n                else{\\n                    ans = ans*10 + digits[i];\\n                    while(zero-- > 0)\\n                        ans = ans*10;\\n                }\\n            }\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long n = abs(num);\\n        vector<long long> digits;\\n        while(n > 0){\\n            digits.push_back(n%10);\\n            n = n/10;\\n        }\\n        sort(digits.begin(), digits.end());\\n        long long ans = 0;\\n\\n        if(num < 0){\\n            for(long long i=digits.size()-1; i >=0; i--)\\n                ans = ans*10 + digits[i];\\n            return -ans;\\n        }\\n        else{\\n            long long zero = 0;\\n            for(long long i=0; i < digits.size(); i++){\\n                if(digits[i] == 0)\\n                    zero++;\\n                else{\\n                    ans = ans*10 + digits[i];\\n                    while(zero-- > 0)\\n                        ans = ans*10;\\n                }\\n            }\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040509,
                "title": "c-very-clearly-explained-using-vector-and-sorting",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        vector<int> no;\\n        int sign = num < 0 ? -1: 1, zeros = 0, idx = 0;\\n        long long ans = 0;\\n\\n        if(num == 0) return num;\\n        num = abs(num);\\n\\n        // Store non-zero digits in a vector and counts no of zeros in num\\n        while(num > 0)\\n        {\\n            if(num%10 != 0) no.push_back(num%10);\\n            else ++zeros;\\n            num = num/10;\\n        }\\n\\n        // If num is -ve, then sort the number is descending order, otherwise ascending.\\n        // If num is +ve, we have to append all the zeros after smallest non-zero digit.\\n        if(sign == -1) sort(no.begin(), no.end(), greater<int>());\\n        else {\\n            sort(no.begin(), no.end());\\n            ans = no[idx++];\\n            ans = ans * pow(10, zeros);\\n            zeros = 0;\\n        }\\n        \\n        // Then just keep appending the rest of elements in vector no, to the result res.\\n        for(int i=idx; i<no.size(); i++)\\n        {\\n            ans = ans * 10;\\n            ans += no[i];\\n        }\\n\\n        // If num < 0, then we have to append all the zeros at the end of res.\\n        if(zeros) ans = ans * pow(10, zeros);\\n\\n        // Return the ans with the sign\\n        return ans * sign;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        vector<int> no;\\n        int sign = num < 0 ? -1: 1, zeros = 0, idx = 0;\\n        long long ans = 0;\\n\\n        if(num == 0) return num;\\n        num = abs(num);\\n\\n        // Store non-zero digits in a vector and counts no of zeros in num\\n        while(num > 0)\\n        {\\n            if(num%10 != 0) no.push_back(num%10);\\n            else ++zeros;\\n            num = num/10;\\n        }\\n\\n        // If num is -ve, then sort the number is descending order, otherwise ascending.\\n        // If num is +ve, we have to append all the zeros after smallest non-zero digit.\\n        if(sign == -1) sort(no.begin(), no.end(), greater<int>());\\n        else {\\n            sort(no.begin(), no.end());\\n            ans = no[idx++];\\n            ans = ans * pow(10, zeros);\\n            zeros = 0;\\n        }\\n        \\n        // Then just keep appending the rest of elements in vector no, to the result res.\\n        for(int i=idx; i<no.size(); i++)\\n        {\\n            ans = ans * 10;\\n            ans += no[i];\\n        }\\n\\n        // If num < 0, then we have to append all the zeros at the end of res.\\n        if(zeros) ans = ans * pow(10, zeros);\\n\\n        // Return the ans with the sign\\n        return ans * sign;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031959,
                "title": "best-solution-using-arrays-in-o-logn-simple-sorting-and-swapping-beats-100",
                "content": "# Intuition\\nThe code is designed to find the smallest number that can be formed from the digits of a given integer while considering its sign. \\n\\n# Approach\\n1. It handles the special case where the input number is 0, returning 0 immediately because the smallest number with no digits is 0.\\n\\n2. For positive numbers, it extracts the digits from the input number and stores them in a vector n. Each digit is obtained by taking the remainder when dividing the number by 10 and then dividing the number by 10 to remove the last digit.\\n\\n3. If the input number is non-negative, it sorts the digits in ascending order using sort(n.begin(), n.end()). However, it also ensures that the smallest digit (non-zero) appears in the first position by performing a swap if necessary. This way, the smallest number is formed.\\n\\n4. For negative numbers, it sorts the digits in descending order using sort(n.begin(), n.end(), greater<int>()). This ensures that the smallest number with the given digits is formed, taking into account the negative sign.\\n\\n5. Finally, it constructs the smallest number by iterating through the sorted n vector and multiplying the result by 10 while adding each digit.\\n\\n6. The code handles both positive and negative numbers correctly and ensures that the smallest number possible with the given digits is returned.\\n\\n# Complexity\\n- Time complexity:\\nOverall, the time complexity is dominated by the sorting step, so the final time complexity is O(log(n)), where n is the number of digits in the input number.\\n\\n- Space complexity:\\nOverall, the space complexity is O(d), where d is the number of digits in the input number.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if (num == 0) {\\n            return 0;\\n        }\\n        long long temp = abs(num);\\n        vector<int> n;\\n        \\n        while (temp != 0) {\\n            int rem = temp % 10;\\n            n.push_back(rem);\\n            temp /= 10; \\n        }\\n        if (num >= 0) {\\n            sort(n.begin(), n.end());\\n            if (n[0] == 0) {\\n                for (int i = 1; i < n.size(); i++) {\\n                    if (n[i] != 0) {\\n                        swap(n[0], n[i]);\\n                        break;\\n                    }\\n                }\\n            }\\n        } else {\\n            sort(n.begin(), n.end(), greater<int>());\\n        }\\n        long long result = 0;\\n        for (int digit : n) {\\n            result = result * 10 + digit;\\n        }\\n        return (num >= 0) ? result : -result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sort",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if (num == 0) {\\n            return 0;\\n        }\\n        long long temp = abs(num);\\n        vector<int> n;\\n        \\n        while (temp != 0) {\\n            int rem = temp % 10;\\n            n.push_back(rem);\\n            temp /= 10; \\n        }\\n        if (num >= 0) {\\n            sort(n.begin(), n.end());\\n            if (n[0] == 0) {\\n                for (int i = 1; i < n.size(); i++) {\\n                    if (n[i] != 0) {\\n                        swap(n[0], n[i]);\\n                        break;\\n                    }\\n                }\\n            }\\n        } else {\\n            sort(n.begin(), n.end(), greater<int>());\\n        }\\n        long long result = 0;\\n        for (int digit : n) {\\n            result = result * 10 + digit;\\n        }\\n        return (num >= 0) ? result : -result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4013015,
                "title": "c-0-ms-soln-with-detailed-explanation",
                "content": "# Intuition\\nSorting wisely\\n\\n# Approach\\n# Three cases arise in this problem:\\n**Case 1**: (num **=** 0) -> it will always remain zero.\\n**Case 2**: (num **>** 0) -> find smallest number possible by jumbling the letters. But here is a catch, 0 can\\'t lead. So, to tackel this, I used string and sorted it in lexographically smallest order.\\nLater, I swapped the first non-zero digit with number at 0th index of string.\\n**Example:** \\n<1> 6700 -> 0067 -> 6007\\n<2> 6754 -> 4567 -> 4567\\n**Case 3**: (num **<** 0) -> find largest number posiible number by sorting in lexographically decresing order.\\nThats all, hope u understand :)\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0) return num;\\n        string s = to_string(num);\\n        if(num>0) {\\n            //smallest absolute value\\n            sort(s.begin(), s.end());\\n            for(int i=0; i<s.size(); ++i) {\\n                if(s[i]!=\\'0\\') {\\n                    swap(s[i], s[0]);\\n                    break;\\n                }\\n            }\\n        }\\n        else {\\n            //largest absolute value\\n            sort(s.begin(), s.end(), [](char a, char b){return a>b;});\\n        }\\n\\n        long long ans = stoll(s);\\n        if(num<0) ans *= -1;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0) return num;\\n        string s = to_string(num);\\n        if(num>0) {\\n            //smallest absolute value\\n            sort(s.begin(), s.end());\\n            for(int i=0; i<s.size(); ++i) {\\n                if(s[i]!=\\'0\\') {\\n                    swap(s[i], s[0]);\\n                    break;\\n                }\\n            }\\n        }\\n        else {\\n            //largest absolute value\\n            sort(s.begin(), s.end(), [](char a, char b){return a>b;});\\n        }\\n\\n        long long ans = stoll(s);\\n        if(num<0) ans *= -1;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010269,
                "title": "python3-sort",
                "content": "# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        numStr = str(num)\\n        \\n        if num < 0:\\n            sortedNum = sorted(numStr[1:], reverse=True)\\n            return -int(\"\".join(sortedNum))\\n        else:\\n            sortedNum = sorted(numStr)\\n            for i in range(len(sortedNum)):\\n                if sortedNum[i] != \\'0\\':\\n                    tmp = sortedNum[i]\\n                    sortedNum[i] = sortedNum[0]\\n                    sortedNum[0] = tmp\\n                    break\\n            return int(\"\".join(sortedNum))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        numStr = str(num)\\n        \\n        if num < 0:\\n            sortedNum = sorted(numStr[1:], reverse=True)\\n            return -int(\"\".join(sortedNum))\\n        else:\\n            sortedNum = sorted(numStr)\\n            for i in range(len(sortedNum)):\\n                if sortedNum[i] != \\'0\\':\\n                    tmp = sortedNum[i]\\n                    sortedNum[i] = sortedNum[0]\\n                    sortedNum[0] = tmp\\n                    break\\n            return int(\"\".join(sortedNum))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3998541,
                "title": "beginner-friendly-solution-using-array-and-sorting",
                "content": "Simple approach using list and sort.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nBeats 93%\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, n: int) -> int:\\n        if n==0:\\n            return 0\\n        s=str(n)\\n        l=list(s)\\n        m,x=[],[]\\n        if l[0]!=\\'-\\':\\n            so=sorted(l)\\n            if so[0]!=\\'0\\':\\n                ans2=\"\".join(so)\\n                return int(ans2)\\n            else:\\n                for i in range(len(so)):\\n                    if so[i]!=\\'0\\':\\n                        x=i\\n                        y=int(x)\\n                        break\\n                so[0],so[y]=so[y],so[0]\\n                ans=\"\".join(so)\\n                return int(ans)\\n        else:\\n            l.pop(0)\\n            so1=sorted(l)\\n            r=so1[::-1]\\n            res=\"\".join(r)\\n            ans1=\\'-\\'+res\\n            return int(ans1)\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Sort"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, n: int) -> int:\\n        if n==0:\\n            return 0\\n        s=str(n)\\n        l=list(s)\\n        m,x=[],[]\\n        if l[0]!=\\'-\\':\\n            so=sorted(l)\\n            if so[0]!=\\'0\\':\\n                ans2=\"\".join(so)\\n                return int(ans2)\\n            else:\\n                for i in range(len(so)):\\n                    if so[i]!=\\'0\\':\\n                        x=i\\n                        y=int(x)\\n                        break\\n                so[0],so[y]=so[y],so[0]\\n                ans=\"\".join(so)\\n                return int(ans)\\n        else:\\n            l.pop(0)\\n            so1=sorted(l)\\n            r=so1[::-1]\\n            res=\"\".join(r)\\n            ans1=\\'-\\'+res\\n            return int(ans1)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3970721,
                "title": "easiest-way-for-this-problem",
                "content": "```\\nvar smallestNumber = function (num) {\\n  num = num.toString().split(\"\");\\n\\n  if (num[0] !== \"-\") {\\n    num = num.map((s) => Number(s));\\n    let countZero = 0;\\n    for (let i = 0; i < num.length; i++) {\\n      if (num[i] === 0) countZero++;\\n    }\\n    let newArr = [num.filter((i) => i > 0).sort((a, b) => a - b)[0]];\\n    let firstN = num.filter((i) => i === newArr[0]);\\n    if (num.includes(0)) {\\n      newArr.push(\"0\".repeat(countZero));\\n    }\\n    if (firstN.length > 1) {\\n      newArr.push(`${firstN[0]}`.repeat(firstN.length - 1));\\n    }\\n    num = num.filter((i) => i !== newArr[0]);\\n    num = num.filter((i) => i !== 0);\\n    newArr.push(num.sort((a, b) => a - b));\\n    return parseInt(\\n      newArr\\n        .toString()\\n        .split(\"\")\\n        .filter((i) => i !== \",\")\\n        .join(\"\")\\n    );\\n  }\\n  if (num[0] === \"-\") {\\n    num = num.map((s) => Number(s));\\n    num = num.filter((i) => !Number.isNaN(i));\\n    let res = [\"-\"];\\n    res.push(num.sort((a, b) => b - a));\\n    return parseInt(\\n      res\\n        .toString()\\n        .split(\"\")\\n        .filter((i) => i !== \",\")\\n        .join(\"\")\\n    );\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar smallestNumber = function (num) {\\n  num = num.toString().split(\"\");\\n\\n  if (num[0] !== \"-\") {\\n    num = num.map((s) => Number(s));\\n    let countZero = 0;\\n    for (let i = 0; i < num.length; i++) {\\n      if (num[i] === 0) countZero++;\\n    }\\n    let newArr = [num.filter((i) => i > 0).sort((a, b) => a - b)[0]];\\n    let firstN = num.filter((i) => i === newArr[0]);\\n    if (num.includes(0)) {\\n      newArr.push(\"0\".repeat(countZero));\\n    }\\n    if (firstN.length > 1) {\\n      newArr.push(`${firstN[0]}`.repeat(firstN.length - 1));\\n    }\\n    num = num.filter((i) => i !== newArr[0]);\\n    num = num.filter((i) => i !== 0);\\n    newArr.push(num.sort((a, b) => a - b));\\n    return parseInt(\\n      newArr\\n        .toString()\\n        .split(\"\")\\n        .filter((i) => i !== \",\")\\n        .join(\"\")\\n    );\\n  }\\n  if (num[0] === \"-\") {\\n    num = num.map((s) => Number(s));\\n    num = num.filter((i) => !Number.isNaN(i));\\n    let res = [\"-\"];\\n    res.push(num.sort((a, b) => b - a));\\n    return parseInt(\\n      res\\n        .toString()\\n        .split(\"\")\\n        .filter((i) => i !== \",\")\\n        .join(\"\")\\n    );\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968480,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar smallestNumber = function(num) {\\n    let arr=[];\\n    if(num>0){\\n         arr = String(num).split(\"\").map((a)=>+a);\\n         arr.sort((a,b)=>a-b);\\n         if(arr[0]==0){\\n          let i=0;\\n          while(arr[i]==0){\\n               i++;\\n          }\\n          arr[0]=arr[i];\\n          arr[i]=0;\\n         }\\n         return +arr.join(\"\");\\n    }else if(num==0){\\n         return 0;\\n    } else {\\n         arr = String(num).substring(1).split(\"\").map((a)=>+a);\\n         arr.sort((a,b)=>b-a);\\n         return +(\"-\"+arr.join(\"\"));\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar smallestNumber = function(num) {\\n    let arr=[];\\n    if(num>0){\\n         arr = String(num).split(\"\").map((a)=>+a);\\n         arr.sort((a,b)=>a-b);\\n         if(arr[0]==0){\\n          let i=0;\\n          while(arr[i]==0){\\n               i++;\\n          }\\n          arr[0]=arr[i];\\n          arr[i]=0;\\n         }\\n         return +arr.join(\"\");\\n    }else if(num==0){\\n         return 0;\\n    } else {\\n         arr = String(num).substring(1).split(\"\").map((a)=>+a);\\n         arr.sort((a,b)=>b-a);\\n         return +(\"-\"+arr.join(\"\"));\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3962444,
                "title": "intutive-approach-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nsimilar approach used in prog to from largest number from array\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nconvert the number in String and then tocharArray\\nSort the array, if(str.charAt(0)==\\'-\\') the mark a flag value true;\\nand reverse the sorted array else\\nconcatenate the sorted array\\nand convert it to long\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g.  -->O(NlogN)\\nwhere N=count of digits\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        \\n          if(num>=0 && num<=9)\\n          {\\n        return num;\\n          }\\n       String str=Long.toString(num);\\n       boolean flag=false;\\n       if(str.charAt(0)==\\'-\\')\\n       {\\n           flag=true;\\n        str=str.substring(1);\\n       }\\n       char ch[]=str.toCharArray();\\n       Arrays.sort(ch);\\n       int i=0;\\n       int j=0;\\n       if(!flag){\\n       while(i<ch.length && ch[i]==\\'0\\')\\n       {\\n           i++;\\n       }\\n       char temp=ch[0];\\n       ch[0]=ch[i];\\n       ch[i]=temp;\\n       }\\n       StringBuilder sb=new StringBuilder(\"\");\\n       for(char c:ch)\\n       {\\n           sb.append(c);\\n       }\\n       if(flag)\\n       {\\n           sb.reverse();\\n           String s=\"-\";\\n           s+=sb.toString();\\n           return Long.parseLong(s);\\n       }\\n\\n       return Long.parseLong(sb.toString());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        \\n          if(num>=0 && num<=9)\\n          {\\n        return num;\\n          }\\n       String str=Long.toString(num);\\n       boolean flag=false;\\n       if(str.charAt(0)==\\'-\\')\\n       {\\n           flag=true;\\n        str=str.substring(1);\\n       }\\n       char ch[]=str.toCharArray();\\n       Arrays.sort(ch);\\n       int i=0;\\n       int j=0;\\n       if(!flag){\\n       while(i<ch.length && ch[i]==\\'0\\')\\n       {\\n           i++;\\n       }\\n       char temp=ch[0];\\n       ch[0]=ch[i];\\n       ch[i]=temp;\\n       }\\n       StringBuilder sb=new StringBuilder(\"\");\\n       for(char c:ch)\\n       {\\n           sb.append(c);\\n       }\\n       if(flag)\\n       {\\n           sb.reverse();\\n           String s=\"-\";\\n           s+=sb.toString();\\n           return Long.parseLong(s);\\n       }\\n\\n       return Long.parseLong(sb.toString());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3957718,
                "title": "string-builder-solution-using-java-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n      if(num == 0) return 0;\\n      StringBuilder sb = new StringBuilder();\\n       StringBuilder sb1 = new StringBuilder();\\n        String str = num+\"\";\\n        char[] arr = str.toCharArray();\\n        Arrays.sort(arr);\\n        String s =\"\";\\n        int cnt  =0;\\n        for(char ch : arr) {\\n          if(ch == \\'0\\') cnt++;\\n          sb1.append(ch);\\n        }\\n       String s1=\"\";\\n       sb.append(arr[cnt]);\\n        int j = cnt;\\n        while(j > 0) {\\n          s1+=\"0\";\\n          j--;\\n        }\\n        sb.append(s1);\\n        for(int i = cnt+1;i<arr.length;i++) sb.append(arr[i]);\\n        if(num > 0){\\n        long a = Long.parseLong(sb.toString());\\n        return a;\\n        }\\n        sb1.deleteCharAt(0);\\n        String rev = \"-\"+sb1.reverse().toString();\\n        long b = Long.parseLong(rev);\\n        return b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n      if(num == 0) return 0;\\n      StringBuilder sb = new StringBuilder();\\n       StringBuilder sb1 = new StringBuilder();\\n        String str = num+\"\";\\n        char[] arr = str.toCharArray();\\n        Arrays.sort(arr);\\n        String s =\"\";\\n        int cnt  =0;\\n        for(char ch : arr) {\\n          if(ch == \\'0\\') cnt++;\\n          sb1.append(ch);\\n        }\\n       String s1=\"\";\\n       sb.append(arr[cnt]);\\n        int j = cnt;\\n        while(j > 0) {\\n          s1+=\"0\";\\n          j--;\\n        }\\n        sb.append(s1);\\n        for(int i = cnt+1;i<arr.length;i++) sb.append(arr[i]);\\n        if(num > 0){\\n        long a = Long.parseLong(sb.toString());\\n        return a;\\n        }\\n        sb1.deleteCharAt(0);\\n        String rev = \"-\"+sb1.reverse().toString();\\n        long b = Long.parseLong(rev);\\n        return b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954971,
                "title": "smallest-value-of-the-rearranged-number",
                "content": "# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num == 0:\\n            return 0\\n        if num>=0:\\n            d = {}\\n            for i in str(num):\\n                if i not in d:\\n                    d[i] = 1\\n                else:\\n                    d[i]+=1\\n            a = sorted(d.keys())\\n            count = 0\\n            s = \"\"\\n            if a[0]==\"0\":\\n                s+= a[1] + (a[0] * d[a[0]])\\n                d[a[1]]-=1\\n                del d[a[0]]\\n                a.pop(0)\\n            for i in a:\\n                s+= d[i]* i\\n            return int(s)\\n        else:\\n            d = {}\\n            for i in str(num)[1:]:\\n                if i not in d:\\n                    d[i] = 1\\n                else:\\n                    d[i]+=1\\n            a = list(d.keys())\\n            a.sort(reverse = True)\\n            s = \"\"\\n            for i in a:\\n                s+= d[i]* i\\n            return int(s) *-1\\n\\n\\n\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num == 0:\\n            return 0\\n        if num>=0:\\n            d = {}\\n            for i in str(num):\\n                if i not in d:\\n                    d[i] = 1\\n                else:\\n                    d[i]+=1\\n            a = sorted(d.keys())\\n            count = 0\\n            s = \"\"\\n            if a[0]==\"0\":\\n                s+= a[1] + (a[0] * d[a[0]])\\n                d[a[1]]-=1\\n                del d[a[0]]\\n                a.pop(0)\\n            for i in a:\\n                s+= d[i]* i\\n            return int(s)\\n        else:\\n            d = {}\\n            for i in str(num)[1:]:\\n                if i not in d:\\n                    d[i] = 1\\n                else:\\n                    d[i]+=1\\n            a = list(d.keys())\\n            a.sort(reverse = True)\\n            s = \"\"\\n            for i in a:\\n                s+= d[i]* i\\n            return int(s) *-1\\n\\n\\n\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3930169,
                "title": "shortest-easiest-clear-most-clean-solution-straight-forward-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long n) {\\n        if(n==0)return 0;\\n    string s=to_string(n);\\n    if(s[0]==\\'-\\'){\\n        sort(s.rbegin(),s.rend());\\n        long long k=stoll(s);\\n        return k*-1;\\n    }\\n    sort(s.begin(),s.end());\\n    string r=\"\";\\n    x:\\n    for(int i=0;i<s.length();i++)if(s[i]==\\'0\\'){r+=s[i];s.erase(s.begin()+i);break;}\\n    for(int i=0;i<s.length();i++)if(s[i]==\\'0\\')goto x;\\n    string ans=\"\";\\n    ans+=s[0];\\n    s.erase(s.begin()+0);\\n    ans+=r;\\n    ans+=s;\\n    return stoll(ans);\\n\\t}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long n) {\\n        if(n==0)return 0;\\n    string s=to_string(n);\\n    if(s[0]==\\'-\\'){\\n        sort(s.rbegin(),s.rend());\\n        long long k=stoll(s);\\n        return k*-1;\\n    }\\n    sort(s.begin(),s.end());\\n    string r=\"\";\\n    x:\\n    for(int i=0;i<s.length();i++)if(s[i]==\\'0\\'){r+=s[i];s.erase(s.begin()+i);break;}\\n    for(int i=0;i<s.length();i++)if(s[i]==\\'0\\')goto x;\\n    string ans=\"\";\\n    ans+=s[0];\\n    s.erase(s.begin()+0);\\n    ans+=r;\\n    ans+=s;\\n    return stoll(ans);\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923998,
                "title": "python-solution-time-and-space-complexity-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSort the digits that make up num and re-generate the smallest num\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Using modulus and division operation split num into digits\\n- Sort ascending for positive num and descending if negative num\\n- For a negative num, as we have used descending sort, all 0s will be trailing after the sort.\\n- For a positive num containing a 0, replace 0 in 0th idx of the sorted digits arr with smallest non-zero digit.\\n- To avoid edge case where num is 0, we handle it bu returning 0 without any further computation.\\n- Regnerate smallest num using sorted digits arr and maintain is_negative\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num == 0:\\n            return 0\\n\\n        is_negative = num < 0\\n        if is_negative:\\n            num *= -1\\n        \\n        digits = []  # split num into digits\\n        while num:\\n            digits.append(num%10)\\n            num //= 10\\n        \\n        if is_negative:\\n            digits.sort(reverse=True)\\n            # 0 digits will appear in the end of the array in a reverse sort\\n        else:\\n            digits.sort()\\n\\n            # Swap smallest non-zero digit to the front of the digits\\n            idx = 0\\n            while digits[idx] == 0:\\n                idx+= 1\\n            digits[0], digits[idx] = digits[idx], digits[0]\\n        \\n        result = digits[0]  # reconstruct smallest num\\n        for d in digits[1:]:\\n            result = result * 10 + d\\n        \\n        return result*-1 if is_negative else result\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num == 0:\\n            return 0\\n\\n        is_negative = num < 0\\n        if is_negative:\\n            num *= -1\\n        \\n        digits = []  # split num into digits\\n        while num:\\n            digits.append(num%10)\\n            num //= 10\\n        \\n        if is_negative:\\n            digits.sort(reverse=True)\\n            # 0 digits will appear in the end of the array in a reverse sort\\n        else:\\n            digits.sort()\\n\\n            # Swap smallest non-zero digit to the front of the digits\\n            idx = 0\\n            while digits[idx] == 0:\\n                idx+= 1\\n            digits[0], digits[idx] = digits[idx], digits[0]\\n        \\n        result = digits[0]  # reconstruct smallest num\\n        for d in digits[1:]:\\n            result = result * 10 + d\\n        \\n        return result*-1 if is_negative else result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3907887,
                "title": "c-solution-using-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        int x=0;\\n\\n        if(num<0){\\n            x=1;\\n            num*=(-1);\\n        }\\n\\n        string s=to_string(num);\\n\\n        sort(s.begin(),s.end());\\n\\n        if(x==1){\\n            reverse(s.begin(),s.end());\\n        }\\n\\n        // cout<<s<<endl;\\n\\n        else{\\n\\n        if(s[0]==\\'0\\'){\\n            for(int i=0;i<s.length();i++){\\n                if(s[i]>\\'0\\'){\\n                    swap(s[0],s[i]);\\n                    break;\\n                }\\n            }\\n        }\\n        }\\n\\n\\n\\n        long long ans=stol(s);\\n\\n        if(x==1){\\n            ans*=(-1);\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        int x=0;\\n\\n        if(num<0){\\n            x=1;\\n            num*=(-1);\\n        }\\n\\n        string s=to_string(num);\\n\\n        sort(s.begin(),s.end());\\n\\n        if(x==1){\\n            reverse(s.begin(),s.end());\\n        }\\n\\n        // cout<<s<<endl;\\n\\n        else{\\n\\n        if(s[0]==\\'0\\'){\\n            for(int i=0;i<s.length();i++){\\n                if(s[i]>\\'0\\'){\\n                    swap(s[0],s[i]);\\n                    break;\\n                }\\n            }\\n        }\\n        }\\n\\n\\n\\n        long long ans=stol(s);\\n\\n        if(x==1){\\n            ans*=(-1);\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3892411,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n\\n        //Converting num into List\\n       ArrayList<Long> List = new ArrayList<Long>();\\n        for(long i = Math.abs(num);i>0;i/=10){\\n            long rem = i%10;\\n            List.add(rem);\\n        }\\n\\n        //Sorting List\\n        Collections.sort(List);\\n\\n        //For positive number \\n        if(num>0){\\n\\n            //Converting List into Array\\n            long[] arr = new long[List.size()];\\n            for(int i = 0;i<arr.length;i++){\\n                arr[i] = List.get(i);\\n            }\\n\\n            //Finding number of zeros in arr\\n            int zero = -1;\\n            for(int i = 0;i<arr.length;i++){\\n                if(arr[i] != 0){\\n                    zero = i;\\n                    break;\\n                }\\n            }\\n\\n            //Swaping elemets \\n            long temp = arr[0];\\n            arr[0] = arr[zero];\\n            arr[zero] = temp;\\n\\n            int power = arr.length-1;\\n            long number = 0;\\n            for(int i = 0;i<arr.length;i++){\\n                number += arr[i]*Math.pow(10,power);\\n                power--;\\n            }\\n\\n            return (number);\\n        }\\n\\n        //For negative number \\n        else{\\n            //Converting List into Array\\n            long[] arr = new long[List.size()];\\n            for(int i = 0;i<arr.length;i++){\\n                arr[arr.length-i-1] = List.get(i);\\n            }\\n\\n            //Converting Array into number\\n            int power = arr.length-1;\\n            long number = 0;\\n            for(int i = 0;i<arr.length;i++){\\n                number += arr[i]*Math.pow(10,power);\\n                power--;\\n            }\\n\\n            return (-1*number);\\n        }\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n\\n        //Converting num into List\\n       ArrayList<Long> List = new ArrayList<Long>();\\n        for(long i = Math.abs(num);i>0;i/=10){\\n            long rem = i%10;\\n            List.add(rem);\\n        }\\n\\n        //Sorting List\\n        Collections.sort(List);\\n\\n        //For positive number \\n        if(num>0){\\n\\n            //Converting List into Array\\n            long[] arr = new long[List.size()];\\n            for(int i = 0;i<arr.length;i++){\\n                arr[i] = List.get(i);\\n            }\\n\\n            //Finding number of zeros in arr\\n            int zero = -1;\\n            for(int i = 0;i<arr.length;i++){\\n                if(arr[i] != 0){\\n                    zero = i;\\n                    break;\\n                }\\n            }\\n\\n            //Swaping elemets \\n            long temp = arr[0];\\n            arr[0] = arr[zero];\\n            arr[zero] = temp;\\n\\n            int power = arr.length-1;\\n            long number = 0;\\n            for(int i = 0;i<arr.length;i++){\\n                number += arr[i]*Math.pow(10,power);\\n                power--;\\n            }\\n\\n            return (number);\\n        }\\n\\n        //For negative number \\n        else{\\n            //Converting List into Array\\n            long[] arr = new long[List.size()];\\n            for(int i = 0;i<arr.length;i++){\\n                arr[arr.length-i-1] = List.get(i);\\n            }\\n\\n            //Converting Array into number\\n            int power = arr.length-1;\\n            long number = 0;\\n            for(int i = 0;i<arr.length;i++){\\n                number += arr[i]*Math.pow(10,power);\\n                power--;\\n            }\\n\\n            return (-1*number);\\n        }\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3862630,
                "title": "c-sort-and-swap-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> v1;\\n        int sign = num >= 0 ? 1 : -1;\\n        num = abs(num);\\n        while(num > 0)\\n        {\\n            v1.push_back(num%10);\\n            num /= 10;\\n        }\\n        int n = v1.size();\\n        long long int ans = 0;\\n        if(sign == 1)\\n        {\\n            sort(v1.begin(),v1.end());\\n            for(int i = 0 ; i < n ; i++)\\n            {\\n                if(v1[i] != 0)\\n                {\\n                    swap(v1[0],v1[i]);\\n                    break;\\n                }\\n            }\\n            for(auto x : v1)\\n            {\\n                ans *= 10;\\n                ans += x;\\n            }\\n        }\\n        else\\n        {\\n            sort(v1.begin(),v1.end(),greater<int>());\\n            for(int i = 0 ; i < n ; i++)\\n            {\\n                if(v1[i] != 0)\\n                {\\n                    swap(v1[0],v1[i]);\\n                    break;\\n                }\\n            }\\n            for(auto x : v1)\\n            {\\n                ans *= 10;\\n                ans += x;\\n            }\\n            ans *= -1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> v1;\\n        int sign = num >= 0 ? 1 : -1;\\n        num = abs(num);\\n        while(num > 0)\\n        {\\n            v1.push_back(num%10);\\n            num /= 10;\\n        }\\n        int n = v1.size();\\n        long long int ans = 0;\\n        if(sign == 1)\\n        {\\n            sort(v1.begin(),v1.end());\\n            for(int i = 0 ; i < n ; i++)\\n            {\\n                if(v1[i] != 0)\\n                {\\n                    swap(v1[0],v1[i]);\\n                    break;\\n                }\\n            }\\n            for(auto x : v1)\\n            {\\n                ans *= 10;\\n                ans += x;\\n            }\\n        }\\n        else\\n        {\\n            sort(v1.begin(),v1.end(),greater<int>());\\n            for(int i = 0 ; i < n ; i++)\\n            {\\n                if(v1[i] != 0)\\n                {\\n                    swap(v1[0],v1[i]);\\n                    break;\\n                }\\n            }\\n            for(auto x : v1)\\n            {\\n                ans *= 10;\\n                ans += x;\\n            }\\n            ans *= -1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3853836,
                "title": "beats-97-python-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num>0:\\n            s=list(str(num))\\n            s.sort()\\n            print(s)\\n            for i in s:\\n                if i!=\\'0\\':\\n                    s.remove(i)\\n                    s.insert(0,str(i))\\n                    return int(\\'\\'.join(s))\\n                    break\\n            \\n        else:\\n            s=list(str(abs(num)))\\n            s.sort(reverse=True)\\n        return -1*int(\\'\\'.join(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num>0:\\n            s=list(str(num))\\n            s.sort()\\n            print(s)\\n            for i in s:\\n                if i!=\\'0\\':\\n                    s.remove(i)\\n                    s.insert(0,str(i))\\n                    return int(\\'\\'.join(s))\\n                    break\\n            \\n        else:\\n            s=list(str(abs(num)))\\n            s.sort(reverse=True)\\n        return -1*int(\\'\\'.join(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838487,
                "title": "java-stringbulder-3ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n     public long smallestNumber(long num) {\\n        if (num == 0) return num;\\n        boolean isNegative = num < 0;\\n        int minDigit = 10;\\n        StringBuilder result = new StringBuilder();\\n        Map<Integer, StringBuilder> digits = new HashMap<>();\\n        while (num != 0) {\\n            int modulo = Math.abs((int) (num % 10));\\n            if (modulo < minDigit && modulo != 0) {\\n                minDigit = modulo;\\n            }\\n            digits.merge(modulo, new StringBuilder(String.valueOf(modulo)), StringBuilder::append);\\n            num /= 10;\\n        }\\n\\n        if (isNegative) {\\n            result.append(\"-\");\\n            for (int i = 9; i >= 0; i--) {\\n                if (digits.containsKey(i)) {\\n                    StringBuilder remove = digits.remove(i);\\n                    result.append(remove);\\n                }\\n            }\\n            return Long.parseLong(result.toString());\\n        } else {\\n            StringBuilder numberOfMins = digits.remove(minDigit);\\n            digits.put(minDigit, numberOfMins.deleteCharAt(numberOfMins.length() - 1));\\n            result.append(minDigit);\\n            for (int i = 0; i < 10; i++) {\\n                if (digits.containsKey(i)) {\\n                    StringBuilder remove = digits.remove(i);\\n                    result.append(remove);\\n                }\\n            }\\n\\n            return Long.parseLong(result.toString());\\n        }\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n     public long smallestNumber(long num) {\\n        if (num == 0) return num;\\n        boolean isNegative = num < 0;\\n        int minDigit = 10;\\n        StringBuilder result = new StringBuilder();\\n        Map<Integer, StringBuilder> digits = new HashMap<>();\\n        while (num != 0) {\\n            int modulo = Math.abs((int) (num % 10));\\n            if (modulo < minDigit && modulo != 0) {\\n                minDigit = modulo;\\n            }\\n            digits.merge(modulo, new StringBuilder(String.valueOf(modulo)), StringBuilder::append);\\n            num /= 10;\\n        }\\n\\n        if (isNegative) {\\n            result.append(\"-\");\\n            for (int i = 9; i >= 0; i--) {\\n                if (digits.containsKey(i)) {\\n                    StringBuilder remove = digits.remove(i);\\n                    result.append(remove);\\n                }\\n            }\\n            return Long.parseLong(result.toString());\\n        } else {\\n            StringBuilder numberOfMins = digits.remove(minDigit);\\n            digits.put(minDigit, numberOfMins.deleteCharAt(numberOfMins.length() - 1));\\n            result.append(minDigit);\\n            for (int i = 0; i < 10; i++) {\\n                if (digits.containsKey(i)) {\\n                    StringBuilder remove = digits.remove(i);\\n                    result.append(remove);\\n                }\\n            }\\n\\n            return Long.parseLong(result.toString());\\n        }\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3838289,
                "title": "java-hasmpa-2ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if (num == 0) return num;\\n        boolean isNegative = num < 0;\\n        int minDigit = 10;\\n        long result = 0;\\n        Map<Integer, Integer> digits = new HashMap<>();\\n        while (num != 0) {\\n            int modulo = Math.abs((int) (num % 10));\\n            if (modulo < minDigit && modulo != 0) {\\n                minDigit = modulo;\\n            }\\n            digits.merge(modulo, 1, Integer::sum);\\n            num /= 10;\\n        }\\n\\n        if (isNegative) {\\n            for (int i = 9; i >= 0; i--) {\\n                if (digits.containsKey(i)) {\\n                    int remove = digits.remove(i);\\n                    for (int j = 0; j < remove; j++) {\\n                        result *= 10;\\n                        result += i;\\n                    }\\n                }\\n            }\\n            return -result;\\n        } else {\\n            int numberOfMins = digits.remove(minDigit);\\n            digits.put(minDigit, numberOfMins - 1);\\n            result += minDigit;\\n            for (int i = 0; i < 10; i++) {\\n                if (digits.containsKey(i)) {\\n                    int remove = digits.remove(i);\\n                    for (int j = 0; j < remove; j++) {\\n                        result *= 10;\\n                        result += i;\\n                    }\\n                }\\n            }\\n\\n            return result;\\n        }\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if (num == 0) return num;\\n        boolean isNegative = num < 0;\\n        int minDigit = 10;\\n        long result = 0;\\n        Map<Integer, Integer> digits = new HashMap<>();\\n        while (num != 0) {\\n            int modulo = Math.abs((int) (num % 10));\\n            if (modulo < minDigit && modulo != 0) {\\n                minDigit = modulo;\\n            }\\n            digits.merge(modulo, 1, Integer::sum);\\n            num /= 10;\\n        }\\n\\n        if (isNegative) {\\n            for (int i = 9; i >= 0; i--) {\\n                if (digits.containsKey(i)) {\\n                    int remove = digits.remove(i);\\n                    for (int j = 0; j < remove; j++) {\\n                        result *= 10;\\n                        result += i;\\n                    }\\n                }\\n            }\\n            return -result;\\n        } else {\\n            int numberOfMins = digits.remove(minDigit);\\n            digits.put(minDigit, numberOfMins - 1);\\n            result += minDigit;\\n            for (int i = 0; i < 10; i++) {\\n                if (digits.containsKey(i)) {\\n                    int remove = digits.remove(i);\\n                    for (int j = 0; j < remove; j++) {\\n                        result *= 10;\\n                        result += i;\\n                    }\\n                }\\n            }\\n\\n            return result;\\n        }\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3825148,
                "title": "c-easy-solution-0ms-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool neg=false;\\n        if(num<0)\\n            neg=true;\\n        string s=to_string(num);\\n        if(neg)\\n            s.erase(0,1);\\n        sort(s.begin(),s.end());\\n        if(neg){\\n            reverse(s.begin(),s.end());\\n        }\\n        else{\\n            if(s[0]==\\'0\\'){\\n                for(int i=1;i<s.size();i++){\\n                    if(s[i]!=\\'0\\'){\\n                        swap(s[0],s[i]);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        long long value = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            value = value * 10 + (s[i] - \\'0\\');\\n        }\\n        if(neg){\\n            value*=-1;\\n        }\\n        return value;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool neg=false;\\n        if(num<0)\\n            neg=true;\\n        string s=to_string(num);\\n        if(neg)\\n            s.erase(0,1);\\n        sort(s.begin(),s.end());\\n        if(neg){\\n            reverse(s.begin(),s.end());\\n        }\\n        else{\\n            if(s[0]==\\'0\\'){\\n                for(int i=1;i<s.size();i++){\\n                    if(s[i]!=\\'0\\'){\\n                        swap(s[0],s[i]);\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        long long value = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            value = value * 10 + (s[i] - \\'0\\');\\n        }\\n        if(neg){\\n            value*=-1;\\n        }\\n        return value;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3818516,
                "title": "brute-force-easy-beginner-level",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0)\\n        {\\n            return 0;\\n        }\\n        long long x=abs(num);\\n         long long ans = 0;\\n\\n      \\n         vector <int> digit;\\n\\n        while (x > 0) {\\n            digit.push_back(x % 10);\\n            x /= 10;\\n        }\\n\\n        sort(digit.begin(), digit.end());\\n\\n        if (num > 0) {\\n            int z=1;\\n            while ( digit[0] == 0) {\\n                 swap(digit[0], digit[z]);\\n                z++;\\n            }\\n\\n            for (int i = 0; i < digit.size(); i++) {\\n                ans = ans * 10 + digit[i];\\n            }\\n\\n            return ans;\\n        }\\n\\n        reverse(digit.begin(),digit.end());\\n        for (int i = 0; i < digit.size(); i++) {\\n                ans = ans * 10 + digit[i];\\n            }\\n\\nreturn -ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0)\\n        {\\n            return 0;\\n        }\\n        long long x=abs(num);\\n         long long ans = 0;\\n\\n      \\n         vector <int> digit;\\n\\n        while (x > 0) {\\n            digit.push_back(x % 10);\\n            x /= 10;\\n        }\\n\\n        sort(digit.begin(), digit.end());\\n\\n        if (num > 0) {\\n            int z=1;\\n            while ( digit[0] == 0) {\\n                 swap(digit[0], digit[z]);\\n                z++;\\n            }\\n\\n            for (int i = 0; i < digit.size(); i++) {\\n                ans = ans * 10 + digit[i];\\n            }\\n\\n            return ans;\\n        }\\n\\n        reverse(digit.begin(),digit.end());\\n        for (int i = 0; i < digit.size(); i++) {\\n                ans = ans * 10 + digit[i];\\n            }\\n\\nreturn -ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3814874,
                "title": "c-solution-0ms-beats-100-in-time-and-75-in-space-without-using-strings",
                "content": "# Approach\\nCount the number of  times a digit is appearing and store it in a vector.Loop through the vector and make your answer like ```ans=ans*10+i ``` and make some cases like if it was leading zero\\'s and it is a negative number \\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> vt(10,0);\\n        bool isNegative=false;\\n        long long ans=0;\\n        if(num<0) isNegative=true;\\n        num=abs(num);\\n        while(num){\\n            vt[num%10]++; //store the number of occurence of a digit\\n            num/=10;\\n        }\\n        if(isNegative){\\n            for(int i=9;i>=0;i--){\\n                while(vt[i]--) ans=ans*10+i; //start adding in descending other in case of negative number\\n            }\\n        }else{\\n            bool isZero=vt[0]>0;\\n            for(int i=0;i<10;i++){//start adding in ascending other in case of positive number\\n                if(isZero && vt[0]!=0){ // case if it has leading zeros\\n                    int j=1;\\n                    while(vt[j]==0) j++; //find the first digit which occur other than zero\\n                    if(vt[j]--) ans=ans*10+(j); // add it only one time in ans\\n                    while(vt[0]--) ans=ans*10; //now add all the zeros\\n                    isZero=false;\\n                    continue;\\n                }\\n                while(vt[i]--) ans=ans*10+(i);// here add all other numbers \\n            }\\n        }\\n        return isNegative?-ans:ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```ans=ans*10+i ```\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> vt(10,0);\\n        bool isNegative=false;\\n        long long ans=0;\\n        if(num<0) isNegative=true;\\n        num=abs(num);\\n        while(num){\\n            vt[num%10]++; //store the number of occurence of a digit\\n            num/=10;\\n        }\\n        if(isNegative){\\n            for(int i=9;i>=0;i--){\\n                while(vt[i]--) ans=ans*10+i; //start adding in descending other in case of negative number\\n            }\\n        }else{\\n            bool isZero=vt[0]>0;\\n            for(int i=0;i<10;i++){//start adding in ascending other in case of positive number\\n                if(isZero && vt[0]!=0){ // case if it has leading zeros\\n                    int j=1;\\n                    while(vt[j]==0) j++; //find the first digit which occur other than zero\\n                    if(vt[j]--) ans=ans*10+(j); // add it only one time in ans\\n                    while(vt[0]--) ans=ans*10; //now add all the zeros\\n                    isZero=false;\\n                    continue;\\n                }\\n                while(vt[i]--) ans=ans*10+(i);// here add all other numbers \\n            }\\n        }\\n        return isNegative?-ans:ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3813816,
                "title": "python3-beats-95",
                "content": "\\n\\n# Code\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num >= 0:\\n            num = str(num)\\n            if \\'0\\' not in num:\\n                return int(\"\".join(sorted(list(num))))\\n            p = sorted(list(num))\\n            for i in range(len(p)):\\n                if p[i] != \\'0\\':\\n                    break\\n            p[0] , p[i] = p[i],p[0]\\n            return int(\"\".join(p))\\n        else:\\n            num = str(num)\\n            if \\'0\\' not in num:\\n                return -int(\"\".join(sorted(list(num[1:]),reverse=True)))\\n\\n            p =sorted(list(num),reverse=True)\\n            for i in range(len(p)):\\n                if p[i] != \\'0\\':\\n                    break\\n            p[0] , p[i] = p[i],p[0]\\n            return -int(\"\".join(p[:-1]))\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num >= 0:\\n            num = str(num)\\n            if \\'0\\' not in num:\\n                return int(\"\".join(sorted(list(num))))\\n            p = sorted(list(num))\\n            for i in range(len(p)):\\n                if p[i] != \\'0\\':\\n                    break\\n            p[0] , p[i] = p[i],p[0]\\n            return int(\"\".join(p))\\n        else:\\n            num = str(num)\\n            if \\'0\\' not in num:\\n                return -int(\"\".join(sorted(list(num[1:]),reverse=True)))\\n\\n            p =sorted(list(num),reverse=True)\\n            for i in range(len(p)):\\n                if p[i] != \\'0\\':\\n                    break\\n            p[0] , p[i] = p[i],p[0]\\n            return -int(\"\".join(p[:-1]))\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3812641,
                "title": "2ms-85-beats-java-arraylist-sol",
                "content": "# Intuition\\nEasy to understand ... Just for beginners(as Me\\uD83D\\uDE01)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n- add each digit to ArrayList\\n- sorted the ArrayList using Collections.sort()\\n- taken each digit from arraylist using arr.remove(index)\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        boolean flag = true;\\n\\n        ArrayList<Integer> arr = new ArrayList<Integer>();\\n        int rev = 0;\\n        long deci = 0;\\n        for(long i=num;i!=0;i=i/10){\\n            arr.add((int)(i%10));\\n        }\\n        Collections.sort(arr);\\n        while(!arr.isEmpty()){\\n            if(arr.get(rev)==0 && flag){\\n                rev++;\\n            }else{\\n                deci = deci*10+arr.remove(rev);\\n                rev=0;\\n                flag = false;\\n            }\\n        }\\n        return deci;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        boolean flag = true;\\n\\n        ArrayList<Integer> arr = new ArrayList<Integer>();\\n        int rev = 0;\\n        long deci = 0;\\n        for(long i=num;i!=0;i=i/10){\\n            arr.add((int)(i%10));\\n        }\\n        Collections.sort(arr);\\n        while(!arr.isEmpty()){\\n            if(arr.get(rev)==0 && flag){\\n                rev++;\\n            }else{\\n                deci = deci*10+arr.remove(rev);\\n                rev=0;\\n                flag = false;\\n            }\\n        }\\n        return deci;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3801196,
                "title": "beats-100-1-beginner-s-friendly-2-for-cp-lovers",
                "content": "# For Beginner\\'s (Accepted)\\n- Time complexity: $$O(d*log(d))$$ where d - No. of digits in num \\n\\n- Space complexity: $$O(d)$$ where d - No. of digits in num \\n\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n     string s = to_string(abs(num));\\n     if(num < 0)\\n     { //sort in decreasing order\\n      sort(s.begin(),s.end(),greater<char>());\\n    }\\n    else\\n    { //sort in ascending order\\n     sort(s.begin(),s.end()); \\n        for(int i=0; i<s.length(); i++) //if s starts with 0\\n        {\\n            if(s[i] != \\'0\\') //swap first chracter with first non - \\'0\\' chracter\\n            {\\n                swap(s[0],s[i]); //to avoid leading 0s, as mentioned in problem statement\\n                break;\\n            }\\n        }\\n    }\\n    return num > 0 ? stoll(s) : -1 * stoll(s); \\n    //convert string into long long using stoll() function\\n    }\\n};\\n```\\n\\n# For CP Lovers (Accepted)\\n- Time complexity: $$O(d)$$ \\n\\n- Space complexity: $$O(d)$$ \\n`If you want to over-complicate things, this AC solution is for you.`\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        unordered_map<int,int> m;\\n        long long temp = num;\\n        long long ans = 0;\\n\\n        temp = abs(temp);\\n        while(temp)\\n        {\\n            m[temp%10]++;\\n            temp /= 10;\\n        }\\n        int zero = m[0];\\n        if(num < 0)\\n        {\\n         for(int i=9; i>=0; i--)\\n         {\\n           while(m[i])\\n           {\\n               ans = ans*10 + i;\\n               m[i]--;\\n           }\\n        }\\n         return -1 * ans;\\n        }\\n        int i = 1;\\n        for(int i=1; i<=9; i++)\\n        {\\n           if(m[i])\\n           {\\n               ans = ans*10 + i;\\n               m[i]--;\\n            break;\\n           }\\n        }\\n        ans *= pow(10,zero);\\n\\n        for(; i<=9; i++)\\n        {\\n             while(m[i])\\n             {\\n               ans = ans*10 + i;\\n               m[i]--;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n     string s = to_string(abs(num));\\n     if(num < 0)\\n     { //sort in decreasing order\\n      sort(s.begin(),s.end(),greater<char>());\\n    }\\n    else\\n    { //sort in ascending order\\n     sort(s.begin(),s.end()); \\n        for(int i=0; i<s.length(); i++) //if s starts with 0\\n        {\\n            if(s[i] != \\'0\\') //swap first chracter with first non - \\'0\\' chracter\\n            {\\n                swap(s[0],s[i]); //to avoid leading 0s, as mentioned in problem statement\\n                break;\\n            }\\n        }\\n    }\\n    return num > 0 ? stoll(s) : -1 * stoll(s); \\n    //convert string into long long using stoll() function\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        unordered_map<int,int> m;\\n        long long temp = num;\\n        long long ans = 0;\\n\\n        temp = abs(temp);\\n        while(temp)\\n        {\\n            m[temp%10]++;\\n            temp /= 10;\\n        }\\n        int zero = m[0];\\n        if(num < 0)\\n        {\\n         for(int i=9; i>=0; i--)\\n         {\\n           while(m[i])\\n           {\\n               ans = ans*10 + i;\\n               m[i]--;\\n           }\\n        }\\n         return -1 * ans;\\n        }\\n        int i = 1;\\n        for(int i=1; i<=9; i++)\\n        {\\n           if(m[i])\\n           {\\n               ans = ans*10 + i;\\n               m[i]--;\\n            break;\\n           }\\n        }\\n        ans *= pow(10,zero);\\n\\n        for(; i<=9; i++)\\n        {\\n             while(m[i])\\n             {\\n               ans = ans*10 + i;\\n               m[i]--;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3791046,
                "title": "smallest-number-forming-the-smallest-number-by-removing-zeros-and-sorting",
                "content": "### \"May your troubles be as few as your teeth, and may your blessings be as plentiful as pints at the pub.\"\\n\\n# Intuition\\nThe problem is to form the smallest number by removing zeros from the given integer and sorting the remaining digits. To find the smallest number, we need to remove leading zeros, sort the digits in ascending order, and place the digits back in their original positions.\\n\\n# Approach\\n1. The `smallestNumber` function takes a long long integer `num` as input.\\n2. If `num` is equal to 0, it means the number is already the smallest, so return 0 as the result.\\n3. Initialize a variable `flag` to 0. If `num` is negative, set `flag` to 1 to indicate that the number is negative.\\n4. Convert `num` to a string `s` using `to_string(num)` to perform string manipulations.\\n5. Find the length of the string `s` and store it in the variable `n`.\\n6. Remove all occurrences of \\'0\\' from the string `s` using the `erase` and `remove` functions. This will eliminate leading and trailing zeros from the number.\\n7. Create a string `use` consisting of (n - s.size()) zeros to add back the trailing zeros later.\\n8. Sort the digits in the string `s` in ascending order using the `sort` function. This will rearrange the digits to form the smallest number.\\n9. If the number is negative (`flag == 1`), reverse the string `s` to form the largest negative number, then insert the negative sign at the beginning of the string and remove the trailing zero.\\n10. If the number is positive (`flag == 0`), insert the `use` string after the first character (digit) in `s`. This will add back the trailing zeros.\\n11. Convert the modified string `s` back to a long long integer using `stoll(s)` and return it as the result.\\n\\n# Complexity Analysis\\n- Time Complexity: The time complexity is O(n log n), where n is the number of digits in the input `num`. The sorting step dominates the time complexity.\\n- Space Complexity: The space complexity is O(n), where n is the number of digits in the input `num`. The space is used to store the string `s`, which holds the digits after removing zeros. Additionally, the `use` string of size (n - s.size()) is created to add back the trailing zeros.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num == 0)return 0;\\n        int flag = 0;\\n        if(num < 0 ) flag = 1;\\n        string s = to_string(num);\\n        int n = s.size();\\n        s.erase(remove(s.begin(), s.end(), \\'0\\'), s.end());\\n        string use (n - s.size(), \\'0\\');\\n        sort(s.begin(), s.end());\\n        if(flag){\\n            reverse(s.begin(), s.end());\\n            s.insert(0, \"-\");\\n            s.pop_back();\\n        }\\n        if(flag) s.insert(s.size(), use);\\n        else s.insert(1, use);\\n        return stoll(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num == 0)return 0;\\n        int flag = 0;\\n        if(num < 0 ) flag = 1;\\n        string s = to_string(num);\\n        int n = s.size();\\n        s.erase(remove(s.begin(), s.end(), \\'0\\'), s.end());\\n        string use (n - s.size(), \\'0\\');\\n        sort(s.begin(), s.end());\\n        if(flag){\\n            reverse(s.begin(), s.end());\\n            s.insert(0, \"-\");\\n            s.pop_back();\\n        }\\n        if(flag) s.insert(s.size(), use);\\n        else s.insert(1, use);\\n        return stoll(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3788440,
                "title": "c-easy-and-fast-solution",
                "content": "# Code\\n```\\npublic class Solution {\\n    public long SmallestNumber(long num) {\\n            if (num == 0) return num;\\n            char[] ca = (\"\" + Math.Abs(num)).ToArray();\\n\\n            Array.Sort(ca);\\n         \\n            if (num < 0) \\n            {\\n                Array.Reverse(ca);\\n                string re= new string(ca);   \\n                return -1*long.Parse(re);\\n            }\\n\\n            int i = 0;\\n            while (ca[i] == \\'0\\') i++;//find first non zero index\\n\\n            ca[0] = (char)(ca[0] ^ ca[i] ^ (ca[i] = ca[0]));\\n\\n            return long.Parse(new String(ca));\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public long SmallestNumber(long num) {\\n            if (num == 0) return num;\\n            char[] ca = (\"\" + Math.Abs(num)).ToArray();\\n\\n            Array.Sort(ca);\\n         \\n            if (num < 0) \\n            {\\n                Array.Reverse(ca);\\n                string re= new string(ca);   \\n                return -1*long.Parse(re);\\n            }\\n\\n            int i = 0;\\n            while (ca[i] == \\'0\\') i++;//find first non zero index\\n\\n            ca[0] = (char)(ca[0] ^ ca[i] ^ (ca[i] = ca[0]));\\n\\n            return long.Parse(new String(ca));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762337,
                "title": "java-priority-queue-heaps-optimized-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSince this question gives us a number and requires us to `SORT` the values such that we get the smallest number, the first thought that comes to my mind is use an efficient data structure that orders elements and hence we use the concept of Heaps. (Implemented using Priority Queues). \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTwo cases to take care of - \\n    * A number is positive - Then we sort it in ascending order but also keep note of the smallest value which isn\\'t zero since that will be the first digit of our answer.\\n    * A number is negative - Then we sort it descending order and then return the answer in negative. \\n\\nGiven digits, in order to make it into a number we use the following equation - \\nnum = num + digit * 10^(count of digits-1)\\n\\nExample - Given 3,2,1,4 as our digits\\nCount of Digits = 4 - 1 = 3\\nnum = 0\\n\\n1st Iteration - \\nnum = 0 + 3 * 10^3 = 3000, count--\\n2nd Iteration - \\nnum = 3000 + 2 * 10^2 = 3200, count--\\n3rd Iteration - \\nnum = 3200 + 1 * 10^1 = 3210, count--\\n4th Iteration - \\nnum = 3210 + 4 * 10^0 = 3214\\n\\nThis is the logic we\\'ll be using to construct the number after adding the digits to the Priority Queue.\\n\\nWe use a Min-Heap in case the number is positive and \\na Max-Heap in case the number is negative\\n\\n# Complexity\\n- Time complexity: O(N * LogN)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long getMinDigit(long num){\\n        long min = Long.MAX_VALUE;\\n         while(num > 0){\\n            long digit = num % 10;\\n            if(digit != 0){\\n                min = Math.min(digit, min);\\n            }\\n            num = num / 10;\\n        }\\n        return min;\\n    }\\n    public long smallestNumber(long num) {\\n        if(num == 0){\\n            return 0;\\n        }\\n        if(num > 0){\\n            //Handle +ve case\\n            PriorityQueue<Long> minHeap = new PriorityQueue<>();\\n            long smallestDigit = getMinDigit(num);\\n            //Flag variable used to ensure that smallest \\n//value is not added to the heap\\n            boolean flag = false;\\n            while(num > 0){\\n                long digit = num % 10;\\n                if(!flag && smallestDigit == digit){\\n                    flag = true;\\n                }else{\\n                    minHeap.add(digit);\\n                }\\n                num = num / 10;\\n            }\\n            //Not doing - 1, since heap doesn\\'t consist of \\n//the smallest number\\n            int tenPower = minHeap.size();\\n            num = num + Math.round(Math.pow(10, tenPower) * smallestDigit);\\n            tenPower--;\\n            while(minHeap.size() > 0){\\n                long val = minHeap.poll();\\n                if(val == 0){\\n                    tenPower--;\\n                    continue;\\n                } else {\\n                    num += (long) Math.round(Math.pow(10, tenPower) * val);\\n                    tenPower--;\\n                }\\n            }\\n            return num;\\n        }else{\\n            //Handle -ve case\\n            PriorityQueue<Long> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\\n            num = num * -1;\\n            while(num > 0){\\n                long digit = num % 10;\\n                maxHeap.add(digit);\\n                num = num / 10;\\n            }\\n            int tenPower = maxHeap.size() - 1;\\n            while(maxHeap.size() > 0){\\n                long val = maxHeap.poll();\\n                num += (long) Math.round(Math.pow(10, tenPower) * val);\\n                tenPower--;\\n            }\\n            return num * -1;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Sorting",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public long getMinDigit(long num){\\n        long min = Long.MAX_VALUE;\\n         while(num > 0){\\n            long digit = num % 10;\\n            if(digit != 0){\\n                min = Math.min(digit, min);\\n            }\\n            num = num / 10;\\n        }\\n        return min;\\n    }\\n    public long smallestNumber(long num) {\\n        if(num == 0){\\n            return 0;\\n        }\\n        if(num > 0){\\n            //Handle +ve case\\n            PriorityQueue<Long> minHeap = new PriorityQueue<>();\\n            long smallestDigit = getMinDigit(num);\\n            //Flag variable used to ensure that smallest \\n//value is not added to the heap\\n            boolean flag = false;\\n            while(num > 0){\\n                long digit = num % 10;\\n                if(!flag && smallestDigit == digit){\\n                    flag = true;\\n                }else{\\n                    minHeap.add(digit);\\n                }\\n                num = num / 10;\\n            }\\n            //Not doing - 1, since heap doesn\\'t consist of \\n//the smallest number\\n            int tenPower = minHeap.size();\\n            num = num + Math.round(Math.pow(10, tenPower) * smallestDigit);\\n            tenPower--;\\n            while(minHeap.size() > 0){\\n                long val = minHeap.poll();\\n                if(val == 0){\\n                    tenPower--;\\n                    continue;\\n                } else {\\n                    num += (long) Math.round(Math.pow(10, tenPower) * val);\\n                    tenPower--;\\n                }\\n            }\\n            return num;\\n        }else{\\n            //Handle -ve case\\n            PriorityQueue<Long> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\\n            num = num * -1;\\n            while(num > 0){\\n                long digit = num % 10;\\n                maxHeap.add(digit);\\n                num = num / 10;\\n            }\\n            int tenPower = maxHeap.size() - 1;\\n            while(maxHeap.size() > 0){\\n                long val = maxHeap.poll();\\n                num += (long) Math.round(Math.pow(10, tenPower) * val);\\n                tenPower--;\\n            }\\n            return num * -1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762328,
                "title": "very-simple-code-easy-to-understand-c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the code is to rearrange the digits of the input number in order to find the smallest possible number. The code handles three cases: when the number is 0, when the number is negative, and when the number is positive.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. If the input number is 0, the code directly returns 0 since no rearrangement is necessary. This is an optimization to handle the edge case.\\n2. If the input number is negative, the code converts it to a string and applies a descending sort to the characters. This is done to get the largest possible number using the digits of the original number. Then, the sorted string is converted back to a long long integer, and its negation is returned.\\n3. If the input number is positive, the code converts it to a string and applies an ascending sort to the characters. This is done to get the smallest possible number using the digits of the original number. The code then finds the index of the first non-zero digit and swaps it with the digit at the first position. Finally, the modified string is converted back to a long long integer and returned.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(log(num) * log(log(num))).\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(log(num))\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n      string s;\\n      \\n    if(num == 0){\\n      return num;\\n    }\\n    else if(num < 0) {\\n        s = to_string(num);\\n        num *= -1;\\n        std::sort(s.begin(), s.end(), greater<char>());\\n        long long curr = stoll(s);\\n        return -1 * curr;\\n    }\\n    else {\\n        s = std::to_string(num);\\n        sort(s.begin(), s.end());\\n        int i = 0;\\n        while (s[i] == \\'0\\') {\\n            i++;\\n        }\\n        swap(s[0], s[i]);\\n        long long curr = stoll(s);\\n        return curr;\\n    }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n      string s;\\n      \\n    if(num == 0){\\n      return num;\\n    }\\n    else if(num < 0) {\\n        s = to_string(num);\\n        num *= -1;\\n        std::sort(s.begin(), s.end(), greater<char>());\\n        long long curr = stoll(s);\\n        return -1 * curr;\\n    }\\n    else {\\n        s = std::to_string(num);\\n        sort(s.begin(), s.end());\\n        int i = 0;\\n        while (s[i] == \\'0\\') {\\n            i++;\\n        }\\n        swap(s[0], s[i]);\\n        long long curr = stoll(s);\\n        return curr;\\n    }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3750075,
                "title": "python-simple-and-clean-beats-88",
                "content": "### Please upvote if you find this helpful. \\u270C\\n<img src=\"https://assets.leetcode.com/users/images/b8e25620-d320-420a-ae09-94c7453bd033_1678818986.7001078.jpeg\" alt=\"Cute Robot - Stable diffusion\" width=\"200\"/>\\n\\n# Approach\\n- The goal is to rearrange the digits of the input integer `num` such that its value is minimized and it does not contain any leading zeros.\\n- To achieve this, we first check if `num` is zero and return zero if it is.\\n- We then check if `num` is negative and set a flag `neg` accordingly.\\n- We then take the absolute value of `num` and convert it to a list of digits using a list comprehension.\\n- We then sort the list of digits in ascending order if `num` is non-negative, or in descending order if `num` is negative.\\n- If `num` is non-negative, we find the first non-zero digit and swap it with the first digit to avoid leading zeros.\\n- We then convert the list of digits back to an integer using the `int()` and `str.join()` functions.\\n- We return the result, negating it if `num` was originally negative.\\n\\n\\n# Complexity\\n- Time complexity: $$O(\\\\log num)$$\\n    - The time complexity is dominated by the conversion of `num` to a list of digits and back, which takes $$O(\\\\log num)$$ time, where $$num$$ is the input integer.\\n- Space complexity: $$O(\\\\log num)$$\\n    - The space complexity is dominated by the storage of the list of digits, which takes $$O(\\\\log num)$$ space.\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num == 0:\\n            return 0\\n        neg = num < 0\\n        num = abs(num)\\n        digits = [int(d) for d in str(num)]\\n        digits.sort()\\n        if not neg:\\n            for i, digit in enumerate(digits):\\n                if digit != 0:\\n                    digits[0], digits[i] = digits[i], digits[0]\\n                    break\\n        else:\\n            digits = digits[::-1]\\n        res = int(\\'\\'.join(map(str, digits)))\\n        return -res if neg else res\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num == 0:\\n            return 0\\n        neg = num < 0\\n        num = abs(num)\\n        digits = [int(d) for d in str(num)]\\n        digits.sort()\\n        if not neg:\\n            for i, digit in enumerate(digits):\\n                if digit != 0:\\n                    digits[0], digits[i] = digits[i], digits[0]\\n                    break\\n        else:\\n            digits = digits[::-1]\\n        res = int(\\'\\'.join(map(str, digits)))\\n        return -res if neg else res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3744273,
                "title": "100-beats-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string str = to_string(abs(num));\\n        if(num<0){\\n            sort(str.begin(),str.end(),greater<char>());\\n        }\\n        else{\\n            sort(str.begin(),str.end());\\n        }\\n        if(num>0){\\n            int pos = 0;\\n            for(int i=0;i<str.length();i++){\\n                if(str[i]!=\\'0\\'){\\n                    pos = i;\\n                    break;\\n                }\\n            }\\n            swap(str[0],str[pos]);\\n        }\\n        long long ans = stoll(str);\\n        if(num<0) return ans*=-1;\\n        else return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string str = to_string(abs(num));\\n        if(num<0){\\n            sort(str.begin(),str.end(),greater<char>());\\n        }\\n        else{\\n            sort(str.begin(),str.end());\\n        }\\n        if(num>0){\\n            int pos = 0;\\n            for(int i=0;i<str.length();i++){\\n                if(str[i]!=\\'0\\'){\\n                    pos = i;\\n                    break;\\n                }\\n            }\\n            swap(str[0],str[pos]);\\n        }\\n        long long ans = stoll(str);\\n        if(num<0) return ans*=-1;\\n        else return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3716265,
                "title": "0ms-c-sort-and-swap",
                "content": "class Solution {\\npublic:\\n    \\n    long long to_number(string s){\\n        \\n        long long ans=0;\\n        for(int i=0;i<s.length();i++){\\n            ans=ans*10+s[i]-\\'0\\';\\n        }\\n        \\n      return ans;  \\n    }\\n    \\n    long long smallestNumber(long long num) {\\n        \\n        if(num==0)return 0;\\n        if(num<0){\\n            string s=to_string(abs(num));\\n            sort(s.rbegin(),s.rend());\\n            return -to_number(s);\\n        }\\n     \\n        string s=to_string(num);\\n        sort(s.begin(),s.end());\\n    \\n        if(s[0]==\\'0\\'){\\n            int i=0;\\n            while(s[i]==\\'0\\')i++;\\n            swap(s[i],s[0]);\\n\\n        }\\n\\t\\t\\n      return to_number(s);  \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "class Solution {\\npublic:\\n    \\n    long long to_number(string s){\\n        \\n        long long ans=0;\\n        for(int i=0;i<s.length();i++){\\n            ans=ans*10+s[i]-\\'0\\';\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3652954,
                "title": "stringbuilder-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num==0)return 0;\\n        boolean neg=num<0;\\n        num=(num<0)?-1*num:num;\\n        char[] arr = String.valueOf(num).toCharArray();\\n        Arrays.sort(arr);\\n        StringBuilder sb = new StringBuilder(\"\");\\n        if(neg) {\\n            sb.append(\\'-\\');\\n            for(int i=arr.length-1;i>=0;i--)sb.append(arr[i]);\\n        } else {\\n            sb.append(new String(arr));\\n            if(sb.charAt(0)==\\'0\\'){\\n                int i=0;\\n                for(;i<arr.length && arr[i]==\\'0\\';)i++;\\n                sb.deleteCharAt(i);\\n                sb.reverse().append(arr[i]).reverse();\\n            }\\n        }\\n        return Long.parseLong(sb.toString());\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num==0)return 0;\\n        boolean neg=num<0;\\n        num=(num<0)?-1*num:num;\\n        char[] arr = String.valueOf(num).toCharArray();\\n        Arrays.sort(arr);\\n        StringBuilder sb = new StringBuilder(\"\");\\n        if(neg) {\\n            sb.append(\\'-\\');\\n            for(int i=arr.length-1;i>=0;i--)sb.append(arr[i]);\\n        } else {\\n            sb.append(new String(arr));\\n            if(sb.charAt(0)==\\'0\\'){\\n                int i=0;\\n                for(;i<arr.length && arr[i]==\\'0\\';)i++;\\n                sb.deleteCharAt(i);\\n                sb.reverse().append(arr[i]).reverse();\\n            }\\n        }\\n        return Long.parseLong(sb.toString());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3634714,
                "title": "c-beats-100",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0)return 0;\\n        if(num>0){\\n            string s=to_string(num);\\n            string ans;\\n            int n=s.size();\\n            sort(s.begin(),s.end());\\n            int i=0,cnt=0;\\n            while(s[i]==\\'0\\'){\\n                cnt++;\\n                i++;\\n            }\\n           // cout<<cnt;\\n            ans+=s[i];\\n            while(cnt--)ans+=\\'0\\';\\n            i++;\\n            while(i<n){\\n                ans+=s[i];\\n                i++;\\n            }\\n            long long int x=stoll(ans);\\n            return x;\\n        }\\n        else{\\n            num*=-1;\\n            string s=to_string(num);\\n            string ans;\\n            int n=s.size();\\n            sort(s.begin(),s.end(),greater<char>());\\n            int i=n-1,cnt=0;\\n            while(s[i]==\\'0\\'){\\n                cnt++;\\n                i--;\\n            }\\n            int j=0;\\n            while(j<i){\\n                ans+=s[j];\\n                j++;\\n            }\\n            while(cnt--)ans+=\\'0\\';\\n            ans+=s[i];\\n            long long int x=stoll(s);\\n            x*=-1;\\n            return x;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0)return 0;\\n        if(num>0){\\n            string s=to_string(num);\\n            string ans;\\n            int n=s.size();\\n            sort(s.begin(),s.end());\\n            int i=0,cnt=0;\\n            while(s[i]==\\'0\\'){\\n                cnt++;\\n                i++;\\n            }\\n           // cout<<cnt;\\n            ans+=s[i];\\n            while(cnt--)ans+=\\'0\\';\\n            i++;\\n            while(i<n){\\n                ans+=s[i];\\n                i++;\\n            }\\n            long long int x=stoll(ans);\\n            return x;\\n        }\\n        else{\\n            num*=-1;\\n            string s=to_string(num);\\n            string ans;\\n            int n=s.size();\\n            sort(s.begin(),s.end(),greater<char>());\\n            int i=n-1,cnt=0;\\n            while(s[i]==\\'0\\'){\\n                cnt++;\\n                i--;\\n            }\\n            int j=0;\\n            while(j<i){\\n                ans+=s[j];\\n                j++;\\n            }\\n            while(cnt--)ans+=\\'0\\';\\n            ans+=s[i];\\n            long long int x=stoll(s);\\n            x*=-1;\\n            return x;\\n        }\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3621241,
                "title": "my-java-solution",
                "content": "class Solution {\\n    public long smallestNumber(long num) {\\n    \\t\\n    \\tList<Long> list=new ArrayList<>();  \\t\\n    \\tlong m = 0, ret=0;\\n    \\t\\n    \\tif(num>0) {\\n    \\t\\t\\n    \\t\\twhile(num!=0) {\\n        \\t\\tm = num;\\n        \\t\\tnum = num/10;\\n        \\t\\tlist.add(m-num*10);\\n        \\t}\\n    \\t\\t\\n    \\t\\tCollections.sort(list);\\n    \\t\\t\\n    \\t\\tif(list.get(0)==0) {\\n    \\t\\t\\tfor(int i=0;i<list.size();i++) {\\n    \\t\\t\\t\\tif(list.get(i)!=0) {\\n    \\t\\t\\t\\t\\tlist.set(0, list.get(i));\\n    \\t\\t\\t\\t\\tlist.set(i, (long) 0);\\n    \\t\\t\\t\\t\\tbreak;\\n    \\t\\t\\t\\t}\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tfor(Long i:list) {\\n    \\t\\t\\tret=ret*10 + i;\\n    \\t\\t}\\n    \\t\\t\\n    \\t}else {\\n    \\t\\t\\n    \\t\\tnum*=(-1);\\n    \\t\\t\\n    \\t\\twhile(num!=0) {\\n        \\t\\tm = num;\\n        \\t\\tnum = num/10;\\n        \\t\\tlist.add(m-num*10);\\n        \\t}\\n    \\t\\t\\n    \\t\\tCollections.sort(list);\\n    \\t\\t\\n    \\t\\tfor(int i=list.size()-1;i>=0;i--) {\\n    \\t\\t\\tret=ret*10 + list.get(i);\\n    \\t\\t}\\n    \\t\\t\\n    \\t\\tret*=(-1);\\n    \\t}\\n\\t\\t\\n    \\treturn ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public long smallestNumber(long num) {\\n    \\t\\n    \\tList<Long> list=new ArrayList<>();  \\t\\n    \\tlong m = 0, ret=0;\\n    \\t\\n    \\tif(num>0) {\\n    \\t\\t\\n    \\t\\twhile(num!=0) {\\n        \\t\\tm = num;\\n        \\t\\tnum = num/10;\\n        \\t\\tlist.add(m-num*10);\\n        \\t}",
                "codeTag": "Java"
            },
            {
                "id": 3609305,
                "title": "java-solution-sorting-and-swapping",
                "content": "# class Solution {\\n    public void reverse(char arr[])\\n    {\\n        int st=0;\\n        int end=arr.length-1;\\n        while(st<end)\\n        {\\n        char ch=arr[st];\\n        arr[st]=arr[end];\\n        arr[end]=ch;\\n        st++;\\n        end--;\\n        }\\n    }\\n    public long smallestNumber(long num) {\\n        String s=String.valueOf(num);\\n        if(s.length()==1)\\n        {\\n           return num; \\n        }\\n        long ans=0;\\n        if(s.charAt(0)!=\\'-\\')\\n        {\\n        char arr[]=s.toCharArray();\\n        Arrays.sort(arr);\\n        int k=0;\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(arr[i]==\\'0\\')\\n            {\\n                k++;\\n            }else{\\n                break;\\n            }\\n        }\\n            if(k==0)\\n            {\\n                return Long.parseLong(String.valueOf(arr));\\n            }else{\\n                ans=(int)(Integer.valueOf(arr[k])-48);\\n                for(int i=0;i<k;i++)\\n                {\\n                    ans=ans*10;\\n                }\\n                for(int i=k+1;i<arr.length;i++)\\n                {\\n                    ans=(ans*10)+(int)Integer.valueOf(arr[i])-48;\\n                }\\n            }\\n        }else{\\n            char arr[]=new char[s.length()-1];\\n            for(int i=1;i<s.length();i++)\\n            {\\n                arr[i-1]=s.charAt(i);\\n                //System.out.println(arr[i-1]);\\n            }\\n            Arrays.sort(arr);\\n            reverse(arr);\\n            ans=0;\\n            for(int i=0;i<arr.length;i++)\\n            {\\n                //System.out.println(arr[i]);\\n                ans=(ans*10)+(int)Integer.valueOf(arr[i])-48;\\n            }\\n            ans=-ans;\\n        }\\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Sorting"
                ],
                "code": "class Solution {\\n    public void reverse(char arr[])\\n    {\\n        int st=0;\\n        int end=arr.length-1;\\n        while(st<end)\\n        {\\n        char ch=arr[st];\\n        arr[st]=arr[end];\\n        arr[end]=ch;\\n        st++;\\n        end--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3599776,
                "title": "with-array",
                "content": "# Intuition\\nput all the digits in the array and take out the max or min digits as needed and add it to an empty string and return it as integer.\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        flag = 0\\n        if num<=0:\\n            num*=-1\\n            flag=1\\n        c = len(str(num))\\n        l = []\\n        for i in range(c):\\n            l.append(num%10)\\n            num = num//10\\n        s=\\'\\'\\n        if flag!=1:\\n            t = min(i for i in l if i>0)\\n        else:\\n            t = max(l)\\n        s+= str(t)\\n        l.remove(t)\\n        for i in range(len(l)):\\n            t = min(l) if flag!=1 else max(l)\\n            l.remove(t)\\n            s+=str(t)\\n        return int(s) if flag!=1 else int(s)*-1\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        flag = 0\\n        if num<=0:\\n            num*=-1\\n            flag=1\\n        c = len(str(num))\\n        l = []\\n        for i in range(c):\\n            l.append(num%10)\\n            num = num//10\\n        s=\\'\\'\\n        if flag!=1:\\n            t = min(i for i in l if i>0)\\n        else:\\n            t = max(l)\\n        s+= str(t)\\n        l.remove(t)\\n        for i in range(len(l)):\\n            t = min(l) if flag!=1 else max(l)\\n            l.remove(t)\\n            s+=str(t)\\n        return int(s) if flag!=1 else int(s)*-1\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3577776,
                "title": "cpp-sorting-digits-easy-understandable-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0) return 0;\\n        else if(num<0){\\n            string s = to_string(-num);\\n            sort(s.begin(),s.end(),greater<>());\\n            return -stoll(s);\\n        }\\n        \\n        long long ans=0;\\n        vector<int> digits;\\n        int ct0=0;\\n        while(num){\\n            if(num%10==0) ct0++;\\n            else digits.push_back(num%10);\\n            num/=10;\\n        }\\n        \\n        sort(digits.begin(),digits.end());\\n        \\n        ans+=digits[0];\\n        while(ct0--) ans*=10;\\n        for(int i=1;i<digits.size();i++)\\n            ans=ans*10+digits[i];\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num==0) return 0;\\n        else if(num<0){\\n            string s = to_string(-num);\\n            sort(s.begin(),s.end(),greater<>());\\n            return -stoll(s);\\n        }\\n        \\n        long long ans=0;\\n        vector<int> digits;\\n        int ct0=0;\\n        while(num){\\n            if(num%10==0) ct0++;\\n            else digits.push_back(num%10);\\n            num/=10;\\n        }\\n        \\n        sort(digits.begin(),digits.end());\\n        \\n        ans+=digits[0];\\n        while(ct0--) ans*=10;\\n        for(int i=1;i<digits.size();i++)\\n            ans=ans*10+digits[i];\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3546142,
                "title": "brute-force-o-n-logn",
                "content": "# \\uD83D\\uDE09Don\\'t just watch & move away, also give an Upvote.\\uD83D\\uDE09\\n\\n# Complexity\\n- Time complexity: $$O(n.log(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Pls use pen & paper for better understanding\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num == 0)\\n            return num;\\n\\n        vector<int> nums;\\n        bool flag = (num<0);\\n\\n        while(num != 0)\\n        {\\n            int rem = num%10;\\n            num /= 10;\\n            nums.push_back(rem);\\n        }\\n\\n        sort(begin(nums), end(nums));\\n\\n        // if num is negative\\n        if(flag == true){\\n            for(auto i:nums){\\n                if(i == 0)\\n                    num *= 10;\\n                else\\n                    num = 10*num+i;\\n            }\\n        }\\n\\n        // if num is positive\\n        else{\\n            int j=0;\\n            //This for loop find the index of first non-zero digit.\\n            for(;j<size(nums); j++)\\n            {\\n                if(nums[j] != 0)\\n                    break;\\n            }\\n            swap(nums[j], nums[0]);\\n\\n            for(int i=0; i<size(nums); i++){\\n                    num = 10*num+nums[i];\\n            }\\n        }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n        return num;\\n    }\\n};\\n```\\n![Leetcode Upvote.gif](https://assets.leetcode.com/users/images/72334a46-ef54-4a08-b38d-dc2f4a12e971_1684611808.604239.gif)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "JavaScript",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        if(num == 0)\\n            return num;\\n\\n        vector<int> nums;\\n        bool flag = (num<0);\\n\\n        while(num != 0)\\n        {\\n            int rem = num%10;\\n            num /= 10;\\n            nums.push_back(rem);\\n        }\\n\\n        sort(begin(nums), end(nums));\\n\\n        // if num is negative\\n        if(flag == true){\\n            for(auto i:nums){\\n                if(i == 0)\\n                    num *= 10;\\n                else\\n                    num = 10*num+i;\\n            }\\n        }\\n\\n        // if num is positive\\n        else{\\n            int j=0;\\n            //This for loop find the index of first non-zero digit.\\n            for(;j<size(nums); j++)\\n            {\\n                if(nums[j] != 0)\\n                    break;\\n            }\\n            swap(nums[j], nums[0]);\\n\\n            for(int i=0; i<size(nums); i++){\\n                    num = 10*num+nums[i];\\n            }\\n        }\\n\\n<!-- \\u2705Well before returning answer don\\'t forget to UPVOTE.\\u2705 -->\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3545409,
                "title": "easy-to-understand-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long v=abs(num);\\n        if(num==0)return 0;\\n        string s=to_string(v);\\n        sort(s.begin(),s.end());\\n        long long ans=0;\\n        if(num<0){\\n            reverse(s.begin(),s.end());\\n            ans=stoll(s);\\n            return -ans;\\n        }\\n        if(s[0]==\\'0\\'){\\n            long long i=0;\\n            while(s[i]==\\'0\\' && i<s.size()){\\n                i++;\\n            }\\n            swap(s[i],s[0]);\\n        }\\n        ans=stoll(s);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long v=abs(num);\\n        if(num==0)return 0;\\n        string s=to_string(v);\\n        sort(s.begin(),s.end());\\n        long long ans=0;\\n        if(num<0){\\n            reverse(s.begin(),s.end());\\n            ans=stoll(s);\\n            return -ans;\\n        }\\n        if(s[0]==\\'0\\'){\\n            long long i=0;\\n            while(s[i]==\\'0\\' && i<s.size()){\\n                i++;\\n            }\\n            swap(s[i],s[0]);\\n        }\\n        ans=stoll(s);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3535852,
                "title": "easyyyyyyyyy-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        //get all the digits and arrange them accordingly\\n        //look for the test cases\\n        if(num == 0) return 0;\\n        vector<long long> digits;\\n        int sign = 1;\\n        if(num < 0) sign = -1;\\n        num = abs(num);\\n        while(num != 0){\\n            int rem = num%10;\\n            digits.push_back(rem);\\n            num = num/10;\\n        }\\n        sort(digits.begin(),digits.end());\\n        long long ans = 0;\\n        if(sign == -1){\\n            for(int i=digits.size()-1;i>=0;i--){\\n                ans = ans*10+digits[i];\\n            }\\n            ans = -1*ans;\\n        }\\n        else{\\n        // if(digits[0] == 0){\\n        //     ans = ans*10 + digits[1];\\n        //     ans = ans*10 + digits[0];\\n        //     for(int i=2;i<digits.size();i++){\\n        //         ans = ans*10+digits[i];\\n        //     }\\n            //count how many zeros are there, and then add the first integer then add all the zeroes and then add the rest integers\\n            if(digits[0] == 0){\\n                int j;\\n                long long zeroes = 0;\\n                for(int i=0;i<digits.size();i++){\\n                    if(digits[i]!=0) {\\n                       ans = ans*10 + digits[i];  \\n                        j=i;\\n                        break;\\n                    }\\n                    else zeroes++;\\n                }\\n                j++;\\n                while(zeroes--) ans = ans*10 + 0;\\n                for(int i=j;i<digits.size();i++) ans = ans*10+digits[i];\\n        }\\n        else{\\n            for(int i=0;i<digits.size();i++){\\n                ans = ans*10+digits[i];\\n            }\\n        }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        //get all the digits and arrange them accordingly\\n        //look for the test cases\\n        if(num == 0) return 0;\\n        vector<long long> digits;\\n        int sign = 1;\\n        if(num < 0) sign = -1;\\n        num = abs(num);\\n        while(num != 0){\\n            int rem = num%10;\\n            digits.push_back(rem);\\n            num = num/10;\\n        }\\n        sort(digits.begin(),digits.end());\\n        long long ans = 0;\\n        if(sign == -1){\\n            for(int i=digits.size()-1;i>=0;i--){\\n                ans = ans*10+digits[i];\\n            }\\n            ans = -1*ans;\\n        }\\n        else{\\n        // if(digits[0] == 0){\\n        //     ans = ans*10 + digits[1];\\n        //     ans = ans*10 + digits[0];\\n        //     for(int i=2;i<digits.size();i++){\\n        //         ans = ans*10+digits[i];\\n        //     }\\n            //count how many zeros are there, and then add the first integer then add all the zeroes and then add the rest integers\\n            if(digits[0] == 0){\\n                int j;\\n                long long zeroes = 0;\\n                for(int i=0;i<digits.size();i++){\\n                    if(digits[i]!=0) {\\n                       ans = ans*10 + digits[i];  \\n                        j=i;\\n                        break;\\n                    }\\n                    else zeroes++;\\n                }\\n                j++;\\n                while(zeroes--) ans = ans*10 + 0;\\n                for(int i=j;i<digits.size();i++) ans = ans*10+digits[i];\\n        }\\n        else{\\n            for(int i=0;i<digits.size();i++){\\n                ans = ans*10+digits[i];\\n            }\\n        }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3535585,
                "title": "java-100-beat-simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num == 0)\\n            return 0;\\n        long n = num,ans = 0;\\n        int count=0,i=0,flag=0;\\n        while(n!=0){\\n            count++;\\n            n/=10;\\n        }\\n        long arr[]= new long[count];\\n        if(num>0){\\n            n = num;\\n        }\\n        else{\\n            n = -1*num;\\n        }\\n        while(n!=0){\\n            arr[i]=n%10;\\n            i++;\\n            n/=10;\\n        }\\n        Arrays.sort(arr);\\n        i= count-1;\\n        if(num<0){\\n            for(int j = count -1;j>=0;j--){\\n                ans = ans*10 +arr[j];\\n            }\\n            ans = -1*ans;\\n        }\\n        else{\\n            for(int k = 0;k<count;k++){\\n                if(arr[k]==0){\\n                    flag++;\\n                }\\n                else{\\n                    break;\\n                }\\n            }\\n            ans = arr[flag];\\n            \\n            for(int l = 0;l<flag;l++){\\n                ans = ans *10 +arr[l];\\n            }\\n            for(int m = flag+1;m<count;m++){\\n                ans = ans *10 +arr[m];\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num == 0)\\n            return 0;\\n        long n = num,ans = 0;\\n        int count=0,i=0,flag=0;\\n        while(n!=0){\\n            count++;\\n            n/=10;\\n        }\\n        long arr[]= new long[count];\\n        if(num>0){\\n            n = num;\\n        }\\n        else{\\n            n = -1*num;\\n        }\\n        while(n!=0){\\n            arr[i]=n%10;\\n            i++;\\n            n/=10;\\n        }\\n        Arrays.sort(arr);\\n        i= count-1;\\n        if(num<0){\\n            for(int j = count -1;j>=0;j--){\\n                ans = ans*10 +arr[j];\\n            }\\n            ans = -1*ans;\\n        }\\n        else{\\n            for(int k = 0;k<count;k++){\\n                if(arr[k]==0){\\n                    flag++;\\n                }\\n                else{\\n                    break;\\n                }\\n            }\\n            ans = arr[flag];\\n            \\n            for(int l = 0;l<flag;l++){\\n                ans = ans *10 +arr[l];\\n            }\\n            for(int m = flag+1;m<count;m++){\\n                ans = ans *10 +arr[m];\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3512530,
                "title": "python3-sort",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        \\n        if num==0:\\n            return 0\\n        \\n        if num<0:\\n            s=str(num)\\n            return -int(\"\".join(sorted(s[1:],reverse=1)))\\n        \\n        s=str(num)\\n        \\n        zeros=0\\n        l=[]\\n        \\n        for i,ch in enumerate(s):\\n            if ch==\"0\":\\n                zeros+=1\\n            else:\\n                l.append(ch)\\n        \\n        l.sort()\\n        \\n        return int(l[0]+\"0\"*zeros + \"\".join(l[1:]))\\n    \\n        \\n    \\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        \\n        if num==0:\\n            return 0\\n        \\n        if num<0:\\n            s=str(num)\\n            return -int(\"\".join(sorted(s[1:],reverse=1)))\\n        \\n        s=str(num)\\n        \\n        zeros=0\\n        l=[]\\n        \\n        for i,ch in enumerate(s):\\n            if ch==\"0\":\\n                zeros+=1\\n            else:\\n                l.append(ch)\\n        \\n        l.sort()\\n        \\n        return int(l[0]+\"0\"*zeros + \"\".join(l[1:]))\\n    \\n        \\n    \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3479176,
                "title": "beats-100-submission",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        map<int,int>mp;\\n        mp[0]=mp[1]=mp[2]=mp[3]=mp[4]=mp[5]=mp[6]=mp[7]=mp[8]=mp[9]=0;\\n        int sign=num>=0?1:-1;\\n        num=abs(num);\\n        while(num!=0){\\n            int k=num%10;\\n            num=num/10;\\n            mp[k]++;\\n        }   \\n        long long int ans=0;\\n        int zero=0;\\n\\n\\nif(sign==1){\\n        \\n        for(int i=1;i<=9;i++){\\n              \\n           while(mp[i]!=0){\\n               ans=ans*10+i;\\n               mp[i]--;\\n               zero=1;\\n                  if(zero==1){\\n               while(mp[0]!=0){\\n                   ans=ans*10+0;\\n                   mp[0]--;\\n               }\\n               \\n           }\\n           }\\n        \\n\\n        }\\n        \\n        \\n        }\\n        else{\\nfor(int i=9;i>=0;i--){\\n    while(mp[i]!=0){\\n        ans=ans*10+i;\\n          mp[i]--;\\n    }\\n}\\n\\n\\n\\n        }\\n        return sign==1?ans:-ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        map<int,int>mp;\\n        mp[0]=mp[1]=mp[2]=mp[3]=mp[4]=mp[5]=mp[6]=mp[7]=mp[8]=mp[9]=0;\\n        int sign=num>=0?1:-1;\\n        num=abs(num);\\n        while(num!=0){\\n            int k=num%10;\\n            num=num/10;\\n            mp[k]++;\\n        }   \\n        long long int ans=0;\\n        int zero=0;\\n\\n\\nif(sign==1){\\n        \\n        for(int i=1;i<=9;i++){\\n              \\n           while(mp[i]!=0){\\n               ans=ans*10+i;\\n               mp[i]--;\\n               zero=1;\\n                  if(zero==1){\\n               while(mp[0]!=0){\\n                   ans=ans*10+0;\\n                   mp[0]--;\\n               }\\n               \\n           }\\n           }\\n        \\n\\n        }\\n        \\n        \\n        }\\n        else{\\nfor(int i=9;i>=0;i--){\\n    while(mp[i]!=0){\\n        ans=ans*10+i;\\n          mp[i]--;\\n    }\\n}\\n\\n\\n\\n        }\\n        return sign==1?ans:-ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3458088,
                "title": "smallest-value-of-the-rearranged-number",
                "content": "-------------- Easy C++ Solution -------------\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n    string s = to_string(abs(num));\\n    sort(begin(s), end(s),[&](int a, int b) { return num < 0 ? a > b : a < b; });\\n    if (num > 0)\\n      swap(s[0], s[s.find_first_not_of(\\'0\\')]);\\n    cout<<s<<endl;\\n    return stoll(s) * (num < 0 ? -1 : 1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n    string s = to_string(abs(num));\\n    sort(begin(s), end(s),[&](int a, int b) { return num < 0 ? a > b : a < b; });\\n    if (num > 0)\\n      swap(s[0], s[s.find_first_not_of(\\'0\\')]);\\n    cout<<s<<endl;\\n    return stoll(s) * (num < 0 ? -1 : 1);\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3408145,
                "title": "easy-to-understand-python-solution-without-any-complex-functions",
                "content": "# Approach\\nSeperate methods of calculations are followed for positive and negative numbers. \\n\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        l = str(num)\\n        l = list(l)\\n        flag=1\\n        if num<0:\\n            flag=-1\\n            l = [int(i) for i in l[1:]]\\n            l.sort(reverse=True)\\n            res = \"\".join(str(i) for i in l)\\n        elif num>0:\\n            l = [int(i) for i in l]\\n            l.sort()\\n            res=\\'\\'\\n            n=l.count(0)\\n            s = \"\".join(str(i) for i in l)\\n            s_1 = s[n:]\\n            res+= s_1[0]+\\'0\\'*n+s_1[1:]\\n        else:\\n            return 0\\n        return int(res)*flag\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        l = str(num)\\n        l = list(l)\\n        flag=1\\n        if num<0:\\n            flag=-1\\n            l = [int(i) for i in l[1:]]\\n            l.sort(reverse=True)\\n            res = \"\".join(str(i) for i in l)\\n        elif num>0:\\n            l = [int(i) for i in l]\\n            l.sort()\\n            res=\\'\\'\\n            n=l.count(0)\\n            s = \"\".join(str(i) for i in l)\\n            s_1 = s[n:]\\n            res+= s_1[0]+\\'0\\'*n+s_1[1:]\\n        else:\\n            return 0\\n        return int(res)*flag\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3397238,
                "title": "smallest-value-of-rearranged-number-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        if(num == 0)\\n        {\\n            return 0;\\n        }\\n        else if(num<0)\\n        {\\n            string s = to_string(-num);\\n            sort(s.begin(),s.end());\\n            reverse(s.begin(),s.end());\\n\\n            return -stoll(s);\\n        }\\n        \\n        string s = to_string(num);\\n        sort(s.begin(),s.end());\\n        \\n        int i = 0;\\n        while(s[i]==\\'0\\')\\n        {\\n            i++;\\n        }\\n        swap(s[0],s[i]);\\n        return stoll(s);\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "Math",
                    "String",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        if(num == 0)\\n        {\\n            return 0;\\n        }\\n        else if(num<0)\\n        {\\n            string s = to_string(-num);\\n            sort(s.begin(),s.end());\\n            reverse(s.begin(),s.end());\\n\\n            return -stoll(s);\\n        }\\n        \\n        string s = to_string(num);\\n        sort(s.begin(),s.end());\\n        \\n        int i = 0;\\n        while(s[i]==\\'0\\')\\n        {\\n            i++;\\n        }\\n        swap(s[0],s[i]);\\n        return stoll(s);\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3390838,
                "title": "cpp-easy-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    double myAtoi(string s)\\n    {\\n        double nums = 0;\\n        for (int i = 0; i < s.size(); i++)\\n            nums = ((nums * 10) + s[i] - \\'0\\');\\n        return nums;\\n    }\\n    long long smallestNumber(long long num)\\n    {\\n        if (num == 0) return 0;\\n        string s = to_string(num);\\n\\n        if (s[0] == \\'-\\'){\\n            s.erase(s.begin());\\n            sort(s.begin(), s.end(), greater<char>());\\n            return myAtoi(s) * (-1);\\n        }\\n\\n        sort(s.begin(), s.end());\\n        int a = count(s.begin(), s.end(), \\'0\\');\\n        if (a != 0) {\\n            while (s[0] == \\'0\\') s.erase(s.begin());\\n            s.insert(1, a, \\'0\\');  \\n        }\\n       return myAtoi(s);;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    double myAtoi(string s)\\n    {\\n        double nums = 0;\\n        for (int i = 0; i < s.size(); i++)\\n            nums = ((nums * 10) + s[i] - \\'0\\');\\n        return nums;\\n    }\\n    long long smallestNumber(long long num)\\n    {\\n        if (num == 0) return 0;\\n        string s = to_string(num);\\n\\n        if (s[0] == \\'-\\'){\\n            s.erase(s.begin());\\n            sort(s.begin(), s.end(), greater<char>());\\n            return myAtoi(s) * (-1);\\n        }\\n\\n        sort(s.begin(), s.end());\\n        int a = count(s.begin(), s.end(), \\'0\\');\\n        if (a != 0) {\\n            while (s[0] == \\'0\\') s.erase(s.begin());\\n            s.insert(1, a, \\'0\\');  \\n        }\\n       return myAtoi(s);;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3386171,
                "title": "no-stl-easy-to-understad-c-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n*Case 01 :* **(if num > 0)**\\n\\n`Sort the numbers in ascending order` -> `check for \\'0\\' and swap with elements present at non-zero element` -> `return the ans`\\n\\n*Case 02 :* **(if num < 0)**\\n\\n`Sort the digits in descending order` -> `return the answer`\\n\\n# Complexity\\n- Time complexity: Worst case -> $$O(15*log(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Worst case -> $$O(15)$$ -> constant\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> digits; // to store the digits\\n        long long ans = 0; // answer variable\\n        bool sign = false; // for checking the negativity of number\\n        \\n        if (num == 0) // Handling edge case\\n            return 0;\\n        \\n        if (num < 0) // convert to positive, if less than num is there\\n        {\\n            num = abs(num);\\n            sign = true; // mark the negative sign marker as true\\n        }\\n\\n        // below step to store the digits\\n        while (num > 0)\\n        {\\n            int r = num % 10;\\n            digits.push_back(r);\\n            num /= 10;\\n        }\\n        \\n        // if negative marker is set to true\\n        // sort digits in descending and return ans\\n        if (sign)\\n        {\\n            sort(digits.begin(), digits.end(), greater<int>());\\n            for (int i = 0; i < digits.size(); ++i)\\n                ans = ans * 10 + digits[i];\\n            return -1 * ans;\\n        }\\n        \\n        // sort in ascending\\n        sort(digits.begin(), digits.end());\\n        \\n        int ind = 0;\\n        int start = 0;\\n        \\n        // mark the index upto which \\'0\\' digit is stored\\n        while (digits[ind] == 0)\\n            ind++;\\n    \\n        // swap all the \\'0\\' digits with the digits from marked index \\n        while (digits[start] == 0)\\n        {\\n            swap(digits[start++], digits[ind++]);\\n            if (!digits[start]) break;\\n        }\\n        \\n        // store the answer\\n        for (int i = 0; i < digits.size(); ++i)\\n            ans = ans * 10 + digits[i];\\n        \\n        return ans;\\n    }\\n    \\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> digits; // to store the digits\\n        long long ans = 0; // answer variable\\n        bool sign = false; // for checking the negativity of number\\n        \\n        if (num == 0) // Handling edge case\\n            return 0;\\n        \\n        if (num < 0) // convert to positive, if less than num is there\\n        {\\n            num = abs(num);\\n            sign = true; // mark the negative sign marker as true\\n        }\\n\\n        // below step to store the digits\\n        while (num > 0)\\n        {\\n            int r = num % 10;\\n            digits.push_back(r);\\n            num /= 10;\\n        }\\n        \\n        // if negative marker is set to true\\n        // sort digits in descending and return ans\\n        if (sign)\\n        {\\n            sort(digits.begin(), digits.end(), greater<int>());\\n            for (int i = 0; i < digits.size(); ++i)\\n                ans = ans * 10 + digits[i];\\n            return -1 * ans;\\n        }\\n        \\n        // sort in ascending\\n        sort(digits.begin(), digits.end());\\n        \\n        int ind = 0;\\n        int start = 0;\\n        \\n        // mark the index upto which \\'0\\' digit is stored\\n        while (digits[ind] == 0)\\n            ind++;\\n    \\n        // swap all the \\'0\\' digits with the digits from marked index \\n        while (digits[start] == 0)\\n        {\\n            swap(digits[start++], digits[ind++]);\\n            if (!digits[start]) break;\\n        }\\n        \\n        // store the answer\\n        for (int i = 0; i < digits.size(); ++i)\\n            ans = ans * 10 + digits[i];\\n        \\n        return ans;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3377314,
                "title": "java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if (num==0) return 0;\\n        boolean positive = (num>=0) ;\\n        char[] numToChars = String.valueOf(Math.abs(num)).toCharArray();\\n        int[] ans = new int [numToChars.length];\\n        for (int i=0;i<ans.length;i++){\\n            ans[i] = numToChars[i] -\\'0\\';\\n        }\\n        Arrays.sort(ans);\\n        if (!positive) return Long.parseLong(\"-\" + (new StringBuilder(String.join(\"\",Arrays.toString(ans).replaceAll(\"\\\\\\\\[|\\\\\\\\]|,|\\\\\\\\s\", \"\"))).reverse()));\\n        if (ans[0]==0){\\n            int leadingZeros = 0; \\n            while (ans[leadingZeros]==0) leadingZeros++;\\n            ans[0]=ans[leadingZeros];\\n            ans[leadingZeros]=0;\\n        }\\n        return Long.parseLong(String.join(\"\",Arrays.toString(ans).replaceAll(\"\\\\\\\\[|\\\\\\\\]|,|\\\\\\\\s\", \"\")));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if (num==0) return 0;\\n        boolean positive = (num>=0) ;\\n        char[] numToChars = String.valueOf(Math.abs(num)).toCharArray();\\n        int[] ans = new int [numToChars.length];\\n        for (int i=0;i<ans.length;i++){\\n            ans[i] = numToChars[i] -\\'0\\';\\n        }\\n        Arrays.sort(ans);\\n        if (!positive) return Long.parseLong(\"-\" + (new StringBuilder(String.join(\"\",Arrays.toString(ans).replaceAll(\"\\\\\\\\[|\\\\\\\\]|,|\\\\\\\\s\", \"\"))).reverse()));\\n        if (ans[0]==0){\\n            int leadingZeros = 0; \\n            while (ans[leadingZeros]==0) leadingZeros++;\\n            ans[0]=ans[leadingZeros];\\n            ans[leadingZeros]=0;\\n        }\\n        return Long.parseLong(String.join(\"\",Arrays.toString(ans).replaceAll(\"\\\\\\\\[|\\\\\\\\]|,|\\\\\\\\s\", \"\")));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3374436,
                "title": "simple-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long ans=0;\\n        stringstream geek;\\n        if(num==0){\\n            return 0;\\n        }\\n        else if(num>0){\\n            vector<int> fre(10,0);\\n            geek<<num;\\n            string s = geek.str();\\n            for(int i=0;i<s.size();i++)    {\\n                fre[s[i]-\\'0\\']++;\\n            }\\n            string g=\"\";\\n            for(int i=1;i<10;i++){\\n                if(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                    break;\\n                }\\n            }\\n            for(int i=0;i<10;i++){\\n                while(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                }\\n            }\\n            ans=stol(g);\\n        }\\n        else{\\n            num=-num;\\n            vector<int> fre(10,0);\\n            geek<<num;\\n            string s = geek.str();\\n            for(int i=0;i<s.size();i++)    {\\n                fre[s[i]-\\'0\\']++;\\n            }\\n            string g=\"\";\\n            for(int i=9;i>0;i--){\\n                if(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                    break;\\n                }\\n            }\\n            for(int i=9;i>=0;i--){\\n                while(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                }\\n            }\\n            ans=stol(g);\\n            ans=-ans;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long ans=0;\\n        stringstream geek;\\n        if(num==0){\\n            return 0;\\n        }\\n        else if(num>0){\\n            vector<int> fre(10,0);\\n            geek<<num;\\n            string s = geek.str();\\n            for(int i=0;i<s.size();i++)    {\\n                fre[s[i]-\\'0\\']++;\\n            }\\n            string g=\"\";\\n            for(int i=1;i<10;i++){\\n                if(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                    break;\\n                }\\n            }\\n            for(int i=0;i<10;i++){\\n                while(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                }\\n            }\\n            ans=stol(g);\\n        }\\n        else{\\n            num=-num;\\n            vector<int> fre(10,0);\\n            geek<<num;\\n            string s = geek.str();\\n            for(int i=0;i<s.size();i++)    {\\n                fre[s[i]-\\'0\\']++;\\n            }\\n            string g=\"\";\\n            for(int i=9;i>0;i--){\\n                if(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                    break;\\n                }\\n            }\\n            for(int i=9;i>=0;i--){\\n                while(fre[i]!=0){\\n                    g+=to_string(i);\\n                    fre[i]--;\\n                }\\n            }\\n            ans=stol(g);\\n            ans=-ans;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3349324,
                "title": "exselent-solution-for-lazy-people",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        int i = 1;\\n        if(num == 0) return 0;\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        if(num > 0){\\n            if(s[0] == \\'0\\'){\\n                while(s[i] == \\'0\\'){\\n                    i ++;\\n                }\\n                swap(s[0], s[i]);\\n            } \\n            return stoll(s);\\n        }else{\\n            reverse(s.begin() + 1, s.end()); \\n        }\\n        return stoll(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        int i = 1;\\n        if(num == 0) return 0;\\n        string s = to_string(num);\\n        sort(s.begin(), s.end());\\n        if(num > 0){\\n            if(s[0] == \\'0\\'){\\n                while(s[i] == \\'0\\'){\\n                    i ++;\\n                }\\n                swap(s[0], s[i]);\\n            } \\n            return stoll(s);\\n        }else{\\n            reverse(s.begin() + 1, s.end()); \\n        }\\n        return stoll(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3340796,
                "title": "c-swap-and-sort-o-n-very-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int>v;\\n        string s= to_string(num);\\n        long long int n = s.size();\\n        if( s[0]==\\'-\\' )\\n        {\\n            cout<<s<<endl;\\n            sort( s.rbegin(), s.rend()-1 );\\n            cout<<s<<endl;\\n\\n            return stoll(s);\\n        }\\n        sort( s.begin() , s.end() );\\n        for( int i=0 ;i<n ;i++ )\\n        {\\n            if( s[i]!=\\'0\\' )\\n            {\\n                swap( s[0] , s[i]);\\n                break;\\n            }\\n        }\\n        return stoll(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int>v;\\n        string s= to_string(num);\\n        long long int n = s.size();\\n        if( s[0]==\\'-\\' )\\n        {\\n            cout<<s<<endl;\\n            sort( s.rbegin(), s.rend()-1 );\\n            cout<<s<<endl;\\n\\n            return stoll(s);\\n        }\\n        sort( s.begin() , s.end() );\\n        for( int i=0 ;i<n ;i++ )\\n        {\\n            if( s[i]!=\\'0\\' )\\n            {\\n                swap( s[0] , s[i]);\\n                break;\\n            }\\n        }\\n        return stoll(s);\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3338432,
                "title": "simple-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(nlogn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    static bool comp(char a, char b)\\n    {\\n        return a>b;\\n    }\\n    long long smallestNumber(long long num) {\\n        int flag=0;\\n        if(num==0)return 0;\\n        if(num<0)\\n        {\\n            flag=1;\\n        }\\n        string x=to_string(num);\\n        int n=x.size();\\n        string a=\"\";\\n        if(flag==1)\\n        {\\n            sort(x.begin(),x.end(),comp);\\n            return -1*stoll(x,nullptr,10);\\n        }\\n        else\\n        {\\n            sort(x.begin(),x.end());\\n            int i=0;\\n            while(x[i]==\\'0\\')\\n            {\\n                i++;\\n            }\\n            string y=x.substr(0,i);\\n            string z=x.substr(i,n);\\n            a+=z[0];\\n            a+=y;\\n            a+=z.substr(1,z.size());\\n\\n        }\\n         return stoll(a,nullptr,10);\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/b0a2280f-f14f-4a51-b863-546bb6df6cd5_1679725820.198776.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    static bool comp(char a, char b)\\n    {\\n        return a>b;\\n    }\\n    long long smallestNumber(long long num) {\\n        int flag=0;\\n        if(num==0)return 0;\\n        if(num<0)\\n        {\\n            flag=1;\\n        }\\n        string x=to_string(num);\\n        int n=x.size();\\n        string a=\"\";\\n        if(flag==1)\\n        {\\n            sort(x.begin(),x.end(),comp);\\n            return -1*stoll(x,nullptr,10);\\n        }\\n        else\\n        {\\n            sort(x.begin(),x.end());\\n            int i=0;\\n            while(x[i]==\\'0\\')\\n            {\\n                i++;\\n            }\\n            string y=x.substr(0,i);\\n            string z=x.substr(i,n);\\n            a+=z[0];\\n            a+=y;\\n            a+=z.substr(1,z.size());\\n\\n        }\\n         return stoll(a,nullptr,10);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3335772,
                "title": "javascript-positive-or-negative",
                "content": "```\\nconst smallestNumber = (num) => {\\n  if (num > 0) {\\n    let nums = [...String(num)].sort();\\n    let zeroes = nums.splice(0, nums.lastIndexOf(\"0\") + 1);\\n    nums.splice(1, 0, ...zeroes);\\n    return Number(nums.join(\"\"));\\n  } else {\\n    let nums = [...String(num)].sort((a, b) => b - a);\\n    return Number(nums.join(\"\"));\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst smallestNumber = (num) => {\\n  if (num > 0) {\\n    let nums = [...String(num)].sort();\\n    let zeroes = nums.splice(0, nums.lastIndexOf(\"0\") + 1);\\n    nums.splice(1, 0, ...zeroes);\\n    return Number(nums.join(\"\"));\\n  } else {\\n    let nums = [...String(num)].sort((a, b) => b - a);\\n    return Number(nums.join(\"\"));\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3330935,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num==0:\\n            return 0\\n        elif num>0:\\n            l = list(str(num))\\n            a = l.count(\\'0\\')\\n            l.sort()\\n            ans=\\'\\'\\n            for i in l:\\n                if i==\\'0\\':\\n                    continue\\n                else:\\n                    ans+=i\\n\\n            x = ans[0]\\n            if a>0:\\n                for i in range(a):\\n                    x += \\'0\\'\\n            return int(x+ans[1:])\\n        else:\\n            l = list(str(num))\\n            l.sort(reverse=True)\\n            \\n            x=\\'-\\'\\n            for i in l:\\n                if i==\\'-\\':\\n                    continue\\n                else:\\n                    x += i\\n            return int(x)\\n\\n\\n\\n                            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        if num==0:\\n            return 0\\n        elif num>0:\\n            l = list(str(num))\\n            a = l.count(\\'0\\')\\n            l.sort()\\n            ans=\\'\\'\\n            for i in l:\\n                if i==\\'0\\':\\n                    continue\\n                else:\\n                    ans+=i\\n\\n            x = ans[0]\\n            if a>0:\\n                for i in range(a):\\n                    x += \\'0\\'\\n            return int(x+ans[1:])\\n        else:\\n            l = list(str(num))\\n            l.sort(reverse=True)\\n            \\n            x=\\'-\\'\\n            for i in l:\\n                if i==\\'-\\':\\n                    continue\\n                else:\\n                    x += i\\n            return int(x)\\n\\n\\n\\n                            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3329997,
                "title": "1ms-java-code",
                "content": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        int n = 0, idx = 0;\\n        long temp = num;\\n        \\n        while(temp!=0){\\n            temp/=10;\\n            n++;\\n        }\\n        int arr[] = new int[n];\\n        if(n==1)\\n            return num;\\n        temp = num;\\n        while(temp!=0){\\n            arr[idx++]=Math.abs((int)(temp%10));\\n            temp/=10;\\n        }\\n        Arrays.sort(arr);\\n        int i=0;\\n        long ans = 0 ;\\n        if(num>0){\\n            int zeroes= 0, k=0;\\n    //in case of leading zeroes we need to find Next Greater number than 0 to place it at 0th position followed\\n                    // by all the leading zeroes.\\n            while(k<n && arr[k]==0)\\n            {   zeroes++;\\n                k++;\\n            }\\n            // at kth idx we got first non zero element\\n            ans = ans*10+arr[k];\\n            while(i<n){\\n                if(i==k){    \\n                    //update and continue\\n                    i++;\\n                    continue;\\n                }\\n                ans=ans*10+arr[i];\\n                i++;\\n            }\\n        }\\n        else{\\n            i=n-1;\\n            while(i>=0){\\n                ans=ans*10+arr[i];\\n                i--;\\n            }\\n            ans*=-1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        int n = 0, idx = 0;\\n        long temp = num;\\n        \\n        while(temp!=0){\\n            temp/=10;\\n            n++;\\n        }\\n        int arr[] = new int[n];\\n        if(n==1)\\n            return num;\\n        temp = num;\\n        while(temp!=0){\\n            arr[idx++]=Math.abs((int)(temp%10));\\n            temp/=10;\\n        }\\n        Arrays.sort(arr);\\n        int i=0;\\n        long ans = 0 ;\\n        if(num>0){\\n            int zeroes= 0, k=0;\\n    //in case of leading zeroes we need to find Next Greater number than 0 to place it at 0th position followed\\n                    // by all the leading zeroes.\\n            while(k<n && arr[k]==0)\\n            {   zeroes++;\\n                k++;\\n            }\\n            // at kth idx we got first non zero element\\n            ans = ans*10+arr[k];\\n            while(i<n){\\n                if(i==k){    \\n                    //update and continue\\n                    i++;\\n                    continue;\\n                }\\n                ans=ans*10+arr[i];\\n                i++;\\n            }\\n        }\\n        else{\\n            i=n-1;\\n            while(i>=0){\\n                ans=ans*10+arr[i];\\n                i--;\\n            }\\n            ans*=-1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3323910,
                "title": "easy-java-begineer-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nif number >=0 then we will sort the array in non decreasing order and check if arr[0]==0 then we will swap it with first non zero number.\\nif number <0 then we will reverse the sorted array because in negative the larger the number the minimum it will be.\\nAfter that we finally calculate the value from array and store it in a long ans.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)->for extra array\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        /*Timecomplexity-O(nlogn) spaceComplexity-O(n)*/\\n        if(num==0)return 0;\\n        boolean flag=false;\\n        if(num<0){\\n            flag=true;\\n            num=-1*num;\\n        }\\n        int size=0;\\n        long temp=num;\\n        /*calculating number of digit to construct array of digits*/\\n        while(temp>0){\\n            size++;\\n            temp/=10;\\n        }\\n        long arr[]=new long[size];\\n        int i=arr.length-1;\\n        temp=num;\\n        while(temp>0){\\n            arr[i--]=temp%10;\\n            temp/=10;\\n        }\\n        Arrays.sort(arr);\\n        if(flag){\\n            /*negative number will be maximum in decreasing order which is minimum*/\\n            int k=0;\\n            int j=arr.length-1;\\n            while(k<=j){\\n                long t=arr[k];\\n                arr[k]=arr[j];\\n                arr[j]=t;\\n                k++;\\n                j--;\\n            }\\n        }else{\\n            if(arr[0]==0){\\n                /*if 1st number is 0 then we swap with first non zero number*/\\n                int k=0;\\n                while(k<arr.length && arr[k]==0)k++;\\n                long t=arr[0];\\n                arr[0]=arr[k];\\n                arr[k]=t;\\n            }\\n        }\\n        long ans=0;\\n        for(int k=0;k<arr.length;k++){\\n             ans=(ans*10)+arr[k];\\n        }\\n        /*flag==true means negative number*/\\n        if(flag)return -1*ans;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        /*Timecomplexity-O(nlogn) spaceComplexity-O(n)*/\\n        if(num==0)return 0;\\n        boolean flag=false;\\n        if(num<0){\\n            flag=true;\\n            num=-1*num;\\n        }\\n        int size=0;\\n        long temp=num;\\n        /*calculating number of digit to construct array of digits*/\\n        while(temp>0){\\n            size++;\\n            temp/=10;\\n        }\\n        long arr[]=new long[size];\\n        int i=arr.length-1;\\n        temp=num;\\n        while(temp>0){\\n            arr[i--]=temp%10;\\n            temp/=10;\\n        }\\n        Arrays.sort(arr);\\n        if(flag){\\n            /*negative number will be maximum in decreasing order which is minimum*/\\n            int k=0;\\n            int j=arr.length-1;\\n            while(k<=j){\\n                long t=arr[k];\\n                arr[k]=arr[j];\\n                arr[j]=t;\\n                k++;\\n                j--;\\n            }\\n        }else{\\n            if(arr[0]==0){\\n                /*if 1st number is 0 then we swap with first non zero number*/\\n                int k=0;\\n                while(k<arr.length && arr[k]==0)k++;\\n                long t=arr[0];\\n                arr[0]=arr[k];\\n                arr[k]=t;\\n            }\\n        }\\n        long ans=0;\\n        for(int k=0;k<arr.length;k++){\\n             ans=(ans*10)+arr[k];\\n        }\\n        /*flag==true means negative number*/\\n        if(flag)return -1*ans;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3320406,
                "title": "simple-code-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> nums;\\n        int i,s=0;\\n        if(num==0)\\n        return 0;\\n        if(num<0)\\n        {\\n            s=1;\\n            num=num*-1;\\n        } \\n        while(num>0)\\n        {\\n            int r=num%10;\\n            nums.push_back(r);\\n            num=num/10;\\n        }\\n        if(s==1)\\n        {\\n        sort(nums.begin(),nums.end(),greater<>());\\n        }\\n        else\\n        {\\n        sort(nums.begin(),nums.end());\\n        if(nums[0]==0)\\n        {\\n            int j;\\n          for(j=0;j<nums.size();j++)\\n          {\\n              if(nums[j]>0)\\n              break;\\n          }\\n          nums[0]=nums[j];\\n          nums[j]=0;\\n        }\\n        }\\n        long long res=0;\\n        for(int j=0;j<nums.size();j++)\\n        {\\n            res=(res*10)+nums[j];\\n        }\\n        return s==1?-1*res:res;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        vector<int> nums;\\n        int i,s=0;\\n        if(num==0)\\n        return 0;\\n        if(num<0)\\n        {\\n            s=1;\\n            num=num*-1;\\n        } \\n        while(num>0)\\n        {\\n            int r=num%10;\\n            nums.push_back(r);\\n            num=num/10;\\n        }\\n        if(s==1)\\n        {\\n        sort(nums.begin(),nums.end(),greater<>());\\n        }\\n        else\\n        {\\n        sort(nums.begin(),nums.end());\\n        if(nums[0]==0)\\n        {\\n            int j;\\n          for(j=0;j<nums.size();j++)\\n          {\\n              if(nums[j]>0)\\n              break;\\n          }\\n          nums[0]=nums[j];\\n          nums[j]=0;\\n        }\\n        }\\n        long long res=0;\\n        for(int j=0;j<nums.size();j++)\\n        {\\n            res=(res*10)+nums[j];\\n        }\\n        return s==1?-1*res:res;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3299368,
                "title": "easy-c-solution",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        long long t=num;\\n        if(num==0) return 0;\\n        vector<long long> v;\\n        num=abs(num);\\n        while(num!=0)\\n        {\\n            v.push_back(num%10);\\n            num/=10;\\n        }\\n        num=0;\\n        if(t>0)\\n        {\\n            sort(v.begin(),v.end());\\n            int i=0;\\n            while(i<v.size() && v[i]==0) i++;\\n            num=v[i];\\n            v[i]=-1;\\n            for(auto it: v)\\n            {\\n                if(it!=-1)\\n                {\\n                    num=num*10+it;\\n                }\\n            }\\n            return num;\\n        }\\n        else\\n        {\\n            sort(v.begin(),v.end(),greater<int>());\\n            for(auto it: v) num=num*10+it;\\n            return -1*num;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        long long t=num;\\n        if(num==0) return 0;\\n        vector<long long> v;\\n        num=abs(num);\\n        while(num!=0)\\n        {\\n            v.push_back(num%10);\\n            num/=10;\\n        }\\n        num=0;\\n        if(t>0)\\n        {\\n            sort(v.begin(),v.end());\\n            int i=0;\\n            while(i<v.size() && v[i]==0) i++;\\n            num=v[i];\\n            v[i]=-1;\\n            for(auto it: v)\\n            {\\n                if(it!=-1)\\n                {\\n                    num=num*10+it;\\n                }\\n            }\\n            return num;\\n        }\\n        else\\n        {\\n            sort(v.begin(),v.end(),greater<int>());\\n            for(auto it: v) num=num*10+it;\\n            return -1*num;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3294445,
                "title": "my-simple-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(nlogn)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$ for the string.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0) sort(s.begin(), s.end());\\n        else sort(s.begin(), s.end(), greater<char>());\\n\\n        if(num > 0){\\n            // find_firs_not_of function returns the first index from left which is not \\'0\\'\\n            int ind = s.find_first_not_of(\\'0\\');\\n            swap(s[0], s[ind]);\\n        }\\n\\n        long long ans = stoll(s);\\n        if(num < 0) ans *= -1;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string s = to_string(abs(num));\\n        if(num >= 0) sort(s.begin(), s.end());\\n        else sort(s.begin(), s.end(), greater<char>());\\n\\n        if(num > 0){\\n            // find_firs_not_of function returns the first index from left which is not \\'0\\'\\n            int ind = s.find_first_not_of(\\'0\\');\\n            swap(s[0], s[ind]);\\n        }\\n\\n        long long ans = stoll(s);\\n        if(num < 0) ans *= -1;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3274339,
                "title": "c-easy-fast-sorting-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool flag=false;\\n        long long ans=0;\\n        if(num<0)\\n        {\\n            num=num*(-1);\\n            flag=true;\\n        }\\n        \\n        string curr=to_string(num);\\n        sort(curr.begin(),curr.end());\\n        int cnt=0;\\n        if(flag==false)\\n        {\\n            for(int i=0;i<curr.length();i++)\\n            {\\n                if(curr[i]==\\'0\\')\\n                    cnt++;\\n                else\\n                {\\n                    ans=ans*10+(curr[i]-\\'0\\');\\n                    for(int j=0;j<cnt;j++)\\n                    {\\n                        ans=ans*10;\\n                    }\\n                    cnt=0;\\n                }\\n            }\\n        }\\n        else\\n        {\\n            for(int i=curr.length()-1;i>=0;i--)\\n            {\\n                ans=ans*10+curr[i]-\\'0\\';\\n            }\\n            ans=ans*(-1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        bool flag=false;\\n        long long ans=0;\\n        if(num<0)\\n        {\\n            num=num*(-1);\\n            flag=true;\\n        }\\n        \\n        string curr=to_string(num);\\n        sort(curr.begin(),curr.end());\\n        int cnt=0;\\n        if(flag==false)\\n        {\\n            for(int i=0;i<curr.length();i++)\\n            {\\n                if(curr[i]==\\'0\\')\\n                    cnt++;\\n                else\\n                {\\n                    ans=ans*10+(curr[i]-\\'0\\');\\n                    for(int j=0;j<cnt;j++)\\n                    {\\n                        ans=ans*10;\\n                    }\\n                    cnt=0;\\n                }\\n            }\\n        }\\n        else\\n        {\\n            for(int i=curr.length()-1;i>=0;i--)\\n            {\\n                ans=ans*10+curr[i]-\\'0\\';\\n            }\\n            ans=ans*(-1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3260583,
                "title": "smallest-value-of-the-rearranged-number",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n      sorting and swap\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n      o(nlogn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    o(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string str = to_string(num);\\n        sort(str.begin(), str.end());\\n        int index = 0;\\n        while (index < str.size() && str[index] == \\'0\\') {\\n            index++;\\n        }\\n        if (index > 0 && index < str.size()) {\\n            swap(str[0], str[index]);\\n        }\\n        if(num<0){\\n            sort(str.rbegin(),str.rend()-1);\\n        }\\n        return stoll(str);\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        string str = to_string(num);\\n        sort(str.begin(), str.end());\\n        int index = 0;\\n        while (index < str.size() && str[index] == \\'0\\') {\\n            index++;\\n        }\\n        if (index > 0 && index < str.size()) {\\n            swap(str[0], str[index]);\\n        }\\n        if(num<0){\\n            sort(str.rbegin(),str.rend()-1);\\n        }\\n        return stoll(str);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3255430,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn smallest_number(num: i64) -> i64 {\\n        let s = num.abs().to_string();\\n        let mut s = s.chars().collect::<Vec<char>>();\\n        s.sort_by(|a, b| if num < 0 { b.cmp(a) } else { a.cmp(b) });\\n        if num > 0 {\\n            let i = s.iter().position(|&c| c != \\'0\\').unwrap();\\n            s.swap(0, i);\\n        }\\n        let s = s.iter().collect::<String>();\\n        s.parse::<i64>().unwrap() * (if num < 0 { -1 } else { 1 })\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn smallest_number(num: i64) -> i64 {\\n        let s = num.abs().to_string();\\n        let mut s = s.chars().collect::<Vec<char>>();\\n        s.sort_by(|a, b| if num < 0 { b.cmp(a) } else { a.cmp(b) });\\n        if num > 0 {\\n            let i = s.iter().position(|&c| c != \\'0\\').unwrap();\\n            s.swap(0, i);\\n        }\\n        let s = s.iter().collect::<String>();\\n        s.parse::<i64>().unwrap() * (if num < 0 { -1 } else { 1 })\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3248452,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n       String s = String.valueOf(num);\\n\\t\\tList<Integer> list = new ArrayList<Integer>();\\n\\t\\tfor(char c : s.toCharArray())\\n\\t\\t{\\n\\t\\t\\tif(c != \\'L\\' && c != \\'-\\' )\\n\\t\\t\\t\\tlist.add(c -\\'0\\');\\n\\t\\t}\\n\\t\\tCollections.sort(list);\\n\\t\\tif(num > 0)\\n\\t\\tfor(int i =0;i<list.size();i++)\\n\\t\\t{\\n\\t\\t\\tif(list.get(i) != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp= list.get(0);\\n\\t\\t\\t\\tlist.set(0, list.get(i));\\n\\t\\t\\t\\tlist.set(i, temp);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlong l =0;\\n\\t\\tif(num > 0)\\n\\t\\tfor(long i : list)\\n\\t\\t{\\n\\t\\t\\tl = l*10 + i;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tfor(int i =list.size()-1;i>=0;i--)\\n\\t\\t\\t\\tl = l*10 + list.get(i);\\n        if(num >= 0)\\n        return l;\\n        else\\n        return -l;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n       String s = String.valueOf(num);\\n\\t\\tList<Integer> list = new ArrayList<Integer>();\\n\\t\\tfor(char c : s.toCharArray())\\n\\t\\t{\\n\\t\\t\\tif(c != \\'L\\' && c != \\'-\\' )\\n\\t\\t\\t\\tlist.add(c -\\'0\\');\\n\\t\\t}\\n\\t\\tCollections.sort(list);\\n\\t\\tif(num > 0)\\n\\t\\tfor(int i =0;i<list.size();i++)\\n\\t\\t{\\n\\t\\t\\tif(list.get(i) != 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\tint temp= list.get(0);\\n\\t\\t\\t\\tlist.set(0, list.get(i));\\n\\t\\t\\t\\tlist.set(i, temp);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlong l =0;\\n\\t\\tif(num > 0)\\n\\t\\tfor(long i : list)\\n\\t\\t{\\n\\t\\t\\tl = l*10 + i;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tfor(int i =list.size()-1;i>=0;i--)\\n\\t\\t\\t\\tl = l*10 + list.get(i);\\n        if(num >= 0)\\n        return l;\\n        else\\n        return -l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243313,
                "title": "runtime-0ms-beats-100-solutions-c-easy-to-understand-intuitive-approach",
                "content": "```\\n                  //KINDLY UPVOTE IF YOU FIND THE SOLUTION HELPFUL\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n      if(num<=0){\\n        priority_queue<int,vector<int>,greater<int>> q;\\n        while(num!=0){\\n          q.push(num%10);\\n            num/=10;\\n         }\\n        long long res=0;\\n        while(!q.empty()){\\n            res=res*10+q.top();\\n            q.pop();\\n         }\\n          return res;\\n         }\\n         string s=to_string(num);\\n          sort(s.begin(),s.end());\\n          int i=1;\\n         while(s[0]==\\'0\\') swap(s[0],s[i++]);\\n\\t\\t //string to long long converting function\\n        return stoll(s);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sorting"
                ],
                "code": "```\\n                  //KINDLY UPVOTE IF YOU FIND THE SOLUTION HELPFUL\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n      if(num<=0){\\n        priority_queue<int,vector<int>,greater<int>> q;\\n        while(num!=0){\\n          q.push(num%10);\\n            num/=10;\\n         }\\n        long long res=0;\\n        while(!q.empty()){\\n            res=res*10+q.top();\\n            q.pop();\\n         }\\n          return res;\\n         }\\n         string s=to_string(num);\\n          sort(s.begin(),s.end());\\n          int i=1;\\n         while(s[0]==\\'0\\') swap(s[0],s[i++]);\\n\\t\\t //string to long long converting function\\n        return stoll(s);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3243308,
                "title": "c-number-to-string-conversion-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        int flg=0;\\n        if(num<0)\\n        flg=1;\\n        string tmp=\"\";\\n        num = abs(num);\\n        while(num)\\n        {\\n            tmp+=(num%10)+\\'0\\';\\n            num/=10;\\n        }\\n        \\n        sort(tmp.begin(),tmp.end());\\n        if(flg)\\n        {\\n            reverse(tmp.begin(),tmp.end());\\n            long long ans=0;\\n            for(int i=0;i<tmp.size();i++)\\n            {\\n                ans*=10;\\n                ans+=tmp[i]-\\'0\\';\\n            }\\n            ans*=-1;\\n            return ans;\\n        }\\n        else\\n        {\\n            if(tmp[0]==\\'0\\')\\n            {\\n                for(int i=1;i<tmp.size();i++)\\n                {\\n                    if(tmp[i]!=\\'0\\')\\n                    {\\n                        swap(tmp[i],tmp[0]);\\n                        break;\\n                    }\\n                }\\n            }\\n            long long ans=0;\\n            for(int i=0;i<tmp.size();i++)\\n            {\\n                ans*=10;\\n                ans+=tmp[i]-\\'0\\';\\n            }\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        int flg=0;\\n        if(num<0)\\n        flg=1;\\n        string tmp=\"\";\\n        num = abs(num);\\n        while(num)\\n        {\\n            tmp+=(num%10)+\\'0\\';\\n            num/=10;\\n        }\\n        \\n        sort(tmp.begin(),tmp.end());\\n        if(flg)\\n        {\\n            reverse(tmp.begin(),tmp.end());\\n            long long ans=0;\\n            for(int i=0;i<tmp.size();i++)\\n            {\\n                ans*=10;\\n                ans+=tmp[i]-\\'0\\';\\n            }\\n            ans*=-1;\\n            return ans;\\n        }\\n        else\\n        {\\n            if(tmp[0]==\\'0\\')\\n            {\\n                for(int i=1;i<tmp.size();i++)\\n                {\\n                    if(tmp[i]!=\\'0\\')\\n                    {\\n                        swap(tmp[i],tmp[0]);\\n                        break;\\n                    }\\n                }\\n            }\\n            long long ans=0;\\n            for(int i=0;i<tmp.size();i++)\\n            {\\n                ans*=10;\\n                ans+=tmp[i]-\\'0\\';\\n            }\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3236881,
                "title": "simplest-and-easiest-solution-beginners-friendly",
                "content": "```\\n    long long smallestNumber(long long num) {\\n        if(num==0){\\n            return 0;\\n        }\\n        vector<int>hold;\\n        while(num!=0){\\n            hold.push_back(num%10);\\n            num/=10;\\n        }\\n        sort(hold.begin(),hold.end());\\n        if(num<0){\\n            reverse(hold.begin(),hold.end());\\n        }\\n        int ind=0;\\n        if(hold[0]==0){\\n            while(ind<hold.size()&&hold[ind]==0){\\n                ind++;\\n            }\\n            swap(hold[0],hold[ind]);\\n        }\\n        \\n        long long newnum=0;\\n        for(int i=0;i<hold.size();i++){\\n            newnum=newnum*10+hold[i];\\n        }\\n        if(num<0){\\n            return 0-newnum;\\n        }\\n        return newnum;\\n    }\\n",
                "solutionTags": [
                    "C",
                    "Sorting"
                ],
                "code": "```\\n    long long smallestNumber(long long num) {\\n        if(num==0){\\n            return 0;\\n        }\\n        vector<int>hold;\\n        while(num!=0){\\n            hold.push_back(num%10);\\n            num/=10;\\n        }\\n        sort(hold.begin(),hold.end());\\n        if(num<0){\\n            reverse(hold.begin(),hold.end());\\n        }\\n        int ind=0;\\n        if(hold[0]==0){\\n            while(ind<hold.size()&&hold[ind]==0){\\n                ind++;\\n            }\\n            swap(hold[0],hold[ind]);\\n        }\\n        \\n        long long newnum=0;\\n        for(int i=0;i<hold.size();i++){\\n            newnum=newnum*10+hold[i];\\n        }\\n        if(num<0){\\n            return 0-newnum;\\n        }\\n        return newnum;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3218089,
                "title": "python-remove-zeroes-before-sorting",
                "content": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        s = \"\".join(sorted(str(abs(num)).replace(\"0\", \"\"), reverse=num < 0))\\n        zeroes = \"0\" * (len(\"%i\" % num) - len(s) - (num < 0))\\n        return int(s[0] + zeroes + s[1:]) if num > 0 else - int(s + zeroes)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        s = \"\".join(sorted(str(abs(num)).replace(\"0\", \"\"), reverse=num < 0))\\n        zeroes = \"0\" * (len(\"%i\" % num) - len(s) - (num < 0))\\n        return int(s[0] + zeroes + s[1:]) if num > 0 else - int(s + zeroes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3210930,
                "title": "beginner-friendly-java-solution",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num<10 && num>-10) return num;\\n        boolean neg = false;\\n        if(num<0){\\n            neg = true;\\n            num = 0-num;\\n        }\\n        String str = Long.toString(num);\\n        char[] arr = str.toCharArray();\\n        Arrays.sort(arr);\\n        String t = \"\";\\n        if(neg){\\n            for(int i=arr.length-1;i>=0;i--){\\n                t+=Character.toString(arr[i]);\\n            }\\n        }\\n        else{\\n            int idx = -1;\\n            for(int i=0;i<arr.length;i++){\\n                if(arr[i]!=\\'0\\'){\\n                   idx =i;\\n                   break;\\n                }\\n            }\\n            if(arr[0]==\\'0\\'){\\n                arr[0] = arr[idx];\\n                arr[idx] = \\'0\\';\\n            }\\n            for(int i=0;i<arr.length;i++){\\n                t+=Character.toString(arr[i]);\\n            }\\n            return Long.parseLong(t);\\n        }\\n        return 0-Long.parseLong(t);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public long smallestNumber(long num) {\\n        if(num<10 && num>-10) return num;\\n        boolean neg = false;\\n        if(num<0){\\n            neg = true;\\n            num = 0-num;\\n        }\\n        String str = Long.toString(num);\\n        char[] arr = str.toCharArray();\\n        Arrays.sort(arr);\\n        String t = \"\";\\n        if(neg){\\n            for(int i=arr.length-1;i>=0;i--){\\n                t+=Character.toString(arr[i]);\\n            }\\n        }\\n        else{\\n            int idx = -1;\\n            for(int i=0;i<arr.length;i++){\\n                if(arr[i]!=\\'0\\'){\\n                   idx =i;\\n                   break;\\n                }\\n            }\\n            if(arr[0]==\\'0\\'){\\n                arr[0] = arr[idx];\\n                arr[idx] = \\'0\\';\\n            }\\n            for(int i=0;i<arr.length;i++){\\n                t+=Character.toString(arr[i]);\\n            }\\n            return Long.parseLong(t);\\n        }\\n        return 0-Long.parseLong(t);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3209333,
                "title": "java-easy-understandable-code",
                "content": "```\\n if(num<0)   \\n            \\n          {\\n              long num5=num*(-1);\\n            String s2=String.valueOf(num5);\\n            char c3[]=s2.toCharArray();\\n            Arrays.sort(c3);\\n          char first;\\n          char last;\\n          for(int i=0;i<s2.length()/2;i++)\\n          {\\n        \\t  first=c3[i];\\n        \\t  last=c3[s2.length()-i-1];\\n        \\t  c3[i]=last;\\n        \\t  c3[s2.length()-i-1]=first;\\n        \\t  \\n        \\t  \\n        \\t  \\n          }  \\n            String s4=new String(c3);\\n            Long l1=new Long(s4);\\n        \\n              return l1*(-1);\\n    \\n          }\\n         else\\n   \\n         {\\n            \\n        String s=String.valueOf(num);\\n        //System.out.println(s);\\n        char c[]=s.toCharArray();\\n        Arrays.sort(c);\\n         int count=0;\\n          for(int i=0;i<s.length();i++)\\n          {\\n              if(c[i]==\\'0\\')\\n                  count++;\\n\\n}\\n             if(count==1&&s.length()>=2)\\n             {\\n                 char temp=c[0];\\n                 char nn=c[1];\\n                 c[0]=nn;\\n                 c[1]=temp;\\n\\n\\n\\n}\\n             if(count>1)\\n             {\\n             for(int i=0;i<count/2;i++)\\n             {\\n                 char f1=c[i];\\n                 char l1=c[count-i];\\n                 c[i]=l1;\\n                 c[count-i]=f1;\\n                 \\n                 \\n\\n\\n\\n\\n}\\n             }\\n\\n       String s1=new String(c);\\n        Long l=new Long(s1);\\n\\n\\n\\n\\n                       \\n                       \\n\\n\\n\\n\\n \\n        \\n    return l;\\n    }\\n\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n if(num<0)   \\n            \\n          {\\n              long num5=num*(-1);\\n            String s2=String.valueOf(num5);\\n            char c3[]=s2.toCharArray();\\n            Arrays.sort(c3);\\n          char first;\\n          char last;\\n          for(int i=0;i<s2.length()/2;i++)\\n          {\\n        \\t  first=c3[i];\\n        \\t  last=c3[s2.length()-i-1];\\n        \\t  c3[i]=last;\\n        \\t  c3[s2.length()-i-1]=first;\\n        \\t  \\n        \\t  \\n        \\t  \\n          }  \\n            String s4=new String(c3);\\n            Long l1=new Long(s4);\\n        \\n              return l1*(-1);\\n    \\n          }\\n         else\\n   \\n         {\\n            \\n        String s=String.valueOf(num);\\n        //System.out.println(s);\\n        char c[]=s.toCharArray();\\n        Arrays.sort(c);\\n         int count=0;\\n          for(int i=0;i<s.length();i++)\\n          {\\n              if(c[i]==\\'0\\')\\n                  count++;\\n\\n}\\n             if(count==1&&s.length()>=2)\\n             {\\n                 char temp=c[0];\\n                 char nn=c[1];\\n                 c[0]=nn;\\n                 c[1]=temp;\\n\\n\\n\\n}\\n             if(count>1)\\n             {\\n             for(int i=0;i<count/2;i++)\\n             {\\n                 char f1=c[i];\\n                 char l1=c[count-i];\\n                 c[i]=l1;\\n                 c[count-i]=f1;\\n                 \\n                 \\n\\n\\n\\n\\n}\\n             }\\n\\n       String s1=new String(c);\\n        Long l=new Long(s1);\\n\\n\\n\\n\\n                       \\n                       \\n\\n\\n\\n\\n \\n        \\n    return l;\\n    }\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3193895,
                "title": "javascript-code-for-beginner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar smallestNumber = function(num) {\\n    let numOfArr = num.toString().split(\"\");\\n    //For Negative Value\\n    if (numOfArr[0] == \"-\") {\\n        numOfArr.splice(0, 1);\\n        numOfArr.sort((a, b) => b - a);\\n        return -numOfArr.join(\"\");\\n    }\\n    //For Positive Value\\n    numOfArr.sort((a, b) => a - b);\\n    for (let i = 0; i < numOfArr.length; i++) {\\n       if (numOfArr[i] > \"0\") {\\n         [numOfArr[0], numOfArr[i]] = [numOfArr[i], numOfArr[0]];\\n         break;\\n       }\\n    }\\n  \\n    return +numOfArr.join(\"\");\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number}\\n */\\nvar smallestNumber = function(num) {\\n    let numOfArr = num.toString().split(\"\");\\n    //For Negative Value\\n    if (numOfArr[0] == \"-\") {\\n        numOfArr.splice(0, 1);\\n        numOfArr.sort((a, b) => b - a);\\n        return -numOfArr.join(\"\");\\n    }\\n    //For Positive Value\\n    numOfArr.sort((a, b) => a - b);\\n    for (let i = 0; i < numOfArr.length; i++) {\\n       if (numOfArr[i] > \"0\") {\\n         [numOfArr[0], numOfArr[i]] = [numOfArr[i], numOfArr[0]];\\n         break;\\n       }\\n    }\\n  \\n    return +numOfArr.join(\"\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3188500,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int smallestNumber(int num) {\\n      if(num == 0) {\\n          return 0;\\n      }\\n      final number = num.abs();\\n      final isNegative = num < 0 ? true : false;\\n      final list = number.toString().split(\\'\\').map((n) => int.parse(n)).toList();\\n      list.sort();\\n      if(isNegative){\\n          return -int.parse(list.map((n) => \\'$n\\').toList().reversed.join(\\'\\'));\\n      } else {\\n        for(var i = 0; i < list.length; i++) {\\n          if(i == 0 && list[i] > 0) {\\n              return int.parse(list.map((n) => \\'$n\\').join(\\'\\'));\\n          }\\n          if(list[i] > 0){\\n              list[0] = list[i];\\n              list[i] = 0;\\n              return int.parse(list.map((n) => \\'$n\\').join(\\'\\'));\\n          }\\n        } \\n      }\\n      return 0;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int smallestNumber(int num) {\\n      if(num == 0) {\\n          return 0;\\n      }\\n      final number = num.abs();\\n      final isNegative = num < 0 ? true : false;\\n      final list = number.toString().split(\\'\\').map((n) => int.parse(n)).toList();\\n      list.sort();\\n      if(isNegative){\\n          return -int.parse(list.map((n) => \\'$n\\').toList().reversed.join(\\'\\'));\\n      } else {\\n        for(var i = 0; i < list.length; i++) {\\n          if(i == 0 && list[i] > 0) {\\n              return int.parse(list.map((n) => \\'$n\\').join(\\'\\'));\\n          }\\n          if(list[i] > 0){\\n              list[0] = list[i];\\n              list[i] = 0;\\n              return int.parse(list.map((n) => \\'$n\\').join(\\'\\'));\\n          }\\n        } \\n      }\\n      return 0;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188257,
                "title": "smallest-value-of-the-rearranged-number-2165-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar smallestNumber = function (num) {\\n  if (num >= 0) {\\n    let numPos = num.toString().split(\"\").sort((a, b) => a - b);\\n\\n    let numPos2 = [];\\n      var output;\\n\\n    for (let i = 0; i < numPos.length; i++) {\\n      numPos2.push(Number(numPos[i]));\\n    }\\n\\n       if (numPos2[0] !== 0) {\\n           output = Number(numPos2.join(\"\"))\\n      \\n      return output ;\\n    }\\n\\n      if (numPos2[0] == 0) {\\n      for (let i = 0; i < numPos2.length; i++) {\\n        if (numPos2[i] > 0) {\\n          let temp = numPos2[0];\\n          numPos2[0] = numPos2[i];\\n          numPos2[i] = temp;\\n          break;\\n        }\\n      }\\n      output = numPos2.join(\"\");\\n      return Number(output);\\n    }\\n  } else {\\n    let result = num\\n      .toString()\\n      .split(\"\")\\n      .sort((a, b) => b - a);\\n\\n    if (result[result.length - 1] == \"-\") {\\n      result.pop();\\n      result.unshift(\"-\");\\n    }\\n    result = result.join(\"\");\\n    return Number(result);\\n  }\\n};\\n// let num = 270;\\n// console.log(smallestNumber(num));\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar smallestNumber = function (num) {\\n  if (num >= 0) {\\n    let numPos = num.toString().split(\"\").sort((a, b) => a - b);\\n\\n    let numPos2 = [];\\n      var output;\\n\\n    for (let i = 0; i < numPos.length; i++) {\\n      numPos2.push(Number(numPos[i]));\\n    }\\n\\n       if (numPos2[0] !== 0) {\\n           output = Number(numPos2.join(\"\"))\\n      \\n      return output ;\\n    }\\n\\n      if (numPos2[0] == 0) {\\n      for (let i = 0; i < numPos2.length; i++) {\\n        if (numPos2[i] > 0) {\\n          let temp = numPos2[0];\\n          numPos2[0] = numPos2[i];\\n          numPos2[i] = temp;\\n          break;\\n        }\\n      }\\n      output = numPos2.join(\"\");\\n      return Number(output);\\n    }\\n  } else {\\n    let result = num\\n      .toString()\\n      .split(\"\")\\n      .sort((a, b) => b - a);\\n\\n    if (result[result.length - 1] == \"-\") {\\n      result.pop();\\n      result.unshift(\"-\");\\n    }\\n    result = result.join(\"\");\\n    return Number(result);\\n  }\\n};\\n// let num = 270;\\n// console.log(smallestNumber(num));\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3179000,
                "title": "easy-python-solution",
                "content": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        strNum = str(num)\\n        flag = False \\n        if strNum[0] == \\'-\\' : \\n            flag = True \\n            strNum = strNum[1:]\\n        digits = [int(strNum[i]) for i in range(len(strNum))]\\n        digits.sort()\\n        finalNum = \"\" \\n        if flag : \\n            for i in reversed(range(len(digits))) : \\n                finalNum += str(digits[i])\\n\\n            return int(\"-\"+finalNum)\\n        else : \\n            zeroCount = digits.count(0)\\n            for i in range(len(digits)) : \\n                if digits[i] != 0 : \\n                    finalNum += str(digits[i])\\n            if zeroCount > 0 : \\n                if len(finalNum) >= 1 : \\n                    return int(finalNum[0] + \"0\"*zeroCount + finalNum[1:])\\n                else : \\n                    return 0\\n            else : \\n                return int(finalNum)\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        strNum = str(num)\\n        flag = False \\n        if strNum[0] == \\'-\\' : \\n            flag = True \\n            strNum = strNum[1:]\\n        digits = [int(strNum[i]) for i in range(len(strNum))]\\n        digits.sort()\\n        finalNum = \"\" \\n        if flag : \\n            for i in reversed(range(len(digits))) : \\n                finalNum += str(digits[i])\\n\\n            return int(\"-\"+finalNum)\\n        else : \\n            zeroCount = digits.count(0)\\n            for i in range(len(digits)) : \\n                if digits[i] != 0 : \\n                    finalNum += str(digits[i])\\n            if zeroCount > 0 : \\n                if len(finalNum) >= 1 : \\n                    return int(finalNum[0] + \"0\"*zeroCount + finalNum[1:])\\n                else : \\n                    return 0\\n            else : \\n                return int(finalNum)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3171101,
                "title": "simple-c-solution-without-sort-and-string-100-faster",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        long long res=0,org=num;\\n        map<long long,long long> mp;\\n        while(num)\\n        {\\n            long long rem=num%10;\\n            mp[rem]++;\\n            num/=10;\\n        }\\n        if(org>0 and mp.count(0))\\n        {\\n            long long k=0;\\n            auto it=mp.begin();\\n            ++it;\\n            k=it->first;\\n            mp[k]--;\\n            res=k;\\n        }   \\n        for(auto it:mp)\\n        {\\n            for(int i=0;i<it.second;i++)\\n            {\\n                res=res*10+it.first;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) \\n    {\\n        long long res=0,org=num;\\n        map<long long,long long> mp;\\n        while(num)\\n        {\\n            long long rem=num%10;\\n            mp[rem]++;\\n            num/=10;\\n        }\\n        if(org>0 and mp.count(0))\\n        {\\n            long long k=0;\\n            auto it=mp.begin();\\n            ++it;\\n            k=it->first;\\n            mp[k]--;\\n            res=k;\\n        }   \\n        for(auto it:mp)\\n        {\\n            for(int i=0;i<it.second;i++)\\n            {\\n                res=res*10+it.first;\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3166947,
                "title": "c-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long n=num;\\n        if(num==0)\\n        return 0;\\n        if(n<0)\\n        n*=-1;\\n        string s1=to_string(n);\\n        sort(s1.begin(),s1.end());\\n        if(num<0)\\n        reverse(s1.begin(),s1.end());\\n        long long itr=0;\\n        while(s1[itr]==\\'0\\'){\\n            itr++;\\n           continue;\\n        }\\n        char temp=s1[0];\\n        s1[0]=s1[itr];\\n        s1[itr]=temp;\\n        unsigned long long result=num<0?stoll(s1)*(-1):stoll(s1);\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    long long smallestNumber(long long num) {\\n        long long n=num;\\n        if(num==0)\\n        return 0;\\n        if(n<0)\\n        n*=-1;\\n        string s1=to_string(n);\\n        sort(s1.begin(),s1.end());\\n        if(num<0)\\n        reverse(s1.begin(),s1.end());\\n        long long itr=0;\\n        while(s1[itr]==\\'0\\'){\\n            itr++;\\n           continue;\\n        }\\n        char temp=s1[0];\\n        s1[0]=s1[itr];\\n        s1[itr]=temp;\\n        unsigned long long result=num<0?stoll(s1)*(-1):stoll(s1);\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3166866,
                "title": "solution-easy-python",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        num1 = sorted(str(abs(num)))\\n        if num <= 0:\\n            k = \"\".join(num1)\\n            ans = k[::-1]\\n            return(-int(ans))\\n    \\n        for i , num in enumerate(num1):\\n            if num > \\'0\\':\\n                num1[i] , num1[0] = num1[0] , num1[i]\\n                k = (\\'\\'.join(num1))\\n                return int(k)\\n        k = (\"\".join(num1))\\n        return int(k)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def smallestNumber(self, num: int) -> int:\\n        num1 = sorted(str(abs(num)))\\n        if num <= 0:\\n            k = \"\".join(num1)\\n            ans = k[::-1]\\n            return(-int(ans))\\n    \\n        for i , num in enumerate(num1):\\n            if num > \\'0\\':\\n                num1[i] , num1[0] = num1[0] , num1[i]\\n                k = (\\'\\'.join(num1))\\n                return int(k)\\n        k = (\"\".join(num1))\\n        return int(k)\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1985288,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "handling cases where 0 was present in a positive integer was pretty annoying for me..."
                    },
                    {
                        "username": "SasiAttili",
                        "content": "leetcode can made this as easy(difficulty) "
                    },
                    {
                        "username": "vaibhavtale",
                        "content": "WTH it works even if dont handle any single negative case.......\\n\\n\\nScam 2023"
                    },
                    {
                        "username": "user0143ab",
                        "content": "something is broken with test cases .... normal code is throwing random errors"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "can you share your testcases"
                    },
                    {
                        "username": "jayasree2000",
                        "content": " string s = Math.Abs(num).ToString();\\n        long len = s.Length;\\n        if(len==1) return num;\\n        StringBuilder sb = new StringBuilder();\\n        PriorityQueue<long,long> pq = new PriorityQueue<long,long>();\\n        for(int i=0;i<len;i++){\\n            int t;\\n            Int32.TryParse(s[i].ToString(),out t);           \\n            if(num<0){\\n                 pq.Enqueue(t*-1, t*-1);\\n            }\\n            else{\\n                pq.Enqueue(t,t);\\n            }\\n        }        \\n        while(pq.Count>0){\\n            long min = pq.Dequeue();\\n            if(min<0) min= min*-1;\\n            sb.Append(min);\\n        }     \\n        int k=0;\\n        while(sb[k]==\\'0\\'){\\n            k++;\\n        }\\n        if(k>0 && sb.Length>0){\\n         char c = sb[0];\\n         sb[0] = sb[k];\\n         sb[k]=c;\\n        }\\n    \\n       long res;\\n       long.TryParse(sb.ToString(),out res);\\n       if(num <0) res= res*-1;\\n       return res;\\n    }"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Stop posting solutions, don\\'t me average, be GigaChad, delete this post"
                    }
                ]
            },
            {
                "id": 1963227,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "handling cases where 0 was present in a positive integer was pretty annoying for me..."
                    },
                    {
                        "username": "SasiAttili",
                        "content": "leetcode can made this as easy(difficulty) "
                    },
                    {
                        "username": "vaibhavtale",
                        "content": "WTH it works even if dont handle any single negative case.......\\n\\n\\nScam 2023"
                    },
                    {
                        "username": "user0143ab",
                        "content": "something is broken with test cases .... normal code is throwing random errors"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "can you share your testcases"
                    },
                    {
                        "username": "jayasree2000",
                        "content": " string s = Math.Abs(num).ToString();\\n        long len = s.Length;\\n        if(len==1) return num;\\n        StringBuilder sb = new StringBuilder();\\n        PriorityQueue<long,long> pq = new PriorityQueue<long,long>();\\n        for(int i=0;i<len;i++){\\n            int t;\\n            Int32.TryParse(s[i].ToString(),out t);           \\n            if(num<0){\\n                 pq.Enqueue(t*-1, t*-1);\\n            }\\n            else{\\n                pq.Enqueue(t,t);\\n            }\\n        }        \\n        while(pq.Count>0){\\n            long min = pq.Dequeue();\\n            if(min<0) min= min*-1;\\n            sb.Append(min);\\n        }     \\n        int k=0;\\n        while(sb[k]==\\'0\\'){\\n            k++;\\n        }\\n        if(k>0 && sb.Length>0){\\n         char c = sb[0];\\n         sb[0] = sb[k];\\n         sb[k]=c;\\n        }\\n    \\n       long res;\\n       long.TryParse(sb.ToString(),out res);\\n       if(num <0) res= res*-1;\\n       return res;\\n    }"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Stop posting solutions, don\\'t me average, be GigaChad, delete this post"
                    }
                ]
            },
            {
                "id": 1940076,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "handling cases where 0 was present in a positive integer was pretty annoying for me..."
                    },
                    {
                        "username": "SasiAttili",
                        "content": "leetcode can made this as easy(difficulty) "
                    },
                    {
                        "username": "vaibhavtale",
                        "content": "WTH it works even if dont handle any single negative case.......\\n\\n\\nScam 2023"
                    },
                    {
                        "username": "user0143ab",
                        "content": "something is broken with test cases .... normal code is throwing random errors"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "can you share your testcases"
                    },
                    {
                        "username": "jayasree2000",
                        "content": " string s = Math.Abs(num).ToString();\\n        long len = s.Length;\\n        if(len==1) return num;\\n        StringBuilder sb = new StringBuilder();\\n        PriorityQueue<long,long> pq = new PriorityQueue<long,long>();\\n        for(int i=0;i<len;i++){\\n            int t;\\n            Int32.TryParse(s[i].ToString(),out t);           \\n            if(num<0){\\n                 pq.Enqueue(t*-1, t*-1);\\n            }\\n            else{\\n                pq.Enqueue(t,t);\\n            }\\n        }        \\n        while(pq.Count>0){\\n            long min = pq.Dequeue();\\n            if(min<0) min= min*-1;\\n            sb.Append(min);\\n        }     \\n        int k=0;\\n        while(sb[k]==\\'0\\'){\\n            k++;\\n        }\\n        if(k>0 && sb.Length>0){\\n         char c = sb[0];\\n         sb[0] = sb[k];\\n         sb[k]=c;\\n        }\\n    \\n       long res;\\n       long.TryParse(sb.ToString(),out res);\\n       if(num <0) res= res*-1;\\n       return res;\\n    }"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Stop posting solutions, don\\'t me average, be GigaChad, delete this post"
                    }
                ]
            },
            {
                "id": 1793534,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "handling cases where 0 was present in a positive integer was pretty annoying for me..."
                    },
                    {
                        "username": "SasiAttili",
                        "content": "leetcode can made this as easy(difficulty) "
                    },
                    {
                        "username": "vaibhavtale",
                        "content": "WTH it works even if dont handle any single negative case.......\\n\\n\\nScam 2023"
                    },
                    {
                        "username": "user0143ab",
                        "content": "something is broken with test cases .... normal code is throwing random errors"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "can you share your testcases"
                    },
                    {
                        "username": "jayasree2000",
                        "content": " string s = Math.Abs(num).ToString();\\n        long len = s.Length;\\n        if(len==1) return num;\\n        StringBuilder sb = new StringBuilder();\\n        PriorityQueue<long,long> pq = new PriorityQueue<long,long>();\\n        for(int i=0;i<len;i++){\\n            int t;\\n            Int32.TryParse(s[i].ToString(),out t);           \\n            if(num<0){\\n                 pq.Enqueue(t*-1, t*-1);\\n            }\\n            else{\\n                pq.Enqueue(t,t);\\n            }\\n        }        \\n        while(pq.Count>0){\\n            long min = pq.Dequeue();\\n            if(min<0) min= min*-1;\\n            sb.Append(min);\\n        }     \\n        int k=0;\\n        while(sb[k]==\\'0\\'){\\n            k++;\\n        }\\n        if(k>0 && sb.Length>0){\\n         char c = sb[0];\\n         sb[0] = sb[k];\\n         sb[k]=c;\\n        }\\n    \\n       long res;\\n       long.TryParse(sb.ToString(),out res);\\n       if(num <0) res= res*-1;\\n       return res;\\n    }"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Stop posting solutions, don\\'t me average, be GigaChad, delete this post"
                    }
                ]
            },
            {
                "id": 2055644,
                "content": [
                    {
                        "username": "yeedaKing",
                        "content": "handling cases where 0 was present in a positive integer was pretty annoying for me..."
                    },
                    {
                        "username": "SasiAttili",
                        "content": "leetcode can made this as easy(difficulty) "
                    },
                    {
                        "username": "vaibhavtale",
                        "content": "WTH it works even if dont handle any single negative case.......\\n\\n\\nScam 2023"
                    },
                    {
                        "username": "user0143ab",
                        "content": "something is broken with test cases .... normal code is throwing random errors"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "can you share your testcases"
                    },
                    {
                        "username": "jayasree2000",
                        "content": " string s = Math.Abs(num).ToString();\\n        long len = s.Length;\\n        if(len==1) return num;\\n        StringBuilder sb = new StringBuilder();\\n        PriorityQueue<long,long> pq = new PriorityQueue<long,long>();\\n        for(int i=0;i<len;i++){\\n            int t;\\n            Int32.TryParse(s[i].ToString(),out t);           \\n            if(num<0){\\n                 pq.Enqueue(t*-1, t*-1);\\n            }\\n            else{\\n                pq.Enqueue(t,t);\\n            }\\n        }        \\n        while(pq.Count>0){\\n            long min = pq.Dequeue();\\n            if(min<0) min= min*-1;\\n            sb.Append(min);\\n        }     \\n        int k=0;\\n        while(sb[k]==\\'0\\'){\\n            k++;\\n        }\\n        if(k>0 && sb.Length>0){\\n         char c = sb[0];\\n         sb[0] = sb[k];\\n         sb[k]=c;\\n        }\\n    \\n       long res;\\n       long.TryParse(sb.ToString(),out res);\\n       if(num <0) res= res*-1;\\n       return res;\\n    }"
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Stop posting solutions, don\\'t me average, be GigaChad, delete this post"
                    }
                ]
            }
        ]
    }
]