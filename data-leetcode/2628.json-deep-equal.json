[
    {
        "title": "JSON Deep Equal",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1868794,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1900819,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1903403,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1902840,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1902224,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1901166,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1900893,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1900426,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1898503,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1892831,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1868794,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1900819,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1903403,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1902840,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1902224,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1901166,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1900893,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1900426,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1898503,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            },
            {
                "id": 1892831,
                "content": [
                    {
                        "username": "akerleyman",
                        "content": "If you\\'re wondering why the acceptance is so low it\\'s because there\\'s test cases like this:  o1={\"0\":1}\\no2=[1]   (-_-) Best of luck."
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "[@kodyczasupl1](/kodyczasupl1) can you explain how ?"
                    },
                    {
                        "username": "kodyczasupl1",
                        "content": "those test cases are acually pretty good for deep understanding"
                    },
                    {
                        "username": "shrinivas2",
                        "content": "lol so true, since this is Javascript its easy to mess around with developers with all the quirks this lovely language has"
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Day 17: Done Solving Today\\'s Question \\uD83D\\uDE01"
                    },
                    {
                        "username": "dmitry_yushko",
                        "content": "The description asks us to compare two objects, and opposed to that test cases want to compare two \\'nulls\\' with  a positive result. Can anyone explain please since when on earth null became an object in JavaScript, because I don\\'t really get this moment."
                    },
                    {
                        "username": "ereshidov",
                        "content": "```typeof null``` returns an \"object\" string - check https://github.com/rohan-paul/Awesome-JavaScript-Interviews/blob/master/Javascript/Tricky-JS-Problems/typeof-null-why-its-object.md"
                    },
                    {
                        "username": "aaachris1820",
                        "content": "the problem should describe the objects to be any object not just literals"
                    },
                    {
                        "username": "chinmaykumar021",
                        "content": "o1 = true, o2 = false\\nhow is this a object ?\\nisn\\'t this a boolean? "
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "that\\'s why you need to treat the parameters."
                    },
                    {
                        "username": "Vlad_Ku",
                        "content": "Some of accepted solutions are wrong!\nThe testcase like o1 = `{ a:1, b:{c:3} }`, o2 = `{ a:1, b:{c:3}, d:0 }` should return `false` instead of `true`\nThe task has an error!"
                    },
                    {
                        "username": "kuntal0901",
                        "content": "Shouldn\\'t this testcase return true\\no1 = [{\"x\":2},4], o2= [4,{\"x\":2}]"
                    },
                    {
                        "username": "tifv",
                        "content": "No, it should return `false`. In this case, `o1[\"0\"]` is `{\"x\":2}` and `o2[\"0\"]` is `4`. It means that the same key `\"0\"` is associated with different (not deep-equal) values, so `o1` and `o2` are not deep equal."
                    },
                    {
                        "username": "Tribhuwan-Joshi",
                        "content": "case 4 has input as `true` and `false` . What does that mean?"
                    },
                    {
                        "username": "tifv",
                        "content": "`true` and `false` are primitive JavaScript (and JSON) values. You can test if something is equal to them with `===` operator."
                    },
                    {
                        "username": "cortadordeunha666",
                        "content": "Lol this challenge isn\\'t medium at all, specially because we can\\'t debug the damn code smh"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "I do think it is medium, there are no special skills required, just recursion and checking if things are equal and the time constraint is not an issue. \\nThe hard part is thinking of all the things you have to check for, took me 6 attempts to get it right. But it is very doable. \\nbtw, you cannot debug (without a premium account), but you can just add console.log() wherever you want, which for synchronous code is all you need."
                    },
                    {
                        "username": "zaw_moe",
                        "content": "It does not specify if [1,2,3] is equal to [3,2,1]"
                    },
                    {
                        "username": "tifv",
                        "content": "It does, in fact, specify this. If a = [1,2,3] and b = [3,2,1], then a[0] == 1 and b[0] == 3. For the objects to be deeply equal, \\u201Cassociated values must also be deeply equal\\u201D, which means those two values aren\\'t."
                    }
                ]
            }
        ]
    }
]