[
    {
        "title": "Employees Earning More Than Their Managers",
        "question_content": "Table: Employee\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| id          | int     |\n| name        | varchar |\n| salary      | int     |\n| managerId   | int     |\n+-------------+---------+\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\n\n&nbsp;\nWrite a solution&nbsp;to find the employees who earn more than their managers.\nReturn the result table in any order.\nThe result format is in the following example.\n&nbsp;\nExample 1:\n\nInput: \nEmployee table:\n+----+-------+--------+-----------+\n| id | name  | salary | managerId |\n+----+-------+--------+-----------+\n| 1  | Joe   | 70000  | 3         |\n| 2  | Henry | 80000  | 4         |\n| 3  | Sam   | 60000  | Null      |\n| 4  | Max   | 90000  | Null      |\n+----+-------+--------+-----------+\nOutput: \n+----------+\n| Employee |\n+----------+\n| Joe      |\n+----------+\nExplanation: Joe is the only employee who earns more than his manager.",
        "solutions": [
            {
                "id": 2515468,
                "title": "simple-solution-for-beginners-detailed-with-notes",
                "content": "1) The first thing we want to do is look at the output. We can see that the column name is Employee. But there is no column in the original table with that name. So we know we have to rename it.\\n```\\nSELECT name as Employee\\n```\\n2) There\\'s only one table we can use, so lets add that.\\n```\\nSELECT name as Employee\\nFROM employee\\n```\\n3) Now, we know we have to compare internal values within the table. How do we do that? With an INNER JOIN of course! Think of it as creating a duplicate table. \\n```\\nSELECT name as Employee\\nFROM employee e1 \\nINNER JOIN employee e2\\n```\\n4. Now here comes the tricky part. Looking at the employee table, we have to ask ourselves: who are the managers and who are the employees? (Hint: look at the managerID column). Thats right, Joe and Henry are employees, and Sam and Max are the managers. We need to somehow let our query know that Sam and Max are the managers. Let\\'s do that by joining the ID column to the managerID column.\\n```\\nSELECT name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\n```\\n5. What did this do? It specified any e1 value as a manager value. The query looks at the tables and notices that the id\\'s of 3 and 4 are also managerID values. Now that we know e1 are the managers, lets compare the salaries:\\n```\\nSELECT name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\nWHERE e1.salary < e2.salary\\n```\\n6. We know that e1 are the managers, and e2 are the employees. Last step is to specify the column name in the SELECT clause (remember: e1 is manager and e2 is employee). \\nLet\\'s do that now:\\n```\\nSELECT e2.name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\nWHERE\\ne1.salary < e2.salary\\n```\\n7. All done! If you made it this far and this helped, I would greatly appreciate if you would upvote (I\\'m just a CS student trying to help others). If you have any questions / comments, I\\'d love to help answer any problems you may have.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name as Employee\\n```\n```\\nSELECT name as Employee\\nFROM employee\\n```\n```\\nSELECT name as Employee\\nFROM employee e1 \\nINNER JOIN employee e2\\n```\n```\\nSELECT name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\n```\n```\\nSELECT name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\nWHERE e1.salary < e2.salary\\n```\n```\\nSELECT e2.name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\nWHERE\\ne1.salary < e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53475,
                "title": "a-straightforward-method",
                "content": "    select E1.Name \\n    from Employee as E1, Employee as E2 \\n    where E1.ManagerId = E2.Id and E1.Salary > E2.Salary",
                "solutionTags": [],
                "code": "    select E1.Name \\n    from Employee as E1, Employee as E2 \\n    where E1.ManagerId = E2.Id and E1.Salary > E2.Salary",
                "codeTag": "Unknown"
            },
            {
                "id": 626226,
                "title": "easy-to-understand-faster-joins-mysql-solution",
                "content": "```\\nselect\\n   e1.name as Employee \\nfrom\\n   employee e1 \\n   join\\n      employee e2 \\nwhere\\n   e1.managerid = e2.id \\n   and e1.salary > e2.salary;\\n```\\n\\n**I hope that you\\'ve found the solution useful.**\\n*In that case, please do upvote and encourage me to on my quest to document all leetcode problems\\uD83D\\uDE03*\\nPS: Search for **mrmagician** tag in the discussion, if I have solved it, You will find it there\\uD83D\\uDE38",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect\\n   e1.name as Employee \\nfrom\\n   employee e1 \\n   join\\n      employee e2 \\nwhere\\n   e1.managerid = e2.id \\n   and e1.salary > e2.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53515,
                "title": "sharing-my-solution-simple-and-easy-to-understand",
                "content": "    SELECT employer.Name\\n        FROM  Employee employer JOIN Employee manager ON (employer.ManagerId = manager.Id )\\n          WHERE employer.Salary > manager.Salary ;",
                "solutionTags": [],
                "code": "    SELECT employer.Name\\n        FROM  Employee employer JOIN Employee manager ON (employer.ManagerId = manager.Id )\\n          WHERE employer.Salary > manager.Salary ;",
                "codeTag": "Unknown"
            },
            {
                "id": 727229,
                "title": "mysql-3-different-ways-exists-join-subquery",
                "content": "###  Exists\\n\\n```\\nselect name as Employee \\nfrom Employee e\\nwhere exists \\n(select 1 from Employee m\\nwhere e.managerid = m.id\\nand e.salary > m.salary)\\n```\\n\\n### Subquery\\n\\n```\\nselect name as Employee\\nfrom Employee e\\nwhere salary > (select salary from Employee m where e.managerid = m.id)\\n```\\n\\n### Join\\n\\n```\\nselect e.name as Employee\\nfrom Employee e\\ninner join Employee m\\non e.managerId = m.id\\nwhere e.salary > m.salary\\n```",
                "solutionTags": [],
                "code": "```\\nselect name as Employee \\nfrom Employee e\\nwhere exists \\n(select 1 from Employee m\\nwhere e.managerid = m.id\\nand e.salary > m.salary)\\n```\n```\\nselect name as Employee\\nfrom Employee e\\nwhere salary > (select salary from Employee m where e.managerid = m.id)\\n```\n```\\nselect e.name as Employee\\nfrom Employee e\\ninner join Employee m\\non e.managerId = m.id\\nwhere e.salary > m.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1757621,
                "title": "simple-3-lines-with-explanation-you-ll-love-it-guaranteed",
                "content": "If you have Learned something new please give it upvote;\\notherwise thank you for having a look \\uD83D\\uDE4F\\uD83C\\uDFFB\\n\\nHere we have to use SELF JOIN. We use self joins to access a table values from same table to use differently. In this case we want managerId as employeeId because manager is also an employee somewhere in table. that\\'s why e.managerId and searching for it in same table as m.id\\n\\nEx. Consider you are a manager of someone. Your name will be infront of someone.\\nIf you want to check your salary you won\\'t see your name in front of him. you\\'ll look for your name directly in Employee table because you know your Id. but in this case we don\\'t know who is the manager of which employee so that\\'s why we accessing the managerId by e.managerId ( e means employee) and looking for it in same table as m.id ( m means employee as well. for better understanding i\\'m using m as manager. )\\nI hope you have understood.\\n\\n```\\nSELECT e.name AS Employee FROM Employee e\\nJOIN Employee m ON e.managerId = m.id\\nWHERE e.salary > m.salary\\n```\\n\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT e.name AS Employee FROM Employee e\\nJOIN Employee m ON e.managerId = m.id\\nWHERE e.salary > m.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2478667,
                "title": "mysql-3-solutions-faster-than-83-88-where-join",
                "content": "\\uD83D\\uDE4B\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F Hello, here are my solutions to the problem.\\nPlease upvote to motivate me post future solutions. HAPPY CODING \\u2764\\uFE0F\\nAny suggestions and improvements are always welcome.\\nSolution 1: Very long, not good \\uD83E\\uDD26\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n\\u2705 Runtime: 1179 ms, faster than 6.80% of MySQL.\\n```\\nselect name as Employee  \\nfrom Employee e\\nwhere salary > (select salary from Employee where id=e.managerId)\\n```\\nSolution 2: Where clause \\uD83E\\uDD37\\uD83C\\uDFFB\\u200D\\u2640\\uFE0F\\n\\u2705 Runtime: 380 ms, faster than 74.73% of MySQL.\\n```\\nselect e1.name AS Employee\\nfrom Employee e1, Employee e2\\nwhere e1.managerId = e2.id\\nand e1.salary > e2.salary\\n```\\nSolution 3: Join clause \\uD83C\\uDFAF\\n\\u2705 Runtime: 349 ms, faster than 83.88% of MySQL.\\n```\\nselect e1.name AS Employee\\nfrom Employee e1\\njoin Employee e2\\non e1.managerId = e2.id\\nwhere e1.salary > e2.salary\\n```\\nIf you like the solutions, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Employee  \\nfrom Employee e\\nwhere salary > (select salary from Employee where id=e.managerId)\\n```\n```\\nselect e1.name AS Employee\\nfrom Employee e1, Employee e2\\nwhere e1.managerId = e2.id\\nand e1.salary > e2.salary\\n```\n```\\nselect e1.name AS Employee\\nfrom Employee e1\\njoin Employee e2\\non e1.managerId = e2.id\\nwhere e1.salary > e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3214765,
                "title": "181-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT e1.name AS Employee\\nFROM Employee e1, Employee e2\\nWHERE e1.managerId = e2.id AND e1.salary > e2.salary;\\n\\n```\\nThe query joins the Employee table with itself on the managerId column and compares the salary of each employee (e1) to their manager\\'s salary (e2). If the employee earns more than their manager, their name is returned in the output.\\n\\nNote that in this query, we\\'re assuming that employees without a manager have a NULL value in the managerId column, as opposed to \\'None\\' as in the sample data.",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT e1.name AS Employee\\nFROM Employee e1, Employee e2\\nWHERE e1.managerId = e2.id AND e1.salary > e2.salary;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3825038,
                "title": "100-easy-fast-clean-solution",
                "content": "\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT EMP.name AS Employee FROM Employee EMP,Employee MGR\\nWHERE EMP.managerId=MGR.id AND EMP.salary>MGR.salary\\n```\\nIF THIS WILL BE HELPFUL TO YOU, PLEASE UPVOTE!\\n\\n![5kej8w.jpg](https://assets.leetcode.com/users/images/16363f78-8fc7-447c-9147-121685eb0540_1690479071.295392.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle",
                    "Database"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT EMP.name AS Employee FROM Employee EMP,Employee MGR\\nWHERE EMP.managerId=MGR.id AND EMP.salary>MGR.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1538673,
                "title": "easy-solution",
                "content": "```\\nselect e1.Name as Employee \\nfrom Employee e1\\njoin Employee e2\\non e1.ManagerId = e2.Id\\nwhere e1.salary > e2.salary\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect e1.Name as Employee \\nfrom Employee e1\\njoin Employee e2\\non e1.ManagerId = e2.Id\\nwhere e1.salary > e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53525,
                "title": "sharing-my-solution",
                "content": "    Select emp.Name from\\n    Employee emp inner join Employee manager\\n    on emp.ManagerId = manager.Id\\n    where emp.Salary > manager.Salary",
                "solutionTags": [],
                "code": "    Select emp.Name from\\n    Employee emp inner join Employee manager\\n    on emp.ManagerId = manager.Id\\n    where emp.Salary > manager.Salary",
                "codeTag": "Unknown"
            },
            {
                "id": 2385818,
                "title": "3-different-ways-with-self-join-inner-join-subquery",
                "content": "```\\n# please upvote, if like my solutions :)\\n# 1.\\nSELECT e1.name as Employee from Employee e1, Employee e2\\nwhere e1.managerid = e2.id AND e1.salary > e2.salary;\\n\\n# 2.\\nSELECT e.name AS Employee \\nFROM Employee e JOIN Employee m\\nON e.managerid = m.id\\nwhere e.salary > m.salary;\\n\\n# 3.\\nSELECT e.name as Employee FROM Employee e\\nwhere e.salary > (SELECT salary from Employee where e.managerid = id);\\n# feel free to ask if have any query :)\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# please upvote, if like my solutions :)\\n# 1.\\nSELECT e1.name as Employee from Employee e1, Employee e2\\nwhere e1.managerid = e2.id AND e1.salary > e2.salary;\\n\\n# 2.\\nSELECT e.name AS Employee \\nFROM Employee e JOIN Employee m\\nON e.managerid = m.id\\nwhere e.salary > m.salary;\\n\\n# 3.\\nSELECT e.name as Employee FROM Employee e\\nwhere e.salary > (SELECT salary from Employee where e.managerid = id);\\n# feel free to ask if have any query :)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53521,
                "title": "an-easy-solution-to-this-question",
                "content": "select a.Name as Employee from Employee a join Employee b on a.ManagerId=b.Id where a.Salary>b.Salary;",
                "solutionTags": [],
                "code": "select a.Name as Employee from Employee a join Employee b on a.ManagerId=b.Id where a.Salary>b.Salary;",
                "codeTag": "Unknown"
            },
            {
                "id": 2996387,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect a.name as Employee \\nfrom Employee as a JOIN Employee as b\\non a.ManagerId = b.Id and a.Salary > b.Salary;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect a.name as Employee \\nfrom Employee as a JOIN Employee as b\\non a.ManagerId = b.Id and a.Salary > b.Salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1331907,
                "title": "my-sql-easy-solution-explained-in-detail",
                "content": "![image](https://assets.leetcode.com/users/images/b3d74c72-9baf-4863-a696-413cf2b0020d_1626034566.3849914.png)\\n\\n\\n* **Here as you can see only Joe and Henry have Managers, so Our Answer will include one of them**.\\n* **Now to compare we have to join Manager Id of this table with the ID of the same Table i.e. Self Join**.\\n* **After Self JOIN the table will look like this:**\\n\\n\\n\\n![image](https://assets.leetcode.com/users/images/e0f73f2b-ada4-451e-990b-c531bcd6d15e_1626034856.5827262.png)\\n\\n**Now, Simply Compare both the Salary column using the aliases e and m (in my case) given by you.**\\n**Rest you can understand from the code**\\n\\n```\\nSELECT e.Name AS Employee\\nFROM Employee e\\nJOIN Employee m ON e.ManagerId=m.Id\\nWHERE e.Salary>m.Salary\\n```\\n\\n*Feel free to comment for any clarification, Let me know if you like the explanation*\\n",
                "solutionTags": [],
                "code": "```\\nSELECT e.Name AS Employee\\nFROM Employee e\\nJOIN Employee m ON e.ManagerId=m.Id\\nWHERE e.Salary>m.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2420972,
                "title": "mysql-2-different-approach-easy-understanding-beginner-level-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome**.*\\n______________________\\n\\u2705 **MySQL Code :**\\n**Memory Usage**: 0B, less than 100.00% of MySQL online submissions for Employees Earning More Than Their Managers.\\n***Approach 1:***\\n```\\nSELECT a.name Employee FROM Employee a\\nLEFT JOIN Employee b\\nON  a.managerId = b.id  \\nWHERE a.salary > b.salary\\n```\\n__________________________________\\n***Approach 2***:\\n\\n```\\nSELECT e.name AS Employee\\nFROM Employee e, Employee m\\nWHERE e.ManagerId IS NOT NULL AND e.ManagerId=m.ID AND e.Salary >m.Salary\\n```\\n______________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT a.name Employee FROM Employee a\\nLEFT JOIN Employee b\\nON  a.managerId = b.id  \\nWHERE a.salary > b.salary\\n```\n```\\nSELECT e.name AS Employee\\nFROM Employee e, Employee m\\nWHERE e.ManagerId IS NOT NULL AND e.ManagerId=m.ID AND e.Salary >m.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3912820,
                "title": "solution-pandas",
                "content": "For this problem I am using the MERGE function, which is similar to the JOIN function in SQL. The goal is to do a self-join so that I can directly compare the salaries across the same row.\\n\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    df = employee.merge(right = employee, how = \\'left\\', left_on = \\'managerId\\', right_on = \\'id\\')\\n    emp = df[df[\\'salary_x\\'] > df[\\'salary_y\\']][\\'name_x\\']\\n\\n    return pd.DataFrame({\\'Employee\\': emp})\\n```\\n\\nAny feedbacks on how to improve/alternative solutions are greatly appreciated. Thank you for your time.",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    df = employee.merge(right = employee, how = \\'left\\', left_on = \\'managerId\\', right_on = \\'id\\')\\n    emp = df[df[\\'salary_x\\'] > df[\\'salary_y\\']][\\'name_x\\']\\n\\n    return pd.DataFrame({\\'Employee\\': emp})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1357019,
                "title": "runtime-faster-than-99-18-memory-usage-less-than-100-00-of-mysql-online-submissions",
                "content": "```\\nSELECT E1.Name AS Employee\\nFROM Employee AS E1,Employee AS E2\\nWHERE E1.ManagerId=E2.Id AND E1.Salary>E2.Salary;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT E1.Name AS Employee\\nFROM Employee AS E1,Employee AS E2\\nWHERE E1.ManagerId=E2.Id AND E1.Salary>E2.Salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1371783,
                "title": "select-faster-than-join-ms-sql-server-runtime-faster-89-48",
                "content": "When I use JOIN, it takes 1713 ms\\nBut with below method, it just takes 902 ms\\n\\n```\\nSELECT Name as Employee FROM Employee e\\nWHERE Salary > (\\n    Select Salary FROM Employee m WHERE m.Id = e.ManagerId\\n)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT Name as Employee FROM Employee e\\nWHERE Salary > (\\n    Select Salary FROM Employee m WHERE m.Id = e.ManagerId\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1071430,
                "title": "sql-simplest-easiest-solution",
                "content": "```\\nSELECT e1.Name as Employee \\nFrom Employee e1, Employee e2\\nWHERE e1.ManagerId = e2.Id and e1.Salary > e2.Salary\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT e1.Name as Employee \\nFrom Employee e1, Employee e2\\nWHERE e1.ManagerId = e2.Id and e1.Salary > e2.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1071385,
                "title": "two-extremely-simple-and-easy-to-understand-solutions",
                "content": "```\\nSELECT A.Name as Employee FROM Employee A inner join Employee B on A.ManagerId = B.Id\\nWHERE A.Salary > B.Salary\\n\\n\\nSELECT A.Name as Employee FROM Employee A, Employee B\\nWHERE A.ManagerId = B.Id and A.Salary > B.Salary",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT A.Name as Employee FROM Employee A inner join Employee B on A.ManagerId = B.Id\\nWHERE A.Salary > B.Salary\\n\\n\\nSELECT A.Name as Employee FROM Employee A, Employee B\\nWHERE A.ManagerId = B.Id and A.Salary > B.Salary",
                "codeTag": "Unknown"
            },
            {
                "id": 53501,
                "title": "two-straightforward-way-using-where-and-join",
                "content": "By the way, 'where' method took about 180 ms less time than 'join' method.\\n\\nWhere:\\n\\n\\n    select \\n    e1.Name\\n    from Employee e1, Employee e2\\n    where e1.ManagerId = e2.Id and e1.Salary > e2.Salary\\nJoin:\\n\\n    select \\n    e1.Name\\n    from Employee e1 join Employee e2\\n    on e1.ManagerId = e2.Id and e1.Salary>e2.Salary",
                "solutionTags": [],
                "code": "By the way, 'where' method took about 180 ms less time than 'join' method.\\n\\nWhere:\\n\\n\\n    select \\n    e1.Name\\n    from Employee e1, Employee e2\\n    where e1.ManagerId = e2.Id and e1.Salary > e2.Salary\\nJoin:\\n\\n    select \\n    e1.Name\\n    from Employee e1 join Employee e2\\n    on e1.ManagerId = e2.Id and e1.Salary>e2.Salary",
                "codeTag": "Unknown"
            },
            {
                "id": 4041484,
                "title": "pandas-solution",
                "content": "# Approach\\nUse map function to map the `managerId` to their respective salary from the same DataFrame `employee` and compare **each employee\\'s salary** to **their manager\\'s salary**.\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    result_df = employee[employee[\\'salary\\'] > employee[\\'managerId\\'].map(employee.set_index(\\'id\\')[\\'salary\\'])]\\n    result_df = result_df[[\\'name\\']].rename(columns={\\'name\\': \\'Employee\\'})\\n    return result_df\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    result_df = employee[employee[\\'salary\\'] > employee[\\'managerId\\'].map(employee.set_index(\\'id\\')[\\'salary\\'])]\\n    result_df = result_df[[\\'name\\']].rename(columns={\\'name\\': \\'Employee\\'})\\n    return result_df\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3947552,
                "title": "pandas-sql-3-lines-with-merge",
                "content": "# Intuition\\nIn pandas, you need to self-merge `managerId -> id`, then filter based on two salaries and rename.\\n\\n\\n\\n# Code\\n\\n```Python []\\nimport pandas as pd\\n\\ndef find_employees(df: pd.DataFrame) -> pd.DataFrame:\\n  v = df.merge(df, how=\\'inner\\', left_on=\"managerId\", right_on=\"id\")\\n  v = v[v[\"salary_x\"] > v[\"salary_y\"]][[\"name_x\"]]\\n  return v.rename(columns={\"name_x\": \"Employee\"})\\n```\\n```SQL []\\nSELECT e.Name as Employee\\nFROM EMPLOYEE e , EMPLOYEE m\\nWHERE e.ManagerId = m.id AND e.Salary > m.Salary\\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```Python []\\nimport pandas as pd\\n\\ndef find_employees(df: pd.DataFrame) -> pd.DataFrame:\\n  v = df.merge(df, how=\\'inner\\', left_on=\"managerId\", right_on=\"id\")\\n  v = v[v[\"salary_x\"] > v[\"salary_y\"]][[\"name_x\"]]\\n  return v.rename(columns={\"name_x\": \"Employee\"})\\n```\n```SQL []\\nSELECT e.Name as Employee\\nFROM EMPLOYEE e , EMPLOYEE m\\nWHERE e.ManagerId = m.id AND e.Salary > m.Salary\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2875221,
                "title": "mysql-simple-sub-query",
                "content": "\\n# Code\\n```\\nSELECT name as Employee\\nFROM Employee\\nWHERE salary > (SELECT salary\\n                FROM Employee as M\\n                WHERE id = Employee.ManagerId);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name as Employee\\nFROM Employee\\nWHERE salary > (SELECT salary\\n                FROM Employee as M\\n                WHERE id = Employee.ManagerId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2682690,
                "title": "easy-solution-left-right-inner-any-join",
                "content": "We can do Left / Right / INNER or Cross join just change left to any one\\n```\\nSELECT e1.name AS \\'Employee\\'\\nFROM Employee e1\\nLEFT JOIN\\nEmployee e2\\nON e1.managerId = e2.id\\nWHERE e1.salary > e2.salary\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT e1.name AS \\'Employee\\'\\nFROM Employee e1\\nLEFT JOIN\\nEmployee e2\\nON e1.managerId = e2.id\\nWHERE e1.salary > e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2519075,
                "title": "using-self-join-mysql-easy",
                "content": "```\\n# Write your MySQL query statement below\\n\\n# Using self join\\nselect e1.name as Employee \\nfrom employee as e1,employee as e2 \\nwhere e1.managerid = e2.id and e1.salary > e2.salary;\\n\\n/*\\n\\tif(you like)\\n\\t\\tplease upvote;\\n*/\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\n# Using self join\\nselect e1.name as Employee \\nfrom employee as e1,employee as e2 \\nwhere e1.managerid = e2.id and e1.salary > e2.salary;\\n\\n/*\\n\\tif(you like)\\n\\t\\tplease upvote;\\n*/\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1341040,
                "title": "easy-clear-solution",
                "content": "\\n     SELECT employee.name as employee\\n     FROM employee as employee,  employee as manager\\n     WHERE employee.managerid = manager.id and employee.salary > manager.salary",
                "solutionTags": [],
                "code": "\\n     SELECT employee.name as employee\\n     FROM employee as employee,  employee as manager\\n     WHERE employee.managerid = manager.id and employee.salary > manager.salary",
                "codeTag": "Unknown"
            },
            {
                "id": 1036900,
                "title": "all-db-simple-solution",
                "content": "```\\nselect em.Name Employee\\nfrom Employee em\\n    join Employee man on em.ManagerId = man.Id\\nwhere em.Salary > man.Salary\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server",
                    "Oracle"
                ],
                "code": "```\\nselect em.Name Employee\\nfrom Employee em\\n    join Employee man on em.ManagerId = man.Id\\nwhere em.Salary > man.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 180896,
                "title": "mysql-answer",
                "content": "SELECT T1.Name AS Employee\\nFROM Employee T1\\nJOIN Employee T2\\nON T1.ManagerId=T2.Id\\nAND T1.Salary>T2.Salary",
                "solutionTags": [],
                "code": "SELECT T1.Name AS Employee\\nFROM Employee T1\\nJOIN Employee T2\\nON T1.ManagerId=T2.Id\\nAND T1.Salary>T2.Salary",
                "codeTag": "Unknown"
            },
            {
                "id": 2405891,
                "title": "3-different-methods",
                "content": "Do Upvote, if it Helped :)\\n```\\n# Write your MySQL query statement below\\n\\n#1:\\nselect emp.name as Employee from Employee emp, Employee man\\nwhere emp.managerid = man.id and emp.salary > man.salary;\\n\\n#2:\\nselect emp.name as Employee\\nfrom Employee emp join Employee man\\non emp.managerid = man.id and emp.salary > man.salary;\\n\\n#3:\\nselect emp.name as Employee from Employee emp\\nwhere emp.salary > (select salary from Employee where emp.managerid = id)\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\n\\n#1:\\nselect emp.name as Employee from Employee emp, Employee man\\nwhere emp.managerid = man.id and emp.salary > man.salary;\\n\\n#2:\\nselect emp.name as Employee\\nfrom Employee emp join Employee man\\non emp.managerid = man.id and emp.salary > man.salary;\\n\\n#3:\\nselect emp.name as Employee from Employee emp\\nwhere emp.salary > (select salary from Employee where emp.managerid = id)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1389634,
                "title": "without-join",
                "content": "```\\nSELECT Name as Employee FROM Employee e\\nWHERE Salary > (\\n    Select Salary FROM Employee WHERE Employee.Id = e.ManagerId\\n)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Name as Employee FROM Employee e\\nWHERE Salary > (\\n    Select Salary FROM Employee WHERE Employee.Id = e.ManagerId\\n)",
                "codeTag": "Unknown"
            },
            {
                "id": 1308740,
                "title": "faster-easy",
                "content": "***Do upvote if you like the solution to keep me motivated*** \\uD83D\\uDE0A\\u270C\\n```\\nSelect e1.Name AS Employee\\nFROM employee AS e1 JOIN employee AS e2\\nON e1.ManagerId = e2.Id\\nWHERE e1.Salary > e2.Salary\\n```",
                "solutionTags": [],
                "code": "```\\nSelect e1.Name AS Employee\\nFROM employee AS e1 JOIN employee AS e2\\nON e1.ManagerId = e2.Id\\nWHERE e1.Salary > e2.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 475902,
                "title": "simple-t-sql-solution",
                "content": "```\\nSELECT Name Employee\\nFROM Employee\\nWHERE Employee.Salary > (select Salary from Employee E where E.id = Employee.ManagerId)\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT Name Employee\\nFROM Employee\\nWHERE Employee.Salary > (select Salary from Employee E where E.id = Employee.ManagerId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039192,
                "title": "setting-up-a-pandas-dataframe-object-and-extracting-values-to-perform-certain-comparison",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMy intuition was to first look at the function that was provided, especially its parameters and return value. Afterwards, I had to think about how to pass the test case, so I went ahead and looked at the example of the test case being passed. From that, I was able to get an intuition of how to write the algorithm and perform the logic required. \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nStep 1: Define the inputs and outputs of this function, including its type and data structure. \\n\\nStep 2: Think of the logic involved in passing the test case. In this case, the logic was to extract certain values from a data frame object, use it to perform a comparison, and then return another dataframe object.\\n \\nStep 3: To initialise an empty dataframe object to store the output of the function in the dataframe object. I had to check the pandas documentation on how to initialise a DF object \\n\\nStep 4: I needed to iterate through the rows of the input dataframe object, and I had to google the various ways to do so. I ultimately chose to use the Df.iterrows() method. \\n\\nStep 5: I had to define the extraction logic. For each of the rows in the input dataframe, I needed to extract the values that will be used for the comparison, and this case, that was the name, salary and managerId. \\n\\nStep 6: To perform a conditional query to look for the row where the managerId matches the id of the row. I think this was the hardest portion as the syntax to perform this logic is quite complicated. \\n\\nStep 7: I had to extract the manager\\'s salary if there was a match between the row id and the managerId so I used a conditional if statement. If there was a match, we extract the manager salary using .iloc method. (The .iloc method selects data from a DataFrame by integer-based indexing, allowing you to access specific rows and columns using their integer positions.) So the .iloc[0] extracts the first row where there is a match. The .iloc outputs a series of the data that contains the first row. Then, using [\\'salary\\'] to further access a specific column, \\'salary\\', from the Series obtained in the previous step.\\nStep 8: Perform the comparison logic, if the employee salary is greater than the manager\\'s salary, then we need to append the series into the empty dataframe using the _.append method. \\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n  \\'\\'\\'\\n  @param employee: pd.DataFrame \\n  @return: pd.DataFrame\\n  \\'\\'\\'\\n\\n  # Initialisation of empty DF object \\n  resulting_dataframe = pd.DataFrame(columns=[\"Employee\"]) \\n\\n  # Iterate through the rows of the input DF object \\n  for index, row in employee.iterrows():\\n    employee_name = row[\\'name\\']\\n    employee_salary = row[\\'salary\\']\\n    employee_managerId = row[\\'managerId\\']\\n\\n    # Extracting the manager\\'s salary based on managerID \\n    # Perform a conditional query to find the row whose id corresponds to the managerId\\n    # If a match is found, we extract the salary of the manager \\n    \\n    manager_row = employee[employee[\"id\"] == employee_managerId] \\n    manager_salary = None # To handle the event when there is not match for managerId\\n\\n    # Check if there is a match between managerId and id \\n    if not manager_row.empty: \\n      # Extract the salary of the manager \\n      manager_salary = manager_row.iloc[0][\\'salary\\']\\n\\n    # Perform the comparison logic \\n    if manager_salary is not None and employee_salary > manager_salary: \\n      # append the name of the employee whose salary is higher than the manager along with a fixed column name as \"Employee\"\\n      resulting_dataframe = resulting_dataframe._append({\\'Employee\\': employee_name}, ignore_index = True)\\n  return resulting_dataframe \\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n  \\'\\'\\'\\n  @param employee: pd.DataFrame \\n  @return: pd.DataFrame\\n  \\'\\'\\'\\n\\n  # Initialisation of empty DF object \\n  resulting_dataframe = pd.DataFrame(columns=[\"Employee\"]) \\n\\n  # Iterate through the rows of the input DF object \\n  for index, row in employee.iterrows():\\n    employee_name = row[\\'name\\']\\n    employee_salary = row[\\'salary\\']\\n    employee_managerId = row[\\'managerId\\']\\n\\n    # Extracting the manager\\'s salary based on managerID \\n    # Perform a conditional query to find the row whose id corresponds to the managerId\\n    # If a match is found, we extract the salary of the manager \\n    \\n    manager_row = employee[employee[\"id\"] == employee_managerId] \\n    manager_salary = None # To handle the event when there is not match for managerId\\n\\n    # Check if there is a match between managerId and id \\n    if not manager_row.empty: \\n      # Extract the salary of the manager \\n      manager_salary = manager_row.iloc[0][\\'salary\\']\\n\\n    # Perform the comparison logic \\n    if manager_salary is not None and employee_salary > manager_salary: \\n      # append the name of the employee whose salary is higher than the manager along with a fixed column name as \"Employee\"\\n      resulting_dataframe = resulting_dataframe._append({\\'Employee\\': employee_name}, ignore_index = True)\\n  return resulting_dataframe \\n\\n\\n\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3934397,
                "title": "simple-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT NAME Employee FROM EMPLOYEE E WHERE SALARY > (SELECT SALARY FROM EMPLOYEE WHERE ID=E.MANAGERID);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT NAME Employee FROM EMPLOYEE E WHERE SALARY > (SELECT SALARY FROM EMPLOYEE WHERE ID=E.MANAGERID);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3557941,
                "title": "simple-join-solution-91-efficient",
                "content": "# Intuition & Approach\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSince we need to find all employees who\\'s salary s greater than their manager, we need to perform join (self inner join with same table) to get managers for a particular employee and compare their salaries.\\n\\n![Screenshot 2023-05-24 123836.png](https://assets.leetcode.com/users/images/c1be4f2e-0843-4efb-a143-9e6971a26186_1684912182.2375507.png)\\n\\n## Please upvote if you like the approach\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nSELECT e.name AS Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.managerId = m.id\\nWHERE e.salary > m.salary\\n```\\n\\n## Please upvote if you like the approach\\n![Upvote please - CAT.jpg](https://assets.leetcode.com/users/images/d806c007-30d1-4bfa-92e4-06c16d1bb066_1684912285.3618336.jpeg)\\n",
                "solutionTags": [
                    "MS SQL Server",
                    "Database"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT e.name AS Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.managerId = m.id\\nWHERE e.salary > m.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3525484,
                "title": "mysql-solution-for-employees-earning-more-than-their-managers-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe query aims to identify employees who earn more than their managers, indicating a higher salary level compared to their superiors.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The query performs a self-join on the Employee table by joining it with itself using the inner join clause.\\n2. It assigns aliases e and m to the two instances of the Employee table, representing the employee and their respective manager.\\n3. The on condition specifies that the ManagerId of an employee (e.ManagerId) should match the Id of their manager (m.Id).\\n4. The where clause filters the results based on the condition e.Salary > m.Salary, ensuring that only employees with higher salaries than their managers are selected.\\n5. The select statement select e.Name as Employee retrieves the names of the qualifying employees from the Employee table.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the SQL query depends on the size of the Employee table and the efficiency of the database engine\\'s query optimization and execution. Assuming proper indexing and optimization, the time complexity can vary but is typically in the order of O(n log n) or O(n), where n is the number of rows in the Employee table.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of the SQL query is determined by the memory required to store the result set, which in this case is the names of qualifying employees. The space complexity is proportional to the number of rows returned by the query.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect e.Name as Employee from Employee as e inner join Employee as m \\non e.ManagerId = m.Id where e.Salary > m.Salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect e.Name as Employee from Employee as e inner join Employee as m \\non e.ManagerId = m.Id where e.Salary > m.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2619787,
                "title": "simple-sql",
                "content": "```\\nSELECT E.name as Employee\\nfrom Employee E, Employee M\\nwhere E.managerId = M.id AND E.salary > M.salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT E.name as Employee\\nfrom Employee E, Employee M\\nwhere E.managerId = M.id AND E.salary > M.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2558765,
                "title": "simple-self-join-easy-to-understand",
                "content": "We simply apply the join concept on the table with itself ( self join)\\n```\\n# Write your MySQL query statement below\\nselect e1.name Employee\\nfrom employee as e1\\njoin employee as e2\\non e1.managerId = e2.id\\nwhere e1.salary > e2.salary\\n```\\n\\uD83D\\uDE4FPlease UpVote\\uD83D\\uDE4F\\n",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect e1.name Employee\\nfrom employee as e1\\njoin employee as e2\\non e1.managerId = e2.id\\nwhere e1.salary > e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2519870,
                "title": "181-employees-earning-more-than-their-managers",
                "content": "```\\nSELECT b.name AS Employee  FROM Employee as a, Employee as b\\nWHERE a.id = b.managerId and a.salary < b.salary\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT b.name AS Employee  FROM Employee as a, Employee as b\\nWHERE a.id = b.managerId and a.salary < b.salary\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2477349,
                "title": "mysql-query-easy-fast-and-complete-explanation",
                "content": "This is an example of Table aliases Query\\n\\nIn SQL SELECT we first need to give the names of COLUMN which we need in output and use \"as\" to change it\\'s output name to \"Employee\"\\nAnd then FROM -- We are creating 2 aliases of given table, \"E1\" and \"E2\"\\nFinally WHERE -- We are checking if \"managerId\" is same as \"id\" of employe and for that employee salary from E1 should be more than E2\\n\\t\\n\\tSELECT E1.name as Employee\\n\\tFROM Employee AS E1, Employee AS E2\\n\\tWHERE E1.managerId = E2.id and E1.salary > E2.salary",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "This is an example of Table aliases Query\\n\\nIn SQL SELECT we first need to give the names of COLUMN which we need in output and use \"as\" to change it\\'s output name to \"Employee\"\\nAnd then FROM -- We are creating 2 aliases of given table, \"E1\" and \"E2\"\\nFinally WHERE -- We are checking if \"managerId\" is same as \"id\" of employe and for that employee salary from E1 should be more than E2\\n\\t\\n\\tSELECT E1.name as Employee\\n\\tFROM Employee AS E1, Employee AS E2\\n\\tWHERE E1.managerId = E2.id and E1.salary > E2.salary",
                "codeTag": "Unknown"
            },
            {
                "id": 1936691,
                "title": "simple-mysql-solution",
                "content": "```\\nselect emp.name as Employee from Employee emp inner join Employee\\nmanager on emp.managerId = manager.id where emp.salary > manager.salary;\\n```",
                "solutionTags": [],
                "code": "```\\nselect emp.name as Employee from Employee emp inner join Employee\\nmanager on emp.managerId = manager.id where emp.salary > manager.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1526112,
                "title": "simple-solution-using-self-join",
                "content": "```\\nselect A.Name as Employee from Employee A , Employee B where A.ManagerId = B.Id and A.Salary > B.Salary;\\n```\\n\\n upvote if you find it helpful",
                "solutionTags": [],
                "code": "```\\nselect A.Name as Employee from Employee A , Employee B where A.ManagerId = B.Id and A.Salary > B.Salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1152268,
                "title": "easy-with-joins",
                "content": "```\\nselect e.Name as \"Employee\" from Employee e, Employee m\\nwhere e.ManagerId = m.Id and \\ne.Salary > m.Salary\\n```",
                "solutionTags": [],
                "code": "```\\nselect e.Name as \"Employee\" from Employee e, Employee m\\nwhere e.ManagerId = m.Id and \\ne.Salary > m.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1137896,
                "title": "self-join-using-inner-join",
                "content": "```\\nselect emp.name as Employee\\nfrom Employee emp\\ninner join \\nEmployee man\\non emp.ManagerId = man.Id and  emp.Salary > man.Salary ;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect emp.name as Employee\\nfrom Employee emp\\ninner join \\nEmployee man\\non emp.ManagerId = man.Id and  emp.Salary > man.Salary ;",
                "codeTag": "Unknown"
            },
            {
                "id": 941196,
                "title": "easy-to-understand-query",
                "content": "```\\nselect E.name as Employee from Employee as E, Employee as M where E.salary > M.salary and E.ManagerId = M.Id;\\n```",
                "solutionTags": [],
                "code": "```\\nselect E.name as Employee from Employee as E, Employee as M where E.salary > M.salary and E.ManagerId = M.Id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 406403,
                "title": "faster-than-96-using-subquery",
                "content": "```\\nselect Name as \\'Employee\\'\\nfrom Employee \\ninner join\\n    (select distinct E1.Id AS \\'ManId\\', E1.Salary AS \\'ManSalary\\'\\n     from Employee E1 \\n     inner join Employee E2 \\n     on E1.Id = E2.ManagerId) Manager \\n     on Employee.ManagerId = Manager.ManId\\nwhere Employee.Salary > Manager.ManSalary\\n```\\n\\nI guess most people use the way shown in the example where it requires the system to access all the information twice. I did a subquery which was much faster (90th percentile or greater every time). I honestly am just learning so I did all this crazy stuff which happened to work better than the accepted answer",
                "solutionTags": [],
                "code": "```\\nselect Name as \\'Employee\\'\\nfrom Employee \\ninner join\\n    (select distinct E1.Id AS \\'ManId\\', E1.Salary AS \\'ManSalary\\'\\n     from Employee E1 \\n     inner join Employee E2 \\n     on E1.Id = E2.ManagerId) Manager \\n     on Employee.ManagerId = Manager.ManId\\nwhere Employee.Salary > Manager.ManSalary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 53492,
                "title": "the-new-expected-output",
                "content": "select t.Name as Employee from Employee t,Employee k where t.ManagerId = k.Id and t.Salary > k.Salary;",
                "solutionTags": [],
                "code": "select t.Name as Employee from Employee t,Employee k where t.ManagerId = k.Id and t.Salary > k.Salary;",
                "codeTag": "Unknown"
            },
            {
                "id": 4072478,
                "title": "2-ways-to-write-the-same-query-easy-15s-explanation",
                "content": "\\n\\n# Approach\\nTreat e as the employees, and m as the managers. Then read the query.\\nPlain and simple to understand.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: Beats 97% \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Beats 100%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect e.name as Employee\\nfrom employee e inner join employee m\\non e.managerId = m.id\\nwhere e.salary > m.salary;\\n```\\n> We can even replace the inner join with a left join and it will work since it is the same table.\\n> Alternate way : Notice that we have not used ON here for joining. This will still give the correct output.\\n```\\nselect e.name as Employee\\nfrom employee e join employee m\\nwhere e.managerId = m.id and e.salary > m.salary;\\n```\\n*Please upvote if you learnt something new or this helped you.*\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nselect e.name as Employee\\nfrom employee e inner join employee m\\non e.managerId = m.id\\nwhere e.salary > m.salary;\\n```\n```\\nselect e.name as Employee\\nfrom employee e join employee m\\nwhere e.managerId = m.id and e.salary > m.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038994,
                "title": "easy-solution-both-inner-join-and-left-join",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe have to join same table. Inner or Left both join can be used. But Inner join will give better reult because we donot need null values to join.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Use Inner join and join two table using mangerId and id.\\n2. We choose E1.mangerId = E2.id because manager is also a employee.for ex:- Employe 1 has managerid = 3 and that is equivalent to employee id = 3. So, in short Employee 1 manager is Employee 3. SO, we must use managerId = id.\\n3. Now, Filter the values where employee salary is greater than manager salary.\\n4. select the name column and give it alias as \"Employee\". \\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n###########LEFT JOIN######################\\n# select E1.name as\"Employee\"\\n# from Employee E1 \\n# LEFT JOIN Employee E2 \\n# on E1.managerId = E2.id\\n# where E1.salary > E2.salary; \\n\\n###########INNER JOIN######################\\n# select E1.name as\"Employee\"\\n# from Employee E1 \\n# INNER JOIN Employee E2 \\n# on E1.managerId = E2.id\\n# where E1.salary > E2.salary; \\n\\n\\nselect name as Employee from Employee e \\nwhere salary > (select salary from Employee where id=e.managerId);\\n```\\n\\n![](https://assets.leetcode.com/users/images/541b8e36-5eb3-4283-b953-6067480389c3_1675058399.1742556.jpeg)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n###########LEFT JOIN######################\\n# select E1.name as\"Employee\"\\n# from Employee E1 \\n# LEFT JOIN Employee E2 \\n# on E1.managerId = E2.id\\n# where E1.salary > E2.salary; \\n\\n###########INNER JOIN######################\\n# select E1.name as\"Employee\"\\n# from Employee E1 \\n# INNER JOIN Employee E2 \\n# on E1.managerId = E2.id\\n# where E1.salary > E2.salary; \\n\\n\\nselect name as Employee from Employee e \\nwhere salary > (select salary from Employee where id=e.managerId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3919415,
                "title": "pandas-oneliner-self-join",
                "content": "# Intuition\\nSimple self-join. What is worth noticing is way to write code to make it oneliner - `.query` instead of `.loc`, and `.to_frame`. Remmeber that default suffixes are `_x` for the first dataframe and `_y` for second.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    return employee.merge(employee, left_on=\\'managerId\\', right_on=\\'id\\').query(\"salary_x > salary_y\")[\\'name_x\\'].to_frame(\\'Employee\\')\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    return employee.merge(employee, left_on=\\'managerId\\', right_on=\\'id\\').query(\"salary_x > salary_y\")[\\'name_x\\'].to_frame(\\'Employee\\')\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3718201,
                "title": "easy-solution",
                "content": "\\n# Code\\n```\\nSELECT e2.name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\nWHERE e1.salary < e2.salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT e2.name as Employee\\nFROM employee e1\\nINNER JOIN employee e2 ON e1.id = e2.managerID\\nWHERE e1.salary < e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486332,
                "title": "simple-inner-join-solution",
                "content": "# Code\\n```\\nSELECT a.name AS Employee\\nFROM Employee a\\nINNER JOIN Employee b\\nON a.managerId = b.id\\nAND a.salary > b.salary\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT a.name AS Employee\\nFROM Employee a\\nINNER JOIN Employee b\\nON a.managerId = b.id\\nAND a.salary > b.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3482935,
                "title": "comparing-data-within-the-the-table",
                "content": "# Intuition\\nIt seemed interesting since the data was being compared within itself. I first tried looking up syntax to create a duplicate column or table. I eneded up refering to the table itself at the end under a new name.\\n\\n# Approach\\nI initially tried to create a duplicate column or a brand new table to join. When I wasn\\'t able to do that, I tried an inner join but had trouble with that. I opted to using two different selects. The first to pull the information and the second to pull the data that would be compared.\\n\\n# Code\\n```\\nSELECT name AS Employee\\nFROM Employee Table2\\nWHERE salary > (SELECT salary \\n                FROM Employee \\n                WHERE id = Table2.managerId)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Employee\\nFROM Employee Table2\\nWHERE salary > (SELECT salary \\n                FROM Employee \\n                WHERE id = Table2.managerId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3393821,
                "title": "subquery-filtering",
                "content": "# Intuition\\nusing a subquery to filter the employee table to only include employees whose salary is greater than their manager\\'s salary.\\n# Approach\\nThe condition checks if the employee\\'s salary is greater than the salary of their manager. It uses a subquery to retrieve the manager\\'s salary by selecting the salary from the employee table where the managerId matches the id of the current employee (i.e., e.managerId). This subquery is executed for each row in the employee table that meets the second condition.\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name as Employee from employee as e\\nwhere e.salary>(select salary from employee where e.managerId=id)\\nand e.managerId is not null;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name as Employee from employee as e\\nwhere e.salary>(select salary from employee where e.managerId=id)\\nand e.managerId is not null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3364956,
                "title": "simple-mysql-solution-very-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name as Employee from Employee e where salary > (select salary from Employee where id=e.managerId);\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name as Employee from Employee e where salary > (select salary from Employee where id=e.managerId);\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3218241,
                "title": "mysql-easy-approach",
                "content": "Here is my MYSQL code for this problem.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect emp1.name as Employee from Employee as emp inner join Employee emp1 on emp.id=emp1.managerID where emp.salary<emp1.salary;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect emp1.name as Employee from Employee as emp inner join Employee emp1 on emp.id=emp1.managerID where emp.salary<emp1.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2836135,
                "title": "super-simple-oracle-self-join-solution",
                "content": "HELLO EVERYONE \\n\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT W.NAME \"Employee\"\\nFROM EMPLOYEE W JOIN EMPLOYEE M\\nON (W.MANAGERID = M.ID);\\nWHERE W.SALARY > M.SALARY;\\n```\\n\\n\\nTHIS IS MY SOLUTION: \\nas you can see i used self join so just used the salary from the manager table and compared it with salary from the worker table. to better visualize self join here is a screenshot\\n\\n![image](https://assets.leetcode.com/users/images/b4006808-db81-4e79-9918-2e7bc992b964_1669035977.7290778.png)\\n\\nhope this answer helps you in your learning journey",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT W.NAME \"Employee\"\\nFROM EMPLOYEE W JOIN EMPLOYEE M\\nON (W.MANAGERID = M.ID);\\nWHERE W.SALARY > M.SALARY;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2696583,
                "title": "sql-two-ways-with-explanation-easy-to-understand",
                "content": "I just found this Blog and Github repository with solutions to Leetcode problems.\\nhttps://leet-codes.blogspot.com\\nIt is very useful, and I just wanted to share it with you.\\nNote: You can bookmark it as a resource, and for sliding window approach.\\n<br>\\n\\n```\\n# Write your MySQL query statement below\\nselect\\n    name as Employee\\nfrom\\n    Employee a\\nwhere\\n    a.Salary > (\\n        select\\n            b.Salary\\n        from\\n            Employee b\\n        where\\n            a.ManagerId = b.Id\\n    );\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect\\n    name as Employee\\nfrom\\n    Employee a\\nwhere\\n    a.Salary > (\\n        select\\n            b.Salary\\n        from\\n            Employee b\\n        where\\n            a.ManagerId = b.Id\\n    );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2685446,
                "title": "oracle-so-easyyyyy",
                "content": "```\\nselect name as Employee from Employee\\nwhere Employee.salary > (select AA.salary from Employee AA where AA.id = Employee.managerId) and Employee.managerId is not null\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect name as Employee from Employee\\nwhere Employee.salary > (select AA.salary from Employee AA where AA.id = Employee.managerId) and Employee.managerId is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2676809,
                "title": "two-easy-solution",
                "content": "**Two solutions**\\n1. Using normal select method\\n\\t```\\n\\t\\tSELECT name AS Employee \\n\\t\\tFROM Employee AS T \\n\\t\\tWHERE salary > (\\n\\t\\t\\t\\tSELECT salary \\n\\t\\t\\t\\tFROM Employee \\n\\t\\t\\t\\tWHERE id = T.managerId\\n\\t\\t);\\n\\t```\\n2. Using INNER JOIN\\n```\\n\\nSELECT E1.name as Employee\\n\\t\\tFROM Employee E1 \\n    INNER JOIN\\n\\t\\tEmployee E2\\n    ON\\n\\t\\tE1.managerId = E2.id\\n\\t\\tWHERE E1.salary >E2.salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\t\\tSELECT name AS Employee \\n\\t\\tFROM Employee AS T \\n\\t\\tWHERE salary > (\\n\\t\\t\\t\\tSELECT salary \\n\\t\\t\\t\\tFROM Employee \\n\\t\\t\\t\\tWHERE id = T.managerId\\n\\t\\t);\\n\\t```\n```\\n\\nSELECT E1.name as Employee\\n\\t\\tFROM Employee E1 \\n    INNER JOIN\\n\\t\\tEmployee E2\\n    ON\\n\\t\\tE1.managerId = E2.id\\n\\t\\tWHERE E1.salary >E2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2661557,
                "title": "self-join-join-the-employee-table-with-itself-using-another-alias",
                "content": "```\\n# Write your MySQL query statement below\\nselect e.name as Employee\\nfrom Employee e inner join Employee m\\n    on m.id = e.managerId\\nwhere e.salary > m.salary;\\n```\\n",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name as Employee\\nfrom Employee e inner join Employee m\\n    on m.id = e.managerId\\nwhere e.salary > m.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2468006,
                "title": "mysql-solution-easy-understanding-96-faster-100-less-space",
                "content": "```\\n\\nSELECT a.name AS \"Employee\"\\nFROM Employee a, Employee b\\nWHERE a.managerId = b.id\\nand a.salary > b.salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nSELECT a.name AS \"Employee\"\\nFROM Employee a, Employee b\\nWHERE a.managerId = b.id\\nand a.salary > b.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2319333,
                "title": "mysql-without-join",
                "content": "````\\nselect e1.Name as Employee from Employee e1 \\nwhere e1.managerId is not null and \\ne1.salary > (select e2.salary from Employee e2 where e2.id=e1.managerId)\\n````",
                "solutionTags": [],
                "code": "````\\nselect e1.Name as Employee from Employee e1 \\nwhere e1.managerId is not null and \\ne1.salary > (select e2.salary from Employee e2 where e2.id=e1.managerId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2206687,
                "title": "mysql-easy-solution",
                "content": "```\\n# Write your MySQL query statement below\\nselect \\na.name as Employee \\nfrom \\nemployee a\\nwhere a.salary > (select salary from employee where id = a.managerid)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect \\na.name as Employee \\nfrom \\nemployee a\\nwhere a.salary > (select salary from employee where id = a.managerid)",
                "codeTag": "Unknown"
            },
            {
                "id": 2190237,
                "title": "sql-query-with-join-and-without-join",
                "content": "Simple SQL query \\n\\n```\\n select e.name as Employee from Employee e where e.salary>(select m.salary from Employee m where m.id=e.managerId) \\n```\\n\\nWhen we use join \\n```\\nselect a.name as Employee from Employee a Inner join Employee b on a.managerId=b.id where a.salary>b.salary\\n```",
                "solutionTags": [],
                "code": "```\\n select e.name as Employee from Employee e where e.salary>(select m.salary from Employee m where m.id=e.managerId) \\n```\n```\\nselect a.name as Employee from Employee a Inner join Employee b on a.managerId=b.id where a.salary>b.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2120533,
                "title": "mssql-mysql",
                "content": "Runtime: 324 ms, faster than 89.68% of MySQL online submissions for Employees Earning More Than Their Managers.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Employees Earning More Than Their Managers.\\n```\\n# Write your MySQL query statement below\\nselect A.name Employee\\nfrom Employee A left join Employee B on A.managerId=B.id\\nwhere A.salary > B.salary\\n```\\n\\n```\\n/* Write your T-SQL query statement below */\\nselect A.name Employee\\nfrom Employee A left join Employee B on A.managerId=B.id\\nwhere A.salary > B.salary\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect A.name Employee\\nfrom Employee A left join Employee B on A.managerId=B.id\\nwhere A.salary > B.salary\\n```\n```\\n/* Write your T-SQL query statement below */\\nselect A.name Employee\\nfrom Employee A left join Employee B on A.managerId=B.id\\nwhere A.salary > B.salary\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2042627,
                "title": "a-self-join",
                "content": "```\\nselect \\n    e1.name as employee\\nfrom \\n    employee as e1 \\njoin \\n    employee as e2 \\non \\n    e1.managerId = e2.id \\nwhere \\n    e1.salary > e2.salary \\n```\\nplease lmk if you like and agree ! thanks ! :D \\n",
                "solutionTags": [],
                "code": "```\\nselect \\n    e1.name as employee\\nfrom \\n    employee as e1 \\njoin \\n    employee as e2 \\non \\n    e1.managerId = e2.id \\nwhere \\n    e1.salary > e2.salary \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2028513,
                "title": "sql-solution",
                "content": "```\\nSELECT name as Employee\\nFROM Employee E\\nWHERE EXISTS (\\n    SELECT name FROM Employee\\n    WHERE id = E.managerId AND salary < E.salary\\n);\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name as Employee\\nFROM Employee E\\nWHERE EXISTS (\\n    SELECT name FROM Employee\\n    WHERE id = E.managerId AND salary < E.salary\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1803823,
                "title": "easiest-mysql-self-join-solution-181-employees-earning-more-than-their-managers",
                "content": "```\\nselect e1.name  AS Employee\\nfrom Employee e1 join Employee e2\\nON e1.managerId = e2.Id\\nwhere e1.salary > e2.salary;\\n\\n\\n#pls upvote if you find solution easy ... Thanks..!!\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect e1.name  AS Employee\\nfrom Employee e1 join Employee e2\\nON e1.managerId = e2.Id\\nwhere e1.salary > e2.salary;\\n\\n\\n#pls upvote if you find solution easy ... Thanks..!!\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1799821,
                "title": "simple-self-join",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT A.name AS Employee\\nFROM Employee A, Employee B\\nWHERE A.managerId = B.id\\nAND A.salary > B.salary;\\n``",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT A.name AS Employee\\nFROM Employee A, Employee B\\nWHERE A.managerId = B.id\\nAND A.salary > B.salary;\\n``",
                "codeTag": "Unknown"
            },
            {
                "id": 1663736,
                "title": "simple-left-join",
                "content": "```SQL\\n# Write your MySQL query statement below\\n\\nSELECT a.name Employee FROM Employee a\\nLEFT JOIN Employee b\\nON  a.managerId = b.id  \\nWHERE a.salary > b.salary\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```SQL\\n# Write your MySQL query statement below\\n\\nSELECT a.name Employee FROM Employee a\\nLEFT JOIN Employee b\\nON  a.managerId = b.id  \\nWHERE a.salary > b.salary\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1651797,
                "title": "simple-solution",
                "content": "```\\nselect e.name as Employee from employee e where e.salary > (select emp.salary from employee emp where emp.Id=e.managerId);\\n```",
                "solutionTags": [],
                "code": "```\\nselect e.name as Employee from employee e where e.salary > (select emp.salary from employee emp where emp.Id=e.managerId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1581924,
                "title": "self-join-mysql",
                "content": "select e2.name as employee\\nfrom employee e1\\njoin employee e2\\non e1.id = e2.managerid\\nwhere e2.salary > e1.salary\\n",
                "solutionTags": [],
                "code": "select e2.name as employee\\nfrom employee e1\\njoin employee e2\\non e1.id = e2.managerid\\nwhere e2.salary > e1.salary\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1569778,
                "title": "simple-very-easy-faster-than-99-45",
                "content": "Since we need to print output with Header \"Employee\" therefore we need to put ``E1.Name as Employee``.\\n\\n```\\nselect E1.Name as Employee from Employee as E1, Employee as E2 \\nwhere E1.ManagerId = E2.Id and E1.Salary > E2.Salary\\n```",
                "solutionTags": [],
                "code": "```\\nselect E1.Name as Employee from Employee as E1, Employee as E2 \\nwhere E1.ManagerId = E2.Id and E1.Salary > E2.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1488719,
                "title": "2-solutions-with-same-performance",
                "content": "\\n```select e1.Name as Employee from Employee e1 left join Employee e2 on e1.ManagerId = e2.Id where e1.Salary>e2.Salary```\\n```select e1.Name as Employee from Employee as e1, Employee as e2 where e1.ManagerId = e2.Id  and e1.Salary>e2.Salary```\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```select e1.Name as Employee from Employee e1 left join Employee e2 on e1.ManagerId = e2.Id where e1.Salary>e2.Salary```\n```select e1.Name as Employee from Employee as e1, Employee as e2 where e1.ManagerId = e2.Id  and e1.Salary>e2.Salary```",
                "codeTag": "Unknown"
            },
            {
                "id": 1339499,
                "title": "easy-in-mysql",
                "content": "select e1.name as employee from employee e1,employee e2\\n    where e1.managerid=e2.id and e1.salary>e2.salary;",
                "solutionTags": [],
                "code": "select e1.name as employee from employee e1,employee e2\\n    where e1.managerid=e2.id and e1.salary>e2.salary;",
                "codeTag": "Unknown"
            },
            {
                "id": 929328,
                "title": "mysql",
                "content": "```\\nselect e1.Name as Employee\\nfrom Employee e1\\njoin Employee e2 on e1.ManagerId = e2.Id\\nwhere e1.Salary > e2.Salary;",
                "solutionTags": [],
                "code": "```\\nselect e1.Name as Employee\\nfrom Employee e1\\njoin Employee e2 on e1.ManagerId = e2.Id\\nwhere e1.Salary > e2.Salary;",
                "codeTag": "Unknown"
            },
            {
                "id": 800315,
                "title": "sooo-simple-sql",
                "content": "```\\nSELECT E1.Name AS \\'Employee\\' \\nFROM Employee AS E1, Employee AS E2\\nWHERE E1.ManagerId = E2.Id AND E1.Salary > E2.Salary;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT E1.Name AS \\'Employee\\' \\nFROM Employee AS E1, Employee AS E2\\nWHERE E1.ManagerId = E2.Id AND E1.Salary > E2.Salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 373186,
                "title": "simple-and-straight-forward-mysql-solution",
                "content": "```\\nSELECT E.Name as Employee\\nFROM Employee E, Employee M\\nWHERE E.Salary > M.Salary and E.ManagerId = M.Id",
                "solutionTags": [],
                "code": "```\\nSELECT E.Name as Employee\\nFROM Employee E, Employee M\\nWHERE E.Salary > M.Salary and E.ManagerId = M.Id",
                "codeTag": "Unknown"
            },
            {
                "id": 170254,
                "title": "join-solution",
                "content": "```SELECT E1.Name as Employee\\nFROM Employee E1 JOIN Employee E2 ON (E1.ManagerID = E2.Id)\\nWHERE E1.Salary > E2.Salary;```",
                "solutionTags": [],
                "code": "```SELECT E1.Name as Employee\\nFROM Employee E1 JOIN Employee E2 ON (E1.ManagerID = E2.Id)\\nWHERE E1.Salary > E2.Salary;```",
                "codeTag": "Unknown"
            },
            {
                "id": 53516,
                "title": "self-join-using-inner-join-straight-join-or-join",
                "content": "1252 ms\\n\\n    SELECT Emps.Name from Employee Emps\\n    INNER JOIN Employee Mans\\n    ON Mans.Id = Emps.ManagerId\\n    where Emps.Salary > Mans.Salary;\\n\\n1257 ms\\n\\n    SELECT Emps.Name from Employee Emps\\n    STRAIGHT_JOIN Employee Mans\\n    ON Mans.Id = Emps.ManagerId\\n    where Emps.Salary > Mans.Salary;\\n\\n1304 ms\\n\\n    SELECT Emps.Name from Employee Emps\\n    JOIN Employee Mans\\n    ON Mans.Id = Emps.ManagerId\\n    where Emps.Salary > Mans.Salary;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "1252 ms\\n\\n    SELECT Emps.Name from Employee Emps\\n    INNER JOIN Employee Mans\\n    ON Mans.Id = Emps.ManagerId\\n    where Emps.Salary > Mans.Salary;\\n\\n1257 ms\\n\\n    SELECT Emps.Name from Employee Emps\\n    STRAIGHT_JOIN Employee Mans\\n    ON Mans.Id = Emps.ManagerId\\n    where Emps.Salary > Mans.Salary;\\n\\n1304 ms\\n\\n    SELECT Emps.Name from Employee Emps\\n    JOIN Employee Mans\\n    ON Mans.Id = Emps.ManagerId\\n    where Emps.Salary > Mans.Salary;",
                "codeTag": "Unknown"
            },
            {
                "id": 53517,
                "title": "my-solution",
                "content": "    SELECT e1.Name AS Employee FROM Employee e1\\n    JOIN Employee e2\\n    ON e1.ManagerId = e2.Id\\n    WHERE e1.Salary > e2.Salary",
                "solutionTags": [],
                "code": "    SELECT e1.Name AS Employee FROM Employee e1\\n    JOIN Employee e2\\n    ON e1.ManagerId = e2.Id\\n    WHERE e1.Salary > e2.Salary",
                "codeTag": "Unknown"
            },
            {
                "id": 53523,
                "title": "simple-solution-with-inner-join",
                "content": "select a.name from Employee a inner join Employee b on a.managerId = b.id  and a.salary>b.salary;",
                "solutionTags": [],
                "code": "select a.name from Employee a inner join Employee b on a.managerId = b.id  and a.salary>b.salary;",
                "codeTag": "Unknown"
            },
            {
                "id": 4051991,
                "title": "pandas-sql-easy-employees-earning-more-than-their-managers",
                "content": "[See the Accepted and Successful Submission Detail](https://leetcode.com/submissions/detail/1050996534/)\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, we merge the \\'employee\\' DataFrame with itself using an inner join, matching the \\'managerId\\' column from the left DataFrame with the \\'id\\' column from the right DataFrame\\n    merged_ids = employee.merge(employee, how=\\'inner\\', left_on=\"managerId\", right_on=\"id\")\\n    \\n    # Then, we filter the merged DataFrame to select rows where the salary of the employee (\\'salary_x\\')\\n    # is greater than the salary of their respective manager (\\'salary_y\\').\\n    filtered_ids = merged_ids[merged_ids[\"salary_x\"] > merged_ids[\"salary_y\"]][[\"name_x\"]]\\n    \\n    # Then, we rename the \\'name_x\\' column to \\'Employee\\' in the filtered DataFrame\\n    new_df_employees = filtered_ids.rename(columns={\"name_x\": \"Employee\"})\\n     \\n    return new_df_employees\\n```\\n\\n**SQL**\\n[See the Accepted and Successful Submission Detail]( https://leetcode.com/submissions/detail/1061384619/)\\n\\n```\\n\\nSELECT name AS Employee\\n\\nFROM Employee e\\n\\nWHERE salary > (\\n    SELECT m.salary\\n    FROM Employee m\\n    WHERE m.id = e.managerId\\n);\\n```\\n\\n```\\n-- Select the \\'name\\' column from the \\'Employee\\' table and alias it as \\'Employee\\'\\n-- This query will retrieve the names of employees who meet a specific condition\\nSELECT name AS Employee\\n\\n-- Start the query by specifying the source table \\'Employee\\' and alias it as \\'e\\'\\nFROM Employee e\\n\\n-- Use a WHERE clause to filter the results based on a condition\\n-- In this case, it filters employees whose \\'salary\\' is greater than...\\n\\nWHERE salary > (\\n\\n    -- Start a subquery to retrieve the \\'salary\\' of a manager\\n    SELECT m.salary\\n\\n    -- Specify the source table for the subquery as \\'Employee\\' and alias it as \\'m\\'\\n    FROM Employee m\\n\\n    -- Use a WHERE clause in the subquery to match the manager\\'s \\'id\\' with the employee\\'s \\'managerId\\'\\n    WHERE m.id = e.managerId\\n\\n    -- End the subquery; it retrieves the manager\\'s salary for the current employee\\n);\\n```\\n\\n![image](https://assets.leetcode.com/users/images/e85c49e0-e73d-46a1-97a7-7111c3d60667_1695221899.683301.jpeg)\\n",
                "solutionTags": [
                    "Python",
                    "MySQL"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, we merge the \\'employee\\' DataFrame with itself using an inner join, matching the \\'managerId\\' column from the left DataFrame with the \\'id\\' column from the right DataFrame\\n    merged_ids = employee.merge(employee, how=\\'inner\\', left_on=\"managerId\", right_on=\"id\")\\n    \\n    # Then, we filter the merged DataFrame to select rows where the salary of the employee (\\'salary_x\\')\\n    # is greater than the salary of their respective manager (\\'salary_y\\').\\n    filtered_ids = merged_ids[merged_ids[\"salary_x\"] > merged_ids[\"salary_y\"]][[\"name_x\"]]\\n    \\n    # Then, we rename the \\'name_x\\' column to \\'Employee\\' in the filtered DataFrame\\n    new_df_employees = filtered_ids.rename(columns={\"name_x\": \"Employee\"})\\n     \\n    return new_df_employees\\n```\n```\\n\\nSELECT name AS Employee\\n\\nFROM Employee e\\n\\nWHERE salary > (\\n    SELECT m.salary\\n    FROM Employee m\\n    WHERE m.id = e.managerId\\n);\\n```\n```\\n-- Select the \\'name\\' column from the \\'Employee\\' table and alias it as \\'Employee\\'\\n-- This query will retrieve the names of employees who meet a specific condition\\nSELECT name AS Employee\\n\\n-- Start the query by specifying the source table \\'Employee\\' and alias it as \\'e\\'\\nFROM Employee e\\n\\n-- Use a WHERE clause to filter the results based on a condition\\n-- In this case, it filters employees whose \\'salary\\' is greater than...\\n\\nWHERE salary > (\\n\\n    -- Start a subquery to retrieve the \\'salary\\' of a manager\\n    SELECT m.salary\\n\\n    -- Specify the source table for the subquery as \\'Employee\\' and alias it as \\'m\\'\\n    FROM Employee m\\n\\n    -- Use a WHERE clause in the subquery to match the manager\\'s \\'id\\' with the employee\\'s \\'managerId\\'\\n    WHERE m.id = e.managerId\\n\\n    -- End the subquery; it retrieves the manager\\'s salary for the current employee\\n);\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4012018,
                "title": "beats-95-48-of-users-with-pandas",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    res = pd.DataFrame(columns=[\\'Employee\\'])\\n    for index, row in employee.iterrows():\\n        matching_salaries = employee.loc[(employee[\\'id\\'] == row[\\'managerId\\']) & (employee[\\'salary\\'] < row[\\'salary\\'])]\\n        if not matching_salaries.empty:\\n           res = pd.concat([res, pd.DataFrame({\\'Employee\\': [row[\\'name\\']]})], ignore_index=True)\\n    \\n    return res\\n    \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    res = pd.DataFrame(columns=[\\'Employee\\'])\\n    for index, row in employee.iterrows():\\n        matching_salaries = employee.loc[(employee[\\'id\\'] == row[\\'managerId\\']) & (employee[\\'salary\\'] < row[\\'salary\\'])]\\n        if not matching_salaries.empty:\\n           res = pd.concat([res, pd.DataFrame({\\'Employee\\': [row[\\'name\\']]})], ignore_index=True)\\n    \\n    return res\\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3977678,
                "title": "simplest-easy-solution-for-pandas",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    df2 = pd.DataFrame()\\n    df2 = employee.merge(employee, left_on = \"id\", right_on = \"managerId\", how = \"inner\")\\n    df2 = df2[df2[\\'salary_x\\'] < df2[\\'salary_y\\']][[\\'name_y\\']]\\n    df2.rename(columns={\\'name_y\\':\\'Employee\\'},inplace = True)\\n    return df2\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    df2 = pd.DataFrame()\\n    df2 = employee.merge(employee, left_on = \"id\", right_on = \"managerId\", how = \"inner\")\\n    df2 = df2[df2[\\'salary_x\\'] < df2[\\'salary_y\\']][[\\'name_y\\']]\\n    df2.rename(columns={\\'name_y\\':\\'Employee\\'},inplace = True)\\n    return df2\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3972917,
                "title": "using-merge-on-pandas",
                "content": "\\n\\n# Approach\\nThere might be better approaches but I firt tried to do self join, then filter. After filtering renamed the column. \\n\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n  exp=employee.merge(right=employee, how=\\'inner\\', left_on=\\'managerId\\', right_on=\\'id\\')\\n  exp=exp[exp.salary_x>exp.salary_y]\\n  final=exp[[\\'name_x\\']].rename(columns={\\'name_x\\':\\'Employee\\'})\\n  return final\\n  \\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n  exp=employee.merge(right=employee, how=\\'inner\\', left_on=\\'managerId\\', right_on=\\'id\\')\\n  exp=exp[exp.salary_x>exp.salary_y]\\n  final=exp[[\\'name_x\\']].rename(columns={\\'name_x\\':\\'Employee\\'})\\n  return final\\n  \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3967682,
                "title": "pandas-solution-clearly-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\'managerId\\'= 3 implies, this manager has a salary of 60000. Similarly \\'managerId\\'= 4 implies he earns 90000. If only we had these values next to the \\'managerId\\' column in the dataframe, we could have easily filtered out the rows using a greater than condition.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI am using pandas merge function to merge the table with itself. This is similar to SQL\\'s self join. We want the salaries to appear next to the \\'managerID\\' column, therefore we have to choose left_on=\\'managerID\\' and right_on=\\'id\\' in the merge function. This will result in a table that has the following columns: id_x,\\tname_x,\\tsalary_x,\\tmanagerId_x,\\tid_y,\\tname_y,\\tsalary_y,\\tmanagerId_y.\\nNext we filter rows using a greater than condition as shown below. Finally we create a dataframe.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    # Merge the dataframe with itself.\\n    new_df = employee.merge(right=employee, how=\\'left\\', left_on=\\'managerId\\', right_on=\\'id\\')\\n    # Filter the rows with a greater than condition\\n    name = new_df[new_df[\\'salary_x\\'] > new_df[\\'salary_y\\']][\\'name_x\\'].tolist()\\n    return pd.DataFrame({\"Employee\": name})\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    # Merge the dataframe with itself.\\n    new_df = employee.merge(right=employee, how=\\'left\\', left_on=\\'managerId\\', right_on=\\'id\\')\\n    # Filter the rows with a greater than condition\\n    name = new_df[new_df[\\'salary_x\\'] > new_df[\\'salary_y\\']][\\'name_x\\'].tolist()\\n    return pd.DataFrame({\"Employee\": name})\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3946828,
                "title": "easy-pandas-sollution-beats-99",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem appears to involve finding employees who have a higher salary than their respective managers. To solve this, we can use the pandas library in Python to manipulate and filter the given employee data.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. We will first merge the employee DataFrame with itself, using the managerId column from one DataFrame and the id column from the other. This will create a DataFrame where each employee is paired with their manager.\\n\\n2. After merging, we will filter the rows where the employee\\'s salary is greater than the manager\\'s salary.\\n\\n3. Finally, we will rename the \\'name\\' column to \\'Employee\\' and select only the \\'Employee\\' column in the result DataFrame.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    result_df = (\\n        employee.merge(employee, left_on=\\'managerId\\', right_on=\\'id\\', suffixes=(\\'\\', \\'_manager\\'))\\n        .query(\\'salary > salary_manager\\')\\n        .rename(columns={\\'name\\': \\'Employee\\'})\\n        [[\\'Employee\\']]\\n    )\\n    return result_df\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    result_df = (\\n        employee.merge(employee, left_on=\\'managerId\\', right_on=\\'id\\', suffixes=(\\'\\', \\'_manager\\'))\\n        .query(\\'salary > salary_manager\\')\\n        .rename(columns={\\'name\\': \\'Employee\\'})\\n        [[\\'Employee\\']]\\n    )\\n    return result_df\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3945643,
                "title": "simple-solution-using-pandas-93-02-beginner-level",
                "content": "# Intuition\\n![image.png](https://assets.leetcode.com/users/images/a0a130a7-1867-493c-aec0-408335ba7629_1692712008.6532245.png)\\n\\n# Approach\\nSure, here\\'s a concise summary of the approach:\\n\\n1. Create a Pandas DataFrame from provided data, representing employee info with ID, name, salary, and manager\\'s ID.\\n2. Rename the \\'name\\' column to \\'employee\\' using the `rename()` function.\\n3. Merge the DataFrame with itself on \\'managerId\\' to compare employee and manager info.\\n4. Filter merged data for cases where an employee\\'s salary exceeds their manager\\'s salary.\\n5. Select relevant columns and display the result showing employees earning more than managers.\\n\\n\\n# Complexity\\n- Time complexity:\\nBeats 32.56% of users with Pandas\\n\\n- Space complexity:\\nBeats 93.02% of users with Pandas\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    df=pd.DataFrame(employee)\\n    df.rename(columns={\\'name\\': \\'Employee\\'}, inplace=True)\\n    result = pd.merge(df, df, left_on=\\'managerId\\', right_on=\\'id\\', suffixes=(\\'\\', \\'_manager\\'))\\n    result = result[result[\\'salary\\'] > result[\\'salary_manager\\']]\\n    result = result[[\\'Employee\\']]\\n    return result\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef find_employees(employee: pd.DataFrame) -> pd.DataFrame:\\n    df=pd.DataFrame(employee)\\n    df.rename(columns={\\'name\\': \\'Employee\\'}, inplace=True)\\n    result = pd.merge(df, df, left_on=\\'managerId\\', right_on=\\'id\\', suffixes=(\\'\\', \\'_manager\\'))\\n    result = result[result[\\'salary\\'] > result[\\'salary_manager\\']]\\n    result = result[[\\'Employee\\']]\\n    return result\\n\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3921232,
                "title": "full-explanation",
                "content": "# Appraoch:\\nTo solve this problem, we need to compare the salary of each employee with the salary of their manager. We can achieve this using a subquery that retrieves the manager\\'s salary for each employee. Here\\'s the step-by-step approach:\\n\\n## Alias Definitions: \\nDefine distinct aliases for the Employee table in both the outer query and the subquery to avoid ambiguity. We\\'ll use e for the outer query representing employees and m for the subquery representing managers.\\n\\n### Comparison Subquery: \\nWrite a subquery within the WHERE clause of the outer query. This subquery selects the salary of the manager (m.salary) using a join condition based on the managerId of the employee (e.managerId). This ensures that we\\'re comparing the salary of each employee with their respective manager\\'s salary.\\n\\nComparison Condition: Use the greater-than (>) operator to compare the salary of each employee (e.salary) with the salary of their manager (m.salary).\\n\\nColumn Selection: Select the name column from the Employee table using an alias (Employee) for the result set. This will give us the names of employees whose salaries meet the specified condition.\\n\\nHere\\'s the SQL query that implements the above approach:\\n```\\n# Write your MySQL query statement below\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (\\n    SELECT m.salary\\n    FROM Employee m\\n    WHERE m.id = e.managerId\\n);\\n```\\n\\n# Second Query:\\n```\\n# Write your MySQL query statement below\\nSelect name as Employee from Employee e1  where salary > (select salary from Employee where id = e1.managerId)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (\\n    SELECT m.salary\\n    FROM Employee m\\n    WHERE m.id = e.managerId\\n);\\n```\n```\\n# Write your MySQL query statement below\\nSelect name as Employee from Employee e1  where salary > (select salary from Employee where id = e1.managerId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3813500,
                "title": "an-easy-to-understand-solution",
                "content": "# Code\\n```\\nSELECT empl.name as Employee FROM Employee empl, Employee manager\\nWHERE manager.id = empl.managerId AND manager.salary < empl.salary\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT empl.name as Employee FROM Employee empl, Employee manager\\nWHERE manager.id = empl.managerId AND manager.salary < empl.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3361256,
                "title": "simple-one",
                "content": "\\n```\\n# Write your MySQL query statement below\\nselect ss.name as Employee from Employee as ss\\nleft join  Employee as ww on ss.managerId = ww.id\\nwhere ss.salary > ww.salary\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect ss.name as Employee from Employee as ss\\nleft join  Employee as ww on ss.managerId = ww.id\\nwhere ss.salary > ww.salary\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3317154,
                "title": "sql-server-about-as-basic-as-it-gets",
                "content": "Its a pretty simple join condition with a where clause\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\n\\nselect employee.name Employee from employee employee\\njoin employee manager on employee.managerid = manager.id\\nwhere employee.salary > manager.salary\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nselect employee.name Employee from employee employee\\njoin employee manager on employee.managerid = manager.id\\nwhere employee.salary > manager.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3281158,
                "title": "self-join-in-mysql-employee-table",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect e.name Employee \\nfrom Employee e join Employee m on m.id = e.managerId\\nwhere e.salary > m.salary;\\n```\\n# Intuition\\n\\nThis problem has **Self Join** where the `employee` table has `employee id`  as well as `manager id`\\n# Approach\\n- First the Join condition should be formed to match the table to itself .So, the employee table splitted into employee and manager.\\n- Then , the `id` from the **Employee m** table should get mapped to the same `managerId` from the **Employee e** \\n\\n\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect e.name Employee \\nfrom Employee e join Employee m on m.id = e.managerId\\nwhere e.salary > m.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2591625,
                "title": "with-and-without-join-mysql",
                "content": "*Without Inner join*\\n\\n```select name as Employee from employee a where a.salary > (select salary from employee b where b.id = a.managerId);```\\n\\n*With inner Join*\\n\\n```select a.name as Employee from employee a inner join employee b on a.managerId = b.id and a.salary > b.salary;```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```select name as Employee from employee a where a.salary > (select salary from employee b where b.id = a.managerId);```\n```select a.name as Employee from employee a inner join employee b on a.managerId = b.id and a.salary > b.salary;```",
                "codeTag": "Unknown"
            },
            {
                "id": 2573494,
                "title": "mysql-simple-and-easy-solution",
                "content": "```\\nSELECT e1.name as \\'Employee\\'\\nFROM Employee AS e1 JOIN Employee AS e2 ON e1.managerId = e2.id\\nWHERE e1.salary > e2.salary;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT e1.name as \\'Employee\\'\\nFROM Employee AS e1 JOIN Employee AS e2 ON e1.managerId = e2.id\\nWHERE e1.salary > e2.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2563820,
                "title": "simple",
                "content": "```\\nselect e.name as Employee from Employee e, Employee e1 \\nwhere e.managerId is not NULL and e.managerId = e1.id and e.salary > e1.salary\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect e.name as Employee from Employee e, Employee e1 \\nwhere e.managerId is not NULL and e.managerId = e1.id and e.salary > e1.salary\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2561593,
                "title": "mysql-subquery",
                "content": "```\\nSELECT name AS Employee\\nFROM Employee a\\nWHERE salary > (SELECT salary FROM Employee b Where a.managerId = b.id)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name AS Employee\\nFROM Employee a\\nWHERE salary > (SELECT salary FROM Employee b Where a.managerId = b.id)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2556814,
                "title": "simple-solution-using-self-join-mysql",
                "content": "select e1.name Employee from Employee e1 join Employee e2 \\non e1.managerId = e2.id\\nand e1.salary > e2.salary;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select e1.name Employee from Employee e1 join Employee e2 \\non e1.managerId = e2.id\\nand e1.salary > e2.salary;",
                "codeTag": "Unknown"
            },
            {
                "id": 2555900,
                "title": "ms-sql-server",
                "content": "```\\nselect e.name as Employee\\nfrom Employee e\\n    inner join Employee m on m.id = e.managerID\\nwhere e.salary > m.salary\\n```",
                "solutionTags": [],
                "code": "```\\nselect e.name as Employee\\nfrom Employee e\\n    inner join Employee m on m.id = e.managerID\\nwhere e.salary > m.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2547699,
                "title": "a-straightforward-solution",
                "content": "```\\nSELECT EMP.name AS Employee\\nFROM Employee AS EMP\\nINNER JOIN Employee AS MGR ON EMP.managerId = MGR.id\\nWHERE EMP.salary > MGR.salary\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT EMP.name AS Employee\\nFROM Employee AS EMP\\nINNER JOIN Employee AS MGR ON EMP.managerId = MGR.id\\nWHERE EMP.salary > MGR.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2537087,
                "title": "sql-3-solutions",
                "content": "```\\n# Write your MySQL query statement below\\n    #1st cond. in where clause\\n    SELECT e1.name as Employee\\n    FROM Employee e1\\n    WHERE e1.salary>(select e2.salary from Employee e2 where e2.id = e1.managerId);\\n    \\n    #2nd without join\\n    SELECT a.Name AS \\'Employee\\'\\n    FROM Employee AS a,Employee AS b\\n    WHERE a.ManagerId = b.Id AND a.Salary > b.Salary\\n    \\n    #3rd using join\\n    SELECT a.NAME AS Employee\\n    FROM Employee AS a JOIN Employee AS b \\n    ON a.ManagerId = b.Id AND a.Salary > b.Salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n    #1st cond. in where clause\\n    SELECT e1.name as Employee\\n    FROM Employee e1\\n    WHERE e1.salary>(select e2.salary from Employee e2 where e2.id = e1.managerId);\\n    \\n    #2nd without join\\n    SELECT a.Name AS \\'Employee\\'\\n    FROM Employee AS a,Employee AS b\\n    WHERE a.ManagerId = b.Id AND a.Salary > b.Salary\\n    \\n    #3rd using join\\n    SELECT a.NAME AS Employee\\n    FROM Employee AS a JOIN Employee AS b \\n    ON a.ManagerId = b.Id AND a.Salary > b.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2526251,
                "title": "simple-sql-self",
                "content": "select e.name as Employee\\nfrom Employee e inner join Employee e1\\non e.managerId = e1.id\\nwhere e.salary>e1.salary",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select e.name as Employee\\nfrom Employee e inner join Employee e1\\non e.managerId = e1.id\\nwhere e.salary>e1.salary",
                "codeTag": "Unknown"
            },
            {
                "id": 2514297,
                "title": "mysql-employees-earning-more-than-their-managers-sol-616-ms",
                "content": "```\\nselect a.Name as Employee\\nfrom Employee a inner join Employee b on a.ManagerId=b.Id\\nwhere a.Salary>b.Salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect a.Name as Employee\\nfrom Employee a inner join Employee b on a.ManagerId=b.Id\\nwhere a.Salary>b.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2457136,
                "title": "simple-solution-with-detail-explanation-simple",
                "content": "**Please upvote to motivate me ^ Thanks**\\n\\nHERE SIMPLE SELF JOIN \\nBy condition a.managerId=b.id   \\n**First run this much and see output.For better understanding**\\n```\\nSELECT a.name,a.salary,a.managerId,b.id, b.name,b.salary  AS Employee\\nFROM Employee a JOIN Employee b\\nON a.managerId=b.id\\n```\\n\\nthen WHERE a.salary > b.salary\\n**Code**\\n```\\nSELECT a.name  AS Employee\\nFROM Employee a JOIN Employee b\\nON a.managerId=b.id\\nWHERE a.salary > b.salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT a.name,a.salary,a.managerId,b.id, b.name,b.salary  AS Employee\\nFROM Employee a JOIN Employee b\\nON a.managerId=b.id\\n```\n```\\nSELECT a.name  AS Employee\\nFROM Employee a JOIN Employee b\\nON a.managerId=b.id\\nWHERE a.salary > b.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2439835,
                "title": "simply-solution-using-join",
                "content": "```\\nselect e.name Employee\\nfrom Employee e join Employee e1\\non e.managerId = e1.id\\nwhere e.salary > e1.salary \\n```",
                "solutionTags": [],
                "code": "```\\nselect e.name Employee\\nfrom Employee e join Employee e1\\non e.managerId = e1.id\\nwhere e.salary > e1.salary \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2420186,
                "title": "faster-than-71-96-memory-usage-0b-less-than-100-00-of-mysql-online-submission",
                "content": "SELECT E1.name as Employee from Employee as E1\\nleft join Employee as E2 \\non E1.managerID = E2.id\\nwhere E1.salary > E2.salary\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT E1.name as Employee from Employee as E1\\nleft join Employee as E2 \\non E1.managerID = E2.id\\nwhere E1.salary > E2.salary\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2370152,
                "title": "solution-where-clause",
                "content": "CODE:\\n```\\n-- create select statement:\\nSELECT\\n    -- select employee name: \"Non Manager\"\\n    c1.name AS Employee\\nFROM Employee c1\\n-- filter the salary greater than the manager salary\\nWHERE c1.salary > \\n    (SELECT\\n        c2.salary\\n     -- create from clause:\\n     FROM Employee c2\\n     -- filter where employee ID who is a manager equals the assigned managerID for the employee:\\n     WHERE c2.id = c1.managerID\\n);\\n```",
                "solutionTags": [],
                "code": "```\\n-- create select statement:\\nSELECT\\n    -- select employee name: \"Non Manager\"\\n    c1.name AS Employee\\nFROM Employee c1\\n-- filter the salary greater than the manager salary\\nWHERE c1.salary > \\n    (SELECT\\n        c2.salary\\n     -- create from clause:\\n     FROM Employee c2\\n     -- filter where employee ID who is a manager equals the assigned managerID for the employee:\\n     WHERE c2.id = c1.managerID\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2335405,
                "title": "mysql-runtime-330-ms-faster-than-88-99-using-inner-join",
                "content": "```\\nselect e.name as employee\\nfrom Employee e inner join  Employee m\\non e.salary > m.salary and e.managerid = m.id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect e.name as employee\\nfrom Employee e inner join  Employee m\\non e.salary > m.salary and e.managerid = m.id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2327111,
                "title": "easiest-solution-with-straightforward-approach",
                "content": "Here, e.managerid represents the managerId from the employee table.\\n```\\nselect name as Employee from employee as e \\nwhere salary>(select salary from employee where id=e.managerid)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name as Employee from employee as e \\nwhere salary>(select salary from employee where id=e.managerid)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2319150,
                "title": "3-different-ways-easy-to-understand",
                "content": "Faster and straight forward\\n```\\nselect e1.Name as Employee from Employee e1, Employee e2 \\nwhere e1.ManagerId=e2.Id and e1.Salary>e2.Salary\\n```\\nAnother solution with join keyword (Can use left join as well but it will be slower)\\n```\\nselect e1.Name as Employee from Employee e1 inner join Employee e2 on e1.ManagerId=e2.Id\\nwhere e1.Salary>e2.Salary\\n```\\nSubquery method(Slower)\\n```\\nselect e1.Name as Employee from Employee e1 where e1.managerId is not null and e1.salary > (select e2.salary from Employee e2 where e2.id=e1.managerId)\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect e1.Name as Employee from Employee e1, Employee e2 \\nwhere e1.ManagerId=e2.Id and e1.Salary>e2.Salary\\n```\n```\\nselect e1.Name as Employee from Employee e1 inner join Employee e2 on e1.ManagerId=e2.Id\\nwhere e1.Salary>e2.Salary\\n```\n```\\nselect e1.Name as Employee from Employee e1 where e1.managerId is not null and e1.salary > (select e2.salary from Employee e2 where e2.id=e1.managerId)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2298501,
                "title": "faster-and-simple-solution",
                "content": "# Write your MySQL query statement below\\nSELECT name AS \\'Employee\\' FROM Employee e1\\nWHERE managerID IN (SELECT id FROM Employee WHERE e1.salary>salary );",
                "solutionTags": [],
                "code": "# Write your MySQL query statement below\\nSELECT name AS \\'Employee\\' FROM Employee e1\\nWHERE managerID IN (SELECT id FROM Employee WHERE e1.salary>salary );",
                "codeTag": "Unknown"
            },
            {
                "id": 2278080,
                "title": "most-simple-cross-join-mysql",
                "content": "```\\nselect a.name as Employee from Employee a, Employee b\\nwhere a.managerId is Not Null and a.managerID=b.id and a.salary>b.salary;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect a.name as Employee from Employee a, Employee b\\nwhere a.managerId is Not Null and a.managerID=b.id and a.salary>b.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2278076,
                "title": "inner-join",
                "content": "```\\nselect a.name as Employee from Employee a\\nInner join Employee b\\non a.managerId = b.id\\nwhere a.salary > b.salary;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect a.name as Employee from Employee a\\nInner join Employee b\\non a.managerId = b.id\\nwhere a.salary > b.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2271618,
                "title": "mysql-easy-and-simple-to-understand",
                "content": "```\\nselect emp.name AS Employee from \\nEmployee emp\\nJOIN Employee manager ON (emp.managerId = manager.id AND emp.salary > manager.salary)\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect emp.name AS Employee from \\nEmployee emp\\nJOIN Employee manager ON (emp.managerId = manager.id AND emp.salary > manager.salary)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2246938,
                "title": "easy-to-understand-oracle-solution",
                "content": "```\\nselect a.name as Employee\\nfrom employee a, employee b\\nwhere a.managerId=b.id and a.salary>b.salary;\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect a.name as Employee\\nfrom employee a, employee b\\nwhere a.managerId=b.id and a.salary>b.salary;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2141971,
                "title": "100-better-memory",
                "content": "```\\nSELECT NAME AS Employee FROM EMPLOYEE E WHERE E.SALARY > (SELECT SALARY FROM EMPLOYEE S WHERE E.MANAGERID=S.ID) \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT NAME AS Employee FROM EMPLOYEE E WHERE E.SALARY > (SELECT SALARY FROM EMPLOYEE S WHERE E.MANAGERID=S.ID) \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2098217,
                "title": "using-inner-join",
                "content": "select e1.name as Employee from \\nemployee e1\\ninner join employee e2\\non\\ne1.managerId=e2.id and \\ne1.salary>e2.salary",
                "solutionTags": [],
                "code": "select e1.name as Employee from \\nemployee e1\\ninner join employee e2\\non\\ne1.managerId=e2.id and \\ne1.salary>e2.salary",
                "codeTag": "Unknown"
            },
            {
                "id": 2074644,
                "title": "use-join",
                "content": "```\\nselect E1.name AS Employee \\nfrom Employee E1\\nJOIN Employee E2\\nON E1.managerId = E2.id\\nWHERE E1.Salary > E2.Salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect E1.name AS Employee \\nfrom Employee E1\\nJOIN Employee E2\\nON E1.managerId = E2.id\\nWHERE E1.Salary > E2.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2069632,
                "title": "self-join",
                "content": "```\\nselect \\n    e1.name as employee \\nfrom\\n    employee as e1\\njoin \\n    employee as e2 \\nwhere\\n    e1.managerID = e2. id and e1.salary > e2.salary \\n```",
                "solutionTags": [],
                "code": "```\\nselect \\n    e1.name as employee \\nfrom\\n    employee as e1\\njoin \\n    employee as e2 \\nwhere\\n    e1.managerID = e2. id and e1.salary > e2.salary \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2065107,
                "title": "without-using-join-statement",
                "content": "```\\nSELECT name AS Employee FROM Employee a\\nWHERE a.salary > (SELECT salary FROM Employee b WHERE b.id = a.managerId )\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name AS Employee FROM Employee a\\nWHERE a.salary > (SELECT salary FROM Employee b WHERE b.id = a.managerId )\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2052165,
                "title": "not-using-join",
                "content": "```sql\\nselect name as Employee\\nfrom Employee e\\nwhere salary > (select salary from Employee where id = e.managerId);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nselect name as Employee\\nfrom Employee e\\nwhere salary > (select salary from Employee where id = e.managerId);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2043994,
                "title": "simple-ms-sql-solution",
                "content": "```\\nselect a.name Employee\\nfrom Employee a\\ninner join Employee b on a.managerId = b.id and b.salary < a.salary\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nselect a.name Employee\\nfrom Employee a\\ninner join Employee b on a.managerId = b.id and b.salary < a.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2032133,
                "title": "oracle-solution-537-ms",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nSELECT\\n    e.name as Employee\\nFROM\\n    employee e\\nINNER JOIN\\n    employee m\\nON\\n    e.managerid = m.id\\nAND\\n    e.salary > m.salary\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT\\n    e.name as Employee\\nFROM\\n    employee e\\nINNER JOIN\\n    employee m\\nON\\n    e.managerid = m.id\\nAND\\n    e.salary > m.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2014942,
                "title": "sql-server",
                "content": "```\\nselect ee.name as Employee \\nfrom Employee as ee\\ninner join Employee as er\\non ee.managerId = er.id\\nwhere ee.salary > er.salary\\n```",
                "solutionTags": [],
                "code": "```\\nselect ee.name as Employee \\nfrom Employee as ee\\ninner join Employee as er\\non ee.managerId = er.id\\nwhere ee.salary > er.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2013528,
                "title": "detailed-explanation-sql",
                "content": "**here we compare two tables (a and b)\\ncomparison 1: salary should be greater\\ncomparison 2: manager_id should be equal to id**\\n**catch : comparing same table by using aliasing** \\n```\\nselect a.name as Employee\\nfrom Employee a, Employee b\\nwhere a.salary>b.salary and  a.managerId = b.id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect a.name as Employee\\nfrom Employee a, Employee b\\nwhere a.salary>b.salary and  a.managerId = b.id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2008614,
                "title": "mysql-self-join-using-aliases",
                "content": "```\\nSELECT a.name as Employee\\nFROM Employee a, Employee b\\nWHERE a.salary > b.salary\\n    AND a.managerId = b.id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT a.name as Employee\\nFROM Employee a, Employee b\\nWHERE a.salary > b.salary\\n    AND a.managerId = b.id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1990509,
                "title": "employee-earning-more-salary-than-managers-with-picture-of-table",
                "content": "```\\nSELECT e.name as \\'Employee\\'\\nFROM Employee as e\\nJOIN Employee as m\\nON e.managerId = m.Id\\nWHERE e.salary > m.salary;\\n```\\nthe following table will looks like this\\n![image](https://assets.leetcode.com/users/images/b49a7cb6-cd11-48b2-9946-dc57bb15fe96_1651199316.3559096.png)\\n",
                "solutionTags": [],
                "code": "```\\nSELECT e.name as \\'Employee\\'\\nFROM Employee as e\\nJOIN Employee as m\\nON e.managerId = m.Id\\nWHERE e.salary > m.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1972319,
                "title": "mysql-solution",
                "content": "# Solution\\n```\\nSELECT emp.name as Employee\\nFROM Employee emp\\nINNER JOIN Employee man on man.id = emp.managerId\\nWHERE emp.salary > man.salary\\n```\\nA self join is a regular join, but the table is joined with itself.\\nAfter join we can compare Employee and Manager Salaries.\\nIf you find this **solution** and **explanation** helpful, please **upvote** it for others people.\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT emp.name as Employee\\nFROM Employee emp\\nINNER JOIN Employee man on man.id = emp.managerId\\nWHERE emp.salary > man.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1966296,
                "title": "mysql-by-using-self-join",
                "content": "```\\nselect e1.name as Employee \\n from Employee e1 join Employee e2            /*self join */\\n   on e1.managerId=e2.id and e1.salary>e2.salary\\n   \\n   IF Hepful Please Like And Upvoke\\n```",
                "solutionTags": [],
                "code": "```\\nselect e1.name as Employee \\n from Employee e1 join Employee e2            /*self join */\\n   on e1.managerId=e2.id and e1.salary>e2.salary\\n   \\n   IF Hepful Please Like And Upvoke\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1962119,
                "title": "used-inner-join-and-where-77-14-time-100-space",
                "content": "```\\n# Write your MySQL query statement below \\nSELECT T.NAME AS EMPLOYEE FROM EMPLOYEE T INNER JOIN EMPLOYEE T2 \\nON T.MANAGERID = T2.ID WHERE T.SALARY > T2.SALARY;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below \\nSELECT T.NAME AS EMPLOYEE FROM EMPLOYEE T INNER JOIN EMPLOYEE T2 \\nON T.MANAGERID = T2.ID WHERE T.SALARY > T2.SALARY;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1905061,
                "title": "very-simple-solution-by-self-join",
                "content": "By seeing the tables I have seen that Manager-id and Id are the major role playing here.\\n\\nIn the question it is that \"Find the employees who earn more than their managers\"\\n\\nMeans:- We have to find the name of the employees whose salary is greater than that of manager\\nTo solve this we have to see the employees Manager-id whom they are reporting means the manager of their employees \\nin the following table Joe\\'s manager is Sam and Henry\\'s manager is Max due to matching the Id and Manager-id\\n\\nSo for checking two attributes id and the salary we need two tables however here is only one so we need to self join these tables\\nas Employee => E1,E2.\\n\\n**MySQL**\\n```\\nSELECT E1.Name as Employee\\nFROM Employee as E1 , Employee as E2\\nWHERE E1.ManagerId = E2.id and E1.salary > E2.salary;\\n```\\nHere we are selecting the employee name from the table 1 where both tables ids are matching together and also the salary is greater than that of manager.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT E1.Name as Employee\\nFROM Employee as E1 , Employee as E2\\nWHERE E1.ManagerId = E2.id and E1.salary > E2.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1886585,
                "title": "multiple-solutions-mysql-ms-sql-oracle",
                "content": "**Comparison Subquery**:\\n```\\nSELECT E.name As Employee FROM Employee E\\nWHERE salary > (SELECT salary FROM Employee M WHERE E.managerId=M.id)\\n```\\n\\n**EXISTS Subquery**:\\n```\\nSELECT name AS Employee FROM Employee E\\nWHERE EXISTS (SELECT M.id FROM Employee M WHERE E.managerId=M.id AND E.salary > M.salary)\\n```\\n\\n**JOIN ON**:\\n```\\nSELECT E.name AS Employee FROM Employee E\\nJOIN Employee M ON E.managerId = M.id\\nWHERE E.Salary > M.Salary\\n```\\n\\n**Comma JOIN with WHERE clause**:\\n```\\nSELECT E.name AS Employee FROM Employee E, Employee M\\nWHERE E.managerId = M.id AND E.Salary > M.Salary\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT E.name As Employee FROM Employee E\\nWHERE salary > (SELECT salary FROM Employee M WHERE E.managerId=M.id)\\n```\n```\\nSELECT name AS Employee FROM Employee E\\nWHERE EXISTS (SELECT M.id FROM Employee M WHERE E.managerId=M.id AND E.salary > M.salary)\\n```\n```\\nSELECT E.name AS Employee FROM Employee E\\nJOIN Employee M ON E.managerId = M.id\\nWHERE E.Salary > M.Salary\\n```\n```\\nSELECT E.name AS Employee FROM Employee E, Employee M\\nWHERE E.managerId = M.id AND E.Salary > M.Salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1886448,
                "title": "sql-join",
                "content": "```\\nselect emp.name as \"Employee\" from Employee as emp join Employee as man on emp.managerId = man.id where emp.salary > man.salary\\n```",
                "solutionTags": [],
                "code": "```\\nselect emp.name as \"Employee\" from Employee as emp join Employee as man on emp.managerId = man.id where emp.salary > man.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1884943,
                "title": "simple-sql-solution-easy-to-understand",
                "content": "```\\nselect emp.name as Employee from employee emp join employee mgr\\non emp.managerId = mgr.id where emp.salary > mgr.salary\\n\\n# NOTE: To visualize in a better way do ->\\n# select * from employee emp join employee mgr on emp.managerId = mgr.id\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect emp.name as Employee from employee emp join employee mgr\\non emp.managerId = mgr.id where emp.salary > mgr.salary\\n\\n# NOTE: To visualize in a better way do ->\\n# select * from employee emp join employee mgr on emp.managerId = mgr.id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1879203,
                "title": "using-nested-select",
                "content": "```\\n\\nSELECT name AS \\'Employee\\' FROM employee e1\\nWHERE e1.salary > (\\n    SELECT salary FROM employee WHERE id = e1.managerId\\n    );\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nSELECT name AS \\'Employee\\' FROM employee e1\\nWHERE e1.salary > (\\n    SELECT salary FROM employee WHERE id = e1.managerId\\n    );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1874236,
                "title": "mysql-method-with-explanation",
                "content": "**```SELECT e.name AS Employee \\nFROM Employee e JOIN Employee e1\\nON e.managerId=e1.id\\nAND e.salary>e1.salary;```**\\n![image](https://assets.leetcode.com/users/images/aea72f7b-dfad-4cb3-9e1d-cfb69f955ef7_1647972547.9971957.jpeg)\\n\\n\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```SELECT e.name AS Employee \\nFROM Employee e JOIN Employee e1\\nON e.managerId=e1.id\\nAND e.salary>e1.salary;```",
                "codeTag": "Unknown"
            },
            {
                "id": 1862645,
                "title": "simple-sql-squery-easy-to-understand-beginner-friendly",
                "content": "```\\nSELECT E1.name AS Employee \\nfrom Employee AS E1, Employee AS E2\\nWHERE E1.managerID=E2.id AND E1.salary > E2.salary;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT E1.name AS Employee \\nfrom Employee AS E1, Employee AS E2\\nWHERE E1.managerID=E2.id AND E1.salary > E2.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1838752,
                "title": "faster-than-83-solutions-using-subquery-181-employees-earning-more-than-their-managers",
                "content": "```\\nSELECT e1.name AS \"Employee\" \\nFROM employee e1 WHERE\\ne1.salary > (SELECT e2.salary \\n\\t\\t\\tFROM employee e2\\n\\t\\t\\tWHERE e1.managerId= e2.id);\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nSELECT e1.name AS \"Employee\" \\nFROM employee e1 WHERE\\ne1.salary > (SELECT e2.salary \\n\\t\\t\\tFROM employee e2\\n\\t\\t\\tWHERE e1.managerId= e2.id);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1796327,
                "title": "can-someone-explain-what-is-wrong-with-this-query",
                "content": "```SELECT e1.name from Employee e1 where e1.salary > (SELECT e2.salary FROM Employee e2 where e1.managerId = e2.id );```\\n\\nOutput\\n{\"headers\": [\"name\"], \"values\": [[\"Joe\"]]}\\nExpected\\n{\"headers\": [\"Employee\"], \"values\": [[\"Joe\"]]}\\n\\nSomeone please explain how the header value is populated.",
                "solutionTags": [],
                "code": "```SELECT e1.name from Employee e1 where e1.salary > (SELECT e2.salary FROM Employee e2 where e1.managerId = e2.id );```",
                "codeTag": "Unknown"
            },
            {
                "id": 1794611,
                "title": "mysql-join-solution",
                "content": "```\\nSELECT e2.name employee \\nFROM employee e1\\nJOIN employee e2\\nON e1.id = e2.managerId\\nWHERE e1.salary < e2.salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT e2.name employee \\nFROM employee e1\\nJOIN employee e2\\nON e1.id = e2.managerId\\nWHERE e1.salary < e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1720900,
                "title": "easy-one",
                "content": "Write your MySQL query statement below\\n# **MySQL**\\n```\\nselect e1.name as \\'Employee\\' \\nfrom Employee e1, Employee e2\\nwhere e1.salary > e2.salary and e1.managerId = e2.id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect e1.name as \\'Employee\\' \\nfrom Employee e1, Employee e2\\nwhere e1.salary > e2.salary and e1.managerId = e2.id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1672161,
                "title": "simple-query-without-any-joins",
                "content": "```\\n\\nselect E1.name As Employee from Employee E1,Employee E2 \\nwhere E1.managerId=E2.id and E1.salary>E2.salary;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect E1.name As Employee from Employee E1,Employee E2 \\nwhere E1.managerId=E2.id and E1.salary>E2.salary;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1670463,
                "title": "simple-solution-with-self-join",
                "content": "\\nselect e1.name as \"Employee\"\\nfrom Employee e1 inner join Employee e2\\nwhere e1.managerId=e2.id \\nand e1.salary>e2.salary",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\nselect e1.name as \"Employee\"\\nfrom Employee e1 inner join Employee e2\\nwhere e1.managerId=e2.id \\nand e1.salary>e2.salary",
                "codeTag": "Unknown"
            },
            {
                "id": 1635883,
                "title": "2-approaches-nested-queries-join",
                "content": "**Nested query**\\n```\\nSelect name as Employee from employee e\\nwhere salary > (select salary from employee where id = e.managerId)\\n```\\n\\n**Join**\\n```\\nSelect e1.name as Employee from employee e1\\njoin employee e2\\non e2.id = e1.managerId \\nwhere e1.salary > e2.salary\\n```",
                "solutionTags": [],
                "code": "```\\nSelect name as Employee from employee e\\nwhere salary > (select salary from employee where id = e.managerId)\\n```\n```\\nSelect e1.name as Employee from employee e1\\njoin employee e2\\non e2.id = e1.managerId \\nwhere e1.salary > e2.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1631594,
                "title": "very-simple-mysql-solution",
                "content": "```\\nSELECT E.name AS Employee\\nFROM Employee AS E\\nINNER JOIN Employee AS M\\nON E.managerId = M.id AND E.salary >= M.salary\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT E.name AS Employee\\nFROM Employee AS E\\nINNER JOIN Employee AS M\\nON E.managerId = M.id AND E.salary >= M.salary\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1631272,
                "title": "faster-than-80-mysql",
                "content": "select e.name as Employee from employee e,\\nemployee m where e.managerId = m.id and e.salary > m.salary",
                "solutionTags": [],
                "code": "select e.name as Employee from employee e,\\nemployee m where e.managerId = m.id and e.salary > m.salary",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1572961,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1568778,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1576584,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1987834,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1570894,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1575616,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1573335,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1572635,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1576709,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1576468,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1572961,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1568778,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1576584,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1987834,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1570894,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1575616,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1573335,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1572635,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1576709,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1576468,
                "content": [
                    {
                        "username": "s9811219",
                        "content": "Here\\'s the Mandarin Chinese version to explain this problem by two methods in MySQL.\\n\\n[**LeetCode DataBase SQL \\u89C0\\u5FF5\\u89E3\\u6790(03): #181 Employees Earning More Than Their Managers**](https://medium.com/@s9811219/leetcode-database-sql-\\u89C0\\u5FF5\\u89E3\\u6790-03-181-employees-earning-more-than-their-managers-9c0f9f66e20d)\\n\\nWelcome to discuss together & hope it will help for you!\\n\\n![image](https://assets.leetcode.com/users/s9811219/image_1566963782.png)\\n\\n\\n\\n"
                    },
                    {
                        "username": "qianquanlin2020",
                        "content": "Can someone explain how to create the e2 table? We just have one table which named Employee at first. \\n"
                    },
                    {
                        "username": "hero4future",
                        "content": "great visualization!"
                    },
                    {
                        "username": "GOGOLE",
                        "content": "### ***Solution of the Day***\\nTo understand this , you should have basic knowledge of SQL.\\nAs only used inner join :-\\n![image](https://assets.leetcode.com/users/images/e0ac892b-fcc1-4261-af2a-86a3f0538082_1655103721.5092928.gif)\\n\\nTo know more about how to use this , you can refer here\\n[https://www.w3schools.com/sql/sql_join_inner.asp])\\n\\nselect e1.name \\'Employee\\'\\nfrom employee e1 \\ninner join employee e2 on\\ne1.managerid=e2.id where e1.salary >e2.salary;"
                    },
                    {
                        "username": "flyingman",
                        "content": "\\tSelect name as Employee from Employee e1 where \\n\\tsalary > (select salary from Employee where id=e1.managerId)"
                    },
                    {
                        "username": "luqmanbayu224",
                        "content": "[@dudemsd00](/dudemsd00) \"e1\" represents an alias for the table name \"Employee\". Instead of typing Employee.managerId, you simply create a shortened name for the table. "
                    },
                    {
                        "username": "dudemsd00",
                        "content": "Hi [@Aybars Kerem](/flyingman), can you please explain me the above SQL code, I am confused about the e1?"
                    },
                    {
                        "username": "user4155ah",
                        "content": "Help me on this there only one Employee table and I dont even know who is Joe's manager.."
                    },
                    {
                        "username": "gopichands951",
                        "content": "Both employee details and manager details are given in the same table. Id column with 1,2 values are employees (Joe and Henry) and Id column with 3,4 values are managers (sam and max). So, \"if we observe the table clearly, joe\\'s manager id is 3 which is id of Sam in the table\" (And sam has null value in the managerId Column which clearly indicates that \"sam is the manager with Id value 3\") and Joe\\'s salary (70000) is greater than Sam\\'s salary(60000). "
                    },
                    {
                        "username": "exanode",
                        "content": "Question :\\nTable: Employee\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n \\n\\nWrite an SQL query to find the employees who earn more than their managers.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example.\\n\\n\\nAnswer : \\nselect e1.name Employee from Employee e1 \\nwhere e1.salary > (select e2.salary from employee e2 where e2.id = e1.managerid)"
                    },
                    {
                        "username": "zehen8838",
                        "content": "# Write your MySQL query statement below\\n# SQL SELF JOIN\\n# where the E1 table manager id is same as the employee id of the E2 table \\n# and then find the connection of E1\\'s salary is greater than E2\\'s table salary\\n\\nselect E1.name as Employee from Employee as E1 , Employee as E2 where E1.ManagerId = E2.Id and E1.salary > E2.salary\\n"
                    },
                    {
                        "username": "jfan14",
                        "content": "![image](https://assets.leetcode.com/users/jfan14/image_1578792675.png)\\n"
                    },
                    {
                        "username": "selectfromrick",
                        "content": "\\'\\'\\'\\nSELECT e1.Name AS Employee\\nFROM Employee e1\\nJOIN Employee e2\\n    ON e1.ManagerId = e2.Id AND e1.Salary > e2.Salary;\\n\\'\\'\\'\\nWith JOIN, there is no need to check e1.ManagerId IS NOT NULL in the WHERE, also  e1.Salary > e2.Salary can be moved from WHERE to JOIN.\\n\\nRuntime faster than 90%."
                    },
                    {
                        "username": "subhash186chandra",
                        "content": "\\nselect e.name  as Employee from Employee e  inner join Employee m\\non e.managerId = m.id where e.salary > m.salary;"
                    },
                    {
                        "username": "susuleung",
                        "content": "The most straighforward way probably is JOIN. However, sub query also works. \\nI add the line \"managerID IS NOT NULL\" under WHERE clause to make the logic more clearly. Since in some cases, managerId would be null. However, the downside of this line of code will make the runtime longer due to checking the table line by line.\\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE managerId IS NOT NULL\\n      AND salary > (SELECT salary FROM Employee WHERE id = e.managerId)\\n\\t  \\nIn fact, the sub_query \"SELECT salary FROM Employee WHERE id = e.managerId\" will return \\'null\\' if id = e.managerId(null). Which technically make the comparison return \\'UNKONWN\\' (cause null can be anything), and make it exclued from the result.\\n\\nSo, eventually, \"managerId IS NOT NULL\" is not necessary to include in the code. To exlcude this line of code, will improve the running time. \\n\\nSELECT name AS Employee\\nFROM Employee e\\nWHERE salary > (SELECT salary FROM Employee WHERE id = e.managerId)"
                    }
                ]
            },
            {
                "id": 1570236,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 2058172,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 1769651,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 1576382,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 1571387,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 1571388,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 1576486,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 2076387,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 2075517,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 2067679,
                "content": [
                    {
                        "username": "tye01",
                        "content": "So here\\'s my code`/* Write your T-SQL query statement below */\\nSELECT e.Name Employee\\nFROM Employee e\\nINNER JOIN Employee m ON e.ManagerId = m.Id\\nWHERE e.Salary > m.Salary`\\nThis works, but originally I added DISTINCT to the select and it failed one of the testing cases. I assume there\\'s likely employees with the same name. I would sugguest to update question to ask for employee ID instead to avoid this confusion."
                    },
                    {
                        "username": "davidalva123q",
                        "content": "It\\'s easy :\\n\\nSELECT name as Empoyee FROM Employee where name = \\'Joe\\'"
                    },
                    {
                        "username": "Abhay0901",
                        "content": "confusing question"
                    },
                    {
                        "username": "skumarnvcghd",
                        "content": "Join table with itself using inner join to find the manager using manager id and then find the row where employee salary is greater than manager.\\n\\nselect e1.name employee from Employee e1\\ninner join Employee e2 on e1.managerId = e2.id and e1.salary > e2.salary"
                    },
                    {
                        "username": "ericzkx",
                        "content": "passed 13/14 tests. Could someone could point out the mistake I made? Thank you !!\\nThe code is here:\\n\\nselect E1.Name as Employee from Employee as E1, Employee as E2 where E1.ManagerId = E2.Id and E1.Salary > E2.Salary and E1.ManagerId <> \"NULL\";\\n\\nBut if I remove the \"and E1.ManagerId <> \"NULL\", the code will pass all tests and get AC. I do not know why?\\nTHX!"
                    },
                    {
                        "username": "PeiZhang",
                        "content": "The following is my code:\\n\\nselect Distinct E1.Name Employee\\n\\nfrom Employee E1, Employee E2\\n\\nwhere E1.ManagerId = E2.Id and E1.Salary>E2.Salary\\n\\n\\nHowever, I got a wrong answer. After I checked the submission results, there are duplicates in the expected answer. So I guess the duplicates are allowed in this problem."
                    },
                    {
                        "username": "anilmangtani",
                        "content": "Mysql Code :\\nselect emp.name AS Employee from Employee as emp\\nJOIN Employee as mngr on emp.managerId = mngr.id\\nwhere emp.salary > mngr.salary;\\n\\nHere we have to use Self join to check the values of managers and employee as they are on the same table.\\nIf you have any doubt or other solution do comment it out. And If you like it do the upvote. Thanks!"
                    },
                    {
                        "username": "user5460vN",
                        "content": "select name as Employee\\nfrom Employee as a\\nwhere managerId is not null and a.salary > (select b.salary from  Employee as b\\nwhere a.managerId = b.id )\\n"
                    },
                    {
                        "username": "ranayossef95",
                        "content": "Hi , \\nin the simplest solution i can use inner join or not , some how i see the Runtime for solution without using inner join is less that time for using inner join , although for memory efficiently using join is better . right ?"
                    },
                    {
                        "username": "jtbe",
                        "content": "How do I use the ADD function here?"
                    }
                ]
            },
            {
                "id": 2053731,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1975529,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1975401,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1964524,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1945303,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1915231,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1876572,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1868080,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1839084,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1819298,
                "content": [
                    {
                        "username": "hunnymalick82",
                        "content": "select e1.name as Employee\\nfrom employee e1\\ninner join employee e2\\non e1.managerid = e2.id and e1.salary > e2.salary\\n"
                    },
                    {
                        "username": "_Tanmay",
                        "content": "[Simple Method](https://leetcode.com/problems/employees-earning-more-than-their-managers/solutions/3782520/mysql-beginner-friendly-beats-99-43/)"
                    },
                    {
                        "username": "Zivko",
                        "content": "** I used CTE to check if I am on the right way after executing only CTE. After that it was easy to select the column you need.\\n\\nWITH CTE AS\\n(SELECT e1.name AS Manager, e2.name AS Employee, e1.salary AS ManagerSalary, e2.salary AS EmployeeSalary\\nFROM Employee AS e1\\nINNER JOIN Employee AS e2\\nON e1.id = e2.managerId\\nWHERE e2.salary > e1.salary)\\n\\nSELECT Employee\\nFROM CTE\\n"
                    },
                    {
                        "username": "minhphamduy",
                        "content": "Two solution:\n1.\n`SELECT e.name AS Employee\nFROM Employee e\nJOIN Employee m ON e.managerId = m.id\nWHERE e.salary > m.salary;`\n2.\n`select e.name as Employee\nfrom employee e\nwhere e.salary > (select f.salary from employee f where f.id = e.managerId)\n`\n"
                    },
                    {
                        "username": "Bakudu",
                        "content": "Why if I simply put id=managerId, it is wrong.\\nwhy need to put table name even though it is in the same table"
                    },
                    {
                        "username": "Arin_Maity",
                        "content": "SELECT T1.name AS \\'Employee\\'\\nFROM Employee T1 JOIN Employee T2 \\nON T1.managerId = T2.id\\nWHERE T1.salary > T2.salary"
                    },
                    {
                        "username": "njambhulkar35",
                        "content": "use leftjoin also give you answere\\nselect e1.name as Employee\\nfrom employee e1\\ninner Join employee e2\\non e1.managerid=e2.id\\nwhere e1.salary>e2.salary"
                    },
                    {
                        "username": "raid7",
                        "content": "I assumed you wanted DISTINCT employees but ok"
                    },
                    {
                        "username": "Puneet72",
                        "content": "with cte as (select name ,salary ,managerId from Employee where managerId is not null),\\n\\nbl as (select id,salary from Employee where managerId is  null)\\n\\nselect name  from cte a \\nleft join bl b on a.managerId=b.id\\nwhere a.salary>b.salary\\n"
                    },
                    {
                        "username": "psychedeliccode45",
                        "content": "SELECT name as Employee from Employee WHERE name LIKE \\'Joe\\'"
                    }
                ]
            },
            {
                "id": 1806723,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1803023,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1784443,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1774156,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1769970,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1765249,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1763630,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1751178,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1745818,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            },
            {
                "id": 1730138,
                "content": [
                    {
                        "username": "pawan88821z",
                        "content": "```sql \\nselect t1.name as Employee from Employee t1, Employee t2 where t1.managerId = t2.id and t1.salary > t2.salary\\n```"
                    },
                    {
                        "username": "ShubhamShuklaManipal",
                        "content": "/* Write your PL/SQL query statement below */\\n/*Solutions by Shubham Shukla*/\\nselect e1.name as Employee \\nfrom Employee e1 join Employee e2 \\nON e1.managerId=e2.id \\nand e1.managerId is not null \\nand e1.salary > e2.salary"
                    },
                    {
                        "username": "SaChir",
                        "content": "How could it tagged as easy...."
                    },
                    {
                        "username": "omehdiakram",
                        "content": "Select name AS Employee FROM Employee E1\\nWHERE salary >= (select salary from Employee E2 where E2.id = E1.managerId )"
                    },
                    {
                        "username": "rajat397",
                        "content": "/* Write your PL/SQL query statement below */\\nselect e1.name as employee from employee e1 inner join employee e2\\non e1.managerId=e2.id \\nwhere e1.salary > e2.salary;\\n"
                    },
                    {
                        "username": "shubhampawar16298",
                        "content": "Leetcode runtime efficiency metric is so broken"
                    },
                    {
                        "username": "hero4future",
                        "content": "why is it that CTE doesn\\'t work with either MySQL and MS SQL"
                    },
                    {
                        "username": "mcjsxiaoyueyue",
                        "content": "select e.name AS Employee\\nFrom Employee e\\nJoin Employee m \\nOn e.managerId=m.id \\nWHere e.salary> m.salary"
                    },
                    {
                        "username": "gundam_exia",
                        "content": "Solution using Self Join method:\\n\\nSELECT Employee1.name AS Employee \\nFROM Employee AS Employee1, Employee AS Employee2 \\nWHERE Employee1.managerId = Employee2.id AND Employee1.salary > Employee2.salary;"
                    },
                    {
                        "username": "Shumg1803",
                        "content": "select e2.name as \"Employee\" from employee  e1  join employee e2 on e1.id = e2.managerid where e2.salary > e1.salary"
                    }
                ]
            }
        ]
    }
]