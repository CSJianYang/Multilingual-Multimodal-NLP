[
    {
        "title": "Check If Word Is Valid After Substitutions",
        "question_content": "Given a string s, determine if it is valid.\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:\n\tInsert string \"abc\" into any position in t. More formally, t becomes tleft + \"abc\" + tright, where t == tleft + tright. Note that tleft and tright may be empty.\nReturn true if s is a valid string, otherwise, return false.\n&nbsp;\nExample 1:\nInput: s = \"aabcbc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid.\nExample 2:\nInput: s = \"abcabcababcc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.\nExample 3:\nInput: s = \"abccba\"\nOutput: false\nExplanation: It is impossible to get \"abccba\" using the operation.\n&nbsp;\nConstraints:\n\t1 <= s.length <= 2 * 104\n\ts consists of letters 'a', 'b', and 'c'",
        "solutions": [
            {
                "id": 247626,
                "title": "java-python-c-stack-solution-o-n",
                "content": "## **Solution 1, Brute Force**\\n\\nBrute force using replace will get accepted. Though it\\'s not expected.\\n\\nTime complexity `O(N^2)`, space `O(N^2)` (depending on implementation).\\n**Python**\\n```\\n    def isValid(self, S):\\n        S2 = \"\"\\n        while S != S2:\\n            S, S2 = S.replace(\"abc\", \"\"), S\\n        return S == \"\"\\n```\\n<br>\\n\\n## **Solution 2**\\n\\nKeep a stack, whenever meet `\\'c\\'`,\\npop `a` and `b` at the end of stack.\\nOtherwise return `false`.\\n\\n**Java**\\n```\\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<>();\\n        for (char c: s.toCharArray()) {\\n            if (c == \\'c\\') {\\n                if (stack.isEmpty() || stack.pop() != \\'b\\') return false;\\n                if (stack.isEmpty() || stack.pop() != \\'a\\') return false;\\n            } else {\\n                stack.push(c);\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n```\\n\\n**C++**\\n```\\n    bool isValid(string S) {\\n        vector<char> stack;\\n        for (char c : S) {\\n            if (c == \\'c\\') {\\n                int n = stack.size();\\n                if (n < 2 || stack[n - 1] != \\'b\\' || stack[n - 2] != \\'a\\') return false;\\n                stack.pop_back(), stack.pop_back();\\n            } else {\\n                stack.push_back(c);\\n            }\\n        }\\n        return stack.size() == 0;\\n    }\\n```\\n\\n**Python**\\n```\\n    def isValid(self, S):\\n        stack = []\\n        for i in S:\\n            if i == \\'c\\':\\n                if stack[-2:] != [\\'a\\', \\'b\\']:\\n                    return False\\n                stack.pop()\\n                stack.pop()\\n            else:\\n                stack.append(i)\\n        return not stack\\n```\\n\\n\\n<br>\\n\\n## **Solution 3,  Accepted Wrong Solution...**\\nOne wrong solution is that check that if `count[a] >= count[b] >= count[c]` always valid.\\nIt\\'s hard for Leetcode to construct all kinds of false positive test cases.\\nOne easy counterexample can be `\"aabbcc\"`, expecting Leetcode to add it later.\\n\\n```\\n    def isValid(self, S):\\n        count = [0, 0, 0]\\n        for i in S:\\n            count[ord(i) - ord(\\'a\\')] += 1\\n            if not count[0] >= count[1] >= count[2]:\\n                return False\\n        return count[0] == count[1] == count[2]\\n```",
                "solutionTags": [],
                "code": "```\\n    def isValid(self, S):\\n        S2 = \"\"\\n        while S != S2:\\n            S, S2 = S.replace(\"abc\", \"\"), S\\n        return S == \"\"\\n```\n```\\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<>();\\n        for (char c: s.toCharArray()) {\\n            if (c == \\'c\\') {\\n                if (stack.isEmpty() || stack.pop() != \\'b\\') return false;\\n                if (stack.isEmpty() || stack.pop() != \\'a\\') return false;\\n            } else {\\n                stack.push(c);\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n```\n```\\n    bool isValid(string S) {\\n        vector<char> stack;\\n        for (char c : S) {\\n            if (c == \\'c\\') {\\n                int n = stack.size();\\n                if (n < 2 || stack[n - 1] != \\'b\\' || stack[n - 2] != \\'a\\') return false;\\n                stack.pop_back(), stack.pop_back();\\n            } else {\\n                stack.push_back(c);\\n            }\\n        }\\n        return stack.size() == 0;\\n    }\\n```\n```\\n    def isValid(self, S):\\n        stack = []\\n        for i in S:\\n            if i == \\'c\\':\\n                if stack[-2:] != [\\'a\\', \\'b\\']:\\n                    return False\\n                stack.pop()\\n                stack.pop()\\n            else:\\n                stack.append(i)\\n        return not stack\\n```\n```\\n    def isValid(self, S):\\n        count = [0, 0, 0]\\n        for i in S:\\n            count[ord(i) - ord(\\'a\\')] += 1\\n            if not count[0] >= count[1] >= count[2]:\\n                return False\\n        return count[0] == count[1] == count[2]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 247548,
                "title": "search-stack-and-2-pointers",
                "content": "**Intuition:** just do the reverse: search for \"abc\" and remove it. The string is valid if we get an empty string in the end.\\n\\n#### Simple Search Solution\\nSearch for substring, remove it, and repeat.\\n\\n**C++**\\n```cpp\\nbool isValid(string S) {\\n  for (auto i = S.find(\"abc\"); i != string::npos; i = S.find(\"abc\"))\\n    S.erase(i, 3);\\n  return S.empty();\\n}\\n```\\n**Complexity Analysis**\\n- Runtime: *O(n * n)*, where n is the number of characters. ```find``` is O(n + 3) and ```erase``` is O(n), and we repeat it n / 3 times.\\n- Memory: *O(n)*.\\n\\n#### Stack\\nWe can use a stack to build the string, removing \"abc\" as we go. This leads to a linear time complexity.\\n\\n**C++**\\n```cpp\\nbool isValid(string s) {\\n    vector<char> st;\\n    for (auto ch : s)\\n        if (ch == \\'c\\' && st.size() > 1 && st.back() == \\'b\\' && st[st.size() - 2] == \\'a\\')\\n            st.resize(st.size() - 2);\\n        else\\n            st.push_back(ch);\\n    return st.empty();\\n}\\n```\\n\\n#### 2 Pointers\\nSimilar to the stack solution, but we use a string and a pointer to build the resulting string.\\n\\n**C++**\\n```cpp\\nbool isValid(string s) {\\n    int j = 0;\\n    for (int i = 0; i < s.size(); ++i) {\\n        if (s[i] == \\'c\\' && j > 1 && s[j - 1] == \\'b\\' && s[j - 2] == \\'a\\')\\n            j -= 2;\\n        else\\n            s[j++] = s[i];\\n    }\\n    return j == 0;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nbool isValid(string S) {\\n  for (auto i = S.find(\"abc\"); i != string::npos; i = S.find(\"abc\"))\\n    S.erase(i, 3);\\n  return S.empty();\\n}\\n```\n```find```\n```erase```\n```cpp\\nbool isValid(string s) {\\n    vector<char> st;\\n    for (auto ch : s)\\n        if (ch == \\'c\\' && st.size() > 1 && st.back() == \\'b\\' && st[st.size() - 2] == \\'a\\')\\n            st.resize(st.size() - 2);\\n        else\\n            st.push_back(ch);\\n    return st.empty();\\n}\\n```\n```cpp\\nbool isValid(string s) {\\n    int j = 0;\\n    for (int i = 0; i < s.size(); ++i) {\\n        if (s[i] == \\'c\\' && j > 1 && s[j - 1] == \\'b\\' && s[j - 2] == \\'a\\')\\n            j -= 2;\\n        else\\n            s[j++] = s[i];\\n    }\\n    return j == 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 247643,
                "title": "java-3-lines-solution",
                "content": "```\\n    \\tString abc = \"abc\";\\n    \\t\\n    \\twhile(S.contains(abc)) {\\n    \\t\\tS = S.replace(abc, \"\");\\n    \\t}\\n    \\t\\n        return S.isEmpty();\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\n    \\tString abc = \"abc\";\\n    \\t\\n    \\twhile(S.contains(abc)) {\\n    \\t\\tS = S.replace(abc, \"\");\\n    \\t}\\n    \\t\\n        return S.isEmpty();\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1002730,
                "title": "c-short-o-n-time-o-1-space",
                "content": "## Solution 1.\\n\\n`j` is read pointer and `i` is write pointer. We always write `s[j]` to `s[i]`.\\n\\nIf the last 3 characters in front of `i` is `abc`, we clean them by `i -= 3`.\\n\\nIn the end, return `i == 0`.\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int i = 0, N = s.size();\\n        for (int j = 0; j < N; ++j) {\\n            s[i++] = s[j];\\n            if (i >= 3 && s[i - 3] == \\'a\\' && s[i - 2] == \\'b\\' && s[i - 1] == \\'c\\') i -= 3;\\n        }\\n        return i == 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int i = 0, N = s.size();\\n        for (int j = 0; j < N; ++j) {\\n            s[i++] = s[j];\\n            if (i >= 3 && s[i - 3] == \\'a\\' && s[i - 2] == \\'b\\' && s[i - 1] == \\'c\\') i -= 3;\\n        }\\n        return i == 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 266550,
                "title": "python-stack-o-n-solution-with-explanation",
                "content": "#### Explanation :\\n1. If length of S be less than 3, absolutely it doesn\\'t contains any *\\'abc\\'*\\n2. Create a Stack and call it **Check**.\\n3. If the last three character of **Check** be *\\'abc\\'*, remove them.*(pop, pop, pop)*\\n4. So on.\\n5. if stack be empty, return true otherwise false.\\n\\n#### Example 1 :\\n`Input: \"aabcbc\"`\\n1. Check = [a]\\n2. Check = [a, a]\\n3. Check = [a, a, b]\\n4. Check = [a, **a, b, c**], Remove a,b,c (pop, pop , pop), Then Check = [a]\\n5. Check = [a, b]\\n6. Check = [**a, b, c**], Remove a,b,c (pop, pop , pop), Then Check = []\\n7. Check is Empty, Return `True`.\\n\\n#### Example 2 :\\n`Input: \"abcaba\"`\\n1. Check = [a]\\n2. Check = [a, b]\\n3. Check = [a, **a, b, c**], Remove a,b,c (pop, pop , pop), Then Check = [a]\\n4. Check = [a, b]\\n5. Check = [a, b, a]\\n6. Check is not Empty, Return `False`.\\n\\n#### Code : \\n```\\ndef isValid(self, S: str) -> bool:\\n    if len(S)<3:\\n        return False\\n    check=[]\\n    for c in S:\\n        check.append(c)\\n        if len(check)>=3:\\n            if check[-1]==\\'c\\' and check[-2]==\\'b\\' and check[-3]==\\'a\\': #three last characters be a,b,c\\n                check.pop()\\n                check.pop()\\n                check.pop()\\n    return not check \\'\\'\\'means check == []\\'\\'\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Stack"
                ],
                "code": "```\\ndef isValid(self, S: str) -> bool:\\n    if len(S)<3:\\n        return False\\n    check=[]\\n    for c in S:\\n        check.append(c)\\n        if len(check)>=3:\\n            if check[-1]==\\'c\\' and check[-2]==\\'b\\' and check[-3]==\\'a\\': #three last characters be a,b,c\\n                check.pop()\\n                check.pop()\\n                check.pop()\\n    return not check \\'\\'\\'means check == []\\'\\'\\'\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 263378,
                "title": "java-easy-understanding-solution",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        Stack<Character> stack = new Stack<>();\\n        for(char curr: S.toCharArray()) {\\n            if(curr == \\'a\\'){\\n                stack.push(\\'c\\');\\n                stack.push(\\'b\\');\\n            }else if(stack.isEmpty() || stack.pop() != curr) return false;\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        Stack<Character> stack = new Stack<>();\\n        for(char curr: S.toCharArray()) {\\n            if(curr == \\'a\\'){\\n                stack.push(\\'c\\');\\n                stack.push(\\'b\\');\\n            }else if(stack.isEmpty() || stack.pop() != curr) return false;\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1340880,
                "title": "java-92-faster-6-ms-4-lines-of-clean-code",
                "content": "<-----**If you like the solution . Kindly UPvote for better reach**\\n```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while(s.contains(\"abc\"))\\n            s=s.replace(\"abc\",\"\"); \\n\\t\\tif(s.isEmpty())\\n\\t\\t\\treturn true;\\n        return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while(s.contains(\"abc\"))\\n            s=s.replace(\"abc\",\"\"); \\n\\t\\tif(s.isEmpty())\\n\\t\\t\\treturn true;\\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 247653,
                "title": "c-easy-short-solution",
                "content": "class Solution {\\npublic:\\n    bool isValid(string S) {\\n        \\n        while(!S.empty())\\n        {\\n            auto posn = S.find( \"abc\" );\\n            if( posn == string::npos )\\n                return 0;\\n            S.erase(posn, 3 );\\n        }\\n        return 1;\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    bool isValid(string S) {\\n        \\n        while(!S.empty())\\n        {\\n            auto posn = S.find( \"abc\" );\\n            if( posn == string::npos )\\n                return 0;\\n            S.erase(posn, 3 );\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 700237,
                "title": "simple-c-solution-using-stack-32ms",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string S) {\\n        stack<char>stk ;\\n        for(int i=0;i<S.length();i++){\\n            if(S[i]==\\'a\\'){\\n                stk.push(S[i]);\\n            }else if(S[i]==\\'b\\'){\\n                if(stk.empty()==true || stk.top()!=\\'a\\')return false;\\n                stk.push(S[i]);   \\n            }else if(S[i]==\\'c\\'){\\n                if(stk.empty() || stk.top()!=\\'b\\')return false;\\n                stk.pop();\\n                if(stk.empty() || stk.top()!=\\'a\\')return false;\\n                stk.pop();\\n            }else{\\n                return false;\\n            }\\n        }\\n        return stk.empty()==true; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string S) {\\n        stack<char>stk ;\\n        for(int i=0;i<S.length();i++){\\n            if(S[i]==\\'a\\'){\\n                stk.push(S[i]);\\n            }else if(S[i]==\\'b\\'){\\n                if(stk.empty()==true || stk.top()!=\\'a\\')return false;\\n                stk.push(S[i]);   \\n            }else if(S[i]==\\'c\\'){\\n                if(stk.empty() || stk.top()!=\\'b\\')return false;\\n                stk.pop();\\n                if(stk.empty() || stk.top()!=\\'a\\')return false;\\n                stk.pop();\\n            }else{\\n                return false;\\n            }\\n        }\\n        return stk.empty()==true; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 651582,
                "title": "o-n-similar-to-parenthesis-solved-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s.length()==0)   return true;\\n        if(s.length()%3!=0) return false;   // return false as string must ave equal no of a,b and c\\n        \\n        stack<char> sk;\\n        for(auto i:s)\\n        {\\n            if(i!=\\'c\\')          // if char encountered is not \\'c\\' then push\\n                sk.push(i);\\n            else\\n            {       // once we encounter \\'c\\' we must have preceding  \"ab\"\\n                    // else seq is not valid\\n                if(sk.size()>=2)\\n                {\\n                    if(sk.top()==\\'b\\')       \\n                    {\\n                        sk.pop();\\n                        if(sk.top()==\\'a\\')   // now checking for \\'a\\' to make sequence valid\\n                            sk.pop();\\n                        else\\n                            return false;\\n                    }\\n                    else\\n                        return false;\\n                }\\n            }\\n        }\\n        return (sk.size()==0) ? true : false;        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s.length()==0)   return true;\\n        if(s.length()%3!=0) return false;   // return false as string must ave equal no of a,b and c\\n        \\n        stack<char> sk;\\n        for(auto i:s)\\n        {\\n            if(i!=\\'c\\')          // if char encountered is not \\'c\\' then push\\n                sk.push(i);\\n            else\\n            {       // once we encounter \\'c\\' we must have preceding  \"ab\"\\n                    // else seq is not valid\\n                if(sk.size()>=2)\\n                {\\n                    if(sk.top()==\\'b\\')       \\n                    {\\n                        sk.pop();\\n                        if(sk.top()==\\'a\\')   // now checking for \\'a\\' to make sequence valid\\n                            sk.pop();\\n                        else\\n                            return false;\\n                    }\\n                    else\\n                        return false;\\n                }\\n            }\\n        }\\n        return (sk.size()==0) ? true : false;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 247546,
                "title": "simple-python-stack-based-solution",
                "content": "Very simple logic. \\nIf you see a \\'c\\', check if there is \\'a\\' and \\'b\\'  in stack.\\n\\n```\\ndef isValid(self, S: str) -> bool:\\n        stack = []\\n        for i in range(len(S)):\\n            if S[i] == \\'c\\':\\n                if not stack or stack.pop() != \\'b\\': return False\\n                if not stack or stack.pop() != \\'a\\': return False\\n            else:\\n                stack.append(S[i])\\n        return len(stack) == 0\\n```",
                "solutionTags": [],
                "code": "```\\ndef isValid(self, S: str) -> bool:\\n        stack = []\\n        for i in range(len(S)):\\n            if S[i] == \\'c\\':\\n                if not stack or stack.pop() != \\'b\\': return False\\n                if not stack or stack.pop() != \\'a\\': return False\\n            else:\\n                stack.append(S[i])\\n        return len(stack) == 0\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3067699,
                "title": "java-c-100-solution-using-stack-check-if-word-is-valid-after-substitutions",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```Java []\\nclass Solution {\\n    public boolean isValid(String s) {\\n        int n = s.length();\\n        Stack<Character> stk = new Stack<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            stk.push(s.charAt(i));\\n            if(s.charAt(i)==\\'c\\' && stk.size()>=3)\\n            {\\n                char c,b,a;\\n                c = stk.pop();\\n                b = stk.pop();\\n                a = stk.pop();\\n                if(a==\\'a\\' && b==\\'b\\' && c==\\'c\\')\\n                {\\n                    //Ignore\\n                }\\n                else\\n                {\\n                    stk.push(a);\\n                    stk.push(b);\\n                    stk.push(c);\\n                }\\n            }\\n            else if(s.charAt(i)==\\'c\\')\\n                return false;\\n        }\\n        return stk.empty();\\n    }\\n}\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n = s.size();\\n        stack<char> stk;\\n        for(int i=0;i<n;i++)\\n        {\\n            stk.push(s[i]);\\n            if(s[i]==\\'c\\' && stk.size()>=3)\\n            {\\n                char c,b,a;\\n                c = stk.top();\\n                stk.pop();\\n                b = stk.top();\\n                stk.pop();\\n                a = stk.top();\\n                stk.pop();\\n                if(a==\\'a\\' && b==\\'b\\' && c==\\'c\\')\\n                {\\n                    //Ignore\\n                }\\n                else\\n                {\\n                    stk.push(a);\\n                    stk.push(b);\\n                    stk.push(c);\\n                }\\n            }\\n            else if(s[i]==\\'c\\')\\n                return false;\\n        }\\n        return stk.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```Java []\\nclass Solution {\\n    public boolean isValid(String s) {\\n        int n = s.length();\\n        Stack<Character> stk = new Stack<>();\\n        for(int i=0;i<n;i++)\\n        {\\n            stk.push(s.charAt(i));\\n            if(s.charAt(i)==\\'c\\' && stk.size()>=3)\\n            {\\n                char c,b,a;\\n                c = stk.pop();\\n                b = stk.pop();\\n                a = stk.pop();\\n                if(a==\\'a\\' && b==\\'b\\' && c==\\'c\\')\\n                {\\n                    //Ignore\\n                }\\n                else\\n                {\\n                    stk.push(a);\\n                    stk.push(b);\\n                    stk.push(c);\\n                }\\n            }\\n            else if(s.charAt(i)==\\'c\\')\\n                return false;\\n        }\\n        return stk.empty();\\n    }\\n}\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n = s.size();\\n        stack<char> stk;\\n        for(int i=0;i<n;i++)\\n        {\\n            stk.push(s[i]);\\n            if(s[i]==\\'c\\' && stk.size()>=3)\\n            {\\n                char c,b,a;\\n                c = stk.top();\\n                stk.pop();\\n                b = stk.top();\\n                stk.pop();\\n                a = stk.top();\\n                stk.pop();\\n                if(a==\\'a\\' && b==\\'b\\' && c==\\'c\\')\\n                {\\n                    //Ignore\\n                }\\n                else\\n                {\\n                    stk.push(a);\\n                    stk.push(b);\\n                    stk.push(c);\\n                }\\n            }\\n            else if(s[i]==\\'c\\')\\n                return false;\\n        }\\n        return stk.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1830729,
                "title": "easy-c-stack-solution",
                "content": "```\\nbool isValid(string s) {\\n        stack<char> st;\\n        unordered_map<char,int> m;\\n        for(auto it : s){\\n            m[it]++;\\n        }\\n        if(m[\\'a\\']!=m[\\'b\\']) return false;\\n        if(m[\\'a\\']!=m[\\'c\\']) return false;\\n        if(m[\\'b\\']!=m[\\'c\\']) return false;\\n        int n = s.size();\\n        for(int i=0;i<n;i++){\\n            if(!st.empty() and st.top()==\\'a\\' and s[i]==\\'b\\') st.push(s[i]);\\n            else if(!st.empty() and st.top()==\\'b\\' and s[i]==\\'c\\'){\\n                st.pop();\\n                if(!st.empty())\\n                st.pop();\\n            }\\n            else st.push(s[i]);\\n        }\\n        if(st.empty()) return true;\\n        return false;\\n    }",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nbool isValid(string s) {\\n        stack<char> st;\\n        unordered_map<char,int> m;\\n        for(auto it : s){\\n            m[it]++;\\n        }\\n        if(m[\\'a\\']!=m[\\'b\\']) return false;\\n        if(m[\\'a\\']!=m[\\'c\\']) return false;\\n        if(m[\\'b\\']!=m[\\'c\\']) return false;\\n        int n = s.size();\\n        for(int i=0;i<n;i++){\\n            if(!st.empty() and st.top()==\\'a\\' and s[i]==\\'b\\') st.push(s[i]);\\n            else if(!st.empty() and st.top()==\\'b\\' and s[i]==\\'c\\'){\\n                st.pop();\\n                if(!st.empty())\\n                st.pop();\\n            }\\n            else st.push(s[i]);\\n        }\\n        if(st.empty()) return true;\\n        return false;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1198831,
                "title": "python3-using-stack",
                "content": "\\tclass Solution:\\n\\t\\tdef isValid(self, s: str) -> bool:\\n\\t\\t\"\"\"\\n\\t\\tWe can consider this problem as a valid parenthesis, \\n\\t\\twhere for every \\'a\\' there must be \\'b\\' and for every \\'b\\' there must be \\'c\\'.\\n\\t\\tWe can use stack to track the elements.\\n\\t\\t\"\"\"\\n\\t\\t\\t# the  first ch must be \\'a\\' and last ch must be \\'c\\'\\n\\t\\t\\tif s[0] != \\'a\\' or s[-1]!=\\'c\\':\\n\\t\\t\\t\\treturn False\\n\\n\\t\\t\\tstack = []\\n\\n\\t\\t\\tfor i in range(len(s)):\\n\\t\\t\\t\\tch = s[i]\\n\\t\\t\\t\\t# if ch is \\'a\\' or \\'b\\' then simply append it into the stack\\n\\t\\t\\t\\tif ch == \\'a\\' or ch == \\'b\\':\\n\\t\\t\\t\\t\\tstack.append(ch)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t# this means if ch is \\'c\\' then there must be \\'b\\' on the top of the stack\\n\\t\\t\\t\\t\\tif len(stack)==0 or stack[-1]!=\\'b\\':\\n\\t\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t# there must be \\'a\\' on the top of the stack after popping out \\'b\\'\\n\\t\\t\\t\\t\\tif len(stack) == 0 or stack[-1]!=\\'a\\':\\n\\t\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\t\\tstack.pop()\\n\\n\\t\\t\\t# if the string is valid, the stack must be empty in the end\\n\\t\\t\\treturn len(stack) == 0\\n\\n",
                "solutionTags": [
                    "Python",
                    "Stack"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef isValid(self, s: str) -> bool:\\n\\t\\t\"\"\"\\n\\t\\tWe can consider this problem as a valid parenthesis, \\n\\t\\twhere for every \\'a\\' there must be \\'b\\' and for every \\'b\\' there must be \\'c\\'.\\n\\t\\tWe can use stack to track the elements.\\n\\t\\t\"\"\"\\n\\t\\t\\t# the  first ch must be \\'a\\' and last ch must be \\'c\\'\\n\\t\\t\\tif s[0] != \\'a\\' or s[-1]!=\\'c\\':\\n\\t\\t\\t\\treturn False\\n\\n\\t\\t\\tstack = []\\n\\n\\t\\t\\tfor i in range(len(s)):\\n\\t\\t\\t\\tch = s[i]\\n\\t\\t\\t\\t# if ch is \\'a\\' or \\'b\\' then simply append it into the stack\\n\\t\\t\\t\\tif ch == \\'a\\' or ch == \\'b\\':\\n\\t\\t\\t\\t\\tstack.append(ch)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t# this means if ch is \\'c\\' then there must be \\'b\\' on the top of the stack\\n\\t\\t\\t\\t\\tif len(stack)==0 or stack[-1]!=\\'b\\':\\n\\t\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t# there must be \\'a\\' on the top of the stack after popping out \\'b\\'\\n\\t\\t\\t\\t\\tif len(stack) == 0 or stack[-1]!=\\'a\\':\\n\\t\\t\\t\\t\\t\\treturn False\\n\\t\\t\\t\\t\\tstack.pop()\\n\\n\\t\\t\\t# if the string is valid, the stack must be empty in the end\\n\\t\\t\\treturn len(stack) == 0\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 1191183,
                "title": "94-faster-java-2-line-solution",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while (s.contains(\"abc\")) s = s.replace(\"abc\", \"\");\\n        return s.equals(\"\");\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while (s.contains(\"abc\")) s = s.replace(\"abc\", \"\");\\n        return s.equals(\"\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 778791,
                "title": "short-iterative-python-o-n-stack-solution",
                "content": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        stack = []\\n        for ch in S:\\n            if ch == \\'c\\':\\n                if len(stack) < 2 or stack.pop() != \\'b\\' or stack.pop() != \\'a\\':\\n                    return False\\n            else:\\n                stack.append(ch)\\n        \\n        return not stack\\n```",
                "solutionTags": [
                    "Python3",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        stack = []\\n        for ch in S:\\n            if ch == \\'c\\':\\n                if len(stack) < 2 or stack.pop() != \\'b\\' or stack.pop() != \\'a\\':\\n                    return False\\n            else:\\n                stack.append(ch)\\n        \\n        return not stack\\n```",
                "codeTag": "Java"
            },
            {
                "id": 447844,
                "title": "3-lines-java-solution-use-recursion",
                "content": "```\\npublic boolean isValid(String S) {\\n        if (S.isEmpty()) return true;\\n        if (!S.contains(\"abc\")) return false;\\n        return isValid(S.replace(\"abc\", \"\"));\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean isValid(String S) {\\n        if (S.isEmpty()) return true;\\n        if (!S.contains(\"abc\")) return false;\\n        return isValid(S.replace(\"abc\", \"\"));\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 250085,
                "title": "java-o-n-time-o-1-space",
                "content": "Hi, this is a combination of counting occurrences of characters, and not allowing certain characters to appear after others. For example, it is simple to deduce that \"b\" can never appear after another \"b\", and \"c\" can never appear after an \"a\". \\n\\nSo we scan first to check for wrong occurrences, and then we scan again to count the occurrences of each character. In the second loop, we are careful not to have more \"b\\'s\" than \"a\\'s\" or more \"c\\'s\" than \"b\\'s\". \\n\\n````\\nclass Solution {\\n    public boolean isValid(String S) {\\n        int[] abc = new int[3];\\n        if(S.length() < 3) return false;\\n        char f = S.charAt(0);\\n        for(int i = 1; i < S.length(); i++){\\n            if(f == \\'a\\'){\\n                if(S.charAt(i) == \\'c\\') return false;\\n            }\\n            else if(f == \\'b\\'){\\n                if(S.charAt(i) == \\'b\\') return false;\\n            }\\n            f = S.charAt(i);\\n        }\\n        for(int i = 0; i < S.length(); i++){\\n            char c = S.charAt(i);\\n            if(c == \\'a\\'){\\n                abc[0]++;\\n            }\\n            if(c == \\'b\\'){\\n                if(abc[1] >= abc[0]) return false;\\n                abc[1]++;\\n            }\\n            if(c == \\'c\\'){\\n                if(abc[2] >= abc[1]) return false;\\n                abc[2]++;\\n            }\\n        }\\n        \\n        return abc[0] == abc[1] && abc[1] == abc[2];\\n    }\\n}\\n````",
                "solutionTags": [],
                "code": "````\\nclass Solution {\\n    public boolean isValid(String S) {\\n        int[] abc = new int[3];\\n        if(S.length() < 3) return false;\\n        char f = S.charAt(0);\\n        for(int i = 1; i < S.length(); i++){\\n            if(f == \\'a\\'){\\n                if(S.charAt(i) == \\'c\\') return false;\\n            }\\n            else if(f == \\'b\\'){\\n                if(S.charAt(i) == \\'b\\') return false;\\n            }\\n            f = S.charAt(i);\\n        }\\n        for(int i = 0; i < S.length(); i++){\\n            char c = S.charAt(i);\\n            if(c == \\'a\\'){\\n                abc[0]++;\\n            }\\n            if(c == \\'b\\'){\\n                if(abc[1] >= abc[0]) return false;\\n                abc[1]++;\\n            }\\n            if(c == \\'c\\'){\\n                if(abc[2] >= abc[1]) return false;\\n                abc[2]++;\\n            }\\n        }\\n        \\n        return abc[0] == abc[1] && abc[1] == abc[2];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2892010,
                "title": "cpp-must-see-very-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) \\n\\t{\\n       stack<char>stk;\\n\\t   int idx = 0;\\n\\t   \\n\\t   while(idx < s.length())\\n\\t   {\\n\\t       char ch = s[idx];\\n           \\n           if(ch == \\'a\\')\\n           { \\n           \\t   stk.push(ch);\\n\\t\\t   }\\n\\t\\t   else if(ch == \\'b\\')\\n\\t\\t   {\\n\\t\\t   \\t   stk.push(ch);\\n\\t\\t   }\\n\\t\\t   else if(ch == \\'c\\')\\n\\t\\t   {\\n\\t\\t   \\t    if(stk.size() >= 2)\\n\\t\\t   \\t    {\\n\\t\\t   \\t         char ch2 = stk.top();\\n\\t\\t   \\t         stk.pop();\\n\\t\\t\\t\\t\\t char ch1 = stk.top();\\t\\n\\t\\t\\t\\t\\t stk.pop();\\n\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t if(!(ch1==\\'a\\' and ch2==\\'b\\' and ch==\\'c\\'))\\n\\t\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t \\t stk.push(ch1);\\n\\t\\t\\t\\t\\t \\t stk.push(ch2);\\n\\t\\t\\t\\t\\t \\t stk.push(ch);\\n\\t\\t\\t\\t\\t }\\n\\t\\t        } \\n\\t\\t   }\\n\\t\\t   idx++;\\n\\t   }    \\n\\t   if(stk.empty()==true and idx>=s.length())\\n\\t   return true;\\n\\t   \\n\\t   return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) \\n\\t{\\n       stack<char>stk;\\n\\t   int idx = 0;\\n\\t   \\n\\t   while(idx < s.length())\\n\\t   {\\n\\t       char ch = s[idx];\\n           \\n           if(ch == \\'a\\')\\n           { \\n           \\t   stk.push(ch);\\n\\t\\t   }\\n\\t\\t   else if(ch == \\'b\\')\\n\\t\\t   {\\n\\t\\t   \\t   stk.push(ch);\\n\\t\\t   }\\n\\t\\t   else if(ch == \\'c\\')\\n\\t\\t   {\\n\\t\\t   \\t    if(stk.size() >= 2)\\n\\t\\t   \\t    {\\n\\t\\t   \\t         char ch2 = stk.top();\\n\\t\\t   \\t         stk.pop();\\n\\t\\t\\t\\t\\t char ch1 = stk.top();\\t\\n\\t\\t\\t\\t\\t stk.pop();\\n\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t if(!(ch1==\\'a\\' and ch2==\\'b\\' and ch==\\'c\\'))\\n\\t\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t \\t stk.push(ch1);\\n\\t\\t\\t\\t\\t \\t stk.push(ch2);\\n\\t\\t\\t\\t\\t \\t stk.push(ch);\\n\\t\\t\\t\\t\\t }\\n\\t\\t        } \\n\\t\\t   }\\n\\t\\t   idx++;\\n\\t   }    \\n\\t   if(stk.empty()==true and idx>=s.length())\\n\\t   return true;\\n\\t   \\n\\t   return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2653460,
                "title": "c-easy-to-understand-detailed",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n   bool isValid(string S) {\\n        vector<char> stack;\\n        for (char c : S) {\\n            if (c == \\'c\\') {\\n                int n = stack.size();\\n                if (n < 2 || stack[n - 1] != \\'b\\' || stack[n - 2] != \\'a\\') return false;\\n                stack.pop_back(), stack.pop_back();\\n            } else {\\n                stack.push_back(c);\\n            }\\n        }\\n        return stack.size() == 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   bool isValid(string S) {\\n        vector<char> stack;\\n        for (char c : S) {\\n            if (c == \\'c\\') {\\n                int n = stack.size();\\n                if (n < 2 || stack[n - 1] != \\'b\\' || stack[n - 2] != \\'a\\') return false;\\n                stack.pop_back(), stack.pop_back();\\n            } else {\\n                stack.push_back(c);\\n            }\\n        }\\n        return stack.size() == 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2276513,
                "title": "java-o-n-solution",
                "content": "In this approach we are simply checking character by character,\\n* if character is not \\'c\\' simply push it in the stack.\\n* if the character is \\'c\\'  and stack\\'s top most element is \\'b\\' pop it and then check if the top most element now is \\'a\\' if so pop it.\\n\\nsimply after completely checking the string character by character, and popping out \\'b\\' then \\'a\\' (whenever \\'c\\' comes,) we are able to pop out all \\'abc\\'s, now we will check if the stack is empty or not, well it should be if the word is valid because, we popped out all the \\'abc\\'s so anything remaining in the stack is a clear indication that something is there which is making the string invalid, so return true if stack is empty otherwise false.\\n\\nNote: Refer the code below after reading above approach for better understanding.\\n\\n```class Solution {\\n    public boolean isValid(String s) {\\n        \\n        \\n           Stack<Character> st = new Stack<>();\\n    \\n    for(int i=0;i<s.length();i++){\\n        \\n        char ch = s.charAt(i);\\n        \\n        if(ch == \\'a\\' || ch == \\'b\\'){\\n            st.push(ch);\\n        }\\n        else{\\n                \\n                if(st.size()>0 && st.peek() == \\'b\\'){\\n                    st.pop();\\n                }\\n                else{\\n                    return false;\\n                }\\n                \\n                if(st.size()>0 && st.peek()==\\'a\\'){\\n                    st.pop();\\n                }\\n                else{\\n                    return false;\\n                }\\n                \\n        }\\n        \\n    }\\n        \\nif(st.size()==0){\\n    return true;\\n}\\n    return false;\\n    }\\n}```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```class Solution {\\n    public boolean isValid(String s) {\\n        \\n        \\n           Stack<Character> st = new Stack<>();\\n    \\n    for(int i=0;i<s.length();i++){\\n        \\n        char ch = s.charAt(i);\\n        \\n        if(ch == \\'a\\' || ch == \\'b\\'){\\n            st.push(ch);\\n        }\\n        else{\\n                \\n                if(st.size()>0 && st.peek() == \\'b\\'){\\n                    st.pop();\\n                }\\n                else{\\n                    return false;\\n                }\\n                \\n                if(st.size()>0 && st.peek()==\\'a\\'){\\n                    st.pop();\\n                }\\n                else{\\n                    return false;\\n                }\\n                \\n        }\\n        \\n    }\\n        \\nif(st.size()==0){\\n    return true;\\n}\\n    return false;\\n    }\\n}```",
                "codeTag": "Java"
            },
            {
                "id": 937857,
                "title": "easy-to-understand-c-solution-18-fast-beginner-friendly",
                "content": "The idea behind this solution is to check for the substring \"abc\" and erase when found. If there is a leftover string that cannot fit into a component \"abc\", we know that the string cannot be formed with the given rules. \\n\\nAn optimisation is added to increasing runtime with this method. \\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s[0]!=\\'a\\'||s.size()%3!=0){//Quick and easy optimisation, check if the whole string starts with \\'a\\', and if the length is a multiple of 3.\\n            return false;\\n        }\\n        string phrase=\"abc\";\\n        while(!s.empty()){\\n            int start_point=s.find(\"abc\");\\n            if(start_point==string::npos){\\n                if(!s.empty()){\\n                    return false;\\n                }\\n            }\\n            else{\\n                s.erase(start_point,3);\\n            }\\n        }\\n        return true;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s[0]!=\\'a\\'||s.size()%3!=0){//Quick and easy optimisation, check if the whole string starts with \\'a\\', and if the length is a multiple of 3.\\n            return false;\\n        }\\n        string phrase=\"abc\";\\n        while(!s.empty()){\\n            int start_point=s.find(\"abc\");\\n            if(start_point==string::npos){\\n                if(!s.empty()){\\n                    return false;\\n                }\\n            }\\n            else{\\n                s.erase(start_point,3);\\n            }\\n        }\\n        return true;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 651234,
                "title": "one-line-java-solution",
                "content": "```return S.isEmpty()|| (S.contains(\"abc\") && isValid(S.replaceAll(\"abc\",\"\")));```",
                "solutionTags": [],
                "code": "```return S.isEmpty()|| (S.contains(\"abc\") && isValid(S.replaceAll(\"abc\",\"\")));```",
                "codeTag": "Unknown"
            },
            {
                "id": 362940,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String S) {// \\u6BCF\\u6B21\\u628Aabc\\u66FF\\u6362\\u6389\\uFF0C\\u53EA\\u8981\\u770B\\u6700\\u7EC8\\u662F\\u4E0D\\u662F\\u7A7A\\u5C31\\u884C\\n        if (S.equals(\"\"))\\n\\t\\t\\treturn true;\\n\\t\\telse {\\n\\t\\t\\tif (S.contains(\"abc\")) {\\n\\t\\t\\t\\tS = S.replace(\"abc\", \"\");\\n\\t\\t\\t\\treturn isValid(S);\\n\\t\\t\\t} else\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String S) {// \\u6BCF\\u6B21\\u628Aabc\\u66FF\\u6362\\u6389\\uFF0C\\u53EA\\u8981\\u770B\\u6700\\u7EC8\\u662F\\u4E0D\\u662F\\u7A7A\\u5C31\\u884C\\n        if (S.equals(\"\"))\\n\\t\\t\\treturn true;\\n\\t\\telse {\\n\\t\\t\\tif (S.contains(\"abc\")) {\\n\\t\\t\\t\\tS = S.replace(\"abc\", \"\");\\n\\t\\t\\t\\treturn isValid(S);\\n\\t\\t\\t} else\\n\\t\\t\\t\\treturn false;\\n\\t\\t}\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 247569,
                "title": "easy-to-understand-python-solution",
                "content": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        A = [\\'abc\\' * i for i in range(6667)]\\n        if S in A:\\n            return True\\n        while len(S)>3:\\n            if \\'abc\\' in S:\\n                S = S.replace(\\'abc\\',\\'\\')\\n            else:\\n                return False\\n        if S == \\'abc\\':\\n            return True\\n        return False\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        A = [\\'abc\\' * i for i in range(6667)]\\n        if S in A:\\n            return True\\n        while len(S)>3:\\n            if \\'abc\\' in S:\\n                S = S.replace(\\'abc\\',\\'\\')\\n            else:\\n                return False\\n        if S == \\'abc\\':\\n            return True\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3886246,
                "title": "stack-valid-parentheses-easy-c",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse a **Stack** to Solve This Problem. This Problem is Exactly **Same as Valid Parenthesis**.\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<string> st;\\n        for(int i = 0;i<s.size();i++)\\n        {   \\n            string str(1,s[i]);\\n            if(st.empty()) st.push(str);\\n            else\\n            {\\n                string tmp = st.top();\\n                if(s[i]-tmp[tmp.size()-1]==1)\\n                {\\n                   st.pop();\\n                   tmp+=s[i]; \\n                   if(tmp.size()<3) st.push(tmp);\\n                } \\n                else st.push(str);\\n            }\\n        }\\n        return st.size()==0;\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/923dbf6a-8105-4923-a6d7-1e83b9ff7202_1691585643.2219536.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<string> st;\\n        for(int i = 0;i<s.size();i++)\\n        {   \\n            string str(1,s[i]);\\n            if(st.empty()) st.push(str);\\n            else\\n            {\\n                string tmp = st.top();\\n                if(s[i]-tmp[tmp.size()-1]==1)\\n                {\\n                   st.pop();\\n                   tmp+=s[i]; \\n                   if(tmp.size()<3) st.push(tmp);\\n                } \\n                else st.push(str);\\n            }\\n        }\\n        return st.size()==0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3072025,
                "title": "js-t-100-s-100",
                "content": "# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nvar isValid = function (s) {\\n  while (s.length) {\\n    if (s.indexOf(\"abc\") === -1) break;\\n    s = s.replaceAll(\"abc\", \"\");\\n  }\\n  return !s.length;\\n};\\n\\n```\\n\\n![1.jpg](https://assets.leetcode.com/users/images/1420e185-6a39-4562-bae9-f43367ef5587_1674118852.2081017.jpeg)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isValid = function (s) {\\n  while (s.length) {\\n    if (s.indexOf(\"abc\") === -1) break;\\n    s = s.replaceAll(\"abc\", \"\");\\n  }\\n  return !s.length;\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3069665,
                "title": "7ms-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem is asking to determine if a given string s is valid, where a valid string is one in which c can only be present if it is immediately preceded by b and b is immediately preceded by a. My first thoughts would be to use a stack data structure to keep track of the characters in the string and check if the conditions are met.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMy approach is to iterate through the characters in the string and for each character, if the current character is c, I will check if the stack has at least two elements and the top element is b, and if so, I will pop b and check if the new top element is a. If it is not, the string is not valid. If the current character is not c, I will push it onto the stack. After iterating through the string, I will check if the stack is empty and return True if it is, indicating that the string is valid. Otherwise, I will return False.\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st;\\n        for (char c : s) {\\n            if (c == \\'c\\') {\\n                if (st.size() < 2 || st.top() != \\'b\\') return false;\\n                st.pop();\\n                if (st.top() != \\'a\\') return false;\\n                st.pop();\\n            } else st.push(c);\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st;\\n        for (char c : s) {\\n            if (c == \\'c\\') {\\n                if (st.size() < 2 || st.top() != \\'b\\') return false;\\n                st.pop();\\n                if (st.top() != \\'a\\') return false;\\n                st.pop();\\n            } else st.push(c);\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2658673,
                "title": "java-one-pass",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n            public boolean isValid(String s) {\\n        // Stack<Character> stack = new Stack<>();\\n        // for (char c: s.toCharArray()) {\\n        //     if (c == \\'c\\') {\\n        //         if (stack.isEmpty() || stack.pop() != \\'b\\') return false;\\n        //         if (stack.isEmpty() || stack.pop() != \\'a\\') return false;\\n        //     } else {\\n        //         stack.push(c);\\n        //     }\\n        // }\\n        // return stack.isEmpty();\\n        while(s.contains(\"abc\"))s=s.replace(\"abc\",\"\");\\n        return s==\"\";\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n            public boolean isValid(String s) {\\n        // Stack<Character> stack = new Stack<>();\\n        // for (char c: s.toCharArray()) {\\n        //     if (c == \\'c\\') {\\n        //         if (stack.isEmpty() || stack.pop() != \\'b\\') return false;\\n        //         if (stack.isEmpty() || stack.pop() != \\'a\\') return false;\\n        //     } else {\\n        //         stack.push(c);\\n        //     }\\n        // }\\n        // return stack.isEmpty();\\n        while(s.contains(\"abc\"))s=s.replace(\"abc\",\"\");\\n        return s==\"\";\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2238315,
                "title": "easy-simple-stack-and-string-replace-approaches",
                "content": "### Without Stack Approach\\n```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        incomplete = True\\n        \\n        while incomplete:\\n            if \\'abc\\' in s:\\n                s= s.replace(\\'abc\\',\\'\\')\\n            else:\\n                incomplete = False\\n        \\n        return s == \\'\\'\\n```\\n\\n### With Stack Approach\\n```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        \\n        for i in s:\\n            if i == \\'c\\' and len(stack) >= 2 and stack[-1] == \\'b\\' and stack[-2] == \\'a\\':\\n                stack.pop()\\n                stack.pop()\\n            else:\\n                stack.append(i)\\n        \\n        if \\'\\'.join(stack) == \\'abc\\': stack = []\\n            \\n        return stack == []\\n```                \\n**Please upvote if this helped! :)**\\n\\t\\t\\n\\t\\t",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        incomplete = True\\n        \\n        while incomplete:\\n            if \\'abc\\' in s:\\n                s= s.replace(\\'abc\\',\\'\\')\\n            else:\\n                incomplete = False\\n        \\n        return s == \\'\\'\\n```\n```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        \\n        for i in s:\\n            if i == \\'c\\' and len(stack) >= 2 and stack[-1] == \\'b\\' and stack[-2] == \\'a\\':\\n                stack.pop()\\n                stack.pop()\\n            else:\\n                stack.append(i)\\n        \\n        if \\'\\'.join(stack) == \\'abc\\': stack = []\\n            \\n        return stack == []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1344384,
                "title": "java-92-faster-3-lines-of-code",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while (s.contains(\"abc\"))\\n            s = s.replace(\"abc\", \"\");\\n        return s.length() == 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while (s.contains(\"abc\"))\\n            s = s.replace(\"abc\", \"\");\\n        return s.length() == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1291378,
                "title": "python-solution-using-stack",
                "content": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack=[]\\n        for i in s:\\n            if i == \\'a\\':stack.append(i)\\n            elif i==\\'b\\':\\n                if not stack:return False\\n                else:\\n                    if stack[-1]==\\'a\\':stack.pop()\\n                    else:return False\\n                    stack.append(i)\\n            else:\\n                if not stack:return False\\n                else:\\n                    if stack[-1]==\\'b\\':stack.pop()\\n                    else:return False\\n\\n        return len(stack)==0\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack=[]\\n        for i in s:\\n            if i == \\'a\\':stack.append(i)\\n            elif i==\\'b\\':\\n                if not stack:return False\\n                else:\\n                    if stack[-1]==\\'a\\':stack.pop()\\n                    else:return False\\n                    stack.append(i)\\n            else:\\n                if not stack:return False\\n                else:\\n                    if stack[-1]==\\'b\\':stack.pop()\\n                    else:return False\\n\\n        return len(stack)==0\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1220206,
                "title": "c-simple-o-n-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        ios_base::sync_with_stdio(false);\\t\\n        cin.tie(NULL);\\t\\n        stack<char> valid;\\n        for (auto ele: s){\\n            if (ele==\\'a\\')\\n                valid.push(ele);\\n            else if(ele==\\'b\\' && !valid.empty() && valid.top()==\\'a\\'){\\n                valid.pop();\\n                valid.push(ele);\\n            }\\n            else if(ele==\\'c\\' && !valid.empty() && valid.top()==\\'b\\')\\n                valid.pop();\\n            else\\n                return false;\\n        }\\n        return valid.empty();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        ios_base::sync_with_stdio(false);\\t\\n        cin.tie(NULL);\\t\\n        stack<char> valid;\\n        for (auto ele: s){\\n            if (ele==\\'a\\')\\n                valid.push(ele);\\n            else if(ele==\\'b\\' && !valid.empty() && valid.top()==\\'a\\'){\\n                valid.pop();\\n                valid.push(ele);\\n            }\\n            else if(ele==\\'c\\' && !valid.empty() && valid.top()==\\'b\\')\\n                valid.pop();\\n            else\\n                return false;\\n        }\\n        return valid.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1155359,
                "title": "java-string",
                "content": "class Solution {\\n    public boolean isValid(String s) {\\n\\t\\n        while(s.length()!=0)\\n        {\\n            if(s.contains(\"abc\"))\\n                s=s.replace(\"abc\",\"\");\\n            else \\n                return false;       \\n        }\\n        return true;\\n        \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean isValid(String s) {\\n\\t\\n        while(s.length()!=0)\\n        {\\n            if(s.contains(\"abc\"))\\n                s=s.replace(\"abc\",\"\");\\n            else \\n                return false;       \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1009739,
                "title": "c-3-solutions-vector-read-write-pointer-stack",
                "content": "### Vector Solution is the Fastest\\n\\n```cpp\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      vector<char> v;\\n      for(int i=0;i<s.size();i++){\\n        if(s[i]==\\'c\\'){\\n          int sz = v.size();\\n          if(sz<2 || v[sz-2]!=\\'a\\' || v[sz-1]!=\\'b\\') return false;\\n          v.pop_back();\\n          v.pop_back();\\n        }else{\\n          v.push_back(s[i]);\\n        }\\n      }\\n      return v.size()==0;\\n        \\n    }\\n};\\n```\\n\\n\\n### Read and Write Pointer is faster\\n\\n```cpp\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      int i = 0, N = s.size();\\n        for (int j = 0; j < N; ++j) {\\n            s[i++] = s[j];\\n            if (i >= 3 && s[i - 3] == \\'a\\' && s[i - 2] == \\'b\\' && s[i - 1] == \\'c\\') i -= 3;\\n        }\\n        return i == 0;\\n    }\\n};\\n```\\n\\n \\n ### Stack is Slow compared to Vector & Pointer Solution\\n\\n```cpp\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      stack<char> Stack;\\n      for(int i = 0; i< s.size(); i++){\\n        if(s[i]==\\'c\\'){\\n          if(Stack.empty() || Stack.top()!=\\'b\\') return false;\\n          Stack.pop();\\n          if(Stack.empty() || Stack.top()!=\\'a\\') return false;\\n          Stack.pop();\\n        }else{\\n          Stack.push(s[i]);\\n        }\\n      }\\n      return Stack.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      vector<char> v;\\n      for(int i=0;i<s.size();i++){\\n        if(s[i]==\\'c\\'){\\n          int sz = v.size();\\n          if(sz<2 || v[sz-2]!=\\'a\\' || v[sz-1]!=\\'b\\') return false;\\n          v.pop_back();\\n          v.pop_back();\\n        }else{\\n          v.push_back(s[i]);\\n        }\\n      }\\n      return v.size()==0;\\n        \\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      int i = 0, N = s.size();\\n        for (int j = 0; j < N; ++j) {\\n            s[i++] = s[j];\\n            if (i >= 3 && s[i - 3] == \\'a\\' && s[i - 2] == \\'b\\' && s[i - 1] == \\'c\\') i -= 3;\\n        }\\n        return i == 0;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      stack<char> Stack;\\n      for(int i = 0; i< s.size(); i++){\\n        if(s[i]==\\'c\\'){\\n          if(Stack.empty() || Stack.top()!=\\'b\\') return false;\\n          Stack.pop();\\n          if(Stack.empty() || Stack.top()!=\\'a\\') return false;\\n          Stack.pop();\\n        }else{\\n          Stack.push(s[i]);\\n        }\\n      }\\n      return Stack.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 945165,
                "title": "simple-java-solution",
                "content": "As per the question the stating of the string is always a empty string .\\nSo in the input string every time we encounter a \"abc\" replace it with a \"\" .\\nSo at the end if it is a empty the result is true else false.\\n```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        \\n        String check = \"abc\";\\n        while(s.contains(check))\\n            s = s.replace(check,\"\"); \\n        return s.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        \\n        String check = \"abc\";\\n        while(s.contains(check))\\n            s = s.replace(check,\"\"); \\n        return s.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 845895,
                "title": "java-stack-but-bad-question",
                "content": "Although there are a lot of passed solution using, for example, stack. I don\\'t think it is clear.\\nNo statement in the problem shows that a + str + b + str + c is a valid string.\\nSee my second solution for excluding this case;\\nref from [@lee215](https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/discuss/247626/JavaPythonC%2B%2B-Stack-Solution-O(N)).\\n```\\n\\t\\tStack<Character> st = new Stack<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (c == \\'c\\') {\\n                if (st.isEmpty() || st.pop() != \\'b\\') return false;\\n                if (st.isEmpty() || st.pop() != \\'a\\') return false;\\n            } else st.push(c);\\n        }\\n        return st.isEmpty();\\n```\\n\\n2nd: (not pass)\\n```\\n    public boolean isValid(String s) {\\n        int len = s.length();\\n        if (len % 3 != 0) return false; \\n        if (len == 0) return true;\\n        if (len == 3) return s.equals(\"abc\");\\n        if (s.substring(0, 3).equals(\"abc\") && isValid(s.substring(3))) return true;\\n        if (s.substring(len - 3).equals(\"abc\") && isValid(s.substring(0, len - 3))) return true;\\n        if (s.substring(0, 1).equals(\"a\") && s.substring(len - 2).equals(\"bc\") && isValid(s.substring(1, len - 2))) return true;\\n        if (s.substring(0, 2).equals(\"ab\") && s.substring(len - 1).equals(\"c\") && isValid(s.substring(2, len - 1))) return true;\\n        return false;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\t\\tStack<Character> st = new Stack<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (c == \\'c\\') {\\n                if (st.isEmpty() || st.pop() != \\'b\\') return false;\\n                if (st.isEmpty() || st.pop() != \\'a\\') return false;\\n            } else st.push(c);\\n        }\\n        return st.isEmpty();\\n```\n```\\n    public boolean isValid(String s) {\\n        int len = s.length();\\n        if (len % 3 != 0) return false; \\n        if (len == 0) return true;\\n        if (len == 3) return s.equals(\"abc\");\\n        if (s.substring(0, 3).equals(\"abc\") && isValid(s.substring(3))) return true;\\n        if (s.substring(len - 3).equals(\"abc\") && isValid(s.substring(0, len - 3))) return true;\\n        if (s.substring(0, 1).equals(\"a\") && s.substring(len - 2).equals(\"bc\") && isValid(s.substring(1, len - 2))) return true;\\n        if (s.substring(0, 2).equals(\"ab\") && s.substring(len - 1).equals(\"c\") && isValid(s.substring(2, len - 1))) return true;\\n        return false;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 571352,
                "title": "simple-c-code-using-stack",
                "content": "```\\nbool isValid(string S) {\\n\\tstring t;\\n\\tfor (int i = 0; i < S.length(); ++i) {\\n\\t\\tt.push_back(S[i]);\\n\\t\\twhile (t.size() >= 3 && t.back() == \\'c\\' && t[t.size() - 2] == \\'b\\' && t[t.size() - 3] == \\'a\\') {\\n\\t\\t\\tt.pop_back();\\n\\t\\t\\tt.pop_back();\\n\\t\\t\\tt.pop_back();\\n\\t\\t}\\n\\t}\\n\\treturn (bool)(!t.size());\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nbool isValid(string S) {\\n\\tstring t;\\n\\tfor (int i = 0; i < S.length(); ++i) {\\n\\t\\tt.push_back(S[i]);\\n\\t\\twhile (t.size() >= 3 && t.back() == \\'c\\' && t[t.size() - 2] == \\'b\\' && t[t.size() - 3] == \\'a\\') {\\n\\t\\t\\tt.pop_back();\\n\\t\\t\\tt.pop_back();\\n\\t\\t\\tt.pop_back();\\n\\t\\t}\\n\\t}\\n\\treturn (bool)(!t.size());\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 491793,
                "title": "swift-stack-solution-o-n",
                "content": "```\\nclass Solution {\\n    func isValid(_ S: String) -> Bool {\\n        var stack:[Character] = []\\n        for item in S{\\n            if item == \"c\"{\\n                let prev2 = stack.popLast()\\n                let prev1 = stack.popLast()\\n                if prev1 == \"a\" && prev2 == \"b\"{\\n                    continue\\n                }else{\\n                    return false\\n                }\\n            }else{\\n                stack.append(item)\\n            }\\n        }\\n        return stack.isEmpty\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    func isValid(_ S: String) -> Bool {\\n        var stack:[Character] = []\\n        for item in S{\\n            if item == \"c\"{\\n                let prev2 = stack.popLast()\\n                let prev1 = stack.popLast()\\n                if prev1 == \"a\" && prev2 == \"b\"{\\n                    continue\\n                }else{\\n                    return false\\n                }\\n            }else{\\n                stack.append(item)\\n            }\\n        }\\n        return stack.isEmpty\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 428162,
                "title": "java-6ms-o-n-stack-based-solution-easy-5-liner-with-comments",
                "content": "Intuition: We work in reverse and delete all the \\'abc\\' occurances recursively(using a stack here). If we are left with nothing in the end after removing all such occurances we return true else false.\\t\\n\\t\\n\\tclass Solution {\\n    public boolean isValid(String S) {\\n        char[]stk=new char[S.length()]; int top=-1;\\n        char[] arr=S.toCharArray();\\n        \\n        for(int i=0;i<arr.length;i++)\\n\\t\\t/* if current character is \\'c\\' and we have \\'a\\' & \\'b\\' on top of the stack, move top two places before to forget/dump this \\'abc\\' occurance*/\\n            if(arr[i]==\\'c\\' && top>0 && stk[top]==\\'b\\' && stk[top-1]==\\'a\\')    \\n                top-=2;\\n            else   \\n                stk[++top]=arr[i]; \\n\\n        return top==-1;\\n    }\\n    \\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean isValid(String S) {\\n        char[]stk=new char[S.length()]; int top=-1;\\n        char[] arr=S.toCharArray();\\n        \\n        for(int i=0;i<arr.length;i++)\\n\\t\\t/* if current character is \\'c\\' and we have \\'a\\' & \\'b\\' on top of the stack, move top two places before to forget/dump this \\'abc\\' occurance*/\\n            if(arr[i]==\\'c\\' && top>0 && stk[top]==\\'b\\' && stk[top-1]==\\'a\\')    \\n                top-=2;\\n            else   \\n                stk[++top]=arr[i]; \\n\\n        return top==-1;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 424502,
                "title": "python-100-fast-100-memory",
                "content": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        n = len(S)\\n        if n%3 or S[0]==\\'b\\' or S[0]==\\'c\\' or S[n-1]==\\'a\\' or S[n-1]==\\'b\\':\\n            return False\\n        if \\'ac\\' in S or \\'bb\\' in S:\\n            return False   \\n        return S.count(\\'a\\')==S.count(\\'b\\') and S.count(\\'b\\')==S.count(\\'c\\')\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        n = len(S)\\n        if n%3 or S[0]==\\'b\\' or S[0]==\\'c\\' or S[n-1]==\\'a\\' or S[n-1]==\\'b\\':\\n            return False\\n        if \\'ac\\' in S or \\'bb\\' in S:\\n            return False   \\n        return S.count(\\'a\\')==S.count(\\'b\\') and S.count(\\'b\\')==S.count(\\'c\\')\\n```",
                "codeTag": "Java"
            },
            {
                "id": 423848,
                "title": "easy-to-understand-c-solution-16ms-beats-89",
                "content": "Runtime: 16 ms, faster than 89.58% of C++ online submissions for Check If Word Is Valid After Substitutions.\\nMemory Usage: 10.4 MB, less than 100.00% of C++ online submissions for Check If Word Is Valid After Substitutions.\\n\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string S) {\\n        stack<char> st;\\n        for(char ch : S)\\n        {\\n            if(ch == \\'a\\')\\n                st.push(ch);\\n            else if(ch == \\'b\\')\\n            {\\n                if(st.empty() || st.top() != \\'a\\')\\n                    return false;\\n                st.push(ch);\\n            }\\n            else if(ch == \\'c\\')\\n            {\\n                if(st.empty() || st.top() != \\'b\\')\\n                    return false;\\n                st.pop();\\n                if(st.empty() || st.top() != \\'a\\')\\n                    return false;\\n                else\\n                    st.pop();\\n            }\\n        }\\n        return (st.empty());\\n    }\\n};",
                "solutionTags": [
                    "Stack"
                ],
                "code": "class Solution {\\npublic:\\n    bool isValid(string S) {\\n        stack<char> st;\\n        for(char ch : S)\\n        {\\n            if(ch == \\'a\\')\\n                st.push(ch);\\n            else if(ch == \\'b\\')\\n            {\\n                if(st.empty() || st.top() != \\'a\\')\\n                    return false;\\n                st.push(ch);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 410700,
                "title": "java-using-stack",
                "content": "For what I did. I marked abc with different val, a == 1, b == 2, c == 3;\\nif we have a string aabcbc\\nthen for index from 0 to end we will have stack as follow:\\n1\\n1 1\\n1 2\\n1\\n2\\nempty\\n\\n```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        Stack<Integer> stack = new Stack();\\n        \\n        for(int i = 0; i < S.length(); ++i){\\n            if(stack.isEmpty()){\\n                if(S.charAt(i) == \\'a\\'){\\n                    stack.push(1);\\n                }\\n                else{\\n                    return false;\\n                }\\n            }\\n            else{\\n                switch(S.charAt(i)){\\n                    case \\'a\\':\\n                        stack.push(1);\\n                        break;\\n                    case \\'b\\':\\n                        if(stack.peek() == 1){\\n                            stack.pop();\\n                            stack.push(2);\\n                        }\\n                        else{\\n                            return false;\\n                        }\\n                        break;\\n                    default:\\n                        if(stack.peek() == 2){\\n                            stack.pop();\\n                        }\\n                        else{\\n                            return false;\\n                        }\\n                        break;\\n                }\\n            }\\n        }\\n        \\n        if(stack.isEmpty()){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        Stack<Integer> stack = new Stack();\\n        \\n        for(int i = 0; i < S.length(); ++i){\\n            if(stack.isEmpty()){\\n                if(S.charAt(i) == \\'a\\'){\\n                    stack.push(1);\\n                }\\n                else{\\n                    return false;\\n                }\\n            }\\n            else{\\n                switch(S.charAt(i)){\\n                    case \\'a\\':\\n                        stack.push(1);\\n                        break;\\n                    case \\'b\\':\\n                        if(stack.peek() == 1){\\n                            stack.pop();\\n                            stack.push(2);\\n                        }\\n                        else{\\n                            return false;\\n                        }\\n                        break;\\n                    default:\\n                        if(stack.peek() == 2){\\n                            stack.pop();\\n                        }\\n                        else{\\n                            return false;\\n                        }\\n                        break;\\n                }\\n            }\\n        }\\n        \\n        if(stack.isEmpty()){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 336280,
                "title": "simple-solution-in-python-using-count-and-replace",
                "content": "We simply want to use count and replace in Python to check if we have any instances of \"abc\" left to replace, and if so, replace them. At the end, when there are no more instances of \"abc\" we return whether the string is empty.\\n\\n```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n\\n\\twhile S.count(\\'abc\\'):\\n\\t\\tS = S.replace(\\'abc\\',\\'\\')\\n\\n\\treturn not S\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n\\n\\twhile S.count(\\'abc\\'):\\n\\t\\tS = S.replace(\\'abc\\',\\'\\')\\n\\n\\treturn not S\\n```",
                "codeTag": "Java"
            },
            {
                "id": 252159,
                "title": "just-use-replaceall-abc",
                "content": "I don\\'t understand why this is medium difficulty...\\n\\npublic boolean isValid(String S) {\\n        while (S.contains(\"abc\")) {\\n            S = S.replaceAll(\"abc\", \"\");\\n        }\\n        return S.length() == 0;\\n    }",
                "solutionTags": [],
                "code": "I don\\'t understand why this is medium difficulty...\\n\\npublic boolean isValid(String S) {\\n        while (S.contains(\"abc\")) {\\n            S = S.replaceAll(\"abc\", \"\");\\n        }\\n        return S.length() == 0;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 248246,
                "title": "java-stack-20-ms-100-easy",
                "content": "Solution based on stashing letters in stack. If we see characters in sequence of \"abc\" - split it, pop from stack on last \"c\". Otherwise accumulate or return false\\n\\n```\\n    public boolean isValid(String S) {\\n        Stack<String> s = new Stack();\\n        char[] arr = S.toCharArray();\\n        int N = arr.length;\\n        for (int i = 0; i < N; i++) {\\n            char next = arr[i];\\n            if (next == \\'a\\') {\\n                s.push(\"a\");\\n            } else if (next == \\'b\\' && !s.isEmpty() && s.peek().equals(\"a\"))  {\\n                s.pop();\\n                s.push(\"ab\");\\n            } else if (next == \\'c\\' && !s.isEmpty() && s.peek().equals(\"ab\"))  {\\n                s.pop();\\n            } else\\n                return false;\\n        }\\n        return s.isEmpty();\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\n    public boolean isValid(String S) {\\n        Stack<String> s = new Stack();\\n        char[] arr = S.toCharArray();\\n        int N = arr.length;\\n        for (int i = 0; i < N; i++) {\\n            char next = arr[i];\\n            if (next == \\'a\\') {\\n                s.push(\"a\");\\n            } else if (next == \\'b\\' && !s.isEmpty() && s.peek().equals(\"a\"))  {\\n                s.pop();\\n                s.push(\"ab\");\\n            } else if (next == \\'c\\' && !s.isEmpty() && s.peek().equals(\"ab\"))  {\\n                s.pop();\\n            } else\\n                return false;\\n        }\\n        return s.isEmpty();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4082130,
                "title": "easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isValid(String str) {\\n\\n        StringBuilder s = new StringBuilder(str);\\n\\n        while(s.length()!=0){\\n            int a = s.indexOf(\"abc\");\\n            if(a==-1) return false;\\n            else{\\n                s.delete(a,a+3);\\n            }\\n        }\\n\\n        if(s.length()==0) return true;\\n        else return false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String str) {\\n\\n        StringBuilder s = new StringBuilder(str);\\n\\n        while(s.length()!=0){\\n            int a = s.indexOf(\"abc\");\\n            if(a==-1) return false;\\n            else{\\n                s.delete(a,a+3);\\n            }\\n        }\\n\\n        if(s.length()==0) return true;\\n        else return false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3629151,
                "title": "easy-c-solution-beat-100",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s[0]!=\\'a\\')\\n        return false;\\n        stack<char> st;\\n        for(char ch:s){\\n            if(ch==\\'a\\')\\n                st.push(ch);\\n            else if(ch==\\'b\\'){\\n                if(!st.empty()&&st.top()==\\'a\\')\\n                    st.push(ch);\\n                else\\n                    return false;\\n            }\\n            else\\n            {\\n                if(!st.empty()&&st.top()==\\'b\\'){\\n                    st.pop();\\n                        if(!st.empty()&&st.top()==\\'a\\')\\n                            st.pop();\\n                        else return false;\\n                    }\\n                else\\n                    return false;\\n            }\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s[0]!=\\'a\\')\\n        return false;\\n        stack<char> st;\\n        for(char ch:s){\\n            if(ch==\\'a\\')\\n                st.push(ch);\\n            else if(ch==\\'b\\'){\\n                if(!st.empty()&&st.top()==\\'a\\')\\n                    st.push(ch);\\n                else\\n                    return false;\\n            }\\n            else\\n            {\\n                if(!st.empty()&&st.top()==\\'b\\'){\\n                    st.pop();\\n                        if(!st.empty()&&st.top()==\\'a\\')\\n                            st.pop();\\n                        else return false;\\n                    }\\n                else\\n                    return false;\\n            }\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3597382,
                "title": "easy-to-understand-2-approaches-c",
                "content": "\\n\\n# Approach\\n- solution 1 Recursion \\n- solution 2 using stack\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n//recursion\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n       if(s.size()==0)\\n       return true;\\n\\n       int find = s.find(\"abc\");\\n       if(find != string::npos){\\n           //found\\n           string tleft = s.substr(0,find);\\n           string tright = s.substr(find+3,s.size());\\n           \\n           return isValid(tleft + tright);\\n       } \\n       return false;\\n    }\\n};\\n\\n//TC O(N^2)\\n\\n```\\n\\n```\\n// stack \\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s[0] != \\'a\\'){\\n            return false;\\n        }\\n\\n        stack<char>st;\\n        for(char ch:s){\\n            if(ch == \\'a\\'){\\n                st.push(ch);\\n            }\\n            else if(ch == \\'b\\'){\\n                if(!st.empty() && st.top() == \\'a\\'){\\n                    st.push(ch);\\n                }\\n                else{\\n                    return false;\\n                }\\n            }\\n            else{\\n                // if ch == \\'c\\'\\n                if(!st.empty() && st.top() == \\'b\\'){\\n                    st.pop();\\n                    if(!st.empty() && st.top() == \\'a\\'){\\n                        st.pop();\\n                    }\\n                    else{\\n                        return false;\\n                    }\\n                }\\n                else{\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return st.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack",
                    "Recursion"
                ],
                "code": "```\\n//recursion\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n       if(s.size()==0)\\n       return true;\\n\\n       int find = s.find(\"abc\");\\n       if(find != string::npos){\\n           //found\\n           string tleft = s.substr(0,find);\\n           string tright = s.substr(find+3,s.size());\\n           \\n           return isValid(tleft + tright);\\n       } \\n       return false;\\n    }\\n};\\n\\n//TC O(N^2)\\n\\n```\n```\\n// stack \\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s[0] != \\'a\\'){\\n            return false;\\n        }\\n\\n        stack<char>st;\\n        for(char ch:s){\\n            if(ch == \\'a\\'){\\n                st.push(ch);\\n            }\\n            else if(ch == \\'b\\'){\\n                if(!st.empty() && st.top() == \\'a\\'){\\n                    st.push(ch);\\n                }\\n                else{\\n                    return false;\\n                }\\n            }\\n            else{\\n                // if ch == \\'c\\'\\n                if(!st.empty() && st.top() == \\'b\\'){\\n                    st.pop();\\n                    if(!st.empty() && st.top() == \\'a\\'){\\n                        st.pop();\\n                    }\\n                    else{\\n                        return false;\\n                    }\\n                }\\n                else{\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return st.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3540701,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n\\n        if(s.size()%3!=0) return false;\\n        stack<char> st;\\n\\n        for(char c:s){\\n            if(st.empty()) st.push(c);\\n            else if(c==\\'c\\'){\\n                char b=st.top();st.pop();\\n                if(st.empty()) return false;\\n                char a = st.top(); st.pop();\\n                if(b!=\\'b\\' || a!=\\'a\\') return false;\\n            }\\n            else st.push(c);\\n        }\\n        return st.empty();\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        prev = None\\n        while s != \"\" and s != prev:\\n            prev = s\\n            s = s.replace(\"abc\", \"\")\\n        return s == \"\"\\n```\\n\\n```Java []\\nclass Solution {\\n    public boolean isValid(String s) {\\n        char[] cs = s.toCharArray();\\n        int i = 0;\\n        for (char c : cs) {\\n            if (c != \\'a\\' && (i == 0 || c != cs[--i] + 1)) {\\n                return false;\\n            }\\n            if (c != \\'c\\') {\\n                cs[i++] = c;\\n            }\\n        }\\n        return i == 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n\\n        if(s.size()%3!=0) return false;\\n        stack<char> st;\\n\\n        for(char c:s){\\n            if(st.empty()) st.push(c);\\n            else if(c==\\'c\\'){\\n                char b=st.top();st.pop();\\n                if(st.empty()) return false;\\n                char a = st.top(); st.pop();\\n                if(b!=\\'b\\' || a!=\\'a\\') return false;\\n            }\\n            else st.push(c);\\n        }\\n        return st.empty();\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        prev = None\\n        while s != \"\" and s != prev:\\n            prev = s\\n            s = s.replace(\"abc\", \"\")\\n        return s == \"\"\\n```\n```Java []\\nclass Solution {\\n    public boolean isValid(String s) {\\n        char[] cs = s.toCharArray();\\n        int i = 0;\\n        for (char c : cs) {\\n            if (c != \\'a\\' && (i == 0 || c != cs[--i] + 1)) {\\n                return false;\\n            }\\n            if (c != \\'c\\') {\\n                cs[i++] = c;\\n            }\\n        }\\n        return i == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3362070,
                "title": "c-check-if-word-is-valid-after-substitutions-very-easy-100-beat",
                "content": "# Approach\\nIn this case we use iterative approach for saving space with the help of stack.\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\npublic class Solution \\n{\\n    public bool IsValid(string s) \\n    {\\n        if(s.Length % 3 != 0) return false;\\n\\n        Stack<char> stack = new Stack<char>();\\n\\n        for(int i = 0; i < s.Length; i++)\\n        {\\n            if(s[i] != \\'c\\') stack.Push(s[i]);\\n            else\\n            {\\n                if(stack.Count < 2) return false;\\n                if(stack.Pop() != \\'b\\' || stack.Pop() != \\'a\\') return false;\\n            }\\n        }\\n\\n        return (stack.Count == 0)? true : false;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public bool IsValid(string s) \\n    {\\n        if(s.Length % 3 != 0) return false;\\n\\n        Stack<char> stack = new Stack<char>();\\n\\n        for(int i = 0; i < s.Length; i++)\\n        {\\n            if(s[i] != \\'c\\') stack.Push(s[i]);\\n            else\\n            {\\n                if(stack.Count < 2) return false;\\n                if(stack.Pop() != \\'b\\' || stack.Pop() != \\'a\\') return false;\\n            }\\n        }\\n\\n        return (stack.Count == 0)? true : false;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3342101,
                "title": "chatgpt-c-solution-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n   bool isValid(string s) {\\n    int i = 0, n = s.size();\\n    for (int j = 0; j < n; j++, i++) {\\n        s[i] = s[j];\\n        if (i >= 2 && s[i] == \\'c\\' && s[i-1] == \\'b\\' && s[i-2] == \\'a\\') {\\n            i -= 3;\\n        }\\n    }\\n    return i == 0;\\n}\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   bool isValid(string s) {\\n    int i = 0, n = s.size();\\n    for (int j = 0; j < n; j++, i++) {\\n        s[i] = s[j];\\n        if (i >= 2 && s[i] == \\'c\\' && s[i-1] == \\'b\\' && s[i-2] == \\'a\\') {\\n            i -= 3;\\n        }\\n    }\\n    return i == 0;\\n}\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3028339,
                "title": "most-easiest-approach-to-solve",
                "content": "# Intuition\\n  Thought at first time was to store this characters and keep track of last 3 pushes...so that it equals abc or not...So I think 3 stacks is better option...\\n\\n Example stacks st1, st2, st3 :\\n\\n st3 : abc\\n \\n then make arrangements such that\\n st2 : ab\\n \\n then\\n st1 : a\\n\\n\\n# Approach\\n   ##  Using three stacks we simply make it more easier.We track the last 3 elements in stack just by making 3 stacks.\\n\\n\\n   \\n\\n# Complexity\\n- Time complexity: linear\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\nbool isValid(string s) \\n{\\n    int n=s.length();\\n\\n    if(n<=2)\\n        return false;\\n       \\n    stack<char>st1,st2,st3;\\n\\n    st3.push(s[0]);\\n    st3.push(s[1]);\\n\\n    for(int i=2;i<n;i++)\\n    {\\n        st3.push(s[i]);\\n\\n        if(st3.size()>=3)\\n          {\\n            st2=st3;\\n            st2.pop();\\n            st1=st2;\\n            st1.pop();\\n\\n            if((st1.top()==\\'a\\')&&(st2.top()==\\'b\\')&&(st3.top()==\\'c\\'))\\n            {\\n                st3.pop();\\n                st3.pop();\\n                st3.pop(); \\n            }\\n       }\\n\\n    }\\n\\n    if(st3.empty())\\n          return true;\\n\\n    return false;  \\n   \\n}\\n\\n};\\n```\\n\\n\\n# Motivation Quote:\\n ## Learn the rules like a pro so you can break them like an artist \\u2764\\uFE0F\\n",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\nbool isValid(string s) \\n{\\n    int n=s.length();\\n\\n    if(n<=2)\\n        return false;\\n       \\n    stack<char>st1,st2,st3;\\n\\n    st3.push(s[0]);\\n    st3.push(s[1]);\\n\\n    for(int i=2;i<n;i++)\\n    {\\n        st3.push(s[i]);\\n\\n        if(st3.size()>=3)\\n          {\\n            st2=st3;\\n            st2.pop();\\n            st1=st2;\\n            st1.pop();\\n\\n            if((st1.top()==\\'a\\')&&(st2.top()==\\'b\\')&&(st3.top()==\\'c\\'))\\n            {\\n                st3.pop();\\n                st3.pop();\\n                st3.pop(); \\n            }\\n       }\\n\\n    }\\n\\n    if(st3.empty())\\n          return true;\\n\\n    return false;  \\n   \\n}\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2895518,
                "title": "beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n        stack<char>st;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n             if( !st.empty() && st.top()==\\'b\\'&& s[i]==\\'c\\')\\n            {\\n                st.pop();\\n                if( !st.empty() && st.top()==\\'a\\')\\n                    st.pop();\\n                else\\n                    st.push(\\'b\\');\\n            }\\n            else\\n            st.push(s[i]);\\n        }\\n        return st.size()==0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n        stack<char>st;\\n        int n=s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n             if( !st.empty() && st.top()==\\'b\\'&& s[i]==\\'c\\')\\n            {\\n                st.pop();\\n                if( !st.empty() && st.top()==\\'a\\')\\n                    st.pop();\\n                else\\n                    st.push(\\'b\\');\\n            }\\n            else\\n            st.push(s[i]);\\n        }\\n        return st.size()==0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2776423,
                "title": "fastly-solve-this-problem-in-o-n-code-is-written-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis problem i solved using stack.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe idea is to solve this problem is scan string from left to right and when string char is \"a\" push onto the stack and when string char is \"b\" then check if top of the stack is \"a\" or not if yes then pop \"a\" and push \"b\" if no then return false.\\nand if string char is \"c\" then check top of the stack is \"b\" or not if yes then pop from stack and if no then return false.\\nwhen string gets over then at the end check stack empty or not if yes then return true otherwise false;\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nTime complexity is o(n) in worst case\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nSpace Complexity is o(n) in worst case\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s)\\n    {\\n        if(s[0]==\\'b\\' || s[0]==\\'c\\')\\n        {\\n            return false;\\n        }\\n        stack<char> st;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\'a\\')\\n            {\\n                st.push(s[i]);\\n                // st.push(s[i]);\\n            }\\n            else if(!st.empty() && s[i]==\\'b\\')\\n            {\\n                if(st.top()==\\'a\\')\\n                {\\n                    st.pop();\\n                    st.push(s[i]);\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                if(!st.empty() && st.top()==\\'b\\')\\n                {\\n                    st.pop();\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        if(st.empty())\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s)\\n    {\\n        if(s[0]==\\'b\\' || s[0]==\\'c\\')\\n        {\\n            return false;\\n        }\\n        stack<char> st;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\'a\\')\\n            {\\n                st.push(s[i]);\\n                // st.push(s[i]);\\n            }\\n            else if(!st.empty() && s[i]==\\'b\\')\\n            {\\n                if(st.top()==\\'a\\')\\n                {\\n                    st.pop();\\n                    st.push(s[i]);\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                if(!st.empty() && st.top()==\\'b\\')\\n                {\\n                    st.pop();\\n                }\\n                else\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        if(st.empty())\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2542403,
                "title": "stack-solution-with-o-n-time-complexity-and-o-n-space-complexity",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<>();\\n        for(char ch: s.toCharArray()){\\n            if(ch ==\\'a\\'){\\n                stack.push(\\'a\\');\\n            }\\n            else if(ch ==\\'b\\'){\\n                if(stack.size() <1 || stack.peek() != \\'a\\'){\\n                    return false;\\n                }\\n                stack.push(\\'b\\');\\n            }else{\\n                if(stack.size() < 2){\\n                    return false;\\n                }\\n                Character first = stack.pop();\\n                Character second = stack.pop();\\n                if(first != \\'b\\' || second != \\'a\\'){\\n                    return false;\\n                }\\n            }\\n        }\\n        return stack.size() == 0;\\n    }\\n}",
                "solutionTags": [
                    "Stack"
                ],
                "code": "class Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<>();\\n        for(char ch: s.toCharArray()){\\n            if(ch ==\\'a\\'){\\n                stack.push(\\'a\\');\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2302064,
                "title": "java-stack-valid-after-substitutions-easy-explanation-with-comments",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        \\n        //Lets see how we can solve that as we know we have only abc in string.\\n        //Like           aabcbc\\n        // See as that   ((b)b) Think a is \\'(\\' and c is \\')\\'.\\n        // If a string is made by using abc only we can remove abc to make it empty also.\\n        \\n        //Think in Reverse Way.\\n        \\n        \\n        \\n        Stack<Character> stack = new Stack<>();\\n        char[] arr = s.toCharArray();\\n        for (int i = 0; i < arr.length; i++) {\\n            \\n            // We have to work only when we get \\')\\' means c.\\n            \\n            if(arr[i] == \\'c\\')\\n            {\\n                // If we at c means we have 2 elements before us a and b.\\n                // When we first pop we get b at second pop we get a\\n                \\n            // If this all hold true we will delete a and b we are not adding c so c also\\n                \\n                if(stack.size()>=2 && stack.pop() == \\'b\\' && stack.pop() == \\'a\\')\\n                {\\n\\n                }\\n                else\\n                {\\n                    \\n                    // If anywhere we get false in any condition that means this is not a                          valid set i.e. abc pattern is not present.\\n                    \\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                // For a and b we simply add.\\n                \\n                stack.push(arr[i]);\\n            }\\n        }\\n        \\n        //If we have only abc pattern the stack will become empty.\\n        \\n        return stack.size()==0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        \\n        //Lets see how we can solve that as we know we have only abc in string.\\n        //Like           aabcbc\\n        // See as that   ((b)b) Think a is \\'(\\' and c is \\')\\'.\\n        // If a string is made by using abc only we can remove abc to make it empty also.\\n        \\n        //Think in Reverse Way.\\n        \\n        \\n        \\n        Stack<Character> stack = new Stack<>();\\n        char[] arr = s.toCharArray();\\n        for (int i = 0; i < arr.length; i++) {\\n            \\n            // We have to work only when we get \\')\\' means c.\\n            \\n            if(arr[i] == \\'c\\')\\n            {\\n                // If we at c means we have 2 elements before us a and b.\\n                // When we first pop we get b at second pop we get a\\n                \\n            // If this all hold true we will delete a and b we are not adding c so c also\\n                \\n                if(stack.size()>=2 && stack.pop() == \\'b\\' && stack.pop() == \\'a\\')\\n                {\\n\\n                }\\n                else\\n                {\\n                    \\n                    // If anywhere we get false in any condition that means this is not a                          valid set i.e. abc pattern is not present.\\n                    \\n                    return false;\\n                }\\n            }\\n            else\\n            {\\n                // For a and b we simply add.\\n                \\n                stack.push(arr[i]);\\n            }\\n        }\\n        \\n        //If we have only abc pattern the stack will become empty.\\n        \\n        return stack.size()==0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2249534,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> st = new Stack<>();\\n        for(int i = 0; i < s.length(); i++){\\n            char ch = s.charAt(i);\\n\\n            if(ch == \\'a\\' || ch == \\'b\\'){\\n                st.push(ch);\\n            }else{\\n                if(st.size() == 0 || st.size() == 1) return false;\\n\\n                int top = st.pop();\\n                int stop = st.pop();\\n                if(top != \\'b\\' || stop != \\'a\\') return false;\\n            }\\n        }\\n\\n        return st.size() == 0;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> st = new Stack<>();\\n        for(int i = 0; i < s.length(); i++){\\n            char ch = s.charAt(i);\\n\\n            if(ch == \\'a\\' || ch == \\'b\\'){\\n                st.push(ch);\\n            }else{\\n                if(st.size() == 0 || st.size() == 1) return false;\\n\\n                int top = st.pop();\\n                int stop = st.pop();\\n                if(top != \\'b\\' || stop != \\'a\\') return false;\\n            }\\n        }\\n\\n        return st.size() == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2210215,
                "title": "simple-stack-based-solution",
                "content": "if \\'c\\' is to be inserted, there must \"ab\" before insertion. Similary if \\'b\\' is to be inserted, there must be \"a\" before insertion. Otheriwise, it\\'s an invalid string. Here \\'d\\' char is used to indicate that either a, b or c can be inserted in array i.e it\\'s not filled yet.\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<vector<char>> st;\\n        \\n        for(char ch: s){\\n            if(ch==\\'a\\'){\\n                vector<char> v{\\'a\\',\\'d\\',\\'d\\'};\\n                st.push(v);\\n            }else if(ch==\\'b\\'){\\n                if(!st.empty() and st.top()[1]==\\'d\\'){\\n                    st.pop();\\n                    vector<char> v{\\'a\\',\\'b\\',\\'d\\'};\\n                    st.push(v);\\n                }else{\\n                    return false;\\n                }\\n            }else{\\n                 if(!st.empty() && st.top()[2]==\\'d\\'){\\n                    st.pop();\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        \\n        if(st.empty()){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<vector<char>> st;\\n        \\n        for(char ch: s){\\n            if(ch==\\'a\\'){\\n                vector<char> v{\\'a\\',\\'d\\',\\'d\\'};\\n                st.push(v);\\n            }else if(ch==\\'b\\'){\\n                if(!st.empty() and st.top()[1]==\\'d\\'){\\n                    st.pop();\\n                    vector<char> v{\\'a\\',\\'b\\',\\'d\\'};\\n                    st.push(v);\\n                }else{\\n                    return false;\\n                }\\n            }else{\\n                 if(!st.empty() && st.top()[2]==\\'d\\'){\\n                    st.pop();\\n                }else{\\n                    return false;\\n                }\\n            }\\n        }\\n        \\n        if(st.empty()){\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2139559,
                "title": "easy-c-code",
                "content": "class Solution {\\npublic:\\n\\n    bool isValid(string s) {\\n        \\n        while( s.find(\"abc\") != string::npos )\\n            s.replace(s.find(\"abc\"), 3, \"\");\\n        \\n        if(s.empty()) return 1;\\n        else return 0;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n\\n    bool isValid(string s) {\\n        \\n        while( s.find(\"abc\") != string::npos )\\n            s.replace(s.find(\"abc\"), 3, \"\");\\n        \\n        if(s.empty()) return 1;\\n        else return 0;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2045851,
                "title": "python-stack",
                "content": "class Solution:\\n    def isValid(self, s: str) -> bool:\\n        \\n        if len(s)%3 !=0:\\n            return False\\n        stack = []\\n        letters = [\\'a\\',\\'b\\']\\n        \\n        for x in s:\\n            if x in letters:\\n                stack.append(x)\\n            else:\\n                if len(stack) == 0 or stack.pop()!=\\'b\\':\\n                    return False\\n                if len(stack) == 0 or stack.pop()!=\\'a\\':\\n                    return False\\n        return len(stack) == 0",
                "solutionTags": [
                    "Python",
                    "Stack"
                ],
                "code": "class Solution:\\n    def isValid(self, s: str) -> bool:\\n        \\n        if len(s)%3 !=0:\\n            return False\\n        stack = []\\n        letters = [\\'a\\',\\'b\\']\\n        \\n        for x in s:\\n            if x in letters:\\n                stack.append(x)\\n            else:\\n                if len(stack) == 0 or stack.pop()!=\\'b\\':\\n                    return False\\n                if len(stack) == 0 or stack.pop()!=\\'a\\':\\n                    return False\\n        return len(stack) == 0",
                "codeTag": "Java"
            },
            {
                "id": 1997919,
                "title": "2-solutions-with-and-without-stack-short-and-concise-c",
                "content": "**Using Stack**\\n\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string str) {\\n        stack<char> s;\\n        \\n        for(char c : str) {\\n            if(c == \\'a\\') s.push(c);\\n            else if(c == \\'b\\') {\\n                if(s.empty() || s.top() != \\'a\\') return false;\\n                s.push(c);\\n            }\\n            else {\\n                if(s.empty() || s.top() != \\'b\\') return false;\\n                s.pop();\\n                s.pop();\\n            }\\n        }\\n        \\n        return s.empty();\\n    }\\n};\\n```\\n\\n**Without Stack**\\n\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n       while(s.size()) {\\n           int p = s.find(\"abc\");\\n           if(p < 0 || p > s.size() - 1) return false;\\n           else s.erase(p, 3);\\n       }\\n       return true;    \\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string str) {\\n        stack<char> s;\\n        \\n        for(char c : str) {\\n            if(c == \\'a\\') s.push(c);\\n            else if(c == \\'b\\') {\\n                if(s.empty() || s.top() != \\'a\\') return false;\\n                s.push(c);\\n            }\\n            else {\\n                if(s.empty() || s.top() != \\'b\\') return false;\\n                s.pop();\\n                s.pop();\\n            }\\n        }\\n        \\n        return s.empty();\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n       while(s.size()) {\\n           int p = s.find(\"abc\");\\n           if(p < 0 || p > s.size() - 1) return false;\\n           else s.erase(p, 3);\\n       }\\n       return true;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1904579,
                "title": "5ms-o-n-faster-than-99",
                "content": "```\\n\\t\\tint n=s.length()-1; // cal. length of string-1\\n\\t\\t//checking whether string ends with **a** or **b** or its length is not **multiple of 3** and\\n\\t\\t//return false if any of these condition becomes true\\n        if(s.charAt(n)==\\'a\\'||s.charAt(n)==\\'b\\'||(n+1)%3!=0)return false;\\n        Deque<Character> st=new ArrayDeque<>();\\n        for(char ch:s.toCharArray()){\\n\\t\\t//putting characters in stack if they are a or b (just think about the concept of \\n\\t\\t//balanced paranthesis)\\n            if(ch==\\'a\\'||ch==\\'b\\') st.push(ch);\\n            else{\\n\\t\\t\\t//here we can see that if we encounter c then it means the top of stack has to be \\n\\t\\t\\t//**b** and after that **a** and if any of this is not true then just return false \\n\\t\\t\\t//otherwise pop two characters from stack and move on to next character\\n                if(st.isEmpty()||st.pop()==\\'a\\') return false;\\n                if(st.isEmpty()||st.pop()==\\'b\\') return false;\\n            }\\n        }\\n        return true;\\n```",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\n\\t\\tint n=s.length()-1; // cal. length of string-1\\n\\t\\t//checking whether string ends with **a** or **b** or its length is not **multiple of 3** and\\n\\t\\t//return false if any of these condition becomes true\\n        if(s.charAt(n)==\\'a\\'||s.charAt(n)==\\'b\\'||(n+1)%3!=0)return false;\\n        Deque<Character> st=new ArrayDeque<>();\\n        for(char ch:s.toCharArray()){\\n\\t\\t//putting characters in stack if they are a or b (just think about the concept of \\n\\t\\t//balanced paranthesis)\\n            if(ch==\\'a\\'||ch==\\'b\\') st.push(ch);\\n            else{\\n\\t\\t\\t//here we can see that if we encounter c then it means the top of stack has to be \\n\\t\\t\\t//**b** and after that **a** and if any of this is not true then just return false \\n\\t\\t\\t//otherwise pop two characters from stack and move on to next character\\n                if(st.isEmpty()||st.pop()==\\'a\\') return false;\\n                if(st.isEmpty()||st.pop()==\\'b\\') return false;\\n            }\\n        }\\n        return true;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1849841,
                "title": "c-solution-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st;\\n        for(char c:s){\\n            if( c != \\'c\\')\\n                st.push(c);\\n            else{\\n                string t = \"\";\\n                if(st.size() > 1){\\n                    t += st.top();  st.pop();\\n                    t += st.top();  st.pop();\\n                }\\n                if(t != \"ba\")\\n                    return false;\\n            }\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st;\\n        for(char c:s){\\n            if( c != \\'c\\')\\n                st.push(c);\\n            else{\\n                string t = \"\";\\n                if(st.size() > 1){\\n                    t += st.top();  st.pop();\\n                    t += st.top();  st.pop();\\n                }\\n                if(t != \"ba\")\\n                    return false;\\n            }\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1843907,
                "title": "beginner-friendly-solution-c",
                "content": "class Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n        string str; //declare a string\\n        for(int i=0;i<s.length();i++)\\n        {\\n            st.push(s[i]);\\n            if(s[i]==\\'c\\')  // check when the c is inserted into the stack\\n            {\\n                int k=3;\\n                while(k--){\\n                if(st.empty())\\n                    break;\\n                char ch=st.top();\\n                st.pop();\\n                str+=ch;\\n                }\\n                cout<<str<<\"\\\\n\";\\n                if(str!=\"cba\")\\n                    return false;\\n                str.clear();       //clear after every check\\n            }\\n        }\\n        if(st.empty())\\n            return true;\\n        return false;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "class Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n        string str; //declare a string\\n        for(int i=0;i<s.length();i++)\\n        {\\n            st.push(s[i]);\\n            if(s[i]==\\'c\\')  // check when the c is inserted into the stack\\n            {\\n                int k=3;\\n                while(k--){\\n                if(st.empty())\\n                    break;\\n                char ch=st.top();\\n                st.pop();\\n                str+=ch;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1831206,
                "title": "recursive-easy-c-beginner-friendly",
                "content": "```\\nbool isValid(string s) {\\n        int n = s.length();\\n        int index = s.find(\"abc\");\\n        \\n        if (s == \"abc\")\\n            return true;\\n        \\n        if (index == -1)\\n            return false;\\n        \\n        return isValid(s.substr(0, index)+s.substr(index+3));\\n        \\n    }",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nbool isValid(string s) {\\n        int n = s.length();\\n        int index = s.find(\"abc\");\\n        \\n        if (s == \"abc\")\\n            return true;\\n        \\n        if (index == -1)\\n            return false;\\n        \\n        return isValid(s.substr(0, index)+s.substr(index+3));\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1800316,
                "title": "c-time-o-n-space-o-1-easy-simple-solution",
                "content": "**Intuition**\\n`j` is read pointer and `i` is write pointer. We always write `s[j]` to `s[i]`.\\nIf the last 3 characters in front of `i` is `\"abc\"`, we clean them by `i -= 3`.\\nIn the end, return `i == 0`.\\n**Code**\\n```\\nclass Solution {\\npublic:\\n\\tbool isValid(string s) {\\n\\t\\tint i = 0;\\n\\t\\tint j = 0;\\n\\t\\tint n = s.size();\\n\\t\\twhile (j < n)\\n\\t\\t{\\n\\t\\t\\ts[i] = s[j];\\n\\t\\t\\t// checking is last three character is \"abc\" then we erase them means set i to i-3\\n\\t\\t\\tif (i >= 2 && s[i - 2] == \\'a\\' && s[i - 1] == \\'b\\' && s[i] == \\'c\\')\\n\\t\\t\\t{\\n\\t\\t\\t\\ti -= 3;\\n\\t\\t\\t}\\n\\t\\t\\ti++; j++;\\n\\t\\t}\\n\\t\\treturn (i == 0);\\n\\t}\\n};\\n```\\n**Time Complexity : O(n)**\\n**Space Complexity : O(1)**\\n\\n**If find Helpful *Upvote It* \\uD83D\\uDC4D**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n\\tbool isValid(string s) {\\n\\t\\tint i = 0;\\n\\t\\tint j = 0;\\n\\t\\tint n = s.size();\\n\\t\\twhile (j < n)\\n\\t\\t{\\n\\t\\t\\ts[i] = s[j];\\n\\t\\t\\t// checking is last three character is \"abc\" then we erase them means set i to i-3\\n\\t\\t\\tif (i >= 2 && s[i - 2] == \\'a\\' && s[i - 1] == \\'b\\' && s[i] == \\'c\\')\\n\\t\\t\\t{\\n\\t\\t\\t\\ti -= 3;\\n\\t\\t\\t}\\n\\t\\t\\ti++; j++;\\n\\t\\t}\\n\\t\\treturn (i == 0);\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1793602,
                "title": "98-67-lesser-memory-only-3-lines-of-code-very-simple-python-solution",
                "content": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while(\"abc\" in s): \\n            s = s.replace(\"abc\",\"\") # continuously replace \"abc\" by \"\". By the end if we end up with \"\", then the word is valid.\\n        return s == \"\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while(\"abc\" in s): \\n            s = s.replace(\"abc\",\"\") # continuously replace \"abc\" by \"\". By the end if we end up with \"\", then the word is valid.\\n        return s == \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1732646,
                "title": "c-easy-to-understand-stack-usage-2-approaches-o-1-space-complexity",
                "content": "**Approach 1 \\nO(n) time complexity\\nO(n) space complexity**\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      stack<char> st;\\n        for(char &ch:s)\\n        {\\n          if(ch==\\'c\\')\\n          {\\n              if(st.size()<2)\\n              {\\n                  return false;\\n              }\\n              else\\n              {\\n                  char c1=st.top();\\n                  if(c1!=\\'b\\')\\n                  {\\n                      return false;\\n                  }\\n                  st.pop();\\n                  char c2=st.top();\\n                  if(c2!=\\'a\\')\\n                  {\\n                      return false;\\n                  }\\n                  st.pop();\\n              }\\n          }\\n          else\\n          {\\n              st.push(ch);\\n          }\\n        }\\n        return st.empty();\\n    }\\n};\\n```\\n**Approach 2\\nO(n) time complexity\\nO(1) space complexity**\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n=s.size();\\n        int j=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            s[j++]=s[i];\\n            if(j>=3&&s[j-1]==\\'c\\'&&s[j-2]==\\'b\\'&&s[j-3]==\\'a\\')\\n            {\\n                j-=3;\\n            }\\n        }\\n        return j==0;\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      stack<char> st;\\n        for(char &ch:s)\\n        {\\n          if(ch==\\'c\\')\\n          {\\n              if(st.size()<2)\\n              {\\n                  return false;\\n              }\\n              else\\n              {\\n                  char c1=st.top();\\n                  if(c1!=\\'b\\')\\n                  {\\n                      return false;\\n                  }\\n                  st.pop();\\n                  char c2=st.top();\\n                  if(c2!=\\'a\\')\\n                  {\\n                      return false;\\n                  }\\n                  st.pop();\\n              }\\n          }\\n          else\\n          {\\n              st.push(ch);\\n          }\\n        }\\n        return st.empty();\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n=s.size();\\n        int j=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            s[j++]=s[i];\\n            if(j>=3&&s[j-1]==\\'c\\'&&s[j-2]==\\'b\\'&&s[j-3]==\\'a\\')\\n            {\\n                j-=3;\\n            }\\n        }\\n        return j==0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1645671,
                "title": "check-if-word-is-valid-after-substitutions",
                "content": "```\\nclass Solution:\\n    def isValid(self, s):\\n        while \"abc\" in s:\\n            s = s.split(\"abc\")\\n            s = \"\".join(s)\\n            \\n        return len(s)==0\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s):\\n        while \"abc\" in s:\\n            s = s.split(\"abc\")\\n            s = \"\".join(s)\\n            \\n        return len(s)==0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1642146,
                "title": "python-3-lines-of-code-99-faster",
                "content": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        if len(s) == 0: return True\\n        if \"abc\" in s: return self.isValid(s.replace(\"abc\", \"\"))\\n        return False\\n```",
                "solutionTags": [
                    "Backtracking",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        if len(s) == 0: return True\\n        if \"abc\" in s: return self.isValid(s.replace(\"abc\", \"\"))\\n        return False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1596490,
                "title": "java-2-solutions",
                "content": "Using a stack:\\n\\n```java\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> characters = new Stack();\\n        \\n        for(int i = 0; i < s.length(); ++i) {\\n            if(s.charAt(i) == \\'c\\') {\\n                if(characters.isEmpty() || characters.pop() != \\'b\\' || characters.isEmpty() || characters.pop() != \\'a\\')\\n                    return false;\\n            } else {\\n                characters.push(s.charAt(i));\\n            }\\n        }\\n        \\n        return characters.isEmpty();\\n    }\\n}\\n```\\n\\nWithout a stack:\\n\\n```java\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while(s.contains(\"abc\"))\\n            s = s.replace(\"abc\", \"\");\\n        \\n        return s.length() == 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> characters = new Stack();\\n        \\n        for(int i = 0; i < s.length(); ++i) {\\n            if(s.charAt(i) == \\'c\\') {\\n                if(characters.isEmpty() || characters.pop() != \\'b\\' || characters.isEmpty() || characters.pop() != \\'a\\')\\n                    return false;\\n            } else {\\n                characters.push(s.charAt(i));\\n            }\\n        }\\n        \\n        return characters.isEmpty();\\n    }\\n}\\n```\n```java\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while(s.contains(\"abc\"))\\n            s = s.replace(\"abc\", \"\");\\n        \\n        return s.length() == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1575456,
                "title": "c-8ms-98-simple-easy-small-stack",
                "content": "Runtime: 8 ms, faster than 98.37% of C++ online submissions for Check If Word Is Valid After Substitutions.\\nMemory Usage: 8.2 MB, less than 86.71% of C++ online submissions for Check If Word Is Valid After Substitutions.\\n```\\nclass Solution {\\npublic:\\n  bool isValid(string s) {\\n    vector<char>st;\\n    \\n    for(auto &ch : s)\\n      if(ch == \\'c\\'){\\n        if(st.empty() || st.back() == \\'a\\') return false;\\n        st.pop_back();\\n        if(st.empty() || st.back() == \\'b\\') return false;\\n        st.pop_back();\\n      }else st.push_back(ch);\\n    \\n    return st.empty();\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  bool isValid(string s) {\\n    vector<char>st;\\n    \\n    for(auto &ch : s)\\n      if(ch == \\'c\\'){\\n        if(st.empty() || st.back() == \\'a\\') return false;\\n        st.pop_back();\\n        if(st.empty() || st.back() == \\'b\\') return false;\\n        st.pop_back();\\n      }else st.push_back(ch);\\n    \\n    return st.empty();\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1510597,
                "title": "java-stack-o-n-time-and-o-n-space",
                "content": "This is a modified version of balanced paranthesis problem. For every \\'a\\', there should be \\'bc\\' after it.\\n\\n```\\nclass Solution \\n{\\n    public boolean isValid(String s) \\n    {\\n        Stack<Character> st = new Stack<>();\\n        for(char c: s.toCharArray())\\n        {\\n            if(c==\\'a\\' || c==\\'b\\')\\n                st.push(c);\\n            else\\n            {\\n                if(!st.isEmpty() && st.peek()==\\'b\\')\\n                {\\n                    char ch = st.pop();\\n                    if(!st.isEmpty() && st.peek()==\\'a\\')\\n                        st.pop();\\n                    else\\n                        st.push(ch);\\n                }\\n                else\\n                    st.push(c);\\n            }\\n        }\\n        return st.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\n    public boolean isValid(String s) \\n    {\\n        Stack<Character> st = new Stack<>();\\n        for(char c: s.toCharArray())\\n        {\\n            if(c==\\'a\\' || c==\\'b\\')\\n                st.push(c);\\n            else\\n            {\\n                if(!st.isEmpty() && st.peek()==\\'b\\')\\n                {\\n                    char ch = st.pop();\\n                    if(!st.isEmpty() && st.peek()==\\'a\\')\\n                        st.pop();\\n                    else\\n                        st.push(ch);\\n                }\\n                else\\n                    st.push(c);\\n            }\\n        }\\n        return st.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1501769,
                "title": "2-lines-code-beats-96",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while ((s = s.replace(\"abc\", \"\")).contains(\"abc\")) {}\\n        return s.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        while ((s = s.replace(\"abc\", \"\")).contains(\"abc\")) {}\\n        return s.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1476772,
                "title": "java-easy-to-understand-using-stack-hashmap",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        \\n        Stack<Character> st = new Stack<>();\\n        Map<Character,Integer> map = new HashMap<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            if(ch == \\'a\\' || ch == \\'b\\')\\n                st.push(ch);\\n            else\\n            {\\n                if(st.size() <= 1)\\n                    return false;\\n                else{\\n                    char b = st.pop();\\n                    char a = st.pop();\\n                    if(a != \\'a\\' || b != \\'b\\')\\n                        return false;\\n                }\\n            }\\n            if(map.containsKey(ch))\\n                    map.put(ch,map.get(ch)+1);\\n                else    map.put(ch,1);\\n        }\\n        int x=0;\\n        if(map.containsKey(\\'a\\') && map.size()>=3)\\n            x = map.get(\\'a\\');\\n        else return false;\\n        \\n        for(int i : map.values())\\n        {\\n            if(x!=i)\\n                return false;\\n        }\\n        \\n        return true ;\\n        \\n    }\\n}\\n```\\nPlease upvote if u find my code easy to understand",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        \\n        Stack<Character> st = new Stack<>();\\n        Map<Character,Integer> map = new HashMap<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            if(ch == \\'a\\' || ch == \\'b\\')\\n                st.push(ch);\\n            else\\n            {\\n                if(st.size() <= 1)\\n                    return false;\\n                else{\\n                    char b = st.pop();\\n                    char a = st.pop();\\n                    if(a != \\'a\\' || b != \\'b\\')\\n                        return false;\\n                }\\n            }\\n            if(map.containsKey(ch))\\n                    map.put(ch,map.get(ch)+1);\\n                else    map.put(ch,1);\\n        }\\n        int x=0;\\n        if(map.containsKey(\\'a\\') && map.size()>=3)\\n            x = map.get(\\'a\\');\\n        else return false;\\n        \\n        for(int i : map.values())\\n        {\\n            if(x!=i)\\n                return false;\\n        }\\n        \\n        return true ;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1378500,
                "title": "c-stack-solution",
                "content": "I recommend you solve Valid Parentheses first. Here\\'s the same idea.\\n``` \\nbool isValid(string s) {\\n        stack<char> st;\\n        for (int i = 0; i < s.size(); ++i) {\\n            if (!st.empty() && s[i] == \\'c\\') {\\n                if (!st.empty() && st.top() == \\'b\\') {\\n                    st.pop();\\n                } else {\\n                    return false;\\n                }\\n                if (!st.empty() && st.top() == \\'a\\') {\\n                    st.pop();\\n                } else {\\n                    return false;\\n                }\\n            } else {\\n                st.push(s[i]);\\n            }\\n        }\\n        return st.empty();\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "``` \\nbool isValid(string s) {\\n        stack<char> st;\\n        for (int i = 0; i < s.size(); ++i) {\\n            if (!st.empty() && s[i] == \\'c\\') {\\n                if (!st.empty() && st.top() == \\'b\\') {\\n                    st.pop();\\n                } else {\\n                    return false;\\n                }\\n                if (!st.empty() && st.top() == \\'a\\') {\\n                    st.pop();\\n                } else {\\n                    return false;\\n                }\\n            } else {\\n                st.push(s[i]);\\n            }\\n        }\\n        return st.empty();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1354243,
                "title": "short-java-solution-o-n",
                "content": "traverse from end and while \\'a\\' comes pop \\'b\\' and \\'c\\' respectively\\n\\n```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> stack=new Stack<>();\\n        for(int i=s.length()-1;i>=0;--i){\\n            char temp=s.charAt(i);\\n            if(temp==\\'a\\'){\\n                if(stack.isEmpty() || stack.peek()!=\\'b\\') return false;\\n                stack.pop();\\n                if(stack.isEmpty() || stack.peek()!=\\'c\\') return false;\\n                stack.pop();\\n            }\\n            else stack.push(temp);\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> stack=new Stack<>();\\n        for(int i=s.length()-1;i>=0;--i){\\n            char temp=s.charAt(i);\\n            if(temp==\\'a\\'){\\n                if(stack.isEmpty() || stack.peek()!=\\'b\\') return false;\\n                stack.pop();\\n                if(stack.isEmpty() || stack.peek()!=\\'c\\') return false;\\n                stack.pop();\\n            }\\n            else stack.push(temp);\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1339139,
                "title": "java-easy",
                "content": "class Solution {\\n    public boolean isValid(String s) {\\n        \\n         if(s.equals(\"abc\")) return true;\\n        \\n         Stack<Character> st = new Stack<>();\\n    \\n         for(int i = 0 ; i < s.length();i++){\\n         char ch = s.charAt(i);\\n        \\n         if(ch == \\'c\\'){\\n            if(st.size()>= 2 && st.pop() == \\'b\\' && st.pop() == \\'a\\'){\\n                \\n            }else{\\n                return false;\\n            }\\n        }else{\\n            st.push(ch);\\n        }\\n        \\n    }\\n\\n        return st.size() == 0;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public boolean isValid(String s) {\\n        \\n         if(s.equals(\"abc\")) return true;\\n        \\n         Stack<Character> st = new Stack<>();\\n    \\n         for(int i = 0 ; i < s.length();i++){\\n         char ch = s.charAt(i);\\n        \\n         if(ch == \\'c\\'){\\n            if(st.size()>= 2 && st.pop() == \\'b\\' && st.pop() == \\'a\\'){\\n                \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1283339,
                "title": "5-line-c-code-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st;\\n        for(char c: s){\\n            if(c==\\'c\\' && st.size()>1){\\n                if(st.top()==\\'b\\') st.pop();\\n                else return false;\\n                if(st.top()==\\'a\\') st.pop();\\n                else return false;\\n            }\\n            else st.push(c);\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st;\\n        for(char c: s){\\n            if(c==\\'c\\' && st.size()>1){\\n                if(st.top()==\\'b\\') st.pop();\\n                else return false;\\n                if(st.top()==\\'a\\') st.pop();\\n                else return false;\\n            }\\n            else st.push(c);\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1281013,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n\\n        //push the a and b into the stack\\n        //when ever you get c  make sure you have b at the top and next a\\n        //if not return false;\\n        stack<char> stk;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'a\\' || s[i]==\\'b\\')\\n                stk.push(s[i]);\\n            else \\n            {\\n                //if it is a \\'c\\'\\n                if(stk.size()<2)\\n                    return false;\\n                if(stk.top()!=\\'b\\')\\n                    return false;\\n                stk.pop();\\n                if(stk.top()!=\\'a\\')\\n                    return false;\\n                stk.pop();\\n                \\n            }\\n        }\\n        return (stk.empty());\\n    }\\n};\\n```\\n**Upvote if this helps you :)**",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n\\n        //push the a and b into the stack\\n        //when ever you get c  make sure you have b at the top and next a\\n        //if not return false;\\n        stack<char> stk;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]==\\'a\\' || s[i]==\\'b\\')\\n                stk.push(s[i]);\\n            else \\n            {\\n                //if it is a \\'c\\'\\n                if(stk.size()<2)\\n                    return false;\\n                if(stk.top()!=\\'b\\')\\n                    return false;\\n                stk.pop();\\n                if(stk.top()!=\\'a\\')\\n                    return false;\\n                stk.pop();\\n                \\n            }\\n        }\\n        return (stk.empty());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1271956,
                "title": "very-easy-code-using-stack",
                "content": "Here any time if we see abc sequence we will simply pop it from the stack\\nand at the end if the stack becomes empty we will return true else false\\n```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> st = new Stack<>();\\n        \\n        for(int i =0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(ch==\\'c\\'){\\n                if(st.size()>=2  && st.pop()==\\'b\\' && st.pop()==\\'a\\'){\\n                    //paired\\n                }else{\\n                    return false;\\n                }\\n            }else{\\n                st.push(ch);\\n            }\\n        }\\n        return st.size()==0;\\n    }\\n}",
                "solutionTags": [
                    "Stack"
                ],
                "code": "class Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> st = new Stack<>();\\n        \\n        for(int i =0;i<s.length();i++){\\n            char ch = s.charAt(i);\\n            if(ch==\\'c\\'){\\n                if(st.size()>=2  && st.pop()==\\'b\\' && st.pop()==\\'a\\'){\\n                    //paired\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1260993,
                "title": "java-easy-stack",
                "content": "*This problem is literally a cake walk if you asssume that  by using the given string, if you are able to make a \"\" (blank string) of it than simply return true at last otherwise return false*\\n```\\nclass Solution {\\n    public boolean isValid(String s) {\\n          Stack<Character> stack = new Stack<>();\\n          \\n          for(int i = 0 ; i<s.length() ; i++ ){\\n               if(s.charAt(i)==\\'c\\'){\\n                 if(stack.size() >=2 && stack.pop()==\\'b\\' && stack.peek()==\\'a\\'){\\n                      stack.pop();\\n                 }\\n                 else{\\n                      return false;\\n                 }\\n               }\\n               else{\\n                 stack.push(s.charAt(i));\\n               }\\n          }\\n      return stack.size() == 0 ;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n          Stack<Character> stack = new Stack<>();\\n          \\n          for(int i = 0 ; i<s.length() ; i++ ){\\n               if(s.charAt(i)==\\'c\\'){\\n                 if(stack.size() >=2 && stack.pop()==\\'b\\' && stack.peek()==\\'a\\'){\\n                      stack.pop();\\n                 }\\n                 else{\\n                      return false;\\n                 }\\n               }\\n               else{\\n                 stack.push(s.charAt(i));\\n               }\\n          }\\n      return stack.size() == 0 ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1253192,
                "title": "c-simple-solution-using-stack-please-upvote-if-you-like",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n=s.length();\\n        stack<char> s1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'a\\')\\n            {\\n                s1.push(s[i]);\\n            }\\n            else if(s[i]==\\'b\\')\\n            {\\n                if(s1.empty() || s1.top()!=\\'a\\')\\n                {\\n                    return false;\\n                }\\n                s1.push(s[i]);\\n            }\\n            else if(s[i]==\\'c\\')\\n            {\\n                if(s1.empty() || s1.top()!=\\'b\\')\\n                {\\n                    return false;\\n                }\\n                if(s1.top()==\\'b\\')\\n                {\\n                    s1.pop();\\n                    if(s1.empty() || s1.top()!=\\'a\\')\\n                    {\\n                        return false;\\n                    }\\n                    s1.pop();\\n                }\\n            }\\n        }\\n        if(s1.empty())\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n=s.length();\\n        stack<char> s1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(s[i]==\\'a\\')\\n            {\\n                s1.push(s[i]);\\n            }\\n            else if(s[i]==\\'b\\')\\n            {\\n                if(s1.empty() || s1.top()!=\\'a\\')\\n                {\\n                    return false;\\n                }\\n                s1.push(s[i]);\\n            }\\n            else if(s[i]==\\'c\\')\\n            {\\n                if(s1.empty() || s1.top()!=\\'b\\')\\n                {\\n                    return false;\\n                }\\n                if(s1.top()==\\'b\\')\\n                {\\n                    s1.pop();\\n                    if(s1.empty() || s1.top()!=\\'a\\')\\n                    {\\n                        return false;\\n                    }\\n                    s1.pop();\\n                }\\n            }\\n        }\\n        if(s1.empty())\\n            return true;\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1249317,
                "title": "c-fastest-using-stack-simple-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n  int n = s.size();\\n  if (n % 3 != 0)return false;\\n  stack<char> st;\\n\\n  for (int i = 0; i < n; i++) {\\n    if (s[i] != \\'c\\') {st.push(s[i]);}\\n    else {\\n        if(st.empty() || st.top()!=\\'b\\')return false;\\n      st.pop();\\n        if(st.empty() || st.top()!=\\'a\\')return false;\\n      st.pop();\\n    }\\n  }\\n\\n  if (st.empty())return true;\\n  else return false;\\n}\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n  int n = s.size();\\n  if (n % 3 != 0)return false;\\n  stack<char> st;\\n\\n  for (int i = 0; i < n; i++) {\\n    if (s[i] != \\'c\\') {st.push(s[i]);}\\n    else {\\n        if(st.empty() || st.top()!=\\'b\\')return false;\\n      st.pop();\\n        if(st.empty() || st.top()!=\\'a\\')return false;\\n      st.pop();\\n    }\\n  }\\n\\n  if (st.empty())return true;\\n  else return false;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1236791,
                "title": "c-fastest-solution-o-n-time-and-o-n-space",
                "content": "```\\nbool isValid(string s) {\\n        stack<char>st;\\n        \\n        for(char ch : s){\\n            if(!st.empty() && ch == \\'c\\'){\\n                char ch2 = st.top();\\n                st.pop();\\n                if(!st.empty() && ch2 == \\'b\\' && st.top() == \\'a\\')\\n                    st.pop();\\n                \\n                else{\\n                    st.push(ch2);\\n                    st.push(ch);\\n                }\\n            }\\n            \\n            else\\n                st.push(ch);\\n        }\\n        \\n        if(!st.empty())\\n            return false;\\n        \\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nbool isValid(string s) {\\n        stack<char>st;\\n        \\n        for(char ch : s){\\n            if(!st.empty() && ch == \\'c\\'){\\n                char ch2 = st.top();\\n                st.pop();\\n                if(!st.empty() && ch2 == \\'b\\' && st.top() == \\'a\\')\\n                    st.pop();\\n                \\n                else{\\n                    st.push(ch2);\\n                    st.push(ch);\\n                }\\n            }\\n            \\n            else\\n                st.push(ch);\\n        }\\n        \\n        if(!st.empty())\\n            return false;\\n        \\n        return true;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1222134,
                "title": "java-solution-takes-6ms",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        if(s == null || s.length() < 3 || s.charAt(0) != \\'a\\' || s.charAt(s.length()-1) != \\'c\\'){\\n            return false;\\n        }\\n        Stack<Character> stack = new Stack<>();\\n        for(char c:s.toCharArray()){\\n            if(c == \\'c\\'){\\n                if(stack.isEmpty() || stack.pop() != \\'b\\' || stack.isEmpty() || stack.pop() != \\'a\\'){\\n                    return false;\\n                }\\n                continue;\\n            }\\n            stack.push(c);\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        if(s == null || s.length() < 3 || s.charAt(0) != \\'a\\' || s.charAt(s.length()-1) != \\'c\\'){\\n            return false;\\n        }\\n        Stack<Character> stack = new Stack<>();\\n        for(char c:s.toCharArray()){\\n            if(c == \\'c\\'){\\n                if(stack.isEmpty() || stack.pop() != \\'b\\' || stack.isEmpty() || stack.pop() != \\'a\\'){\\n                    return false;\\n                }\\n                continue;\\n            }\\n            stack.push(c);\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1166596,
                "title": "using-string-as-stack-and-stl-c",
                "content": "```\\nbool isValid(string s) {\\n        string s1=\"\";\\n        for(char ele:s)\\n        {\\n            if(ele==\\'c\\'&&s1.length()>1)\\n            {\\n                s1+=ele;\\n                if(s1.substr(s1.size()-3,3)==\"abc\")\\n                {\\n                    int k=3;\\n                    while(k--)\\n                        s1.pop_back();\\n                }\\n                continue;\\n            }\\n            s1+=ele;\\n        }\\n        return s1.size()==0;\\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\nbool isValid(string s) {\\n        string s1=\"\";\\n        for(char ele:s)\\n        {\\n            if(ele==\\'c\\'&&s1.length()>1)\\n            {\\n                s1+=ele;\\n                if(s1.substr(s1.size()-3,3)==\"abc\")\\n                {\\n                    int k=3;\\n                    while(k--)\\n                        s1.pop_back();\\n                }\\n                continue;\\n            }\\n            s1+=ele;\\n        }\\n        return s1.size()==0;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1120410,
                "title": "using-stack-is-slower-that-replace-6-vs-96-speed",
                "content": "I tried three different solutions: built-in replace, re.sub(), stack. The replace was faster than re.sub() and way faster than stack (24 ms, 28 ms, 240 ms)\\n\\nDoes anybody know why stack is slower than built-in replace?\\n\\n```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while \"abc\" in s:\\n            s = s.replace(\"abc\", \"\")\\n        return not s\\n\\nfrom re import search, sub\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while search(r\"abc\", s):\\n            s = sub(\"abc\", \"\", s)\\n        return not s\\n\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        for c in s:\\n            if (len(stack) > 2 and stack[-3] == \"a\" and stack[-2] == \"b\" and\\n                    stack[-1] == \"c\"):\\n                stack = stack[:-3]\\n            stack.append(c)\\n        return stack == [\\'a\\', \\'b\\', \\'c\\']\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while \"abc\" in s:\\n            s = s.replace(\"abc\", \"\")\\n        return not s\\n\\nfrom re import search, sub\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while search(r\"abc\", s):\\n            s = sub(\"abc\", \"\", s)\\n        return not s\\n\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        stack = []\\n        for c in s:\\n            if (len(stack) > 2 and stack[-3] == \"a\" and stack[-2] == \"b\" and\\n                    stack[-1] == \"c\"):\\n                stack = stack[:-3]\\n            stack.append(c)\\n        return stack == [\\'a\\', \\'b\\', \\'c\\']\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1104473,
                "title": "easiest-of-solutions-must-see-c",
                "content": "\\'\\'\\'\\n bool isValid(string s) {\\n\\n        int i =0;\\n        while(s.size()>3 and i<s.size())\\n        {\\n            if(s[i]==\\'a\\')\\n            {\\n                if(s[i+1] == \\'b\\')\\n                {\\n                    if(s[i+2]==\\'c\\')\\n                    {\\n                        s.erase(s.begin() +i,s.begin()+i+3);\\n                        i=0;\\n                    }\\n                }\\n            }\\n            i++;\\n        }\\n        \\n        if(s ==  \"abc\")\\n            return true;\\n        \\n        return false;\\n        \\n    }\\n\\'\\'\\'\\n",
                "solutionTags": [],
                "code": "\\'\\'\\'\\n bool isValid(string s) {\\n\\n        int i =0;\\n        while(s.size()>3 and i<s.size())\\n        {\\n            if(s[i]==\\'a\\')\\n            {\\n                if(s[i+1] == \\'b\\')\\n                {\\n                    if(s[i+2]==\\'c\\')\\n                    {\\n                        s.erase(s.begin() +i,s.begin()+i+3);\\n                        i=0;\\n                    }\\n                }\\n            }\\n            i++;\\n        }\\n        \\n        if(s ==  \"abc\")\\n            return true;\\n        \\n        return false;\\n        \\n    }\\n\\'\\'\\'\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1061610,
                "title": "easy-to-understand-java-stack-implementation",
                "content": "```\\nclass Solution {\\n    \\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<Character>();\\n        for(char ch: s.toCharArray())\\n        {\\n            if(ch == \\'a\\' || ch == \\'b\\')\\n                stack.push(ch);\\n            else\\n            {\\n                if(stack.isEmpty() || stack.peek()!=\\'b\\')\\n                    return false;\\n                stack.pop();\\n                if(stack.isEmpty() || stack.peek()!=\\'a\\')\\n                    return false;\\n                stack.pop();\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<Character>();\\n        for(char ch: s.toCharArray())\\n        {\\n            if(ch == \\'a\\' || ch == \\'b\\')\\n                stack.push(ch);\\n            else\\n            {\\n                if(stack.isEmpty() || stack.peek()!=\\'b\\')\\n                    return false;\\n                stack.pop();\\n                if(stack.isEmpty() || stack.peek()!=\\'a\\')\\n                    return false;\\n                stack.pop();\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1057096,
                "title": "easy-and-fast-js-solution",
                "content": "```\\nvar isValid = function(s) {\\n    let subS = s.split(\\'abc\\').join(\\'\\');\\n    while(subS.length < s.length){\\n         s = subS;\\n         subS = s.split(\\'abc\\').join(\\'\\') ;\\n    }\\n    \\n    return s.length === 0;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar isValid = function(s) {\\n    let subS = s.split(\\'abc\\').join(\\'\\');\\n    while(subS.length < s.length){\\n         s = subS;\\n         subS = s.split(\\'abc\\').join(\\'\\') ;\\n    }\\n    \\n    return s.length === 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1053275,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while len(s) != 0:\\n            s = s.replace(\\'abc\\', \\'\\')\\n            if (len(s) != 0) and (len(s) == len(s.replace(\\'abc\\', \\'\\'))):\\n                return False\\n        return True \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while len(s) != 0:\\n            s = s.replace(\\'abc\\', \\'\\')\\n            if (len(s) != 0) and (len(s) == len(s.replace(\\'abc\\', \\'\\'))):\\n                return False\\n        return True \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1050023,
                "title": "c-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        // Wipe out \\'abc\\' in s, and then wipe out \\'abc\\' in the new string, recursively doing this until there is\\n        // no more \\'abc\\' in the string. If the string is empty, return true, otherwise return false.\\n        if (s.empty())\\n        {\\n            return true;\\n        }\\n        \\n        if (s.find(\"abc\") == string::npos)\\n        {\\n            return false;\\n        }\\n        \\n        string res;\\n        int size = s.size();\\n        for (int i = 0; i < size;)\\n        {\\n            char c1 = s[i], c2 = i + 1 < size ? s[i + 1] : \\' \\';\\n            char c3 = i + 2 < size ? s[i + 2] : \\' \\';\\n            if (c1 == \\'a\\' && c2 == \\'b\\' && c3 == \\'c\\')\\n            {\\n                i += 3;\\n            }\\n            else\\n            {\\n                res += s[i];\\n                ++i;\\n            }\\n        }\\n        \\n        return isValid(res);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        // Wipe out \\'abc\\' in s, and then wipe out \\'abc\\' in the new string, recursively doing this until there is\\n        // no more \\'abc\\' in the string. If the string is empty, return true, otherwise return false.\\n        if (s.empty())\\n        {\\n            return true;\\n        }\\n        \\n        if (s.find(\"abc\") == string::npos)\\n        {\\n            return false;\\n        }\\n        \\n        string res;\\n        int size = s.size();\\n        for (int i = 0; i < size;)\\n        {\\n            char c1 = s[i], c2 = i + 1 < size ? s[i + 1] : \\' \\';\\n            char c3 = i + 2 < size ? s[i + 2] : \\' \\';\\n            if (c1 == \\'a\\' && c2 == \\'b\\' && c3 == \\'c\\')\\n            {\\n                i += 3;\\n            }\\n            else\\n            {\\n                res += s[i];\\n                ++i;\\n            }\\n        }\\n        \\n        return isValid(res);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1033109,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    boolean flag=false;\\n    public boolean isValid(String s) {\\n        if(s.length()%3!=0)\\n            return false;\\n        reduce(s);\\n        return flag;\\n        \\n    }\\n    void reduce(String s)\\n    {\\n        if(s.equals(\"\"))\\n        {\\n            flag=true;\\n            return;\\n        }\\n        for(int i=0;i<s.length()-2;i++)\\n        {\\n            \\n            if(s.charAt(i)==\\'a\\'&&s.charAt(i+1)==\\'b\\'&&s.charAt(i+2)==\\'c\\')\\n            {\\n                 if(i+3<s.length())\\n                s=s.substring(0,i)+s.substring(i+3);\\n                else\\n                    s=s.substring(0,i);\\n                reduce(s);\\n                break;\\n               \\n            }\\n        }\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    boolean flag=false;\\n    public boolean isValid(String s) {\\n        if(s.length()%3!=0)\\n            return false;\\n        reduce(s);\\n        return flag;\\n        \\n    }\\n    void reduce(String s)\\n    {\\n        if(s.equals(\"\"))\\n        {\\n            flag=true;\\n            return;\\n        }\\n        for(int i=0;i<s.length()-2;i++)\\n        {\\n            \\n            if(s.charAt(i)==\\'a\\'&&s.charAt(i+1)==\\'b\\'&&s.charAt(i+2)==\\'c\\')\\n            {\\n                 if(i+3<s.length())\\n                s=s.substring(0,i)+s.substring(i+3);\\n                else\\n                    s=s.substring(0,i);\\n                reduce(s);\\n                break;\\n               \\n            }\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1007884,
                "title": "java-88-stack-with-detailed-comments",
                "content": "Summary: similar to checking valid parentheses with a stack, linear scan left to right, \\'a\\', \\'b\\' get pushed to the stack. \\'c\\' will try to pop \\'b\\', \\'a\\' from the stack, early return false if popping failed. Make sure stack is empty at the end. Linear space and time.\\n```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        if (s.length() % 3 != 0) return false; //small optimization\\n        Stack<Character> stack = new Stack<>();\\n        for (char c : s.toCharArray()){\\n            if (c != \\'c\\'){\\n                stack.push(c); //push \\'a\\', \\'b\\'\\n            } else {\\n                if (stack.size() < 2 || stack.pop() != \\'b\\' || stack.pop() != \\'a\\') return false; //try to pop \\'b\\', \\'a\\' in that order\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        if (s.length() % 3 != 0) return false; //small optimization\\n        Stack<Character> stack = new Stack<>();\\n        for (char c : s.toCharArray()){\\n            if (c != \\'c\\'){\\n                stack.push(c); //push \\'a\\', \\'b\\'\\n            } else {\\n                if (stack.size() < 2 || stack.pop() != \\'b\\' || stack.pop() != \\'a\\') return false; //try to pop \\'b\\', \\'a\\' in that order\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 902322,
                "title": "java-easy-to-understand",
                "content": "\\t public boolean isValid(String s) {\\n        String abc = \"abc\";\\n        StringBuilder builder = new StringBuilder();\\n        while(s.indexOf(abc) >= 0){\\n            builder = new StringBuilder();\\n            int index = s.indexOf(abc);\\n            builder.append(s.substring(0, index)).append(s.substring(index + 3));\\n            s = builder.toString();\\n        }\\n        return s.isEmpty();\\n    }",
                "solutionTags": [],
                "code": "\\t public boolean isValid(String s) {\\n        String abc = \"abc\";\\n        StringBuilder builder = new StringBuilder();\\n        while(s.indexOf(abc) >= 0){\\n            builder = new StringBuilder();\\n            int index = s.indexOf(abc);\\n            builder.append(s.substring(0, index)).append(s.substring(index + 3));\\n            s = builder.toString();\\n        }\\n        return s.isEmpty();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 890708,
                "title": "easy-c-solution-using-string-find",
                "content": "Just find \"abc\" and remove until there is no abc remains.Then check if string is empty return true otherwise return false.\\n\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n        int startingPoint;\\n        while(s.length()!=0)\\n        {\\n            startingPoint=s.find(\"abc\");\\n            if(startingPoint==string::npos)\\n            {\\n                if(s.length()!=0)return false;\\n            }\\n            else\\n            {\\n            s.erase(startingPoint,3);\\n            }\\n            \\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n        int startingPoint;\\n        while(s.length()!=0)\\n        {\\n            startingPoint=s.find(\"abc\");\\n            if(startingPoint==string::npos)\\n            {\\n                if(s.length()!=0)return false;\\n            }\\n            else\\n            {\\n            s.erase(startingPoint,3);\\n            }\\n            \\n        }\\n        \\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 882965,
                "title": "easy-c-solution-100-fast",
                "content": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> S;\\n        for(char i:s){\\n            if(i==\\'c\\'){\\n                if(S.empty() || S.top()!=\\'b\\')return false;\\n                S.pop();\\n                if(S.empty() || S.top()!=\\'a\\')return false;\\n                S.pop();\\n            \\n            }else{\\n                S.push(i);\\n            }\\n        }\\n        if(!S.empty()) return false;\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> S;\\n        for(char i:s){\\n            if(i==\\'c\\'){\\n                if(S.empty() || S.top()!=\\'b\\')return false;\\n                S.pop();\\n                if(S.empty() || S.top()!=\\'a\\')return false;\\n                S.pop();\\n            \\n            }else{\\n                S.push(i);\\n            }\\n        }\\n        if(!S.empty()) return false;\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 824818,
                "title": "stack-c-simple-code-with-explanation",
                "content": "Whenever we encounter a \\'c\\' we check if the last two elements inserted in stack are \\'a\\' & \\'b\\'. If not return false. \\nThe logic behind this is that we will always have a \\'abc\\' string in input, after recursively removing \\'abc\\' from the string if we are left with an empty stack, then the string is valid. Otherwise its not.\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n        int n = s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(st.empty() || s[i]!=\\'c\\')\\n               st.push(s[i]);\\n            else if(s[i]==\\'c\\')\\n            {\\n                if(st.empty())\\n                    return false;\\n                char b = st.top();\\n                st.pop();\\n                if(st.empty())\\n                    return false;\\n                char a = st.top();\\n                if(a==\\'a\\' && b==\\'b\\')\\n                    st.pop();\\n                else return false;\\n            }\\n        }\\n        if(st.empty())\\n            return true;\\n        return false;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n        int n = s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(st.empty() || s[i]!=\\'c\\')\\n               st.push(s[i]);\\n            else if(s[i]==\\'c\\')\\n            {\\n                if(st.empty())\\n                    return false;\\n                char b = st.top();\\n                st.pop();\\n                if(st.empty())\\n                    return false;\\n                char a = st.top();\\n                if(a==\\'a\\' && b==\\'b\\')\\n                    st.pop();\\n                else return false;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 824816,
                "title": "c-simple-stack-solution-o-n",
                "content": "If c comes you check the top 2 elements if they are not equal to a and b then return false or if the stack is empty or if in the end stack is not empty.\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'c\\'){\\n                st.push(s[i]);\\n            }else{\\n                if(st.empty()){\\n                    return false;\\n                }\\n                char a;\\n                if(!st.empty()){\\n                    a=st.top();\\n                    st.pop();\\n                }\\n                if(st.empty() || st.top()!=\\'a\\' || a!=\\'b\\'){\\n                    return false;\\n                }else{\\n                    st.pop();\\n                }\\n            }\\n        }\\n        if(!st.empty()){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]!=\\'c\\'){\\n                st.push(s[i]);\\n            }else{\\n                if(st.empty()){\\n                    return false;\\n                }\\n                char a;\\n                if(!st.empty()){\\n                    a=st.top();\\n                    st.pop();\\n                }\\n                if(st.empty() || st.top()!=\\'a\\' || a!=\\'b\\'){\\n                    return false;\\n                }else{\\n                    st.pop();\\n                }\\n            }\\n        }\\n        if(!st.empty()){\\n            return false;\\n        }\\n        return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 687050,
                "title": "using-repetitive-split-and-join",
                "content": "Here is my solution relying heavily on Python\\'s built-in string manipulation methods:\\nWe split an input string on valid string and join the remainder and repeat the split-join cycle until we get empty string, at the moment we don\\'t get a string split in at least 2, we return false.\\n```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        valid_str = \\'abc\\'\\n        while 1:\\n            split = S.split(valid_str)\\n            if len(split) == 1:\\n                return False\\n            S = \\'\\'.join(split)\\n            if S == \\'\\':\\n                return True\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        valid_str = \\'abc\\'\\n        while 1:\\n            split = S.split(valid_str)\\n            if len(split) == 1:\\n                return False\\n            S = \\'\\'.join(split)\\n            if S == \\'\\':\\n                return True\\n```",
                "codeTag": "Java"
            },
            {
                "id": 634612,
                "title": "python-simple",
                "content": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        stk = []\\n        for c in S:\\n            if c == \\'a\\' or c == \\'b\\':\\n                stk.append(c)\\n            if c == \\'c\\':\\n                if len(stk) < 2:\\n                    return False\\n                if stk[-2] != \\'a\\' or stk[-1] != \\'b\\':\\n                    return False\\n                stk.pop()\\n                stk.pop()\\n        return len(stk) == 0\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        stk = []\\n        for c in S:\\n            if c == \\'a\\' or c == \\'b\\':\\n                stk.append(c)\\n            if c == \\'c\\':\\n                if len(stk) < 2:\\n                    return False\\n                if stk[-2] != \\'a\\' or stk[-1] != \\'b\\':\\n                    return False\\n                stk.pop()\\n                stk.pop()\\n        return len(stk) == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 593417,
                "title": "2-pointer-solution-o-n-time-o-1-space-very-few-lines-c-solution",
                "content": "class Solution {\\npublic:\\n    bool isValid(string s) {\\n    \\n       int i = 0, n = s.length();\\n        for (int j = 0; j < n; ++j, ++i) {\\n            s[i] = s[j];\\n            if (i >1 && s[i - 1] == \\'b\\'&&s[i-2]==\\'a\\'&&s[i]==\\'c\\')\\n                i -= 3;\\n        }\\n        return !i;\\n\\n    }\\n};\\n",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n    bool isValid(string s) {\\n    \\n       int i = 0, n = s.length();\\n        for (int j = 0; j < n; ++j, ++i) {\\n            s[i] = s[j];\\n            if (i >1 && s[i - 1] == \\'b\\'&&s[i-2]==\\'a\\'&&s[i]==\\'c\\')\\n                i -= 3;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 577829,
                "title": "java-replace",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        if (S == null) return false;\\n        S = S.replaceAll(\"abc\", \"\");\\n        S = S.replace(\"abc\", \"\");\\n        return S.equals(\"abc\") || S.equals(\"\");\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        if (S == null) return false;\\n        S = S.replaceAll(\"abc\", \"\");\\n        S = S.replace(\"abc\", \"\");\\n        return S.equals(\"abc\") || S.equals(\"\");\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 570741,
                "title": "faster-than-98-02-of-python3-online-submissions",
                "content": "I proposed a string replace implementation algorithm which is faster than 98.02% Python3 submissions.\\n\\n```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        while \\'abc\\' in S:\\n            S = S.replace(\\'abc\\', \\'\\')\\n        return not S\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        while \\'abc\\' in S:\\n            S = S.replace(\\'abc\\', \\'\\')\\n        return not S\\n```",
                "codeTag": "Java"
            },
            {
                "id": 556413,
                "title": "java-easy-3-line-solution",
                "content": "Intuition : The String S is built this way : \"abc\" --> some transformations --> S. \\nWe can reverse engineer this, and removing \"abc\" repeatedly till we do not find any more \"abc\"s as substring. Every iteration step should lead us to another substring which has \"abc\" as a substring (As they are all of the form X + \"abc\" + Y). Now as X + Y in turn is \"abc\" itself, the end result for a valid string, thus, is an empty string.\\n```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        while(S.contains(\"abc\"))\\n            S = S.replace(\"abc\", \"\");\\n        return S.length() == 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        while(S.contains(\"abc\"))\\n            S = S.replace(\"abc\", \"\");\\n        return S.length() == 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 551732,
                "title": "python-3-solution-using-replace-and-stack",
                "content": "**Using replace()**\\n```python\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        while \\'abc\\' in S:\\n            S = S.replace(\\'abc\\',\\'\\',S.count(\\'abc\\'))\\n        return len(S)==0\\n```\\n\\n**Using Stack**\\n```python\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        stack = []\\n        for i in S:\\n            if i == \\'c\\':\\n                if stack[-2:] != [\\'a\\', \\'b\\']:\\n                    return False\\n                stack.pop()\\n                stack.pop()\\n            else:\\n                stack.append(i)\\n        return not stack",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        while \\'abc\\' in S:\\n            S = S.replace(\\'abc\\',\\'\\',S.count(\\'abc\\'))\\n        return len(S)==0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 534081,
                "title": "super-simple-javascript-solution",
                "content": "```\\n/**\\n * @param {string} S\\n * @return {boolean}\\n */\\nvar isValid = function(S) {\\n    while(S.indexOf(\\'abc\\')>=0) {\\n        S=S.split(\\'abc\\').join(\\'\\');\\n    }\\n    return S.length === 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} S\\n * @return {boolean}\\n */\\nvar isValid = function(S) {\\n    while(S.indexOf(\\'abc\\')>=0) {\\n        S=S.split(\\'abc\\').join(\\'\\');\\n    }\\n    return S.length === 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 506273,
                "title": "javascript-o-1",
                "content": "```\\n/**\\n * @param {string} S\\n * @return {boolean}\\n */\\nconst isValid = (S) => {\\n  let i = 0;\\n  const st = [];\\n  while (i < S.length) {\\n    const ch = S.charAt(i++);\\n    if (ch !== \\'c\\') {\\n        st.push(ch);\\n    } else {\\n      if (!(st.pop() === \\'b\\' && st.pop() === \\'a\\')) {\\n        return false;\\n      }        \\n    }\\n  }\\n\\n  return st.length === 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} S\\n * @return {boolean}\\n */\\nconst isValid = (S) => {\\n  let i = 0;\\n  const st = [];\\n  while (i < S.length) {\\n    const ch = S.charAt(i++);\\n    if (ch !== \\'c\\') {\\n        st.push(ch);\\n    } else {\\n      if (!(st.pop() === \\'b\\' && st.pop() === \\'a\\')) {\\n        return false;\\n      }        \\n    }\\n  }\\n\\n  return st.length === 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 459055,
                "title": "simple-java-solution-excellent-memory-usage-no-string-replacement-required",
                "content": "1 on top of stack -> a was last seen\\n2 on top of stack -> b was last seen\\nNo need to add 3 for \\'c\\' since \\'c\\' is the end of a block/region\\n\\n```\\n\\tpublic boolean isValid(String s) {\\n        \\n        if(s == null || s.isEmpty()) {\\n            return false;\\n        }\\n        \\n        s = s.toLowerCase();\\n        \\n        Stack<Integer> stack = new Stack<>();\\n        for(int i=0; i<s.length(); i++) {\\n            char c = s.charAt(i);\\n            if(c == \\'a\\') {\\n                stack.push(1);\\n            }\\n            else if(c == \\'b\\') {\\n                if(stack.isEmpty() || stack.peek() != 1) {\\n                    return false;\\n                }\\n                stack.pop();\\n                stack.push(2);\\n            }\\n            else if(c == \\'c\\') {\\n                if(stack.isEmpty() || stack.peek() != 2) {\\n                    return false;\\n                }\\n                stack.pop();\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n        \\n        return stack.isEmpty();\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\tpublic boolean isValid(String s) {\\n        \\n        if(s == null || s.isEmpty()) {\\n            return false;\\n        }\\n        \\n        s = s.toLowerCase();\\n        \\n        Stack<Integer> stack = new Stack<>();\\n        for(int i=0; i<s.length(); i++) {\\n            char c = s.charAt(i);\\n            if(c == \\'a\\') {\\n                stack.push(1);\\n            }\\n            else if(c == \\'b\\') {\\n                if(stack.isEmpty() || stack.peek() != 1) {\\n                    return false;\\n                }\\n                stack.pop();\\n                stack.push(2);\\n            }\\n            else if(c == \\'c\\') {\\n                if(stack.isEmpty() || stack.peek() != 2) {\\n                    return false;\\n                }\\n                stack.pop();\\n            }\\n            else {\\n                return false;\\n            }\\n        }\\n        \\n        return stack.isEmpty();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 405645,
                "title": "simple-python",
                "content": "```\\nclass Solution(object):\\n    def isValid(self, S):\\n        \"\"\"\\n        :type S: str\\n        :rtype: bool\\n        \"\"\"\\n        stack = []\\n        \\n        for char in S:\\n            stack.append(char)\\n            \\n            if len(stack) >= 3 and stack[-3] + stack[-2] + stack[-1] == \\'abc\\':\\n                for i in range(3):\\n                    stack.pop()\\n            \\n        return not stack",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isValid(self, S):\\n        \"\"\"\\n        :type S: str\\n        :rtype: bool\\n        \"\"\"\\n        stack = []\\n        \\n        for char in S:\\n            stack.append(char)\\n            \\n            if len(stack) >= 3 and stack[-3] + stack[-2] + stack[-1] == \\'abc\\':\\n                for i in range(3):\\n                    stack.pop()\\n            \\n        return not stack",
                "codeTag": "Java"
            },
            {
                "id": 390642,
                "title": "python-3-easy-to-understand",
                "content": "\\tclass Solution:\\n\\t\\tdef isValid(self, S: str) -> bool:\\n\\t\\t\\twhile \"abc\" in S:\\n\\t\\t\\t\\tidx = S.index(\"abc\")\\n\\t\\t\\t\\tS = S[:idx] + S[idx + 3:]\\n\\t\\t\\treturn not S",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef isValid(self, S: str) -> bool:\\n\\t\\t\\twhile \"abc\" in S:\\n\\t\\t\\t\\tidx = S.index(\"abc\")\\n\\t\\t\\t\\tS = S[:idx] + S[idx + 3:]\\n\\t\\t\\treturn not S",
                "codeTag": "Java"
            },
            {
                "id": 384915,
                "title": "java-1-stringbuilder-indexof-delete-2-using-stack",
                "content": "```\\n    public boolean isValid(String S) {\\n        Stack<Character> stack = new Stack<Character>();\\n        for(char ch : S.toCharArray()){\\n            if(ch!=\\'c\\')\\n                stack.push(ch);\\n            else if(!stack.isEmpty() && stack.pop()==\\'b\\' && !stack.isEmpty() && stack.pop()==\\'a\\')\\n                continue;\\n            else\\n                return false;\\n\\n        }\\n\\n        return stack.isEmpty();\\n    }\\n```\\n```\\n    public boolean isValid(String S) {\\n        StringBuilder sb = new StringBuilder(S);\\n        while(true){\\n            int ind = sb.indexOf(\"abc\");\\n            if(ind < 0)\\n                break;\\n\\n            sb.delete(ind, ind+3);\\n        }\\n\\n        return sb.length()==0 ? true : false;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public boolean isValid(String S) {\\n        Stack<Character> stack = new Stack<Character>();\\n        for(char ch : S.toCharArray()){\\n            if(ch!=\\'c\\')\\n                stack.push(ch);\\n            else if(!stack.isEmpty() && stack.pop()==\\'b\\' && !stack.isEmpty() && stack.pop()==\\'a\\')\\n                continue;\\n            else\\n                return false;\\n\\n        }\\n\\n        return stack.isEmpty();\\n    }\\n```\n```\\n    public boolean isValid(String S) {\\n        StringBuilder sb = new StringBuilder(S);\\n        while(true){\\n            int ind = sb.indexOf(\"abc\");\\n            if(ind < 0)\\n                break;\\n\\n            sb.delete(ind, ind+3);\\n        }\\n\\n        return sb.length()==0 ? true : false;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 375441,
                "title": "python-100-solution-in-time-and-96-in-space",
                "content": "For Time\\n        while S.__contains__(\\'abc\\') and S:\\n            S = \\'\\'.join(S.split(\\'abc\\'))\\n        return False if S else True\\n\\t\\t\\nFor Space\\n\\t\\t        stack = []\\n        for ch in S:\\n            if ch in (\\'a\\', \\'b\\'):\\n                stack.append(ch)\\n            else:\\n                import pdb;\\n                pdb.set_trace()\\n                if not(len(stack)>=2 and stack.pop()== \\'b\\' and stack.pop() == \\'a\\'):\\n                    return False\\n        return False if stack else True",
                "solutionTags": [],
                "code": "For Time\\n        while S.__contains__(\\'abc\\') and S:\\n            S = \\'\\'.join(S.split(\\'abc\\'))\\n        return False if S else True\\n\\t\\t\\nFor Space\\n\\t\\t        stack = []\\n        for ch in S:\\n            if ch in (\\'a\\', \\'b\\'):\\n                stack.append(ch)\\n            else:\\n                import pdb;\\n                pdb.set_trace()\\n                if not(len(stack)>=2 and stack.pop()== \\'b\\' and stack.pop() == \\'a\\'):\\n                    return False\\n        return False if stack else True",
                "codeTag": "Python3"
            },
            {
                "id": 352625,
                "title": "python-stack",
                "content": "```python\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        \\n        N = len(S)\\n        if N % 3 or N == 0:\\n            return False\\n        \\n        arr = [None] * N\\n        arri = 0\\n        for c in S:\\n            arr[arri] = c\\n            arri += 1\\n            if arri >= 3 and arr[arri-3] == \\'a\\' and arr[arri-2] == \\'b\\' and arr[arri-1] == \\'c\\':\\n                arri -= 3\\n        return arri == 0\\n```\\n",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        \\n        N = len(S)\\n        if N % 3 or N == 0:\\n            return False\\n        \\n        arr = [None] * N\\n        arri = 0\\n        for c in S:\\n            arr[arri] = c\\n            arri += 1\\n            if arri >= 3 and arr[arri-3] == \\'a\\' and arr[arri-2] == \\'b\\' and arr[arri-1] == \\'c\\':\\n                arri -= 3\\n        return arri == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 335431,
                "title": "3-lines-c",
                "content": "```\\npublic bool IsValid(string S)\\n{\\n\\twhile (S.Contains(\"abc\"))\\n\\t\\tS = S.Replace(\"abc\", \"\");\\n\\treturn S.Length == 0;\\n}",
                "solutionTags": [],
                "code": "```\\npublic bool IsValid(string S)\\n{\\n\\twhile (S.Contains(\"abc\"))\\n\\t\\tS = S.Replace(\"abc\", \"\");\\n\\treturn S.Length == 0;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 319907,
                "title": "3-lines-python3-solution",
                "content": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        while S and \\'abc\\' in S:\\n            S = re.sub(\\'abc\\', \\'\\', S)\\n        return not S\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        while S and \\'abc\\' in S:\\n            S = re.sub(\\'abc\\', \\'\\', S)\\n        return not S\\n```",
                "codeTag": "Java"
            },
            {
                "id": 307447,
                "title": "very-simple-regex-solution",
                "content": "It\\'s more of a hack than a valid interview solution; but oh well. :D\\n```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        if (S == null) return false;\\n        while (S.contains(\"abc\")) {\\n            S = S.replaceAll(\"abc\", \"\");\\n        }\\n        return S.isEmpty();\\n    } \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        if (S == null) return false;\\n        while (S.contains(\"abc\")) {\\n            S = S.replaceAll(\"abc\", \"\");\\n        }\\n        return S.isEmpty();\\n    } \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 279868,
                "title": "5-line-super-simple-java-solution",
                "content": "The idea is that if the string contains \"abc\" then it will keep replacing \"abc\" with \"\" until the replacing operation cannot be done. Hope this helps! :)\\n```\\n    public boolean isValid(String S) {\\n        while(S.contains(\"abc\")){\\n            S = S.replace(\"abc\",\"\");\\n            if(S.equals(\"\"))\\n                return true;\\n        }return false;\\n    }",
                "solutionTags": [],
                "code": "The idea is that if the string contains \"abc\" then it will keep replacing \"abc\" with \"\" until the replacing operation cannot be done. Hope this helps! :)\\n```\\n    public boolean isValid(String S) {\\n        while(S.contains(\"abc\")){\\n            S = S.replace(\"abc\",\"\");\\n            if(S.equals(\"\"))\\n                return true;\\n        }return false;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 266825,
                "title": "c-constant-space-simple-with-explanation",
                "content": "The idea is simple, if a ``Word`` is valid after substitution, then erasing substring ``\"abc\"`` each time to either **empty string** OR ``\"abc\"`` substr.\\nAt each iteration, I am deleting substr ``\"abc\"``.\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string S) {\\n        if(S.empty()) return false;\\n        if(S==\"abc\") return true;\\n        while(!S.empty()){\\n            size_t f = S.find(\"abc\");\\n            if(f==std::string::npos) return false; // no \"abc\" substr\\n            S.erase(S.begin()+f,S.begin()+f+3);    // remove \"abc\"\\n            if(S==\"abc\") return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string S) {\\n        if(S.empty()) return false;\\n        if(S==\"abc\") return true;\\n        while(!S.empty()){\\n            size_t f = S.find(\"abc\");\\n            if(f==std::string::npos) return false; // no \"abc\" substr\\n            S.erase(S.begin()+f,S.begin()+f+3);    // remove \"abc\"\\n            if(S==\"abc\") return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 265113,
                "title": "c-easy-solution-beat-99-using-recursive",
                "content": "```\\n#pragma GCC optimize(\"Ofast\")\\n#pragma GCC target(\"avx,avx2,fma\")\\nstatic const int _ = [](){\\n\\tios::sync_with_stdio(false);\\n\\tcin.sync_with_stdio(false);\\n\\tcout.sync_with_stdio(false);\\n\\tcin.tie(nullptr);\\n\\tcout.tie(nullptr);\\n\\treturn 0;\\n}();\\n\\n\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s == \"\") return true;\\n        if(s.size() < 3) return false;\\n        \\n        bool ans = false;\\n        size_t pos = s.find(\"abc\", 0);\\n        size_t i = 0, diff = 0;\\n        if(pos == string::npos) return ans;\\n        \\n        string helper;\\n        \\n        for(; pos != string::npos ; pos = s.find(\"abc\", i)) {\\n        \\t//cout << \"i: \" << i << \" pos: \" << pos << endl;\\n        \\tif(pos != i) {\\n        \\t\\tdiff = pos - i;\\n        \\t\\thelper += s.substr(i, diff);\\n        \\t\\t//cout << \"helper: \" << helper << endl;\\n\\t\\t\\t}\\n        \\tpos += 2;\\n        \\ti = pos + 1;\\n\\t\\t}\\n        \\n        diff = s.size() - i;\\n        helper += s.substr(i, diff);\\n        //cout << \"last helper: \" << helper << endl;\\n        \\n        if(isValid(helper))\\n        \\tans = true;\\n        \\t\\n\\t\\treturn ans;\\n\\t}\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n#pragma GCC optimize(\"Ofast\")\\n#pragma GCC target(\"avx,avx2,fma\")\\nstatic const int _ = [](){\\n\\tios::sync_with_stdio(false);\\n\\tcin.sync_with_stdio(false);\\n\\tcout.sync_with_stdio(false);\\n\\tcin.tie(nullptr);\\n\\tcout.tie(nullptr);\\n\\treturn 0;\\n}();\\n\\n\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s == \"\") return true;\\n        if(s.size() < 3) return false;\\n        \\n        bool ans = false;\\n        size_t pos = s.find(\"abc\", 0);\\n        size_t i = 0, diff = 0;\\n        if(pos == string::npos) return ans;\\n        \\n        string helper;\\n        \\n        for(; pos != string::npos ; pos = s.find(\"abc\", i)) {\\n        \\t//cout << \"i: \" << i << \" pos: \" << pos << endl;\\n        \\tif(pos != i) {\\n        \\t\\tdiff = pos - i;\\n        \\t\\thelper += s.substr(i, diff);\\n        \\t\\t//cout << \"helper: \" << helper << endl;\\n\\t\\t\\t}\\n        \\tpos += 2;\\n        \\ti = pos + 1;\\n\\t\\t}\\n        \\n        diff = s.size() - i;\\n        helper += s.substr(i, diff);\\n        //cout << \"last helper: \" << helper << endl;\\n        \\n        if(isValid(helper))\\n        \\tans = true;\\n        \\t\\n\\t\\treturn ans;\\n\\t}\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 254728,
                "title": "c-both-100-stack-o-n-time-space",
                "content": "```\\npublic bool IsValid(string S) {\\n        Stack<char> stack = new Stack<char>();\\n        foreach(char i in S){\\n            switch (i){\\n                case \\'a\\':\\n                    stack.Push(i);\\n                    break;\\n                case \\'b\\':\\n                    if(stack.Count == 0 || stack.Peek() == \\'c\\') return false;\\n                    stack.Push(i);\\n                    break;\\n                case \\'c\\':\\n                    if(stack.Count == 0 || stack.Peek() != \\'b\\') return false;\\n                    stack.Pop();\\n\\t\\t\\t\\t\\tif(stack.Count == 0 || stack.Peek() != \\'a\\') return false;\\n                    stack.Pop();\\n                    break;\\n            }\\n        }\\n        if(stack.Count > 0) return false;\\n        return true;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic bool IsValid(string S) {\\n        Stack<char> stack = new Stack<char>();\\n        foreach(char i in S){\\n            switch (i){\\n                case \\'a\\':\\n                    stack.Push(i);\\n                    break;\\n                case \\'b\\':\\n                    if(stack.Count == 0 || stack.Peek() == \\'c\\') return false;\\n                    stack.Push(i);\\n                    break;\\n                case \\'c\\':\\n                    if(stack.Count == 0 || stack.Peek() != \\'b\\') return false;\\n                    stack.Pop();\\n\\t\\t\\t\\t\\tif(stack.Count == 0 || stack.Peek() != \\'a\\') return false;\\n                    stack.Pop();\\n                    break;\\n            }\\n        }\\n        if(stack.Count > 0) return false;\\n        return true;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 253549,
                "title": "python-o-n-solution-with-idea-of-valid-parentheses",
                "content": "let\\'s think about how to slove [valid parentheses](https://leetcode.com/problems/valid-parentheses/), where \"(\" needs to follow by \")\"/\"(\". where if we have \")\" and the last element in the stack is \"(\" we can go ahead and remove it. \\n\\nif the stack is empty at the end then it is valid else not.\\n\\n----------------------\\n\"a\" can be treat as one kind of Parentheses where it closed by \"b\", and \"b\" close by \"c\".\\nif we find \"b\" and the last element in stack is \"a\", we can pop \"a\", where \"b\" should wait for it\\'s close patentheese \"c\". \\n\\n\\n\\n```\\nclass Solution(object):\\n    def isValid(self, S):\\n        \"\"\"\\n        :type S: str\\n        :rtype: bool\\n        \"\"\"\\n        if not S:\\n            return False\\n        s = []\\n        for char in S:\\n            if char == \"a\":\\n                s.append(char)\\n            if char == \"b\":\\n                if not s:\\n                    return False\\n                if s[-1] == \"a\":\\n                    s.pop()\\n                    s.append(char)\\n            if char == \"c\":\\n                if not s:\\n                    return False\\n                if s[-1] == \\'b\\':\\n                    s.pop()\\n        return len(s) == 0\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isValid(self, S):\\n        \"\"\"\\n        :type S: str\\n        :rtype: bool\\n        \"\"\"\\n        if not S:\\n            return False\\n        s = []\\n        for char in S:\\n            if char == \"a\":\\n                s.append(char)\\n            if char == \"b\":\\n                if not s:\\n                    return False\\n                if s[-1] == \"a\":\\n                    s.pop()\\n                    s.append(char)\\n            if char == \"c\":\\n                if not s:\\n                    return False\\n                if s[-1] == \\'b\\':\\n                    s.pop()\\n        return len(s) == 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 251273,
                "title": "simple-and-easy-to-understand-but-less-efficient",
                "content": "Basically, just keeps removing \"abc\" and check if the string can be empty after that.\\n\\n```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        while (S.contains(\"abc\")) {\\n            S = S.replace(\"abc\", \"\");\\n        }\\n        return S.length() == 0 ;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String S) {\\n        while (S.contains(\"abc\")) {\\n            S = S.replace(\"abc\", \"\");\\n        }\\n        return S.length() == 0 ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 249711,
                "title": "java-3-line-stack-solution-o-n-time-space",
                "content": "```\\n    public boolean isValid(String S) {\\n        Deque<Character> d = new ArrayDeque<Character>();\\n        for( char c : S.toCharArray() ) if( c!=\\'c\\' ) d.push(c); else if( d.isEmpty() || d.pop()!=\\'b\\' || d.isEmpty() || d.pop()!=\\'a\\' ) return false;\\n        return d.isEmpty();\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public boolean isValid(String S) {\\n        Deque<Character> d = new ArrayDeque<Character>();\\n        for( char c : S.toCharArray() ) if( c!=\\'c\\' ) d.push(c); else if( d.isEmpty() || d.pop()!=\\'b\\' || d.isEmpty() || d.pop()!=\\'a\\' ) return false;\\n        return d.isEmpty();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 249412,
                "title": "c-simplest-solution-with-0-n-time-complexity-and-0-1-space-complexity",
                "content": "A count should always be higher or equal than b and c .\\nSimilarly B count should always be higher than c.\\nIf this condition doesnot hold true we will return false;\\nelse\\nif count of a ,b and c is equal than return true otherwise return false;\\n[class Solution {\\npublic:\\n    bool isValid(string S) {\\n        int n=S.length();\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<n;i++){\\n            if(S[i]==\\'a\\')a++;\\n            else if(S[i]==\\'b\\')b++;\\n            else if(S[i]==\\'c\\')c++;\\n            if(a<b||b<c||a<c){\\n                return 0;\\n            }\\n        }\\n        if(a==b&&a==c)return 1;\\n        return 0;\\n    }\\n};](http://)",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    bool isValid(string S) {\\n        int n=S.length();\\n        int a=0,b=0,c=0;\\n        for(int i=0;i<n;i++){\\n            if(S[i]==\\'a\\')a++;\\n            else if(S[i]==\\'b\\')b++;\\n            else if(S[i]==\\'c\\')c++;\\n            if(a<b||b<c||a<c){\\n                return 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 249287,
                "title": "java-super-easy-and-fast-o-n-solution-beats-100-time-and-100-space",
                "content": "```\\n    public boolean isValid(String S) {\\n        Stack<Character> stk=new Stack<>();\\n        for(int i=0;i<S.length();i++) {\\n            if(S.charAt(i)==\\'c\\'&&!stk.isEmpty()) {\\n                char tmp=stk.pop();\\n                if(!stk.isEmpty()&&tmp==\\'b\\'&&stk.peek()==\\'a\\') {\\n                    stk.pop();\\n                    continue;\\n                }\\n                else stk.push(tmp);\\n            }\\n            stk.push(S.charAt(i));\\n        } \\n        return stk.isEmpty();\\n    }",
                "solutionTags": [],
                "code": "```\\n    public boolean isValid(String S) {\\n        Stack<Character> stk=new Stack<>();\\n        for(int i=0;i<S.length();i++) {\\n            if(S.charAt(i)==\\'c\\'&&!stk.isEmpty()) {\\n                char tmp=stk.pop();\\n                if(!stk.isEmpty()&&tmp==\\'b\\'&&stk.peek()==\\'a\\') {\\n                    stk.pop();\\n                    continue;\\n                }\\n                else stk.push(tmp);\\n            }\\n            stk.push(S.charAt(i));\\n        } \\n        return stk.isEmpty();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 248843,
                "title": "why-is-aabcbabcc-is-valid",
                "content": "The idea would be compare S to \\'abc\\' from left to right; remove any matched letter and continue this process until nothing can be matched; then try the other direction. If finally we go an empty string, then return True, otherwise False.\\n\\n```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        \"\"\"\\n        The idea would be compare S to \\'abc\\' from left to right; remove any matched letter and continue this process until nothing can be matched; then try the other direction. If finally we go an empty string, then return True, otherwise False.\\n        \"\"\"\\n        T = \\'abc\\'\\n        if S is None or len(S) < len(T):\\n            return False\\n        # matching from left first\\n        left = 0\\n        right = len(S)\\n        while left < right:\\n            i = 0\\n            while i < len(T) and left + i < right and S[left + i] == T[i]:\\n                i += 1\\n            if i == 0:\\n                # nothing can be matched from left any more\\n                break\\n            left += i\\n        while left < right:\\n            i = 0\\n            while i < len(T) and left + i < right and S[right - i - 1] == T[-i - 1]:\\n                i += 1\\n            if i == 0:\\n                # nothing can be matched from tight any more\\n                break\\n            right -= i\\n        return left >= right\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def isValid(self, S: str) -> bool:\\n        \"\"\"\\n        The idea would be compare S to \\'abc\\' from left to right; remove any matched letter and continue this process until nothing can be matched; then try the other direction. If finally we go an empty string, then return True, otherwise False.\\n        \"\"\"\\n        T = \\'abc\\'\\n        if S is None or len(S) < len(T):\\n            return False\\n        # matching from left first\\n        left = 0\\n        right = len(S)\\n        while left < right:\\n            i = 0\\n            while i < len(T) and left + i < right and S[left + i] == T[i]:\\n                i += 1\\n            if i == 0:\\n                # nothing can be matched from left any more\\n                break\\n            left += i\\n        while left < right:\\n            i = 0\\n            while i < len(T) and left + i < right and S[right - i - 1] == T[-i - 1]:\\n                i += 1\\n            if i == 0:\\n                # nothing can be matched from tight any more\\n                break\\n            right -= i\\n        return left >= right\\n```",
                "codeTag": "Java"
            },
            {
                "id": 248748,
                "title": "java-o-n",
                "content": "Starting from the left, the amount of \\'c\\' can not exceed that of \\'b\\', and so can\\'t \\'b\\' exceed \\'a\\'\\n```\\npublic boolean isValid(String S) {\\n        int[] nums = new int[3];\\n        for(char c:S.toCharArray()){\\n            int n = c-\\'a\\';nums[n]++;\\n            for(int i=n-1;i>=0;i--)\\n                if(nums[n]>nums[i]) return false;\\n        }\\n        return nums[0]==nums[1] && nums[1]==nums[2];\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean isValid(String S) {\\n        int[] nums = new int[3];\\n        for(char c:S.toCharArray()){\\n            int n = c-\\'a\\';nums[n]++;\\n            for(int i=n-1;i>=0;i--)\\n                if(nums[n]>nums[i]) return false;\\n        }\\n        return nums[0]==nums[1] && nums[1]==nums[2];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 248718,
                "title": "javascript-replace-solution",
                "content": "```js\\nconst isValid = (S) => {\\n    if (S.length < 3) return false;\\n    let current = S, replaced = S.replace(/abc/g, \\'\\');\\n    while (current !== replaced) {\\n        current = replaced;\\n        replaced = replaced.replace(/abc/g, \\'\\');\\n    }\\n    return replaced.length === 0;\\n};\\n```",
                "solutionTags": [],
                "code": "```js\\nconst isValid = (S) => {\\n    if (S.length < 3) return false;\\n    let current = S, replaced = S.replace(/abc/g, \\'\\');\\n    while (current !== replaced) {\\n        current = replaced;\\n        replaced = replaced.replace(/abc/g, \\'\\');\\n    }\\n    return replaced.length === 0;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 248547,
                "title": "stack-o-n-c",
                "content": "``` bool isValid(string S) {\\n        vector<char> v;\\n        for (auto x : S) {\\n            if (x == \\'a\\' || x == \\'b\\') {\\n                v.push_back(x);\\n                continue;\\n            } else if (x == \\'c\\') {\\n                int n = v.size();\\n                if (n >= 2 && v[n-1] == \\'b\\' && v[n-2] == \\'a\\') {\\n                    v.pop_back();\\n                    v.pop_back();\\n                    continue;\\n                }\\n            } \\n            return false;  \\n        }\\n        return v.empty();\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "``` bool isValid(string S) {\\n        vector<char> v;\\n        for (auto x : S) {\\n            if (x == \\'a\\' || x == \\'b\\') {\\n                v.push_back(x);\\n                continue;\\n            } else if (x == \\'c\\') {\\n                int n = v.size();\\n                if (n >= 2 && v[n-1] == \\'b\\' && v[n-2] == \\'a\\') {\\n                    v.pop_back();\\n                    v.pop_back();\\n                    continue;\\n                }\\n            } \\n            return false;  \\n        }\\n        return v.empty();\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 248329,
                "title": "w-java-stupid-question",
                "content": "Just did a replace for abc and keep looping the same till any occurence of \"abc\" is present.\\n```\\npublic boolean isValid(String S) {\\n        while(S.contains(\"abc\")) {\\n            S = S.replace(\"abc\", \"\");\\n        }\\n        return S.length() == 0; \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean isValid(String S) {\\n        while(S.contains(\"abc\")) {\\n            S = S.replace(\"abc\", \"\");\\n        }\\n        return S.length() == 0; \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 248236,
                "title": "java-solution-using-stack-with-explanation",
                "content": "We always push \\'a\\' to the stack, no matter what is on the top of the stack. For \\'b\\' we have to check that the stack is not empty and the top item is \"a\", then we pop \"a\" and push \"ab\" to the stack. For \\'c\\' we have to check that the stack is not empty and the top item is \"ab\", then we pop this item because we have just encountered a valid string \"abc\" and we have to remove it. At the end we check whether the stack is empty, because for a valid string, all the \"abc\" strings have to be popped from the stack.\\n\\n```\\npublic boolean isValid(String S) {\\n    Stack<String> stack = new Stack<>();\\n    for (char ch : S.toCharArray()) {\\n        switch (ch) {\\n            case \\'a\\':\\n                stack.push(\"a\");\\n                break;\\n            case \\'b\\':\\n                if (stack.isEmpty() || !stack.peek().equals(\"a\")) {\\n                    return false;\\n                }\\n                stack.push(stack.pop() + \"b\");\\n                break;\\n            case \\'c\\':\\n                if (stack.isEmpty() || !stack.peek().equals(\"ab\")) {\\n                    return false;\\n                }\\n                stack.pop();\\n                break;\\n            default:\\n                throw new IllegalArgumentException(\"Not possible!\");\\n        }\\n    }\\n    return stack.isEmpty();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic boolean isValid(String S) {\\n    Stack<String> stack = new Stack<>();\\n    for (char ch : S.toCharArray()) {\\n        switch (ch) {\\n            case \\'a\\':\\n                stack.push(\"a\");\\n                break;\\n            case \\'b\\':\\n                if (stack.isEmpty() || !stack.peek().equals(\"a\")) {\\n                    return false;\\n                }\\n                stack.push(stack.pop() + \"b\");\\n                break;\\n            case \\'c\\':\\n                if (stack.isEmpty() || !stack.peek().equals(\"ab\")) {\\n                    return false;\\n                }\\n                stack.pop();\\n                break;\\n            default:\\n                throw new IllegalArgumentException(\"Not possible!\");\\n        }\\n    }\\n    return stack.isEmpty();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 247824,
                "title": "java-stack-solution",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char cur = s.charAt(i);\\n            if (cur == \\'a\\' || cur == \\'b\\') stack.push(cur);\\n            else {\\n                if (stack.isEmpty() || stack.peek() != \\'b\\') return false;\\n                stack.pop();\\n                if (stack.isEmpty() || stack.peek() != \\'a\\') return false;\\n                stack.pop();\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character> stack = new Stack<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char cur = s.charAt(i);\\n            if (cur == \\'a\\' || cur == \\'b\\') stack.push(cur);\\n            else {\\n                if (stack.isEmpty() || stack.peek() != \\'b\\') return false;\\n                stack.pop();\\n                if (stack.isEmpty() || stack.peek() != \\'a\\') return false;\\n                stack.pop();\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 247666,
                "title": "python-solution-o-n-time-o-1-space-easy-to-understand",
                "content": "```\\nclass Solution(object):\\n    def isValid(self, S):\\n        if len(S) <3:\\n            return False\\n        \\n        na = nb = nc = 0\\n        for c in S:\\n            if c == \\'a\\':\\n                na += 1\\n            elif c == \\'b\\':\\n                nb += 1\\n            else:\\n                nc += 1\\n            \\n            if nb > na or nc > na or nc > nb:\\n                return False\\n        return na == nb == nc\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def isValid(self, S):\\n        if len(S) <3:\\n            return False\\n        \\n        na = nb = nc = 0\\n        for c in S:\\n            if c == \\'a\\':\\n                na += 1\\n            elif c == \\'b\\':\\n                nb += 1\\n            else:\\n                nc += 1\\n            \\n            if nb > na or nc > na or nc > nb:\\n                return False\\n        return na == nb == nc\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4097834,
                "title": "simple-python-3-line-solution-beats-99-68-users-in-memory-and-89-59-users-in-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while(\"abc\" in s):\\n            s=s.replace(\"abc\",\"\")\\n        return True if len(s)==0 else False\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def isValid(self, s: str) -> bool:\\n        while(\"abc\" in s):\\n            s=s.replace(\"abc\",\"\")\\n        return True if len(s)==0 else False\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076776,
                "title": "beats-95-5-simple-approach",
                "content": "# Intuition\\nThis code is designed to check if a given string s follows a specific pattern. The pattern consists of \"a\"s followed by \"b\"s, and each \"b\" is preceded by an \"a\". The code uses a stack data structure to keep track of the characters in the string while processing it.\\n\\n# Approach\\nThe code starts by checking if the first character of the string s is \\'a\\'. If it\\'s not, the function returns false immediately.\\n\\nIt then initializes an empty stack st to help keep track of the characters as it processes the string.\\n\\nIt iterates through each character ch in the string:\\n\\nIf ch is \\'a\\', it pushes \\'a\\' onto the stack.\\nIf ch is \\'b\\', it checks if the stack is not empty and the top of the stack is \\'a\\'. If so, it pushes \\'b\\' onto the stack.\\nIf ch is neither \\'a\\' nor \\'b\\', it returns false because the string contains invalid characters.\\nAfter processing all characters, the code checks if the stack is empty. If the stack is empty, it means that the string has been properly matched according to the pattern, and the function returns true. Otherwise, it returns false.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n        if(s[0]!= \\'a\\') return false;\\n\\n        stack<char> st;\\n\\n        for(char ch:s) {\\n            if(ch == \\'a\\') {\\n                st.push(ch);\\n            }\\n            else if(ch == \\'b\\') {\\n                if(!st.empty() && st.top() == \\'a\\') {\\n                    st.push(ch);\\n                } \\n                else {\\n                    return false;\\n                }\\n            }\\n            else {\\n                if(!st.empty() && st.top() == \\'b\\') {\\n                    st.pop();\\n                    if(!st.empty() && st.top() == \\'a\\') {\\n                        st.pop();\\n                    }\\n                    else {\\n                        return false;\\n                    }\\n                }\\n                else {\\n                    return false;\\n                }\\n            }\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n        if(s[0]!= \\'a\\') return false;\\n\\n        stack<char> st;\\n\\n        for(char ch:s) {\\n            if(ch == \\'a\\') {\\n                st.push(ch);\\n            }\\n            else if(ch == \\'b\\') {\\n                if(!st.empty() && st.top() == \\'a\\') {\\n                    st.push(ch);\\n                } \\n                else {\\n                    return false;\\n                }\\n            }\\n            else {\\n                if(!st.empty() && st.top() == \\'b\\') {\\n                    st.pop();\\n                    if(!st.empty() && st.top() == \\'a\\') {\\n                        st.pop();\\n                    }\\n                    else {\\n                        return false;\\n                    }\\n                }\\n                else {\\n                    return false;\\n                }\\n            }\\n        }\\n        return st.empty();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070854,
                "title": "vector-simple-fast-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ntake one vector to check last element is present or not ,\\nif char is c then it means there are a and b are present if they are not consecutive to c -b then it is not valid ,\\nif during pop operation of b and c if vector is empty then it it is not valid \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\no(n) for worst case ,else o(1);\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nbool isValid(string s) {\\n    int n=s.size();\\n    if(n%3!=0) return false;\\n\\n    // stack<char>st;\\n    vector<char>st;\\n    for(int i=0;i<n;i++){\\n        if(s[i]==\\'c\\' && !st.empty()) {\\n            char top1=st.back();st.pop_back();\\n            if(st.empty()) return false;\\n            char top2=st.back();st.pop_back();\\n\\n            if(top1==\\'b\\' && top2==\\'a\\') continue;\\n            else return false;\\n        }\\n        else st.push_back(s[i]);\\n    }\\n    if(!st.empty())return false;\\n    return true;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nbool isValid(string s) {\\n    int n=s.size();\\n    if(n%3!=0) return false;\\n\\n    // stack<char>st;\\n    vector<char>st;\\n    for(int i=0;i<n;i++){\\n        if(s[i]==\\'c\\' && !st.empty()) {\\n            char top1=st.back();st.pop_back();\\n            if(st.empty()) return false;\\n            char top2=st.back();st.pop_back();\\n\\n            if(top1==\\'b\\' && top2==\\'a\\') continue;\\n            else return false;\\n        }\\n        else st.push_back(s[i]);\\n    }\\n    if(!st.empty())return false;\\n    return true;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063688,
                "title": "golang-stack-implementation",
                "content": "# Code\\n```\\nimport \"unicode/utf8\"\\n\\ntype Stack struct {\\n\\ttop  int\\n\\tdata []rune\\n}\\n\\nfunc NewStack(maxSize int) *Stack {\\n\\tdata := make([]rune, maxSize)\\n\\treturn &Stack{\\n\\t\\ttop:  -1,\\n\\t\\tdata: data,\\n\\t}\\n}\\n\\nfunc (s *Stack) push(ch rune) {\\n\\ts.data[s.top+1] = ch\\n\\ts.top++\\n\\n}\\n\\nfunc (s *Stack) peek(depth int) rune {\\n\\treturn s.data[s.top-depth]\\n}\\n\\nfunc (s *Stack) pop() rune {\\n\\tdefer func() {\\n\\t\\ts.top--\\n\\t}()\\n\\treturn s.data[s.top]\\n}\\n\\nfunc (s *Stack) isEmpty() bool {\\n\\treturn s.top == -1\\n}\\n\\nfunc (s *Stack) size() int {\\n\\treturn s.top + 1\\n}\\n\\nfunc isValid(s string) bool {\\n\\tn := utf8.RuneCountInString(s) // len(s) can also be used in this case as the characters are known at compile time. But len(s) may give unexpected results sometimes.\\n    // For example : s = \"\\xA3\", then len(s) returns 2, whereas RuneCountInString(s) returns 1\\n\\n\\tif s[0] != \\'a\\' || s[n-1] != \\'c\\' {\\n\\t\\treturn false\\n\\t}\\n\\n\\tstack := NewStack(n)\\n\\tinput := []rune(s)\\n\\tfor i := 0; i < n; i++ {\\n\\t\\t\\n\\t\\t// if the char is \\'a\\' or \\'b\\'\\n\\t\\tif input[i] == \\'a\\' || input[i] == \\'b\\' {\\n\\t\\t\\tstack.push(input[i])\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// if the char is \\'c\\'\\n\\t\\t\\n\\t\\tif stack.size() < 2 {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\n\\t\\tif stack.peek(0) != \\'b\\' || stack.peek(1) != \\'a\\' {\\n\\t\\t\\treturn false\\n\\t\\t} \\n\\t\\t\\n\\t\\tstack.pop()\\n\\t\\tstack.pop()\\n\\t}\\n\\n\\treturn stack.isEmpty()\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nimport \"unicode/utf8\"\\n\\ntype Stack struct {\\n\\ttop  int\\n\\tdata []rune\\n}\\n\\nfunc NewStack(maxSize int) *Stack {\\n\\tdata := make([]rune, maxSize)\\n\\treturn &Stack{\\n\\t\\ttop:  -1,\\n\\t\\tdata: data,\\n\\t}\\n}\\n\\nfunc (s *Stack) push(ch rune) {\\n\\ts.data[s.top+1] = ch\\n\\ts.top++\\n\\n}\\n\\nfunc (s *Stack) peek(depth int) rune {\\n\\treturn s.data[s.top-depth]\\n}\\n\\nfunc (s *Stack) pop() rune {\\n\\tdefer func() {\\n\\t\\ts.top--\\n\\t}()\\n\\treturn s.data[s.top]\\n}\\n\\nfunc (s *Stack) isEmpty() bool {\\n\\treturn s.top == -1\\n}\\n\\nfunc (s *Stack) size() int {\\n\\treturn s.top + 1\\n}\\n\\nfunc isValid(s string) bool {\\n\\tn := utf8.RuneCountInString(s) // len(s) can also be used in this case as the characters are known at compile time. But len(s) may give unexpected results sometimes.\\n    // For example : s = \"\\xA3\", then len(s) returns 2, whereas RuneCountInString(s) returns 1\\n\\n\\tif s[0] != \\'a\\' || s[n-1] != \\'c\\' {\\n\\t\\treturn false\\n\\t}\\n\\n\\tstack := NewStack(n)\\n\\tinput := []rune(s)\\n\\tfor i := 0; i < n; i++ {\\n\\t\\t\\n\\t\\t// if the char is \\'a\\' or \\'b\\'\\n\\t\\tif input[i] == \\'a\\' || input[i] == \\'b\\' {\\n\\t\\t\\tstack.push(input[i])\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t// if the char is \\'c\\'\\n\\t\\t\\n\\t\\tif stack.size() < 2 {\\n\\t\\t\\treturn false\\n\\t\\t}\\n\\n\\t\\tif stack.peek(0) != \\'b\\' || stack.peek(1) != \\'a\\' {\\n\\t\\t\\treturn false\\n\\t\\t} \\n\\t\\t\\n\\t\\tstack.pop()\\n\\t\\tstack.pop()\\n\\t}\\n\\n\\treturn stack.isEmpty()\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4050775,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s.length()<3)\\n        {\\n            return false;\\n        }\\n        else if(s.length()==3)\\n        {\\n            if(s==\"abc\")\\n            {\\n                return true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        stack<char>st;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\'a\\' or s[i]==\\'b\\')\\n            {\\n                st.push(s[i]);\\n            }\\n            else\\n            {\\n                if(st.size()<2)\\n                {\\n                    st.push(s[i]);\\n                }\\n                else\\n                {\\n                    char c1=st.top();\\n                    st.pop();\\n                    char c2=st.top();\\n                    st.pop();\\n                    if(c1==\\'b\\' and c2==\\'a\\')\\n                    {\\n                        continue;\\n                    }\\n                    else\\n                    {\\n                        st.push(c2);\\n                        st.push(c1);\\n                        st.push(s[i]);\\n                    }\\n                }\\n            }\\n        }\\n        if(st.empty())\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s.length()<3)\\n        {\\n            return false;\\n        }\\n        else if(s.length()==3)\\n        {\\n            if(s==\"abc\")\\n            {\\n                return true;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        stack<char>st;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]==\\'a\\' or s[i]==\\'b\\')\\n            {\\n                st.push(s[i]);\\n            }\\n            else\\n            {\\n                if(st.size()<2)\\n                {\\n                    st.push(s[i]);\\n                }\\n                else\\n                {\\n                    char c1=st.top();\\n                    st.pop();\\n                    char c2=st.top();\\n                    st.pop();\\n                    if(c1==\\'b\\' and c2==\\'a\\')\\n                    {\\n                        continue;\\n                    }\\n                    else\\n                    {\\n                        st.push(c2);\\n                        st.push(c1);\\n                        st.push(s[i]);\\n                    }\\n                }\\n            }\\n        }\\n        if(st.empty())\\n        {\\n            return true;\\n        }\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040725,
                "title": "simple-stack-intuitive-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n\\n        for(auto it:s)\\n        {   st.push(it);\\n            if(it==\\'c\\')\\n            {\\n                if(st.size()>=3)\\n                {\\n                    char x=st.top();\\n                    st.pop();\\n                     char y=st.top();\\n                    st.pop();\\n                     char z=st.top();\\n                    st.pop();\\n\\n                    if(y==\\'b\\' && z==\\'a\\')\\n                    continue;\\n                    else\\n                    return false;\\n                }\\n                else\\n                return false;\\n            }\\n        }\\n\\n        return st.size()==0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char>st;\\n\\n        for(auto it:s)\\n        {   st.push(it);\\n            if(it==\\'c\\')\\n            {\\n                if(st.size()>=3)\\n                {\\n                    char x=st.top();\\n                    st.pop();\\n                     char y=st.top();\\n                    st.pop();\\n                     char z=st.top();\\n                    st.pop();\\n\\n                    if(y==\\'b\\' && z==\\'a\\')\\n                    continue;\\n                    else\\n                    return false;\\n                }\\n                else\\n                return false;\\n            }\\n        }\\n\\n        return st.size()==0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4025340,
                "title": "c-easy-brute-force-approach-just-do-what-ask",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      int sz=s.size();\\n      \\n        for(int i=sz-1;i>=0;i--)\\n         {\\n            //if it is \\'a\\' then we can start extracting \"abc\"from string\\n              if(s[i]==\\'a\\')\\n                {\\n                  //we exctract 3 character from \\'a\\' \\n                     string str1=s.substr(i,3);\\n                    //if it not \"abc\" then we return false becuase in the question it is given that string is concat of \"abc\"\\n                       if(str1!=\"abc\")\\n                                 return false;\\n                                 //otherwise we reduce out string and erase \"abc\" from it\\n                    s=s.substr(0,i)+s.substr(i+3);\\n                    \\n                \\n                }\\n         }\\n         //if the string is greater then 0 then we return false othwerise we return true string is empty \"\" and we reach result\\n       \\n         return s.size()==0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n      int sz=s.size();\\n      \\n        for(int i=sz-1;i>=0;i--)\\n         {\\n            //if it is \\'a\\' then we can start extracting \"abc\"from string\\n              if(s[i]==\\'a\\')\\n                {\\n                  //we exctract 3 character from \\'a\\' \\n                     string str1=s.substr(i,3);\\n                    //if it not \"abc\" then we return false becuase in the question it is given that string is concat of \"abc\"\\n                       if(str1!=\"abc\")\\n                                 return false;\\n                                 //otherwise we reduce out string and erase \"abc\" from it\\n                    s=s.substr(0,i)+s.substr(i+3);\\n                    \\n                \\n                }\\n         }\\n         //if the string is greater then 0 then we return false othwerise we return true string is empty \"\" and we reach result\\n       \\n         return s.size()==0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4021586,
                "title": "easy-beginner-friendly-recursion-naive-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nRemove all occurances of abc from given string.\\nBasically transform s into t ie...convert given string into empty string.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse STL find() to get the first occurance of \"abc\". Now divide the string into 2 parts. First part before the starting index of \"abc\" and the second part after \"abc\". \\nNow call recursion for our new string without \"abc\". If string size becomes 0, then return true.\\n\\n\\n# Complexity\\n- Time complexity: O(N*N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n- Space complexity: O(N) -> recursive space\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s.size()==0)\\n            return true;\\n        \\n        int n = s.length();\\n        int find = s.find(\"abc\");\\n        if(find != string :: npos)\\n        {\\n            string t1 = s.substr(0, find); //1st part before \"abc\"\\n            string t2 = s.substr(find+3, n); //2nd part after \"abc\"\\n\\n            return isValid(t1+t2); \\n        }\\n\\n        return false;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        if(s.size()==0)\\n            return true;\\n        \\n        int n = s.length();\\n        int find = s.find(\"abc\");\\n        if(find != string :: npos)\\n        {\\n            string t1 = s.substr(0, find); //1st part before \"abc\"\\n            string t2 = s.substr(find+3, n); //2nd part after \"abc\"\\n\\n            return isValid(t1+t2); \\n        }\\n\\n        return false;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4017601,
                "title": "swift-optimal-beating-50-users",
                "content": "# Intuition\\nTo replace the occurences of \"abc\" and finally check the given string.\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    func isValid(_ s: String) -> Bool {\\n        // ss is a copy of s that can be modified\\n        var ss = s\\n        // as long as ss has \"abc\"\\n        while ss.contains(\"abc\"){\\n            if ss.contains(\"abc\"){\\n                // replacing \"abc\"s with blanks as many times found\\n                ss = ss.replacingOccurrences(of: \"abc\", with: \"\")\\n            }\\n        }\\n        // returning an emoty (true) ss means the format was valid, else invalid\\n        return ss.isEmpty\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\n    func isValid(_ s: String) -> Bool {\\n        // ss is a copy of s that can be modified\\n        var ss = s\\n        // as long as ss has \"abc\"\\n        while ss.contains(\"abc\"){\\n            if ss.contains(\"abc\"){\\n                // replacing \"abc\"s with blanks as many times found\\n                ss = ss.replacingOccurrences(of: \"abc\", with: \"\")\\n            }\\n        }\\n        // returning an emoty (true) ss means the format was valid, else invalid\\n        return ss.isEmpty\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011372,
                "title": "c-easy-memory-beating-98-users-with-comments",
                "content": "# Intuition\\nTo check the given string multiple times and manipulate to see if the \"abc\" pattern still exists.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        // as long as s has \\'abc\\'\\n        while(s.find(\"abc\") != string::npos){\\n            if(s.find(\"abc\") != string::npos){\\n                // replacing the \\'abc\\' of s with blank space every time found\\n                s = s.replace(s.find(\"abc\"), sizeof(\"abc\") - 1, \"\");\\n            }\\n        }\\n        // finally checking if s was supposed to remain valid after replacing those \\'abc\\'s (one or more as given inside s)\\n        return s.empty();\\n            }\\n    };\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        // as long as s has \\'abc\\'\\n        while(s.find(\"abc\") != string::npos){\\n            if(s.find(\"abc\") != string::npos){\\n                // replacing the \\'abc\\' of s with blank space every time found\\n                s = s.replace(s.find(\"abc\"), sizeof(\"abc\") - 1, \"\");\\n            }\\n        }\\n        // finally checking if s was supposed to remain valid after replacing those \\'abc\\'s (one or more as given inside s)\\n        return s.empty();\\n            }\\n    };\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4011049,
                "title": "c-stack-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n = s.size();\\n        stack<char> st;\\n        for(int i=0;i<n;i++){\\n            if(!st.empty() && s[i]==\\'c\\' && st.top()==\\'b\\'){\\n                st.pop();\\n                if(st.empty()){\\n                    st.push(\\'b\\');\\n                    st.push(\\'c\\');\\n                }\\n                else{\\n                    char ch = st.top();\\n                    st.pop();\\n                    if(ch !=\\'a\\'){\\n                        st.push(ch);\\n                        st.push(\\'b\\');\\n                        st.push(\\'c\\');\\n                    }\\n                }\\n            }\\n            else{\\n            st.push(s[i]);\\n            }\\n        }\\n        if(st.empty()) return true;\\n        return false;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        int n = s.size();\\n        stack<char> st;\\n        for(int i=0;i<n;i++){\\n            if(!st.empty() && s[i]==\\'c\\' && st.top()==\\'b\\'){\\n                st.pop();\\n                if(st.empty()){\\n                    st.push(\\'b\\');\\n                    st.push(\\'c\\');\\n                }\\n                else{\\n                    char ch = st.top();\\n                    st.pop();\\n                    if(ch !=\\'a\\'){\\n                        st.push(ch);\\n                        st.push(\\'b\\');\\n                        st.push(\\'c\\');\\n                    }\\n                }\\n            }\\n            else{\\n            st.push(s[i]);\\n            }\\n        }\\n        if(st.empty()) return true;\\n        return false;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4002844,
                "title": "concise-and-clear-code-using-stack-in-java",
                "content": "# Intuition\\nJust a simple approach man we need to check for the string \"abc\" so keep storing \\'a\\' and \\'b\\' in stack but as soon as you get \\'c\\' , pop \\'b\\' and \\'a\\' from the stack and if you finds that the top of the stack doesn\\'t have \\'b\\' and \\'a\\' at the top or the stack is empty then simply return false and at the end if the stack is not empty return false otherwise return true.\\n\\n# Complexity\\n- Time complexity:\\n  O(n)\\n\\n- Space complexity:\\n  O(n)\\n\\n# Code\\n```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character>stack = new Stack<>();\\n        for(char ch:s.toCharArray()){\\n            if(ch!=\\'c\\') stack.push(ch);\\n            else{\\n                if(stack.isEmpty() || stack.pop()!=\\'b\\') return false;\\n                if(stack.isEmpty() || stack.pop()!=\\'a\\') return false;\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) {\\n        Stack<Character>stack = new Stack<>();\\n        for(char ch:s.toCharArray()){\\n            if(ch!=\\'c\\') stack.push(ch);\\n            else{\\n                if(stack.isEmpty() || stack.pop()!=\\'b\\') return false;\\n                if(stack.isEmpty() || stack.pop()!=\\'a\\') return false;\\n            }\\n        }\\n        return stack.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4000091,
                "title": "easy-brute-force-java-solution",
                "content": "```\\nclass Solution {\\n    public boolean isValid(String s) \\n    {\\n     Stack<Character> st=new Stack<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(st.size()<=1)\\n            {\\n                st.push(s.charAt(i));\\n            }\\n            else\\n            {\\n                char c=s.charAt(i);\\n                char b=st.pop();\\n                char a=st.pop();\\n                String temp=a+\"\"+b+\"\"+c+\"\";\\n                if(temp.equals(\"abc\")==false)\\n                {\\n                    st.push(a);\\n                    st.push(b);\\n                    st.push(c);\\n                }\\n                \\n            }\\n                \\n        }\\n        // System.out.println(st);\\n        return st.isEmpty();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isValid(String s) \\n    {\\n     Stack<Character> st=new Stack<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(st.size()<=1)\\n            {\\n                st.push(s.charAt(i));\\n            }\\n            else\\n            {\\n                char c=s.charAt(i);\\n                char b=st.pop();\\n                char a=st.pop();\\n                String temp=a+\"\"+b+\"\"+c+\"\";\\n                if(temp.equals(\"abc\")==false)\\n                {\\n                    st.push(a);\\n                    st.push(b);\\n                    st.push(c);\\n                }\\n                \\n            }\\n                \\n        }\\n        // System.out.println(st);\\n        return st.isEmpty();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3998418,
                "title": "check-if-word-is-valid-after-substitutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n-  A naive approach to validating a string involves repeatedly removing \\'abc\\' triplets from the string until no more can be removed.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Brute Force Approach (O(N^2)): A naive approach to validating a string involves repeatedly removing \\'abc\\' triplets from the string until no more can be removed. This method has a time complexity of O(N^2), as it may require multiple passes through the string, with each pass potentially removing one or more triplets.\\n\\n\\n- Optimal Approach (O(N)): The optimal solution uses a stack to efficiently validate the string in a single pass. It checks each character against the \\'abc\\' pattern, popping \\'ba\\' when \\'c\\' is encountered. This approach has a linear time complexity of O(N), where N is the length of the input string, making it more efficient and scalable than the brute force method.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- n\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st; // Initialize a stack to keep track of characters.\\n\\n        for (int i = 0; i < s.size(); i++) {\\n            if (s[i] == \\'c\\') { // If the current character is \\'c\\'.\\n                if (st.size() >= 2 && st.top() == \\'b\\') { // Check if there are at least two characters in the stack and the top character is \\'b\\'.\\n                    st.pop(); // Pop \\'b\\'.\\n                    if (st.top() == \\'a\\') { // Check if the character before \\'b\\' is \\'a\\'.\\n                        st.pop(); // Pop \\'a\\'.\\n                    } else {\\n                        return false; // Invalid sequence if \\'a\\' is not before \\'b\\'.\\n                    }\\n                } else {\\n                    return false; // Invalid sequence if \\'b\\' is not on top of the stack or there are fewer than two characters in the stack.\\n                }\\n            } else {\\n                st.push(s[i]); // Push characters other than \\'c\\' onto the stack.\\n            }\\n        }\\n\\n        return st.empty(); // If the stack is empty at the end, the string is valid; otherwise, it\\'s not valid.\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Stack"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    bool isValid(string s) {\\n        stack<char> st; // Initialize a stack to keep track of characters.\\n\\n        for (int i = 0; i < s.size(); i++) {\\n            if (s[i] == \\'c\\') { // If the current character is \\'c\\'.\\n                if (st.size() >= 2 && st.top() == \\'b\\') { // Check if there are at least two characters in the stack and the top character is \\'b\\'.\\n                    st.pop(); // Pop \\'b\\'.\\n                    if (st.top() == \\'a\\') { // Check if the character before \\'b\\' is \\'a\\'.\\n                        st.pop(); // Pop \\'a\\'.\\n                    } else {\\n                        return false; // Invalid sequence if \\'a\\' is not before \\'b\\'.\\n                    }\\n                } else {\\n                    return false; // Invalid sequence if \\'b\\' is not on top of the stack or there are fewer than two characters in the stack.\\n                }\\n            } else {\\n                st.push(s[i]); // Push characters other than \\'c\\' onto the stack.\\n            }\\n        }\\n\\n        return st.empty(); // If the stack is empty at the end, the string is valid; otherwise, it\\'s not valid.\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1570083,
                "content": [
                    {
                        "username": "karthikn82P",
                        "content": "bool isValid(string S) {\\n\\twhile (S.size() != 0) {\\n\\t\\tint rPos = S.find(\"abc\");\\n\\t\\tif (rPos == std::string::npos) return false;\\n\\t\\tS.replace(rPos, 3, \"\");\\n\\t}\\n\\treturn true;\\n\\n}"
                    },
                    {
                        "username": "Msey",
                        "content": "If I can make it then it means the problem is easy"
                    },
                    {
                        "username": "francechaipeelo",
                        "content": "We can split it to \\n\"a\" + \"ab\" + \"bc\" + \"c\"\\n\\nThe first and third are valid splits and second and third are valid."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Its time to revise your stl functions guys"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Took a bit of thinking, problem turned out easier than it appeared."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "This should be marked as easy, there are no advanced skills required. And the time constraint is easy not difficult either."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "I don\\'t think this problem is easy."
                    }
                ]
            },
            {
                "id": 1849248,
                "content": [
                    {
                        "username": "karthikn82P",
                        "content": "bool isValid(string S) {\\n\\twhile (S.size() != 0) {\\n\\t\\tint rPos = S.find(\"abc\");\\n\\t\\tif (rPos == std::string::npos) return false;\\n\\t\\tS.replace(rPos, 3, \"\");\\n\\t}\\n\\treturn true;\\n\\n}"
                    },
                    {
                        "username": "Msey",
                        "content": "If I can make it then it means the problem is easy"
                    },
                    {
                        "username": "francechaipeelo",
                        "content": "We can split it to \\n\"a\" + \"ab\" + \"bc\" + \"c\"\\n\\nThe first and third are valid splits and second and third are valid."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Its time to revise your stl functions guys"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Took a bit of thinking, problem turned out easier than it appeared."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "This should be marked as easy, there are no advanced skills required. And the time constraint is easy not difficult either."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "I don\\'t think this problem is easy."
                    }
                ]
            },
            {
                "id": 1572504,
                "content": [
                    {
                        "username": "karthikn82P",
                        "content": "bool isValid(string S) {\\n\\twhile (S.size() != 0) {\\n\\t\\tint rPos = S.find(\"abc\");\\n\\t\\tif (rPos == std::string::npos) return false;\\n\\t\\tS.replace(rPos, 3, \"\");\\n\\t}\\n\\treturn true;\\n\\n}"
                    },
                    {
                        "username": "Msey",
                        "content": "If I can make it then it means the problem is easy"
                    },
                    {
                        "username": "francechaipeelo",
                        "content": "We can split it to \\n\"a\" + \"ab\" + \"bc\" + \"c\"\\n\\nThe first and third are valid splits and second and third are valid."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Its time to revise your stl functions guys"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Took a bit of thinking, problem turned out easier than it appeared."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "This should be marked as easy, there are no advanced skills required. And the time constraint is easy not difficult either."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "I don\\'t think this problem is easy."
                    }
                ]
            },
            {
                "id": 1948758,
                "content": [
                    {
                        "username": "karthikn82P",
                        "content": "bool isValid(string S) {\\n\\twhile (S.size() != 0) {\\n\\t\\tint rPos = S.find(\"abc\");\\n\\t\\tif (rPos == std::string::npos) return false;\\n\\t\\tS.replace(rPos, 3, \"\");\\n\\t}\\n\\treturn true;\\n\\n}"
                    },
                    {
                        "username": "Msey",
                        "content": "If I can make it then it means the problem is easy"
                    },
                    {
                        "username": "francechaipeelo",
                        "content": "We can split it to \\n\"a\" + \"ab\" + \"bc\" + \"c\"\\n\\nThe first and third are valid splits and second and third are valid."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Its time to revise your stl functions guys"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Took a bit of thinking, problem turned out easier than it appeared."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "This should be marked as easy, there are no advanced skills required. And the time constraint is easy not difficult either."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "I don\\'t think this problem is easy."
                    }
                ]
            },
            {
                "id": 1947358,
                "content": [
                    {
                        "username": "karthikn82P",
                        "content": "bool isValid(string S) {\\n\\twhile (S.size() != 0) {\\n\\t\\tint rPos = S.find(\"abc\");\\n\\t\\tif (rPos == std::string::npos) return false;\\n\\t\\tS.replace(rPos, 3, \"\");\\n\\t}\\n\\treturn true;\\n\\n}"
                    },
                    {
                        "username": "Msey",
                        "content": "If I can make it then it means the problem is easy"
                    },
                    {
                        "username": "francechaipeelo",
                        "content": "We can split it to \\n\"a\" + \"ab\" + \"bc\" + \"c\"\\n\\nThe first and third are valid splits and second and third are valid."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Its time to revise your stl functions guys"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Took a bit of thinking, problem turned out easier than it appeared."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "This should be marked as easy, there are no advanced skills required. And the time constraint is easy not difficult either."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "I don\\'t think this problem is easy."
                    }
                ]
            },
            {
                "id": 1821995,
                "content": [
                    {
                        "username": "karthikn82P",
                        "content": "bool isValid(string S) {\\n\\twhile (S.size() != 0) {\\n\\t\\tint rPos = S.find(\"abc\");\\n\\t\\tif (rPos == std::string::npos) return false;\\n\\t\\tS.replace(rPos, 3, \"\");\\n\\t}\\n\\treturn true;\\n\\n}"
                    },
                    {
                        "username": "Msey",
                        "content": "If I can make it then it means the problem is easy"
                    },
                    {
                        "username": "francechaipeelo",
                        "content": "We can split it to \\n\"a\" + \"ab\" + \"bc\" + \"c\"\\n\\nThe first and third are valid splits and second and third are valid."
                    },
                    {
                        "username": "geekyshark",
                        "content": "Its time to revise your stl functions guys"
                    },
                    {
                        "username": "yeedaKing",
                        "content": "Took a bit of thinking, problem turned out easier than it appeared."
                    },
                    {
                        "username": "Mister_CK",
                        "content": "This should be marked as easy, there are no advanced skills required. And the time constraint is easy not difficult either."
                    },
                    {
                        "username": "Jason-Law",
                        "content": "I don\\'t think this problem is easy."
                    }
                ]
            }
        ]
    }
]